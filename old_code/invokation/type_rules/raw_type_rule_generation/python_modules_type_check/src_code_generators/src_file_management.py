import os

from stypy import stypy_parameters
from stypy.python_lib.type_rules.raw_type_rule_generation.python_modules_type_check.src_writers.source_code_models import \
    class_postfix

python_lib_types_path = "/python_lib/type_rules/"
module_type_members_path = "/"

type_rules_file_postfix = "__type_rules.py"
error_file_postfix = "__errors.txt"
type_member_file_postfix = "__type_members.py"


def prepare_destination_files(cathegory_name, entity_name):
    """
    Internal function to create various file data to write autogenerated code
    """
    base_path = stypy_parameters.ROOT_PATH.replace('\\', '/') + python_lib_types_path

    # Calculate file paths
    rule_file = base_path + cathegory_name + "/" + entity_name + "/" + entity_name \
                + type_rules_file_postfix

    postfix = "__" + cathegory_name[0:-1]

    code_file = base_path + cathegory_name + "/" + entity_name + "/" + entity_name + postfix + ".py"
    error_file = base_path + cathegory_name + "/" + entity_name + "/" + entity_name \
                 + error_file_postfix

    type_members_file = base_path + cathegory_name + "/" + entity_name + "/" + entity_name \
                        + type_member_file_postfix

    # Ensure writing path exist
    file_path = os.path.dirname(rule_file)
    if not os.path.exists(file_path):
        os.makedirs(file_path)

    # Write init file to convert destination path into a module
    init_file = base_path + cathegory_name + "/" + entity_name + "/" + "__init__.py"
    if not os.path.isfile(init_file):
        with open(init_file, "w") as finit:
            finit.write("")

    return rule_file, code_file, error_file, type_members_file


def __write_init_file(path):
    # Write init file to convert destination path into a module
    init_file = path + "/" + "__init__.py"
    if not os.path.isfile(init_file):
        with open(init_file, "w") as finit:
            finit.write("")


def prepare_destination_files_for_type_member(cathegory_name, entity_name, type_member):
    """
    Internal function to create various file data to write autogenerated code
    cathegory: "module"
    entity: <module_name>
    type_member: <name of the type>
    """
    base_path = stypy_parameters.ROOT_PATH.replace('\\', '/') + python_lib_types_path

    # Calculate file paths
    rule_file = base_path + cathegory_name + "/" + entity_name + module_type_members_path + type_member + "/" + type_member \
                + type_rules_file_postfix

    code_file = base_path + cathegory_name + "/" + entity_name + module_type_members_path + type_member + "/" + type_member + \
                class_postfix + ".py"

    error_file = base_path + cathegory_name + "/" + entity_name + module_type_members_path + type_member + "/" + type_member \
                 + error_file_postfix

    # Ensure writing path exist
    file_path = os.path.dirname(rule_file)
    if not os.path.exists(file_path):
        os.makedirs(file_path)

    # Write init files to convert destination path into a module
    __write_init_file(base_path + cathegory_name + "/" + entity_name + module_type_members_path)
    __write_init_file(base_path + cathegory_name + "/" + entity_name + module_type_members_path + type_member)

    return rule_file, code_file, error_file


def prepare_destination_files_for_class(cathegory_name, entity_name, class_name):
    """
    Internal function to create various file data to write autogenerated code
    cathegory: "module"
    entity: <module_name>
    type_member: <name of the type>
    """
    base_path = stypy_parameters.ROOT_PATH.replace('\\', '/') + python_lib_types_path

    # Calculate file paths
    rule_file = base_path + cathegory_name + "/" + entity_name + "/" + class_name + "/" + class_name \
                + type_rules_file_postfix

    code_file = base_path + cathegory_name + "/" + entity_name + "/" + class_name + "/" + class_name \
                + class_postfix + ".py"

    error_file = base_path + cathegory_name + "/" + entity_name + "/" + class_name + "/" + class_name \
                 + error_file_postfix

    # Ensure writing path exist
    file_path = os.path.dirname(rule_file)
    if not os.path.exists(file_path):
        os.makedirs(file_path)

    # Write init files to convert destination path into a module
    __write_init_file(base_path + cathegory_name + "/" + entity_name)
    __write_init_file(base_path + cathegory_name + "/" + entity_name + "/" + class_name)

    return rule_file, code_file, error_file
