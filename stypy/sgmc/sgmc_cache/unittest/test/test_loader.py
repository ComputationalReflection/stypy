
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: import sys
2: import types
3: 
4: 
5: import unittest
6: 
7: 
8: class Test_TestLoader(unittest.TestCase):
9: 
10:     ### Tests for TestLoader.loadTestsFromTestCase
11:     ################################################################
12: 
13:     # "Return a suite of all tests cases contained in the TestCase-derived
14:     # class testCaseClass"
15:     def test_loadTestsFromTestCase(self):
16:         class Foo(unittest.TestCase):
17:             def test_1(self): pass
18:             def test_2(self): pass
19:             def foo_bar(self): pass
20: 
21:         tests = unittest.TestSuite([Foo('test_1'), Foo('test_2')])
22: 
23:         loader = unittest.TestLoader()
24:         self.assertEqual(loader.loadTestsFromTestCase(Foo), tests)
25: 
26:     # "Return a suite of all tests cases contained in the TestCase-derived
27:     # class testCaseClass"
28:     #
29:     # Make sure it does the right thing even if no tests were found
30:     def test_loadTestsFromTestCase__no_matches(self):
31:         class Foo(unittest.TestCase):
32:             def foo_bar(self): pass
33: 
34:         empty_suite = unittest.TestSuite()
35: 
36:         loader = unittest.TestLoader()
37:         self.assertEqual(loader.loadTestsFromTestCase(Foo), empty_suite)
38: 
39:     # "Return a suite of all tests cases contained in the TestCase-derived
40:     # class testCaseClass"
41:     #
42:     # What happens if loadTestsFromTestCase() is given an object
43:     # that isn't a subclass of TestCase? Specifically, what happens
44:     # if testCaseClass is a subclass of TestSuite?
45:     #
46:     # This is checked for specifically in the code, so we better add a
47:     # test for it.
48:     def test_loadTestsFromTestCase__TestSuite_subclass(self):
49:         class NotATestCase(unittest.TestSuite):
50:             pass
51: 
52:         loader = unittest.TestLoader()
53:         try:
54:             loader.loadTestsFromTestCase(NotATestCase)
55:         except TypeError:
56:             pass
57:         else:
58:             self.fail('Should raise TypeError')
59: 
60:     # "Return a suite of all tests cases contained in the TestCase-derived
61:     # class testCaseClass"
62:     #
63:     # Make sure loadTestsFromTestCase() picks up the default test method
64:     # name (as specified by TestCase), even though the method name does
65:     # not match the default TestLoader.testMethodPrefix string
66:     def test_loadTestsFromTestCase__default_method_name(self):
67:         class Foo(unittest.TestCase):
68:             def runTest(self):
69:                 pass
70: 
71:         loader = unittest.TestLoader()
72:         # This has to be false for the test to succeed
73:         self.assertFalse('runTest'.startswith(loader.testMethodPrefix))
74: 
75:         suite = loader.loadTestsFromTestCase(Foo)
76:         self.assertIsInstance(suite, loader.suiteClass)
77:         self.assertEqual(list(suite), [Foo('runTest')])
78: 
79:     ################################################################
80:     ### /Tests for TestLoader.loadTestsFromTestCase
81: 
82:     ### Tests for TestLoader.loadTestsFromModule
83:     ################################################################
84: 
85:     # "This method searches `module` for classes derived from TestCase"
86:     def test_loadTestsFromModule__TestCase_subclass(self):
87:         m = types.ModuleType('m')
88:         class MyTestCase(unittest.TestCase):
89:             def test(self):
90:                 pass
91:         m.testcase_1 = MyTestCase
92: 
93:         loader = unittest.TestLoader()
94:         suite = loader.loadTestsFromModule(m)
95:         self.assertIsInstance(suite, loader.suiteClass)
96: 
97:         expected = [loader.suiteClass([MyTestCase('test')])]
98:         self.assertEqual(list(suite), expected)
99: 
100:     # "This method searches `module` for classes derived from TestCase"
101:     #
102:     # What happens if no tests are found (no TestCase instances)?
103:     def test_loadTestsFromModule__no_TestCase_instances(self):
104:         m = types.ModuleType('m')
105: 
106:         loader = unittest.TestLoader()
107:         suite = loader.loadTestsFromModule(m)
108:         self.assertIsInstance(suite, loader.suiteClass)
109:         self.assertEqual(list(suite), [])
110: 
111:     # "This method searches `module` for classes derived from TestCase"
112:     #
113:     # What happens if no tests are found (TestCases instances, but no tests)?
114:     def test_loadTestsFromModule__no_TestCase_tests(self):
115:         m = types.ModuleType('m')
116:         class MyTestCase(unittest.TestCase):
117:             pass
118:         m.testcase_1 = MyTestCase
119: 
120:         loader = unittest.TestLoader()
121:         suite = loader.loadTestsFromModule(m)
122:         self.assertIsInstance(suite, loader.suiteClass)
123: 
124:         self.assertEqual(list(suite), [loader.suiteClass()])
125: 
126:     # "This method searches `module` for classes derived from TestCase"s
127:     #
128:     # What happens if loadTestsFromModule() is given something other
129:     # than a module?
130:     #
131:     # XXX Currently, it succeeds anyway. This flexibility
132:     # should either be documented or loadTestsFromModule() should
133:     # raise a TypeError
134:     #
135:     # XXX Certain people are using this behaviour. We'll add a test for it
136:     def test_loadTestsFromModule__not_a_module(self):
137:         class MyTestCase(unittest.TestCase):
138:             def test(self):
139:                 pass
140: 
141:         class NotAModule(object):
142:             test_2 = MyTestCase
143: 
144:         loader = unittest.TestLoader()
145:         suite = loader.loadTestsFromModule(NotAModule)
146: 
147:         reference = [unittest.TestSuite([MyTestCase('test')])]
148:         self.assertEqual(list(suite), reference)
149: 
150: 
151:     # Check that loadTestsFromModule honors (or not) a module
152:     # with a load_tests function.
153:     def test_loadTestsFromModule__load_tests(self):
154:         m = types.ModuleType('m')
155:         class MyTestCase(unittest.TestCase):
156:             def test(self):
157:                 pass
158:         m.testcase_1 = MyTestCase
159: 
160:         load_tests_args = []
161:         def load_tests(loader, tests, pattern):
162:             self.assertIsInstance(tests, unittest.TestSuite)
163:             load_tests_args.extend((loader, tests, pattern))
164:             return tests
165:         m.load_tests = load_tests
166: 
167:         loader = unittest.TestLoader()
168:         suite = loader.loadTestsFromModule(m)
169:         self.assertIsInstance(suite, unittest.TestSuite)
170:         self.assertEqual(load_tests_args, [loader, suite, None])
171: 
172:         load_tests_args = []
173:         suite = loader.loadTestsFromModule(m, use_load_tests=False)
174:         self.assertEqual(load_tests_args, [])
175: 
176:     def test_loadTestsFromModule__faulty_load_tests(self):
177:         m = types.ModuleType('m')
178: 
179:         def load_tests(loader, tests, pattern):
180:             raise TypeError('some failure')
181:         m.load_tests = load_tests
182: 
183:         loader = unittest.TestLoader()
184:         suite = loader.loadTestsFromModule(m)
185:         self.assertIsInstance(suite, unittest.TestSuite)
186:         self.assertEqual(suite.countTestCases(), 1)
187:         test = list(suite)[0]
188: 
189:         self.assertRaisesRegexp(TypeError, "some failure", test.m)
190: 
191:     ################################################################
192:     ### /Tests for TestLoader.loadTestsFromModule()
193: 
194:     ### Tests for TestLoader.loadTestsFromName()
195:     ################################################################
196: 
197:     # "The specifier name is a ``dotted name'' that may resolve either to
198:     # a module, a test case class, a TestSuite instance, a test method
199:     # within a test case class, or a callable object which returns a
200:     # TestCase or TestSuite instance."
201:     #
202:     # Is ValueError raised in response to an empty name?
203:     def test_loadTestsFromName__empty_name(self):
204:         loader = unittest.TestLoader()
205: 
206:         try:
207:             loader.loadTestsFromName('')
208:         except ValueError, e:
209:             self.assertEqual(str(e), "Empty module name")
210:         else:
211:             self.fail("TestLoader.loadTestsFromName failed to raise ValueError")
212: 
213:     # "The specifier name is a ``dotted name'' that may resolve either to
214:     # a module, a test case class, a TestSuite instance, a test method
215:     # within a test case class, or a callable object which returns a
216:     # TestCase or TestSuite instance."
217:     #
218:     # What happens when the name contains invalid characters?
219:     def test_loadTestsFromName__malformed_name(self):
220:         loader = unittest.TestLoader()
221: 
222:         # XXX Should this raise ValueError or ImportError?
223:         try:
224:             loader.loadTestsFromName('abc () //')
225:         except ValueError:
226:             pass
227:         except ImportError:
228:             pass
229:         else:
230:             self.fail("TestLoader.loadTestsFromName failed to raise ValueError")
231: 
232:     # "The specifier name is a ``dotted name'' that may resolve ... to a
233:     # module"
234:     #
235:     # What happens when a module by that name can't be found?
236:     def test_loadTestsFromName__unknown_module_name(self):
237:         loader = unittest.TestLoader()
238: 
239:         try:
240:             loader.loadTestsFromName('sdasfasfasdf')
241:         except ImportError, e:
242:             self.assertEqual(str(e), "No module named sdasfasfasdf")
243:         else:
244:             self.fail("TestLoader.loadTestsFromName failed to raise ImportError")
245: 
246:     # "The specifier name is a ``dotted name'' that may resolve either to
247:     # a module, a test case class, a TestSuite instance, a test method
248:     # within a test case class, or a callable object which returns a
249:     # TestCase or TestSuite instance."
250:     #
251:     # What happens when the module is found, but the attribute can't?
252:     def test_loadTestsFromName__unknown_attr_name(self):
253:         loader = unittest.TestLoader()
254: 
255:         try:
256:             loader.loadTestsFromName('unittest.sdasfasfasdf')
257:         except AttributeError, e:
258:             self.assertEqual(str(e), "'module' object has no attribute 'sdasfasfasdf'")
259:         else:
260:             self.fail("TestLoader.loadTestsFromName failed to raise AttributeError")
261: 
262:     # "The specifier name is a ``dotted name'' that may resolve either to
263:     # a module, a test case class, a TestSuite instance, a test method
264:     # within a test case class, or a callable object which returns a
265:     # TestCase or TestSuite instance."
266:     #
267:     # What happens when we provide the module, but the attribute can't be
268:     # found?
269:     def test_loadTestsFromName__relative_unknown_name(self):
270:         loader = unittest.TestLoader()
271: 
272:         try:
273:             loader.loadTestsFromName('sdasfasfasdf', unittest)
274:         except AttributeError, e:
275:             self.assertEqual(str(e), "'module' object has no attribute 'sdasfasfasdf'")
276:         else:
277:             self.fail("TestLoader.loadTestsFromName failed to raise AttributeError")
278: 
279:     # "The specifier name is a ``dotted name'' that may resolve either to
280:     # a module, a test case class, a TestSuite instance, a test method
281:     # within a test case class, or a callable object which returns a
282:     # TestCase or TestSuite instance."
283:     # ...
284:     # "The method optionally resolves name relative to the given module"
285:     #
286:     # Does loadTestsFromName raise ValueError when passed an empty
287:     # name relative to a provided module?
288:     #
289:     # XXX Should probably raise a ValueError instead of an AttributeError
290:     def test_loadTestsFromName__relative_empty_name(self):
291:         loader = unittest.TestLoader()
292: 
293:         try:
294:             loader.loadTestsFromName('', unittest)
295:         except AttributeError:
296:             pass
297:         else:
298:             self.fail("Failed to raise AttributeError")
299: 
300:     # "The specifier name is a ``dotted name'' that may resolve either to
301:     # a module, a test case class, a TestSuite instance, a test method
302:     # within a test case class, or a callable object which returns a
303:     # TestCase or TestSuite instance."
304:     # ...
305:     # "The method optionally resolves name relative to the given module"
306:     #
307:     # What happens when an impossible name is given, relative to the provided
308:     # `module`?
309:     def test_loadTestsFromName__relative_malformed_name(self):
310:         loader = unittest.TestLoader()
311: 
312:         # XXX Should this raise AttributeError or ValueError?
313:         try:
314:             loader.loadTestsFromName('abc () //', unittest)
315:         except ValueError:
316:             pass
317:         except AttributeError:
318:             pass
319:         else:
320:             self.fail("TestLoader.loadTestsFromName failed to raise ValueError")
321: 
322:     # "The method optionally resolves name relative to the given module"
323:     #
324:     # Does loadTestsFromName raise TypeError when the `module` argument
325:     # isn't a module object?
326:     #
327:     # XXX Accepts the not-a-module object, ignoring the object's type
328:     # This should raise an exception or the method name should be changed
329:     #
330:     # XXX Some people are relying on this, so keep it for now
331:     def test_loadTestsFromName__relative_not_a_module(self):
332:         class MyTestCase(unittest.TestCase):
333:             def test(self):
334:                 pass
335: 
336:         class NotAModule(object):
337:             test_2 = MyTestCase
338: 
339:         loader = unittest.TestLoader()
340:         suite = loader.loadTestsFromName('test_2', NotAModule)
341: 
342:         reference = [MyTestCase('test')]
343:         self.assertEqual(list(suite), reference)
344: 
345:     # "The specifier name is a ``dotted name'' that may resolve either to
346:     # a module, a test case class, a TestSuite instance, a test method
347:     # within a test case class, or a callable object which returns a
348:     # TestCase or TestSuite instance."
349:     #
350:     # Does it raise an exception if the name resolves to an invalid
351:     # object?
352:     def test_loadTestsFromName__relative_bad_object(self):
353:         m = types.ModuleType('m')
354:         m.testcase_1 = object()
355: 
356:         loader = unittest.TestLoader()
357:         try:
358:             loader.loadTestsFromName('testcase_1', m)
359:         except TypeError:
360:             pass
361:         else:
362:             self.fail("Should have raised TypeError")
363: 
364:     # "The specifier name is a ``dotted name'' that may
365:     # resolve either to ... a test case class"
366:     def test_loadTestsFromName__relative_TestCase_subclass(self):
367:         m = types.ModuleType('m')
368:         class MyTestCase(unittest.TestCase):
369:             def test(self):
370:                 pass
371:         m.testcase_1 = MyTestCase
372: 
373:         loader = unittest.TestLoader()
374:         suite = loader.loadTestsFromName('testcase_1', m)
375:         self.assertIsInstance(suite, loader.suiteClass)
376:         self.assertEqual(list(suite), [MyTestCase('test')])
377: 
378:     # "The specifier name is a ``dotted name'' that may resolve either to
379:     # a module, a test case class, a TestSuite instance, a test method
380:     # within a test case class, or a callable object which returns a
381:     # TestCase or TestSuite instance."
382:     def test_loadTestsFromName__relative_TestSuite(self):
383:         m = types.ModuleType('m')
384:         class MyTestCase(unittest.TestCase):
385:             def test(self):
386:                 pass
387:         m.testsuite = unittest.TestSuite([MyTestCase('test')])
388: 
389:         loader = unittest.TestLoader()
390:         suite = loader.loadTestsFromName('testsuite', m)
391:         self.assertIsInstance(suite, loader.suiteClass)
392: 
393:         self.assertEqual(list(suite), [MyTestCase('test')])
394: 
395:     # "The specifier name is a ``dotted name'' that may resolve ... to
396:     # ... a test method within a test case class"
397:     def test_loadTestsFromName__relative_testmethod(self):
398:         m = types.ModuleType('m')
399:         class MyTestCase(unittest.TestCase):
400:             def test(self):
401:                 pass
402:         m.testcase_1 = MyTestCase
403: 
404:         loader = unittest.TestLoader()
405:         suite = loader.loadTestsFromName('testcase_1.test', m)
406:         self.assertIsInstance(suite, loader.suiteClass)
407: 
408:         self.assertEqual(list(suite), [MyTestCase('test')])
409: 
410:     # "The specifier name is a ``dotted name'' that may resolve either to
411:     # a module, a test case class, a TestSuite instance, a test method
412:     # within a test case class, or a callable object which returns a
413:     # TestCase or TestSuite instance."
414:     #
415:     # Does loadTestsFromName() raise the proper exception when trying to
416:     # resolve "a test method within a test case class" that doesn't exist
417:     # for the given name (relative to a provided module)?
418:     def test_loadTestsFromName__relative_invalid_testmethod(self):
419:         m = types.ModuleType('m')
420:         class MyTestCase(unittest.TestCase):
421:             def test(self):
422:                 pass
423:         m.testcase_1 = MyTestCase
424: 
425:         loader = unittest.TestLoader()
426:         try:
427:             loader.loadTestsFromName('testcase_1.testfoo', m)
428:         except AttributeError, e:
429:             self.assertEqual(str(e), "type object 'MyTestCase' has no attribute 'testfoo'")
430:         else:
431:             self.fail("Failed to raise AttributeError")
432: 
433:     # "The specifier name is a ``dotted name'' that may resolve ... to
434:     # ... a callable object which returns a ... TestSuite instance"
435:     def test_loadTestsFromName__callable__TestSuite(self):
436:         m = types.ModuleType('m')
437:         testcase_1 = unittest.FunctionTestCase(lambda: None)
438:         testcase_2 = unittest.FunctionTestCase(lambda: None)
439:         def return_TestSuite():
440:             return unittest.TestSuite([testcase_1, testcase_2])
441:         m.return_TestSuite = return_TestSuite
442: 
443:         loader = unittest.TestLoader()
444:         suite = loader.loadTestsFromName('return_TestSuite', m)
445:         self.assertIsInstance(suite, loader.suiteClass)
446:         self.assertEqual(list(suite), [testcase_1, testcase_2])
447: 
448:     # "The specifier name is a ``dotted name'' that may resolve ... to
449:     # ... a callable object which returns a TestCase ... instance"
450:     def test_loadTestsFromName__callable__TestCase_instance(self):
451:         m = types.ModuleType('m')
452:         testcase_1 = unittest.FunctionTestCase(lambda: None)
453:         def return_TestCase():
454:             return testcase_1
455:         m.return_TestCase = return_TestCase
456: 
457:         loader = unittest.TestLoader()
458:         suite = loader.loadTestsFromName('return_TestCase', m)
459:         self.assertIsInstance(suite, loader.suiteClass)
460:         self.assertEqual(list(suite), [testcase_1])
461: 
462:     # "The specifier name is a ``dotted name'' that may resolve ... to
463:     # ... a callable object which returns a TestCase ... instance"
464:     #*****************************************************************
465:     #Override the suiteClass attribute to ensure that the suiteClass
466:     #attribute is used
467:     def test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass(self):
468:         class SubTestSuite(unittest.TestSuite):
469:             pass
470:         m = types.ModuleType('m')
471:         testcase_1 = unittest.FunctionTestCase(lambda: None)
472:         def return_TestCase():
473:             return testcase_1
474:         m.return_TestCase = return_TestCase
475: 
476:         loader = unittest.TestLoader()
477:         loader.suiteClass = SubTestSuite
478:         suite = loader.loadTestsFromName('return_TestCase', m)
479:         self.assertIsInstance(suite, loader.suiteClass)
480:         self.assertEqual(list(suite), [testcase_1])
481: 
482:     # "The specifier name is a ``dotted name'' that may resolve ... to
483:     # ... a test method within a test case class"
484:     #*****************************************************************
485:     #Override the suiteClass attribute to ensure that the suiteClass
486:     #attribute is used
487:     def test_loadTestsFromName__relative_testmethod_ProperSuiteClass(self):
488:         class SubTestSuite(unittest.TestSuite):
489:             pass
490:         m = types.ModuleType('m')
491:         class MyTestCase(unittest.TestCase):
492:             def test(self):
493:                 pass
494:         m.testcase_1 = MyTestCase
495: 
496:         loader = unittest.TestLoader()
497:         loader.suiteClass=SubTestSuite
498:         suite = loader.loadTestsFromName('testcase_1.test', m)
499:         self.assertIsInstance(suite, loader.suiteClass)
500: 
501:         self.assertEqual(list(suite), [MyTestCase('test')])
502: 
503:     # "The specifier name is a ``dotted name'' that may resolve ... to
504:     # ... a callable object which returns a TestCase or TestSuite instance"
505:     #
506:     # What happens if the callable returns something else?
507:     def test_loadTestsFromName__callable__wrong_type(self):
508:         m = types.ModuleType('m')
509:         def return_wrong():
510:             return 6
511:         m.return_wrong = return_wrong
512: 
513:         loader = unittest.TestLoader()
514:         try:
515:             loader.loadTestsFromName('return_wrong', m)
516:         except TypeError:
517:             pass
518:         else:
519:             self.fail("TestLoader.loadTestsFromName failed to raise TypeError")
520: 
521:     # "The specifier can refer to modules and packages which have not been
522:     # imported; they will be imported as a side-effect"
523:     def test_loadTestsFromName__module_not_loaded(self):
524:         # We're going to try to load this module as a side-effect, so it
525:         # better not be loaded before we try.
526:         #
527:         module_name = 'unittest.test.dummy'
528:         sys.modules.pop(module_name, None)
529: 
530:         loader = unittest.TestLoader()
531:         try:
532:             suite = loader.loadTestsFromName(module_name)
533: 
534:             self.assertIsInstance(suite, loader.suiteClass)
535:             self.assertEqual(list(suite), [])
536: 
537:             # module should now be loaded, thanks to loadTestsFromName()
538:             self.assertIn(module_name, sys.modules)
539:         finally:
540:             if module_name in sys.modules:
541:                 del sys.modules[module_name]
542: 
543:     ################################################################
544:     ### Tests for TestLoader.loadTestsFromName()
545: 
546:     ### Tests for TestLoader.loadTestsFromNames()
547:     ################################################################
548: 
549:     # "Similar to loadTestsFromName(), but takes a sequence of names rather
550:     # than a single name."
551:     #
552:     # What happens if that sequence of names is empty?
553:     def test_loadTestsFromNames__empty_name_list(self):
554:         loader = unittest.TestLoader()
555: 
556:         suite = loader.loadTestsFromNames([])
557:         self.assertIsInstance(suite, loader.suiteClass)
558:         self.assertEqual(list(suite), [])
559: 
560:     # "Similar to loadTestsFromName(), but takes a sequence of names rather
561:     # than a single name."
562:     # ...
563:     # "The method optionally resolves name relative to the given module"
564:     #
565:     # What happens if that sequence of names is empty?
566:     #
567:     # XXX Should this raise a ValueError or just return an empty TestSuite?
568:     def test_loadTestsFromNames__relative_empty_name_list(self):
569:         loader = unittest.TestLoader()
570: 
571:         suite = loader.loadTestsFromNames([], unittest)
572:         self.assertIsInstance(suite, loader.suiteClass)
573:         self.assertEqual(list(suite), [])
574: 
575:     # "The specifier name is a ``dotted name'' that may resolve either to
576:     # a module, a test case class, a TestSuite instance, a test method
577:     # within a test case class, or a callable object which returns a
578:     # TestCase or TestSuite instance."
579:     #
580:     # Is ValueError raised in response to an empty name?
581:     def test_loadTestsFromNames__empty_name(self):
582:         loader = unittest.TestLoader()
583: 
584:         try:
585:             loader.loadTestsFromNames([''])
586:         except ValueError, e:
587:             self.assertEqual(str(e), "Empty module name")
588:         else:
589:             self.fail("TestLoader.loadTestsFromNames failed to raise ValueError")
590: 
591:     # "The specifier name is a ``dotted name'' that may resolve either to
592:     # a module, a test case class, a TestSuite instance, a test method
593:     # within a test case class, or a callable object which returns a
594:     # TestCase or TestSuite instance."
595:     #
596:     # What happens when presented with an impossible module name?
597:     def test_loadTestsFromNames__malformed_name(self):
598:         loader = unittest.TestLoader()
599: 
600:         # XXX Should this raise ValueError or ImportError?
601:         try:
602:             loader.loadTestsFromNames(['abc () //'])
603:         except ValueError:
604:             pass
605:         except ImportError:
606:             pass
607:         else:
608:             self.fail("TestLoader.loadTestsFromNames failed to raise ValueError")
609: 
610:     # "The specifier name is a ``dotted name'' that may resolve either to
611:     # a module, a test case class, a TestSuite instance, a test method
612:     # within a test case class, or a callable object which returns a
613:     # TestCase or TestSuite instance."
614:     #
615:     # What happens when no module can be found for the given name?
616:     def test_loadTestsFromNames__unknown_module_name(self):
617:         loader = unittest.TestLoader()
618: 
619:         try:
620:             loader.loadTestsFromNames(['sdasfasfasdf'])
621:         except ImportError, e:
622:             self.assertEqual(str(e), "No module named sdasfasfasdf")
623:         else:
624:             self.fail("TestLoader.loadTestsFromNames failed to raise ImportError")
625: 
626:     # "The specifier name is a ``dotted name'' that may resolve either to
627:     # a module, a test case class, a TestSuite instance, a test method
628:     # within a test case class, or a callable object which returns a
629:     # TestCase or TestSuite instance."
630:     #
631:     # What happens when the module can be found, but not the attribute?
632:     def test_loadTestsFromNames__unknown_attr_name(self):
633:         loader = unittest.TestLoader()
634: 
635:         try:
636:             loader.loadTestsFromNames(['unittest.sdasfasfasdf', 'unittest'])
637:         except AttributeError, e:
638:             self.assertEqual(str(e), "'module' object has no attribute 'sdasfasfasdf'")
639:         else:
640:             self.fail("TestLoader.loadTestsFromNames failed to raise AttributeError")
641: 
642:     # "The specifier name is a ``dotted name'' that may resolve either to
643:     # a module, a test case class, a TestSuite instance, a test method
644:     # within a test case class, or a callable object which returns a
645:     # TestCase or TestSuite instance."
646:     # ...
647:     # "The method optionally resolves name relative to the given module"
648:     #
649:     # What happens when given an unknown attribute on a specified `module`
650:     # argument?
651:     def test_loadTestsFromNames__unknown_name_relative_1(self):
652:         loader = unittest.TestLoader()
653: 
654:         try:
655:             loader.loadTestsFromNames(['sdasfasfasdf'], unittest)
656:         except AttributeError, e:
657:             self.assertEqual(str(e), "'module' object has no attribute 'sdasfasfasdf'")
658:         else:
659:             self.fail("TestLoader.loadTestsFromName failed to raise AttributeError")
660: 
661:     # "The specifier name is a ``dotted name'' that may resolve either to
662:     # a module, a test case class, a TestSuite instance, a test method
663:     # within a test case class, or a callable object which returns a
664:     # TestCase or TestSuite instance."
665:     # ...
666:     # "The method optionally resolves name relative to the given module"
667:     #
668:     # Do unknown attributes (relative to a provided module) still raise an
669:     # exception even in the presence of valid attribute names?
670:     def test_loadTestsFromNames__unknown_name_relative_2(self):
671:         loader = unittest.TestLoader()
672: 
673:         try:
674:             loader.loadTestsFromNames(['TestCase', 'sdasfasfasdf'], unittest)
675:         except AttributeError, e:
676:             self.assertEqual(str(e), "'module' object has no attribute 'sdasfasfasdf'")
677:         else:
678:             self.fail("TestLoader.loadTestsFromName failed to raise AttributeError")
679: 
680:     # "The specifier name is a ``dotted name'' that may resolve either to
681:     # a module, a test case class, a TestSuite instance, a test method
682:     # within a test case class, or a callable object which returns a
683:     # TestCase or TestSuite instance."
684:     # ...
685:     # "The method optionally resolves name relative to the given module"
686:     #
687:     # What happens when faced with the empty string?
688:     #
689:     # XXX This currently raises AttributeError, though ValueError is probably
690:     # more appropriate
691:     def test_loadTestsFromNames__relative_empty_name(self):
692:         loader = unittest.TestLoader()
693: 
694:         try:
695:             loader.loadTestsFromNames([''], unittest)
696:         except AttributeError:
697:             pass
698:         else:
699:             self.fail("Failed to raise ValueError")
700: 
701:     # "The specifier name is a ``dotted name'' that may resolve either to
702:     # a module, a test case class, a TestSuite instance, a test method
703:     # within a test case class, or a callable object which returns a
704:     # TestCase or TestSuite instance."
705:     # ...
706:     # "The method optionally resolves name relative to the given module"
707:     #
708:     # What happens when presented with an impossible attribute name?
709:     def test_loadTestsFromNames__relative_malformed_name(self):
710:         loader = unittest.TestLoader()
711: 
712:         # XXX Should this raise AttributeError or ValueError?
713:         try:
714:             loader.loadTestsFromNames(['abc () //'], unittest)
715:         except AttributeError:
716:             pass
717:         except ValueError:
718:             pass
719:         else:
720:             self.fail("TestLoader.loadTestsFromNames failed to raise ValueError")
721: 
722:     # "The method optionally resolves name relative to the given module"
723:     #
724:     # Does loadTestsFromNames() make sure the provided `module` is in fact
725:     # a module?
726:     #
727:     # XXX This validation is currently not done. This flexibility should
728:     # either be documented or a TypeError should be raised.
729:     def test_loadTestsFromNames__relative_not_a_module(self):
730:         class MyTestCase(unittest.TestCase):
731:             def test(self):
732:                 pass
733: 
734:         class NotAModule(object):
735:             test_2 = MyTestCase
736: 
737:         loader = unittest.TestLoader()
738:         suite = loader.loadTestsFromNames(['test_2'], NotAModule)
739: 
740:         reference = [unittest.TestSuite([MyTestCase('test')])]
741:         self.assertEqual(list(suite), reference)
742: 
743:     # "The specifier name is a ``dotted name'' that may resolve either to
744:     # a module, a test case class, a TestSuite instance, a test method
745:     # within a test case class, or a callable object which returns a
746:     # TestCase or TestSuite instance."
747:     #
748:     # Does it raise an exception if the name resolves to an invalid
749:     # object?
750:     def test_loadTestsFromNames__relative_bad_object(self):
751:         m = types.ModuleType('m')
752:         m.testcase_1 = object()
753: 
754:         loader = unittest.TestLoader()
755:         try:
756:             loader.loadTestsFromNames(['testcase_1'], m)
757:         except TypeError:
758:             pass
759:         else:
760:             self.fail("Should have raised TypeError")
761: 
762:     # "The specifier name is a ``dotted name'' that may resolve ... to
763:     # ... a test case class"
764:     def test_loadTestsFromNames__relative_TestCase_subclass(self):
765:         m = types.ModuleType('m')
766:         class MyTestCase(unittest.TestCase):
767:             def test(self):
768:                 pass
769:         m.testcase_1 = MyTestCase
770: 
771:         loader = unittest.TestLoader()
772:         suite = loader.loadTestsFromNames(['testcase_1'], m)
773:         self.assertIsInstance(suite, loader.suiteClass)
774: 
775:         expected = loader.suiteClass([MyTestCase('test')])
776:         self.assertEqual(list(suite), [expected])
777: 
778:     # "The specifier name is a ``dotted name'' that may resolve ... to
779:     # ... a TestSuite instance"
780:     def test_loadTestsFromNames__relative_TestSuite(self):
781:         m = types.ModuleType('m')
782:         class MyTestCase(unittest.TestCase):
783:             def test(self):
784:                 pass
785:         m.testsuite = unittest.TestSuite([MyTestCase('test')])
786: 
787:         loader = unittest.TestLoader()
788:         suite = loader.loadTestsFromNames(['testsuite'], m)
789:         self.assertIsInstance(suite, loader.suiteClass)
790: 
791:         self.assertEqual(list(suite), [m.testsuite])
792: 
793:     # "The specifier name is a ``dotted name'' that may resolve ... to ... a
794:     # test method within a test case class"
795:     def test_loadTestsFromNames__relative_testmethod(self):
796:         m = types.ModuleType('m')
797:         class MyTestCase(unittest.TestCase):
798:             def test(self):
799:                 pass
800:         m.testcase_1 = MyTestCase
801: 
802:         loader = unittest.TestLoader()
803:         suite = loader.loadTestsFromNames(['testcase_1.test'], m)
804:         self.assertIsInstance(suite, loader.suiteClass)
805: 
806:         ref_suite = unittest.TestSuite([MyTestCase('test')])
807:         self.assertEqual(list(suite), [ref_suite])
808: 
809:     # "The specifier name is a ``dotted name'' that may resolve ... to ... a
810:     # test method within a test case class"
811:     #
812:     # Does the method gracefully handle names that initially look like they
813:     # resolve to "a test method within a test case class" but don't?
814:     def test_loadTestsFromNames__relative_invalid_testmethod(self):
815:         m = types.ModuleType('m')
816:         class MyTestCase(unittest.TestCase):
817:             def test(self):
818:                 pass
819:         m.testcase_1 = MyTestCase
820: 
821:         loader = unittest.TestLoader()
822:         try:
823:             loader.loadTestsFromNames(['testcase_1.testfoo'], m)
824:         except AttributeError, e:
825:             self.assertEqual(str(e), "type object 'MyTestCase' has no attribute 'testfoo'")
826:         else:
827:             self.fail("Failed to raise AttributeError")
828: 
829:     # "The specifier name is a ``dotted name'' that may resolve ... to
830:     # ... a callable object which returns a ... TestSuite instance"
831:     def test_loadTestsFromNames__callable__TestSuite(self):
832:         m = types.ModuleType('m')
833:         testcase_1 = unittest.FunctionTestCase(lambda: None)
834:         testcase_2 = unittest.FunctionTestCase(lambda: None)
835:         def return_TestSuite():
836:             return unittest.TestSuite([testcase_1, testcase_2])
837:         m.return_TestSuite = return_TestSuite
838: 
839:         loader = unittest.TestLoader()
840:         suite = loader.loadTestsFromNames(['return_TestSuite'], m)
841:         self.assertIsInstance(suite, loader.suiteClass)
842: 
843:         expected = unittest.TestSuite([testcase_1, testcase_2])
844:         self.assertEqual(list(suite), [expected])
845: 
846:     # "The specifier name is a ``dotted name'' that may resolve ... to
847:     # ... a callable object which returns a TestCase ... instance"
848:     def test_loadTestsFromNames__callable__TestCase_instance(self):
849:         m = types.ModuleType('m')
850:         testcase_1 = unittest.FunctionTestCase(lambda: None)
851:         def return_TestCase():
852:             return testcase_1
853:         m.return_TestCase = return_TestCase
854: 
855:         loader = unittest.TestLoader()
856:         suite = loader.loadTestsFromNames(['return_TestCase'], m)
857:         self.assertIsInstance(suite, loader.suiteClass)
858: 
859:         ref_suite = unittest.TestSuite([testcase_1])
860:         self.assertEqual(list(suite), [ref_suite])
861: 
862:     # "The specifier name is a ``dotted name'' that may resolve ... to
863:     # ... a callable object which returns a TestCase or TestSuite instance"
864:     #
865:     # Are staticmethods handled correctly?
866:     def test_loadTestsFromNames__callable__call_staticmethod(self):
867:         m = types.ModuleType('m')
868:         class Test1(unittest.TestCase):
869:             def test(self):
870:                 pass
871: 
872:         testcase_1 = Test1('test')
873:         class Foo(unittest.TestCase):
874:             @staticmethod
875:             def foo():
876:                 return testcase_1
877:         m.Foo = Foo
878: 
879:         loader = unittest.TestLoader()
880:         suite = loader.loadTestsFromNames(['Foo.foo'], m)
881:         self.assertIsInstance(suite, loader.suiteClass)
882: 
883:         ref_suite = unittest.TestSuite([testcase_1])
884:         self.assertEqual(list(suite), [ref_suite])
885: 
886:     # "The specifier name is a ``dotted name'' that may resolve ... to
887:     # ... a callable object which returns a TestCase or TestSuite instance"
888:     #
889:     # What happens when the callable returns something else?
890:     def test_loadTestsFromNames__callable__wrong_type(self):
891:         m = types.ModuleType('m')
892:         def return_wrong():
893:             return 6
894:         m.return_wrong = return_wrong
895: 
896:         loader = unittest.TestLoader()
897:         try:
898:             loader.loadTestsFromNames(['return_wrong'], m)
899:         except TypeError:
900:             pass
901:         else:
902:             self.fail("TestLoader.loadTestsFromNames failed to raise TypeError")
903: 
904:     # "The specifier can refer to modules and packages which have not been
905:     # imported; they will be imported as a side-effect"
906:     def test_loadTestsFromNames__module_not_loaded(self):
907:         # We're going to try to load this module as a side-effect, so it
908:         # better not be loaded before we try.
909:         #
910:         module_name = 'unittest.test.dummy'
911:         sys.modules.pop(module_name, None)
912: 
913:         loader = unittest.TestLoader()
914:         try:
915:             suite = loader.loadTestsFromNames([module_name])
916: 
917:             self.assertIsInstance(suite, loader.suiteClass)
918:             self.assertEqual(list(suite), [unittest.TestSuite()])
919: 
920:             # module should now be loaded, thanks to loadTestsFromName()
921:             self.assertIn(module_name, sys.modules)
922:         finally:
923:             if module_name in sys.modules:
924:                 del sys.modules[module_name]
925: 
926:     ################################################################
927:     ### /Tests for TestLoader.loadTestsFromNames()
928: 
929:     ### Tests for TestLoader.getTestCaseNames()
930:     ################################################################
931: 
932:     # "Return a sorted sequence of method names found within testCaseClass"
933:     #
934:     # Test.foobar is defined to make sure getTestCaseNames() respects
935:     # loader.testMethodPrefix
936:     def test_getTestCaseNames(self):
937:         class Test(unittest.TestCase):
938:             def test_1(self): pass
939:             def test_2(self): pass
940:             def foobar(self): pass
941: 
942:         loader = unittest.TestLoader()
943: 
944:         self.assertEqual(loader.getTestCaseNames(Test), ['test_1', 'test_2'])
945: 
946:     # "Return a sorted sequence of method names found within testCaseClass"
947:     #
948:     # Does getTestCaseNames() behave appropriately if no tests are found?
949:     def test_getTestCaseNames__no_tests(self):
950:         class Test(unittest.TestCase):
951:             def foobar(self): pass
952: 
953:         loader = unittest.TestLoader()
954: 
955:         self.assertEqual(loader.getTestCaseNames(Test), [])
956: 
957:     # "Return a sorted sequence of method names found within testCaseClass"
958:     #
959:     # Are not-TestCases handled gracefully?
960:     #
961:     # XXX This should raise a TypeError, not return a list
962:     #
963:     # XXX It's too late in the 2.5 release cycle to fix this, but it should
964:     # probably be revisited for 2.6
965:     def test_getTestCaseNames__not_a_TestCase(self):
966:         class BadCase(int):
967:             def test_foo(self):
968:                 pass
969: 
970:         loader = unittest.TestLoader()
971:         names = loader.getTestCaseNames(BadCase)
972: 
973:         self.assertEqual(names, ['test_foo'])
974: 
975:     # "Return a sorted sequence of method names found within testCaseClass"
976:     #
977:     # Make sure inherited names are handled.
978:     #
979:     # TestP.foobar is defined to make sure getTestCaseNames() respects
980:     # loader.testMethodPrefix
981:     def test_getTestCaseNames__inheritance(self):
982:         class TestP(unittest.TestCase):
983:             def test_1(self): pass
984:             def test_2(self): pass
985:             def foobar(self): pass
986: 
987:         class TestC(TestP):
988:             def test_1(self): pass
989:             def test_3(self): pass
990: 
991:         loader = unittest.TestLoader()
992: 
993:         names = ['test_1', 'test_2', 'test_3']
994:         self.assertEqual(loader.getTestCaseNames(TestC), names)
995: 
996:     ################################################################
997:     ### /Tests for TestLoader.getTestCaseNames()
998: 
999:     ### Tests for TestLoader.testMethodPrefix
1000:     ################################################################
1001: 
1002:     # "String giving the prefix of method names which will be interpreted as
1003:     # test methods"
1004:     #
1005:     # Implicit in the documentation is that testMethodPrefix is respected by
1006:     # all loadTestsFrom* methods.
1007:     def test_testMethodPrefix__loadTestsFromTestCase(self):
1008:         class Foo(unittest.TestCase):
1009:             def test_1(self): pass
1010:             def test_2(self): pass
1011:             def foo_bar(self): pass
1012: 
1013:         tests_1 = unittest.TestSuite([Foo('foo_bar')])
1014:         tests_2 = unittest.TestSuite([Foo('test_1'), Foo('test_2')])
1015: 
1016:         loader = unittest.TestLoader()
1017:         loader.testMethodPrefix = 'foo'
1018:         self.assertEqual(loader.loadTestsFromTestCase(Foo), tests_1)
1019: 
1020:         loader.testMethodPrefix = 'test'
1021:         self.assertEqual(loader.loadTestsFromTestCase(Foo), tests_2)
1022: 
1023:     # "String giving the prefix of method names which will be interpreted as
1024:     # test methods"
1025:     #
1026:     # Implicit in the documentation is that testMethodPrefix is respected by
1027:     # all loadTestsFrom* methods.
1028:     def test_testMethodPrefix__loadTestsFromModule(self):
1029:         m = types.ModuleType('m')
1030:         class Foo(unittest.TestCase):
1031:             def test_1(self): pass
1032:             def test_2(self): pass
1033:             def foo_bar(self): pass
1034:         m.Foo = Foo
1035: 
1036:         tests_1 = [unittest.TestSuite([Foo('foo_bar')])]
1037:         tests_2 = [unittest.TestSuite([Foo('test_1'), Foo('test_2')])]
1038: 
1039:         loader = unittest.TestLoader()
1040:         loader.testMethodPrefix = 'foo'
1041:         self.assertEqual(list(loader.loadTestsFromModule(m)), tests_1)
1042: 
1043:         loader.testMethodPrefix = 'test'
1044:         self.assertEqual(list(loader.loadTestsFromModule(m)), tests_2)
1045: 
1046:     # "String giving the prefix of method names which will be interpreted as
1047:     # test methods"
1048:     #
1049:     # Implicit in the documentation is that testMethodPrefix is respected by
1050:     # all loadTestsFrom* methods.
1051:     def test_testMethodPrefix__loadTestsFromName(self):
1052:         m = types.ModuleType('m')
1053:         class Foo(unittest.TestCase):
1054:             def test_1(self): pass
1055:             def test_2(self): pass
1056:             def foo_bar(self): pass
1057:         m.Foo = Foo
1058: 
1059:         tests_1 = unittest.TestSuite([Foo('foo_bar')])
1060:         tests_2 = unittest.TestSuite([Foo('test_1'), Foo('test_2')])
1061: 
1062:         loader = unittest.TestLoader()
1063:         loader.testMethodPrefix = 'foo'
1064:         self.assertEqual(loader.loadTestsFromName('Foo', m), tests_1)
1065: 
1066:         loader.testMethodPrefix = 'test'
1067:         self.assertEqual(loader.loadTestsFromName('Foo', m), tests_2)
1068: 
1069:     # "String giving the prefix of method names which will be interpreted as
1070:     # test methods"
1071:     #
1072:     # Implicit in the documentation is that testMethodPrefix is respected by
1073:     # all loadTestsFrom* methods.
1074:     def test_testMethodPrefix__loadTestsFromNames(self):
1075:         m = types.ModuleType('m')
1076:         class Foo(unittest.TestCase):
1077:             def test_1(self): pass
1078:             def test_2(self): pass
1079:             def foo_bar(self): pass
1080:         m.Foo = Foo
1081: 
1082:         tests_1 = unittest.TestSuite([unittest.TestSuite([Foo('foo_bar')])])
1083:         tests_2 = unittest.TestSuite([Foo('test_1'), Foo('test_2')])
1084:         tests_2 = unittest.TestSuite([tests_2])
1085: 
1086:         loader = unittest.TestLoader()
1087:         loader.testMethodPrefix = 'foo'
1088:         self.assertEqual(loader.loadTestsFromNames(['Foo'], m), tests_1)
1089: 
1090:         loader.testMethodPrefix = 'test'
1091:         self.assertEqual(loader.loadTestsFromNames(['Foo'], m), tests_2)
1092: 
1093:     # "The default value is 'test'"
1094:     def test_testMethodPrefix__default_value(self):
1095:         loader = unittest.TestLoader()
1096:         self.assertTrue(loader.testMethodPrefix == 'test')
1097: 
1098:     ################################################################
1099:     ### /Tests for TestLoader.testMethodPrefix
1100: 
1101:     ### Tests for TestLoader.sortTestMethodsUsing
1102:     ################################################################
1103: 
1104:     # "Function to be used to compare method names when sorting them in
1105:     # getTestCaseNames() and all the loadTestsFromX() methods"
1106:     def test_sortTestMethodsUsing__loadTestsFromTestCase(self):
1107:         def reversed_cmp(x, y):
1108:             return -cmp(x, y)
1109: 
1110:         class Foo(unittest.TestCase):
1111:             def test_1(self): pass
1112:             def test_2(self): pass
1113: 
1114:         loader = unittest.TestLoader()
1115:         loader.sortTestMethodsUsing = reversed_cmp
1116: 
1117:         tests = loader.suiteClass([Foo('test_2'), Foo('test_1')])
1118:         self.assertEqual(loader.loadTestsFromTestCase(Foo), tests)
1119: 
1120:     # "Function to be used to compare method names when sorting them in
1121:     # getTestCaseNames() and all the loadTestsFromX() methods"
1122:     def test_sortTestMethodsUsing__loadTestsFromModule(self):
1123:         def reversed_cmp(x, y):
1124:             return -cmp(x, y)
1125: 
1126:         m = types.ModuleType('m')
1127:         class Foo(unittest.TestCase):
1128:             def test_1(self): pass
1129:             def test_2(self): pass
1130:         m.Foo = Foo
1131: 
1132:         loader = unittest.TestLoader()
1133:         loader.sortTestMethodsUsing = reversed_cmp
1134: 
1135:         tests = [loader.suiteClass([Foo('test_2'), Foo('test_1')])]
1136:         self.assertEqual(list(loader.loadTestsFromModule(m)), tests)
1137: 
1138:     # "Function to be used to compare method names when sorting them in
1139:     # getTestCaseNames() and all the loadTestsFromX() methods"
1140:     def test_sortTestMethodsUsing__loadTestsFromName(self):
1141:         def reversed_cmp(x, y):
1142:             return -cmp(x, y)
1143: 
1144:         m = types.ModuleType('m')
1145:         class Foo(unittest.TestCase):
1146:             def test_1(self): pass
1147:             def test_2(self): pass
1148:         m.Foo = Foo
1149: 
1150:         loader = unittest.TestLoader()
1151:         loader.sortTestMethodsUsing = reversed_cmp
1152: 
1153:         tests = loader.suiteClass([Foo('test_2'), Foo('test_1')])
1154:         self.assertEqual(loader.loadTestsFromName('Foo', m), tests)
1155: 
1156:     # "Function to be used to compare method names when sorting them in
1157:     # getTestCaseNames() and all the loadTestsFromX() methods"
1158:     def test_sortTestMethodsUsing__loadTestsFromNames(self):
1159:         def reversed_cmp(x, y):
1160:             return -cmp(x, y)
1161: 
1162:         m = types.ModuleType('m')
1163:         class Foo(unittest.TestCase):
1164:             def test_1(self): pass
1165:             def test_2(self): pass
1166:         m.Foo = Foo
1167: 
1168:         loader = unittest.TestLoader()
1169:         loader.sortTestMethodsUsing = reversed_cmp
1170: 
1171:         tests = [loader.suiteClass([Foo('test_2'), Foo('test_1')])]
1172:         self.assertEqual(list(loader.loadTestsFromNames(['Foo'], m)), tests)
1173: 
1174:     # "Function to be used to compare method names when sorting them in
1175:     # getTestCaseNames()"
1176:     #
1177:     # Does it actually affect getTestCaseNames()?
1178:     def test_sortTestMethodsUsing__getTestCaseNames(self):
1179:         def reversed_cmp(x, y):
1180:             return -cmp(x, y)
1181: 
1182:         class Foo(unittest.TestCase):
1183:             def test_1(self): pass
1184:             def test_2(self): pass
1185: 
1186:         loader = unittest.TestLoader()
1187:         loader.sortTestMethodsUsing = reversed_cmp
1188: 
1189:         test_names = ['test_2', 'test_1']
1190:         self.assertEqual(loader.getTestCaseNames(Foo), test_names)
1191: 
1192:     # "The default value is the built-in cmp() function"
1193:     def test_sortTestMethodsUsing__default_value(self):
1194:         loader = unittest.TestLoader()
1195:         self.assertTrue(loader.sortTestMethodsUsing is cmp)
1196: 
1197:     # "it can be set to None to disable the sort."
1198:     #
1199:     # XXX How is this different from reassigning cmp? Are the tests returned
1200:     # in a random order or something? This behaviour should die
1201:     def test_sortTestMethodsUsing__None(self):
1202:         class Foo(unittest.TestCase):
1203:             def test_1(self): pass
1204:             def test_2(self): pass
1205: 
1206:         loader = unittest.TestLoader()
1207:         loader.sortTestMethodsUsing = None
1208: 
1209:         test_names = ['test_2', 'test_1']
1210:         self.assertEqual(set(loader.getTestCaseNames(Foo)), set(test_names))
1211: 
1212:     ################################################################
1213:     ### /Tests for TestLoader.sortTestMethodsUsing
1214: 
1215:     ### Tests for TestLoader.suiteClass
1216:     ################################################################
1217: 
1218:     # "Callable object that constructs a test suite from a list of tests."
1219:     def test_suiteClass__loadTestsFromTestCase(self):
1220:         class Foo(unittest.TestCase):
1221:             def test_1(self): pass
1222:             def test_2(self): pass
1223:             def foo_bar(self): pass
1224: 
1225:         tests = [Foo('test_1'), Foo('test_2')]
1226: 
1227:         loader = unittest.TestLoader()
1228:         loader.suiteClass = list
1229:         self.assertEqual(loader.loadTestsFromTestCase(Foo), tests)
1230: 
1231:     # It is implicit in the documentation for TestLoader.suiteClass that
1232:     # all TestLoader.loadTestsFrom* methods respect it. Let's make sure
1233:     def test_suiteClass__loadTestsFromModule(self):
1234:         m = types.ModuleType('m')
1235:         class Foo(unittest.TestCase):
1236:             def test_1(self): pass
1237:             def test_2(self): pass
1238:             def foo_bar(self): pass
1239:         m.Foo = Foo
1240: 
1241:         tests = [[Foo('test_1'), Foo('test_2')]]
1242: 
1243:         loader = unittest.TestLoader()
1244:         loader.suiteClass = list
1245:         self.assertEqual(loader.loadTestsFromModule(m), tests)
1246: 
1247:     # It is implicit in the documentation for TestLoader.suiteClass that
1248:     # all TestLoader.loadTestsFrom* methods respect it. Let's make sure
1249:     def test_suiteClass__loadTestsFromName(self):
1250:         m = types.ModuleType('m')
1251:         class Foo(unittest.TestCase):
1252:             def test_1(self): pass
1253:             def test_2(self): pass
1254:             def foo_bar(self): pass
1255:         m.Foo = Foo
1256: 
1257:         tests = [Foo('test_1'), Foo('test_2')]
1258: 
1259:         loader = unittest.TestLoader()
1260:         loader.suiteClass = list
1261:         self.assertEqual(loader.loadTestsFromName('Foo', m), tests)
1262: 
1263:     # It is implicit in the documentation for TestLoader.suiteClass that
1264:     # all TestLoader.loadTestsFrom* methods respect it. Let's make sure
1265:     def test_suiteClass__loadTestsFromNames(self):
1266:         m = types.ModuleType('m')
1267:         class Foo(unittest.TestCase):
1268:             def test_1(self): pass
1269:             def test_2(self): pass
1270:             def foo_bar(self): pass
1271:         m.Foo = Foo
1272: 
1273:         tests = [[Foo('test_1'), Foo('test_2')]]
1274: 
1275:         loader = unittest.TestLoader()
1276:         loader.suiteClass = list
1277:         self.assertEqual(loader.loadTestsFromNames(['Foo'], m), tests)
1278: 
1279:     # "The default value is the TestSuite class"
1280:     def test_suiteClass__default_value(self):
1281:         loader = unittest.TestLoader()
1282:         self.assertIs(loader.suiteClass, unittest.TestSuite)
1283: 
1284:     # Make sure the dotted name resolution works even if the actual
1285:     # function doesn't have the same name as is used to find it.
1286:     def test_loadTestsFromName__function_with_different_name_than_method(self):
1287:         # lambdas have the name '<lambda>'.
1288:         m = types.ModuleType('m')
1289:         class MyTestCase(unittest.TestCase):
1290:             test = lambda: 1
1291:         m.testcase_1 = MyTestCase
1292: 
1293:         loader = unittest.TestLoader()
1294:         suite = loader.loadTestsFromNames(['testcase_1.test'], m)
1295:         self.assertIsInstance(suite, loader.suiteClass)
1296: 
1297:         ref_suite = unittest.TestSuite([MyTestCase('test')])
1298:         self.assertEqual(list(suite), [ref_suite])
1299: 
1300: if __name__ == '__main__':
1301:     unittest.main()
1302: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1, 0))

# 'import sys' statement (line 1)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 1, 0), 'sys', sys, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2, 0))

# 'import types' statement (line 2)
import types

import_module(stypy.reporting.localization.Localization(__file__, 2, 0), 'types', types, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 5, 0))

# 'import unittest' statement (line 5)
import unittest

import_module(stypy.reporting.localization.Localization(__file__, 5, 0), 'unittest', unittest, module_type_store)

# Declaration of the 'Test_TestLoader' class
# Getting the type of 'unittest' (line 8)
unittest_200755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 8, 22), 'unittest')
# Obtaining the member 'TestCase' of a type (line 8)
TestCase_200756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 8, 22), unittest_200755, 'TestCase')

class Test_TestLoader(TestCase_200756, ):

    @norecursion
    def test_loadTestsFromTestCase(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromTestCase'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromTestCase', 15, 4, False)
        # Assigning a type to the variable 'self' (line 16)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 16, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromTestCase.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromTestCase.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromTestCase.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromTestCase.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromTestCase')
        Test_TestLoader.test_loadTestsFromTestCase.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromTestCase.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromTestCase.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromTestCase.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromTestCase.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromTestCase.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromTestCase.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromTestCase', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromTestCase', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromTestCase(...)' code ##################

        # Declaration of the 'Foo' class
        # Getting the type of 'unittest' (line 16)
        unittest_200757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 16, 18), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 16)
        TestCase_200758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 16, 18), unittest_200757, 'TestCase')

        class Foo(TestCase_200758, ):

            @norecursion
            def test_1(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_1'
                module_type_store = module_type_store.open_function_context('test_1', 17, 12, False)
                # Assigning a type to the variable 'self' (line 18)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 18, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_1.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_1.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_1.__dict__.__setitem__('stypy_function_name', 'Foo.test_1')
                Foo.test_1.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_1.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_1.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_1.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_1', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_1', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_1(...)' code ##################

                pass
                
                # ################# End of 'test_1(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_1' in the type store
                # Getting the type of 'stypy_return_type' (line 17)
                stypy_return_type_200759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 17, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_200759)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_1'
                return stypy_return_type_200759


            @norecursion
            def test_2(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_2'
                module_type_store = module_type_store.open_function_context('test_2', 18, 12, False)
                # Assigning a type to the variable 'self' (line 19)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 19, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_2.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_2.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_2.__dict__.__setitem__('stypy_function_name', 'Foo.test_2')
                Foo.test_2.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_2.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_2.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_2.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_2', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_2', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_2(...)' code ##################

                pass
                
                # ################# End of 'test_2(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_2' in the type store
                # Getting the type of 'stypy_return_type' (line 18)
                stypy_return_type_200760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 18, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_200760)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_2'
                return stypy_return_type_200760


            @norecursion
            def foo_bar(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'foo_bar'
                module_type_store = module_type_store.open_function_context('foo_bar', 19, 12, False)
                # Assigning a type to the variable 'self' (line 20)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 20, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.foo_bar.__dict__.__setitem__('stypy_localization', localization)
                Foo.foo_bar.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.foo_bar.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.foo_bar.__dict__.__setitem__('stypy_function_name', 'Foo.foo_bar')
                Foo.foo_bar.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.foo_bar.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.foo_bar.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.foo_bar.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.foo_bar', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'foo_bar', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'foo_bar(...)' code ##################

                pass
                
                # ################# End of 'foo_bar(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'foo_bar' in the type store
                # Getting the type of 'stypy_return_type' (line 19)
                stypy_return_type_200761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 19, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_200761)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'foo_bar'
                return stypy_return_type_200761

        
        # Assigning a type to the variable 'Foo' (line 16)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 16, 8), 'Foo', Foo)
        
        # Assigning a Call to a Name (line 21):
        
        # Call to TestSuite(...): (line 21)
        # Processing the call arguments (line 21)
        
        # Obtaining an instance of the builtin type 'list' (line 21)
        list_200764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 21, 35), 'list')
        # Adding type elements to the builtin type 'list' instance (line 21)
        # Adding element type (line 21)
        
        # Call to Foo(...): (line 21)
        # Processing the call arguments (line 21)
        str_200766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 21, 40), 'str', 'test_1')
        # Processing the call keyword arguments (line 21)
        kwargs_200767 = {}
        # Getting the type of 'Foo' (line 21)
        Foo_200765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 21, 36), 'Foo', False)
        # Calling Foo(args, kwargs) (line 21)
        Foo_call_result_200768 = invoke(stypy.reporting.localization.Localization(__file__, 21, 36), Foo_200765, *[str_200766], **kwargs_200767)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 21, 35), list_200764, Foo_call_result_200768)
        # Adding element type (line 21)
        
        # Call to Foo(...): (line 21)
        # Processing the call arguments (line 21)
        str_200770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 21, 55), 'str', 'test_2')
        # Processing the call keyword arguments (line 21)
        kwargs_200771 = {}
        # Getting the type of 'Foo' (line 21)
        Foo_200769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 21, 51), 'Foo', False)
        # Calling Foo(args, kwargs) (line 21)
        Foo_call_result_200772 = invoke(stypy.reporting.localization.Localization(__file__, 21, 51), Foo_200769, *[str_200770], **kwargs_200771)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 21, 35), list_200764, Foo_call_result_200772)
        
        # Processing the call keyword arguments (line 21)
        kwargs_200773 = {}
        # Getting the type of 'unittest' (line 21)
        unittest_200762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 21, 16), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 21)
        TestSuite_200763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 21, 16), unittest_200762, 'TestSuite')
        # Calling TestSuite(args, kwargs) (line 21)
        TestSuite_call_result_200774 = invoke(stypy.reporting.localization.Localization(__file__, 21, 16), TestSuite_200763, *[list_200764], **kwargs_200773)
        
        # Assigning a type to the variable 'tests' (line 21)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 21, 8), 'tests', TestSuite_call_result_200774)
        
        # Assigning a Call to a Name (line 23):
        
        # Call to TestLoader(...): (line 23)
        # Processing the call keyword arguments (line 23)
        kwargs_200777 = {}
        # Getting the type of 'unittest' (line 23)
        unittest_200775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 23, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 23)
        TestLoader_200776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 23, 17), unittest_200775, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 23)
        TestLoader_call_result_200778 = invoke(stypy.reporting.localization.Localization(__file__, 23, 17), TestLoader_200776, *[], **kwargs_200777)
        
        # Assigning a type to the variable 'loader' (line 23)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 23, 8), 'loader', TestLoader_call_result_200778)
        
        # Call to assertEqual(...): (line 24)
        # Processing the call arguments (line 24)
        
        # Call to loadTestsFromTestCase(...): (line 24)
        # Processing the call arguments (line 24)
        # Getting the type of 'Foo' (line 24)
        Foo_200783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 24, 54), 'Foo', False)
        # Processing the call keyword arguments (line 24)
        kwargs_200784 = {}
        # Getting the type of 'loader' (line 24)
        loader_200781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 24, 25), 'loader', False)
        # Obtaining the member 'loadTestsFromTestCase' of a type (line 24)
        loadTestsFromTestCase_200782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 24, 25), loader_200781, 'loadTestsFromTestCase')
        # Calling loadTestsFromTestCase(args, kwargs) (line 24)
        loadTestsFromTestCase_call_result_200785 = invoke(stypy.reporting.localization.Localization(__file__, 24, 25), loadTestsFromTestCase_200782, *[Foo_200783], **kwargs_200784)
        
        # Getting the type of 'tests' (line 24)
        tests_200786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 24, 60), 'tests', False)
        # Processing the call keyword arguments (line 24)
        kwargs_200787 = {}
        # Getting the type of 'self' (line 24)
        self_200779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 24, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 24)
        assertEqual_200780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 24, 8), self_200779, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 24)
        assertEqual_call_result_200788 = invoke(stypy.reporting.localization.Localization(__file__, 24, 8), assertEqual_200780, *[loadTestsFromTestCase_call_result_200785, tests_200786], **kwargs_200787)
        
        
        # ################# End of 'test_loadTestsFromTestCase(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromTestCase' in the type store
        # Getting the type of 'stypy_return_type' (line 15)
        stypy_return_type_200789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 15, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_200789)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromTestCase'
        return stypy_return_type_200789


    @norecursion
    def test_loadTestsFromTestCase__no_matches(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromTestCase__no_matches'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromTestCase__no_matches', 30, 4, False)
        # Assigning a type to the variable 'self' (line 31)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 31, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromTestCase__no_matches.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromTestCase__no_matches.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromTestCase__no_matches.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromTestCase__no_matches.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromTestCase__no_matches')
        Test_TestLoader.test_loadTestsFromTestCase__no_matches.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromTestCase__no_matches.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromTestCase__no_matches.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromTestCase__no_matches.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromTestCase__no_matches.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromTestCase__no_matches.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromTestCase__no_matches.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromTestCase__no_matches', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromTestCase__no_matches', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromTestCase__no_matches(...)' code ##################

        # Declaration of the 'Foo' class
        # Getting the type of 'unittest' (line 31)
        unittest_200790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 31, 18), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 31)
        TestCase_200791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 31, 18), unittest_200790, 'TestCase')

        class Foo(TestCase_200791, ):

            @norecursion
            def foo_bar(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'foo_bar'
                module_type_store = module_type_store.open_function_context('foo_bar', 32, 12, False)
                # Assigning a type to the variable 'self' (line 33)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 33, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.foo_bar.__dict__.__setitem__('stypy_localization', localization)
                Foo.foo_bar.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.foo_bar.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.foo_bar.__dict__.__setitem__('stypy_function_name', 'Foo.foo_bar')
                Foo.foo_bar.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.foo_bar.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.foo_bar.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.foo_bar.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.foo_bar', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'foo_bar', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'foo_bar(...)' code ##################

                pass
                
                # ################# End of 'foo_bar(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'foo_bar' in the type store
                # Getting the type of 'stypy_return_type' (line 32)
                stypy_return_type_200792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 32, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_200792)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'foo_bar'
                return stypy_return_type_200792

        
        # Assigning a type to the variable 'Foo' (line 31)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 31, 8), 'Foo', Foo)
        
        # Assigning a Call to a Name (line 34):
        
        # Call to TestSuite(...): (line 34)
        # Processing the call keyword arguments (line 34)
        kwargs_200795 = {}
        # Getting the type of 'unittest' (line 34)
        unittest_200793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 34, 22), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 34)
        TestSuite_200794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 34, 22), unittest_200793, 'TestSuite')
        # Calling TestSuite(args, kwargs) (line 34)
        TestSuite_call_result_200796 = invoke(stypy.reporting.localization.Localization(__file__, 34, 22), TestSuite_200794, *[], **kwargs_200795)
        
        # Assigning a type to the variable 'empty_suite' (line 34)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 8), 'empty_suite', TestSuite_call_result_200796)
        
        # Assigning a Call to a Name (line 36):
        
        # Call to TestLoader(...): (line 36)
        # Processing the call keyword arguments (line 36)
        kwargs_200799 = {}
        # Getting the type of 'unittest' (line 36)
        unittest_200797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 36)
        TestLoader_200798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 36, 17), unittest_200797, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 36)
        TestLoader_call_result_200800 = invoke(stypy.reporting.localization.Localization(__file__, 36, 17), TestLoader_200798, *[], **kwargs_200799)
        
        # Assigning a type to the variable 'loader' (line 36)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 36, 8), 'loader', TestLoader_call_result_200800)
        
        # Call to assertEqual(...): (line 37)
        # Processing the call arguments (line 37)
        
        # Call to loadTestsFromTestCase(...): (line 37)
        # Processing the call arguments (line 37)
        # Getting the type of 'Foo' (line 37)
        Foo_200805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 54), 'Foo', False)
        # Processing the call keyword arguments (line 37)
        kwargs_200806 = {}
        # Getting the type of 'loader' (line 37)
        loader_200803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 25), 'loader', False)
        # Obtaining the member 'loadTestsFromTestCase' of a type (line 37)
        loadTestsFromTestCase_200804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 37, 25), loader_200803, 'loadTestsFromTestCase')
        # Calling loadTestsFromTestCase(args, kwargs) (line 37)
        loadTestsFromTestCase_call_result_200807 = invoke(stypy.reporting.localization.Localization(__file__, 37, 25), loadTestsFromTestCase_200804, *[Foo_200805], **kwargs_200806)
        
        # Getting the type of 'empty_suite' (line 37)
        empty_suite_200808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 60), 'empty_suite', False)
        # Processing the call keyword arguments (line 37)
        kwargs_200809 = {}
        # Getting the type of 'self' (line 37)
        self_200801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 37)
        assertEqual_200802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 37, 8), self_200801, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 37)
        assertEqual_call_result_200810 = invoke(stypy.reporting.localization.Localization(__file__, 37, 8), assertEqual_200802, *[loadTestsFromTestCase_call_result_200807, empty_suite_200808], **kwargs_200809)
        
        
        # ################# End of 'test_loadTestsFromTestCase__no_matches(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromTestCase__no_matches' in the type store
        # Getting the type of 'stypy_return_type' (line 30)
        stypy_return_type_200811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 30, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_200811)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromTestCase__no_matches'
        return stypy_return_type_200811


    @norecursion
    def test_loadTestsFromTestCase__TestSuite_subclass(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromTestCase__TestSuite_subclass'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromTestCase__TestSuite_subclass', 48, 4, False)
        # Assigning a type to the variable 'self' (line 49)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 49, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromTestCase__TestSuite_subclass.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromTestCase__TestSuite_subclass.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromTestCase__TestSuite_subclass.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromTestCase__TestSuite_subclass.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromTestCase__TestSuite_subclass')
        Test_TestLoader.test_loadTestsFromTestCase__TestSuite_subclass.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromTestCase__TestSuite_subclass.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromTestCase__TestSuite_subclass.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromTestCase__TestSuite_subclass.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromTestCase__TestSuite_subclass.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromTestCase__TestSuite_subclass.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromTestCase__TestSuite_subclass.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromTestCase__TestSuite_subclass', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromTestCase__TestSuite_subclass', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromTestCase__TestSuite_subclass(...)' code ##################

        # Declaration of the 'NotATestCase' class
        # Getting the type of 'unittest' (line 49)
        unittest_200812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 49, 27), 'unittest')
        # Obtaining the member 'TestSuite' of a type (line 49)
        TestSuite_200813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 49, 27), unittest_200812, 'TestSuite')

        class NotATestCase(TestSuite_200813, ):
            pass
        
        # Assigning a type to the variable 'NotATestCase' (line 49)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 49, 8), 'NotATestCase', NotATestCase)
        
        # Assigning a Call to a Name (line 52):
        
        # Call to TestLoader(...): (line 52)
        # Processing the call keyword arguments (line 52)
        kwargs_200816 = {}
        # Getting the type of 'unittest' (line 52)
        unittest_200814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 52)
        TestLoader_200815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 52, 17), unittest_200814, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 52)
        TestLoader_call_result_200817 = invoke(stypy.reporting.localization.Localization(__file__, 52, 17), TestLoader_200815, *[], **kwargs_200816)
        
        # Assigning a type to the variable 'loader' (line 52)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 52, 8), 'loader', TestLoader_call_result_200817)
        
        
        # SSA begins for try-except statement (line 53)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to loadTestsFromTestCase(...): (line 54)
        # Processing the call arguments (line 54)
        # Getting the type of 'NotATestCase' (line 54)
        NotATestCase_200820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 54, 41), 'NotATestCase', False)
        # Processing the call keyword arguments (line 54)
        kwargs_200821 = {}
        # Getting the type of 'loader' (line 54)
        loader_200818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 54, 12), 'loader', False)
        # Obtaining the member 'loadTestsFromTestCase' of a type (line 54)
        loadTestsFromTestCase_200819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 54, 12), loader_200818, 'loadTestsFromTestCase')
        # Calling loadTestsFromTestCase(args, kwargs) (line 54)
        loadTestsFromTestCase_call_result_200822 = invoke(stypy.reporting.localization.Localization(__file__, 54, 12), loadTestsFromTestCase_200819, *[NotATestCase_200820], **kwargs_200821)
        
        # SSA branch for the except part of a try statement (line 53)
        # SSA branch for the except 'TypeError' branch of a try statement (line 53)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA branch for the else branch of a try statement (line 53)
        module_type_store.open_ssa_branch('except else')
        
        # Call to fail(...): (line 58)
        # Processing the call arguments (line 58)
        str_200825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 58, 22), 'str', 'Should raise TypeError')
        # Processing the call keyword arguments (line 58)
        kwargs_200826 = {}
        # Getting the type of 'self' (line 58)
        self_200823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 58, 12), 'self', False)
        # Obtaining the member 'fail' of a type (line 58)
        fail_200824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 58, 12), self_200823, 'fail')
        # Calling fail(args, kwargs) (line 58)
        fail_call_result_200827 = invoke(stypy.reporting.localization.Localization(__file__, 58, 12), fail_200824, *[str_200825], **kwargs_200826)
        
        # SSA join for try-except statement (line 53)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_loadTestsFromTestCase__TestSuite_subclass(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromTestCase__TestSuite_subclass' in the type store
        # Getting the type of 'stypy_return_type' (line 48)
        stypy_return_type_200828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 48, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_200828)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromTestCase__TestSuite_subclass'
        return stypy_return_type_200828


    @norecursion
    def test_loadTestsFromTestCase__default_method_name(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromTestCase__default_method_name'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromTestCase__default_method_name', 66, 4, False)
        # Assigning a type to the variable 'self' (line 67)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 67, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromTestCase__default_method_name.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromTestCase__default_method_name.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromTestCase__default_method_name.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromTestCase__default_method_name.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromTestCase__default_method_name')
        Test_TestLoader.test_loadTestsFromTestCase__default_method_name.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromTestCase__default_method_name.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromTestCase__default_method_name.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromTestCase__default_method_name.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromTestCase__default_method_name.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromTestCase__default_method_name.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromTestCase__default_method_name.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromTestCase__default_method_name', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromTestCase__default_method_name', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromTestCase__default_method_name(...)' code ##################

        # Declaration of the 'Foo' class
        # Getting the type of 'unittest' (line 67)
        unittest_200829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 67, 18), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 67)
        TestCase_200830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 67, 18), unittest_200829, 'TestCase')

        class Foo(TestCase_200830, ):

            @norecursion
            def runTest(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'runTest'
                module_type_store = module_type_store.open_function_context('runTest', 68, 12, False)
                # Assigning a type to the variable 'self' (line 69)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 69, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.runTest.__dict__.__setitem__('stypy_localization', localization)
                Foo.runTest.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.runTest.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.runTest.__dict__.__setitem__('stypy_function_name', 'Foo.runTest')
                Foo.runTest.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.runTest.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.runTest.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.runTest.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.runTest.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.runTest.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.runTest.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.runTest', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'runTest', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'runTest(...)' code ##################

                pass
                
                # ################# End of 'runTest(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'runTest' in the type store
                # Getting the type of 'stypy_return_type' (line 68)
                stypy_return_type_200831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_200831)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'runTest'
                return stypy_return_type_200831

        
        # Assigning a type to the variable 'Foo' (line 67)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 67, 8), 'Foo', Foo)
        
        # Assigning a Call to a Name (line 71):
        
        # Call to TestLoader(...): (line 71)
        # Processing the call keyword arguments (line 71)
        kwargs_200834 = {}
        # Getting the type of 'unittest' (line 71)
        unittest_200832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 71)
        TestLoader_200833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 71, 17), unittest_200832, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 71)
        TestLoader_call_result_200835 = invoke(stypy.reporting.localization.Localization(__file__, 71, 17), TestLoader_200833, *[], **kwargs_200834)
        
        # Assigning a type to the variable 'loader' (line 71)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 71, 8), 'loader', TestLoader_call_result_200835)
        
        # Call to assertFalse(...): (line 73)
        # Processing the call arguments (line 73)
        
        # Call to startswith(...): (line 73)
        # Processing the call arguments (line 73)
        # Getting the type of 'loader' (line 73)
        loader_200840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 73, 46), 'loader', False)
        # Obtaining the member 'testMethodPrefix' of a type (line 73)
        testMethodPrefix_200841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 73, 46), loader_200840, 'testMethodPrefix')
        # Processing the call keyword arguments (line 73)
        kwargs_200842 = {}
        str_200838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 73, 25), 'str', 'runTest')
        # Obtaining the member 'startswith' of a type (line 73)
        startswith_200839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 73, 25), str_200838, 'startswith')
        # Calling startswith(args, kwargs) (line 73)
        startswith_call_result_200843 = invoke(stypy.reporting.localization.Localization(__file__, 73, 25), startswith_200839, *[testMethodPrefix_200841], **kwargs_200842)
        
        # Processing the call keyword arguments (line 73)
        kwargs_200844 = {}
        # Getting the type of 'self' (line 73)
        self_200836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 73, 8), 'self', False)
        # Obtaining the member 'assertFalse' of a type (line 73)
        assertFalse_200837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 73, 8), self_200836, 'assertFalse')
        # Calling assertFalse(args, kwargs) (line 73)
        assertFalse_call_result_200845 = invoke(stypy.reporting.localization.Localization(__file__, 73, 8), assertFalse_200837, *[startswith_call_result_200843], **kwargs_200844)
        
        
        # Assigning a Call to a Name (line 75):
        
        # Call to loadTestsFromTestCase(...): (line 75)
        # Processing the call arguments (line 75)
        # Getting the type of 'Foo' (line 75)
        Foo_200848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 45), 'Foo', False)
        # Processing the call keyword arguments (line 75)
        kwargs_200849 = {}
        # Getting the type of 'loader' (line 75)
        loader_200846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromTestCase' of a type (line 75)
        loadTestsFromTestCase_200847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 75, 16), loader_200846, 'loadTestsFromTestCase')
        # Calling loadTestsFromTestCase(args, kwargs) (line 75)
        loadTestsFromTestCase_call_result_200850 = invoke(stypy.reporting.localization.Localization(__file__, 75, 16), loadTestsFromTestCase_200847, *[Foo_200848], **kwargs_200849)
        
        # Assigning a type to the variable 'suite' (line 75)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 8), 'suite', loadTestsFromTestCase_call_result_200850)
        
        # Call to assertIsInstance(...): (line 76)
        # Processing the call arguments (line 76)
        # Getting the type of 'suite' (line 76)
        suite_200853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 30), 'suite', False)
        # Getting the type of 'loader' (line 76)
        loader_200854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 37), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 76)
        suiteClass_200855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 76, 37), loader_200854, 'suiteClass')
        # Processing the call keyword arguments (line 76)
        kwargs_200856 = {}
        # Getting the type of 'self' (line 76)
        self_200851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 8), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 76)
        assertIsInstance_200852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 76, 8), self_200851, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 76)
        assertIsInstance_call_result_200857 = invoke(stypy.reporting.localization.Localization(__file__, 76, 8), assertIsInstance_200852, *[suite_200853, suiteClass_200855], **kwargs_200856)
        
        
        # Call to assertEqual(...): (line 77)
        # Processing the call arguments (line 77)
        
        # Call to list(...): (line 77)
        # Processing the call arguments (line 77)
        # Getting the type of 'suite' (line 77)
        suite_200861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 30), 'suite', False)
        # Processing the call keyword arguments (line 77)
        kwargs_200862 = {}
        # Getting the type of 'list' (line 77)
        list_200860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 25), 'list', False)
        # Calling list(args, kwargs) (line 77)
        list_call_result_200863 = invoke(stypy.reporting.localization.Localization(__file__, 77, 25), list_200860, *[suite_200861], **kwargs_200862)
        
        
        # Obtaining an instance of the builtin type 'list' (line 77)
        list_200864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 77)
        # Adding element type (line 77)
        
        # Call to Foo(...): (line 77)
        # Processing the call arguments (line 77)
        str_200866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 43), 'str', 'runTest')
        # Processing the call keyword arguments (line 77)
        kwargs_200867 = {}
        # Getting the type of 'Foo' (line 77)
        Foo_200865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 39), 'Foo', False)
        # Calling Foo(args, kwargs) (line 77)
        Foo_call_result_200868 = invoke(stypy.reporting.localization.Localization(__file__, 77, 39), Foo_200865, *[str_200866], **kwargs_200867)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 77, 38), list_200864, Foo_call_result_200868)
        
        # Processing the call keyword arguments (line 77)
        kwargs_200869 = {}
        # Getting the type of 'self' (line 77)
        self_200858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 77)
        assertEqual_200859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 77, 8), self_200858, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 77)
        assertEqual_call_result_200870 = invoke(stypy.reporting.localization.Localization(__file__, 77, 8), assertEqual_200859, *[list_call_result_200863, list_200864], **kwargs_200869)
        
        
        # ################# End of 'test_loadTestsFromTestCase__default_method_name(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromTestCase__default_method_name' in the type store
        # Getting the type of 'stypy_return_type' (line 66)
        stypy_return_type_200871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 66, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_200871)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromTestCase__default_method_name'
        return stypy_return_type_200871


    @norecursion
    def test_loadTestsFromModule__TestCase_subclass(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromModule__TestCase_subclass'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromModule__TestCase_subclass', 86, 4, False)
        # Assigning a type to the variable 'self' (line 87)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 87, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromModule__TestCase_subclass.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromModule__TestCase_subclass.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromModule__TestCase_subclass.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromModule__TestCase_subclass.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromModule__TestCase_subclass')
        Test_TestLoader.test_loadTestsFromModule__TestCase_subclass.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromModule__TestCase_subclass.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromModule__TestCase_subclass.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromModule__TestCase_subclass.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromModule__TestCase_subclass.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromModule__TestCase_subclass.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromModule__TestCase_subclass.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromModule__TestCase_subclass', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromModule__TestCase_subclass', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromModule__TestCase_subclass(...)' code ##################

        
        # Assigning a Call to a Name (line 87):
        
        # Call to ModuleType(...): (line 87)
        # Processing the call arguments (line 87)
        str_200874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 87, 29), 'str', 'm')
        # Processing the call keyword arguments (line 87)
        kwargs_200875 = {}
        # Getting the type of 'types' (line 87)
        types_200872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 87, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 87)
        ModuleType_200873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 87, 12), types_200872, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 87)
        ModuleType_call_result_200876 = invoke(stypy.reporting.localization.Localization(__file__, 87, 12), ModuleType_200873, *[str_200874], **kwargs_200875)
        
        # Assigning a type to the variable 'm' (line 87)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 87, 8), 'm', ModuleType_call_result_200876)
        # Declaration of the 'MyTestCase' class
        # Getting the type of 'unittest' (line 88)
        unittest_200877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 88, 25), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 88)
        TestCase_200878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 88, 25), unittest_200877, 'TestCase')

        class MyTestCase(TestCase_200878, ):

            @norecursion
            def test(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test'
                module_type_store = module_type_store.open_function_context('test', 89, 12, False)
                # Assigning a type to the variable 'self' (line 90)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 90, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                MyTestCase.test.__dict__.__setitem__('stypy_localization', localization)
                MyTestCase.test.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                MyTestCase.test.__dict__.__setitem__('stypy_type_store', module_type_store)
                MyTestCase.test.__dict__.__setitem__('stypy_function_name', 'MyTestCase.test')
                MyTestCase.test.__dict__.__setitem__('stypy_param_names_list', [])
                MyTestCase.test.__dict__.__setitem__('stypy_varargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_kwargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_call_defaults', defaults)
                MyTestCase.test.__dict__.__setitem__('stypy_call_varargs', varargs)
                MyTestCase.test.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                MyTestCase.test.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'MyTestCase.test', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test(...)' code ##################

                pass
                
                # ################# End of 'test(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test' in the type store
                # Getting the type of 'stypy_return_type' (line 89)
                stypy_return_type_200879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_200879)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test'
                return stypy_return_type_200879

        
        # Assigning a type to the variable 'MyTestCase' (line 88)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 88, 8), 'MyTestCase', MyTestCase)
        
        # Assigning a Name to a Attribute (line 91):
        # Getting the type of 'MyTestCase' (line 91)
        MyTestCase_200880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 23), 'MyTestCase')
        # Getting the type of 'm' (line 91)
        m_200881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 8), 'm')
        # Setting the type of the member 'testcase_1' of a type (line 91)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 91, 8), m_200881, 'testcase_1', MyTestCase_200880)
        
        # Assigning a Call to a Name (line 93):
        
        # Call to TestLoader(...): (line 93)
        # Processing the call keyword arguments (line 93)
        kwargs_200884 = {}
        # Getting the type of 'unittest' (line 93)
        unittest_200882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 93)
        TestLoader_200883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 93, 17), unittest_200882, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 93)
        TestLoader_call_result_200885 = invoke(stypy.reporting.localization.Localization(__file__, 93, 17), TestLoader_200883, *[], **kwargs_200884)
        
        # Assigning a type to the variable 'loader' (line 93)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 93, 8), 'loader', TestLoader_call_result_200885)
        
        # Assigning a Call to a Name (line 94):
        
        # Call to loadTestsFromModule(...): (line 94)
        # Processing the call arguments (line 94)
        # Getting the type of 'm' (line 94)
        m_200888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 43), 'm', False)
        # Processing the call keyword arguments (line 94)
        kwargs_200889 = {}
        # Getting the type of 'loader' (line 94)
        loader_200886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromModule' of a type (line 94)
        loadTestsFromModule_200887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 94, 16), loader_200886, 'loadTestsFromModule')
        # Calling loadTestsFromModule(args, kwargs) (line 94)
        loadTestsFromModule_call_result_200890 = invoke(stypy.reporting.localization.Localization(__file__, 94, 16), loadTestsFromModule_200887, *[m_200888], **kwargs_200889)
        
        # Assigning a type to the variable 'suite' (line 94)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 94, 8), 'suite', loadTestsFromModule_call_result_200890)
        
        # Call to assertIsInstance(...): (line 95)
        # Processing the call arguments (line 95)
        # Getting the type of 'suite' (line 95)
        suite_200893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 30), 'suite', False)
        # Getting the type of 'loader' (line 95)
        loader_200894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 37), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 95)
        suiteClass_200895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 95, 37), loader_200894, 'suiteClass')
        # Processing the call keyword arguments (line 95)
        kwargs_200896 = {}
        # Getting the type of 'self' (line 95)
        self_200891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 8), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 95)
        assertIsInstance_200892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 95, 8), self_200891, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 95)
        assertIsInstance_call_result_200897 = invoke(stypy.reporting.localization.Localization(__file__, 95, 8), assertIsInstance_200892, *[suite_200893, suiteClass_200895], **kwargs_200896)
        
        
        # Assigning a List to a Name (line 97):
        
        # Obtaining an instance of the builtin type 'list' (line 97)
        list_200898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 97, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 97)
        # Adding element type (line 97)
        
        # Call to suiteClass(...): (line 97)
        # Processing the call arguments (line 97)
        
        # Obtaining an instance of the builtin type 'list' (line 97)
        list_200901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 97, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 97)
        # Adding element type (line 97)
        
        # Call to MyTestCase(...): (line 97)
        # Processing the call arguments (line 97)
        str_200903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 97, 50), 'str', 'test')
        # Processing the call keyword arguments (line 97)
        kwargs_200904 = {}
        # Getting the type of 'MyTestCase' (line 97)
        MyTestCase_200902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 39), 'MyTestCase', False)
        # Calling MyTestCase(args, kwargs) (line 97)
        MyTestCase_call_result_200905 = invoke(stypy.reporting.localization.Localization(__file__, 97, 39), MyTestCase_200902, *[str_200903], **kwargs_200904)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 97, 38), list_200901, MyTestCase_call_result_200905)
        
        # Processing the call keyword arguments (line 97)
        kwargs_200906 = {}
        # Getting the type of 'loader' (line 97)
        loader_200899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 20), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 97)
        suiteClass_200900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 97, 20), loader_200899, 'suiteClass')
        # Calling suiteClass(args, kwargs) (line 97)
        suiteClass_call_result_200907 = invoke(stypy.reporting.localization.Localization(__file__, 97, 20), suiteClass_200900, *[list_200901], **kwargs_200906)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 97, 19), list_200898, suiteClass_call_result_200907)
        
        # Assigning a type to the variable 'expected' (line 97)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 97, 8), 'expected', list_200898)
        
        # Call to assertEqual(...): (line 98)
        # Processing the call arguments (line 98)
        
        # Call to list(...): (line 98)
        # Processing the call arguments (line 98)
        # Getting the type of 'suite' (line 98)
        suite_200911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 30), 'suite', False)
        # Processing the call keyword arguments (line 98)
        kwargs_200912 = {}
        # Getting the type of 'list' (line 98)
        list_200910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 25), 'list', False)
        # Calling list(args, kwargs) (line 98)
        list_call_result_200913 = invoke(stypy.reporting.localization.Localization(__file__, 98, 25), list_200910, *[suite_200911], **kwargs_200912)
        
        # Getting the type of 'expected' (line 98)
        expected_200914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 38), 'expected', False)
        # Processing the call keyword arguments (line 98)
        kwargs_200915 = {}
        # Getting the type of 'self' (line 98)
        self_200908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 98)
        assertEqual_200909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 98, 8), self_200908, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 98)
        assertEqual_call_result_200916 = invoke(stypy.reporting.localization.Localization(__file__, 98, 8), assertEqual_200909, *[list_call_result_200913, expected_200914], **kwargs_200915)
        
        
        # ################# End of 'test_loadTestsFromModule__TestCase_subclass(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromModule__TestCase_subclass' in the type store
        # Getting the type of 'stypy_return_type' (line 86)
        stypy_return_type_200917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_200917)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromModule__TestCase_subclass'
        return stypy_return_type_200917


    @norecursion
    def test_loadTestsFromModule__no_TestCase_instances(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromModule__no_TestCase_instances'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromModule__no_TestCase_instances', 103, 4, False)
        # Assigning a type to the variable 'self' (line 104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromModule__no_TestCase_instances.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromModule__no_TestCase_instances.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromModule__no_TestCase_instances.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromModule__no_TestCase_instances.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromModule__no_TestCase_instances')
        Test_TestLoader.test_loadTestsFromModule__no_TestCase_instances.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromModule__no_TestCase_instances.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromModule__no_TestCase_instances.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromModule__no_TestCase_instances.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromModule__no_TestCase_instances.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromModule__no_TestCase_instances.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromModule__no_TestCase_instances.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromModule__no_TestCase_instances', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromModule__no_TestCase_instances', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromModule__no_TestCase_instances(...)' code ##################

        
        # Assigning a Call to a Name (line 104):
        
        # Call to ModuleType(...): (line 104)
        # Processing the call arguments (line 104)
        str_200920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 29), 'str', 'm')
        # Processing the call keyword arguments (line 104)
        kwargs_200921 = {}
        # Getting the type of 'types' (line 104)
        types_200918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 104)
        ModuleType_200919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 104, 12), types_200918, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 104)
        ModuleType_call_result_200922 = invoke(stypy.reporting.localization.Localization(__file__, 104, 12), ModuleType_200919, *[str_200920], **kwargs_200921)
        
        # Assigning a type to the variable 'm' (line 104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 8), 'm', ModuleType_call_result_200922)
        
        # Assigning a Call to a Name (line 106):
        
        # Call to TestLoader(...): (line 106)
        # Processing the call keyword arguments (line 106)
        kwargs_200925 = {}
        # Getting the type of 'unittest' (line 106)
        unittest_200923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 106)
        TestLoader_200924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 106, 17), unittest_200923, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 106)
        TestLoader_call_result_200926 = invoke(stypy.reporting.localization.Localization(__file__, 106, 17), TestLoader_200924, *[], **kwargs_200925)
        
        # Assigning a type to the variable 'loader' (line 106)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 106, 8), 'loader', TestLoader_call_result_200926)
        
        # Assigning a Call to a Name (line 107):
        
        # Call to loadTestsFromModule(...): (line 107)
        # Processing the call arguments (line 107)
        # Getting the type of 'm' (line 107)
        m_200929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 43), 'm', False)
        # Processing the call keyword arguments (line 107)
        kwargs_200930 = {}
        # Getting the type of 'loader' (line 107)
        loader_200927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromModule' of a type (line 107)
        loadTestsFromModule_200928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 107, 16), loader_200927, 'loadTestsFromModule')
        # Calling loadTestsFromModule(args, kwargs) (line 107)
        loadTestsFromModule_call_result_200931 = invoke(stypy.reporting.localization.Localization(__file__, 107, 16), loadTestsFromModule_200928, *[m_200929], **kwargs_200930)
        
        # Assigning a type to the variable 'suite' (line 107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 107, 8), 'suite', loadTestsFromModule_call_result_200931)
        
        # Call to assertIsInstance(...): (line 108)
        # Processing the call arguments (line 108)
        # Getting the type of 'suite' (line 108)
        suite_200934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 30), 'suite', False)
        # Getting the type of 'loader' (line 108)
        loader_200935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 37), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 108)
        suiteClass_200936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 108, 37), loader_200935, 'suiteClass')
        # Processing the call keyword arguments (line 108)
        kwargs_200937 = {}
        # Getting the type of 'self' (line 108)
        self_200932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 8), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 108)
        assertIsInstance_200933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 108, 8), self_200932, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 108)
        assertIsInstance_call_result_200938 = invoke(stypy.reporting.localization.Localization(__file__, 108, 8), assertIsInstance_200933, *[suite_200934, suiteClass_200936], **kwargs_200937)
        
        
        # Call to assertEqual(...): (line 109)
        # Processing the call arguments (line 109)
        
        # Call to list(...): (line 109)
        # Processing the call arguments (line 109)
        # Getting the type of 'suite' (line 109)
        suite_200942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 30), 'suite', False)
        # Processing the call keyword arguments (line 109)
        kwargs_200943 = {}
        # Getting the type of 'list' (line 109)
        list_200941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 25), 'list', False)
        # Calling list(args, kwargs) (line 109)
        list_call_result_200944 = invoke(stypy.reporting.localization.Localization(__file__, 109, 25), list_200941, *[suite_200942], **kwargs_200943)
        
        
        # Obtaining an instance of the builtin type 'list' (line 109)
        list_200945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 109, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 109)
        
        # Processing the call keyword arguments (line 109)
        kwargs_200946 = {}
        # Getting the type of 'self' (line 109)
        self_200939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 109)
        assertEqual_200940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 109, 8), self_200939, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 109)
        assertEqual_call_result_200947 = invoke(stypy.reporting.localization.Localization(__file__, 109, 8), assertEqual_200940, *[list_call_result_200944, list_200945], **kwargs_200946)
        
        
        # ################# End of 'test_loadTestsFromModule__no_TestCase_instances(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromModule__no_TestCase_instances' in the type store
        # Getting the type of 'stypy_return_type' (line 103)
        stypy_return_type_200948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_200948)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromModule__no_TestCase_instances'
        return stypy_return_type_200948


    @norecursion
    def test_loadTestsFromModule__no_TestCase_tests(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromModule__no_TestCase_tests'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromModule__no_TestCase_tests', 114, 4, False)
        # Assigning a type to the variable 'self' (line 115)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 115, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromModule__no_TestCase_tests.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromModule__no_TestCase_tests.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromModule__no_TestCase_tests.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromModule__no_TestCase_tests.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromModule__no_TestCase_tests')
        Test_TestLoader.test_loadTestsFromModule__no_TestCase_tests.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromModule__no_TestCase_tests.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromModule__no_TestCase_tests.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromModule__no_TestCase_tests.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromModule__no_TestCase_tests.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromModule__no_TestCase_tests.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromModule__no_TestCase_tests.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromModule__no_TestCase_tests', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromModule__no_TestCase_tests', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromModule__no_TestCase_tests(...)' code ##################

        
        # Assigning a Call to a Name (line 115):
        
        # Call to ModuleType(...): (line 115)
        # Processing the call arguments (line 115)
        str_200951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 115, 29), 'str', 'm')
        # Processing the call keyword arguments (line 115)
        kwargs_200952 = {}
        # Getting the type of 'types' (line 115)
        types_200949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 115)
        ModuleType_200950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 115, 12), types_200949, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 115)
        ModuleType_call_result_200953 = invoke(stypy.reporting.localization.Localization(__file__, 115, 12), ModuleType_200950, *[str_200951], **kwargs_200952)
        
        # Assigning a type to the variable 'm' (line 115)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 115, 8), 'm', ModuleType_call_result_200953)
        # Declaration of the 'MyTestCase' class
        # Getting the type of 'unittest' (line 116)
        unittest_200954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 25), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 116)
        TestCase_200955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 116, 25), unittest_200954, 'TestCase')

        class MyTestCase(TestCase_200955, ):
            pass
        
        # Assigning a type to the variable 'MyTestCase' (line 116)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 116, 8), 'MyTestCase', MyTestCase)
        
        # Assigning a Name to a Attribute (line 118):
        # Getting the type of 'MyTestCase' (line 118)
        MyTestCase_200956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 118, 23), 'MyTestCase')
        # Getting the type of 'm' (line 118)
        m_200957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 118, 8), 'm')
        # Setting the type of the member 'testcase_1' of a type (line 118)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 118, 8), m_200957, 'testcase_1', MyTestCase_200956)
        
        # Assigning a Call to a Name (line 120):
        
        # Call to TestLoader(...): (line 120)
        # Processing the call keyword arguments (line 120)
        kwargs_200960 = {}
        # Getting the type of 'unittest' (line 120)
        unittest_200958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 120)
        TestLoader_200959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 120, 17), unittest_200958, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 120)
        TestLoader_call_result_200961 = invoke(stypy.reporting.localization.Localization(__file__, 120, 17), TestLoader_200959, *[], **kwargs_200960)
        
        # Assigning a type to the variable 'loader' (line 120)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 120, 8), 'loader', TestLoader_call_result_200961)
        
        # Assigning a Call to a Name (line 121):
        
        # Call to loadTestsFromModule(...): (line 121)
        # Processing the call arguments (line 121)
        # Getting the type of 'm' (line 121)
        m_200964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 43), 'm', False)
        # Processing the call keyword arguments (line 121)
        kwargs_200965 = {}
        # Getting the type of 'loader' (line 121)
        loader_200962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromModule' of a type (line 121)
        loadTestsFromModule_200963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 121, 16), loader_200962, 'loadTestsFromModule')
        # Calling loadTestsFromModule(args, kwargs) (line 121)
        loadTestsFromModule_call_result_200966 = invoke(stypy.reporting.localization.Localization(__file__, 121, 16), loadTestsFromModule_200963, *[m_200964], **kwargs_200965)
        
        # Assigning a type to the variable 'suite' (line 121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 121, 8), 'suite', loadTestsFromModule_call_result_200966)
        
        # Call to assertIsInstance(...): (line 122)
        # Processing the call arguments (line 122)
        # Getting the type of 'suite' (line 122)
        suite_200969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 30), 'suite', False)
        # Getting the type of 'loader' (line 122)
        loader_200970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 37), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 122)
        suiteClass_200971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 122, 37), loader_200970, 'suiteClass')
        # Processing the call keyword arguments (line 122)
        kwargs_200972 = {}
        # Getting the type of 'self' (line 122)
        self_200967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 8), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 122)
        assertIsInstance_200968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 122, 8), self_200967, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 122)
        assertIsInstance_call_result_200973 = invoke(stypy.reporting.localization.Localization(__file__, 122, 8), assertIsInstance_200968, *[suite_200969, suiteClass_200971], **kwargs_200972)
        
        
        # Call to assertEqual(...): (line 124)
        # Processing the call arguments (line 124)
        
        # Call to list(...): (line 124)
        # Processing the call arguments (line 124)
        # Getting the type of 'suite' (line 124)
        suite_200977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 30), 'suite', False)
        # Processing the call keyword arguments (line 124)
        kwargs_200978 = {}
        # Getting the type of 'list' (line 124)
        list_200976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 25), 'list', False)
        # Calling list(args, kwargs) (line 124)
        list_call_result_200979 = invoke(stypy.reporting.localization.Localization(__file__, 124, 25), list_200976, *[suite_200977], **kwargs_200978)
        
        
        # Obtaining an instance of the builtin type 'list' (line 124)
        list_200980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 124, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 124)
        # Adding element type (line 124)
        
        # Call to suiteClass(...): (line 124)
        # Processing the call keyword arguments (line 124)
        kwargs_200983 = {}
        # Getting the type of 'loader' (line 124)
        loader_200981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 39), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 124)
        suiteClass_200982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 124, 39), loader_200981, 'suiteClass')
        # Calling suiteClass(args, kwargs) (line 124)
        suiteClass_call_result_200984 = invoke(stypy.reporting.localization.Localization(__file__, 124, 39), suiteClass_200982, *[], **kwargs_200983)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 124, 38), list_200980, suiteClass_call_result_200984)
        
        # Processing the call keyword arguments (line 124)
        kwargs_200985 = {}
        # Getting the type of 'self' (line 124)
        self_200974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 124)
        assertEqual_200975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 124, 8), self_200974, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 124)
        assertEqual_call_result_200986 = invoke(stypy.reporting.localization.Localization(__file__, 124, 8), assertEqual_200975, *[list_call_result_200979, list_200980], **kwargs_200985)
        
        
        # ################# End of 'test_loadTestsFromModule__no_TestCase_tests(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromModule__no_TestCase_tests' in the type store
        # Getting the type of 'stypy_return_type' (line 114)
        stypy_return_type_200987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_200987)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromModule__no_TestCase_tests'
        return stypy_return_type_200987


    @norecursion
    def test_loadTestsFromModule__not_a_module(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromModule__not_a_module'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromModule__not_a_module', 136, 4, False)
        # Assigning a type to the variable 'self' (line 137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 137, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromModule__not_a_module.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromModule__not_a_module.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromModule__not_a_module.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromModule__not_a_module.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromModule__not_a_module')
        Test_TestLoader.test_loadTestsFromModule__not_a_module.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromModule__not_a_module.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromModule__not_a_module.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromModule__not_a_module.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromModule__not_a_module.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromModule__not_a_module.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromModule__not_a_module.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromModule__not_a_module', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromModule__not_a_module', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromModule__not_a_module(...)' code ##################

        # Declaration of the 'MyTestCase' class
        # Getting the type of 'unittest' (line 137)
        unittest_200988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 25), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 137)
        TestCase_200989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 137, 25), unittest_200988, 'TestCase')

        class MyTestCase(TestCase_200989, ):

            @norecursion
            def test(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test'
                module_type_store = module_type_store.open_function_context('test', 138, 12, False)
                # Assigning a type to the variable 'self' (line 139)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 139, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                MyTestCase.test.__dict__.__setitem__('stypy_localization', localization)
                MyTestCase.test.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                MyTestCase.test.__dict__.__setitem__('stypy_type_store', module_type_store)
                MyTestCase.test.__dict__.__setitem__('stypy_function_name', 'MyTestCase.test')
                MyTestCase.test.__dict__.__setitem__('stypy_param_names_list', [])
                MyTestCase.test.__dict__.__setitem__('stypy_varargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_kwargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_call_defaults', defaults)
                MyTestCase.test.__dict__.__setitem__('stypy_call_varargs', varargs)
                MyTestCase.test.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                MyTestCase.test.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'MyTestCase.test', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test(...)' code ##################

                pass
                
                # ################# End of 'test(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test' in the type store
                # Getting the type of 'stypy_return_type' (line 138)
                stypy_return_type_200990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_200990)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test'
                return stypy_return_type_200990

        
        # Assigning a type to the variable 'MyTestCase' (line 137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 137, 8), 'MyTestCase', MyTestCase)
        # Declaration of the 'NotAModule' class

        class NotAModule(object, ):
            
            # Assigning a Name to a Name (line 142):
            # Getting the type of 'MyTestCase' (line 142)
            MyTestCase_200991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 21), 'MyTestCase')
            # Assigning a type to the variable 'test_2' (line 142)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 142, 12), 'test_2', MyTestCase_200991)
        
        # Assigning a type to the variable 'NotAModule' (line 141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 141, 8), 'NotAModule', NotAModule)
        
        # Assigning a Call to a Name (line 144):
        
        # Call to TestLoader(...): (line 144)
        # Processing the call keyword arguments (line 144)
        kwargs_200994 = {}
        # Getting the type of 'unittest' (line 144)
        unittest_200992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 144)
        TestLoader_200993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 144, 17), unittest_200992, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 144)
        TestLoader_call_result_200995 = invoke(stypy.reporting.localization.Localization(__file__, 144, 17), TestLoader_200993, *[], **kwargs_200994)
        
        # Assigning a type to the variable 'loader' (line 144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 144, 8), 'loader', TestLoader_call_result_200995)
        
        # Assigning a Call to a Name (line 145):
        
        # Call to loadTestsFromModule(...): (line 145)
        # Processing the call arguments (line 145)
        # Getting the type of 'NotAModule' (line 145)
        NotAModule_200998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 43), 'NotAModule', False)
        # Processing the call keyword arguments (line 145)
        kwargs_200999 = {}
        # Getting the type of 'loader' (line 145)
        loader_200996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromModule' of a type (line 145)
        loadTestsFromModule_200997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 145, 16), loader_200996, 'loadTestsFromModule')
        # Calling loadTestsFromModule(args, kwargs) (line 145)
        loadTestsFromModule_call_result_201000 = invoke(stypy.reporting.localization.Localization(__file__, 145, 16), loadTestsFromModule_200997, *[NotAModule_200998], **kwargs_200999)
        
        # Assigning a type to the variable 'suite' (line 145)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 145, 8), 'suite', loadTestsFromModule_call_result_201000)
        
        # Assigning a List to a Name (line 147):
        
        # Obtaining an instance of the builtin type 'list' (line 147)
        list_201001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 147)
        # Adding element type (line 147)
        
        # Call to TestSuite(...): (line 147)
        # Processing the call arguments (line 147)
        
        # Obtaining an instance of the builtin type 'list' (line 147)
        list_201004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 40), 'list')
        # Adding type elements to the builtin type 'list' instance (line 147)
        # Adding element type (line 147)
        
        # Call to MyTestCase(...): (line 147)
        # Processing the call arguments (line 147)
        str_201006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 52), 'str', 'test')
        # Processing the call keyword arguments (line 147)
        kwargs_201007 = {}
        # Getting the type of 'MyTestCase' (line 147)
        MyTestCase_201005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 41), 'MyTestCase', False)
        # Calling MyTestCase(args, kwargs) (line 147)
        MyTestCase_call_result_201008 = invoke(stypy.reporting.localization.Localization(__file__, 147, 41), MyTestCase_201005, *[str_201006], **kwargs_201007)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 147, 40), list_201004, MyTestCase_call_result_201008)
        
        # Processing the call keyword arguments (line 147)
        kwargs_201009 = {}
        # Getting the type of 'unittest' (line 147)
        unittest_201002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 21), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 147)
        TestSuite_201003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 147, 21), unittest_201002, 'TestSuite')
        # Calling TestSuite(args, kwargs) (line 147)
        TestSuite_call_result_201010 = invoke(stypy.reporting.localization.Localization(__file__, 147, 21), TestSuite_201003, *[list_201004], **kwargs_201009)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 147, 20), list_201001, TestSuite_call_result_201010)
        
        # Assigning a type to the variable 'reference' (line 147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 147, 8), 'reference', list_201001)
        
        # Call to assertEqual(...): (line 148)
        # Processing the call arguments (line 148)
        
        # Call to list(...): (line 148)
        # Processing the call arguments (line 148)
        # Getting the type of 'suite' (line 148)
        suite_201014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 30), 'suite', False)
        # Processing the call keyword arguments (line 148)
        kwargs_201015 = {}
        # Getting the type of 'list' (line 148)
        list_201013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 25), 'list', False)
        # Calling list(args, kwargs) (line 148)
        list_call_result_201016 = invoke(stypy.reporting.localization.Localization(__file__, 148, 25), list_201013, *[suite_201014], **kwargs_201015)
        
        # Getting the type of 'reference' (line 148)
        reference_201017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 38), 'reference', False)
        # Processing the call keyword arguments (line 148)
        kwargs_201018 = {}
        # Getting the type of 'self' (line 148)
        self_201011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 148)
        assertEqual_201012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 148, 8), self_201011, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 148)
        assertEqual_call_result_201019 = invoke(stypy.reporting.localization.Localization(__file__, 148, 8), assertEqual_201012, *[list_call_result_201016, reference_201017], **kwargs_201018)
        
        
        # ################# End of 'test_loadTestsFromModule__not_a_module(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromModule__not_a_module' in the type store
        # Getting the type of 'stypy_return_type' (line 136)
        stypy_return_type_201020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201020)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromModule__not_a_module'
        return stypy_return_type_201020


    @norecursion
    def test_loadTestsFromModule__load_tests(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromModule__load_tests'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromModule__load_tests', 153, 4, False)
        # Assigning a type to the variable 'self' (line 154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 154, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromModule__load_tests.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromModule__load_tests.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromModule__load_tests.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromModule__load_tests.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromModule__load_tests')
        Test_TestLoader.test_loadTestsFromModule__load_tests.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromModule__load_tests.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromModule__load_tests.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromModule__load_tests.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromModule__load_tests.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromModule__load_tests.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromModule__load_tests.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromModule__load_tests', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromModule__load_tests', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromModule__load_tests(...)' code ##################

        
        # Assigning a Call to a Name (line 154):
        
        # Call to ModuleType(...): (line 154)
        # Processing the call arguments (line 154)
        str_201023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 154, 29), 'str', 'm')
        # Processing the call keyword arguments (line 154)
        kwargs_201024 = {}
        # Getting the type of 'types' (line 154)
        types_201021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 154)
        ModuleType_201022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 12), types_201021, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 154)
        ModuleType_call_result_201025 = invoke(stypy.reporting.localization.Localization(__file__, 154, 12), ModuleType_201022, *[str_201023], **kwargs_201024)
        
        # Assigning a type to the variable 'm' (line 154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 154, 8), 'm', ModuleType_call_result_201025)
        # Declaration of the 'MyTestCase' class
        # Getting the type of 'unittest' (line 155)
        unittest_201026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 25), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 155)
        TestCase_201027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 25), unittest_201026, 'TestCase')

        class MyTestCase(TestCase_201027, ):

            @norecursion
            def test(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test'
                module_type_store = module_type_store.open_function_context('test', 156, 12, False)
                # Assigning a type to the variable 'self' (line 157)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 157, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                MyTestCase.test.__dict__.__setitem__('stypy_localization', localization)
                MyTestCase.test.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                MyTestCase.test.__dict__.__setitem__('stypy_type_store', module_type_store)
                MyTestCase.test.__dict__.__setitem__('stypy_function_name', 'MyTestCase.test')
                MyTestCase.test.__dict__.__setitem__('stypy_param_names_list', [])
                MyTestCase.test.__dict__.__setitem__('stypy_varargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_kwargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_call_defaults', defaults)
                MyTestCase.test.__dict__.__setitem__('stypy_call_varargs', varargs)
                MyTestCase.test.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                MyTestCase.test.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'MyTestCase.test', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test(...)' code ##################

                pass
                
                # ################# End of 'test(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test' in the type store
                # Getting the type of 'stypy_return_type' (line 156)
                stypy_return_type_201028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_201028)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test'
                return stypy_return_type_201028

        
        # Assigning a type to the variable 'MyTestCase' (line 155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 155, 8), 'MyTestCase', MyTestCase)
        
        # Assigning a Name to a Attribute (line 158):
        # Getting the type of 'MyTestCase' (line 158)
        MyTestCase_201029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 23), 'MyTestCase')
        # Getting the type of 'm' (line 158)
        m_201030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 8), 'm')
        # Setting the type of the member 'testcase_1' of a type (line 158)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 8), m_201030, 'testcase_1', MyTestCase_201029)
        
        # Assigning a List to a Name (line 160):
        
        # Obtaining an instance of the builtin type 'list' (line 160)
        list_201031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 160)
        
        # Assigning a type to the variable 'load_tests_args' (line 160)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 160, 8), 'load_tests_args', list_201031)

        @norecursion
        def load_tests(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'load_tests'
            module_type_store = module_type_store.open_function_context('load_tests', 161, 8, False)
            
            # Passed parameters checking function
            load_tests.stypy_localization = localization
            load_tests.stypy_type_of_self = None
            load_tests.stypy_type_store = module_type_store
            load_tests.stypy_function_name = 'load_tests'
            load_tests.stypy_param_names_list = ['loader', 'tests', 'pattern']
            load_tests.stypy_varargs_param_name = None
            load_tests.stypy_kwargs_param_name = None
            load_tests.stypy_call_defaults = defaults
            load_tests.stypy_call_varargs = varargs
            load_tests.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'load_tests', ['loader', 'tests', 'pattern'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'load_tests', localization, ['loader', 'tests', 'pattern'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'load_tests(...)' code ##################

            
            # Call to assertIsInstance(...): (line 162)
            # Processing the call arguments (line 162)
            # Getting the type of 'tests' (line 162)
            tests_201034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 34), 'tests', False)
            # Getting the type of 'unittest' (line 162)
            unittest_201035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 41), 'unittest', False)
            # Obtaining the member 'TestSuite' of a type (line 162)
            TestSuite_201036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 162, 41), unittest_201035, 'TestSuite')
            # Processing the call keyword arguments (line 162)
            kwargs_201037 = {}
            # Getting the type of 'self' (line 162)
            self_201032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 12), 'self', False)
            # Obtaining the member 'assertIsInstance' of a type (line 162)
            assertIsInstance_201033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 162, 12), self_201032, 'assertIsInstance')
            # Calling assertIsInstance(args, kwargs) (line 162)
            assertIsInstance_call_result_201038 = invoke(stypy.reporting.localization.Localization(__file__, 162, 12), assertIsInstance_201033, *[tests_201034, TestSuite_201036], **kwargs_201037)
            
            
            # Call to extend(...): (line 163)
            # Processing the call arguments (line 163)
            
            # Obtaining an instance of the builtin type 'tuple' (line 163)
            tuple_201041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 163, 36), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 163)
            # Adding element type (line 163)
            # Getting the type of 'loader' (line 163)
            loader_201042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 36), 'loader', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 163, 36), tuple_201041, loader_201042)
            # Adding element type (line 163)
            # Getting the type of 'tests' (line 163)
            tests_201043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 44), 'tests', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 163, 36), tuple_201041, tests_201043)
            # Adding element type (line 163)
            # Getting the type of 'pattern' (line 163)
            pattern_201044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 51), 'pattern', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 163, 36), tuple_201041, pattern_201044)
            
            # Processing the call keyword arguments (line 163)
            kwargs_201045 = {}
            # Getting the type of 'load_tests_args' (line 163)
            load_tests_args_201039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 12), 'load_tests_args', False)
            # Obtaining the member 'extend' of a type (line 163)
            extend_201040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 163, 12), load_tests_args_201039, 'extend')
            # Calling extend(args, kwargs) (line 163)
            extend_call_result_201046 = invoke(stypy.reporting.localization.Localization(__file__, 163, 12), extend_201040, *[tuple_201041], **kwargs_201045)
            
            # Getting the type of 'tests' (line 164)
            tests_201047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 19), 'tests')
            # Assigning a type to the variable 'stypy_return_type' (line 164)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 164, 12), 'stypy_return_type', tests_201047)
            
            # ################# End of 'load_tests(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'load_tests' in the type store
            # Getting the type of 'stypy_return_type' (line 161)
            stypy_return_type_201048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_201048)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'load_tests'
            return stypy_return_type_201048

        # Assigning a type to the variable 'load_tests' (line 161)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 161, 8), 'load_tests', load_tests)
        
        # Assigning a Name to a Attribute (line 165):
        # Getting the type of 'load_tests' (line 165)
        load_tests_201049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 23), 'load_tests')
        # Getting the type of 'm' (line 165)
        m_201050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 8), 'm')
        # Setting the type of the member 'load_tests' of a type (line 165)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 8), m_201050, 'load_tests', load_tests_201049)
        
        # Assigning a Call to a Name (line 167):
        
        # Call to TestLoader(...): (line 167)
        # Processing the call keyword arguments (line 167)
        kwargs_201053 = {}
        # Getting the type of 'unittest' (line 167)
        unittest_201051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 167)
        TestLoader_201052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 167, 17), unittest_201051, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 167)
        TestLoader_call_result_201054 = invoke(stypy.reporting.localization.Localization(__file__, 167, 17), TestLoader_201052, *[], **kwargs_201053)
        
        # Assigning a type to the variable 'loader' (line 167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 167, 8), 'loader', TestLoader_call_result_201054)
        
        # Assigning a Call to a Name (line 168):
        
        # Call to loadTestsFromModule(...): (line 168)
        # Processing the call arguments (line 168)
        # Getting the type of 'm' (line 168)
        m_201057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 43), 'm', False)
        # Processing the call keyword arguments (line 168)
        kwargs_201058 = {}
        # Getting the type of 'loader' (line 168)
        loader_201055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromModule' of a type (line 168)
        loadTestsFromModule_201056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 168, 16), loader_201055, 'loadTestsFromModule')
        # Calling loadTestsFromModule(args, kwargs) (line 168)
        loadTestsFromModule_call_result_201059 = invoke(stypy.reporting.localization.Localization(__file__, 168, 16), loadTestsFromModule_201056, *[m_201057], **kwargs_201058)
        
        # Assigning a type to the variable 'suite' (line 168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 8), 'suite', loadTestsFromModule_call_result_201059)
        
        # Call to assertIsInstance(...): (line 169)
        # Processing the call arguments (line 169)
        # Getting the type of 'suite' (line 169)
        suite_201062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 30), 'suite', False)
        # Getting the type of 'unittest' (line 169)
        unittest_201063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 37), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 169)
        TestSuite_201064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 37), unittest_201063, 'TestSuite')
        # Processing the call keyword arguments (line 169)
        kwargs_201065 = {}
        # Getting the type of 'self' (line 169)
        self_201060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 8), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 169)
        assertIsInstance_201061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 8), self_201060, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 169)
        assertIsInstance_call_result_201066 = invoke(stypy.reporting.localization.Localization(__file__, 169, 8), assertIsInstance_201061, *[suite_201062, TestSuite_201064], **kwargs_201065)
        
        
        # Call to assertEqual(...): (line 170)
        # Processing the call arguments (line 170)
        # Getting the type of 'load_tests_args' (line 170)
        load_tests_args_201069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 25), 'load_tests_args', False)
        
        # Obtaining an instance of the builtin type 'list' (line 170)
        list_201070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 170, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 170)
        # Adding element type (line 170)
        # Getting the type of 'loader' (line 170)
        loader_201071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 43), 'loader', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 170, 42), list_201070, loader_201071)
        # Adding element type (line 170)
        # Getting the type of 'suite' (line 170)
        suite_201072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 51), 'suite', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 170, 42), list_201070, suite_201072)
        # Adding element type (line 170)
        # Getting the type of 'None' (line 170)
        None_201073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 58), 'None', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 170, 42), list_201070, None_201073)
        
        # Processing the call keyword arguments (line 170)
        kwargs_201074 = {}
        # Getting the type of 'self' (line 170)
        self_201067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 170)
        assertEqual_201068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 170, 8), self_201067, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 170)
        assertEqual_call_result_201075 = invoke(stypy.reporting.localization.Localization(__file__, 170, 8), assertEqual_201068, *[load_tests_args_201069, list_201070], **kwargs_201074)
        
        
        # Assigning a List to a Name (line 172):
        
        # Obtaining an instance of the builtin type 'list' (line 172)
        list_201076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 172, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 172)
        
        # Assigning a type to the variable 'load_tests_args' (line 172)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 172, 8), 'load_tests_args', list_201076)
        
        # Assigning a Call to a Name (line 173):
        
        # Call to loadTestsFromModule(...): (line 173)
        # Processing the call arguments (line 173)
        # Getting the type of 'm' (line 173)
        m_201079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 43), 'm', False)
        # Processing the call keyword arguments (line 173)
        # Getting the type of 'False' (line 173)
        False_201080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 61), 'False', False)
        keyword_201081 = False_201080
        kwargs_201082 = {'use_load_tests': keyword_201081}
        # Getting the type of 'loader' (line 173)
        loader_201077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromModule' of a type (line 173)
        loadTestsFromModule_201078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 16), loader_201077, 'loadTestsFromModule')
        # Calling loadTestsFromModule(args, kwargs) (line 173)
        loadTestsFromModule_call_result_201083 = invoke(stypy.reporting.localization.Localization(__file__, 173, 16), loadTestsFromModule_201078, *[m_201079], **kwargs_201082)
        
        # Assigning a type to the variable 'suite' (line 173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 8), 'suite', loadTestsFromModule_call_result_201083)
        
        # Call to assertEqual(...): (line 174)
        # Processing the call arguments (line 174)
        # Getting the type of 'load_tests_args' (line 174)
        load_tests_args_201086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 25), 'load_tests_args', False)
        
        # Obtaining an instance of the builtin type 'list' (line 174)
        list_201087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 174, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 174)
        
        # Processing the call keyword arguments (line 174)
        kwargs_201088 = {}
        # Getting the type of 'self' (line 174)
        self_201084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 174)
        assertEqual_201085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 174, 8), self_201084, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 174)
        assertEqual_call_result_201089 = invoke(stypy.reporting.localization.Localization(__file__, 174, 8), assertEqual_201085, *[load_tests_args_201086, list_201087], **kwargs_201088)
        
        
        # ################# End of 'test_loadTestsFromModule__load_tests(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromModule__load_tests' in the type store
        # Getting the type of 'stypy_return_type' (line 153)
        stypy_return_type_201090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201090)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromModule__load_tests'
        return stypy_return_type_201090


    @norecursion
    def test_loadTestsFromModule__faulty_load_tests(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromModule__faulty_load_tests'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromModule__faulty_load_tests', 176, 4, False)
        # Assigning a type to the variable 'self' (line 177)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 177, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromModule__faulty_load_tests.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromModule__faulty_load_tests.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromModule__faulty_load_tests.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromModule__faulty_load_tests.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromModule__faulty_load_tests')
        Test_TestLoader.test_loadTestsFromModule__faulty_load_tests.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromModule__faulty_load_tests.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromModule__faulty_load_tests.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromModule__faulty_load_tests.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromModule__faulty_load_tests.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromModule__faulty_load_tests.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromModule__faulty_load_tests.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromModule__faulty_load_tests', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromModule__faulty_load_tests', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromModule__faulty_load_tests(...)' code ##################

        
        # Assigning a Call to a Name (line 177):
        
        # Call to ModuleType(...): (line 177)
        # Processing the call arguments (line 177)
        str_201093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 177, 29), 'str', 'm')
        # Processing the call keyword arguments (line 177)
        kwargs_201094 = {}
        # Getting the type of 'types' (line 177)
        types_201091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 177)
        ModuleType_201092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 177, 12), types_201091, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 177)
        ModuleType_call_result_201095 = invoke(stypy.reporting.localization.Localization(__file__, 177, 12), ModuleType_201092, *[str_201093], **kwargs_201094)
        
        # Assigning a type to the variable 'm' (line 177)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 177, 8), 'm', ModuleType_call_result_201095)

        @norecursion
        def load_tests(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'load_tests'
            module_type_store = module_type_store.open_function_context('load_tests', 179, 8, False)
            
            # Passed parameters checking function
            load_tests.stypy_localization = localization
            load_tests.stypy_type_of_self = None
            load_tests.stypy_type_store = module_type_store
            load_tests.stypy_function_name = 'load_tests'
            load_tests.stypy_param_names_list = ['loader', 'tests', 'pattern']
            load_tests.stypy_varargs_param_name = None
            load_tests.stypy_kwargs_param_name = None
            load_tests.stypy_call_defaults = defaults
            load_tests.stypy_call_varargs = varargs
            load_tests.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'load_tests', ['loader', 'tests', 'pattern'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'load_tests', localization, ['loader', 'tests', 'pattern'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'load_tests(...)' code ##################

            
            # Call to TypeError(...): (line 180)
            # Processing the call arguments (line 180)
            str_201097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 180, 28), 'str', 'some failure')
            # Processing the call keyword arguments (line 180)
            kwargs_201098 = {}
            # Getting the type of 'TypeError' (line 180)
            TypeError_201096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 18), 'TypeError', False)
            # Calling TypeError(args, kwargs) (line 180)
            TypeError_call_result_201099 = invoke(stypy.reporting.localization.Localization(__file__, 180, 18), TypeError_201096, *[str_201097], **kwargs_201098)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 180, 12), TypeError_call_result_201099, 'raise parameter', BaseException)
            
            # ################# End of 'load_tests(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'load_tests' in the type store
            # Getting the type of 'stypy_return_type' (line 179)
            stypy_return_type_201100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_201100)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'load_tests'
            return stypy_return_type_201100

        # Assigning a type to the variable 'load_tests' (line 179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 179, 8), 'load_tests', load_tests)
        
        # Assigning a Name to a Attribute (line 181):
        # Getting the type of 'load_tests' (line 181)
        load_tests_201101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 23), 'load_tests')
        # Getting the type of 'm' (line 181)
        m_201102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 8), 'm')
        # Setting the type of the member 'load_tests' of a type (line 181)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 181, 8), m_201102, 'load_tests', load_tests_201101)
        
        # Assigning a Call to a Name (line 183):
        
        # Call to TestLoader(...): (line 183)
        # Processing the call keyword arguments (line 183)
        kwargs_201105 = {}
        # Getting the type of 'unittest' (line 183)
        unittest_201103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 183)
        TestLoader_201104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 183, 17), unittest_201103, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 183)
        TestLoader_call_result_201106 = invoke(stypy.reporting.localization.Localization(__file__, 183, 17), TestLoader_201104, *[], **kwargs_201105)
        
        # Assigning a type to the variable 'loader' (line 183)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 183, 8), 'loader', TestLoader_call_result_201106)
        
        # Assigning a Call to a Name (line 184):
        
        # Call to loadTestsFromModule(...): (line 184)
        # Processing the call arguments (line 184)
        # Getting the type of 'm' (line 184)
        m_201109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 43), 'm', False)
        # Processing the call keyword arguments (line 184)
        kwargs_201110 = {}
        # Getting the type of 'loader' (line 184)
        loader_201107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromModule' of a type (line 184)
        loadTestsFromModule_201108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 184, 16), loader_201107, 'loadTestsFromModule')
        # Calling loadTestsFromModule(args, kwargs) (line 184)
        loadTestsFromModule_call_result_201111 = invoke(stypy.reporting.localization.Localization(__file__, 184, 16), loadTestsFromModule_201108, *[m_201109], **kwargs_201110)
        
        # Assigning a type to the variable 'suite' (line 184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 184, 8), 'suite', loadTestsFromModule_call_result_201111)
        
        # Call to assertIsInstance(...): (line 185)
        # Processing the call arguments (line 185)
        # Getting the type of 'suite' (line 185)
        suite_201114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 30), 'suite', False)
        # Getting the type of 'unittest' (line 185)
        unittest_201115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 37), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 185)
        TestSuite_201116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 185, 37), unittest_201115, 'TestSuite')
        # Processing the call keyword arguments (line 185)
        kwargs_201117 = {}
        # Getting the type of 'self' (line 185)
        self_201112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 8), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 185)
        assertIsInstance_201113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 185, 8), self_201112, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 185)
        assertIsInstance_call_result_201118 = invoke(stypy.reporting.localization.Localization(__file__, 185, 8), assertIsInstance_201113, *[suite_201114, TestSuite_201116], **kwargs_201117)
        
        
        # Call to assertEqual(...): (line 186)
        # Processing the call arguments (line 186)
        
        # Call to countTestCases(...): (line 186)
        # Processing the call keyword arguments (line 186)
        kwargs_201123 = {}
        # Getting the type of 'suite' (line 186)
        suite_201121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 25), 'suite', False)
        # Obtaining the member 'countTestCases' of a type (line 186)
        countTestCases_201122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 186, 25), suite_201121, 'countTestCases')
        # Calling countTestCases(args, kwargs) (line 186)
        countTestCases_call_result_201124 = invoke(stypy.reporting.localization.Localization(__file__, 186, 25), countTestCases_201122, *[], **kwargs_201123)
        
        int_201125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 186, 49), 'int')
        # Processing the call keyword arguments (line 186)
        kwargs_201126 = {}
        # Getting the type of 'self' (line 186)
        self_201119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 186)
        assertEqual_201120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 186, 8), self_201119, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 186)
        assertEqual_call_result_201127 = invoke(stypy.reporting.localization.Localization(__file__, 186, 8), assertEqual_201120, *[countTestCases_call_result_201124, int_201125], **kwargs_201126)
        
        
        # Assigning a Subscript to a Name (line 187):
        
        # Obtaining the type of the subscript
        int_201128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 187, 27), 'int')
        
        # Call to list(...): (line 187)
        # Processing the call arguments (line 187)
        # Getting the type of 'suite' (line 187)
        suite_201130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 20), 'suite', False)
        # Processing the call keyword arguments (line 187)
        kwargs_201131 = {}
        # Getting the type of 'list' (line 187)
        list_201129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 15), 'list', False)
        # Calling list(args, kwargs) (line 187)
        list_call_result_201132 = invoke(stypy.reporting.localization.Localization(__file__, 187, 15), list_201129, *[suite_201130], **kwargs_201131)
        
        # Obtaining the member '__getitem__' of a type (line 187)
        getitem___201133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 187, 15), list_call_result_201132, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 187)
        subscript_call_result_201134 = invoke(stypy.reporting.localization.Localization(__file__, 187, 15), getitem___201133, int_201128)
        
        # Assigning a type to the variable 'test' (line 187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 187, 8), 'test', subscript_call_result_201134)
        
        # Call to assertRaisesRegexp(...): (line 189)
        # Processing the call arguments (line 189)
        # Getting the type of 'TypeError' (line 189)
        TypeError_201137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 32), 'TypeError', False)
        str_201138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 43), 'str', 'some failure')
        # Getting the type of 'test' (line 189)
        test_201139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 59), 'test', False)
        # Obtaining the member 'm' of a type (line 189)
        m_201140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 189, 59), test_201139, 'm')
        # Processing the call keyword arguments (line 189)
        kwargs_201141 = {}
        # Getting the type of 'self' (line 189)
        self_201135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 8), 'self', False)
        # Obtaining the member 'assertRaisesRegexp' of a type (line 189)
        assertRaisesRegexp_201136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 189, 8), self_201135, 'assertRaisesRegexp')
        # Calling assertRaisesRegexp(args, kwargs) (line 189)
        assertRaisesRegexp_call_result_201142 = invoke(stypy.reporting.localization.Localization(__file__, 189, 8), assertRaisesRegexp_201136, *[TypeError_201137, str_201138, m_201140], **kwargs_201141)
        
        
        # ################# End of 'test_loadTestsFromModule__faulty_load_tests(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromModule__faulty_load_tests' in the type store
        # Getting the type of 'stypy_return_type' (line 176)
        stypy_return_type_201143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201143)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromModule__faulty_load_tests'
        return stypy_return_type_201143


    @norecursion
    def test_loadTestsFromName__empty_name(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromName__empty_name'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromName__empty_name', 203, 4, False)
        # Assigning a type to the variable 'self' (line 204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 204, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromName__empty_name.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromName__empty_name.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromName__empty_name.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromName__empty_name.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromName__empty_name')
        Test_TestLoader.test_loadTestsFromName__empty_name.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromName__empty_name.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__empty_name.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__empty_name.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromName__empty_name.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromName__empty_name.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromName__empty_name.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromName__empty_name', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromName__empty_name', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromName__empty_name(...)' code ##################

        
        # Assigning a Call to a Name (line 204):
        
        # Call to TestLoader(...): (line 204)
        # Processing the call keyword arguments (line 204)
        kwargs_201146 = {}
        # Getting the type of 'unittest' (line 204)
        unittest_201144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 204)
        TestLoader_201145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 204, 17), unittest_201144, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 204)
        TestLoader_call_result_201147 = invoke(stypy.reporting.localization.Localization(__file__, 204, 17), TestLoader_201145, *[], **kwargs_201146)
        
        # Assigning a type to the variable 'loader' (line 204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 204, 8), 'loader', TestLoader_call_result_201147)
        
        
        # SSA begins for try-except statement (line 206)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to loadTestsFromName(...): (line 207)
        # Processing the call arguments (line 207)
        str_201150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 207, 37), 'str', '')
        # Processing the call keyword arguments (line 207)
        kwargs_201151 = {}
        # Getting the type of 'loader' (line 207)
        loader_201148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 12), 'loader', False)
        # Obtaining the member 'loadTestsFromName' of a type (line 207)
        loadTestsFromName_201149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 12), loader_201148, 'loadTestsFromName')
        # Calling loadTestsFromName(args, kwargs) (line 207)
        loadTestsFromName_call_result_201152 = invoke(stypy.reporting.localization.Localization(__file__, 207, 12), loadTestsFromName_201149, *[str_201150], **kwargs_201151)
        
        # SSA branch for the except part of a try statement (line 206)
        # SSA branch for the except 'ValueError' branch of a try statement (line 206)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'ValueError' (line 208)
        ValueError_201153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 15), 'ValueError')
        # Assigning a type to the variable 'e' (line 208)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 208, 8), 'e', ValueError_201153)
        
        # Call to assertEqual(...): (line 209)
        # Processing the call arguments (line 209)
        
        # Call to str(...): (line 209)
        # Processing the call arguments (line 209)
        # Getting the type of 'e' (line 209)
        e_201157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 33), 'e', False)
        # Processing the call keyword arguments (line 209)
        kwargs_201158 = {}
        # Getting the type of 'str' (line 209)
        str_201156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 29), 'str', False)
        # Calling str(args, kwargs) (line 209)
        str_call_result_201159 = invoke(stypy.reporting.localization.Localization(__file__, 209, 29), str_201156, *[e_201157], **kwargs_201158)
        
        str_201160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 209, 37), 'str', 'Empty module name')
        # Processing the call keyword arguments (line 209)
        kwargs_201161 = {}
        # Getting the type of 'self' (line 209)
        self_201154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 12), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 209)
        assertEqual_201155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 209, 12), self_201154, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 209)
        assertEqual_call_result_201162 = invoke(stypy.reporting.localization.Localization(__file__, 209, 12), assertEqual_201155, *[str_call_result_201159, str_201160], **kwargs_201161)
        
        # SSA branch for the else branch of a try statement (line 206)
        module_type_store.open_ssa_branch('except else')
        
        # Call to fail(...): (line 211)
        # Processing the call arguments (line 211)
        str_201165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, 22), 'str', 'TestLoader.loadTestsFromName failed to raise ValueError')
        # Processing the call keyword arguments (line 211)
        kwargs_201166 = {}
        # Getting the type of 'self' (line 211)
        self_201163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 12), 'self', False)
        # Obtaining the member 'fail' of a type (line 211)
        fail_201164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 12), self_201163, 'fail')
        # Calling fail(args, kwargs) (line 211)
        fail_call_result_201167 = invoke(stypy.reporting.localization.Localization(__file__, 211, 12), fail_201164, *[str_201165], **kwargs_201166)
        
        # SSA join for try-except statement (line 206)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_loadTestsFromName__empty_name(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromName__empty_name' in the type store
        # Getting the type of 'stypy_return_type' (line 203)
        stypy_return_type_201168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201168)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromName__empty_name'
        return stypy_return_type_201168


    @norecursion
    def test_loadTestsFromName__malformed_name(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromName__malformed_name'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromName__malformed_name', 219, 4, False)
        # Assigning a type to the variable 'self' (line 220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 220, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromName__malformed_name.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromName__malformed_name.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromName__malformed_name.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromName__malformed_name.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromName__malformed_name')
        Test_TestLoader.test_loadTestsFromName__malformed_name.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromName__malformed_name.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__malformed_name.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__malformed_name.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromName__malformed_name.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromName__malformed_name.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromName__malformed_name.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromName__malformed_name', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromName__malformed_name', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromName__malformed_name(...)' code ##################

        
        # Assigning a Call to a Name (line 220):
        
        # Call to TestLoader(...): (line 220)
        # Processing the call keyword arguments (line 220)
        kwargs_201171 = {}
        # Getting the type of 'unittest' (line 220)
        unittest_201169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 220)
        TestLoader_201170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 220, 17), unittest_201169, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 220)
        TestLoader_call_result_201172 = invoke(stypy.reporting.localization.Localization(__file__, 220, 17), TestLoader_201170, *[], **kwargs_201171)
        
        # Assigning a type to the variable 'loader' (line 220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 220, 8), 'loader', TestLoader_call_result_201172)
        
        
        # SSA begins for try-except statement (line 223)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to loadTestsFromName(...): (line 224)
        # Processing the call arguments (line 224)
        str_201175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 224, 37), 'str', 'abc () //')
        # Processing the call keyword arguments (line 224)
        kwargs_201176 = {}
        # Getting the type of 'loader' (line 224)
        loader_201173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 12), 'loader', False)
        # Obtaining the member 'loadTestsFromName' of a type (line 224)
        loadTestsFromName_201174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 224, 12), loader_201173, 'loadTestsFromName')
        # Calling loadTestsFromName(args, kwargs) (line 224)
        loadTestsFromName_call_result_201177 = invoke(stypy.reporting.localization.Localization(__file__, 224, 12), loadTestsFromName_201174, *[str_201175], **kwargs_201176)
        
        # SSA branch for the except part of a try statement (line 223)
        # SSA branch for the except 'ValueError' branch of a try statement (line 223)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA branch for the except 'ImportError' branch of a try statement (line 223)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA branch for the else branch of a try statement (line 223)
        module_type_store.open_ssa_branch('except else')
        
        # Call to fail(...): (line 230)
        # Processing the call arguments (line 230)
        str_201180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 230, 22), 'str', 'TestLoader.loadTestsFromName failed to raise ValueError')
        # Processing the call keyword arguments (line 230)
        kwargs_201181 = {}
        # Getting the type of 'self' (line 230)
        self_201178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 12), 'self', False)
        # Obtaining the member 'fail' of a type (line 230)
        fail_201179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 230, 12), self_201178, 'fail')
        # Calling fail(args, kwargs) (line 230)
        fail_call_result_201182 = invoke(stypy.reporting.localization.Localization(__file__, 230, 12), fail_201179, *[str_201180], **kwargs_201181)
        
        # SSA join for try-except statement (line 223)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_loadTestsFromName__malformed_name(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromName__malformed_name' in the type store
        # Getting the type of 'stypy_return_type' (line 219)
        stypy_return_type_201183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201183)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromName__malformed_name'
        return stypy_return_type_201183


    @norecursion
    def test_loadTestsFromName__unknown_module_name(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromName__unknown_module_name'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromName__unknown_module_name', 236, 4, False)
        # Assigning a type to the variable 'self' (line 237)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 237, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromName__unknown_module_name.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromName__unknown_module_name.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromName__unknown_module_name.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromName__unknown_module_name.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromName__unknown_module_name')
        Test_TestLoader.test_loadTestsFromName__unknown_module_name.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromName__unknown_module_name.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__unknown_module_name.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__unknown_module_name.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromName__unknown_module_name.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromName__unknown_module_name.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromName__unknown_module_name.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromName__unknown_module_name', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromName__unknown_module_name', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromName__unknown_module_name(...)' code ##################

        
        # Assigning a Call to a Name (line 237):
        
        # Call to TestLoader(...): (line 237)
        # Processing the call keyword arguments (line 237)
        kwargs_201186 = {}
        # Getting the type of 'unittest' (line 237)
        unittest_201184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 237)
        TestLoader_201185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 237, 17), unittest_201184, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 237)
        TestLoader_call_result_201187 = invoke(stypy.reporting.localization.Localization(__file__, 237, 17), TestLoader_201185, *[], **kwargs_201186)
        
        # Assigning a type to the variable 'loader' (line 237)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 237, 8), 'loader', TestLoader_call_result_201187)
        
        
        # SSA begins for try-except statement (line 239)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to loadTestsFromName(...): (line 240)
        # Processing the call arguments (line 240)
        str_201190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 240, 37), 'str', 'sdasfasfasdf')
        # Processing the call keyword arguments (line 240)
        kwargs_201191 = {}
        # Getting the type of 'loader' (line 240)
        loader_201188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 12), 'loader', False)
        # Obtaining the member 'loadTestsFromName' of a type (line 240)
        loadTestsFromName_201189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 240, 12), loader_201188, 'loadTestsFromName')
        # Calling loadTestsFromName(args, kwargs) (line 240)
        loadTestsFromName_call_result_201192 = invoke(stypy.reporting.localization.Localization(__file__, 240, 12), loadTestsFromName_201189, *[str_201190], **kwargs_201191)
        
        # SSA branch for the except part of a try statement (line 239)
        # SSA branch for the except 'ImportError' branch of a try statement (line 239)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'ImportError' (line 241)
        ImportError_201193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 15), 'ImportError')
        # Assigning a type to the variable 'e' (line 241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 241, 8), 'e', ImportError_201193)
        
        # Call to assertEqual(...): (line 242)
        # Processing the call arguments (line 242)
        
        # Call to str(...): (line 242)
        # Processing the call arguments (line 242)
        # Getting the type of 'e' (line 242)
        e_201197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 33), 'e', False)
        # Processing the call keyword arguments (line 242)
        kwargs_201198 = {}
        # Getting the type of 'str' (line 242)
        str_201196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 29), 'str', False)
        # Calling str(args, kwargs) (line 242)
        str_call_result_201199 = invoke(stypy.reporting.localization.Localization(__file__, 242, 29), str_201196, *[e_201197], **kwargs_201198)
        
        str_201200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 242, 37), 'str', 'No module named sdasfasfasdf')
        # Processing the call keyword arguments (line 242)
        kwargs_201201 = {}
        # Getting the type of 'self' (line 242)
        self_201194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 12), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 242)
        assertEqual_201195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 242, 12), self_201194, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 242)
        assertEqual_call_result_201202 = invoke(stypy.reporting.localization.Localization(__file__, 242, 12), assertEqual_201195, *[str_call_result_201199, str_201200], **kwargs_201201)
        
        # SSA branch for the else branch of a try statement (line 239)
        module_type_store.open_ssa_branch('except else')
        
        # Call to fail(...): (line 244)
        # Processing the call arguments (line 244)
        str_201205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 22), 'str', 'TestLoader.loadTestsFromName failed to raise ImportError')
        # Processing the call keyword arguments (line 244)
        kwargs_201206 = {}
        # Getting the type of 'self' (line 244)
        self_201203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 12), 'self', False)
        # Obtaining the member 'fail' of a type (line 244)
        fail_201204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 244, 12), self_201203, 'fail')
        # Calling fail(args, kwargs) (line 244)
        fail_call_result_201207 = invoke(stypy.reporting.localization.Localization(__file__, 244, 12), fail_201204, *[str_201205], **kwargs_201206)
        
        # SSA join for try-except statement (line 239)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_loadTestsFromName__unknown_module_name(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromName__unknown_module_name' in the type store
        # Getting the type of 'stypy_return_type' (line 236)
        stypy_return_type_201208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201208)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromName__unknown_module_name'
        return stypy_return_type_201208


    @norecursion
    def test_loadTestsFromName__unknown_attr_name(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromName__unknown_attr_name'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromName__unknown_attr_name', 252, 4, False)
        # Assigning a type to the variable 'self' (line 253)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 253, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromName__unknown_attr_name.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromName__unknown_attr_name.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromName__unknown_attr_name.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromName__unknown_attr_name.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromName__unknown_attr_name')
        Test_TestLoader.test_loadTestsFromName__unknown_attr_name.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromName__unknown_attr_name.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__unknown_attr_name.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__unknown_attr_name.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromName__unknown_attr_name.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromName__unknown_attr_name.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromName__unknown_attr_name.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromName__unknown_attr_name', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromName__unknown_attr_name', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromName__unknown_attr_name(...)' code ##################

        
        # Assigning a Call to a Name (line 253):
        
        # Call to TestLoader(...): (line 253)
        # Processing the call keyword arguments (line 253)
        kwargs_201211 = {}
        # Getting the type of 'unittest' (line 253)
        unittest_201209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 253)
        TestLoader_201210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 253, 17), unittest_201209, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 253)
        TestLoader_call_result_201212 = invoke(stypy.reporting.localization.Localization(__file__, 253, 17), TestLoader_201210, *[], **kwargs_201211)
        
        # Assigning a type to the variable 'loader' (line 253)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 253, 8), 'loader', TestLoader_call_result_201212)
        
        
        # SSA begins for try-except statement (line 255)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to loadTestsFromName(...): (line 256)
        # Processing the call arguments (line 256)
        str_201215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 37), 'str', 'unittest.sdasfasfasdf')
        # Processing the call keyword arguments (line 256)
        kwargs_201216 = {}
        # Getting the type of 'loader' (line 256)
        loader_201213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 12), 'loader', False)
        # Obtaining the member 'loadTestsFromName' of a type (line 256)
        loadTestsFromName_201214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 12), loader_201213, 'loadTestsFromName')
        # Calling loadTestsFromName(args, kwargs) (line 256)
        loadTestsFromName_call_result_201217 = invoke(stypy.reporting.localization.Localization(__file__, 256, 12), loadTestsFromName_201214, *[str_201215], **kwargs_201216)
        
        # SSA branch for the except part of a try statement (line 255)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 255)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'AttributeError' (line 257)
        AttributeError_201218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 15), 'AttributeError')
        # Assigning a type to the variable 'e' (line 257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 257, 8), 'e', AttributeError_201218)
        
        # Call to assertEqual(...): (line 258)
        # Processing the call arguments (line 258)
        
        # Call to str(...): (line 258)
        # Processing the call arguments (line 258)
        # Getting the type of 'e' (line 258)
        e_201222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 33), 'e', False)
        # Processing the call keyword arguments (line 258)
        kwargs_201223 = {}
        # Getting the type of 'str' (line 258)
        str_201221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 29), 'str', False)
        # Calling str(args, kwargs) (line 258)
        str_call_result_201224 = invoke(stypy.reporting.localization.Localization(__file__, 258, 29), str_201221, *[e_201222], **kwargs_201223)
        
        str_201225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 258, 37), 'str', "'module' object has no attribute 'sdasfasfasdf'")
        # Processing the call keyword arguments (line 258)
        kwargs_201226 = {}
        # Getting the type of 'self' (line 258)
        self_201219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 12), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 258)
        assertEqual_201220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 12), self_201219, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 258)
        assertEqual_call_result_201227 = invoke(stypy.reporting.localization.Localization(__file__, 258, 12), assertEqual_201220, *[str_call_result_201224, str_201225], **kwargs_201226)
        
        # SSA branch for the else branch of a try statement (line 255)
        module_type_store.open_ssa_branch('except else')
        
        # Call to fail(...): (line 260)
        # Processing the call arguments (line 260)
        str_201230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 260, 22), 'str', 'TestLoader.loadTestsFromName failed to raise AttributeError')
        # Processing the call keyword arguments (line 260)
        kwargs_201231 = {}
        # Getting the type of 'self' (line 260)
        self_201228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 12), 'self', False)
        # Obtaining the member 'fail' of a type (line 260)
        fail_201229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 260, 12), self_201228, 'fail')
        # Calling fail(args, kwargs) (line 260)
        fail_call_result_201232 = invoke(stypy.reporting.localization.Localization(__file__, 260, 12), fail_201229, *[str_201230], **kwargs_201231)
        
        # SSA join for try-except statement (line 255)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_loadTestsFromName__unknown_attr_name(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromName__unknown_attr_name' in the type store
        # Getting the type of 'stypy_return_type' (line 252)
        stypy_return_type_201233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201233)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromName__unknown_attr_name'
        return stypy_return_type_201233


    @norecursion
    def test_loadTestsFromName__relative_unknown_name(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromName__relative_unknown_name'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromName__relative_unknown_name', 269, 4, False)
        # Assigning a type to the variable 'self' (line 270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 270, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromName__relative_unknown_name.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromName__relative_unknown_name.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromName__relative_unknown_name.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromName__relative_unknown_name.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromName__relative_unknown_name')
        Test_TestLoader.test_loadTestsFromName__relative_unknown_name.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromName__relative_unknown_name.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__relative_unknown_name.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__relative_unknown_name.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromName__relative_unknown_name.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromName__relative_unknown_name.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromName__relative_unknown_name.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromName__relative_unknown_name', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromName__relative_unknown_name', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromName__relative_unknown_name(...)' code ##################

        
        # Assigning a Call to a Name (line 270):
        
        # Call to TestLoader(...): (line 270)
        # Processing the call keyword arguments (line 270)
        kwargs_201236 = {}
        # Getting the type of 'unittest' (line 270)
        unittest_201234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 270)
        TestLoader_201235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 270, 17), unittest_201234, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 270)
        TestLoader_call_result_201237 = invoke(stypy.reporting.localization.Localization(__file__, 270, 17), TestLoader_201235, *[], **kwargs_201236)
        
        # Assigning a type to the variable 'loader' (line 270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 270, 8), 'loader', TestLoader_call_result_201237)
        
        
        # SSA begins for try-except statement (line 272)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to loadTestsFromName(...): (line 273)
        # Processing the call arguments (line 273)
        str_201240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 37), 'str', 'sdasfasfasdf')
        # Getting the type of 'unittest' (line 273)
        unittest_201241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 53), 'unittest', False)
        # Processing the call keyword arguments (line 273)
        kwargs_201242 = {}
        # Getting the type of 'loader' (line 273)
        loader_201238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 12), 'loader', False)
        # Obtaining the member 'loadTestsFromName' of a type (line 273)
        loadTestsFromName_201239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 273, 12), loader_201238, 'loadTestsFromName')
        # Calling loadTestsFromName(args, kwargs) (line 273)
        loadTestsFromName_call_result_201243 = invoke(stypy.reporting.localization.Localization(__file__, 273, 12), loadTestsFromName_201239, *[str_201240, unittest_201241], **kwargs_201242)
        
        # SSA branch for the except part of a try statement (line 272)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 272)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'AttributeError' (line 274)
        AttributeError_201244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 15), 'AttributeError')
        # Assigning a type to the variable 'e' (line 274)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 274, 8), 'e', AttributeError_201244)
        
        # Call to assertEqual(...): (line 275)
        # Processing the call arguments (line 275)
        
        # Call to str(...): (line 275)
        # Processing the call arguments (line 275)
        # Getting the type of 'e' (line 275)
        e_201248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 33), 'e', False)
        # Processing the call keyword arguments (line 275)
        kwargs_201249 = {}
        # Getting the type of 'str' (line 275)
        str_201247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 29), 'str', False)
        # Calling str(args, kwargs) (line 275)
        str_call_result_201250 = invoke(stypy.reporting.localization.Localization(__file__, 275, 29), str_201247, *[e_201248], **kwargs_201249)
        
        str_201251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 275, 37), 'str', "'module' object has no attribute 'sdasfasfasdf'")
        # Processing the call keyword arguments (line 275)
        kwargs_201252 = {}
        # Getting the type of 'self' (line 275)
        self_201245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 12), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 275)
        assertEqual_201246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 275, 12), self_201245, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 275)
        assertEqual_call_result_201253 = invoke(stypy.reporting.localization.Localization(__file__, 275, 12), assertEqual_201246, *[str_call_result_201250, str_201251], **kwargs_201252)
        
        # SSA branch for the else branch of a try statement (line 272)
        module_type_store.open_ssa_branch('except else')
        
        # Call to fail(...): (line 277)
        # Processing the call arguments (line 277)
        str_201256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 22), 'str', 'TestLoader.loadTestsFromName failed to raise AttributeError')
        # Processing the call keyword arguments (line 277)
        kwargs_201257 = {}
        # Getting the type of 'self' (line 277)
        self_201254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 12), 'self', False)
        # Obtaining the member 'fail' of a type (line 277)
        fail_201255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 12), self_201254, 'fail')
        # Calling fail(args, kwargs) (line 277)
        fail_call_result_201258 = invoke(stypy.reporting.localization.Localization(__file__, 277, 12), fail_201255, *[str_201256], **kwargs_201257)
        
        # SSA join for try-except statement (line 272)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_loadTestsFromName__relative_unknown_name(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromName__relative_unknown_name' in the type store
        # Getting the type of 'stypy_return_type' (line 269)
        stypy_return_type_201259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201259)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromName__relative_unknown_name'
        return stypy_return_type_201259


    @norecursion
    def test_loadTestsFromName__relative_empty_name(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromName__relative_empty_name'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromName__relative_empty_name', 290, 4, False)
        # Assigning a type to the variable 'self' (line 291)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 291, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromName__relative_empty_name.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromName__relative_empty_name.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromName__relative_empty_name.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromName__relative_empty_name.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromName__relative_empty_name')
        Test_TestLoader.test_loadTestsFromName__relative_empty_name.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromName__relative_empty_name.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__relative_empty_name.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__relative_empty_name.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromName__relative_empty_name.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromName__relative_empty_name.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromName__relative_empty_name.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromName__relative_empty_name', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromName__relative_empty_name', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromName__relative_empty_name(...)' code ##################

        
        # Assigning a Call to a Name (line 291):
        
        # Call to TestLoader(...): (line 291)
        # Processing the call keyword arguments (line 291)
        kwargs_201262 = {}
        # Getting the type of 'unittest' (line 291)
        unittest_201260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 291)
        TestLoader_201261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 291, 17), unittest_201260, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 291)
        TestLoader_call_result_201263 = invoke(stypy.reporting.localization.Localization(__file__, 291, 17), TestLoader_201261, *[], **kwargs_201262)
        
        # Assigning a type to the variable 'loader' (line 291)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 291, 8), 'loader', TestLoader_call_result_201263)
        
        
        # SSA begins for try-except statement (line 293)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to loadTestsFromName(...): (line 294)
        # Processing the call arguments (line 294)
        str_201266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 294, 37), 'str', '')
        # Getting the type of 'unittest' (line 294)
        unittest_201267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 41), 'unittest', False)
        # Processing the call keyword arguments (line 294)
        kwargs_201268 = {}
        # Getting the type of 'loader' (line 294)
        loader_201264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 12), 'loader', False)
        # Obtaining the member 'loadTestsFromName' of a type (line 294)
        loadTestsFromName_201265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 294, 12), loader_201264, 'loadTestsFromName')
        # Calling loadTestsFromName(args, kwargs) (line 294)
        loadTestsFromName_call_result_201269 = invoke(stypy.reporting.localization.Localization(__file__, 294, 12), loadTestsFromName_201265, *[str_201266, unittest_201267], **kwargs_201268)
        
        # SSA branch for the except part of a try statement (line 293)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 293)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA branch for the else branch of a try statement (line 293)
        module_type_store.open_ssa_branch('except else')
        
        # Call to fail(...): (line 298)
        # Processing the call arguments (line 298)
        str_201272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 298, 22), 'str', 'Failed to raise AttributeError')
        # Processing the call keyword arguments (line 298)
        kwargs_201273 = {}
        # Getting the type of 'self' (line 298)
        self_201270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 12), 'self', False)
        # Obtaining the member 'fail' of a type (line 298)
        fail_201271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 12), self_201270, 'fail')
        # Calling fail(args, kwargs) (line 298)
        fail_call_result_201274 = invoke(stypy.reporting.localization.Localization(__file__, 298, 12), fail_201271, *[str_201272], **kwargs_201273)
        
        # SSA join for try-except statement (line 293)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_loadTestsFromName__relative_empty_name(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromName__relative_empty_name' in the type store
        # Getting the type of 'stypy_return_type' (line 290)
        stypy_return_type_201275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201275)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromName__relative_empty_name'
        return stypy_return_type_201275


    @norecursion
    def test_loadTestsFromName__relative_malformed_name(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromName__relative_malformed_name'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromName__relative_malformed_name', 309, 4, False)
        # Assigning a type to the variable 'self' (line 310)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 310, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromName__relative_malformed_name.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromName__relative_malformed_name.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromName__relative_malformed_name.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromName__relative_malformed_name.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromName__relative_malformed_name')
        Test_TestLoader.test_loadTestsFromName__relative_malformed_name.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromName__relative_malformed_name.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__relative_malformed_name.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__relative_malformed_name.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromName__relative_malformed_name.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromName__relative_malformed_name.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromName__relative_malformed_name.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromName__relative_malformed_name', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromName__relative_malformed_name', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromName__relative_malformed_name(...)' code ##################

        
        # Assigning a Call to a Name (line 310):
        
        # Call to TestLoader(...): (line 310)
        # Processing the call keyword arguments (line 310)
        kwargs_201278 = {}
        # Getting the type of 'unittest' (line 310)
        unittest_201276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 310)
        TestLoader_201277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 310, 17), unittest_201276, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 310)
        TestLoader_call_result_201279 = invoke(stypy.reporting.localization.Localization(__file__, 310, 17), TestLoader_201277, *[], **kwargs_201278)
        
        # Assigning a type to the variable 'loader' (line 310)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 310, 8), 'loader', TestLoader_call_result_201279)
        
        
        # SSA begins for try-except statement (line 313)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to loadTestsFromName(...): (line 314)
        # Processing the call arguments (line 314)
        str_201282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 314, 37), 'str', 'abc () //')
        # Getting the type of 'unittest' (line 314)
        unittest_201283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 50), 'unittest', False)
        # Processing the call keyword arguments (line 314)
        kwargs_201284 = {}
        # Getting the type of 'loader' (line 314)
        loader_201280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 12), 'loader', False)
        # Obtaining the member 'loadTestsFromName' of a type (line 314)
        loadTestsFromName_201281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 12), loader_201280, 'loadTestsFromName')
        # Calling loadTestsFromName(args, kwargs) (line 314)
        loadTestsFromName_call_result_201285 = invoke(stypy.reporting.localization.Localization(__file__, 314, 12), loadTestsFromName_201281, *[str_201282, unittest_201283], **kwargs_201284)
        
        # SSA branch for the except part of a try statement (line 313)
        # SSA branch for the except 'ValueError' branch of a try statement (line 313)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA branch for the except 'AttributeError' branch of a try statement (line 313)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA branch for the else branch of a try statement (line 313)
        module_type_store.open_ssa_branch('except else')
        
        # Call to fail(...): (line 320)
        # Processing the call arguments (line 320)
        str_201288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 320, 22), 'str', 'TestLoader.loadTestsFromName failed to raise ValueError')
        # Processing the call keyword arguments (line 320)
        kwargs_201289 = {}
        # Getting the type of 'self' (line 320)
        self_201286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 12), 'self', False)
        # Obtaining the member 'fail' of a type (line 320)
        fail_201287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 320, 12), self_201286, 'fail')
        # Calling fail(args, kwargs) (line 320)
        fail_call_result_201290 = invoke(stypy.reporting.localization.Localization(__file__, 320, 12), fail_201287, *[str_201288], **kwargs_201289)
        
        # SSA join for try-except statement (line 313)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_loadTestsFromName__relative_malformed_name(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromName__relative_malformed_name' in the type store
        # Getting the type of 'stypy_return_type' (line 309)
        stypy_return_type_201291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201291)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromName__relative_malformed_name'
        return stypy_return_type_201291


    @norecursion
    def test_loadTestsFromName__relative_not_a_module(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromName__relative_not_a_module'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromName__relative_not_a_module', 331, 4, False)
        # Assigning a type to the variable 'self' (line 332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 332, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromName__relative_not_a_module.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromName__relative_not_a_module.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromName__relative_not_a_module.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromName__relative_not_a_module.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromName__relative_not_a_module')
        Test_TestLoader.test_loadTestsFromName__relative_not_a_module.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromName__relative_not_a_module.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__relative_not_a_module.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__relative_not_a_module.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromName__relative_not_a_module.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromName__relative_not_a_module.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromName__relative_not_a_module.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromName__relative_not_a_module', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromName__relative_not_a_module', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromName__relative_not_a_module(...)' code ##################

        # Declaration of the 'MyTestCase' class
        # Getting the type of 'unittest' (line 332)
        unittest_201292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 25), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 332)
        TestCase_201293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 332, 25), unittest_201292, 'TestCase')

        class MyTestCase(TestCase_201293, ):

            @norecursion
            def test(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test'
                module_type_store = module_type_store.open_function_context('test', 333, 12, False)
                # Assigning a type to the variable 'self' (line 334)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 334, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                MyTestCase.test.__dict__.__setitem__('stypy_localization', localization)
                MyTestCase.test.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                MyTestCase.test.__dict__.__setitem__('stypy_type_store', module_type_store)
                MyTestCase.test.__dict__.__setitem__('stypy_function_name', 'MyTestCase.test')
                MyTestCase.test.__dict__.__setitem__('stypy_param_names_list', [])
                MyTestCase.test.__dict__.__setitem__('stypy_varargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_kwargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_call_defaults', defaults)
                MyTestCase.test.__dict__.__setitem__('stypy_call_varargs', varargs)
                MyTestCase.test.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                MyTestCase.test.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'MyTestCase.test', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test(...)' code ##################

                pass
                
                # ################# End of 'test(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test' in the type store
                # Getting the type of 'stypy_return_type' (line 333)
                stypy_return_type_201294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_201294)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test'
                return stypy_return_type_201294

        
        # Assigning a type to the variable 'MyTestCase' (line 332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 332, 8), 'MyTestCase', MyTestCase)
        # Declaration of the 'NotAModule' class

        class NotAModule(object, ):
            
            # Assigning a Name to a Name (line 337):
            # Getting the type of 'MyTestCase' (line 337)
            MyTestCase_201295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 21), 'MyTestCase')
            # Assigning a type to the variable 'test_2' (line 337)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 337, 12), 'test_2', MyTestCase_201295)
        
        # Assigning a type to the variable 'NotAModule' (line 336)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 336, 8), 'NotAModule', NotAModule)
        
        # Assigning a Call to a Name (line 339):
        
        # Call to TestLoader(...): (line 339)
        # Processing the call keyword arguments (line 339)
        kwargs_201298 = {}
        # Getting the type of 'unittest' (line 339)
        unittest_201296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 339)
        TestLoader_201297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 339, 17), unittest_201296, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 339)
        TestLoader_call_result_201299 = invoke(stypy.reporting.localization.Localization(__file__, 339, 17), TestLoader_201297, *[], **kwargs_201298)
        
        # Assigning a type to the variable 'loader' (line 339)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 339, 8), 'loader', TestLoader_call_result_201299)
        
        # Assigning a Call to a Name (line 340):
        
        # Call to loadTestsFromName(...): (line 340)
        # Processing the call arguments (line 340)
        str_201302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 340, 41), 'str', 'test_2')
        # Getting the type of 'NotAModule' (line 340)
        NotAModule_201303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 51), 'NotAModule', False)
        # Processing the call keyword arguments (line 340)
        kwargs_201304 = {}
        # Getting the type of 'loader' (line 340)
        loader_201300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromName' of a type (line 340)
        loadTestsFromName_201301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 340, 16), loader_201300, 'loadTestsFromName')
        # Calling loadTestsFromName(args, kwargs) (line 340)
        loadTestsFromName_call_result_201305 = invoke(stypy.reporting.localization.Localization(__file__, 340, 16), loadTestsFromName_201301, *[str_201302, NotAModule_201303], **kwargs_201304)
        
        # Assigning a type to the variable 'suite' (line 340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 340, 8), 'suite', loadTestsFromName_call_result_201305)
        
        # Assigning a List to a Name (line 342):
        
        # Obtaining an instance of the builtin type 'list' (line 342)
        list_201306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 342)
        # Adding element type (line 342)
        
        # Call to MyTestCase(...): (line 342)
        # Processing the call arguments (line 342)
        str_201308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, 32), 'str', 'test')
        # Processing the call keyword arguments (line 342)
        kwargs_201309 = {}
        # Getting the type of 'MyTestCase' (line 342)
        MyTestCase_201307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 21), 'MyTestCase', False)
        # Calling MyTestCase(args, kwargs) (line 342)
        MyTestCase_call_result_201310 = invoke(stypy.reporting.localization.Localization(__file__, 342, 21), MyTestCase_201307, *[str_201308], **kwargs_201309)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 342, 20), list_201306, MyTestCase_call_result_201310)
        
        # Assigning a type to the variable 'reference' (line 342)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 342, 8), 'reference', list_201306)
        
        # Call to assertEqual(...): (line 343)
        # Processing the call arguments (line 343)
        
        # Call to list(...): (line 343)
        # Processing the call arguments (line 343)
        # Getting the type of 'suite' (line 343)
        suite_201314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 30), 'suite', False)
        # Processing the call keyword arguments (line 343)
        kwargs_201315 = {}
        # Getting the type of 'list' (line 343)
        list_201313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 25), 'list', False)
        # Calling list(args, kwargs) (line 343)
        list_call_result_201316 = invoke(stypy.reporting.localization.Localization(__file__, 343, 25), list_201313, *[suite_201314], **kwargs_201315)
        
        # Getting the type of 'reference' (line 343)
        reference_201317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 38), 'reference', False)
        # Processing the call keyword arguments (line 343)
        kwargs_201318 = {}
        # Getting the type of 'self' (line 343)
        self_201311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 343)
        assertEqual_201312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 8), self_201311, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 343)
        assertEqual_call_result_201319 = invoke(stypy.reporting.localization.Localization(__file__, 343, 8), assertEqual_201312, *[list_call_result_201316, reference_201317], **kwargs_201318)
        
        
        # ################# End of 'test_loadTestsFromName__relative_not_a_module(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromName__relative_not_a_module' in the type store
        # Getting the type of 'stypy_return_type' (line 331)
        stypy_return_type_201320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201320)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromName__relative_not_a_module'
        return stypy_return_type_201320


    @norecursion
    def test_loadTestsFromName__relative_bad_object(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromName__relative_bad_object'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromName__relative_bad_object', 352, 4, False)
        # Assigning a type to the variable 'self' (line 353)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 353, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromName__relative_bad_object.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromName__relative_bad_object.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromName__relative_bad_object.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromName__relative_bad_object.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromName__relative_bad_object')
        Test_TestLoader.test_loadTestsFromName__relative_bad_object.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromName__relative_bad_object.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__relative_bad_object.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__relative_bad_object.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromName__relative_bad_object.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromName__relative_bad_object.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromName__relative_bad_object.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromName__relative_bad_object', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromName__relative_bad_object', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromName__relative_bad_object(...)' code ##################

        
        # Assigning a Call to a Name (line 353):
        
        # Call to ModuleType(...): (line 353)
        # Processing the call arguments (line 353)
        str_201323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 353, 29), 'str', 'm')
        # Processing the call keyword arguments (line 353)
        kwargs_201324 = {}
        # Getting the type of 'types' (line 353)
        types_201321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 353)
        ModuleType_201322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 353, 12), types_201321, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 353)
        ModuleType_call_result_201325 = invoke(stypy.reporting.localization.Localization(__file__, 353, 12), ModuleType_201322, *[str_201323], **kwargs_201324)
        
        # Assigning a type to the variable 'm' (line 353)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 353, 8), 'm', ModuleType_call_result_201325)
        
        # Assigning a Call to a Attribute (line 354):
        
        # Call to object(...): (line 354)
        # Processing the call keyword arguments (line 354)
        kwargs_201327 = {}
        # Getting the type of 'object' (line 354)
        object_201326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 23), 'object', False)
        # Calling object(args, kwargs) (line 354)
        object_call_result_201328 = invoke(stypy.reporting.localization.Localization(__file__, 354, 23), object_201326, *[], **kwargs_201327)
        
        # Getting the type of 'm' (line 354)
        m_201329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 8), 'm')
        # Setting the type of the member 'testcase_1' of a type (line 354)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 354, 8), m_201329, 'testcase_1', object_call_result_201328)
        
        # Assigning a Call to a Name (line 356):
        
        # Call to TestLoader(...): (line 356)
        # Processing the call keyword arguments (line 356)
        kwargs_201332 = {}
        # Getting the type of 'unittest' (line 356)
        unittest_201330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 356)
        TestLoader_201331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 17), unittest_201330, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 356)
        TestLoader_call_result_201333 = invoke(stypy.reporting.localization.Localization(__file__, 356, 17), TestLoader_201331, *[], **kwargs_201332)
        
        # Assigning a type to the variable 'loader' (line 356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 8), 'loader', TestLoader_call_result_201333)
        
        
        # SSA begins for try-except statement (line 357)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to loadTestsFromName(...): (line 358)
        # Processing the call arguments (line 358)
        str_201336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 358, 37), 'str', 'testcase_1')
        # Getting the type of 'm' (line 358)
        m_201337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 358, 51), 'm', False)
        # Processing the call keyword arguments (line 358)
        kwargs_201338 = {}
        # Getting the type of 'loader' (line 358)
        loader_201334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 358, 12), 'loader', False)
        # Obtaining the member 'loadTestsFromName' of a type (line 358)
        loadTestsFromName_201335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 358, 12), loader_201334, 'loadTestsFromName')
        # Calling loadTestsFromName(args, kwargs) (line 358)
        loadTestsFromName_call_result_201339 = invoke(stypy.reporting.localization.Localization(__file__, 358, 12), loadTestsFromName_201335, *[str_201336, m_201337], **kwargs_201338)
        
        # SSA branch for the except part of a try statement (line 357)
        # SSA branch for the except 'TypeError' branch of a try statement (line 357)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA branch for the else branch of a try statement (line 357)
        module_type_store.open_ssa_branch('except else')
        
        # Call to fail(...): (line 362)
        # Processing the call arguments (line 362)
        str_201342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 362, 22), 'str', 'Should have raised TypeError')
        # Processing the call keyword arguments (line 362)
        kwargs_201343 = {}
        # Getting the type of 'self' (line 362)
        self_201340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 12), 'self', False)
        # Obtaining the member 'fail' of a type (line 362)
        fail_201341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 362, 12), self_201340, 'fail')
        # Calling fail(args, kwargs) (line 362)
        fail_call_result_201344 = invoke(stypy.reporting.localization.Localization(__file__, 362, 12), fail_201341, *[str_201342], **kwargs_201343)
        
        # SSA join for try-except statement (line 357)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_loadTestsFromName__relative_bad_object(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromName__relative_bad_object' in the type store
        # Getting the type of 'stypy_return_type' (line 352)
        stypy_return_type_201345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201345)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromName__relative_bad_object'
        return stypy_return_type_201345


    @norecursion
    def test_loadTestsFromName__relative_TestCase_subclass(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromName__relative_TestCase_subclass'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromName__relative_TestCase_subclass', 366, 4, False)
        # Assigning a type to the variable 'self' (line 367)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 367, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromName__relative_TestCase_subclass.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromName__relative_TestCase_subclass.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromName__relative_TestCase_subclass.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromName__relative_TestCase_subclass.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromName__relative_TestCase_subclass')
        Test_TestLoader.test_loadTestsFromName__relative_TestCase_subclass.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromName__relative_TestCase_subclass.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__relative_TestCase_subclass.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__relative_TestCase_subclass.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromName__relative_TestCase_subclass.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromName__relative_TestCase_subclass.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromName__relative_TestCase_subclass.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromName__relative_TestCase_subclass', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromName__relative_TestCase_subclass', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromName__relative_TestCase_subclass(...)' code ##################

        
        # Assigning a Call to a Name (line 367):
        
        # Call to ModuleType(...): (line 367)
        # Processing the call arguments (line 367)
        str_201348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 367, 29), 'str', 'm')
        # Processing the call keyword arguments (line 367)
        kwargs_201349 = {}
        # Getting the type of 'types' (line 367)
        types_201346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 367)
        ModuleType_201347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 367, 12), types_201346, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 367)
        ModuleType_call_result_201350 = invoke(stypy.reporting.localization.Localization(__file__, 367, 12), ModuleType_201347, *[str_201348], **kwargs_201349)
        
        # Assigning a type to the variable 'm' (line 367)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 367, 8), 'm', ModuleType_call_result_201350)
        # Declaration of the 'MyTestCase' class
        # Getting the type of 'unittest' (line 368)
        unittest_201351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 25), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 368)
        TestCase_201352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 368, 25), unittest_201351, 'TestCase')

        class MyTestCase(TestCase_201352, ):

            @norecursion
            def test(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test'
                module_type_store = module_type_store.open_function_context('test', 369, 12, False)
                # Assigning a type to the variable 'self' (line 370)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 370, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                MyTestCase.test.__dict__.__setitem__('stypy_localization', localization)
                MyTestCase.test.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                MyTestCase.test.__dict__.__setitem__('stypy_type_store', module_type_store)
                MyTestCase.test.__dict__.__setitem__('stypy_function_name', 'MyTestCase.test')
                MyTestCase.test.__dict__.__setitem__('stypy_param_names_list', [])
                MyTestCase.test.__dict__.__setitem__('stypy_varargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_kwargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_call_defaults', defaults)
                MyTestCase.test.__dict__.__setitem__('stypy_call_varargs', varargs)
                MyTestCase.test.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                MyTestCase.test.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'MyTestCase.test', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test(...)' code ##################

                pass
                
                # ################# End of 'test(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test' in the type store
                # Getting the type of 'stypy_return_type' (line 369)
                stypy_return_type_201353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_201353)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test'
                return stypy_return_type_201353

        
        # Assigning a type to the variable 'MyTestCase' (line 368)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 368, 8), 'MyTestCase', MyTestCase)
        
        # Assigning a Name to a Attribute (line 371):
        # Getting the type of 'MyTestCase' (line 371)
        MyTestCase_201354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 23), 'MyTestCase')
        # Getting the type of 'm' (line 371)
        m_201355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 8), 'm')
        # Setting the type of the member 'testcase_1' of a type (line 371)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 371, 8), m_201355, 'testcase_1', MyTestCase_201354)
        
        # Assigning a Call to a Name (line 373):
        
        # Call to TestLoader(...): (line 373)
        # Processing the call keyword arguments (line 373)
        kwargs_201358 = {}
        # Getting the type of 'unittest' (line 373)
        unittest_201356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 373)
        TestLoader_201357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 373, 17), unittest_201356, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 373)
        TestLoader_call_result_201359 = invoke(stypy.reporting.localization.Localization(__file__, 373, 17), TestLoader_201357, *[], **kwargs_201358)
        
        # Assigning a type to the variable 'loader' (line 373)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 373, 8), 'loader', TestLoader_call_result_201359)
        
        # Assigning a Call to a Name (line 374):
        
        # Call to loadTestsFromName(...): (line 374)
        # Processing the call arguments (line 374)
        str_201362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 374, 41), 'str', 'testcase_1')
        # Getting the type of 'm' (line 374)
        m_201363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 55), 'm', False)
        # Processing the call keyword arguments (line 374)
        kwargs_201364 = {}
        # Getting the type of 'loader' (line 374)
        loader_201360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromName' of a type (line 374)
        loadTestsFromName_201361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 374, 16), loader_201360, 'loadTestsFromName')
        # Calling loadTestsFromName(args, kwargs) (line 374)
        loadTestsFromName_call_result_201365 = invoke(stypy.reporting.localization.Localization(__file__, 374, 16), loadTestsFromName_201361, *[str_201362, m_201363], **kwargs_201364)
        
        # Assigning a type to the variable 'suite' (line 374)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 374, 8), 'suite', loadTestsFromName_call_result_201365)
        
        # Call to assertIsInstance(...): (line 375)
        # Processing the call arguments (line 375)
        # Getting the type of 'suite' (line 375)
        suite_201368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 30), 'suite', False)
        # Getting the type of 'loader' (line 375)
        loader_201369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 37), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 375)
        suiteClass_201370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 37), loader_201369, 'suiteClass')
        # Processing the call keyword arguments (line 375)
        kwargs_201371 = {}
        # Getting the type of 'self' (line 375)
        self_201366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 8), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 375)
        assertIsInstance_201367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 8), self_201366, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 375)
        assertIsInstance_call_result_201372 = invoke(stypy.reporting.localization.Localization(__file__, 375, 8), assertIsInstance_201367, *[suite_201368, suiteClass_201370], **kwargs_201371)
        
        
        # Call to assertEqual(...): (line 376)
        # Processing the call arguments (line 376)
        
        # Call to list(...): (line 376)
        # Processing the call arguments (line 376)
        # Getting the type of 'suite' (line 376)
        suite_201376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 30), 'suite', False)
        # Processing the call keyword arguments (line 376)
        kwargs_201377 = {}
        # Getting the type of 'list' (line 376)
        list_201375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 25), 'list', False)
        # Calling list(args, kwargs) (line 376)
        list_call_result_201378 = invoke(stypy.reporting.localization.Localization(__file__, 376, 25), list_201375, *[suite_201376], **kwargs_201377)
        
        
        # Obtaining an instance of the builtin type 'list' (line 376)
        list_201379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 376)
        # Adding element type (line 376)
        
        # Call to MyTestCase(...): (line 376)
        # Processing the call arguments (line 376)
        str_201381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, 50), 'str', 'test')
        # Processing the call keyword arguments (line 376)
        kwargs_201382 = {}
        # Getting the type of 'MyTestCase' (line 376)
        MyTestCase_201380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 39), 'MyTestCase', False)
        # Calling MyTestCase(args, kwargs) (line 376)
        MyTestCase_call_result_201383 = invoke(stypy.reporting.localization.Localization(__file__, 376, 39), MyTestCase_201380, *[str_201381], **kwargs_201382)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 376, 38), list_201379, MyTestCase_call_result_201383)
        
        # Processing the call keyword arguments (line 376)
        kwargs_201384 = {}
        # Getting the type of 'self' (line 376)
        self_201373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 376)
        assertEqual_201374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 8), self_201373, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 376)
        assertEqual_call_result_201385 = invoke(stypy.reporting.localization.Localization(__file__, 376, 8), assertEqual_201374, *[list_call_result_201378, list_201379], **kwargs_201384)
        
        
        # ################# End of 'test_loadTestsFromName__relative_TestCase_subclass(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromName__relative_TestCase_subclass' in the type store
        # Getting the type of 'stypy_return_type' (line 366)
        stypy_return_type_201386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201386)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromName__relative_TestCase_subclass'
        return stypy_return_type_201386


    @norecursion
    def test_loadTestsFromName__relative_TestSuite(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromName__relative_TestSuite'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromName__relative_TestSuite', 382, 4, False)
        # Assigning a type to the variable 'self' (line 383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromName__relative_TestSuite.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromName__relative_TestSuite.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromName__relative_TestSuite.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromName__relative_TestSuite.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromName__relative_TestSuite')
        Test_TestLoader.test_loadTestsFromName__relative_TestSuite.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromName__relative_TestSuite.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__relative_TestSuite.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__relative_TestSuite.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromName__relative_TestSuite.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromName__relative_TestSuite.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromName__relative_TestSuite.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromName__relative_TestSuite', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromName__relative_TestSuite', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromName__relative_TestSuite(...)' code ##################

        
        # Assigning a Call to a Name (line 383):
        
        # Call to ModuleType(...): (line 383)
        # Processing the call arguments (line 383)
        str_201389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 383, 29), 'str', 'm')
        # Processing the call keyword arguments (line 383)
        kwargs_201390 = {}
        # Getting the type of 'types' (line 383)
        types_201387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 383)
        ModuleType_201388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 383, 12), types_201387, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 383)
        ModuleType_call_result_201391 = invoke(stypy.reporting.localization.Localization(__file__, 383, 12), ModuleType_201388, *[str_201389], **kwargs_201390)
        
        # Assigning a type to the variable 'm' (line 383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 8), 'm', ModuleType_call_result_201391)
        # Declaration of the 'MyTestCase' class
        # Getting the type of 'unittest' (line 384)
        unittest_201392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 25), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 384)
        TestCase_201393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 25), unittest_201392, 'TestCase')

        class MyTestCase(TestCase_201393, ):

            @norecursion
            def test(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test'
                module_type_store = module_type_store.open_function_context('test', 385, 12, False)
                # Assigning a type to the variable 'self' (line 386)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                MyTestCase.test.__dict__.__setitem__('stypy_localization', localization)
                MyTestCase.test.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                MyTestCase.test.__dict__.__setitem__('stypy_type_store', module_type_store)
                MyTestCase.test.__dict__.__setitem__('stypy_function_name', 'MyTestCase.test')
                MyTestCase.test.__dict__.__setitem__('stypy_param_names_list', [])
                MyTestCase.test.__dict__.__setitem__('stypy_varargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_kwargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_call_defaults', defaults)
                MyTestCase.test.__dict__.__setitem__('stypy_call_varargs', varargs)
                MyTestCase.test.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                MyTestCase.test.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'MyTestCase.test', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test(...)' code ##################

                pass
                
                # ################# End of 'test(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test' in the type store
                # Getting the type of 'stypy_return_type' (line 385)
                stypy_return_type_201394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_201394)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test'
                return stypy_return_type_201394

        
        # Assigning a type to the variable 'MyTestCase' (line 384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'MyTestCase', MyTestCase)
        
        # Assigning a Call to a Attribute (line 387):
        
        # Call to TestSuite(...): (line 387)
        # Processing the call arguments (line 387)
        
        # Obtaining an instance of the builtin type 'list' (line 387)
        list_201397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 387, 41), 'list')
        # Adding type elements to the builtin type 'list' instance (line 387)
        # Adding element type (line 387)
        
        # Call to MyTestCase(...): (line 387)
        # Processing the call arguments (line 387)
        str_201399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 387, 53), 'str', 'test')
        # Processing the call keyword arguments (line 387)
        kwargs_201400 = {}
        # Getting the type of 'MyTestCase' (line 387)
        MyTestCase_201398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 42), 'MyTestCase', False)
        # Calling MyTestCase(args, kwargs) (line 387)
        MyTestCase_call_result_201401 = invoke(stypy.reporting.localization.Localization(__file__, 387, 42), MyTestCase_201398, *[str_201399], **kwargs_201400)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 387, 41), list_201397, MyTestCase_call_result_201401)
        
        # Processing the call keyword arguments (line 387)
        kwargs_201402 = {}
        # Getting the type of 'unittest' (line 387)
        unittest_201395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 22), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 387)
        TestSuite_201396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 387, 22), unittest_201395, 'TestSuite')
        # Calling TestSuite(args, kwargs) (line 387)
        TestSuite_call_result_201403 = invoke(stypy.reporting.localization.Localization(__file__, 387, 22), TestSuite_201396, *[list_201397], **kwargs_201402)
        
        # Getting the type of 'm' (line 387)
        m_201404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 8), 'm')
        # Setting the type of the member 'testsuite' of a type (line 387)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 387, 8), m_201404, 'testsuite', TestSuite_call_result_201403)
        
        # Assigning a Call to a Name (line 389):
        
        # Call to TestLoader(...): (line 389)
        # Processing the call keyword arguments (line 389)
        kwargs_201407 = {}
        # Getting the type of 'unittest' (line 389)
        unittest_201405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 389)
        TestLoader_201406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 389, 17), unittest_201405, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 389)
        TestLoader_call_result_201408 = invoke(stypy.reporting.localization.Localization(__file__, 389, 17), TestLoader_201406, *[], **kwargs_201407)
        
        # Assigning a type to the variable 'loader' (line 389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), 'loader', TestLoader_call_result_201408)
        
        # Assigning a Call to a Name (line 390):
        
        # Call to loadTestsFromName(...): (line 390)
        # Processing the call arguments (line 390)
        str_201411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 390, 41), 'str', 'testsuite')
        # Getting the type of 'm' (line 390)
        m_201412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 54), 'm', False)
        # Processing the call keyword arguments (line 390)
        kwargs_201413 = {}
        # Getting the type of 'loader' (line 390)
        loader_201409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromName' of a type (line 390)
        loadTestsFromName_201410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 16), loader_201409, 'loadTestsFromName')
        # Calling loadTestsFromName(args, kwargs) (line 390)
        loadTestsFromName_call_result_201414 = invoke(stypy.reporting.localization.Localization(__file__, 390, 16), loadTestsFromName_201410, *[str_201411, m_201412], **kwargs_201413)
        
        # Assigning a type to the variable 'suite' (line 390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 8), 'suite', loadTestsFromName_call_result_201414)
        
        # Call to assertIsInstance(...): (line 391)
        # Processing the call arguments (line 391)
        # Getting the type of 'suite' (line 391)
        suite_201417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 30), 'suite', False)
        # Getting the type of 'loader' (line 391)
        loader_201418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 37), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 391)
        suiteClass_201419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 37), loader_201418, 'suiteClass')
        # Processing the call keyword arguments (line 391)
        kwargs_201420 = {}
        # Getting the type of 'self' (line 391)
        self_201415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 8), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 391)
        assertIsInstance_201416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 8), self_201415, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 391)
        assertIsInstance_call_result_201421 = invoke(stypy.reporting.localization.Localization(__file__, 391, 8), assertIsInstance_201416, *[suite_201417, suiteClass_201419], **kwargs_201420)
        
        
        # Call to assertEqual(...): (line 393)
        # Processing the call arguments (line 393)
        
        # Call to list(...): (line 393)
        # Processing the call arguments (line 393)
        # Getting the type of 'suite' (line 393)
        suite_201425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 30), 'suite', False)
        # Processing the call keyword arguments (line 393)
        kwargs_201426 = {}
        # Getting the type of 'list' (line 393)
        list_201424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 25), 'list', False)
        # Calling list(args, kwargs) (line 393)
        list_call_result_201427 = invoke(stypy.reporting.localization.Localization(__file__, 393, 25), list_201424, *[suite_201425], **kwargs_201426)
        
        
        # Obtaining an instance of the builtin type 'list' (line 393)
        list_201428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 393, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 393)
        # Adding element type (line 393)
        
        # Call to MyTestCase(...): (line 393)
        # Processing the call arguments (line 393)
        str_201430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 393, 50), 'str', 'test')
        # Processing the call keyword arguments (line 393)
        kwargs_201431 = {}
        # Getting the type of 'MyTestCase' (line 393)
        MyTestCase_201429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 39), 'MyTestCase', False)
        # Calling MyTestCase(args, kwargs) (line 393)
        MyTestCase_call_result_201432 = invoke(stypy.reporting.localization.Localization(__file__, 393, 39), MyTestCase_201429, *[str_201430], **kwargs_201431)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 393, 38), list_201428, MyTestCase_call_result_201432)
        
        # Processing the call keyword arguments (line 393)
        kwargs_201433 = {}
        # Getting the type of 'self' (line 393)
        self_201422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 393)
        assertEqual_201423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 8), self_201422, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 393)
        assertEqual_call_result_201434 = invoke(stypy.reporting.localization.Localization(__file__, 393, 8), assertEqual_201423, *[list_call_result_201427, list_201428], **kwargs_201433)
        
        
        # ################# End of 'test_loadTestsFromName__relative_TestSuite(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromName__relative_TestSuite' in the type store
        # Getting the type of 'stypy_return_type' (line 382)
        stypy_return_type_201435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201435)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromName__relative_TestSuite'
        return stypy_return_type_201435


    @norecursion
    def test_loadTestsFromName__relative_testmethod(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromName__relative_testmethod'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromName__relative_testmethod', 397, 4, False)
        # Assigning a type to the variable 'self' (line 398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 398, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromName__relative_testmethod.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromName__relative_testmethod.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromName__relative_testmethod.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromName__relative_testmethod.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromName__relative_testmethod')
        Test_TestLoader.test_loadTestsFromName__relative_testmethod.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromName__relative_testmethod.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__relative_testmethod.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__relative_testmethod.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromName__relative_testmethod.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromName__relative_testmethod.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromName__relative_testmethod.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromName__relative_testmethod', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromName__relative_testmethod', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromName__relative_testmethod(...)' code ##################

        
        # Assigning a Call to a Name (line 398):
        
        # Call to ModuleType(...): (line 398)
        # Processing the call arguments (line 398)
        str_201438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 398, 29), 'str', 'm')
        # Processing the call keyword arguments (line 398)
        kwargs_201439 = {}
        # Getting the type of 'types' (line 398)
        types_201436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 398)
        ModuleType_201437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 398, 12), types_201436, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 398)
        ModuleType_call_result_201440 = invoke(stypy.reporting.localization.Localization(__file__, 398, 12), ModuleType_201437, *[str_201438], **kwargs_201439)
        
        # Assigning a type to the variable 'm' (line 398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 398, 8), 'm', ModuleType_call_result_201440)
        # Declaration of the 'MyTestCase' class
        # Getting the type of 'unittest' (line 399)
        unittest_201441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 25), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 399)
        TestCase_201442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 399, 25), unittest_201441, 'TestCase')

        class MyTestCase(TestCase_201442, ):

            @norecursion
            def test(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test'
                module_type_store = module_type_store.open_function_context('test', 400, 12, False)
                # Assigning a type to the variable 'self' (line 401)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 401, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                MyTestCase.test.__dict__.__setitem__('stypy_localization', localization)
                MyTestCase.test.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                MyTestCase.test.__dict__.__setitem__('stypy_type_store', module_type_store)
                MyTestCase.test.__dict__.__setitem__('stypy_function_name', 'MyTestCase.test')
                MyTestCase.test.__dict__.__setitem__('stypy_param_names_list', [])
                MyTestCase.test.__dict__.__setitem__('stypy_varargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_kwargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_call_defaults', defaults)
                MyTestCase.test.__dict__.__setitem__('stypy_call_varargs', varargs)
                MyTestCase.test.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                MyTestCase.test.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'MyTestCase.test', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test(...)' code ##################

                pass
                
                # ################# End of 'test(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test' in the type store
                # Getting the type of 'stypy_return_type' (line 400)
                stypy_return_type_201443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_201443)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test'
                return stypy_return_type_201443

        
        # Assigning a type to the variable 'MyTestCase' (line 399)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 399, 8), 'MyTestCase', MyTestCase)
        
        # Assigning a Name to a Attribute (line 402):
        # Getting the type of 'MyTestCase' (line 402)
        MyTestCase_201444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 23), 'MyTestCase')
        # Getting the type of 'm' (line 402)
        m_201445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 8), 'm')
        # Setting the type of the member 'testcase_1' of a type (line 402)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 402, 8), m_201445, 'testcase_1', MyTestCase_201444)
        
        # Assigning a Call to a Name (line 404):
        
        # Call to TestLoader(...): (line 404)
        # Processing the call keyword arguments (line 404)
        kwargs_201448 = {}
        # Getting the type of 'unittest' (line 404)
        unittest_201446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 404)
        TestLoader_201447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 404, 17), unittest_201446, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 404)
        TestLoader_call_result_201449 = invoke(stypy.reporting.localization.Localization(__file__, 404, 17), TestLoader_201447, *[], **kwargs_201448)
        
        # Assigning a type to the variable 'loader' (line 404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 404, 8), 'loader', TestLoader_call_result_201449)
        
        # Assigning a Call to a Name (line 405):
        
        # Call to loadTestsFromName(...): (line 405)
        # Processing the call arguments (line 405)
        str_201452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 405, 41), 'str', 'testcase_1.test')
        # Getting the type of 'm' (line 405)
        m_201453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 60), 'm', False)
        # Processing the call keyword arguments (line 405)
        kwargs_201454 = {}
        # Getting the type of 'loader' (line 405)
        loader_201450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromName' of a type (line 405)
        loadTestsFromName_201451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 405, 16), loader_201450, 'loadTestsFromName')
        # Calling loadTestsFromName(args, kwargs) (line 405)
        loadTestsFromName_call_result_201455 = invoke(stypy.reporting.localization.Localization(__file__, 405, 16), loadTestsFromName_201451, *[str_201452, m_201453], **kwargs_201454)
        
        # Assigning a type to the variable 'suite' (line 405)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 405, 8), 'suite', loadTestsFromName_call_result_201455)
        
        # Call to assertIsInstance(...): (line 406)
        # Processing the call arguments (line 406)
        # Getting the type of 'suite' (line 406)
        suite_201458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 30), 'suite', False)
        # Getting the type of 'loader' (line 406)
        loader_201459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 37), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 406)
        suiteClass_201460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 406, 37), loader_201459, 'suiteClass')
        # Processing the call keyword arguments (line 406)
        kwargs_201461 = {}
        # Getting the type of 'self' (line 406)
        self_201456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 8), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 406)
        assertIsInstance_201457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 406, 8), self_201456, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 406)
        assertIsInstance_call_result_201462 = invoke(stypy.reporting.localization.Localization(__file__, 406, 8), assertIsInstance_201457, *[suite_201458, suiteClass_201460], **kwargs_201461)
        
        
        # Call to assertEqual(...): (line 408)
        # Processing the call arguments (line 408)
        
        # Call to list(...): (line 408)
        # Processing the call arguments (line 408)
        # Getting the type of 'suite' (line 408)
        suite_201466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 30), 'suite', False)
        # Processing the call keyword arguments (line 408)
        kwargs_201467 = {}
        # Getting the type of 'list' (line 408)
        list_201465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 25), 'list', False)
        # Calling list(args, kwargs) (line 408)
        list_call_result_201468 = invoke(stypy.reporting.localization.Localization(__file__, 408, 25), list_201465, *[suite_201466], **kwargs_201467)
        
        
        # Obtaining an instance of the builtin type 'list' (line 408)
        list_201469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 408, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 408)
        # Adding element type (line 408)
        
        # Call to MyTestCase(...): (line 408)
        # Processing the call arguments (line 408)
        str_201471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 408, 50), 'str', 'test')
        # Processing the call keyword arguments (line 408)
        kwargs_201472 = {}
        # Getting the type of 'MyTestCase' (line 408)
        MyTestCase_201470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 39), 'MyTestCase', False)
        # Calling MyTestCase(args, kwargs) (line 408)
        MyTestCase_call_result_201473 = invoke(stypy.reporting.localization.Localization(__file__, 408, 39), MyTestCase_201470, *[str_201471], **kwargs_201472)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 408, 38), list_201469, MyTestCase_call_result_201473)
        
        # Processing the call keyword arguments (line 408)
        kwargs_201474 = {}
        # Getting the type of 'self' (line 408)
        self_201463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 408)
        assertEqual_201464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 408, 8), self_201463, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 408)
        assertEqual_call_result_201475 = invoke(stypy.reporting.localization.Localization(__file__, 408, 8), assertEqual_201464, *[list_call_result_201468, list_201469], **kwargs_201474)
        
        
        # ################# End of 'test_loadTestsFromName__relative_testmethod(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromName__relative_testmethod' in the type store
        # Getting the type of 'stypy_return_type' (line 397)
        stypy_return_type_201476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201476)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromName__relative_testmethod'
        return stypy_return_type_201476


    @norecursion
    def test_loadTestsFromName__relative_invalid_testmethod(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromName__relative_invalid_testmethod'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromName__relative_invalid_testmethod', 418, 4, False)
        # Assigning a type to the variable 'self' (line 419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 419, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromName__relative_invalid_testmethod.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromName__relative_invalid_testmethod.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromName__relative_invalid_testmethod.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromName__relative_invalid_testmethod.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromName__relative_invalid_testmethod')
        Test_TestLoader.test_loadTestsFromName__relative_invalid_testmethod.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromName__relative_invalid_testmethod.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__relative_invalid_testmethod.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__relative_invalid_testmethod.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromName__relative_invalid_testmethod.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromName__relative_invalid_testmethod.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromName__relative_invalid_testmethod.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromName__relative_invalid_testmethod', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromName__relative_invalid_testmethod', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromName__relative_invalid_testmethod(...)' code ##################

        
        # Assigning a Call to a Name (line 419):
        
        # Call to ModuleType(...): (line 419)
        # Processing the call arguments (line 419)
        str_201479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 419, 29), 'str', 'm')
        # Processing the call keyword arguments (line 419)
        kwargs_201480 = {}
        # Getting the type of 'types' (line 419)
        types_201477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 419)
        ModuleType_201478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 419, 12), types_201477, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 419)
        ModuleType_call_result_201481 = invoke(stypy.reporting.localization.Localization(__file__, 419, 12), ModuleType_201478, *[str_201479], **kwargs_201480)
        
        # Assigning a type to the variable 'm' (line 419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 419, 8), 'm', ModuleType_call_result_201481)
        # Declaration of the 'MyTestCase' class
        # Getting the type of 'unittest' (line 420)
        unittest_201482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 25), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 420)
        TestCase_201483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 420, 25), unittest_201482, 'TestCase')

        class MyTestCase(TestCase_201483, ):

            @norecursion
            def test(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test'
                module_type_store = module_type_store.open_function_context('test', 421, 12, False)
                # Assigning a type to the variable 'self' (line 422)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 422, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                MyTestCase.test.__dict__.__setitem__('stypy_localization', localization)
                MyTestCase.test.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                MyTestCase.test.__dict__.__setitem__('stypy_type_store', module_type_store)
                MyTestCase.test.__dict__.__setitem__('stypy_function_name', 'MyTestCase.test')
                MyTestCase.test.__dict__.__setitem__('stypy_param_names_list', [])
                MyTestCase.test.__dict__.__setitem__('stypy_varargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_kwargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_call_defaults', defaults)
                MyTestCase.test.__dict__.__setitem__('stypy_call_varargs', varargs)
                MyTestCase.test.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                MyTestCase.test.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'MyTestCase.test', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test(...)' code ##################

                pass
                
                # ################# End of 'test(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test' in the type store
                # Getting the type of 'stypy_return_type' (line 421)
                stypy_return_type_201484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_201484)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test'
                return stypy_return_type_201484

        
        # Assigning a type to the variable 'MyTestCase' (line 420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 420, 8), 'MyTestCase', MyTestCase)
        
        # Assigning a Name to a Attribute (line 423):
        # Getting the type of 'MyTestCase' (line 423)
        MyTestCase_201485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 23), 'MyTestCase')
        # Getting the type of 'm' (line 423)
        m_201486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 8), 'm')
        # Setting the type of the member 'testcase_1' of a type (line 423)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 423, 8), m_201486, 'testcase_1', MyTestCase_201485)
        
        # Assigning a Call to a Name (line 425):
        
        # Call to TestLoader(...): (line 425)
        # Processing the call keyword arguments (line 425)
        kwargs_201489 = {}
        # Getting the type of 'unittest' (line 425)
        unittest_201487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 425)
        TestLoader_201488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 425, 17), unittest_201487, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 425)
        TestLoader_call_result_201490 = invoke(stypy.reporting.localization.Localization(__file__, 425, 17), TestLoader_201488, *[], **kwargs_201489)
        
        # Assigning a type to the variable 'loader' (line 425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 425, 8), 'loader', TestLoader_call_result_201490)
        
        
        # SSA begins for try-except statement (line 426)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to loadTestsFromName(...): (line 427)
        # Processing the call arguments (line 427)
        str_201493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 427, 37), 'str', 'testcase_1.testfoo')
        # Getting the type of 'm' (line 427)
        m_201494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 59), 'm', False)
        # Processing the call keyword arguments (line 427)
        kwargs_201495 = {}
        # Getting the type of 'loader' (line 427)
        loader_201491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 12), 'loader', False)
        # Obtaining the member 'loadTestsFromName' of a type (line 427)
        loadTestsFromName_201492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 427, 12), loader_201491, 'loadTestsFromName')
        # Calling loadTestsFromName(args, kwargs) (line 427)
        loadTestsFromName_call_result_201496 = invoke(stypy.reporting.localization.Localization(__file__, 427, 12), loadTestsFromName_201492, *[str_201493, m_201494], **kwargs_201495)
        
        # SSA branch for the except part of a try statement (line 426)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 426)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'AttributeError' (line 428)
        AttributeError_201497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 15), 'AttributeError')
        # Assigning a type to the variable 'e' (line 428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 8), 'e', AttributeError_201497)
        
        # Call to assertEqual(...): (line 429)
        # Processing the call arguments (line 429)
        
        # Call to str(...): (line 429)
        # Processing the call arguments (line 429)
        # Getting the type of 'e' (line 429)
        e_201501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 33), 'e', False)
        # Processing the call keyword arguments (line 429)
        kwargs_201502 = {}
        # Getting the type of 'str' (line 429)
        str_201500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 29), 'str', False)
        # Calling str(args, kwargs) (line 429)
        str_call_result_201503 = invoke(stypy.reporting.localization.Localization(__file__, 429, 29), str_201500, *[e_201501], **kwargs_201502)
        
        str_201504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 429, 37), 'str', "type object 'MyTestCase' has no attribute 'testfoo'")
        # Processing the call keyword arguments (line 429)
        kwargs_201505 = {}
        # Getting the type of 'self' (line 429)
        self_201498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 12), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 429)
        assertEqual_201499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 429, 12), self_201498, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 429)
        assertEqual_call_result_201506 = invoke(stypy.reporting.localization.Localization(__file__, 429, 12), assertEqual_201499, *[str_call_result_201503, str_201504], **kwargs_201505)
        
        # SSA branch for the else branch of a try statement (line 426)
        module_type_store.open_ssa_branch('except else')
        
        # Call to fail(...): (line 431)
        # Processing the call arguments (line 431)
        str_201509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 431, 22), 'str', 'Failed to raise AttributeError')
        # Processing the call keyword arguments (line 431)
        kwargs_201510 = {}
        # Getting the type of 'self' (line 431)
        self_201507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 12), 'self', False)
        # Obtaining the member 'fail' of a type (line 431)
        fail_201508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 431, 12), self_201507, 'fail')
        # Calling fail(args, kwargs) (line 431)
        fail_call_result_201511 = invoke(stypy.reporting.localization.Localization(__file__, 431, 12), fail_201508, *[str_201509], **kwargs_201510)
        
        # SSA join for try-except statement (line 426)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_loadTestsFromName__relative_invalid_testmethod(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromName__relative_invalid_testmethod' in the type store
        # Getting the type of 'stypy_return_type' (line 418)
        stypy_return_type_201512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201512)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromName__relative_invalid_testmethod'
        return stypy_return_type_201512


    @norecursion
    def test_loadTestsFromName__callable__TestSuite(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromName__callable__TestSuite'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromName__callable__TestSuite', 435, 4, False)
        # Assigning a type to the variable 'self' (line 436)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 436, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromName__callable__TestSuite.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromName__callable__TestSuite.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromName__callable__TestSuite.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromName__callable__TestSuite.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromName__callable__TestSuite')
        Test_TestLoader.test_loadTestsFromName__callable__TestSuite.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromName__callable__TestSuite.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__callable__TestSuite.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__callable__TestSuite.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromName__callable__TestSuite.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromName__callable__TestSuite.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromName__callable__TestSuite.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromName__callable__TestSuite', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromName__callable__TestSuite', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromName__callable__TestSuite(...)' code ##################

        
        # Assigning a Call to a Name (line 436):
        
        # Call to ModuleType(...): (line 436)
        # Processing the call arguments (line 436)
        str_201515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 436, 29), 'str', 'm')
        # Processing the call keyword arguments (line 436)
        kwargs_201516 = {}
        # Getting the type of 'types' (line 436)
        types_201513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 436)
        ModuleType_201514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 436, 12), types_201513, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 436)
        ModuleType_call_result_201517 = invoke(stypy.reporting.localization.Localization(__file__, 436, 12), ModuleType_201514, *[str_201515], **kwargs_201516)
        
        # Assigning a type to the variable 'm' (line 436)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 436, 8), 'm', ModuleType_call_result_201517)
        
        # Assigning a Call to a Name (line 437):
        
        # Call to FunctionTestCase(...): (line 437)
        # Processing the call arguments (line 437)

        @norecursion
        def _stypy_temp_lambda_81(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_81'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_81', 437, 47, True)
            # Passed parameters checking function
            _stypy_temp_lambda_81.stypy_localization = localization
            _stypy_temp_lambda_81.stypy_type_of_self = None
            _stypy_temp_lambda_81.stypy_type_store = module_type_store
            _stypy_temp_lambda_81.stypy_function_name = '_stypy_temp_lambda_81'
            _stypy_temp_lambda_81.stypy_param_names_list = []
            _stypy_temp_lambda_81.stypy_varargs_param_name = None
            _stypy_temp_lambda_81.stypy_kwargs_param_name = None
            _stypy_temp_lambda_81.stypy_call_defaults = defaults
            _stypy_temp_lambda_81.stypy_call_varargs = varargs
            _stypy_temp_lambda_81.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_81', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_81', [], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            # Getting the type of 'None' (line 437)
            None_201520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 55), 'None', False)
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 437)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 437, 47), 'stypy_return_type', None_201520)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_81' in the type store
            # Getting the type of 'stypy_return_type' (line 437)
            stypy_return_type_201521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 47), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_201521)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_81'
            return stypy_return_type_201521

        # Assigning a type to the variable '_stypy_temp_lambda_81' (line 437)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 437, 47), '_stypy_temp_lambda_81', _stypy_temp_lambda_81)
        # Getting the type of '_stypy_temp_lambda_81' (line 437)
        _stypy_temp_lambda_81_201522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 47), '_stypy_temp_lambda_81')
        # Processing the call keyword arguments (line 437)
        kwargs_201523 = {}
        # Getting the type of 'unittest' (line 437)
        unittest_201518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 21), 'unittest', False)
        # Obtaining the member 'FunctionTestCase' of a type (line 437)
        FunctionTestCase_201519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 437, 21), unittest_201518, 'FunctionTestCase')
        # Calling FunctionTestCase(args, kwargs) (line 437)
        FunctionTestCase_call_result_201524 = invoke(stypy.reporting.localization.Localization(__file__, 437, 21), FunctionTestCase_201519, *[_stypy_temp_lambda_81_201522], **kwargs_201523)
        
        # Assigning a type to the variable 'testcase_1' (line 437)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 437, 8), 'testcase_1', FunctionTestCase_call_result_201524)
        
        # Assigning a Call to a Name (line 438):
        
        # Call to FunctionTestCase(...): (line 438)
        # Processing the call arguments (line 438)

        @norecursion
        def _stypy_temp_lambda_82(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_82'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_82', 438, 47, True)
            # Passed parameters checking function
            _stypy_temp_lambda_82.stypy_localization = localization
            _stypy_temp_lambda_82.stypy_type_of_self = None
            _stypy_temp_lambda_82.stypy_type_store = module_type_store
            _stypy_temp_lambda_82.stypy_function_name = '_stypy_temp_lambda_82'
            _stypy_temp_lambda_82.stypy_param_names_list = []
            _stypy_temp_lambda_82.stypy_varargs_param_name = None
            _stypy_temp_lambda_82.stypy_kwargs_param_name = None
            _stypy_temp_lambda_82.stypy_call_defaults = defaults
            _stypy_temp_lambda_82.stypy_call_varargs = varargs
            _stypy_temp_lambda_82.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_82', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_82', [], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            # Getting the type of 'None' (line 438)
            None_201527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 55), 'None', False)
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 438)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 438, 47), 'stypy_return_type', None_201527)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_82' in the type store
            # Getting the type of 'stypy_return_type' (line 438)
            stypy_return_type_201528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 47), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_201528)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_82'
            return stypy_return_type_201528

        # Assigning a type to the variable '_stypy_temp_lambda_82' (line 438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 438, 47), '_stypy_temp_lambda_82', _stypy_temp_lambda_82)
        # Getting the type of '_stypy_temp_lambda_82' (line 438)
        _stypy_temp_lambda_82_201529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 47), '_stypy_temp_lambda_82')
        # Processing the call keyword arguments (line 438)
        kwargs_201530 = {}
        # Getting the type of 'unittest' (line 438)
        unittest_201525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 21), 'unittest', False)
        # Obtaining the member 'FunctionTestCase' of a type (line 438)
        FunctionTestCase_201526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 438, 21), unittest_201525, 'FunctionTestCase')
        # Calling FunctionTestCase(args, kwargs) (line 438)
        FunctionTestCase_call_result_201531 = invoke(stypy.reporting.localization.Localization(__file__, 438, 21), FunctionTestCase_201526, *[_stypy_temp_lambda_82_201529], **kwargs_201530)
        
        # Assigning a type to the variable 'testcase_2' (line 438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 438, 8), 'testcase_2', FunctionTestCase_call_result_201531)

        @norecursion
        def return_TestSuite(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'return_TestSuite'
            module_type_store = module_type_store.open_function_context('return_TestSuite', 439, 8, False)
            
            # Passed parameters checking function
            return_TestSuite.stypy_localization = localization
            return_TestSuite.stypy_type_of_self = None
            return_TestSuite.stypy_type_store = module_type_store
            return_TestSuite.stypy_function_name = 'return_TestSuite'
            return_TestSuite.stypy_param_names_list = []
            return_TestSuite.stypy_varargs_param_name = None
            return_TestSuite.stypy_kwargs_param_name = None
            return_TestSuite.stypy_call_defaults = defaults
            return_TestSuite.stypy_call_varargs = varargs
            return_TestSuite.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'return_TestSuite', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'return_TestSuite', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'return_TestSuite(...)' code ##################

            
            # Call to TestSuite(...): (line 440)
            # Processing the call arguments (line 440)
            
            # Obtaining an instance of the builtin type 'list' (line 440)
            list_201534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 440, 38), 'list')
            # Adding type elements to the builtin type 'list' instance (line 440)
            # Adding element type (line 440)
            # Getting the type of 'testcase_1' (line 440)
            testcase_1_201535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 39), 'testcase_1', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 440, 38), list_201534, testcase_1_201535)
            # Adding element type (line 440)
            # Getting the type of 'testcase_2' (line 440)
            testcase_2_201536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 51), 'testcase_2', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 440, 38), list_201534, testcase_2_201536)
            
            # Processing the call keyword arguments (line 440)
            kwargs_201537 = {}
            # Getting the type of 'unittest' (line 440)
            unittest_201532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 19), 'unittest', False)
            # Obtaining the member 'TestSuite' of a type (line 440)
            TestSuite_201533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 440, 19), unittest_201532, 'TestSuite')
            # Calling TestSuite(args, kwargs) (line 440)
            TestSuite_call_result_201538 = invoke(stypy.reporting.localization.Localization(__file__, 440, 19), TestSuite_201533, *[list_201534], **kwargs_201537)
            
            # Assigning a type to the variable 'stypy_return_type' (line 440)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 440, 12), 'stypy_return_type', TestSuite_call_result_201538)
            
            # ################# End of 'return_TestSuite(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'return_TestSuite' in the type store
            # Getting the type of 'stypy_return_type' (line 439)
            stypy_return_type_201539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_201539)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'return_TestSuite'
            return stypy_return_type_201539

        # Assigning a type to the variable 'return_TestSuite' (line 439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 439, 8), 'return_TestSuite', return_TestSuite)
        
        # Assigning a Name to a Attribute (line 441):
        # Getting the type of 'return_TestSuite' (line 441)
        return_TestSuite_201540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 29), 'return_TestSuite')
        # Getting the type of 'm' (line 441)
        m_201541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 8), 'm')
        # Setting the type of the member 'return_TestSuite' of a type (line 441)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 441, 8), m_201541, 'return_TestSuite', return_TestSuite_201540)
        
        # Assigning a Call to a Name (line 443):
        
        # Call to TestLoader(...): (line 443)
        # Processing the call keyword arguments (line 443)
        kwargs_201544 = {}
        # Getting the type of 'unittest' (line 443)
        unittest_201542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 443)
        TestLoader_201543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 443, 17), unittest_201542, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 443)
        TestLoader_call_result_201545 = invoke(stypy.reporting.localization.Localization(__file__, 443, 17), TestLoader_201543, *[], **kwargs_201544)
        
        # Assigning a type to the variable 'loader' (line 443)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 443, 8), 'loader', TestLoader_call_result_201545)
        
        # Assigning a Call to a Name (line 444):
        
        # Call to loadTestsFromName(...): (line 444)
        # Processing the call arguments (line 444)
        str_201548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 444, 41), 'str', 'return_TestSuite')
        # Getting the type of 'm' (line 444)
        m_201549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 61), 'm', False)
        # Processing the call keyword arguments (line 444)
        kwargs_201550 = {}
        # Getting the type of 'loader' (line 444)
        loader_201546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromName' of a type (line 444)
        loadTestsFromName_201547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 444, 16), loader_201546, 'loadTestsFromName')
        # Calling loadTestsFromName(args, kwargs) (line 444)
        loadTestsFromName_call_result_201551 = invoke(stypy.reporting.localization.Localization(__file__, 444, 16), loadTestsFromName_201547, *[str_201548, m_201549], **kwargs_201550)
        
        # Assigning a type to the variable 'suite' (line 444)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 444, 8), 'suite', loadTestsFromName_call_result_201551)
        
        # Call to assertIsInstance(...): (line 445)
        # Processing the call arguments (line 445)
        # Getting the type of 'suite' (line 445)
        suite_201554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 30), 'suite', False)
        # Getting the type of 'loader' (line 445)
        loader_201555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 37), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 445)
        suiteClass_201556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 37), loader_201555, 'suiteClass')
        # Processing the call keyword arguments (line 445)
        kwargs_201557 = {}
        # Getting the type of 'self' (line 445)
        self_201552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 8), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 445)
        assertIsInstance_201553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 8), self_201552, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 445)
        assertIsInstance_call_result_201558 = invoke(stypy.reporting.localization.Localization(__file__, 445, 8), assertIsInstance_201553, *[suite_201554, suiteClass_201556], **kwargs_201557)
        
        
        # Call to assertEqual(...): (line 446)
        # Processing the call arguments (line 446)
        
        # Call to list(...): (line 446)
        # Processing the call arguments (line 446)
        # Getting the type of 'suite' (line 446)
        suite_201562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 30), 'suite', False)
        # Processing the call keyword arguments (line 446)
        kwargs_201563 = {}
        # Getting the type of 'list' (line 446)
        list_201561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 25), 'list', False)
        # Calling list(args, kwargs) (line 446)
        list_call_result_201564 = invoke(stypy.reporting.localization.Localization(__file__, 446, 25), list_201561, *[suite_201562], **kwargs_201563)
        
        
        # Obtaining an instance of the builtin type 'list' (line 446)
        list_201565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 446, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 446)
        # Adding element type (line 446)
        # Getting the type of 'testcase_1' (line 446)
        testcase_1_201566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 39), 'testcase_1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 446, 38), list_201565, testcase_1_201566)
        # Adding element type (line 446)
        # Getting the type of 'testcase_2' (line 446)
        testcase_2_201567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 51), 'testcase_2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 446, 38), list_201565, testcase_2_201567)
        
        # Processing the call keyword arguments (line 446)
        kwargs_201568 = {}
        # Getting the type of 'self' (line 446)
        self_201559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 446)
        assertEqual_201560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 8), self_201559, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 446)
        assertEqual_call_result_201569 = invoke(stypy.reporting.localization.Localization(__file__, 446, 8), assertEqual_201560, *[list_call_result_201564, list_201565], **kwargs_201568)
        
        
        # ################# End of 'test_loadTestsFromName__callable__TestSuite(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromName__callable__TestSuite' in the type store
        # Getting the type of 'stypy_return_type' (line 435)
        stypy_return_type_201570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201570)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromName__callable__TestSuite'
        return stypy_return_type_201570


    @norecursion
    def test_loadTestsFromName__callable__TestCase_instance(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromName__callable__TestCase_instance'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromName__callable__TestCase_instance', 450, 4, False)
        # Assigning a type to the variable 'self' (line 451)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 451, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance')
        Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromName__callable__TestCase_instance', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromName__callable__TestCase_instance(...)' code ##################

        
        # Assigning a Call to a Name (line 451):
        
        # Call to ModuleType(...): (line 451)
        # Processing the call arguments (line 451)
        str_201573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 451, 29), 'str', 'm')
        # Processing the call keyword arguments (line 451)
        kwargs_201574 = {}
        # Getting the type of 'types' (line 451)
        types_201571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 451)
        ModuleType_201572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 451, 12), types_201571, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 451)
        ModuleType_call_result_201575 = invoke(stypy.reporting.localization.Localization(__file__, 451, 12), ModuleType_201572, *[str_201573], **kwargs_201574)
        
        # Assigning a type to the variable 'm' (line 451)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 451, 8), 'm', ModuleType_call_result_201575)
        
        # Assigning a Call to a Name (line 452):
        
        # Call to FunctionTestCase(...): (line 452)
        # Processing the call arguments (line 452)

        @norecursion
        def _stypy_temp_lambda_83(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_83'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_83', 452, 47, True)
            # Passed parameters checking function
            _stypy_temp_lambda_83.stypy_localization = localization
            _stypy_temp_lambda_83.stypy_type_of_self = None
            _stypy_temp_lambda_83.stypy_type_store = module_type_store
            _stypy_temp_lambda_83.stypy_function_name = '_stypy_temp_lambda_83'
            _stypy_temp_lambda_83.stypy_param_names_list = []
            _stypy_temp_lambda_83.stypy_varargs_param_name = None
            _stypy_temp_lambda_83.stypy_kwargs_param_name = None
            _stypy_temp_lambda_83.stypy_call_defaults = defaults
            _stypy_temp_lambda_83.stypy_call_varargs = varargs
            _stypy_temp_lambda_83.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_83', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_83', [], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            # Getting the type of 'None' (line 452)
            None_201578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 55), 'None', False)
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 452)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 452, 47), 'stypy_return_type', None_201578)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_83' in the type store
            # Getting the type of 'stypy_return_type' (line 452)
            stypy_return_type_201579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 47), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_201579)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_83'
            return stypy_return_type_201579

        # Assigning a type to the variable '_stypy_temp_lambda_83' (line 452)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 452, 47), '_stypy_temp_lambda_83', _stypy_temp_lambda_83)
        # Getting the type of '_stypy_temp_lambda_83' (line 452)
        _stypy_temp_lambda_83_201580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 47), '_stypy_temp_lambda_83')
        # Processing the call keyword arguments (line 452)
        kwargs_201581 = {}
        # Getting the type of 'unittest' (line 452)
        unittest_201576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 21), 'unittest', False)
        # Obtaining the member 'FunctionTestCase' of a type (line 452)
        FunctionTestCase_201577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 452, 21), unittest_201576, 'FunctionTestCase')
        # Calling FunctionTestCase(args, kwargs) (line 452)
        FunctionTestCase_call_result_201582 = invoke(stypy.reporting.localization.Localization(__file__, 452, 21), FunctionTestCase_201577, *[_stypy_temp_lambda_83_201580], **kwargs_201581)
        
        # Assigning a type to the variable 'testcase_1' (line 452)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 452, 8), 'testcase_1', FunctionTestCase_call_result_201582)

        @norecursion
        def return_TestCase(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'return_TestCase'
            module_type_store = module_type_store.open_function_context('return_TestCase', 453, 8, False)
            
            # Passed parameters checking function
            return_TestCase.stypy_localization = localization
            return_TestCase.stypy_type_of_self = None
            return_TestCase.stypy_type_store = module_type_store
            return_TestCase.stypy_function_name = 'return_TestCase'
            return_TestCase.stypy_param_names_list = []
            return_TestCase.stypy_varargs_param_name = None
            return_TestCase.stypy_kwargs_param_name = None
            return_TestCase.stypy_call_defaults = defaults
            return_TestCase.stypy_call_varargs = varargs
            return_TestCase.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'return_TestCase', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'return_TestCase', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'return_TestCase(...)' code ##################

            # Getting the type of 'testcase_1' (line 454)
            testcase_1_201583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 19), 'testcase_1')
            # Assigning a type to the variable 'stypy_return_type' (line 454)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 454, 12), 'stypy_return_type', testcase_1_201583)
            
            # ################# End of 'return_TestCase(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'return_TestCase' in the type store
            # Getting the type of 'stypy_return_type' (line 453)
            stypy_return_type_201584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_201584)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'return_TestCase'
            return stypy_return_type_201584

        # Assigning a type to the variable 'return_TestCase' (line 453)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 453, 8), 'return_TestCase', return_TestCase)
        
        # Assigning a Name to a Attribute (line 455):
        # Getting the type of 'return_TestCase' (line 455)
        return_TestCase_201585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 28), 'return_TestCase')
        # Getting the type of 'm' (line 455)
        m_201586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 8), 'm')
        # Setting the type of the member 'return_TestCase' of a type (line 455)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 455, 8), m_201586, 'return_TestCase', return_TestCase_201585)
        
        # Assigning a Call to a Name (line 457):
        
        # Call to TestLoader(...): (line 457)
        # Processing the call keyword arguments (line 457)
        kwargs_201589 = {}
        # Getting the type of 'unittest' (line 457)
        unittest_201587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 457)
        TestLoader_201588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 457, 17), unittest_201587, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 457)
        TestLoader_call_result_201590 = invoke(stypy.reporting.localization.Localization(__file__, 457, 17), TestLoader_201588, *[], **kwargs_201589)
        
        # Assigning a type to the variable 'loader' (line 457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 457, 8), 'loader', TestLoader_call_result_201590)
        
        # Assigning a Call to a Name (line 458):
        
        # Call to loadTestsFromName(...): (line 458)
        # Processing the call arguments (line 458)
        str_201593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 458, 41), 'str', 'return_TestCase')
        # Getting the type of 'm' (line 458)
        m_201594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 60), 'm', False)
        # Processing the call keyword arguments (line 458)
        kwargs_201595 = {}
        # Getting the type of 'loader' (line 458)
        loader_201591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromName' of a type (line 458)
        loadTestsFromName_201592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 458, 16), loader_201591, 'loadTestsFromName')
        # Calling loadTestsFromName(args, kwargs) (line 458)
        loadTestsFromName_call_result_201596 = invoke(stypy.reporting.localization.Localization(__file__, 458, 16), loadTestsFromName_201592, *[str_201593, m_201594], **kwargs_201595)
        
        # Assigning a type to the variable 'suite' (line 458)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 458, 8), 'suite', loadTestsFromName_call_result_201596)
        
        # Call to assertIsInstance(...): (line 459)
        # Processing the call arguments (line 459)
        # Getting the type of 'suite' (line 459)
        suite_201599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 30), 'suite', False)
        # Getting the type of 'loader' (line 459)
        loader_201600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 37), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 459)
        suiteClass_201601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 459, 37), loader_201600, 'suiteClass')
        # Processing the call keyword arguments (line 459)
        kwargs_201602 = {}
        # Getting the type of 'self' (line 459)
        self_201597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 8), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 459)
        assertIsInstance_201598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 459, 8), self_201597, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 459)
        assertIsInstance_call_result_201603 = invoke(stypy.reporting.localization.Localization(__file__, 459, 8), assertIsInstance_201598, *[suite_201599, suiteClass_201601], **kwargs_201602)
        
        
        # Call to assertEqual(...): (line 460)
        # Processing the call arguments (line 460)
        
        # Call to list(...): (line 460)
        # Processing the call arguments (line 460)
        # Getting the type of 'suite' (line 460)
        suite_201607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 30), 'suite', False)
        # Processing the call keyword arguments (line 460)
        kwargs_201608 = {}
        # Getting the type of 'list' (line 460)
        list_201606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 25), 'list', False)
        # Calling list(args, kwargs) (line 460)
        list_call_result_201609 = invoke(stypy.reporting.localization.Localization(__file__, 460, 25), list_201606, *[suite_201607], **kwargs_201608)
        
        
        # Obtaining an instance of the builtin type 'list' (line 460)
        list_201610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 460, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 460)
        # Adding element type (line 460)
        # Getting the type of 'testcase_1' (line 460)
        testcase_1_201611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 39), 'testcase_1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 460, 38), list_201610, testcase_1_201611)
        
        # Processing the call keyword arguments (line 460)
        kwargs_201612 = {}
        # Getting the type of 'self' (line 460)
        self_201604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 460)
        assertEqual_201605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 8), self_201604, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 460)
        assertEqual_call_result_201613 = invoke(stypy.reporting.localization.Localization(__file__, 460, 8), assertEqual_201605, *[list_call_result_201609, list_201610], **kwargs_201612)
        
        
        # ################# End of 'test_loadTestsFromName__callable__TestCase_instance(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromName__callable__TestCase_instance' in the type store
        # Getting the type of 'stypy_return_type' (line 450)
        stypy_return_type_201614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201614)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromName__callable__TestCase_instance'
        return stypy_return_type_201614


    @norecursion
    def test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass', 467, 4, False)
        # Assigning a type to the variable 'self' (line 468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 468, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass')
        Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass(...)' code ##################

        # Declaration of the 'SubTestSuite' class
        # Getting the type of 'unittest' (line 468)
        unittest_201615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 27), 'unittest')
        # Obtaining the member 'TestSuite' of a type (line 468)
        TestSuite_201616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 27), unittest_201615, 'TestSuite')

        class SubTestSuite(TestSuite_201616, ):
            pass
        
        # Assigning a type to the variable 'SubTestSuite' (line 468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 468, 8), 'SubTestSuite', SubTestSuite)
        
        # Assigning a Call to a Name (line 470):
        
        # Call to ModuleType(...): (line 470)
        # Processing the call arguments (line 470)
        str_201619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 470, 29), 'str', 'm')
        # Processing the call keyword arguments (line 470)
        kwargs_201620 = {}
        # Getting the type of 'types' (line 470)
        types_201617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 470)
        ModuleType_201618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 470, 12), types_201617, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 470)
        ModuleType_call_result_201621 = invoke(stypy.reporting.localization.Localization(__file__, 470, 12), ModuleType_201618, *[str_201619], **kwargs_201620)
        
        # Assigning a type to the variable 'm' (line 470)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 470, 8), 'm', ModuleType_call_result_201621)
        
        # Assigning a Call to a Name (line 471):
        
        # Call to FunctionTestCase(...): (line 471)
        # Processing the call arguments (line 471)

        @norecursion
        def _stypy_temp_lambda_84(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_84'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_84', 471, 47, True)
            # Passed parameters checking function
            _stypy_temp_lambda_84.stypy_localization = localization
            _stypy_temp_lambda_84.stypy_type_of_self = None
            _stypy_temp_lambda_84.stypy_type_store = module_type_store
            _stypy_temp_lambda_84.stypy_function_name = '_stypy_temp_lambda_84'
            _stypy_temp_lambda_84.stypy_param_names_list = []
            _stypy_temp_lambda_84.stypy_varargs_param_name = None
            _stypy_temp_lambda_84.stypy_kwargs_param_name = None
            _stypy_temp_lambda_84.stypy_call_defaults = defaults
            _stypy_temp_lambda_84.stypy_call_varargs = varargs
            _stypy_temp_lambda_84.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_84', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_84', [], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            # Getting the type of 'None' (line 471)
            None_201624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 55), 'None', False)
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 471)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 471, 47), 'stypy_return_type', None_201624)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_84' in the type store
            # Getting the type of 'stypy_return_type' (line 471)
            stypy_return_type_201625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 47), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_201625)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_84'
            return stypy_return_type_201625

        # Assigning a type to the variable '_stypy_temp_lambda_84' (line 471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 471, 47), '_stypy_temp_lambda_84', _stypy_temp_lambda_84)
        # Getting the type of '_stypy_temp_lambda_84' (line 471)
        _stypy_temp_lambda_84_201626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 47), '_stypy_temp_lambda_84')
        # Processing the call keyword arguments (line 471)
        kwargs_201627 = {}
        # Getting the type of 'unittest' (line 471)
        unittest_201622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 21), 'unittest', False)
        # Obtaining the member 'FunctionTestCase' of a type (line 471)
        FunctionTestCase_201623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 471, 21), unittest_201622, 'FunctionTestCase')
        # Calling FunctionTestCase(args, kwargs) (line 471)
        FunctionTestCase_call_result_201628 = invoke(stypy.reporting.localization.Localization(__file__, 471, 21), FunctionTestCase_201623, *[_stypy_temp_lambda_84_201626], **kwargs_201627)
        
        # Assigning a type to the variable 'testcase_1' (line 471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 471, 8), 'testcase_1', FunctionTestCase_call_result_201628)

        @norecursion
        def return_TestCase(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'return_TestCase'
            module_type_store = module_type_store.open_function_context('return_TestCase', 472, 8, False)
            
            # Passed parameters checking function
            return_TestCase.stypy_localization = localization
            return_TestCase.stypy_type_of_self = None
            return_TestCase.stypy_type_store = module_type_store
            return_TestCase.stypy_function_name = 'return_TestCase'
            return_TestCase.stypy_param_names_list = []
            return_TestCase.stypy_varargs_param_name = None
            return_TestCase.stypy_kwargs_param_name = None
            return_TestCase.stypy_call_defaults = defaults
            return_TestCase.stypy_call_varargs = varargs
            return_TestCase.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'return_TestCase', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'return_TestCase', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'return_TestCase(...)' code ##################

            # Getting the type of 'testcase_1' (line 473)
            testcase_1_201629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 19), 'testcase_1')
            # Assigning a type to the variable 'stypy_return_type' (line 473)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 12), 'stypy_return_type', testcase_1_201629)
            
            # ################# End of 'return_TestCase(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'return_TestCase' in the type store
            # Getting the type of 'stypy_return_type' (line 472)
            stypy_return_type_201630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_201630)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'return_TestCase'
            return stypy_return_type_201630

        # Assigning a type to the variable 'return_TestCase' (line 472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 472, 8), 'return_TestCase', return_TestCase)
        
        # Assigning a Name to a Attribute (line 474):
        # Getting the type of 'return_TestCase' (line 474)
        return_TestCase_201631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 28), 'return_TestCase')
        # Getting the type of 'm' (line 474)
        m_201632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'm')
        # Setting the type of the member 'return_TestCase' of a type (line 474)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 8), m_201632, 'return_TestCase', return_TestCase_201631)
        
        # Assigning a Call to a Name (line 476):
        
        # Call to TestLoader(...): (line 476)
        # Processing the call keyword arguments (line 476)
        kwargs_201635 = {}
        # Getting the type of 'unittest' (line 476)
        unittest_201633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 476)
        TestLoader_201634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 476, 17), unittest_201633, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 476)
        TestLoader_call_result_201636 = invoke(stypy.reporting.localization.Localization(__file__, 476, 17), TestLoader_201634, *[], **kwargs_201635)
        
        # Assigning a type to the variable 'loader' (line 476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 476, 8), 'loader', TestLoader_call_result_201636)
        
        # Assigning a Name to a Attribute (line 477):
        # Getting the type of 'SubTestSuite' (line 477)
        SubTestSuite_201637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 28), 'SubTestSuite')
        # Getting the type of 'loader' (line 477)
        loader_201638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 8), 'loader')
        # Setting the type of the member 'suiteClass' of a type (line 477)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 477, 8), loader_201638, 'suiteClass', SubTestSuite_201637)
        
        # Assigning a Call to a Name (line 478):
        
        # Call to loadTestsFromName(...): (line 478)
        # Processing the call arguments (line 478)
        str_201641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 478, 41), 'str', 'return_TestCase')
        # Getting the type of 'm' (line 478)
        m_201642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 60), 'm', False)
        # Processing the call keyword arguments (line 478)
        kwargs_201643 = {}
        # Getting the type of 'loader' (line 478)
        loader_201639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromName' of a type (line 478)
        loadTestsFromName_201640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 478, 16), loader_201639, 'loadTestsFromName')
        # Calling loadTestsFromName(args, kwargs) (line 478)
        loadTestsFromName_call_result_201644 = invoke(stypy.reporting.localization.Localization(__file__, 478, 16), loadTestsFromName_201640, *[str_201641, m_201642], **kwargs_201643)
        
        # Assigning a type to the variable 'suite' (line 478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 8), 'suite', loadTestsFromName_call_result_201644)
        
        # Call to assertIsInstance(...): (line 479)
        # Processing the call arguments (line 479)
        # Getting the type of 'suite' (line 479)
        suite_201647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 30), 'suite', False)
        # Getting the type of 'loader' (line 479)
        loader_201648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 37), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 479)
        suiteClass_201649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 479, 37), loader_201648, 'suiteClass')
        # Processing the call keyword arguments (line 479)
        kwargs_201650 = {}
        # Getting the type of 'self' (line 479)
        self_201645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 8), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 479)
        assertIsInstance_201646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 479, 8), self_201645, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 479)
        assertIsInstance_call_result_201651 = invoke(stypy.reporting.localization.Localization(__file__, 479, 8), assertIsInstance_201646, *[suite_201647, suiteClass_201649], **kwargs_201650)
        
        
        # Call to assertEqual(...): (line 480)
        # Processing the call arguments (line 480)
        
        # Call to list(...): (line 480)
        # Processing the call arguments (line 480)
        # Getting the type of 'suite' (line 480)
        suite_201655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 30), 'suite', False)
        # Processing the call keyword arguments (line 480)
        kwargs_201656 = {}
        # Getting the type of 'list' (line 480)
        list_201654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 25), 'list', False)
        # Calling list(args, kwargs) (line 480)
        list_call_result_201657 = invoke(stypy.reporting.localization.Localization(__file__, 480, 25), list_201654, *[suite_201655], **kwargs_201656)
        
        
        # Obtaining an instance of the builtin type 'list' (line 480)
        list_201658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 480, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 480)
        # Adding element type (line 480)
        # Getting the type of 'testcase_1' (line 480)
        testcase_1_201659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 39), 'testcase_1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 480, 38), list_201658, testcase_1_201659)
        
        # Processing the call keyword arguments (line 480)
        kwargs_201660 = {}
        # Getting the type of 'self' (line 480)
        self_201652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 480)
        assertEqual_201653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 8), self_201652, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 480)
        assertEqual_call_result_201661 = invoke(stypy.reporting.localization.Localization(__file__, 480, 8), assertEqual_201653, *[list_call_result_201657, list_201658], **kwargs_201660)
        
        
        # ################# End of 'test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass' in the type store
        # Getting the type of 'stypy_return_type' (line 467)
        stypy_return_type_201662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201662)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromName__callable__TestCase_instance_ProperSuiteClass'
        return stypy_return_type_201662


    @norecursion
    def test_loadTestsFromName__relative_testmethod_ProperSuiteClass(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromName__relative_testmethod_ProperSuiteClass'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromName__relative_testmethod_ProperSuiteClass', 487, 4, False)
        # Assigning a type to the variable 'self' (line 488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 488, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromName__relative_testmethod_ProperSuiteClass.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromName__relative_testmethod_ProperSuiteClass.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromName__relative_testmethod_ProperSuiteClass.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromName__relative_testmethod_ProperSuiteClass.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromName__relative_testmethod_ProperSuiteClass')
        Test_TestLoader.test_loadTestsFromName__relative_testmethod_ProperSuiteClass.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromName__relative_testmethod_ProperSuiteClass.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__relative_testmethod_ProperSuiteClass.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__relative_testmethod_ProperSuiteClass.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromName__relative_testmethod_ProperSuiteClass.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromName__relative_testmethod_ProperSuiteClass.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromName__relative_testmethod_ProperSuiteClass.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromName__relative_testmethod_ProperSuiteClass', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromName__relative_testmethod_ProperSuiteClass', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromName__relative_testmethod_ProperSuiteClass(...)' code ##################

        # Declaration of the 'SubTestSuite' class
        # Getting the type of 'unittest' (line 488)
        unittest_201663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 27), 'unittest')
        # Obtaining the member 'TestSuite' of a type (line 488)
        TestSuite_201664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 27), unittest_201663, 'TestSuite')

        class SubTestSuite(TestSuite_201664, ):
            pass
        
        # Assigning a type to the variable 'SubTestSuite' (line 488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 488, 8), 'SubTestSuite', SubTestSuite)
        
        # Assigning a Call to a Name (line 490):
        
        # Call to ModuleType(...): (line 490)
        # Processing the call arguments (line 490)
        str_201667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 490, 29), 'str', 'm')
        # Processing the call keyword arguments (line 490)
        kwargs_201668 = {}
        # Getting the type of 'types' (line 490)
        types_201665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 490)
        ModuleType_201666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 490, 12), types_201665, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 490)
        ModuleType_call_result_201669 = invoke(stypy.reporting.localization.Localization(__file__, 490, 12), ModuleType_201666, *[str_201667], **kwargs_201668)
        
        # Assigning a type to the variable 'm' (line 490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 490, 8), 'm', ModuleType_call_result_201669)
        # Declaration of the 'MyTestCase' class
        # Getting the type of 'unittest' (line 491)
        unittest_201670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 25), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 491)
        TestCase_201671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 25), unittest_201670, 'TestCase')

        class MyTestCase(TestCase_201671, ):

            @norecursion
            def test(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test'
                module_type_store = module_type_store.open_function_context('test', 492, 12, False)
                # Assigning a type to the variable 'self' (line 493)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 493, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                MyTestCase.test.__dict__.__setitem__('stypy_localization', localization)
                MyTestCase.test.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                MyTestCase.test.__dict__.__setitem__('stypy_type_store', module_type_store)
                MyTestCase.test.__dict__.__setitem__('stypy_function_name', 'MyTestCase.test')
                MyTestCase.test.__dict__.__setitem__('stypy_param_names_list', [])
                MyTestCase.test.__dict__.__setitem__('stypy_varargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_kwargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_call_defaults', defaults)
                MyTestCase.test.__dict__.__setitem__('stypy_call_varargs', varargs)
                MyTestCase.test.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                MyTestCase.test.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'MyTestCase.test', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test(...)' code ##################

                pass
                
                # ################# End of 'test(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test' in the type store
                # Getting the type of 'stypy_return_type' (line 492)
                stypy_return_type_201672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_201672)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test'
                return stypy_return_type_201672

        
        # Assigning a type to the variable 'MyTestCase' (line 491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 491, 8), 'MyTestCase', MyTestCase)
        
        # Assigning a Name to a Attribute (line 494):
        # Getting the type of 'MyTestCase' (line 494)
        MyTestCase_201673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 23), 'MyTestCase')
        # Getting the type of 'm' (line 494)
        m_201674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 8), 'm')
        # Setting the type of the member 'testcase_1' of a type (line 494)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 8), m_201674, 'testcase_1', MyTestCase_201673)
        
        # Assigning a Call to a Name (line 496):
        
        # Call to TestLoader(...): (line 496)
        # Processing the call keyword arguments (line 496)
        kwargs_201677 = {}
        # Getting the type of 'unittest' (line 496)
        unittest_201675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 496)
        TestLoader_201676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 17), unittest_201675, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 496)
        TestLoader_call_result_201678 = invoke(stypy.reporting.localization.Localization(__file__, 496, 17), TestLoader_201676, *[], **kwargs_201677)
        
        # Assigning a type to the variable 'loader' (line 496)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 496, 8), 'loader', TestLoader_call_result_201678)
        
        # Assigning a Name to a Attribute (line 497):
        # Getting the type of 'SubTestSuite' (line 497)
        SubTestSuite_201679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 26), 'SubTestSuite')
        # Getting the type of 'loader' (line 497)
        loader_201680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 8), 'loader')
        # Setting the type of the member 'suiteClass' of a type (line 497)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 8), loader_201680, 'suiteClass', SubTestSuite_201679)
        
        # Assigning a Call to a Name (line 498):
        
        # Call to loadTestsFromName(...): (line 498)
        # Processing the call arguments (line 498)
        str_201683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 498, 41), 'str', 'testcase_1.test')
        # Getting the type of 'm' (line 498)
        m_201684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 60), 'm', False)
        # Processing the call keyword arguments (line 498)
        kwargs_201685 = {}
        # Getting the type of 'loader' (line 498)
        loader_201681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromName' of a type (line 498)
        loadTestsFromName_201682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 498, 16), loader_201681, 'loadTestsFromName')
        # Calling loadTestsFromName(args, kwargs) (line 498)
        loadTestsFromName_call_result_201686 = invoke(stypy.reporting.localization.Localization(__file__, 498, 16), loadTestsFromName_201682, *[str_201683, m_201684], **kwargs_201685)
        
        # Assigning a type to the variable 'suite' (line 498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 8), 'suite', loadTestsFromName_call_result_201686)
        
        # Call to assertIsInstance(...): (line 499)
        # Processing the call arguments (line 499)
        # Getting the type of 'suite' (line 499)
        suite_201689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 30), 'suite', False)
        # Getting the type of 'loader' (line 499)
        loader_201690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 37), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 499)
        suiteClass_201691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 499, 37), loader_201690, 'suiteClass')
        # Processing the call keyword arguments (line 499)
        kwargs_201692 = {}
        # Getting the type of 'self' (line 499)
        self_201687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 8), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 499)
        assertIsInstance_201688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 499, 8), self_201687, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 499)
        assertIsInstance_call_result_201693 = invoke(stypy.reporting.localization.Localization(__file__, 499, 8), assertIsInstance_201688, *[suite_201689, suiteClass_201691], **kwargs_201692)
        
        
        # Call to assertEqual(...): (line 501)
        # Processing the call arguments (line 501)
        
        # Call to list(...): (line 501)
        # Processing the call arguments (line 501)
        # Getting the type of 'suite' (line 501)
        suite_201697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 30), 'suite', False)
        # Processing the call keyword arguments (line 501)
        kwargs_201698 = {}
        # Getting the type of 'list' (line 501)
        list_201696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 25), 'list', False)
        # Calling list(args, kwargs) (line 501)
        list_call_result_201699 = invoke(stypy.reporting.localization.Localization(__file__, 501, 25), list_201696, *[suite_201697], **kwargs_201698)
        
        
        # Obtaining an instance of the builtin type 'list' (line 501)
        list_201700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 501, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 501)
        # Adding element type (line 501)
        
        # Call to MyTestCase(...): (line 501)
        # Processing the call arguments (line 501)
        str_201702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 501, 50), 'str', 'test')
        # Processing the call keyword arguments (line 501)
        kwargs_201703 = {}
        # Getting the type of 'MyTestCase' (line 501)
        MyTestCase_201701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 39), 'MyTestCase', False)
        # Calling MyTestCase(args, kwargs) (line 501)
        MyTestCase_call_result_201704 = invoke(stypy.reporting.localization.Localization(__file__, 501, 39), MyTestCase_201701, *[str_201702], **kwargs_201703)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 501, 38), list_201700, MyTestCase_call_result_201704)
        
        # Processing the call keyword arguments (line 501)
        kwargs_201705 = {}
        # Getting the type of 'self' (line 501)
        self_201694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 501)
        assertEqual_201695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 501, 8), self_201694, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 501)
        assertEqual_call_result_201706 = invoke(stypy.reporting.localization.Localization(__file__, 501, 8), assertEqual_201695, *[list_call_result_201699, list_201700], **kwargs_201705)
        
        
        # ################# End of 'test_loadTestsFromName__relative_testmethod_ProperSuiteClass(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromName__relative_testmethod_ProperSuiteClass' in the type store
        # Getting the type of 'stypy_return_type' (line 487)
        stypy_return_type_201707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201707)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromName__relative_testmethod_ProperSuiteClass'
        return stypy_return_type_201707


    @norecursion
    def test_loadTestsFromName__callable__wrong_type(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromName__callable__wrong_type'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromName__callable__wrong_type', 507, 4, False)
        # Assigning a type to the variable 'self' (line 508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromName__callable__wrong_type.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromName__callable__wrong_type.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromName__callable__wrong_type.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromName__callable__wrong_type.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromName__callable__wrong_type')
        Test_TestLoader.test_loadTestsFromName__callable__wrong_type.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromName__callable__wrong_type.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__callable__wrong_type.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__callable__wrong_type.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromName__callable__wrong_type.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromName__callable__wrong_type.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromName__callable__wrong_type.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromName__callable__wrong_type', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromName__callable__wrong_type', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromName__callable__wrong_type(...)' code ##################

        
        # Assigning a Call to a Name (line 508):
        
        # Call to ModuleType(...): (line 508)
        # Processing the call arguments (line 508)
        str_201710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 508, 29), 'str', 'm')
        # Processing the call keyword arguments (line 508)
        kwargs_201711 = {}
        # Getting the type of 'types' (line 508)
        types_201708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 508)
        ModuleType_201709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 508, 12), types_201708, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 508)
        ModuleType_call_result_201712 = invoke(stypy.reporting.localization.Localization(__file__, 508, 12), ModuleType_201709, *[str_201710], **kwargs_201711)
        
        # Assigning a type to the variable 'm' (line 508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'm', ModuleType_call_result_201712)

        @norecursion
        def return_wrong(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'return_wrong'
            module_type_store = module_type_store.open_function_context('return_wrong', 509, 8, False)
            
            # Passed parameters checking function
            return_wrong.stypy_localization = localization
            return_wrong.stypy_type_of_self = None
            return_wrong.stypy_type_store = module_type_store
            return_wrong.stypy_function_name = 'return_wrong'
            return_wrong.stypy_param_names_list = []
            return_wrong.stypy_varargs_param_name = None
            return_wrong.stypy_kwargs_param_name = None
            return_wrong.stypy_call_defaults = defaults
            return_wrong.stypy_call_varargs = varargs
            return_wrong.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'return_wrong', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'return_wrong', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'return_wrong(...)' code ##################

            int_201713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 510, 19), 'int')
            # Assigning a type to the variable 'stypy_return_type' (line 510)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 12), 'stypy_return_type', int_201713)
            
            # ################# End of 'return_wrong(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'return_wrong' in the type store
            # Getting the type of 'stypy_return_type' (line 509)
            stypy_return_type_201714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_201714)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'return_wrong'
            return stypy_return_type_201714

        # Assigning a type to the variable 'return_wrong' (line 509)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 509, 8), 'return_wrong', return_wrong)
        
        # Assigning a Name to a Attribute (line 511):
        # Getting the type of 'return_wrong' (line 511)
        return_wrong_201715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 25), 'return_wrong')
        # Getting the type of 'm' (line 511)
        m_201716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 8), 'm')
        # Setting the type of the member 'return_wrong' of a type (line 511)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 511, 8), m_201716, 'return_wrong', return_wrong_201715)
        
        # Assigning a Call to a Name (line 513):
        
        # Call to TestLoader(...): (line 513)
        # Processing the call keyword arguments (line 513)
        kwargs_201719 = {}
        # Getting the type of 'unittest' (line 513)
        unittest_201717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 513)
        TestLoader_201718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 17), unittest_201717, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 513)
        TestLoader_call_result_201720 = invoke(stypy.reporting.localization.Localization(__file__, 513, 17), TestLoader_201718, *[], **kwargs_201719)
        
        # Assigning a type to the variable 'loader' (line 513)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 513, 8), 'loader', TestLoader_call_result_201720)
        
        
        # SSA begins for try-except statement (line 514)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to loadTestsFromName(...): (line 515)
        # Processing the call arguments (line 515)
        str_201723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 515, 37), 'str', 'return_wrong')
        # Getting the type of 'm' (line 515)
        m_201724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 53), 'm', False)
        # Processing the call keyword arguments (line 515)
        kwargs_201725 = {}
        # Getting the type of 'loader' (line 515)
        loader_201721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 12), 'loader', False)
        # Obtaining the member 'loadTestsFromName' of a type (line 515)
        loadTestsFromName_201722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 515, 12), loader_201721, 'loadTestsFromName')
        # Calling loadTestsFromName(args, kwargs) (line 515)
        loadTestsFromName_call_result_201726 = invoke(stypy.reporting.localization.Localization(__file__, 515, 12), loadTestsFromName_201722, *[str_201723, m_201724], **kwargs_201725)
        
        # SSA branch for the except part of a try statement (line 514)
        # SSA branch for the except 'TypeError' branch of a try statement (line 514)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA branch for the else branch of a try statement (line 514)
        module_type_store.open_ssa_branch('except else')
        
        # Call to fail(...): (line 519)
        # Processing the call arguments (line 519)
        str_201729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 519, 22), 'str', 'TestLoader.loadTestsFromName failed to raise TypeError')
        # Processing the call keyword arguments (line 519)
        kwargs_201730 = {}
        # Getting the type of 'self' (line 519)
        self_201727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 12), 'self', False)
        # Obtaining the member 'fail' of a type (line 519)
        fail_201728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 12), self_201727, 'fail')
        # Calling fail(args, kwargs) (line 519)
        fail_call_result_201731 = invoke(stypy.reporting.localization.Localization(__file__, 519, 12), fail_201728, *[str_201729], **kwargs_201730)
        
        # SSA join for try-except statement (line 514)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_loadTestsFromName__callable__wrong_type(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromName__callable__wrong_type' in the type store
        # Getting the type of 'stypy_return_type' (line 507)
        stypy_return_type_201732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201732)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromName__callable__wrong_type'
        return stypy_return_type_201732


    @norecursion
    def test_loadTestsFromName__module_not_loaded(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromName__module_not_loaded'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromName__module_not_loaded', 523, 4, False)
        # Assigning a type to the variable 'self' (line 524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromName__module_not_loaded.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromName__module_not_loaded.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromName__module_not_loaded.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromName__module_not_loaded.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromName__module_not_loaded')
        Test_TestLoader.test_loadTestsFromName__module_not_loaded.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromName__module_not_loaded.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__module_not_loaded.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__module_not_loaded.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromName__module_not_loaded.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromName__module_not_loaded.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromName__module_not_loaded.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromName__module_not_loaded', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromName__module_not_loaded', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromName__module_not_loaded(...)' code ##################

        
        # Assigning a Str to a Name (line 527):
        str_201733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 527, 22), 'str', 'unittest.test.dummy')
        # Assigning a type to the variable 'module_name' (line 527)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 527, 8), 'module_name', str_201733)
        
        # Call to pop(...): (line 528)
        # Processing the call arguments (line 528)
        # Getting the type of 'module_name' (line 528)
        module_name_201737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 24), 'module_name', False)
        # Getting the type of 'None' (line 528)
        None_201738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 37), 'None', False)
        # Processing the call keyword arguments (line 528)
        kwargs_201739 = {}
        # Getting the type of 'sys' (line 528)
        sys_201734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 8), 'sys', False)
        # Obtaining the member 'modules' of a type (line 528)
        modules_201735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 8), sys_201734, 'modules')
        # Obtaining the member 'pop' of a type (line 528)
        pop_201736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 8), modules_201735, 'pop')
        # Calling pop(args, kwargs) (line 528)
        pop_call_result_201740 = invoke(stypy.reporting.localization.Localization(__file__, 528, 8), pop_201736, *[module_name_201737, None_201738], **kwargs_201739)
        
        
        # Assigning a Call to a Name (line 530):
        
        # Call to TestLoader(...): (line 530)
        # Processing the call keyword arguments (line 530)
        kwargs_201743 = {}
        # Getting the type of 'unittest' (line 530)
        unittest_201741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 530)
        TestLoader_201742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 17), unittest_201741, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 530)
        TestLoader_call_result_201744 = invoke(stypy.reporting.localization.Localization(__file__, 530, 17), TestLoader_201742, *[], **kwargs_201743)
        
        # Assigning a type to the variable 'loader' (line 530)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 530, 8), 'loader', TestLoader_call_result_201744)
        
        # Try-finally block (line 531)
        
        # Assigning a Call to a Name (line 532):
        
        # Call to loadTestsFromName(...): (line 532)
        # Processing the call arguments (line 532)
        # Getting the type of 'module_name' (line 532)
        module_name_201747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 45), 'module_name', False)
        # Processing the call keyword arguments (line 532)
        kwargs_201748 = {}
        # Getting the type of 'loader' (line 532)
        loader_201745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 20), 'loader', False)
        # Obtaining the member 'loadTestsFromName' of a type (line 532)
        loadTestsFromName_201746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 532, 20), loader_201745, 'loadTestsFromName')
        # Calling loadTestsFromName(args, kwargs) (line 532)
        loadTestsFromName_call_result_201749 = invoke(stypy.reporting.localization.Localization(__file__, 532, 20), loadTestsFromName_201746, *[module_name_201747], **kwargs_201748)
        
        # Assigning a type to the variable 'suite' (line 532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 532, 12), 'suite', loadTestsFromName_call_result_201749)
        
        # Call to assertIsInstance(...): (line 534)
        # Processing the call arguments (line 534)
        # Getting the type of 'suite' (line 534)
        suite_201752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 34), 'suite', False)
        # Getting the type of 'loader' (line 534)
        loader_201753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 41), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 534)
        suiteClass_201754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 41), loader_201753, 'suiteClass')
        # Processing the call keyword arguments (line 534)
        kwargs_201755 = {}
        # Getting the type of 'self' (line 534)
        self_201750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 12), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 534)
        assertIsInstance_201751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 12), self_201750, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 534)
        assertIsInstance_call_result_201756 = invoke(stypy.reporting.localization.Localization(__file__, 534, 12), assertIsInstance_201751, *[suite_201752, suiteClass_201754], **kwargs_201755)
        
        
        # Call to assertEqual(...): (line 535)
        # Processing the call arguments (line 535)
        
        # Call to list(...): (line 535)
        # Processing the call arguments (line 535)
        # Getting the type of 'suite' (line 535)
        suite_201760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 34), 'suite', False)
        # Processing the call keyword arguments (line 535)
        kwargs_201761 = {}
        # Getting the type of 'list' (line 535)
        list_201759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 29), 'list', False)
        # Calling list(args, kwargs) (line 535)
        list_call_result_201762 = invoke(stypy.reporting.localization.Localization(__file__, 535, 29), list_201759, *[suite_201760], **kwargs_201761)
        
        
        # Obtaining an instance of the builtin type 'list' (line 535)
        list_201763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 535)
        
        # Processing the call keyword arguments (line 535)
        kwargs_201764 = {}
        # Getting the type of 'self' (line 535)
        self_201757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 12), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 535)
        assertEqual_201758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 12), self_201757, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 535)
        assertEqual_call_result_201765 = invoke(stypy.reporting.localization.Localization(__file__, 535, 12), assertEqual_201758, *[list_call_result_201762, list_201763], **kwargs_201764)
        
        
        # Call to assertIn(...): (line 538)
        # Processing the call arguments (line 538)
        # Getting the type of 'module_name' (line 538)
        module_name_201768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 26), 'module_name', False)
        # Getting the type of 'sys' (line 538)
        sys_201769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 39), 'sys', False)
        # Obtaining the member 'modules' of a type (line 538)
        modules_201770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 39), sys_201769, 'modules')
        # Processing the call keyword arguments (line 538)
        kwargs_201771 = {}
        # Getting the type of 'self' (line 538)
        self_201766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 12), 'self', False)
        # Obtaining the member 'assertIn' of a type (line 538)
        assertIn_201767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 12), self_201766, 'assertIn')
        # Calling assertIn(args, kwargs) (line 538)
        assertIn_call_result_201772 = invoke(stypy.reporting.localization.Localization(__file__, 538, 12), assertIn_201767, *[module_name_201768, modules_201770], **kwargs_201771)
        
        
        # finally branch of the try-finally block (line 531)
        
        
        # Getting the type of 'module_name' (line 540)
        module_name_201773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 15), 'module_name')
        # Getting the type of 'sys' (line 540)
        sys_201774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 30), 'sys')
        # Obtaining the member 'modules' of a type (line 540)
        modules_201775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 540, 30), sys_201774, 'modules')
        # Applying the binary operator 'in' (line 540)
        result_contains_201776 = python_operator(stypy.reporting.localization.Localization(__file__, 540, 15), 'in', module_name_201773, modules_201775)
        
        # Testing the type of an if condition (line 540)
        if_condition_201777 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 540, 12), result_contains_201776)
        # Assigning a type to the variable 'if_condition_201777' (line 540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 540, 12), 'if_condition_201777', if_condition_201777)
        # SSA begins for if statement (line 540)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Deleting a member
        # Getting the type of 'sys' (line 541)
        sys_201778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 20), 'sys')
        # Obtaining the member 'modules' of a type (line 541)
        modules_201779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 20), sys_201778, 'modules')
        
        # Obtaining the type of the subscript
        # Getting the type of 'module_name' (line 541)
        module_name_201780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 32), 'module_name')
        # Getting the type of 'sys' (line 541)
        sys_201781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 20), 'sys')
        # Obtaining the member 'modules' of a type (line 541)
        modules_201782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 20), sys_201781, 'modules')
        # Obtaining the member '__getitem__' of a type (line 541)
        getitem___201783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 20), modules_201782, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 541)
        subscript_call_result_201784 = invoke(stypy.reporting.localization.Localization(__file__, 541, 20), getitem___201783, module_name_201780)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 541, 16), modules_201779, subscript_call_result_201784)
        # SSA join for if statement (line 540)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # ################# End of 'test_loadTestsFromName__module_not_loaded(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromName__module_not_loaded' in the type store
        # Getting the type of 'stypy_return_type' (line 523)
        stypy_return_type_201785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201785)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromName__module_not_loaded'
        return stypy_return_type_201785


    @norecursion
    def test_loadTestsFromNames__empty_name_list(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromNames__empty_name_list'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromNames__empty_name_list', 553, 4, False)
        # Assigning a type to the variable 'self' (line 554)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 554, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromNames__empty_name_list.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromNames__empty_name_list.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromNames__empty_name_list.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromNames__empty_name_list.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromNames__empty_name_list')
        Test_TestLoader.test_loadTestsFromNames__empty_name_list.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromNames__empty_name_list.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__empty_name_list.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__empty_name_list.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromNames__empty_name_list.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromNames__empty_name_list.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromNames__empty_name_list.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromNames__empty_name_list', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromNames__empty_name_list', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromNames__empty_name_list(...)' code ##################

        
        # Assigning a Call to a Name (line 554):
        
        # Call to TestLoader(...): (line 554)
        # Processing the call keyword arguments (line 554)
        kwargs_201788 = {}
        # Getting the type of 'unittest' (line 554)
        unittest_201786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 554)
        TestLoader_201787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 554, 17), unittest_201786, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 554)
        TestLoader_call_result_201789 = invoke(stypy.reporting.localization.Localization(__file__, 554, 17), TestLoader_201787, *[], **kwargs_201788)
        
        # Assigning a type to the variable 'loader' (line 554)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 554, 8), 'loader', TestLoader_call_result_201789)
        
        # Assigning a Call to a Name (line 556):
        
        # Call to loadTestsFromNames(...): (line 556)
        # Processing the call arguments (line 556)
        
        # Obtaining an instance of the builtin type 'list' (line 556)
        list_201792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 556, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 556)
        
        # Processing the call keyword arguments (line 556)
        kwargs_201793 = {}
        # Getting the type of 'loader' (line 556)
        loader_201790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 556)
        loadTestsFromNames_201791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 16), loader_201790, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 556)
        loadTestsFromNames_call_result_201794 = invoke(stypy.reporting.localization.Localization(__file__, 556, 16), loadTestsFromNames_201791, *[list_201792], **kwargs_201793)
        
        # Assigning a type to the variable 'suite' (line 556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 8), 'suite', loadTestsFromNames_call_result_201794)
        
        # Call to assertIsInstance(...): (line 557)
        # Processing the call arguments (line 557)
        # Getting the type of 'suite' (line 557)
        suite_201797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 30), 'suite', False)
        # Getting the type of 'loader' (line 557)
        loader_201798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 37), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 557)
        suiteClass_201799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 557, 37), loader_201798, 'suiteClass')
        # Processing the call keyword arguments (line 557)
        kwargs_201800 = {}
        # Getting the type of 'self' (line 557)
        self_201795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 8), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 557)
        assertIsInstance_201796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 557, 8), self_201795, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 557)
        assertIsInstance_call_result_201801 = invoke(stypy.reporting.localization.Localization(__file__, 557, 8), assertIsInstance_201796, *[suite_201797, suiteClass_201799], **kwargs_201800)
        
        
        # Call to assertEqual(...): (line 558)
        # Processing the call arguments (line 558)
        
        # Call to list(...): (line 558)
        # Processing the call arguments (line 558)
        # Getting the type of 'suite' (line 558)
        suite_201805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 30), 'suite', False)
        # Processing the call keyword arguments (line 558)
        kwargs_201806 = {}
        # Getting the type of 'list' (line 558)
        list_201804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 25), 'list', False)
        # Calling list(args, kwargs) (line 558)
        list_call_result_201807 = invoke(stypy.reporting.localization.Localization(__file__, 558, 25), list_201804, *[suite_201805], **kwargs_201806)
        
        
        # Obtaining an instance of the builtin type 'list' (line 558)
        list_201808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 558, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 558)
        
        # Processing the call keyword arguments (line 558)
        kwargs_201809 = {}
        # Getting the type of 'self' (line 558)
        self_201802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 558)
        assertEqual_201803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 558, 8), self_201802, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 558)
        assertEqual_call_result_201810 = invoke(stypy.reporting.localization.Localization(__file__, 558, 8), assertEqual_201803, *[list_call_result_201807, list_201808], **kwargs_201809)
        
        
        # ################# End of 'test_loadTestsFromNames__empty_name_list(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromNames__empty_name_list' in the type store
        # Getting the type of 'stypy_return_type' (line 553)
        stypy_return_type_201811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201811)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromNames__empty_name_list'
        return stypy_return_type_201811


    @norecursion
    def test_loadTestsFromNames__relative_empty_name_list(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromNames__relative_empty_name_list'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromNames__relative_empty_name_list', 568, 4, False)
        # Assigning a type to the variable 'self' (line 569)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 569, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromNames__relative_empty_name_list.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromNames__relative_empty_name_list.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromNames__relative_empty_name_list.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromNames__relative_empty_name_list.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromNames__relative_empty_name_list')
        Test_TestLoader.test_loadTestsFromNames__relative_empty_name_list.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromNames__relative_empty_name_list.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__relative_empty_name_list.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__relative_empty_name_list.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromNames__relative_empty_name_list.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromNames__relative_empty_name_list.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromNames__relative_empty_name_list.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromNames__relative_empty_name_list', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromNames__relative_empty_name_list', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromNames__relative_empty_name_list(...)' code ##################

        
        # Assigning a Call to a Name (line 569):
        
        # Call to TestLoader(...): (line 569)
        # Processing the call keyword arguments (line 569)
        kwargs_201814 = {}
        # Getting the type of 'unittest' (line 569)
        unittest_201812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 569)
        TestLoader_201813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 17), unittest_201812, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 569)
        TestLoader_call_result_201815 = invoke(stypy.reporting.localization.Localization(__file__, 569, 17), TestLoader_201813, *[], **kwargs_201814)
        
        # Assigning a type to the variable 'loader' (line 569)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 569, 8), 'loader', TestLoader_call_result_201815)
        
        # Assigning a Call to a Name (line 571):
        
        # Call to loadTestsFromNames(...): (line 571)
        # Processing the call arguments (line 571)
        
        # Obtaining an instance of the builtin type 'list' (line 571)
        list_201818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 571, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 571)
        
        # Getting the type of 'unittest' (line 571)
        unittest_201819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 46), 'unittest', False)
        # Processing the call keyword arguments (line 571)
        kwargs_201820 = {}
        # Getting the type of 'loader' (line 571)
        loader_201816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 571)
        loadTestsFromNames_201817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 571, 16), loader_201816, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 571)
        loadTestsFromNames_call_result_201821 = invoke(stypy.reporting.localization.Localization(__file__, 571, 16), loadTestsFromNames_201817, *[list_201818, unittest_201819], **kwargs_201820)
        
        # Assigning a type to the variable 'suite' (line 571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 8), 'suite', loadTestsFromNames_call_result_201821)
        
        # Call to assertIsInstance(...): (line 572)
        # Processing the call arguments (line 572)
        # Getting the type of 'suite' (line 572)
        suite_201824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 30), 'suite', False)
        # Getting the type of 'loader' (line 572)
        loader_201825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 37), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 572)
        suiteClass_201826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 37), loader_201825, 'suiteClass')
        # Processing the call keyword arguments (line 572)
        kwargs_201827 = {}
        # Getting the type of 'self' (line 572)
        self_201822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 8), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 572)
        assertIsInstance_201823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 8), self_201822, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 572)
        assertIsInstance_call_result_201828 = invoke(stypy.reporting.localization.Localization(__file__, 572, 8), assertIsInstance_201823, *[suite_201824, suiteClass_201826], **kwargs_201827)
        
        
        # Call to assertEqual(...): (line 573)
        # Processing the call arguments (line 573)
        
        # Call to list(...): (line 573)
        # Processing the call arguments (line 573)
        # Getting the type of 'suite' (line 573)
        suite_201832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 30), 'suite', False)
        # Processing the call keyword arguments (line 573)
        kwargs_201833 = {}
        # Getting the type of 'list' (line 573)
        list_201831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 25), 'list', False)
        # Calling list(args, kwargs) (line 573)
        list_call_result_201834 = invoke(stypy.reporting.localization.Localization(__file__, 573, 25), list_201831, *[suite_201832], **kwargs_201833)
        
        
        # Obtaining an instance of the builtin type 'list' (line 573)
        list_201835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 573, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 573)
        
        # Processing the call keyword arguments (line 573)
        kwargs_201836 = {}
        # Getting the type of 'self' (line 573)
        self_201829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 573)
        assertEqual_201830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 573, 8), self_201829, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 573)
        assertEqual_call_result_201837 = invoke(stypy.reporting.localization.Localization(__file__, 573, 8), assertEqual_201830, *[list_call_result_201834, list_201835], **kwargs_201836)
        
        
        # ################# End of 'test_loadTestsFromNames__relative_empty_name_list(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromNames__relative_empty_name_list' in the type store
        # Getting the type of 'stypy_return_type' (line 568)
        stypy_return_type_201838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201838)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromNames__relative_empty_name_list'
        return stypy_return_type_201838


    @norecursion
    def test_loadTestsFromNames__empty_name(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromNames__empty_name'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromNames__empty_name', 581, 4, False)
        # Assigning a type to the variable 'self' (line 582)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 582, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromNames__empty_name.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromNames__empty_name.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromNames__empty_name.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromNames__empty_name.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromNames__empty_name')
        Test_TestLoader.test_loadTestsFromNames__empty_name.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromNames__empty_name.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__empty_name.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__empty_name.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromNames__empty_name.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromNames__empty_name.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromNames__empty_name.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromNames__empty_name', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromNames__empty_name', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromNames__empty_name(...)' code ##################

        
        # Assigning a Call to a Name (line 582):
        
        # Call to TestLoader(...): (line 582)
        # Processing the call keyword arguments (line 582)
        kwargs_201841 = {}
        # Getting the type of 'unittest' (line 582)
        unittest_201839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 582)
        TestLoader_201840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 17), unittest_201839, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 582)
        TestLoader_call_result_201842 = invoke(stypy.reporting.localization.Localization(__file__, 582, 17), TestLoader_201840, *[], **kwargs_201841)
        
        # Assigning a type to the variable 'loader' (line 582)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 582, 8), 'loader', TestLoader_call_result_201842)
        
        
        # SSA begins for try-except statement (line 584)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to loadTestsFromNames(...): (line 585)
        # Processing the call arguments (line 585)
        
        # Obtaining an instance of the builtin type 'list' (line 585)
        list_201845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 585, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 585)
        # Adding element type (line 585)
        str_201846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 585, 39), 'str', '')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 585, 38), list_201845, str_201846)
        
        # Processing the call keyword arguments (line 585)
        kwargs_201847 = {}
        # Getting the type of 'loader' (line 585)
        loader_201843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 12), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 585)
        loadTestsFromNames_201844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 585, 12), loader_201843, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 585)
        loadTestsFromNames_call_result_201848 = invoke(stypy.reporting.localization.Localization(__file__, 585, 12), loadTestsFromNames_201844, *[list_201845], **kwargs_201847)
        
        # SSA branch for the except part of a try statement (line 584)
        # SSA branch for the except 'ValueError' branch of a try statement (line 584)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'ValueError' (line 586)
        ValueError_201849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 15), 'ValueError')
        # Assigning a type to the variable 'e' (line 586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 586, 8), 'e', ValueError_201849)
        
        # Call to assertEqual(...): (line 587)
        # Processing the call arguments (line 587)
        
        # Call to str(...): (line 587)
        # Processing the call arguments (line 587)
        # Getting the type of 'e' (line 587)
        e_201853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 33), 'e', False)
        # Processing the call keyword arguments (line 587)
        kwargs_201854 = {}
        # Getting the type of 'str' (line 587)
        str_201852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 29), 'str', False)
        # Calling str(args, kwargs) (line 587)
        str_call_result_201855 = invoke(stypy.reporting.localization.Localization(__file__, 587, 29), str_201852, *[e_201853], **kwargs_201854)
        
        str_201856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 587, 37), 'str', 'Empty module name')
        # Processing the call keyword arguments (line 587)
        kwargs_201857 = {}
        # Getting the type of 'self' (line 587)
        self_201850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 12), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 587)
        assertEqual_201851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 587, 12), self_201850, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 587)
        assertEqual_call_result_201858 = invoke(stypy.reporting.localization.Localization(__file__, 587, 12), assertEqual_201851, *[str_call_result_201855, str_201856], **kwargs_201857)
        
        # SSA branch for the else branch of a try statement (line 584)
        module_type_store.open_ssa_branch('except else')
        
        # Call to fail(...): (line 589)
        # Processing the call arguments (line 589)
        str_201861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 589, 22), 'str', 'TestLoader.loadTestsFromNames failed to raise ValueError')
        # Processing the call keyword arguments (line 589)
        kwargs_201862 = {}
        # Getting the type of 'self' (line 589)
        self_201859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 12), 'self', False)
        # Obtaining the member 'fail' of a type (line 589)
        fail_201860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 12), self_201859, 'fail')
        # Calling fail(args, kwargs) (line 589)
        fail_call_result_201863 = invoke(stypy.reporting.localization.Localization(__file__, 589, 12), fail_201860, *[str_201861], **kwargs_201862)
        
        # SSA join for try-except statement (line 584)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_loadTestsFromNames__empty_name(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromNames__empty_name' in the type store
        # Getting the type of 'stypy_return_type' (line 581)
        stypy_return_type_201864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201864)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromNames__empty_name'
        return stypy_return_type_201864


    @norecursion
    def test_loadTestsFromNames__malformed_name(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromNames__malformed_name'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromNames__malformed_name', 597, 4, False)
        # Assigning a type to the variable 'self' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromNames__malformed_name.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromNames__malformed_name.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromNames__malformed_name.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromNames__malformed_name.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromNames__malformed_name')
        Test_TestLoader.test_loadTestsFromNames__malformed_name.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromNames__malformed_name.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__malformed_name.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__malformed_name.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromNames__malformed_name.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromNames__malformed_name.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromNames__malformed_name.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromNames__malformed_name', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromNames__malformed_name', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromNames__malformed_name(...)' code ##################

        
        # Assigning a Call to a Name (line 598):
        
        # Call to TestLoader(...): (line 598)
        # Processing the call keyword arguments (line 598)
        kwargs_201867 = {}
        # Getting the type of 'unittest' (line 598)
        unittest_201865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 598)
        TestLoader_201866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 17), unittest_201865, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 598)
        TestLoader_call_result_201868 = invoke(stypy.reporting.localization.Localization(__file__, 598, 17), TestLoader_201866, *[], **kwargs_201867)
        
        # Assigning a type to the variable 'loader' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 8), 'loader', TestLoader_call_result_201868)
        
        
        # SSA begins for try-except statement (line 601)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to loadTestsFromNames(...): (line 602)
        # Processing the call arguments (line 602)
        
        # Obtaining an instance of the builtin type 'list' (line 602)
        list_201871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 602)
        # Adding element type (line 602)
        str_201872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 39), 'str', 'abc () //')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 602, 38), list_201871, str_201872)
        
        # Processing the call keyword arguments (line 602)
        kwargs_201873 = {}
        # Getting the type of 'loader' (line 602)
        loader_201869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 12), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 602)
        loadTestsFromNames_201870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 12), loader_201869, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 602)
        loadTestsFromNames_call_result_201874 = invoke(stypy.reporting.localization.Localization(__file__, 602, 12), loadTestsFromNames_201870, *[list_201871], **kwargs_201873)
        
        # SSA branch for the except part of a try statement (line 601)
        # SSA branch for the except 'ValueError' branch of a try statement (line 601)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA branch for the except 'ImportError' branch of a try statement (line 601)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA branch for the else branch of a try statement (line 601)
        module_type_store.open_ssa_branch('except else')
        
        # Call to fail(...): (line 608)
        # Processing the call arguments (line 608)
        str_201877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 608, 22), 'str', 'TestLoader.loadTestsFromNames failed to raise ValueError')
        # Processing the call keyword arguments (line 608)
        kwargs_201878 = {}
        # Getting the type of 'self' (line 608)
        self_201875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 12), 'self', False)
        # Obtaining the member 'fail' of a type (line 608)
        fail_201876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 608, 12), self_201875, 'fail')
        # Calling fail(args, kwargs) (line 608)
        fail_call_result_201879 = invoke(stypy.reporting.localization.Localization(__file__, 608, 12), fail_201876, *[str_201877], **kwargs_201878)
        
        # SSA join for try-except statement (line 601)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_loadTestsFromNames__malformed_name(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromNames__malformed_name' in the type store
        # Getting the type of 'stypy_return_type' (line 597)
        stypy_return_type_201880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201880)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromNames__malformed_name'
        return stypy_return_type_201880


    @norecursion
    def test_loadTestsFromNames__unknown_module_name(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromNames__unknown_module_name'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromNames__unknown_module_name', 616, 4, False)
        # Assigning a type to the variable 'self' (line 617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 617, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromNames__unknown_module_name.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromNames__unknown_module_name.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromNames__unknown_module_name.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromNames__unknown_module_name.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromNames__unknown_module_name')
        Test_TestLoader.test_loadTestsFromNames__unknown_module_name.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromNames__unknown_module_name.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__unknown_module_name.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__unknown_module_name.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromNames__unknown_module_name.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromNames__unknown_module_name.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromNames__unknown_module_name.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromNames__unknown_module_name', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromNames__unknown_module_name', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromNames__unknown_module_name(...)' code ##################

        
        # Assigning a Call to a Name (line 617):
        
        # Call to TestLoader(...): (line 617)
        # Processing the call keyword arguments (line 617)
        kwargs_201883 = {}
        # Getting the type of 'unittest' (line 617)
        unittest_201881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 617)
        TestLoader_201882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 17), unittest_201881, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 617)
        TestLoader_call_result_201884 = invoke(stypy.reporting.localization.Localization(__file__, 617, 17), TestLoader_201882, *[], **kwargs_201883)
        
        # Assigning a type to the variable 'loader' (line 617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 617, 8), 'loader', TestLoader_call_result_201884)
        
        
        # SSA begins for try-except statement (line 619)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to loadTestsFromNames(...): (line 620)
        # Processing the call arguments (line 620)
        
        # Obtaining an instance of the builtin type 'list' (line 620)
        list_201887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 620, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 620)
        # Adding element type (line 620)
        str_201888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 620, 39), 'str', 'sdasfasfasdf')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 620, 38), list_201887, str_201888)
        
        # Processing the call keyword arguments (line 620)
        kwargs_201889 = {}
        # Getting the type of 'loader' (line 620)
        loader_201885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 12), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 620)
        loadTestsFromNames_201886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 620, 12), loader_201885, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 620)
        loadTestsFromNames_call_result_201890 = invoke(stypy.reporting.localization.Localization(__file__, 620, 12), loadTestsFromNames_201886, *[list_201887], **kwargs_201889)
        
        # SSA branch for the except part of a try statement (line 619)
        # SSA branch for the except 'ImportError' branch of a try statement (line 619)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'ImportError' (line 621)
        ImportError_201891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 15), 'ImportError')
        # Assigning a type to the variable 'e' (line 621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 621, 8), 'e', ImportError_201891)
        
        # Call to assertEqual(...): (line 622)
        # Processing the call arguments (line 622)
        
        # Call to str(...): (line 622)
        # Processing the call arguments (line 622)
        # Getting the type of 'e' (line 622)
        e_201895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 33), 'e', False)
        # Processing the call keyword arguments (line 622)
        kwargs_201896 = {}
        # Getting the type of 'str' (line 622)
        str_201894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 29), 'str', False)
        # Calling str(args, kwargs) (line 622)
        str_call_result_201897 = invoke(stypy.reporting.localization.Localization(__file__, 622, 29), str_201894, *[e_201895], **kwargs_201896)
        
        str_201898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 622, 37), 'str', 'No module named sdasfasfasdf')
        # Processing the call keyword arguments (line 622)
        kwargs_201899 = {}
        # Getting the type of 'self' (line 622)
        self_201892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 12), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 622)
        assertEqual_201893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 622, 12), self_201892, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 622)
        assertEqual_call_result_201900 = invoke(stypy.reporting.localization.Localization(__file__, 622, 12), assertEqual_201893, *[str_call_result_201897, str_201898], **kwargs_201899)
        
        # SSA branch for the else branch of a try statement (line 619)
        module_type_store.open_ssa_branch('except else')
        
        # Call to fail(...): (line 624)
        # Processing the call arguments (line 624)
        str_201903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 624, 22), 'str', 'TestLoader.loadTestsFromNames failed to raise ImportError')
        # Processing the call keyword arguments (line 624)
        kwargs_201904 = {}
        # Getting the type of 'self' (line 624)
        self_201901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 12), 'self', False)
        # Obtaining the member 'fail' of a type (line 624)
        fail_201902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 624, 12), self_201901, 'fail')
        # Calling fail(args, kwargs) (line 624)
        fail_call_result_201905 = invoke(stypy.reporting.localization.Localization(__file__, 624, 12), fail_201902, *[str_201903], **kwargs_201904)
        
        # SSA join for try-except statement (line 619)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_loadTestsFromNames__unknown_module_name(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromNames__unknown_module_name' in the type store
        # Getting the type of 'stypy_return_type' (line 616)
        stypy_return_type_201906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201906)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromNames__unknown_module_name'
        return stypy_return_type_201906


    @norecursion
    def test_loadTestsFromNames__unknown_attr_name(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromNames__unknown_attr_name'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromNames__unknown_attr_name', 632, 4, False)
        # Assigning a type to the variable 'self' (line 633)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 633, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromNames__unknown_attr_name.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromNames__unknown_attr_name.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromNames__unknown_attr_name.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromNames__unknown_attr_name.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromNames__unknown_attr_name')
        Test_TestLoader.test_loadTestsFromNames__unknown_attr_name.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromNames__unknown_attr_name.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__unknown_attr_name.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__unknown_attr_name.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromNames__unknown_attr_name.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromNames__unknown_attr_name.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromNames__unknown_attr_name.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromNames__unknown_attr_name', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromNames__unknown_attr_name', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromNames__unknown_attr_name(...)' code ##################

        
        # Assigning a Call to a Name (line 633):
        
        # Call to TestLoader(...): (line 633)
        # Processing the call keyword arguments (line 633)
        kwargs_201909 = {}
        # Getting the type of 'unittest' (line 633)
        unittest_201907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 633)
        TestLoader_201908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 633, 17), unittest_201907, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 633)
        TestLoader_call_result_201910 = invoke(stypy.reporting.localization.Localization(__file__, 633, 17), TestLoader_201908, *[], **kwargs_201909)
        
        # Assigning a type to the variable 'loader' (line 633)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 633, 8), 'loader', TestLoader_call_result_201910)
        
        
        # SSA begins for try-except statement (line 635)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to loadTestsFromNames(...): (line 636)
        # Processing the call arguments (line 636)
        
        # Obtaining an instance of the builtin type 'list' (line 636)
        list_201913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 636)
        # Adding element type (line 636)
        str_201914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 39), 'str', 'unittest.sdasfasfasdf')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 636, 38), list_201913, str_201914)
        # Adding element type (line 636)
        str_201915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 64), 'str', 'unittest')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 636, 38), list_201913, str_201915)
        
        # Processing the call keyword arguments (line 636)
        kwargs_201916 = {}
        # Getting the type of 'loader' (line 636)
        loader_201911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 12), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 636)
        loadTestsFromNames_201912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 636, 12), loader_201911, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 636)
        loadTestsFromNames_call_result_201917 = invoke(stypy.reporting.localization.Localization(__file__, 636, 12), loadTestsFromNames_201912, *[list_201913], **kwargs_201916)
        
        # SSA branch for the except part of a try statement (line 635)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 635)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'AttributeError' (line 637)
        AttributeError_201918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 15), 'AttributeError')
        # Assigning a type to the variable 'e' (line 637)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 637, 8), 'e', AttributeError_201918)
        
        # Call to assertEqual(...): (line 638)
        # Processing the call arguments (line 638)
        
        # Call to str(...): (line 638)
        # Processing the call arguments (line 638)
        # Getting the type of 'e' (line 638)
        e_201922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 33), 'e', False)
        # Processing the call keyword arguments (line 638)
        kwargs_201923 = {}
        # Getting the type of 'str' (line 638)
        str_201921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 29), 'str', False)
        # Calling str(args, kwargs) (line 638)
        str_call_result_201924 = invoke(stypy.reporting.localization.Localization(__file__, 638, 29), str_201921, *[e_201922], **kwargs_201923)
        
        str_201925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 638, 37), 'str', "'module' object has no attribute 'sdasfasfasdf'")
        # Processing the call keyword arguments (line 638)
        kwargs_201926 = {}
        # Getting the type of 'self' (line 638)
        self_201919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 12), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 638)
        assertEqual_201920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 12), self_201919, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 638)
        assertEqual_call_result_201927 = invoke(stypy.reporting.localization.Localization(__file__, 638, 12), assertEqual_201920, *[str_call_result_201924, str_201925], **kwargs_201926)
        
        # SSA branch for the else branch of a try statement (line 635)
        module_type_store.open_ssa_branch('except else')
        
        # Call to fail(...): (line 640)
        # Processing the call arguments (line 640)
        str_201930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 22), 'str', 'TestLoader.loadTestsFromNames failed to raise AttributeError')
        # Processing the call keyword arguments (line 640)
        kwargs_201931 = {}
        # Getting the type of 'self' (line 640)
        self_201928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 12), 'self', False)
        # Obtaining the member 'fail' of a type (line 640)
        fail_201929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 12), self_201928, 'fail')
        # Calling fail(args, kwargs) (line 640)
        fail_call_result_201932 = invoke(stypy.reporting.localization.Localization(__file__, 640, 12), fail_201929, *[str_201930], **kwargs_201931)
        
        # SSA join for try-except statement (line 635)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_loadTestsFromNames__unknown_attr_name(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromNames__unknown_attr_name' in the type store
        # Getting the type of 'stypy_return_type' (line 632)
        stypy_return_type_201933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201933)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromNames__unknown_attr_name'
        return stypy_return_type_201933


    @norecursion
    def test_loadTestsFromNames__unknown_name_relative_1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromNames__unknown_name_relative_1'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromNames__unknown_name_relative_1', 651, 4, False)
        # Assigning a type to the variable 'self' (line 652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_1.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_1.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_1.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_1')
        Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_1.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_1.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_1.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_1.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_1.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_1', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromNames__unknown_name_relative_1', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromNames__unknown_name_relative_1(...)' code ##################

        
        # Assigning a Call to a Name (line 652):
        
        # Call to TestLoader(...): (line 652)
        # Processing the call keyword arguments (line 652)
        kwargs_201936 = {}
        # Getting the type of 'unittest' (line 652)
        unittest_201934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 652)
        TestLoader_201935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 17), unittest_201934, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 652)
        TestLoader_call_result_201937 = invoke(stypy.reporting.localization.Localization(__file__, 652, 17), TestLoader_201935, *[], **kwargs_201936)
        
        # Assigning a type to the variable 'loader' (line 652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 8), 'loader', TestLoader_call_result_201937)
        
        
        # SSA begins for try-except statement (line 654)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to loadTestsFromNames(...): (line 655)
        # Processing the call arguments (line 655)
        
        # Obtaining an instance of the builtin type 'list' (line 655)
        list_201940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 655, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 655)
        # Adding element type (line 655)
        str_201941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 655, 39), 'str', 'sdasfasfasdf')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 655, 38), list_201940, str_201941)
        
        # Getting the type of 'unittest' (line 655)
        unittest_201942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 56), 'unittest', False)
        # Processing the call keyword arguments (line 655)
        kwargs_201943 = {}
        # Getting the type of 'loader' (line 655)
        loader_201938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 12), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 655)
        loadTestsFromNames_201939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 12), loader_201938, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 655)
        loadTestsFromNames_call_result_201944 = invoke(stypy.reporting.localization.Localization(__file__, 655, 12), loadTestsFromNames_201939, *[list_201940, unittest_201942], **kwargs_201943)
        
        # SSA branch for the except part of a try statement (line 654)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 654)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'AttributeError' (line 656)
        AttributeError_201945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 15), 'AttributeError')
        # Assigning a type to the variable 'e' (line 656)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 656, 8), 'e', AttributeError_201945)
        
        # Call to assertEqual(...): (line 657)
        # Processing the call arguments (line 657)
        
        # Call to str(...): (line 657)
        # Processing the call arguments (line 657)
        # Getting the type of 'e' (line 657)
        e_201949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 33), 'e', False)
        # Processing the call keyword arguments (line 657)
        kwargs_201950 = {}
        # Getting the type of 'str' (line 657)
        str_201948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 29), 'str', False)
        # Calling str(args, kwargs) (line 657)
        str_call_result_201951 = invoke(stypy.reporting.localization.Localization(__file__, 657, 29), str_201948, *[e_201949], **kwargs_201950)
        
        str_201952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 657, 37), 'str', "'module' object has no attribute 'sdasfasfasdf'")
        # Processing the call keyword arguments (line 657)
        kwargs_201953 = {}
        # Getting the type of 'self' (line 657)
        self_201946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 12), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 657)
        assertEqual_201947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 657, 12), self_201946, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 657)
        assertEqual_call_result_201954 = invoke(stypy.reporting.localization.Localization(__file__, 657, 12), assertEqual_201947, *[str_call_result_201951, str_201952], **kwargs_201953)
        
        # SSA branch for the else branch of a try statement (line 654)
        module_type_store.open_ssa_branch('except else')
        
        # Call to fail(...): (line 659)
        # Processing the call arguments (line 659)
        str_201957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 659, 22), 'str', 'TestLoader.loadTestsFromName failed to raise AttributeError')
        # Processing the call keyword arguments (line 659)
        kwargs_201958 = {}
        # Getting the type of 'self' (line 659)
        self_201955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 12), 'self', False)
        # Obtaining the member 'fail' of a type (line 659)
        fail_201956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 659, 12), self_201955, 'fail')
        # Calling fail(args, kwargs) (line 659)
        fail_call_result_201959 = invoke(stypy.reporting.localization.Localization(__file__, 659, 12), fail_201956, *[str_201957], **kwargs_201958)
        
        # SSA join for try-except statement (line 654)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_loadTestsFromNames__unknown_name_relative_1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromNames__unknown_name_relative_1' in the type store
        # Getting the type of 'stypy_return_type' (line 651)
        stypy_return_type_201960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201960)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromNames__unknown_name_relative_1'
        return stypy_return_type_201960


    @norecursion
    def test_loadTestsFromNames__unknown_name_relative_2(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromNames__unknown_name_relative_2'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromNames__unknown_name_relative_2', 670, 4, False)
        # Assigning a type to the variable 'self' (line 671)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 671, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_2.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_2.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_2.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_2')
        Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_2.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_2.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_2.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_2.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_2.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_2.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromNames__unknown_name_relative_2', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromNames__unknown_name_relative_2', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromNames__unknown_name_relative_2(...)' code ##################

        
        # Assigning a Call to a Name (line 671):
        
        # Call to TestLoader(...): (line 671)
        # Processing the call keyword arguments (line 671)
        kwargs_201963 = {}
        # Getting the type of 'unittest' (line 671)
        unittest_201961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 671)
        TestLoader_201962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 17), unittest_201961, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 671)
        TestLoader_call_result_201964 = invoke(stypy.reporting.localization.Localization(__file__, 671, 17), TestLoader_201962, *[], **kwargs_201963)
        
        # Assigning a type to the variable 'loader' (line 671)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 671, 8), 'loader', TestLoader_call_result_201964)
        
        
        # SSA begins for try-except statement (line 673)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to loadTestsFromNames(...): (line 674)
        # Processing the call arguments (line 674)
        
        # Obtaining an instance of the builtin type 'list' (line 674)
        list_201967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 674, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 674)
        # Adding element type (line 674)
        str_201968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 674, 39), 'str', 'TestCase')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 674, 38), list_201967, str_201968)
        # Adding element type (line 674)
        str_201969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 674, 51), 'str', 'sdasfasfasdf')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 674, 38), list_201967, str_201969)
        
        # Getting the type of 'unittest' (line 674)
        unittest_201970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 68), 'unittest', False)
        # Processing the call keyword arguments (line 674)
        kwargs_201971 = {}
        # Getting the type of 'loader' (line 674)
        loader_201965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 12), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 674)
        loadTestsFromNames_201966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 674, 12), loader_201965, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 674)
        loadTestsFromNames_call_result_201972 = invoke(stypy.reporting.localization.Localization(__file__, 674, 12), loadTestsFromNames_201966, *[list_201967, unittest_201970], **kwargs_201971)
        
        # SSA branch for the except part of a try statement (line 673)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 673)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'AttributeError' (line 675)
        AttributeError_201973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 15), 'AttributeError')
        # Assigning a type to the variable 'e' (line 675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 675, 8), 'e', AttributeError_201973)
        
        # Call to assertEqual(...): (line 676)
        # Processing the call arguments (line 676)
        
        # Call to str(...): (line 676)
        # Processing the call arguments (line 676)
        # Getting the type of 'e' (line 676)
        e_201977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 33), 'e', False)
        # Processing the call keyword arguments (line 676)
        kwargs_201978 = {}
        # Getting the type of 'str' (line 676)
        str_201976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 29), 'str', False)
        # Calling str(args, kwargs) (line 676)
        str_call_result_201979 = invoke(stypy.reporting.localization.Localization(__file__, 676, 29), str_201976, *[e_201977], **kwargs_201978)
        
        str_201980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 676, 37), 'str', "'module' object has no attribute 'sdasfasfasdf'")
        # Processing the call keyword arguments (line 676)
        kwargs_201981 = {}
        # Getting the type of 'self' (line 676)
        self_201974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 12), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 676)
        assertEqual_201975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 676, 12), self_201974, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 676)
        assertEqual_call_result_201982 = invoke(stypy.reporting.localization.Localization(__file__, 676, 12), assertEqual_201975, *[str_call_result_201979, str_201980], **kwargs_201981)
        
        # SSA branch for the else branch of a try statement (line 673)
        module_type_store.open_ssa_branch('except else')
        
        # Call to fail(...): (line 678)
        # Processing the call arguments (line 678)
        str_201985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 678, 22), 'str', 'TestLoader.loadTestsFromName failed to raise AttributeError')
        # Processing the call keyword arguments (line 678)
        kwargs_201986 = {}
        # Getting the type of 'self' (line 678)
        self_201983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 12), 'self', False)
        # Obtaining the member 'fail' of a type (line 678)
        fail_201984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 678, 12), self_201983, 'fail')
        # Calling fail(args, kwargs) (line 678)
        fail_call_result_201987 = invoke(stypy.reporting.localization.Localization(__file__, 678, 12), fail_201984, *[str_201985], **kwargs_201986)
        
        # SSA join for try-except statement (line 673)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_loadTestsFromNames__unknown_name_relative_2(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromNames__unknown_name_relative_2' in the type store
        # Getting the type of 'stypy_return_type' (line 670)
        stypy_return_type_201988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_201988)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromNames__unknown_name_relative_2'
        return stypy_return_type_201988


    @norecursion
    def test_loadTestsFromNames__relative_empty_name(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromNames__relative_empty_name'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromNames__relative_empty_name', 691, 4, False)
        # Assigning a type to the variable 'self' (line 692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromNames__relative_empty_name.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromNames__relative_empty_name.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromNames__relative_empty_name.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromNames__relative_empty_name.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromNames__relative_empty_name')
        Test_TestLoader.test_loadTestsFromNames__relative_empty_name.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromNames__relative_empty_name.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__relative_empty_name.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__relative_empty_name.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromNames__relative_empty_name.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromNames__relative_empty_name.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromNames__relative_empty_name.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromNames__relative_empty_name', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromNames__relative_empty_name', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromNames__relative_empty_name(...)' code ##################

        
        # Assigning a Call to a Name (line 692):
        
        # Call to TestLoader(...): (line 692)
        # Processing the call keyword arguments (line 692)
        kwargs_201991 = {}
        # Getting the type of 'unittest' (line 692)
        unittest_201989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 692)
        TestLoader_201990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 17), unittest_201989, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 692)
        TestLoader_call_result_201992 = invoke(stypy.reporting.localization.Localization(__file__, 692, 17), TestLoader_201990, *[], **kwargs_201991)
        
        # Assigning a type to the variable 'loader' (line 692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 8), 'loader', TestLoader_call_result_201992)
        
        
        # SSA begins for try-except statement (line 694)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to loadTestsFromNames(...): (line 695)
        # Processing the call arguments (line 695)
        
        # Obtaining an instance of the builtin type 'list' (line 695)
        list_201995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 695, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 695)
        # Adding element type (line 695)
        str_201996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 695, 39), 'str', '')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 695, 38), list_201995, str_201996)
        
        # Getting the type of 'unittest' (line 695)
        unittest_201997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 44), 'unittest', False)
        # Processing the call keyword arguments (line 695)
        kwargs_201998 = {}
        # Getting the type of 'loader' (line 695)
        loader_201993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 12), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 695)
        loadTestsFromNames_201994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 695, 12), loader_201993, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 695)
        loadTestsFromNames_call_result_201999 = invoke(stypy.reporting.localization.Localization(__file__, 695, 12), loadTestsFromNames_201994, *[list_201995, unittest_201997], **kwargs_201998)
        
        # SSA branch for the except part of a try statement (line 694)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 694)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA branch for the else branch of a try statement (line 694)
        module_type_store.open_ssa_branch('except else')
        
        # Call to fail(...): (line 699)
        # Processing the call arguments (line 699)
        str_202002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 699, 22), 'str', 'Failed to raise ValueError')
        # Processing the call keyword arguments (line 699)
        kwargs_202003 = {}
        # Getting the type of 'self' (line 699)
        self_202000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 12), 'self', False)
        # Obtaining the member 'fail' of a type (line 699)
        fail_202001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 12), self_202000, 'fail')
        # Calling fail(args, kwargs) (line 699)
        fail_call_result_202004 = invoke(stypy.reporting.localization.Localization(__file__, 699, 12), fail_202001, *[str_202002], **kwargs_202003)
        
        # SSA join for try-except statement (line 694)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_loadTestsFromNames__relative_empty_name(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromNames__relative_empty_name' in the type store
        # Getting the type of 'stypy_return_type' (line 691)
        stypy_return_type_202005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202005)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromNames__relative_empty_name'
        return stypy_return_type_202005


    @norecursion
    def test_loadTestsFromNames__relative_malformed_name(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromNames__relative_malformed_name'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromNames__relative_malformed_name', 709, 4, False)
        # Assigning a type to the variable 'self' (line 710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 710, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromNames__relative_malformed_name.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromNames__relative_malformed_name.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromNames__relative_malformed_name.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromNames__relative_malformed_name.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromNames__relative_malformed_name')
        Test_TestLoader.test_loadTestsFromNames__relative_malformed_name.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromNames__relative_malformed_name.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__relative_malformed_name.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__relative_malformed_name.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromNames__relative_malformed_name.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromNames__relative_malformed_name.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromNames__relative_malformed_name.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromNames__relative_malformed_name', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromNames__relative_malformed_name', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromNames__relative_malformed_name(...)' code ##################

        
        # Assigning a Call to a Name (line 710):
        
        # Call to TestLoader(...): (line 710)
        # Processing the call keyword arguments (line 710)
        kwargs_202008 = {}
        # Getting the type of 'unittest' (line 710)
        unittest_202006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 710)
        TestLoader_202007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 710, 17), unittest_202006, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 710)
        TestLoader_call_result_202009 = invoke(stypy.reporting.localization.Localization(__file__, 710, 17), TestLoader_202007, *[], **kwargs_202008)
        
        # Assigning a type to the variable 'loader' (line 710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 710, 8), 'loader', TestLoader_call_result_202009)
        
        
        # SSA begins for try-except statement (line 713)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to loadTestsFromNames(...): (line 714)
        # Processing the call arguments (line 714)
        
        # Obtaining an instance of the builtin type 'list' (line 714)
        list_202012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 714, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 714)
        # Adding element type (line 714)
        str_202013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 714, 39), 'str', 'abc () //')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 714, 38), list_202012, str_202013)
        
        # Getting the type of 'unittest' (line 714)
        unittest_202014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 53), 'unittest', False)
        # Processing the call keyword arguments (line 714)
        kwargs_202015 = {}
        # Getting the type of 'loader' (line 714)
        loader_202010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 12), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 714)
        loadTestsFromNames_202011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 714, 12), loader_202010, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 714)
        loadTestsFromNames_call_result_202016 = invoke(stypy.reporting.localization.Localization(__file__, 714, 12), loadTestsFromNames_202011, *[list_202012, unittest_202014], **kwargs_202015)
        
        # SSA branch for the except part of a try statement (line 713)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 713)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA branch for the except 'ValueError' branch of a try statement (line 713)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA branch for the else branch of a try statement (line 713)
        module_type_store.open_ssa_branch('except else')
        
        # Call to fail(...): (line 720)
        # Processing the call arguments (line 720)
        str_202019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 720, 22), 'str', 'TestLoader.loadTestsFromNames failed to raise ValueError')
        # Processing the call keyword arguments (line 720)
        kwargs_202020 = {}
        # Getting the type of 'self' (line 720)
        self_202017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 12), 'self', False)
        # Obtaining the member 'fail' of a type (line 720)
        fail_202018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 720, 12), self_202017, 'fail')
        # Calling fail(args, kwargs) (line 720)
        fail_call_result_202021 = invoke(stypy.reporting.localization.Localization(__file__, 720, 12), fail_202018, *[str_202019], **kwargs_202020)
        
        # SSA join for try-except statement (line 713)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_loadTestsFromNames__relative_malformed_name(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromNames__relative_malformed_name' in the type store
        # Getting the type of 'stypy_return_type' (line 709)
        stypy_return_type_202022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202022)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromNames__relative_malformed_name'
        return stypy_return_type_202022


    @norecursion
    def test_loadTestsFromNames__relative_not_a_module(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromNames__relative_not_a_module'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromNames__relative_not_a_module', 729, 4, False)
        # Assigning a type to the variable 'self' (line 730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromNames__relative_not_a_module.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromNames__relative_not_a_module.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromNames__relative_not_a_module.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromNames__relative_not_a_module.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromNames__relative_not_a_module')
        Test_TestLoader.test_loadTestsFromNames__relative_not_a_module.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromNames__relative_not_a_module.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__relative_not_a_module.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__relative_not_a_module.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromNames__relative_not_a_module.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromNames__relative_not_a_module.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromNames__relative_not_a_module.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromNames__relative_not_a_module', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromNames__relative_not_a_module', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromNames__relative_not_a_module(...)' code ##################

        # Declaration of the 'MyTestCase' class
        # Getting the type of 'unittest' (line 730)
        unittest_202023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 25), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 730)
        TestCase_202024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 730, 25), unittest_202023, 'TestCase')

        class MyTestCase(TestCase_202024, ):

            @norecursion
            def test(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test'
                module_type_store = module_type_store.open_function_context('test', 731, 12, False)
                # Assigning a type to the variable 'self' (line 732)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 732, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                MyTestCase.test.__dict__.__setitem__('stypy_localization', localization)
                MyTestCase.test.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                MyTestCase.test.__dict__.__setitem__('stypy_type_store', module_type_store)
                MyTestCase.test.__dict__.__setitem__('stypy_function_name', 'MyTestCase.test')
                MyTestCase.test.__dict__.__setitem__('stypy_param_names_list', [])
                MyTestCase.test.__dict__.__setitem__('stypy_varargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_kwargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_call_defaults', defaults)
                MyTestCase.test.__dict__.__setitem__('stypy_call_varargs', varargs)
                MyTestCase.test.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                MyTestCase.test.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'MyTestCase.test', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test(...)' code ##################

                pass
                
                # ################# End of 'test(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test' in the type store
                # Getting the type of 'stypy_return_type' (line 731)
                stypy_return_type_202025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202025)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test'
                return stypy_return_type_202025

        
        # Assigning a type to the variable 'MyTestCase' (line 730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 8), 'MyTestCase', MyTestCase)
        # Declaration of the 'NotAModule' class

        class NotAModule(object, ):
            
            # Assigning a Name to a Name (line 735):
            # Getting the type of 'MyTestCase' (line 735)
            MyTestCase_202026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 21), 'MyTestCase')
            # Assigning a type to the variable 'test_2' (line 735)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 735, 12), 'test_2', MyTestCase_202026)
        
        # Assigning a type to the variable 'NotAModule' (line 734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'NotAModule', NotAModule)
        
        # Assigning a Call to a Name (line 737):
        
        # Call to TestLoader(...): (line 737)
        # Processing the call keyword arguments (line 737)
        kwargs_202029 = {}
        # Getting the type of 'unittest' (line 737)
        unittest_202027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 737)
        TestLoader_202028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 17), unittest_202027, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 737)
        TestLoader_call_result_202030 = invoke(stypy.reporting.localization.Localization(__file__, 737, 17), TestLoader_202028, *[], **kwargs_202029)
        
        # Assigning a type to the variable 'loader' (line 737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 737, 8), 'loader', TestLoader_call_result_202030)
        
        # Assigning a Call to a Name (line 738):
        
        # Call to loadTestsFromNames(...): (line 738)
        # Processing the call arguments (line 738)
        
        # Obtaining an instance of the builtin type 'list' (line 738)
        list_202033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 738, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 738)
        # Adding element type (line 738)
        str_202034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 738, 43), 'str', 'test_2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 738, 42), list_202033, str_202034)
        
        # Getting the type of 'NotAModule' (line 738)
        NotAModule_202035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 54), 'NotAModule', False)
        # Processing the call keyword arguments (line 738)
        kwargs_202036 = {}
        # Getting the type of 'loader' (line 738)
        loader_202031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 738)
        loadTestsFromNames_202032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 738, 16), loader_202031, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 738)
        loadTestsFromNames_call_result_202037 = invoke(stypy.reporting.localization.Localization(__file__, 738, 16), loadTestsFromNames_202032, *[list_202033, NotAModule_202035], **kwargs_202036)
        
        # Assigning a type to the variable 'suite' (line 738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 738, 8), 'suite', loadTestsFromNames_call_result_202037)
        
        # Assigning a List to a Name (line 740):
        
        # Obtaining an instance of the builtin type 'list' (line 740)
        list_202038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 740, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 740)
        # Adding element type (line 740)
        
        # Call to TestSuite(...): (line 740)
        # Processing the call arguments (line 740)
        
        # Obtaining an instance of the builtin type 'list' (line 740)
        list_202041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 740, 40), 'list')
        # Adding type elements to the builtin type 'list' instance (line 740)
        # Adding element type (line 740)
        
        # Call to MyTestCase(...): (line 740)
        # Processing the call arguments (line 740)
        str_202043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 740, 52), 'str', 'test')
        # Processing the call keyword arguments (line 740)
        kwargs_202044 = {}
        # Getting the type of 'MyTestCase' (line 740)
        MyTestCase_202042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 41), 'MyTestCase', False)
        # Calling MyTestCase(args, kwargs) (line 740)
        MyTestCase_call_result_202045 = invoke(stypy.reporting.localization.Localization(__file__, 740, 41), MyTestCase_202042, *[str_202043], **kwargs_202044)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 740, 40), list_202041, MyTestCase_call_result_202045)
        
        # Processing the call keyword arguments (line 740)
        kwargs_202046 = {}
        # Getting the type of 'unittest' (line 740)
        unittest_202039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 21), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 740)
        TestSuite_202040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 21), unittest_202039, 'TestSuite')
        # Calling TestSuite(args, kwargs) (line 740)
        TestSuite_call_result_202047 = invoke(stypy.reporting.localization.Localization(__file__, 740, 21), TestSuite_202040, *[list_202041], **kwargs_202046)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 740, 20), list_202038, TestSuite_call_result_202047)
        
        # Assigning a type to the variable 'reference' (line 740)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 740, 8), 'reference', list_202038)
        
        # Call to assertEqual(...): (line 741)
        # Processing the call arguments (line 741)
        
        # Call to list(...): (line 741)
        # Processing the call arguments (line 741)
        # Getting the type of 'suite' (line 741)
        suite_202051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 30), 'suite', False)
        # Processing the call keyword arguments (line 741)
        kwargs_202052 = {}
        # Getting the type of 'list' (line 741)
        list_202050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 25), 'list', False)
        # Calling list(args, kwargs) (line 741)
        list_call_result_202053 = invoke(stypy.reporting.localization.Localization(__file__, 741, 25), list_202050, *[suite_202051], **kwargs_202052)
        
        # Getting the type of 'reference' (line 741)
        reference_202054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 38), 'reference', False)
        # Processing the call keyword arguments (line 741)
        kwargs_202055 = {}
        # Getting the type of 'self' (line 741)
        self_202048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 741)
        assertEqual_202049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 741, 8), self_202048, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 741)
        assertEqual_call_result_202056 = invoke(stypy.reporting.localization.Localization(__file__, 741, 8), assertEqual_202049, *[list_call_result_202053, reference_202054], **kwargs_202055)
        
        
        # ################# End of 'test_loadTestsFromNames__relative_not_a_module(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromNames__relative_not_a_module' in the type store
        # Getting the type of 'stypy_return_type' (line 729)
        stypy_return_type_202057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202057)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromNames__relative_not_a_module'
        return stypy_return_type_202057


    @norecursion
    def test_loadTestsFromNames__relative_bad_object(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromNames__relative_bad_object'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromNames__relative_bad_object', 750, 4, False)
        # Assigning a type to the variable 'self' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromNames__relative_bad_object.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromNames__relative_bad_object.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromNames__relative_bad_object.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromNames__relative_bad_object.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromNames__relative_bad_object')
        Test_TestLoader.test_loadTestsFromNames__relative_bad_object.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromNames__relative_bad_object.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__relative_bad_object.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__relative_bad_object.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromNames__relative_bad_object.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromNames__relative_bad_object.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromNames__relative_bad_object.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromNames__relative_bad_object', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromNames__relative_bad_object', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromNames__relative_bad_object(...)' code ##################

        
        # Assigning a Call to a Name (line 751):
        
        # Call to ModuleType(...): (line 751)
        # Processing the call arguments (line 751)
        str_202060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 29), 'str', 'm')
        # Processing the call keyword arguments (line 751)
        kwargs_202061 = {}
        # Getting the type of 'types' (line 751)
        types_202058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 751)
        ModuleType_202059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 12), types_202058, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 751)
        ModuleType_call_result_202062 = invoke(stypy.reporting.localization.Localization(__file__, 751, 12), ModuleType_202059, *[str_202060], **kwargs_202061)
        
        # Assigning a type to the variable 'm' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'm', ModuleType_call_result_202062)
        
        # Assigning a Call to a Attribute (line 752):
        
        # Call to object(...): (line 752)
        # Processing the call keyword arguments (line 752)
        kwargs_202064 = {}
        # Getting the type of 'object' (line 752)
        object_202063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 23), 'object', False)
        # Calling object(args, kwargs) (line 752)
        object_call_result_202065 = invoke(stypy.reporting.localization.Localization(__file__, 752, 23), object_202063, *[], **kwargs_202064)
        
        # Getting the type of 'm' (line 752)
        m_202066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 8), 'm')
        # Setting the type of the member 'testcase_1' of a type (line 752)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 752, 8), m_202066, 'testcase_1', object_call_result_202065)
        
        # Assigning a Call to a Name (line 754):
        
        # Call to TestLoader(...): (line 754)
        # Processing the call keyword arguments (line 754)
        kwargs_202069 = {}
        # Getting the type of 'unittest' (line 754)
        unittest_202067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 754)
        TestLoader_202068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 754, 17), unittest_202067, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 754)
        TestLoader_call_result_202070 = invoke(stypy.reporting.localization.Localization(__file__, 754, 17), TestLoader_202068, *[], **kwargs_202069)
        
        # Assigning a type to the variable 'loader' (line 754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 754, 8), 'loader', TestLoader_call_result_202070)
        
        
        # SSA begins for try-except statement (line 755)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to loadTestsFromNames(...): (line 756)
        # Processing the call arguments (line 756)
        
        # Obtaining an instance of the builtin type 'list' (line 756)
        list_202073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 756)
        # Adding element type (line 756)
        str_202074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 39), 'str', 'testcase_1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 756, 38), list_202073, str_202074)
        
        # Getting the type of 'm' (line 756)
        m_202075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 54), 'm', False)
        # Processing the call keyword arguments (line 756)
        kwargs_202076 = {}
        # Getting the type of 'loader' (line 756)
        loader_202071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 12), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 756)
        loadTestsFromNames_202072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 12), loader_202071, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 756)
        loadTestsFromNames_call_result_202077 = invoke(stypy.reporting.localization.Localization(__file__, 756, 12), loadTestsFromNames_202072, *[list_202073, m_202075], **kwargs_202076)
        
        # SSA branch for the except part of a try statement (line 755)
        # SSA branch for the except 'TypeError' branch of a try statement (line 755)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA branch for the else branch of a try statement (line 755)
        module_type_store.open_ssa_branch('except else')
        
        # Call to fail(...): (line 760)
        # Processing the call arguments (line 760)
        str_202080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 760, 22), 'str', 'Should have raised TypeError')
        # Processing the call keyword arguments (line 760)
        kwargs_202081 = {}
        # Getting the type of 'self' (line 760)
        self_202078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 12), 'self', False)
        # Obtaining the member 'fail' of a type (line 760)
        fail_202079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 760, 12), self_202078, 'fail')
        # Calling fail(args, kwargs) (line 760)
        fail_call_result_202082 = invoke(stypy.reporting.localization.Localization(__file__, 760, 12), fail_202079, *[str_202080], **kwargs_202081)
        
        # SSA join for try-except statement (line 755)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_loadTestsFromNames__relative_bad_object(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromNames__relative_bad_object' in the type store
        # Getting the type of 'stypy_return_type' (line 750)
        stypy_return_type_202083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202083)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromNames__relative_bad_object'
        return stypy_return_type_202083


    @norecursion
    def test_loadTestsFromNames__relative_TestCase_subclass(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromNames__relative_TestCase_subclass'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromNames__relative_TestCase_subclass', 764, 4, False)
        # Assigning a type to the variable 'self' (line 765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 765, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromNames__relative_TestCase_subclass.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromNames__relative_TestCase_subclass.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromNames__relative_TestCase_subclass.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromNames__relative_TestCase_subclass.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromNames__relative_TestCase_subclass')
        Test_TestLoader.test_loadTestsFromNames__relative_TestCase_subclass.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromNames__relative_TestCase_subclass.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__relative_TestCase_subclass.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__relative_TestCase_subclass.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromNames__relative_TestCase_subclass.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromNames__relative_TestCase_subclass.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromNames__relative_TestCase_subclass.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromNames__relative_TestCase_subclass', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromNames__relative_TestCase_subclass', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromNames__relative_TestCase_subclass(...)' code ##################

        
        # Assigning a Call to a Name (line 765):
        
        # Call to ModuleType(...): (line 765)
        # Processing the call arguments (line 765)
        str_202086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 765, 29), 'str', 'm')
        # Processing the call keyword arguments (line 765)
        kwargs_202087 = {}
        # Getting the type of 'types' (line 765)
        types_202084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 765)
        ModuleType_202085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 12), types_202084, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 765)
        ModuleType_call_result_202088 = invoke(stypy.reporting.localization.Localization(__file__, 765, 12), ModuleType_202085, *[str_202086], **kwargs_202087)
        
        # Assigning a type to the variable 'm' (line 765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 765, 8), 'm', ModuleType_call_result_202088)
        # Declaration of the 'MyTestCase' class
        # Getting the type of 'unittest' (line 766)
        unittest_202089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 25), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 766)
        TestCase_202090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 766, 25), unittest_202089, 'TestCase')

        class MyTestCase(TestCase_202090, ):

            @norecursion
            def test(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test'
                module_type_store = module_type_store.open_function_context('test', 767, 12, False)
                # Assigning a type to the variable 'self' (line 768)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                MyTestCase.test.__dict__.__setitem__('stypy_localization', localization)
                MyTestCase.test.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                MyTestCase.test.__dict__.__setitem__('stypy_type_store', module_type_store)
                MyTestCase.test.__dict__.__setitem__('stypy_function_name', 'MyTestCase.test')
                MyTestCase.test.__dict__.__setitem__('stypy_param_names_list', [])
                MyTestCase.test.__dict__.__setitem__('stypy_varargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_kwargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_call_defaults', defaults)
                MyTestCase.test.__dict__.__setitem__('stypy_call_varargs', varargs)
                MyTestCase.test.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                MyTestCase.test.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'MyTestCase.test', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test(...)' code ##################

                pass
                
                # ################# End of 'test(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test' in the type store
                # Getting the type of 'stypy_return_type' (line 767)
                stypy_return_type_202091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202091)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test'
                return stypy_return_type_202091

        
        # Assigning a type to the variable 'MyTestCase' (line 766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 766, 8), 'MyTestCase', MyTestCase)
        
        # Assigning a Name to a Attribute (line 769):
        # Getting the type of 'MyTestCase' (line 769)
        MyTestCase_202092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 23), 'MyTestCase')
        # Getting the type of 'm' (line 769)
        m_202093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 8), 'm')
        # Setting the type of the member 'testcase_1' of a type (line 769)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 8), m_202093, 'testcase_1', MyTestCase_202092)
        
        # Assigning a Call to a Name (line 771):
        
        # Call to TestLoader(...): (line 771)
        # Processing the call keyword arguments (line 771)
        kwargs_202096 = {}
        # Getting the type of 'unittest' (line 771)
        unittest_202094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 771)
        TestLoader_202095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 771, 17), unittest_202094, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 771)
        TestLoader_call_result_202097 = invoke(stypy.reporting.localization.Localization(__file__, 771, 17), TestLoader_202095, *[], **kwargs_202096)
        
        # Assigning a type to the variable 'loader' (line 771)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 771, 8), 'loader', TestLoader_call_result_202097)
        
        # Assigning a Call to a Name (line 772):
        
        # Call to loadTestsFromNames(...): (line 772)
        # Processing the call arguments (line 772)
        
        # Obtaining an instance of the builtin type 'list' (line 772)
        list_202100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 772, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 772)
        # Adding element type (line 772)
        str_202101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 772, 43), 'str', 'testcase_1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 772, 42), list_202100, str_202101)
        
        # Getting the type of 'm' (line 772)
        m_202102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 58), 'm', False)
        # Processing the call keyword arguments (line 772)
        kwargs_202103 = {}
        # Getting the type of 'loader' (line 772)
        loader_202098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 772)
        loadTestsFromNames_202099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 772, 16), loader_202098, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 772)
        loadTestsFromNames_call_result_202104 = invoke(stypy.reporting.localization.Localization(__file__, 772, 16), loadTestsFromNames_202099, *[list_202100, m_202102], **kwargs_202103)
        
        # Assigning a type to the variable 'suite' (line 772)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 772, 8), 'suite', loadTestsFromNames_call_result_202104)
        
        # Call to assertIsInstance(...): (line 773)
        # Processing the call arguments (line 773)
        # Getting the type of 'suite' (line 773)
        suite_202107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 30), 'suite', False)
        # Getting the type of 'loader' (line 773)
        loader_202108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 37), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 773)
        suiteClass_202109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 37), loader_202108, 'suiteClass')
        # Processing the call keyword arguments (line 773)
        kwargs_202110 = {}
        # Getting the type of 'self' (line 773)
        self_202105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 8), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 773)
        assertIsInstance_202106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 8), self_202105, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 773)
        assertIsInstance_call_result_202111 = invoke(stypy.reporting.localization.Localization(__file__, 773, 8), assertIsInstance_202106, *[suite_202107, suiteClass_202109], **kwargs_202110)
        
        
        # Assigning a Call to a Name (line 775):
        
        # Call to suiteClass(...): (line 775)
        # Processing the call arguments (line 775)
        
        # Obtaining an instance of the builtin type 'list' (line 775)
        list_202114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 775, 37), 'list')
        # Adding type elements to the builtin type 'list' instance (line 775)
        # Adding element type (line 775)
        
        # Call to MyTestCase(...): (line 775)
        # Processing the call arguments (line 775)
        str_202116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 775, 49), 'str', 'test')
        # Processing the call keyword arguments (line 775)
        kwargs_202117 = {}
        # Getting the type of 'MyTestCase' (line 775)
        MyTestCase_202115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 38), 'MyTestCase', False)
        # Calling MyTestCase(args, kwargs) (line 775)
        MyTestCase_call_result_202118 = invoke(stypy.reporting.localization.Localization(__file__, 775, 38), MyTestCase_202115, *[str_202116], **kwargs_202117)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 775, 37), list_202114, MyTestCase_call_result_202118)
        
        # Processing the call keyword arguments (line 775)
        kwargs_202119 = {}
        # Getting the type of 'loader' (line 775)
        loader_202112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 19), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 775)
        suiteClass_202113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 775, 19), loader_202112, 'suiteClass')
        # Calling suiteClass(args, kwargs) (line 775)
        suiteClass_call_result_202120 = invoke(stypy.reporting.localization.Localization(__file__, 775, 19), suiteClass_202113, *[list_202114], **kwargs_202119)
        
        # Assigning a type to the variable 'expected' (line 775)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 775, 8), 'expected', suiteClass_call_result_202120)
        
        # Call to assertEqual(...): (line 776)
        # Processing the call arguments (line 776)
        
        # Call to list(...): (line 776)
        # Processing the call arguments (line 776)
        # Getting the type of 'suite' (line 776)
        suite_202124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 30), 'suite', False)
        # Processing the call keyword arguments (line 776)
        kwargs_202125 = {}
        # Getting the type of 'list' (line 776)
        list_202123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 25), 'list', False)
        # Calling list(args, kwargs) (line 776)
        list_call_result_202126 = invoke(stypy.reporting.localization.Localization(__file__, 776, 25), list_202123, *[suite_202124], **kwargs_202125)
        
        
        # Obtaining an instance of the builtin type 'list' (line 776)
        list_202127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 776, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 776)
        # Adding element type (line 776)
        # Getting the type of 'expected' (line 776)
        expected_202128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 39), 'expected', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 776, 38), list_202127, expected_202128)
        
        # Processing the call keyword arguments (line 776)
        kwargs_202129 = {}
        # Getting the type of 'self' (line 776)
        self_202121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 776)
        assertEqual_202122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 8), self_202121, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 776)
        assertEqual_call_result_202130 = invoke(stypy.reporting.localization.Localization(__file__, 776, 8), assertEqual_202122, *[list_call_result_202126, list_202127], **kwargs_202129)
        
        
        # ################# End of 'test_loadTestsFromNames__relative_TestCase_subclass(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromNames__relative_TestCase_subclass' in the type store
        # Getting the type of 'stypy_return_type' (line 764)
        stypy_return_type_202131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202131)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromNames__relative_TestCase_subclass'
        return stypy_return_type_202131


    @norecursion
    def test_loadTestsFromNames__relative_TestSuite(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromNames__relative_TestSuite'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromNames__relative_TestSuite', 780, 4, False)
        # Assigning a type to the variable 'self' (line 781)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 781, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromNames__relative_TestSuite.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromNames__relative_TestSuite.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromNames__relative_TestSuite.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromNames__relative_TestSuite.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromNames__relative_TestSuite')
        Test_TestLoader.test_loadTestsFromNames__relative_TestSuite.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromNames__relative_TestSuite.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__relative_TestSuite.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__relative_TestSuite.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromNames__relative_TestSuite.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromNames__relative_TestSuite.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromNames__relative_TestSuite.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromNames__relative_TestSuite', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromNames__relative_TestSuite', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromNames__relative_TestSuite(...)' code ##################

        
        # Assigning a Call to a Name (line 781):
        
        # Call to ModuleType(...): (line 781)
        # Processing the call arguments (line 781)
        str_202134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 781, 29), 'str', 'm')
        # Processing the call keyword arguments (line 781)
        kwargs_202135 = {}
        # Getting the type of 'types' (line 781)
        types_202132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 781)
        ModuleType_202133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 781, 12), types_202132, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 781)
        ModuleType_call_result_202136 = invoke(stypy.reporting.localization.Localization(__file__, 781, 12), ModuleType_202133, *[str_202134], **kwargs_202135)
        
        # Assigning a type to the variable 'm' (line 781)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 781, 8), 'm', ModuleType_call_result_202136)
        # Declaration of the 'MyTestCase' class
        # Getting the type of 'unittest' (line 782)
        unittest_202137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 25), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 782)
        TestCase_202138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 782, 25), unittest_202137, 'TestCase')

        class MyTestCase(TestCase_202138, ):

            @norecursion
            def test(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test'
                module_type_store = module_type_store.open_function_context('test', 783, 12, False)
                # Assigning a type to the variable 'self' (line 784)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 784, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                MyTestCase.test.__dict__.__setitem__('stypy_localization', localization)
                MyTestCase.test.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                MyTestCase.test.__dict__.__setitem__('stypy_type_store', module_type_store)
                MyTestCase.test.__dict__.__setitem__('stypy_function_name', 'MyTestCase.test')
                MyTestCase.test.__dict__.__setitem__('stypy_param_names_list', [])
                MyTestCase.test.__dict__.__setitem__('stypy_varargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_kwargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_call_defaults', defaults)
                MyTestCase.test.__dict__.__setitem__('stypy_call_varargs', varargs)
                MyTestCase.test.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                MyTestCase.test.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'MyTestCase.test', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test(...)' code ##################

                pass
                
                # ################# End of 'test(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test' in the type store
                # Getting the type of 'stypy_return_type' (line 783)
                stypy_return_type_202139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202139)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test'
                return stypy_return_type_202139

        
        # Assigning a type to the variable 'MyTestCase' (line 782)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 782, 8), 'MyTestCase', MyTestCase)
        
        # Assigning a Call to a Attribute (line 785):
        
        # Call to TestSuite(...): (line 785)
        # Processing the call arguments (line 785)
        
        # Obtaining an instance of the builtin type 'list' (line 785)
        list_202142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 785, 41), 'list')
        # Adding type elements to the builtin type 'list' instance (line 785)
        # Adding element type (line 785)
        
        # Call to MyTestCase(...): (line 785)
        # Processing the call arguments (line 785)
        str_202144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 785, 53), 'str', 'test')
        # Processing the call keyword arguments (line 785)
        kwargs_202145 = {}
        # Getting the type of 'MyTestCase' (line 785)
        MyTestCase_202143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 42), 'MyTestCase', False)
        # Calling MyTestCase(args, kwargs) (line 785)
        MyTestCase_call_result_202146 = invoke(stypy.reporting.localization.Localization(__file__, 785, 42), MyTestCase_202143, *[str_202144], **kwargs_202145)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 785, 41), list_202142, MyTestCase_call_result_202146)
        
        # Processing the call keyword arguments (line 785)
        kwargs_202147 = {}
        # Getting the type of 'unittest' (line 785)
        unittest_202140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 22), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 785)
        TestSuite_202141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 785, 22), unittest_202140, 'TestSuite')
        # Calling TestSuite(args, kwargs) (line 785)
        TestSuite_call_result_202148 = invoke(stypy.reporting.localization.Localization(__file__, 785, 22), TestSuite_202141, *[list_202142], **kwargs_202147)
        
        # Getting the type of 'm' (line 785)
        m_202149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 8), 'm')
        # Setting the type of the member 'testsuite' of a type (line 785)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 785, 8), m_202149, 'testsuite', TestSuite_call_result_202148)
        
        # Assigning a Call to a Name (line 787):
        
        # Call to TestLoader(...): (line 787)
        # Processing the call keyword arguments (line 787)
        kwargs_202152 = {}
        # Getting the type of 'unittest' (line 787)
        unittest_202150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 787)
        TestLoader_202151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 17), unittest_202150, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 787)
        TestLoader_call_result_202153 = invoke(stypy.reporting.localization.Localization(__file__, 787, 17), TestLoader_202151, *[], **kwargs_202152)
        
        # Assigning a type to the variable 'loader' (line 787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 787, 8), 'loader', TestLoader_call_result_202153)
        
        # Assigning a Call to a Name (line 788):
        
        # Call to loadTestsFromNames(...): (line 788)
        # Processing the call arguments (line 788)
        
        # Obtaining an instance of the builtin type 'list' (line 788)
        list_202156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 788, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 788)
        # Adding element type (line 788)
        str_202157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 788, 43), 'str', 'testsuite')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 788, 42), list_202156, str_202157)
        
        # Getting the type of 'm' (line 788)
        m_202158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 57), 'm', False)
        # Processing the call keyword arguments (line 788)
        kwargs_202159 = {}
        # Getting the type of 'loader' (line 788)
        loader_202154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 788)
        loadTestsFromNames_202155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 16), loader_202154, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 788)
        loadTestsFromNames_call_result_202160 = invoke(stypy.reporting.localization.Localization(__file__, 788, 16), loadTestsFromNames_202155, *[list_202156, m_202158], **kwargs_202159)
        
        # Assigning a type to the variable 'suite' (line 788)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 788, 8), 'suite', loadTestsFromNames_call_result_202160)
        
        # Call to assertIsInstance(...): (line 789)
        # Processing the call arguments (line 789)
        # Getting the type of 'suite' (line 789)
        suite_202163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 30), 'suite', False)
        # Getting the type of 'loader' (line 789)
        loader_202164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 37), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 789)
        suiteClass_202165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 789, 37), loader_202164, 'suiteClass')
        # Processing the call keyword arguments (line 789)
        kwargs_202166 = {}
        # Getting the type of 'self' (line 789)
        self_202161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 8), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 789)
        assertIsInstance_202162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 789, 8), self_202161, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 789)
        assertIsInstance_call_result_202167 = invoke(stypy.reporting.localization.Localization(__file__, 789, 8), assertIsInstance_202162, *[suite_202163, suiteClass_202165], **kwargs_202166)
        
        
        # Call to assertEqual(...): (line 791)
        # Processing the call arguments (line 791)
        
        # Call to list(...): (line 791)
        # Processing the call arguments (line 791)
        # Getting the type of 'suite' (line 791)
        suite_202171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 30), 'suite', False)
        # Processing the call keyword arguments (line 791)
        kwargs_202172 = {}
        # Getting the type of 'list' (line 791)
        list_202170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 25), 'list', False)
        # Calling list(args, kwargs) (line 791)
        list_call_result_202173 = invoke(stypy.reporting.localization.Localization(__file__, 791, 25), list_202170, *[suite_202171], **kwargs_202172)
        
        
        # Obtaining an instance of the builtin type 'list' (line 791)
        list_202174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 791, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 791)
        # Adding element type (line 791)
        # Getting the type of 'm' (line 791)
        m_202175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 39), 'm', False)
        # Obtaining the member 'testsuite' of a type (line 791)
        testsuite_202176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 39), m_202175, 'testsuite')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 791, 38), list_202174, testsuite_202176)
        
        # Processing the call keyword arguments (line 791)
        kwargs_202177 = {}
        # Getting the type of 'self' (line 791)
        self_202168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 791)
        assertEqual_202169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 8), self_202168, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 791)
        assertEqual_call_result_202178 = invoke(stypy.reporting.localization.Localization(__file__, 791, 8), assertEqual_202169, *[list_call_result_202173, list_202174], **kwargs_202177)
        
        
        # ################# End of 'test_loadTestsFromNames__relative_TestSuite(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromNames__relative_TestSuite' in the type store
        # Getting the type of 'stypy_return_type' (line 780)
        stypy_return_type_202179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202179)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromNames__relative_TestSuite'
        return stypy_return_type_202179


    @norecursion
    def test_loadTestsFromNames__relative_testmethod(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromNames__relative_testmethod'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromNames__relative_testmethod', 795, 4, False)
        # Assigning a type to the variable 'self' (line 796)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromNames__relative_testmethod.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromNames__relative_testmethod.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromNames__relative_testmethod.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromNames__relative_testmethod.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromNames__relative_testmethod')
        Test_TestLoader.test_loadTestsFromNames__relative_testmethod.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromNames__relative_testmethod.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__relative_testmethod.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__relative_testmethod.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromNames__relative_testmethod.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromNames__relative_testmethod.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromNames__relative_testmethod.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromNames__relative_testmethod', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromNames__relative_testmethod', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromNames__relative_testmethod(...)' code ##################

        
        # Assigning a Call to a Name (line 796):
        
        # Call to ModuleType(...): (line 796)
        # Processing the call arguments (line 796)
        str_202182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 796, 29), 'str', 'm')
        # Processing the call keyword arguments (line 796)
        kwargs_202183 = {}
        # Getting the type of 'types' (line 796)
        types_202180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 796)
        ModuleType_202181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 796, 12), types_202180, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 796)
        ModuleType_call_result_202184 = invoke(stypy.reporting.localization.Localization(__file__, 796, 12), ModuleType_202181, *[str_202182], **kwargs_202183)
        
        # Assigning a type to the variable 'm' (line 796)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 8), 'm', ModuleType_call_result_202184)
        # Declaration of the 'MyTestCase' class
        # Getting the type of 'unittest' (line 797)
        unittest_202185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 25), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 797)
        TestCase_202186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 25), unittest_202185, 'TestCase')

        class MyTestCase(TestCase_202186, ):

            @norecursion
            def test(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test'
                module_type_store = module_type_store.open_function_context('test', 798, 12, False)
                # Assigning a type to the variable 'self' (line 799)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                MyTestCase.test.__dict__.__setitem__('stypy_localization', localization)
                MyTestCase.test.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                MyTestCase.test.__dict__.__setitem__('stypy_type_store', module_type_store)
                MyTestCase.test.__dict__.__setitem__('stypy_function_name', 'MyTestCase.test')
                MyTestCase.test.__dict__.__setitem__('stypy_param_names_list', [])
                MyTestCase.test.__dict__.__setitem__('stypy_varargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_kwargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_call_defaults', defaults)
                MyTestCase.test.__dict__.__setitem__('stypy_call_varargs', varargs)
                MyTestCase.test.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                MyTestCase.test.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'MyTestCase.test', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test(...)' code ##################

                pass
                
                # ################# End of 'test(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test' in the type store
                # Getting the type of 'stypy_return_type' (line 798)
                stypy_return_type_202187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202187)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test'
                return stypy_return_type_202187

        
        # Assigning a type to the variable 'MyTestCase' (line 797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 8), 'MyTestCase', MyTestCase)
        
        # Assigning a Name to a Attribute (line 800):
        # Getting the type of 'MyTestCase' (line 800)
        MyTestCase_202188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 23), 'MyTestCase')
        # Getting the type of 'm' (line 800)
        m_202189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 8), 'm')
        # Setting the type of the member 'testcase_1' of a type (line 800)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 800, 8), m_202189, 'testcase_1', MyTestCase_202188)
        
        # Assigning a Call to a Name (line 802):
        
        # Call to TestLoader(...): (line 802)
        # Processing the call keyword arguments (line 802)
        kwargs_202192 = {}
        # Getting the type of 'unittest' (line 802)
        unittest_202190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 802)
        TestLoader_202191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 17), unittest_202190, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 802)
        TestLoader_call_result_202193 = invoke(stypy.reporting.localization.Localization(__file__, 802, 17), TestLoader_202191, *[], **kwargs_202192)
        
        # Assigning a type to the variable 'loader' (line 802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 8), 'loader', TestLoader_call_result_202193)
        
        # Assigning a Call to a Name (line 803):
        
        # Call to loadTestsFromNames(...): (line 803)
        # Processing the call arguments (line 803)
        
        # Obtaining an instance of the builtin type 'list' (line 803)
        list_202196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 803, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 803)
        # Adding element type (line 803)
        str_202197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 803, 43), 'str', 'testcase_1.test')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 803, 42), list_202196, str_202197)
        
        # Getting the type of 'm' (line 803)
        m_202198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 63), 'm', False)
        # Processing the call keyword arguments (line 803)
        kwargs_202199 = {}
        # Getting the type of 'loader' (line 803)
        loader_202194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 803)
        loadTestsFromNames_202195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 803, 16), loader_202194, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 803)
        loadTestsFromNames_call_result_202200 = invoke(stypy.reporting.localization.Localization(__file__, 803, 16), loadTestsFromNames_202195, *[list_202196, m_202198], **kwargs_202199)
        
        # Assigning a type to the variable 'suite' (line 803)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 803, 8), 'suite', loadTestsFromNames_call_result_202200)
        
        # Call to assertIsInstance(...): (line 804)
        # Processing the call arguments (line 804)
        # Getting the type of 'suite' (line 804)
        suite_202203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 30), 'suite', False)
        # Getting the type of 'loader' (line 804)
        loader_202204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 37), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 804)
        suiteClass_202205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 804, 37), loader_202204, 'suiteClass')
        # Processing the call keyword arguments (line 804)
        kwargs_202206 = {}
        # Getting the type of 'self' (line 804)
        self_202201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 8), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 804)
        assertIsInstance_202202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 804, 8), self_202201, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 804)
        assertIsInstance_call_result_202207 = invoke(stypy.reporting.localization.Localization(__file__, 804, 8), assertIsInstance_202202, *[suite_202203, suiteClass_202205], **kwargs_202206)
        
        
        # Assigning a Call to a Name (line 806):
        
        # Call to TestSuite(...): (line 806)
        # Processing the call arguments (line 806)
        
        # Obtaining an instance of the builtin type 'list' (line 806)
        list_202210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 806, 39), 'list')
        # Adding type elements to the builtin type 'list' instance (line 806)
        # Adding element type (line 806)
        
        # Call to MyTestCase(...): (line 806)
        # Processing the call arguments (line 806)
        str_202212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 806, 51), 'str', 'test')
        # Processing the call keyword arguments (line 806)
        kwargs_202213 = {}
        # Getting the type of 'MyTestCase' (line 806)
        MyTestCase_202211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 40), 'MyTestCase', False)
        # Calling MyTestCase(args, kwargs) (line 806)
        MyTestCase_call_result_202214 = invoke(stypy.reporting.localization.Localization(__file__, 806, 40), MyTestCase_202211, *[str_202212], **kwargs_202213)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 806, 39), list_202210, MyTestCase_call_result_202214)
        
        # Processing the call keyword arguments (line 806)
        kwargs_202215 = {}
        # Getting the type of 'unittest' (line 806)
        unittest_202208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 20), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 806)
        TestSuite_202209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 20), unittest_202208, 'TestSuite')
        # Calling TestSuite(args, kwargs) (line 806)
        TestSuite_call_result_202216 = invoke(stypy.reporting.localization.Localization(__file__, 806, 20), TestSuite_202209, *[list_202210], **kwargs_202215)
        
        # Assigning a type to the variable 'ref_suite' (line 806)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 806, 8), 'ref_suite', TestSuite_call_result_202216)
        
        # Call to assertEqual(...): (line 807)
        # Processing the call arguments (line 807)
        
        # Call to list(...): (line 807)
        # Processing the call arguments (line 807)
        # Getting the type of 'suite' (line 807)
        suite_202220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 30), 'suite', False)
        # Processing the call keyword arguments (line 807)
        kwargs_202221 = {}
        # Getting the type of 'list' (line 807)
        list_202219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 25), 'list', False)
        # Calling list(args, kwargs) (line 807)
        list_call_result_202222 = invoke(stypy.reporting.localization.Localization(__file__, 807, 25), list_202219, *[suite_202220], **kwargs_202221)
        
        
        # Obtaining an instance of the builtin type 'list' (line 807)
        list_202223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 807, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 807)
        # Adding element type (line 807)
        # Getting the type of 'ref_suite' (line 807)
        ref_suite_202224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 39), 'ref_suite', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 807, 38), list_202223, ref_suite_202224)
        
        # Processing the call keyword arguments (line 807)
        kwargs_202225 = {}
        # Getting the type of 'self' (line 807)
        self_202217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 807)
        assertEqual_202218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 8), self_202217, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 807)
        assertEqual_call_result_202226 = invoke(stypy.reporting.localization.Localization(__file__, 807, 8), assertEqual_202218, *[list_call_result_202222, list_202223], **kwargs_202225)
        
        
        # ################# End of 'test_loadTestsFromNames__relative_testmethod(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromNames__relative_testmethod' in the type store
        # Getting the type of 'stypy_return_type' (line 795)
        stypy_return_type_202227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202227)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromNames__relative_testmethod'
        return stypy_return_type_202227


    @norecursion
    def test_loadTestsFromNames__relative_invalid_testmethod(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromNames__relative_invalid_testmethod'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromNames__relative_invalid_testmethod', 814, 4, False)
        # Assigning a type to the variable 'self' (line 815)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 815, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromNames__relative_invalid_testmethod.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromNames__relative_invalid_testmethod.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromNames__relative_invalid_testmethod.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromNames__relative_invalid_testmethod.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromNames__relative_invalid_testmethod')
        Test_TestLoader.test_loadTestsFromNames__relative_invalid_testmethod.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromNames__relative_invalid_testmethod.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__relative_invalid_testmethod.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__relative_invalid_testmethod.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromNames__relative_invalid_testmethod.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromNames__relative_invalid_testmethod.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromNames__relative_invalid_testmethod.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromNames__relative_invalid_testmethod', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromNames__relative_invalid_testmethod', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromNames__relative_invalid_testmethod(...)' code ##################

        
        # Assigning a Call to a Name (line 815):
        
        # Call to ModuleType(...): (line 815)
        # Processing the call arguments (line 815)
        str_202230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 815, 29), 'str', 'm')
        # Processing the call keyword arguments (line 815)
        kwargs_202231 = {}
        # Getting the type of 'types' (line 815)
        types_202228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 815)
        ModuleType_202229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 12), types_202228, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 815)
        ModuleType_call_result_202232 = invoke(stypy.reporting.localization.Localization(__file__, 815, 12), ModuleType_202229, *[str_202230], **kwargs_202231)
        
        # Assigning a type to the variable 'm' (line 815)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 815, 8), 'm', ModuleType_call_result_202232)
        # Declaration of the 'MyTestCase' class
        # Getting the type of 'unittest' (line 816)
        unittest_202233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 25), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 816)
        TestCase_202234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 816, 25), unittest_202233, 'TestCase')

        class MyTestCase(TestCase_202234, ):

            @norecursion
            def test(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test'
                module_type_store = module_type_store.open_function_context('test', 817, 12, False)
                # Assigning a type to the variable 'self' (line 818)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                MyTestCase.test.__dict__.__setitem__('stypy_localization', localization)
                MyTestCase.test.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                MyTestCase.test.__dict__.__setitem__('stypy_type_store', module_type_store)
                MyTestCase.test.__dict__.__setitem__('stypy_function_name', 'MyTestCase.test')
                MyTestCase.test.__dict__.__setitem__('stypy_param_names_list', [])
                MyTestCase.test.__dict__.__setitem__('stypy_varargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_kwargs_param_name', None)
                MyTestCase.test.__dict__.__setitem__('stypy_call_defaults', defaults)
                MyTestCase.test.__dict__.__setitem__('stypy_call_varargs', varargs)
                MyTestCase.test.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                MyTestCase.test.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'MyTestCase.test', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test(...)' code ##################

                pass
                
                # ################# End of 'test(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test' in the type store
                # Getting the type of 'stypy_return_type' (line 817)
                stypy_return_type_202235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202235)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test'
                return stypy_return_type_202235

        
        # Assigning a type to the variable 'MyTestCase' (line 816)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 816, 8), 'MyTestCase', MyTestCase)
        
        # Assigning a Name to a Attribute (line 819):
        # Getting the type of 'MyTestCase' (line 819)
        MyTestCase_202236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 23), 'MyTestCase')
        # Getting the type of 'm' (line 819)
        m_202237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 8), 'm')
        # Setting the type of the member 'testcase_1' of a type (line 819)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 8), m_202237, 'testcase_1', MyTestCase_202236)
        
        # Assigning a Call to a Name (line 821):
        
        # Call to TestLoader(...): (line 821)
        # Processing the call keyword arguments (line 821)
        kwargs_202240 = {}
        # Getting the type of 'unittest' (line 821)
        unittest_202238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 821)
        TestLoader_202239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 821, 17), unittest_202238, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 821)
        TestLoader_call_result_202241 = invoke(stypy.reporting.localization.Localization(__file__, 821, 17), TestLoader_202239, *[], **kwargs_202240)
        
        # Assigning a type to the variable 'loader' (line 821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 821, 8), 'loader', TestLoader_call_result_202241)
        
        
        # SSA begins for try-except statement (line 822)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to loadTestsFromNames(...): (line 823)
        # Processing the call arguments (line 823)
        
        # Obtaining an instance of the builtin type 'list' (line 823)
        list_202244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 823, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 823)
        # Adding element type (line 823)
        str_202245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 823, 39), 'str', 'testcase_1.testfoo')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 823, 38), list_202244, str_202245)
        
        # Getting the type of 'm' (line 823)
        m_202246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 62), 'm', False)
        # Processing the call keyword arguments (line 823)
        kwargs_202247 = {}
        # Getting the type of 'loader' (line 823)
        loader_202242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 12), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 823)
        loadTestsFromNames_202243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 823, 12), loader_202242, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 823)
        loadTestsFromNames_call_result_202248 = invoke(stypy.reporting.localization.Localization(__file__, 823, 12), loadTestsFromNames_202243, *[list_202244, m_202246], **kwargs_202247)
        
        # SSA branch for the except part of a try statement (line 822)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 822)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'AttributeError' (line 824)
        AttributeError_202249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 15), 'AttributeError')
        # Assigning a type to the variable 'e' (line 824)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 824, 8), 'e', AttributeError_202249)
        
        # Call to assertEqual(...): (line 825)
        # Processing the call arguments (line 825)
        
        # Call to str(...): (line 825)
        # Processing the call arguments (line 825)
        # Getting the type of 'e' (line 825)
        e_202253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 33), 'e', False)
        # Processing the call keyword arguments (line 825)
        kwargs_202254 = {}
        # Getting the type of 'str' (line 825)
        str_202252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 29), 'str', False)
        # Calling str(args, kwargs) (line 825)
        str_call_result_202255 = invoke(stypy.reporting.localization.Localization(__file__, 825, 29), str_202252, *[e_202253], **kwargs_202254)
        
        str_202256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 37), 'str', "type object 'MyTestCase' has no attribute 'testfoo'")
        # Processing the call keyword arguments (line 825)
        kwargs_202257 = {}
        # Getting the type of 'self' (line 825)
        self_202250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 12), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 825)
        assertEqual_202251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 12), self_202250, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 825)
        assertEqual_call_result_202258 = invoke(stypy.reporting.localization.Localization(__file__, 825, 12), assertEqual_202251, *[str_call_result_202255, str_202256], **kwargs_202257)
        
        # SSA branch for the else branch of a try statement (line 822)
        module_type_store.open_ssa_branch('except else')
        
        # Call to fail(...): (line 827)
        # Processing the call arguments (line 827)
        str_202261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, 22), 'str', 'Failed to raise AttributeError')
        # Processing the call keyword arguments (line 827)
        kwargs_202262 = {}
        # Getting the type of 'self' (line 827)
        self_202259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 12), 'self', False)
        # Obtaining the member 'fail' of a type (line 827)
        fail_202260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 827, 12), self_202259, 'fail')
        # Calling fail(args, kwargs) (line 827)
        fail_call_result_202263 = invoke(stypy.reporting.localization.Localization(__file__, 827, 12), fail_202260, *[str_202261], **kwargs_202262)
        
        # SSA join for try-except statement (line 822)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_loadTestsFromNames__relative_invalid_testmethod(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromNames__relative_invalid_testmethod' in the type store
        # Getting the type of 'stypy_return_type' (line 814)
        stypy_return_type_202264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202264)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromNames__relative_invalid_testmethod'
        return stypy_return_type_202264


    @norecursion
    def test_loadTestsFromNames__callable__TestSuite(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromNames__callable__TestSuite'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromNames__callable__TestSuite', 831, 4, False)
        # Assigning a type to the variable 'self' (line 832)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 832, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromNames__callable__TestSuite.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromNames__callable__TestSuite.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromNames__callable__TestSuite.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromNames__callable__TestSuite.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromNames__callable__TestSuite')
        Test_TestLoader.test_loadTestsFromNames__callable__TestSuite.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromNames__callable__TestSuite.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__callable__TestSuite.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__callable__TestSuite.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromNames__callable__TestSuite.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromNames__callable__TestSuite.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromNames__callable__TestSuite.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromNames__callable__TestSuite', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromNames__callable__TestSuite', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromNames__callable__TestSuite(...)' code ##################

        
        # Assigning a Call to a Name (line 832):
        
        # Call to ModuleType(...): (line 832)
        # Processing the call arguments (line 832)
        str_202267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 29), 'str', 'm')
        # Processing the call keyword arguments (line 832)
        kwargs_202268 = {}
        # Getting the type of 'types' (line 832)
        types_202265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 832)
        ModuleType_202266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 832, 12), types_202265, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 832)
        ModuleType_call_result_202269 = invoke(stypy.reporting.localization.Localization(__file__, 832, 12), ModuleType_202266, *[str_202267], **kwargs_202268)
        
        # Assigning a type to the variable 'm' (line 832)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 832, 8), 'm', ModuleType_call_result_202269)
        
        # Assigning a Call to a Name (line 833):
        
        # Call to FunctionTestCase(...): (line 833)
        # Processing the call arguments (line 833)

        @norecursion
        def _stypy_temp_lambda_85(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_85'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_85', 833, 47, True)
            # Passed parameters checking function
            _stypy_temp_lambda_85.stypy_localization = localization
            _stypy_temp_lambda_85.stypy_type_of_self = None
            _stypy_temp_lambda_85.stypy_type_store = module_type_store
            _stypy_temp_lambda_85.stypy_function_name = '_stypy_temp_lambda_85'
            _stypy_temp_lambda_85.stypy_param_names_list = []
            _stypy_temp_lambda_85.stypy_varargs_param_name = None
            _stypy_temp_lambda_85.stypy_kwargs_param_name = None
            _stypy_temp_lambda_85.stypy_call_defaults = defaults
            _stypy_temp_lambda_85.stypy_call_varargs = varargs
            _stypy_temp_lambda_85.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_85', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_85', [], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            # Getting the type of 'None' (line 833)
            None_202272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 55), 'None', False)
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 833)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 833, 47), 'stypy_return_type', None_202272)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_85' in the type store
            # Getting the type of 'stypy_return_type' (line 833)
            stypy_return_type_202273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 47), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_202273)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_85'
            return stypy_return_type_202273

        # Assigning a type to the variable '_stypy_temp_lambda_85' (line 833)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 833, 47), '_stypy_temp_lambda_85', _stypy_temp_lambda_85)
        # Getting the type of '_stypy_temp_lambda_85' (line 833)
        _stypy_temp_lambda_85_202274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 47), '_stypy_temp_lambda_85')
        # Processing the call keyword arguments (line 833)
        kwargs_202275 = {}
        # Getting the type of 'unittest' (line 833)
        unittest_202270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 21), 'unittest', False)
        # Obtaining the member 'FunctionTestCase' of a type (line 833)
        FunctionTestCase_202271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 833, 21), unittest_202270, 'FunctionTestCase')
        # Calling FunctionTestCase(args, kwargs) (line 833)
        FunctionTestCase_call_result_202276 = invoke(stypy.reporting.localization.Localization(__file__, 833, 21), FunctionTestCase_202271, *[_stypy_temp_lambda_85_202274], **kwargs_202275)
        
        # Assigning a type to the variable 'testcase_1' (line 833)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 833, 8), 'testcase_1', FunctionTestCase_call_result_202276)
        
        # Assigning a Call to a Name (line 834):
        
        # Call to FunctionTestCase(...): (line 834)
        # Processing the call arguments (line 834)

        @norecursion
        def _stypy_temp_lambda_86(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_86'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_86', 834, 47, True)
            # Passed parameters checking function
            _stypy_temp_lambda_86.stypy_localization = localization
            _stypy_temp_lambda_86.stypy_type_of_self = None
            _stypy_temp_lambda_86.stypy_type_store = module_type_store
            _stypy_temp_lambda_86.stypy_function_name = '_stypy_temp_lambda_86'
            _stypy_temp_lambda_86.stypy_param_names_list = []
            _stypy_temp_lambda_86.stypy_varargs_param_name = None
            _stypy_temp_lambda_86.stypy_kwargs_param_name = None
            _stypy_temp_lambda_86.stypy_call_defaults = defaults
            _stypy_temp_lambda_86.stypy_call_varargs = varargs
            _stypy_temp_lambda_86.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_86', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_86', [], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            # Getting the type of 'None' (line 834)
            None_202279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 55), 'None', False)
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 834)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 834, 47), 'stypy_return_type', None_202279)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_86' in the type store
            # Getting the type of 'stypy_return_type' (line 834)
            stypy_return_type_202280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 47), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_202280)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_86'
            return stypy_return_type_202280

        # Assigning a type to the variable '_stypy_temp_lambda_86' (line 834)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 834, 47), '_stypy_temp_lambda_86', _stypy_temp_lambda_86)
        # Getting the type of '_stypy_temp_lambda_86' (line 834)
        _stypy_temp_lambda_86_202281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 47), '_stypy_temp_lambda_86')
        # Processing the call keyword arguments (line 834)
        kwargs_202282 = {}
        # Getting the type of 'unittest' (line 834)
        unittest_202277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 21), 'unittest', False)
        # Obtaining the member 'FunctionTestCase' of a type (line 834)
        FunctionTestCase_202278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 834, 21), unittest_202277, 'FunctionTestCase')
        # Calling FunctionTestCase(args, kwargs) (line 834)
        FunctionTestCase_call_result_202283 = invoke(stypy.reporting.localization.Localization(__file__, 834, 21), FunctionTestCase_202278, *[_stypy_temp_lambda_86_202281], **kwargs_202282)
        
        # Assigning a type to the variable 'testcase_2' (line 834)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 834, 8), 'testcase_2', FunctionTestCase_call_result_202283)

        @norecursion
        def return_TestSuite(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'return_TestSuite'
            module_type_store = module_type_store.open_function_context('return_TestSuite', 835, 8, False)
            
            # Passed parameters checking function
            return_TestSuite.stypy_localization = localization
            return_TestSuite.stypy_type_of_self = None
            return_TestSuite.stypy_type_store = module_type_store
            return_TestSuite.stypy_function_name = 'return_TestSuite'
            return_TestSuite.stypy_param_names_list = []
            return_TestSuite.stypy_varargs_param_name = None
            return_TestSuite.stypy_kwargs_param_name = None
            return_TestSuite.stypy_call_defaults = defaults
            return_TestSuite.stypy_call_varargs = varargs
            return_TestSuite.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'return_TestSuite', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'return_TestSuite', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'return_TestSuite(...)' code ##################

            
            # Call to TestSuite(...): (line 836)
            # Processing the call arguments (line 836)
            
            # Obtaining an instance of the builtin type 'list' (line 836)
            list_202286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 836, 38), 'list')
            # Adding type elements to the builtin type 'list' instance (line 836)
            # Adding element type (line 836)
            # Getting the type of 'testcase_1' (line 836)
            testcase_1_202287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 39), 'testcase_1', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 836, 38), list_202286, testcase_1_202287)
            # Adding element type (line 836)
            # Getting the type of 'testcase_2' (line 836)
            testcase_2_202288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 51), 'testcase_2', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 836, 38), list_202286, testcase_2_202288)
            
            # Processing the call keyword arguments (line 836)
            kwargs_202289 = {}
            # Getting the type of 'unittest' (line 836)
            unittest_202284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 19), 'unittest', False)
            # Obtaining the member 'TestSuite' of a type (line 836)
            TestSuite_202285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 19), unittest_202284, 'TestSuite')
            # Calling TestSuite(args, kwargs) (line 836)
            TestSuite_call_result_202290 = invoke(stypy.reporting.localization.Localization(__file__, 836, 19), TestSuite_202285, *[list_202286], **kwargs_202289)
            
            # Assigning a type to the variable 'stypy_return_type' (line 836)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 836, 12), 'stypy_return_type', TestSuite_call_result_202290)
            
            # ################# End of 'return_TestSuite(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'return_TestSuite' in the type store
            # Getting the type of 'stypy_return_type' (line 835)
            stypy_return_type_202291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_202291)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'return_TestSuite'
            return stypy_return_type_202291

        # Assigning a type to the variable 'return_TestSuite' (line 835)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 835, 8), 'return_TestSuite', return_TestSuite)
        
        # Assigning a Name to a Attribute (line 837):
        # Getting the type of 'return_TestSuite' (line 837)
        return_TestSuite_202292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 29), 'return_TestSuite')
        # Getting the type of 'm' (line 837)
        m_202293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 8), 'm')
        # Setting the type of the member 'return_TestSuite' of a type (line 837)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 837, 8), m_202293, 'return_TestSuite', return_TestSuite_202292)
        
        # Assigning a Call to a Name (line 839):
        
        # Call to TestLoader(...): (line 839)
        # Processing the call keyword arguments (line 839)
        kwargs_202296 = {}
        # Getting the type of 'unittest' (line 839)
        unittest_202294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 839)
        TestLoader_202295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 839, 17), unittest_202294, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 839)
        TestLoader_call_result_202297 = invoke(stypy.reporting.localization.Localization(__file__, 839, 17), TestLoader_202295, *[], **kwargs_202296)
        
        # Assigning a type to the variable 'loader' (line 839)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 839, 8), 'loader', TestLoader_call_result_202297)
        
        # Assigning a Call to a Name (line 840):
        
        # Call to loadTestsFromNames(...): (line 840)
        # Processing the call arguments (line 840)
        
        # Obtaining an instance of the builtin type 'list' (line 840)
        list_202300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 840, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 840)
        # Adding element type (line 840)
        str_202301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 840, 43), 'str', 'return_TestSuite')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 840, 42), list_202300, str_202301)
        
        # Getting the type of 'm' (line 840)
        m_202302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 64), 'm', False)
        # Processing the call keyword arguments (line 840)
        kwargs_202303 = {}
        # Getting the type of 'loader' (line 840)
        loader_202298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 840)
        loadTestsFromNames_202299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 840, 16), loader_202298, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 840)
        loadTestsFromNames_call_result_202304 = invoke(stypy.reporting.localization.Localization(__file__, 840, 16), loadTestsFromNames_202299, *[list_202300, m_202302], **kwargs_202303)
        
        # Assigning a type to the variable 'suite' (line 840)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 840, 8), 'suite', loadTestsFromNames_call_result_202304)
        
        # Call to assertIsInstance(...): (line 841)
        # Processing the call arguments (line 841)
        # Getting the type of 'suite' (line 841)
        suite_202307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 30), 'suite', False)
        # Getting the type of 'loader' (line 841)
        loader_202308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 37), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 841)
        suiteClass_202309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 841, 37), loader_202308, 'suiteClass')
        # Processing the call keyword arguments (line 841)
        kwargs_202310 = {}
        # Getting the type of 'self' (line 841)
        self_202305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 8), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 841)
        assertIsInstance_202306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 841, 8), self_202305, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 841)
        assertIsInstance_call_result_202311 = invoke(stypy.reporting.localization.Localization(__file__, 841, 8), assertIsInstance_202306, *[suite_202307, suiteClass_202309], **kwargs_202310)
        
        
        # Assigning a Call to a Name (line 843):
        
        # Call to TestSuite(...): (line 843)
        # Processing the call arguments (line 843)
        
        # Obtaining an instance of the builtin type 'list' (line 843)
        list_202314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 843, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 843)
        # Adding element type (line 843)
        # Getting the type of 'testcase_1' (line 843)
        testcase_1_202315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 39), 'testcase_1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 843, 38), list_202314, testcase_1_202315)
        # Adding element type (line 843)
        # Getting the type of 'testcase_2' (line 843)
        testcase_2_202316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 51), 'testcase_2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 843, 38), list_202314, testcase_2_202316)
        
        # Processing the call keyword arguments (line 843)
        kwargs_202317 = {}
        # Getting the type of 'unittest' (line 843)
        unittest_202312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 19), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 843)
        TestSuite_202313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 843, 19), unittest_202312, 'TestSuite')
        # Calling TestSuite(args, kwargs) (line 843)
        TestSuite_call_result_202318 = invoke(stypy.reporting.localization.Localization(__file__, 843, 19), TestSuite_202313, *[list_202314], **kwargs_202317)
        
        # Assigning a type to the variable 'expected' (line 843)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 843, 8), 'expected', TestSuite_call_result_202318)
        
        # Call to assertEqual(...): (line 844)
        # Processing the call arguments (line 844)
        
        # Call to list(...): (line 844)
        # Processing the call arguments (line 844)
        # Getting the type of 'suite' (line 844)
        suite_202322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 30), 'suite', False)
        # Processing the call keyword arguments (line 844)
        kwargs_202323 = {}
        # Getting the type of 'list' (line 844)
        list_202321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 25), 'list', False)
        # Calling list(args, kwargs) (line 844)
        list_call_result_202324 = invoke(stypy.reporting.localization.Localization(__file__, 844, 25), list_202321, *[suite_202322], **kwargs_202323)
        
        
        # Obtaining an instance of the builtin type 'list' (line 844)
        list_202325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 844, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 844)
        # Adding element type (line 844)
        # Getting the type of 'expected' (line 844)
        expected_202326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 39), 'expected', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 844, 38), list_202325, expected_202326)
        
        # Processing the call keyword arguments (line 844)
        kwargs_202327 = {}
        # Getting the type of 'self' (line 844)
        self_202319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 844)
        assertEqual_202320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 844, 8), self_202319, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 844)
        assertEqual_call_result_202328 = invoke(stypy.reporting.localization.Localization(__file__, 844, 8), assertEqual_202320, *[list_call_result_202324, list_202325], **kwargs_202327)
        
        
        # ################# End of 'test_loadTestsFromNames__callable__TestSuite(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromNames__callable__TestSuite' in the type store
        # Getting the type of 'stypy_return_type' (line 831)
        stypy_return_type_202329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202329)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromNames__callable__TestSuite'
        return stypy_return_type_202329


    @norecursion
    def test_loadTestsFromNames__callable__TestCase_instance(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromNames__callable__TestCase_instance'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromNames__callable__TestCase_instance', 848, 4, False)
        # Assigning a type to the variable 'self' (line 849)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 849, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromNames__callable__TestCase_instance.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromNames__callable__TestCase_instance.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromNames__callable__TestCase_instance.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromNames__callable__TestCase_instance.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromNames__callable__TestCase_instance')
        Test_TestLoader.test_loadTestsFromNames__callable__TestCase_instance.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromNames__callable__TestCase_instance.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__callable__TestCase_instance.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__callable__TestCase_instance.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromNames__callable__TestCase_instance.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromNames__callable__TestCase_instance.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromNames__callable__TestCase_instance.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromNames__callable__TestCase_instance', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromNames__callable__TestCase_instance', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromNames__callable__TestCase_instance(...)' code ##################

        
        # Assigning a Call to a Name (line 849):
        
        # Call to ModuleType(...): (line 849)
        # Processing the call arguments (line 849)
        str_202332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 849, 29), 'str', 'm')
        # Processing the call keyword arguments (line 849)
        kwargs_202333 = {}
        # Getting the type of 'types' (line 849)
        types_202330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 849)
        ModuleType_202331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 849, 12), types_202330, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 849)
        ModuleType_call_result_202334 = invoke(stypy.reporting.localization.Localization(__file__, 849, 12), ModuleType_202331, *[str_202332], **kwargs_202333)
        
        # Assigning a type to the variable 'm' (line 849)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 849, 8), 'm', ModuleType_call_result_202334)
        
        # Assigning a Call to a Name (line 850):
        
        # Call to FunctionTestCase(...): (line 850)
        # Processing the call arguments (line 850)

        @norecursion
        def _stypy_temp_lambda_87(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_87'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_87', 850, 47, True)
            # Passed parameters checking function
            _stypy_temp_lambda_87.stypy_localization = localization
            _stypy_temp_lambda_87.stypy_type_of_self = None
            _stypy_temp_lambda_87.stypy_type_store = module_type_store
            _stypy_temp_lambda_87.stypy_function_name = '_stypy_temp_lambda_87'
            _stypy_temp_lambda_87.stypy_param_names_list = []
            _stypy_temp_lambda_87.stypy_varargs_param_name = None
            _stypy_temp_lambda_87.stypy_kwargs_param_name = None
            _stypy_temp_lambda_87.stypy_call_defaults = defaults
            _stypy_temp_lambda_87.stypy_call_varargs = varargs
            _stypy_temp_lambda_87.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_87', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_87', [], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            # Getting the type of 'None' (line 850)
            None_202337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 55), 'None', False)
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 850)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 850, 47), 'stypy_return_type', None_202337)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_87' in the type store
            # Getting the type of 'stypy_return_type' (line 850)
            stypy_return_type_202338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 47), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_202338)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_87'
            return stypy_return_type_202338

        # Assigning a type to the variable '_stypy_temp_lambda_87' (line 850)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 850, 47), '_stypy_temp_lambda_87', _stypy_temp_lambda_87)
        # Getting the type of '_stypy_temp_lambda_87' (line 850)
        _stypy_temp_lambda_87_202339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 47), '_stypy_temp_lambda_87')
        # Processing the call keyword arguments (line 850)
        kwargs_202340 = {}
        # Getting the type of 'unittest' (line 850)
        unittest_202335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 21), 'unittest', False)
        # Obtaining the member 'FunctionTestCase' of a type (line 850)
        FunctionTestCase_202336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 850, 21), unittest_202335, 'FunctionTestCase')
        # Calling FunctionTestCase(args, kwargs) (line 850)
        FunctionTestCase_call_result_202341 = invoke(stypy.reporting.localization.Localization(__file__, 850, 21), FunctionTestCase_202336, *[_stypy_temp_lambda_87_202339], **kwargs_202340)
        
        # Assigning a type to the variable 'testcase_1' (line 850)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 850, 8), 'testcase_1', FunctionTestCase_call_result_202341)

        @norecursion
        def return_TestCase(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'return_TestCase'
            module_type_store = module_type_store.open_function_context('return_TestCase', 851, 8, False)
            
            # Passed parameters checking function
            return_TestCase.stypy_localization = localization
            return_TestCase.stypy_type_of_self = None
            return_TestCase.stypy_type_store = module_type_store
            return_TestCase.stypy_function_name = 'return_TestCase'
            return_TestCase.stypy_param_names_list = []
            return_TestCase.stypy_varargs_param_name = None
            return_TestCase.stypy_kwargs_param_name = None
            return_TestCase.stypy_call_defaults = defaults
            return_TestCase.stypy_call_varargs = varargs
            return_TestCase.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'return_TestCase', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'return_TestCase', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'return_TestCase(...)' code ##################

            # Getting the type of 'testcase_1' (line 852)
            testcase_1_202342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 19), 'testcase_1')
            # Assigning a type to the variable 'stypy_return_type' (line 852)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 852, 12), 'stypy_return_type', testcase_1_202342)
            
            # ################# End of 'return_TestCase(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'return_TestCase' in the type store
            # Getting the type of 'stypy_return_type' (line 851)
            stypy_return_type_202343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_202343)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'return_TestCase'
            return stypy_return_type_202343

        # Assigning a type to the variable 'return_TestCase' (line 851)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 851, 8), 'return_TestCase', return_TestCase)
        
        # Assigning a Name to a Attribute (line 853):
        # Getting the type of 'return_TestCase' (line 853)
        return_TestCase_202344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 28), 'return_TestCase')
        # Getting the type of 'm' (line 853)
        m_202345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 8), 'm')
        # Setting the type of the member 'return_TestCase' of a type (line 853)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 853, 8), m_202345, 'return_TestCase', return_TestCase_202344)
        
        # Assigning a Call to a Name (line 855):
        
        # Call to TestLoader(...): (line 855)
        # Processing the call keyword arguments (line 855)
        kwargs_202348 = {}
        # Getting the type of 'unittest' (line 855)
        unittest_202346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 855)
        TestLoader_202347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 855, 17), unittest_202346, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 855)
        TestLoader_call_result_202349 = invoke(stypy.reporting.localization.Localization(__file__, 855, 17), TestLoader_202347, *[], **kwargs_202348)
        
        # Assigning a type to the variable 'loader' (line 855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 855, 8), 'loader', TestLoader_call_result_202349)
        
        # Assigning a Call to a Name (line 856):
        
        # Call to loadTestsFromNames(...): (line 856)
        # Processing the call arguments (line 856)
        
        # Obtaining an instance of the builtin type 'list' (line 856)
        list_202352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 856, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 856)
        # Adding element type (line 856)
        str_202353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 856, 43), 'str', 'return_TestCase')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 856, 42), list_202352, str_202353)
        
        # Getting the type of 'm' (line 856)
        m_202354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 63), 'm', False)
        # Processing the call keyword arguments (line 856)
        kwargs_202355 = {}
        # Getting the type of 'loader' (line 856)
        loader_202350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 856)
        loadTestsFromNames_202351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 856, 16), loader_202350, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 856)
        loadTestsFromNames_call_result_202356 = invoke(stypy.reporting.localization.Localization(__file__, 856, 16), loadTestsFromNames_202351, *[list_202352, m_202354], **kwargs_202355)
        
        # Assigning a type to the variable 'suite' (line 856)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 856, 8), 'suite', loadTestsFromNames_call_result_202356)
        
        # Call to assertIsInstance(...): (line 857)
        # Processing the call arguments (line 857)
        # Getting the type of 'suite' (line 857)
        suite_202359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 30), 'suite', False)
        # Getting the type of 'loader' (line 857)
        loader_202360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 37), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 857)
        suiteClass_202361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 857, 37), loader_202360, 'suiteClass')
        # Processing the call keyword arguments (line 857)
        kwargs_202362 = {}
        # Getting the type of 'self' (line 857)
        self_202357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 8), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 857)
        assertIsInstance_202358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 857, 8), self_202357, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 857)
        assertIsInstance_call_result_202363 = invoke(stypy.reporting.localization.Localization(__file__, 857, 8), assertIsInstance_202358, *[suite_202359, suiteClass_202361], **kwargs_202362)
        
        
        # Assigning a Call to a Name (line 859):
        
        # Call to TestSuite(...): (line 859)
        # Processing the call arguments (line 859)
        
        # Obtaining an instance of the builtin type 'list' (line 859)
        list_202366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 859, 39), 'list')
        # Adding type elements to the builtin type 'list' instance (line 859)
        # Adding element type (line 859)
        # Getting the type of 'testcase_1' (line 859)
        testcase_1_202367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 40), 'testcase_1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 859, 39), list_202366, testcase_1_202367)
        
        # Processing the call keyword arguments (line 859)
        kwargs_202368 = {}
        # Getting the type of 'unittest' (line 859)
        unittest_202364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 20), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 859)
        TestSuite_202365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 859, 20), unittest_202364, 'TestSuite')
        # Calling TestSuite(args, kwargs) (line 859)
        TestSuite_call_result_202369 = invoke(stypy.reporting.localization.Localization(__file__, 859, 20), TestSuite_202365, *[list_202366], **kwargs_202368)
        
        # Assigning a type to the variable 'ref_suite' (line 859)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 859, 8), 'ref_suite', TestSuite_call_result_202369)
        
        # Call to assertEqual(...): (line 860)
        # Processing the call arguments (line 860)
        
        # Call to list(...): (line 860)
        # Processing the call arguments (line 860)
        # Getting the type of 'suite' (line 860)
        suite_202373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 30), 'suite', False)
        # Processing the call keyword arguments (line 860)
        kwargs_202374 = {}
        # Getting the type of 'list' (line 860)
        list_202372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 25), 'list', False)
        # Calling list(args, kwargs) (line 860)
        list_call_result_202375 = invoke(stypy.reporting.localization.Localization(__file__, 860, 25), list_202372, *[suite_202373], **kwargs_202374)
        
        
        # Obtaining an instance of the builtin type 'list' (line 860)
        list_202376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 860, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 860)
        # Adding element type (line 860)
        # Getting the type of 'ref_suite' (line 860)
        ref_suite_202377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 39), 'ref_suite', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 860, 38), list_202376, ref_suite_202377)
        
        # Processing the call keyword arguments (line 860)
        kwargs_202378 = {}
        # Getting the type of 'self' (line 860)
        self_202370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 860)
        assertEqual_202371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 860, 8), self_202370, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 860)
        assertEqual_call_result_202379 = invoke(stypy.reporting.localization.Localization(__file__, 860, 8), assertEqual_202371, *[list_call_result_202375, list_202376], **kwargs_202378)
        
        
        # ################# End of 'test_loadTestsFromNames__callable__TestCase_instance(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromNames__callable__TestCase_instance' in the type store
        # Getting the type of 'stypy_return_type' (line 848)
        stypy_return_type_202380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202380)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromNames__callable__TestCase_instance'
        return stypy_return_type_202380


    @norecursion
    def test_loadTestsFromNames__callable__call_staticmethod(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromNames__callable__call_staticmethod'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromNames__callable__call_staticmethod', 866, 4, False)
        # Assigning a type to the variable 'self' (line 867)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 867, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromNames__callable__call_staticmethod.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromNames__callable__call_staticmethod.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromNames__callable__call_staticmethod.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromNames__callable__call_staticmethod.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromNames__callable__call_staticmethod')
        Test_TestLoader.test_loadTestsFromNames__callable__call_staticmethod.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromNames__callable__call_staticmethod.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__callable__call_staticmethod.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__callable__call_staticmethod.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromNames__callable__call_staticmethod.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromNames__callable__call_staticmethod.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromNames__callable__call_staticmethod.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromNames__callable__call_staticmethod', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromNames__callable__call_staticmethod', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromNames__callable__call_staticmethod(...)' code ##################

        
        # Assigning a Call to a Name (line 867):
        
        # Call to ModuleType(...): (line 867)
        # Processing the call arguments (line 867)
        str_202383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 867, 29), 'str', 'm')
        # Processing the call keyword arguments (line 867)
        kwargs_202384 = {}
        # Getting the type of 'types' (line 867)
        types_202381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 867)
        ModuleType_202382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 867, 12), types_202381, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 867)
        ModuleType_call_result_202385 = invoke(stypy.reporting.localization.Localization(__file__, 867, 12), ModuleType_202382, *[str_202383], **kwargs_202384)
        
        # Assigning a type to the variable 'm' (line 867)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 867, 8), 'm', ModuleType_call_result_202385)
        # Declaration of the 'Test1' class
        # Getting the type of 'unittest' (line 868)
        unittest_202386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 20), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 868)
        TestCase_202387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 868, 20), unittest_202386, 'TestCase')

        class Test1(TestCase_202387, ):

            @norecursion
            def test(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test'
                module_type_store = module_type_store.open_function_context('test', 869, 12, False)
                # Assigning a type to the variable 'self' (line 870)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 870, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Test1.test.__dict__.__setitem__('stypy_localization', localization)
                Test1.test.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Test1.test.__dict__.__setitem__('stypy_type_store', module_type_store)
                Test1.test.__dict__.__setitem__('stypy_function_name', 'Test1.test')
                Test1.test.__dict__.__setitem__('stypy_param_names_list', [])
                Test1.test.__dict__.__setitem__('stypy_varargs_param_name', None)
                Test1.test.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Test1.test.__dict__.__setitem__('stypy_call_defaults', defaults)
                Test1.test.__dict__.__setitem__('stypy_call_varargs', varargs)
                Test1.test.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Test1.test.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test1.test', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test(...)' code ##################

                pass
                
                # ################# End of 'test(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test' in the type store
                # Getting the type of 'stypy_return_type' (line 869)
                stypy_return_type_202388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202388)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test'
                return stypy_return_type_202388

        
        # Assigning a type to the variable 'Test1' (line 868)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 868, 8), 'Test1', Test1)
        
        # Assigning a Call to a Name (line 872):
        
        # Call to Test1(...): (line 872)
        # Processing the call arguments (line 872)
        str_202390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 872, 27), 'str', 'test')
        # Processing the call keyword arguments (line 872)
        kwargs_202391 = {}
        # Getting the type of 'Test1' (line 872)
        Test1_202389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 21), 'Test1', False)
        # Calling Test1(args, kwargs) (line 872)
        Test1_call_result_202392 = invoke(stypy.reporting.localization.Localization(__file__, 872, 21), Test1_202389, *[str_202390], **kwargs_202391)
        
        # Assigning a type to the variable 'testcase_1' (line 872)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 872, 8), 'testcase_1', Test1_call_result_202392)
        # Declaration of the 'Foo' class
        # Getting the type of 'unittest' (line 873)
        unittest_202393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 18), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 873)
        TestCase_202394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 18), unittest_202393, 'TestCase')

        class Foo(TestCase_202394, ):

            @staticmethod
            @norecursion
            def foo(localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'foo'
                module_type_store = module_type_store.open_function_context('foo', 874, 12, False)
                
                # Passed parameters checking function
                Foo.foo.__dict__.__setitem__('stypy_localization', localization)
                Foo.foo.__dict__.__setitem__('stypy_type_of_self', None)
                Foo.foo.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.foo.__dict__.__setitem__('stypy_function_name', 'foo')
                Foo.foo.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.foo.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.foo.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.foo.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.foo.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.foo.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.foo.__dict__.__setitem__('stypy_declared_arg_number', 0)
                arguments = process_argument_values(localization, None, module_type_store, 'foo', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'foo', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'foo(...)' code ##################

                # Getting the type of 'testcase_1' (line 876)
                testcase_1_202395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 23), 'testcase_1')
                # Assigning a type to the variable 'stypy_return_type' (line 876)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 876, 16), 'stypy_return_type', testcase_1_202395)
                
                # ################# End of 'foo(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'foo' in the type store
                # Getting the type of 'stypy_return_type' (line 874)
                stypy_return_type_202396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202396)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'foo'
                return stypy_return_type_202396

        
        # Assigning a type to the variable 'Foo' (line 873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 873, 8), 'Foo', Foo)
        
        # Assigning a Name to a Attribute (line 877):
        # Getting the type of 'Foo' (line 877)
        Foo_202397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 16), 'Foo')
        # Getting the type of 'm' (line 877)
        m_202398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 8), 'm')
        # Setting the type of the member 'Foo' of a type (line 877)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 8), m_202398, 'Foo', Foo_202397)
        
        # Assigning a Call to a Name (line 879):
        
        # Call to TestLoader(...): (line 879)
        # Processing the call keyword arguments (line 879)
        kwargs_202401 = {}
        # Getting the type of 'unittest' (line 879)
        unittest_202399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 879)
        TestLoader_202400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 17), unittest_202399, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 879)
        TestLoader_call_result_202402 = invoke(stypy.reporting.localization.Localization(__file__, 879, 17), TestLoader_202400, *[], **kwargs_202401)
        
        # Assigning a type to the variable 'loader' (line 879)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 879, 8), 'loader', TestLoader_call_result_202402)
        
        # Assigning a Call to a Name (line 880):
        
        # Call to loadTestsFromNames(...): (line 880)
        # Processing the call arguments (line 880)
        
        # Obtaining an instance of the builtin type 'list' (line 880)
        list_202405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 880, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 880)
        # Adding element type (line 880)
        str_202406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 880, 43), 'str', 'Foo.foo')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 880, 42), list_202405, str_202406)
        
        # Getting the type of 'm' (line 880)
        m_202407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 55), 'm', False)
        # Processing the call keyword arguments (line 880)
        kwargs_202408 = {}
        # Getting the type of 'loader' (line 880)
        loader_202403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 880)
        loadTestsFromNames_202404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 880, 16), loader_202403, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 880)
        loadTestsFromNames_call_result_202409 = invoke(stypy.reporting.localization.Localization(__file__, 880, 16), loadTestsFromNames_202404, *[list_202405, m_202407], **kwargs_202408)
        
        # Assigning a type to the variable 'suite' (line 880)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 880, 8), 'suite', loadTestsFromNames_call_result_202409)
        
        # Call to assertIsInstance(...): (line 881)
        # Processing the call arguments (line 881)
        # Getting the type of 'suite' (line 881)
        suite_202412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 30), 'suite', False)
        # Getting the type of 'loader' (line 881)
        loader_202413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 37), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 881)
        suiteClass_202414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 37), loader_202413, 'suiteClass')
        # Processing the call keyword arguments (line 881)
        kwargs_202415 = {}
        # Getting the type of 'self' (line 881)
        self_202410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 8), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 881)
        assertIsInstance_202411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 8), self_202410, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 881)
        assertIsInstance_call_result_202416 = invoke(stypy.reporting.localization.Localization(__file__, 881, 8), assertIsInstance_202411, *[suite_202412, suiteClass_202414], **kwargs_202415)
        
        
        # Assigning a Call to a Name (line 883):
        
        # Call to TestSuite(...): (line 883)
        # Processing the call arguments (line 883)
        
        # Obtaining an instance of the builtin type 'list' (line 883)
        list_202419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 883, 39), 'list')
        # Adding type elements to the builtin type 'list' instance (line 883)
        # Adding element type (line 883)
        # Getting the type of 'testcase_1' (line 883)
        testcase_1_202420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 40), 'testcase_1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 883, 39), list_202419, testcase_1_202420)
        
        # Processing the call keyword arguments (line 883)
        kwargs_202421 = {}
        # Getting the type of 'unittest' (line 883)
        unittest_202417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 20), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 883)
        TestSuite_202418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 20), unittest_202417, 'TestSuite')
        # Calling TestSuite(args, kwargs) (line 883)
        TestSuite_call_result_202422 = invoke(stypy.reporting.localization.Localization(__file__, 883, 20), TestSuite_202418, *[list_202419], **kwargs_202421)
        
        # Assigning a type to the variable 'ref_suite' (line 883)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 883, 8), 'ref_suite', TestSuite_call_result_202422)
        
        # Call to assertEqual(...): (line 884)
        # Processing the call arguments (line 884)
        
        # Call to list(...): (line 884)
        # Processing the call arguments (line 884)
        # Getting the type of 'suite' (line 884)
        suite_202426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 30), 'suite', False)
        # Processing the call keyword arguments (line 884)
        kwargs_202427 = {}
        # Getting the type of 'list' (line 884)
        list_202425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 25), 'list', False)
        # Calling list(args, kwargs) (line 884)
        list_call_result_202428 = invoke(stypy.reporting.localization.Localization(__file__, 884, 25), list_202425, *[suite_202426], **kwargs_202427)
        
        
        # Obtaining an instance of the builtin type 'list' (line 884)
        list_202429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 884, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 884)
        # Adding element type (line 884)
        # Getting the type of 'ref_suite' (line 884)
        ref_suite_202430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 39), 'ref_suite', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 884, 38), list_202429, ref_suite_202430)
        
        # Processing the call keyword arguments (line 884)
        kwargs_202431 = {}
        # Getting the type of 'self' (line 884)
        self_202423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 884)
        assertEqual_202424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 884, 8), self_202423, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 884)
        assertEqual_call_result_202432 = invoke(stypy.reporting.localization.Localization(__file__, 884, 8), assertEqual_202424, *[list_call_result_202428, list_202429], **kwargs_202431)
        
        
        # ################# End of 'test_loadTestsFromNames__callable__call_staticmethod(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromNames__callable__call_staticmethod' in the type store
        # Getting the type of 'stypy_return_type' (line 866)
        stypy_return_type_202433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202433)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromNames__callable__call_staticmethod'
        return stypy_return_type_202433


    @norecursion
    def test_loadTestsFromNames__callable__wrong_type(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromNames__callable__wrong_type'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromNames__callable__wrong_type', 890, 4, False)
        # Assigning a type to the variable 'self' (line 891)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 891, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromNames__callable__wrong_type.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromNames__callable__wrong_type.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromNames__callable__wrong_type.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromNames__callable__wrong_type.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromNames__callable__wrong_type')
        Test_TestLoader.test_loadTestsFromNames__callable__wrong_type.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromNames__callable__wrong_type.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__callable__wrong_type.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__callable__wrong_type.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromNames__callable__wrong_type.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromNames__callable__wrong_type.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromNames__callable__wrong_type.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromNames__callable__wrong_type', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromNames__callable__wrong_type', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromNames__callable__wrong_type(...)' code ##################

        
        # Assigning a Call to a Name (line 891):
        
        # Call to ModuleType(...): (line 891)
        # Processing the call arguments (line 891)
        str_202436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 891, 29), 'str', 'm')
        # Processing the call keyword arguments (line 891)
        kwargs_202437 = {}
        # Getting the type of 'types' (line 891)
        types_202434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 891)
        ModuleType_202435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 891, 12), types_202434, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 891)
        ModuleType_call_result_202438 = invoke(stypy.reporting.localization.Localization(__file__, 891, 12), ModuleType_202435, *[str_202436], **kwargs_202437)
        
        # Assigning a type to the variable 'm' (line 891)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 891, 8), 'm', ModuleType_call_result_202438)

        @norecursion
        def return_wrong(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'return_wrong'
            module_type_store = module_type_store.open_function_context('return_wrong', 892, 8, False)
            
            # Passed parameters checking function
            return_wrong.stypy_localization = localization
            return_wrong.stypy_type_of_self = None
            return_wrong.stypy_type_store = module_type_store
            return_wrong.stypy_function_name = 'return_wrong'
            return_wrong.stypy_param_names_list = []
            return_wrong.stypy_varargs_param_name = None
            return_wrong.stypy_kwargs_param_name = None
            return_wrong.stypy_call_defaults = defaults
            return_wrong.stypy_call_varargs = varargs
            return_wrong.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'return_wrong', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'return_wrong', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'return_wrong(...)' code ##################

            int_202439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 893, 19), 'int')
            # Assigning a type to the variable 'stypy_return_type' (line 893)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 893, 12), 'stypy_return_type', int_202439)
            
            # ################# End of 'return_wrong(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'return_wrong' in the type store
            # Getting the type of 'stypy_return_type' (line 892)
            stypy_return_type_202440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_202440)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'return_wrong'
            return stypy_return_type_202440

        # Assigning a type to the variable 'return_wrong' (line 892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 892, 8), 'return_wrong', return_wrong)
        
        # Assigning a Name to a Attribute (line 894):
        # Getting the type of 'return_wrong' (line 894)
        return_wrong_202441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 25), 'return_wrong')
        # Getting the type of 'm' (line 894)
        m_202442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 8), 'm')
        # Setting the type of the member 'return_wrong' of a type (line 894)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 894, 8), m_202442, 'return_wrong', return_wrong_202441)
        
        # Assigning a Call to a Name (line 896):
        
        # Call to TestLoader(...): (line 896)
        # Processing the call keyword arguments (line 896)
        kwargs_202445 = {}
        # Getting the type of 'unittest' (line 896)
        unittest_202443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 896)
        TestLoader_202444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 896, 17), unittest_202443, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 896)
        TestLoader_call_result_202446 = invoke(stypy.reporting.localization.Localization(__file__, 896, 17), TestLoader_202444, *[], **kwargs_202445)
        
        # Assigning a type to the variable 'loader' (line 896)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 8), 'loader', TestLoader_call_result_202446)
        
        
        # SSA begins for try-except statement (line 897)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to loadTestsFromNames(...): (line 898)
        # Processing the call arguments (line 898)
        
        # Obtaining an instance of the builtin type 'list' (line 898)
        list_202449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 898, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 898)
        # Adding element type (line 898)
        str_202450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 898, 39), 'str', 'return_wrong')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 898, 38), list_202449, str_202450)
        
        # Getting the type of 'm' (line 898)
        m_202451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 56), 'm', False)
        # Processing the call keyword arguments (line 898)
        kwargs_202452 = {}
        # Getting the type of 'loader' (line 898)
        loader_202447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 12), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 898)
        loadTestsFromNames_202448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 898, 12), loader_202447, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 898)
        loadTestsFromNames_call_result_202453 = invoke(stypy.reporting.localization.Localization(__file__, 898, 12), loadTestsFromNames_202448, *[list_202449, m_202451], **kwargs_202452)
        
        # SSA branch for the except part of a try statement (line 897)
        # SSA branch for the except 'TypeError' branch of a try statement (line 897)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA branch for the else branch of a try statement (line 897)
        module_type_store.open_ssa_branch('except else')
        
        # Call to fail(...): (line 902)
        # Processing the call arguments (line 902)
        str_202456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 902, 22), 'str', 'TestLoader.loadTestsFromNames failed to raise TypeError')
        # Processing the call keyword arguments (line 902)
        kwargs_202457 = {}
        # Getting the type of 'self' (line 902)
        self_202454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 12), 'self', False)
        # Obtaining the member 'fail' of a type (line 902)
        fail_202455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 902, 12), self_202454, 'fail')
        # Calling fail(args, kwargs) (line 902)
        fail_call_result_202458 = invoke(stypy.reporting.localization.Localization(__file__, 902, 12), fail_202455, *[str_202456], **kwargs_202457)
        
        # SSA join for try-except statement (line 897)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'test_loadTestsFromNames__callable__wrong_type(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromNames__callable__wrong_type' in the type store
        # Getting the type of 'stypy_return_type' (line 890)
        stypy_return_type_202459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202459)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromNames__callable__wrong_type'
        return stypy_return_type_202459


    @norecursion
    def test_loadTestsFromNames__module_not_loaded(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromNames__module_not_loaded'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromNames__module_not_loaded', 906, 4, False)
        # Assigning a type to the variable 'self' (line 907)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 907, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromNames__module_not_loaded.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromNames__module_not_loaded.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromNames__module_not_loaded.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromNames__module_not_loaded.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromNames__module_not_loaded')
        Test_TestLoader.test_loadTestsFromNames__module_not_loaded.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromNames__module_not_loaded.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__module_not_loaded.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromNames__module_not_loaded.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromNames__module_not_loaded.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromNames__module_not_loaded.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromNames__module_not_loaded.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromNames__module_not_loaded', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromNames__module_not_loaded', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromNames__module_not_loaded(...)' code ##################

        
        # Assigning a Str to a Name (line 910):
        str_202460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 910, 22), 'str', 'unittest.test.dummy')
        # Assigning a type to the variable 'module_name' (line 910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 910, 8), 'module_name', str_202460)
        
        # Call to pop(...): (line 911)
        # Processing the call arguments (line 911)
        # Getting the type of 'module_name' (line 911)
        module_name_202464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 24), 'module_name', False)
        # Getting the type of 'None' (line 911)
        None_202465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 37), 'None', False)
        # Processing the call keyword arguments (line 911)
        kwargs_202466 = {}
        # Getting the type of 'sys' (line 911)
        sys_202461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 8), 'sys', False)
        # Obtaining the member 'modules' of a type (line 911)
        modules_202462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 911, 8), sys_202461, 'modules')
        # Obtaining the member 'pop' of a type (line 911)
        pop_202463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 911, 8), modules_202462, 'pop')
        # Calling pop(args, kwargs) (line 911)
        pop_call_result_202467 = invoke(stypy.reporting.localization.Localization(__file__, 911, 8), pop_202463, *[module_name_202464, None_202465], **kwargs_202466)
        
        
        # Assigning a Call to a Name (line 913):
        
        # Call to TestLoader(...): (line 913)
        # Processing the call keyword arguments (line 913)
        kwargs_202470 = {}
        # Getting the type of 'unittest' (line 913)
        unittest_202468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 913)
        TestLoader_202469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 913, 17), unittest_202468, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 913)
        TestLoader_call_result_202471 = invoke(stypy.reporting.localization.Localization(__file__, 913, 17), TestLoader_202469, *[], **kwargs_202470)
        
        # Assigning a type to the variable 'loader' (line 913)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 913, 8), 'loader', TestLoader_call_result_202471)
        
        # Try-finally block (line 914)
        
        # Assigning a Call to a Name (line 915):
        
        # Call to loadTestsFromNames(...): (line 915)
        # Processing the call arguments (line 915)
        
        # Obtaining an instance of the builtin type 'list' (line 915)
        list_202474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 915, 46), 'list')
        # Adding type elements to the builtin type 'list' instance (line 915)
        # Adding element type (line 915)
        # Getting the type of 'module_name' (line 915)
        module_name_202475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 47), 'module_name', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 915, 46), list_202474, module_name_202475)
        
        # Processing the call keyword arguments (line 915)
        kwargs_202476 = {}
        # Getting the type of 'loader' (line 915)
        loader_202472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 20), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 915)
        loadTestsFromNames_202473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 915, 20), loader_202472, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 915)
        loadTestsFromNames_call_result_202477 = invoke(stypy.reporting.localization.Localization(__file__, 915, 20), loadTestsFromNames_202473, *[list_202474], **kwargs_202476)
        
        # Assigning a type to the variable 'suite' (line 915)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 915, 12), 'suite', loadTestsFromNames_call_result_202477)
        
        # Call to assertIsInstance(...): (line 917)
        # Processing the call arguments (line 917)
        # Getting the type of 'suite' (line 917)
        suite_202480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 34), 'suite', False)
        # Getting the type of 'loader' (line 917)
        loader_202481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 41), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 917)
        suiteClass_202482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 917, 41), loader_202481, 'suiteClass')
        # Processing the call keyword arguments (line 917)
        kwargs_202483 = {}
        # Getting the type of 'self' (line 917)
        self_202478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 12), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 917)
        assertIsInstance_202479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 917, 12), self_202478, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 917)
        assertIsInstance_call_result_202484 = invoke(stypy.reporting.localization.Localization(__file__, 917, 12), assertIsInstance_202479, *[suite_202480, suiteClass_202482], **kwargs_202483)
        
        
        # Call to assertEqual(...): (line 918)
        # Processing the call arguments (line 918)
        
        # Call to list(...): (line 918)
        # Processing the call arguments (line 918)
        # Getting the type of 'suite' (line 918)
        suite_202488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 34), 'suite', False)
        # Processing the call keyword arguments (line 918)
        kwargs_202489 = {}
        # Getting the type of 'list' (line 918)
        list_202487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 29), 'list', False)
        # Calling list(args, kwargs) (line 918)
        list_call_result_202490 = invoke(stypy.reporting.localization.Localization(__file__, 918, 29), list_202487, *[suite_202488], **kwargs_202489)
        
        
        # Obtaining an instance of the builtin type 'list' (line 918)
        list_202491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 918, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 918)
        # Adding element type (line 918)
        
        # Call to TestSuite(...): (line 918)
        # Processing the call keyword arguments (line 918)
        kwargs_202494 = {}
        # Getting the type of 'unittest' (line 918)
        unittest_202492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 43), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 918)
        TestSuite_202493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 43), unittest_202492, 'TestSuite')
        # Calling TestSuite(args, kwargs) (line 918)
        TestSuite_call_result_202495 = invoke(stypy.reporting.localization.Localization(__file__, 918, 43), TestSuite_202493, *[], **kwargs_202494)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 918, 42), list_202491, TestSuite_call_result_202495)
        
        # Processing the call keyword arguments (line 918)
        kwargs_202496 = {}
        # Getting the type of 'self' (line 918)
        self_202485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 12), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 918)
        assertEqual_202486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 12), self_202485, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 918)
        assertEqual_call_result_202497 = invoke(stypy.reporting.localization.Localization(__file__, 918, 12), assertEqual_202486, *[list_call_result_202490, list_202491], **kwargs_202496)
        
        
        # Call to assertIn(...): (line 921)
        # Processing the call arguments (line 921)
        # Getting the type of 'module_name' (line 921)
        module_name_202500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 26), 'module_name', False)
        # Getting the type of 'sys' (line 921)
        sys_202501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 39), 'sys', False)
        # Obtaining the member 'modules' of a type (line 921)
        modules_202502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 921, 39), sys_202501, 'modules')
        # Processing the call keyword arguments (line 921)
        kwargs_202503 = {}
        # Getting the type of 'self' (line 921)
        self_202498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 12), 'self', False)
        # Obtaining the member 'assertIn' of a type (line 921)
        assertIn_202499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 921, 12), self_202498, 'assertIn')
        # Calling assertIn(args, kwargs) (line 921)
        assertIn_call_result_202504 = invoke(stypy.reporting.localization.Localization(__file__, 921, 12), assertIn_202499, *[module_name_202500, modules_202502], **kwargs_202503)
        
        
        # finally branch of the try-finally block (line 914)
        
        
        # Getting the type of 'module_name' (line 923)
        module_name_202505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 15), 'module_name')
        # Getting the type of 'sys' (line 923)
        sys_202506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 30), 'sys')
        # Obtaining the member 'modules' of a type (line 923)
        modules_202507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 923, 30), sys_202506, 'modules')
        # Applying the binary operator 'in' (line 923)
        result_contains_202508 = python_operator(stypy.reporting.localization.Localization(__file__, 923, 15), 'in', module_name_202505, modules_202507)
        
        # Testing the type of an if condition (line 923)
        if_condition_202509 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 923, 12), result_contains_202508)
        # Assigning a type to the variable 'if_condition_202509' (line 923)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 923, 12), 'if_condition_202509', if_condition_202509)
        # SSA begins for if statement (line 923)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Deleting a member
        # Getting the type of 'sys' (line 924)
        sys_202510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 20), 'sys')
        # Obtaining the member 'modules' of a type (line 924)
        modules_202511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 20), sys_202510, 'modules')
        
        # Obtaining the type of the subscript
        # Getting the type of 'module_name' (line 924)
        module_name_202512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 32), 'module_name')
        # Getting the type of 'sys' (line 924)
        sys_202513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 20), 'sys')
        # Obtaining the member 'modules' of a type (line 924)
        modules_202514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 20), sys_202513, 'modules')
        # Obtaining the member '__getitem__' of a type (line 924)
        getitem___202515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 20), modules_202514, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 924)
        subscript_call_result_202516 = invoke(stypy.reporting.localization.Localization(__file__, 924, 20), getitem___202515, module_name_202512)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 924, 16), modules_202511, subscript_call_result_202516)
        # SSA join for if statement (line 923)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # ################# End of 'test_loadTestsFromNames__module_not_loaded(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromNames__module_not_loaded' in the type store
        # Getting the type of 'stypy_return_type' (line 906)
        stypy_return_type_202517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202517)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromNames__module_not_loaded'
        return stypy_return_type_202517


    @norecursion
    def test_getTestCaseNames(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_getTestCaseNames'
        module_type_store = module_type_store.open_function_context('test_getTestCaseNames', 936, 4, False)
        # Assigning a type to the variable 'self' (line 937)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_getTestCaseNames.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_getTestCaseNames.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_getTestCaseNames.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_getTestCaseNames.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_getTestCaseNames')
        Test_TestLoader.test_getTestCaseNames.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_getTestCaseNames.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_getTestCaseNames.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_getTestCaseNames.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_getTestCaseNames.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_getTestCaseNames.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_getTestCaseNames.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_getTestCaseNames', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_getTestCaseNames', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_getTestCaseNames(...)' code ##################

        # Declaration of the 'Test' class
        # Getting the type of 'unittest' (line 937)
        unittest_202518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 19), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 937)
        TestCase_202519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 937, 19), unittest_202518, 'TestCase')

        class Test(TestCase_202519, ):

            @norecursion
            def test_1(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_1'
                module_type_store = module_type_store.open_function_context('test_1', 938, 12, False)
                # Assigning a type to the variable 'self' (line 939)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 939, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Test.test_1.__dict__.__setitem__('stypy_localization', localization)
                Test.test_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Test.test_1.__dict__.__setitem__('stypy_type_store', module_type_store)
                Test.test_1.__dict__.__setitem__('stypy_function_name', 'Test.test_1')
                Test.test_1.__dict__.__setitem__('stypy_param_names_list', [])
                Test.test_1.__dict__.__setitem__('stypy_varargs_param_name', None)
                Test.test_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Test.test_1.__dict__.__setitem__('stypy_call_defaults', defaults)
                Test.test_1.__dict__.__setitem__('stypy_call_varargs', varargs)
                Test.test_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Test.test_1.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test.test_1', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_1', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_1(...)' code ##################

                pass
                
                # ################# End of 'test_1(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_1' in the type store
                # Getting the type of 'stypy_return_type' (line 938)
                stypy_return_type_202520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202520)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_1'
                return stypy_return_type_202520


            @norecursion
            def test_2(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_2'
                module_type_store = module_type_store.open_function_context('test_2', 939, 12, False)
                # Assigning a type to the variable 'self' (line 940)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 940, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Test.test_2.__dict__.__setitem__('stypy_localization', localization)
                Test.test_2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Test.test_2.__dict__.__setitem__('stypy_type_store', module_type_store)
                Test.test_2.__dict__.__setitem__('stypy_function_name', 'Test.test_2')
                Test.test_2.__dict__.__setitem__('stypy_param_names_list', [])
                Test.test_2.__dict__.__setitem__('stypy_varargs_param_name', None)
                Test.test_2.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Test.test_2.__dict__.__setitem__('stypy_call_defaults', defaults)
                Test.test_2.__dict__.__setitem__('stypy_call_varargs', varargs)
                Test.test_2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Test.test_2.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test.test_2', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_2', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_2(...)' code ##################

                pass
                
                # ################# End of 'test_2(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_2' in the type store
                # Getting the type of 'stypy_return_type' (line 939)
                stypy_return_type_202521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202521)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_2'
                return stypy_return_type_202521


            @norecursion
            def foobar(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'foobar'
                module_type_store = module_type_store.open_function_context('foobar', 940, 12, False)
                # Assigning a type to the variable 'self' (line 941)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 941, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Test.foobar.__dict__.__setitem__('stypy_localization', localization)
                Test.foobar.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Test.foobar.__dict__.__setitem__('stypy_type_store', module_type_store)
                Test.foobar.__dict__.__setitem__('stypy_function_name', 'Test.foobar')
                Test.foobar.__dict__.__setitem__('stypy_param_names_list', [])
                Test.foobar.__dict__.__setitem__('stypy_varargs_param_name', None)
                Test.foobar.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Test.foobar.__dict__.__setitem__('stypy_call_defaults', defaults)
                Test.foobar.__dict__.__setitem__('stypy_call_varargs', varargs)
                Test.foobar.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Test.foobar.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test.foobar', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'foobar', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'foobar(...)' code ##################

                pass
                
                # ################# End of 'foobar(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'foobar' in the type store
                # Getting the type of 'stypy_return_type' (line 940)
                stypy_return_type_202522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202522)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'foobar'
                return stypy_return_type_202522

        
        # Assigning a type to the variable 'Test' (line 937)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 8), 'Test', Test)
        
        # Assigning a Call to a Name (line 942):
        
        # Call to TestLoader(...): (line 942)
        # Processing the call keyword arguments (line 942)
        kwargs_202525 = {}
        # Getting the type of 'unittest' (line 942)
        unittest_202523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 942)
        TestLoader_202524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 17), unittest_202523, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 942)
        TestLoader_call_result_202526 = invoke(stypy.reporting.localization.Localization(__file__, 942, 17), TestLoader_202524, *[], **kwargs_202525)
        
        # Assigning a type to the variable 'loader' (line 942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 8), 'loader', TestLoader_call_result_202526)
        
        # Call to assertEqual(...): (line 944)
        # Processing the call arguments (line 944)
        
        # Call to getTestCaseNames(...): (line 944)
        # Processing the call arguments (line 944)
        # Getting the type of 'Test' (line 944)
        Test_202531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 49), 'Test', False)
        # Processing the call keyword arguments (line 944)
        kwargs_202532 = {}
        # Getting the type of 'loader' (line 944)
        loader_202529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 25), 'loader', False)
        # Obtaining the member 'getTestCaseNames' of a type (line 944)
        getTestCaseNames_202530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 944, 25), loader_202529, 'getTestCaseNames')
        # Calling getTestCaseNames(args, kwargs) (line 944)
        getTestCaseNames_call_result_202533 = invoke(stypy.reporting.localization.Localization(__file__, 944, 25), getTestCaseNames_202530, *[Test_202531], **kwargs_202532)
        
        
        # Obtaining an instance of the builtin type 'list' (line 944)
        list_202534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 944, 56), 'list')
        # Adding type elements to the builtin type 'list' instance (line 944)
        # Adding element type (line 944)
        str_202535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 944, 57), 'str', 'test_1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 944, 56), list_202534, str_202535)
        # Adding element type (line 944)
        str_202536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 944, 67), 'str', 'test_2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 944, 56), list_202534, str_202536)
        
        # Processing the call keyword arguments (line 944)
        kwargs_202537 = {}
        # Getting the type of 'self' (line 944)
        self_202527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 944)
        assertEqual_202528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 944, 8), self_202527, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 944)
        assertEqual_call_result_202538 = invoke(stypy.reporting.localization.Localization(__file__, 944, 8), assertEqual_202528, *[getTestCaseNames_call_result_202533, list_202534], **kwargs_202537)
        
        
        # ################# End of 'test_getTestCaseNames(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_getTestCaseNames' in the type store
        # Getting the type of 'stypy_return_type' (line 936)
        stypy_return_type_202539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202539)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_getTestCaseNames'
        return stypy_return_type_202539


    @norecursion
    def test_getTestCaseNames__no_tests(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_getTestCaseNames__no_tests'
        module_type_store = module_type_store.open_function_context('test_getTestCaseNames__no_tests', 949, 4, False)
        # Assigning a type to the variable 'self' (line 950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_getTestCaseNames__no_tests.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_getTestCaseNames__no_tests.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_getTestCaseNames__no_tests.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_getTestCaseNames__no_tests.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_getTestCaseNames__no_tests')
        Test_TestLoader.test_getTestCaseNames__no_tests.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_getTestCaseNames__no_tests.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_getTestCaseNames__no_tests.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_getTestCaseNames__no_tests.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_getTestCaseNames__no_tests.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_getTestCaseNames__no_tests.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_getTestCaseNames__no_tests.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_getTestCaseNames__no_tests', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_getTestCaseNames__no_tests', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_getTestCaseNames__no_tests(...)' code ##################

        # Declaration of the 'Test' class
        # Getting the type of 'unittest' (line 950)
        unittest_202540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 19), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 950)
        TestCase_202541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 19), unittest_202540, 'TestCase')

        class Test(TestCase_202541, ):

            @norecursion
            def foobar(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'foobar'
                module_type_store = module_type_store.open_function_context('foobar', 951, 12, False)
                # Assigning a type to the variable 'self' (line 952)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Test.foobar.__dict__.__setitem__('stypy_localization', localization)
                Test.foobar.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Test.foobar.__dict__.__setitem__('stypy_type_store', module_type_store)
                Test.foobar.__dict__.__setitem__('stypy_function_name', 'Test.foobar')
                Test.foobar.__dict__.__setitem__('stypy_param_names_list', [])
                Test.foobar.__dict__.__setitem__('stypy_varargs_param_name', None)
                Test.foobar.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Test.foobar.__dict__.__setitem__('stypy_call_defaults', defaults)
                Test.foobar.__dict__.__setitem__('stypy_call_varargs', varargs)
                Test.foobar.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Test.foobar.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test.foobar', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'foobar', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'foobar(...)' code ##################

                pass
                
                # ################# End of 'foobar(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'foobar' in the type store
                # Getting the type of 'stypy_return_type' (line 951)
                stypy_return_type_202542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202542)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'foobar'
                return stypy_return_type_202542

        
        # Assigning a type to the variable 'Test' (line 950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 8), 'Test', Test)
        
        # Assigning a Call to a Name (line 953):
        
        # Call to TestLoader(...): (line 953)
        # Processing the call keyword arguments (line 953)
        kwargs_202545 = {}
        # Getting the type of 'unittest' (line 953)
        unittest_202543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 953)
        TestLoader_202544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 953, 17), unittest_202543, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 953)
        TestLoader_call_result_202546 = invoke(stypy.reporting.localization.Localization(__file__, 953, 17), TestLoader_202544, *[], **kwargs_202545)
        
        # Assigning a type to the variable 'loader' (line 953)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 953, 8), 'loader', TestLoader_call_result_202546)
        
        # Call to assertEqual(...): (line 955)
        # Processing the call arguments (line 955)
        
        # Call to getTestCaseNames(...): (line 955)
        # Processing the call arguments (line 955)
        # Getting the type of 'Test' (line 955)
        Test_202551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 49), 'Test', False)
        # Processing the call keyword arguments (line 955)
        kwargs_202552 = {}
        # Getting the type of 'loader' (line 955)
        loader_202549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 25), 'loader', False)
        # Obtaining the member 'getTestCaseNames' of a type (line 955)
        getTestCaseNames_202550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 955, 25), loader_202549, 'getTestCaseNames')
        # Calling getTestCaseNames(args, kwargs) (line 955)
        getTestCaseNames_call_result_202553 = invoke(stypy.reporting.localization.Localization(__file__, 955, 25), getTestCaseNames_202550, *[Test_202551], **kwargs_202552)
        
        
        # Obtaining an instance of the builtin type 'list' (line 955)
        list_202554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 955, 56), 'list')
        # Adding type elements to the builtin type 'list' instance (line 955)
        
        # Processing the call keyword arguments (line 955)
        kwargs_202555 = {}
        # Getting the type of 'self' (line 955)
        self_202547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 955)
        assertEqual_202548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 955, 8), self_202547, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 955)
        assertEqual_call_result_202556 = invoke(stypy.reporting.localization.Localization(__file__, 955, 8), assertEqual_202548, *[getTestCaseNames_call_result_202553, list_202554], **kwargs_202555)
        
        
        # ################# End of 'test_getTestCaseNames__no_tests(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_getTestCaseNames__no_tests' in the type store
        # Getting the type of 'stypy_return_type' (line 949)
        stypy_return_type_202557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202557)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_getTestCaseNames__no_tests'
        return stypy_return_type_202557


    @norecursion
    def test_getTestCaseNames__not_a_TestCase(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_getTestCaseNames__not_a_TestCase'
        module_type_store = module_type_store.open_function_context('test_getTestCaseNames__not_a_TestCase', 965, 4, False)
        # Assigning a type to the variable 'self' (line 966)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 966, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_getTestCaseNames__not_a_TestCase.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_getTestCaseNames__not_a_TestCase.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_getTestCaseNames__not_a_TestCase.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_getTestCaseNames__not_a_TestCase.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_getTestCaseNames__not_a_TestCase')
        Test_TestLoader.test_getTestCaseNames__not_a_TestCase.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_getTestCaseNames__not_a_TestCase.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_getTestCaseNames__not_a_TestCase.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_getTestCaseNames__not_a_TestCase.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_getTestCaseNames__not_a_TestCase.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_getTestCaseNames__not_a_TestCase.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_getTestCaseNames__not_a_TestCase.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_getTestCaseNames__not_a_TestCase', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_getTestCaseNames__not_a_TestCase', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_getTestCaseNames__not_a_TestCase(...)' code ##################

        # Declaration of the 'BadCase' class
        # Getting the type of 'int' (line 966)
        int_202558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 22), 'int')

        class BadCase(int_202558, ):

            @norecursion
            def test_foo(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_foo'
                module_type_store = module_type_store.open_function_context('test_foo', 967, 12, False)
                # Assigning a type to the variable 'self' (line 968)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                BadCase.test_foo.__dict__.__setitem__('stypy_localization', localization)
                BadCase.test_foo.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                BadCase.test_foo.__dict__.__setitem__('stypy_type_store', module_type_store)
                BadCase.test_foo.__dict__.__setitem__('stypy_function_name', 'BadCase.test_foo')
                BadCase.test_foo.__dict__.__setitem__('stypy_param_names_list', [])
                BadCase.test_foo.__dict__.__setitem__('stypy_varargs_param_name', None)
                BadCase.test_foo.__dict__.__setitem__('stypy_kwargs_param_name', None)
                BadCase.test_foo.__dict__.__setitem__('stypy_call_defaults', defaults)
                BadCase.test_foo.__dict__.__setitem__('stypy_call_varargs', varargs)
                BadCase.test_foo.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                BadCase.test_foo.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'BadCase.test_foo', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_foo', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_foo(...)' code ##################

                pass
                
                # ################# End of 'test_foo(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_foo' in the type store
                # Getting the type of 'stypy_return_type' (line 967)
                stypy_return_type_202559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202559)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_foo'
                return stypy_return_type_202559

        
        # Assigning a type to the variable 'BadCase' (line 966)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 966, 8), 'BadCase', BadCase)
        
        # Assigning a Call to a Name (line 970):
        
        # Call to TestLoader(...): (line 970)
        # Processing the call keyword arguments (line 970)
        kwargs_202562 = {}
        # Getting the type of 'unittest' (line 970)
        unittest_202560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 970)
        TestLoader_202561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 970, 17), unittest_202560, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 970)
        TestLoader_call_result_202563 = invoke(stypy.reporting.localization.Localization(__file__, 970, 17), TestLoader_202561, *[], **kwargs_202562)
        
        # Assigning a type to the variable 'loader' (line 970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 8), 'loader', TestLoader_call_result_202563)
        
        # Assigning a Call to a Name (line 971):
        
        # Call to getTestCaseNames(...): (line 971)
        # Processing the call arguments (line 971)
        # Getting the type of 'BadCase' (line 971)
        BadCase_202566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 40), 'BadCase', False)
        # Processing the call keyword arguments (line 971)
        kwargs_202567 = {}
        # Getting the type of 'loader' (line 971)
        loader_202564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 16), 'loader', False)
        # Obtaining the member 'getTestCaseNames' of a type (line 971)
        getTestCaseNames_202565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 16), loader_202564, 'getTestCaseNames')
        # Calling getTestCaseNames(args, kwargs) (line 971)
        getTestCaseNames_call_result_202568 = invoke(stypy.reporting.localization.Localization(__file__, 971, 16), getTestCaseNames_202565, *[BadCase_202566], **kwargs_202567)
        
        # Assigning a type to the variable 'names' (line 971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'names', getTestCaseNames_call_result_202568)
        
        # Call to assertEqual(...): (line 973)
        # Processing the call arguments (line 973)
        # Getting the type of 'names' (line 973)
        names_202571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 25), 'names', False)
        
        # Obtaining an instance of the builtin type 'list' (line 973)
        list_202572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 973, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 973)
        # Adding element type (line 973)
        str_202573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 973, 33), 'str', 'test_foo')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 973, 32), list_202572, str_202573)
        
        # Processing the call keyword arguments (line 973)
        kwargs_202574 = {}
        # Getting the type of 'self' (line 973)
        self_202569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 973)
        assertEqual_202570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 973, 8), self_202569, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 973)
        assertEqual_call_result_202575 = invoke(stypy.reporting.localization.Localization(__file__, 973, 8), assertEqual_202570, *[names_202571, list_202572], **kwargs_202574)
        
        
        # ################# End of 'test_getTestCaseNames__not_a_TestCase(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_getTestCaseNames__not_a_TestCase' in the type store
        # Getting the type of 'stypy_return_type' (line 965)
        stypy_return_type_202576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202576)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_getTestCaseNames__not_a_TestCase'
        return stypy_return_type_202576


    @norecursion
    def test_getTestCaseNames__inheritance(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_getTestCaseNames__inheritance'
        module_type_store = module_type_store.open_function_context('test_getTestCaseNames__inheritance', 981, 4, False)
        # Assigning a type to the variable 'self' (line 982)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_getTestCaseNames__inheritance.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_getTestCaseNames__inheritance.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_getTestCaseNames__inheritance.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_getTestCaseNames__inheritance.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_getTestCaseNames__inheritance')
        Test_TestLoader.test_getTestCaseNames__inheritance.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_getTestCaseNames__inheritance.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_getTestCaseNames__inheritance.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_getTestCaseNames__inheritance.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_getTestCaseNames__inheritance.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_getTestCaseNames__inheritance.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_getTestCaseNames__inheritance.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_getTestCaseNames__inheritance', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_getTestCaseNames__inheritance', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_getTestCaseNames__inheritance(...)' code ##################

        # Declaration of the 'TestP' class
        # Getting the type of 'unittest' (line 982)
        unittest_202577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 20), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 982)
        TestCase_202578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 982, 20), unittest_202577, 'TestCase')

        class TestP(TestCase_202578, ):

            @norecursion
            def test_1(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_1'
                module_type_store = module_type_store.open_function_context('test_1', 983, 12, False)
                # Assigning a type to the variable 'self' (line 984)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 984, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                TestP.test_1.__dict__.__setitem__('stypy_localization', localization)
                TestP.test_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                TestP.test_1.__dict__.__setitem__('stypy_type_store', module_type_store)
                TestP.test_1.__dict__.__setitem__('stypy_function_name', 'TestP.test_1')
                TestP.test_1.__dict__.__setitem__('stypy_param_names_list', [])
                TestP.test_1.__dict__.__setitem__('stypy_varargs_param_name', None)
                TestP.test_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
                TestP.test_1.__dict__.__setitem__('stypy_call_defaults', defaults)
                TestP.test_1.__dict__.__setitem__('stypy_call_varargs', varargs)
                TestP.test_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                TestP.test_1.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestP.test_1', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_1', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_1(...)' code ##################

                pass
                
                # ################# End of 'test_1(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_1' in the type store
                # Getting the type of 'stypy_return_type' (line 983)
                stypy_return_type_202579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202579)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_1'
                return stypy_return_type_202579


            @norecursion
            def test_2(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_2'
                module_type_store = module_type_store.open_function_context('test_2', 984, 12, False)
                # Assigning a type to the variable 'self' (line 985)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 985, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                TestP.test_2.__dict__.__setitem__('stypy_localization', localization)
                TestP.test_2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                TestP.test_2.__dict__.__setitem__('stypy_type_store', module_type_store)
                TestP.test_2.__dict__.__setitem__('stypy_function_name', 'TestP.test_2')
                TestP.test_2.__dict__.__setitem__('stypy_param_names_list', [])
                TestP.test_2.__dict__.__setitem__('stypy_varargs_param_name', None)
                TestP.test_2.__dict__.__setitem__('stypy_kwargs_param_name', None)
                TestP.test_2.__dict__.__setitem__('stypy_call_defaults', defaults)
                TestP.test_2.__dict__.__setitem__('stypy_call_varargs', varargs)
                TestP.test_2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                TestP.test_2.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestP.test_2', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_2', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_2(...)' code ##################

                pass
                
                # ################# End of 'test_2(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_2' in the type store
                # Getting the type of 'stypy_return_type' (line 984)
                stypy_return_type_202580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202580)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_2'
                return stypy_return_type_202580


            @norecursion
            def foobar(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'foobar'
                module_type_store = module_type_store.open_function_context('foobar', 985, 12, False)
                # Assigning a type to the variable 'self' (line 986)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 986, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                TestP.foobar.__dict__.__setitem__('stypy_localization', localization)
                TestP.foobar.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                TestP.foobar.__dict__.__setitem__('stypy_type_store', module_type_store)
                TestP.foobar.__dict__.__setitem__('stypy_function_name', 'TestP.foobar')
                TestP.foobar.__dict__.__setitem__('stypy_param_names_list', [])
                TestP.foobar.__dict__.__setitem__('stypy_varargs_param_name', None)
                TestP.foobar.__dict__.__setitem__('stypy_kwargs_param_name', None)
                TestP.foobar.__dict__.__setitem__('stypy_call_defaults', defaults)
                TestP.foobar.__dict__.__setitem__('stypy_call_varargs', varargs)
                TestP.foobar.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                TestP.foobar.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestP.foobar', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'foobar', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'foobar(...)' code ##################

                pass
                
                # ################# End of 'foobar(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'foobar' in the type store
                # Getting the type of 'stypy_return_type' (line 985)
                stypy_return_type_202581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202581)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'foobar'
                return stypy_return_type_202581

        
        # Assigning a type to the variable 'TestP' (line 982)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 8), 'TestP', TestP)
        # Declaration of the 'TestC' class
        # Getting the type of 'TestP' (line 987)
        TestP_202582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 20), 'TestP')

        class TestC(TestP_202582, ):

            @norecursion
            def test_1(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_1'
                module_type_store = module_type_store.open_function_context('test_1', 988, 12, False)
                # Assigning a type to the variable 'self' (line 989)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 989, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                TestC.test_1.__dict__.__setitem__('stypy_localization', localization)
                TestC.test_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                TestC.test_1.__dict__.__setitem__('stypy_type_store', module_type_store)
                TestC.test_1.__dict__.__setitem__('stypy_function_name', 'TestC.test_1')
                TestC.test_1.__dict__.__setitem__('stypy_param_names_list', [])
                TestC.test_1.__dict__.__setitem__('stypy_varargs_param_name', None)
                TestC.test_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
                TestC.test_1.__dict__.__setitem__('stypy_call_defaults', defaults)
                TestC.test_1.__dict__.__setitem__('stypy_call_varargs', varargs)
                TestC.test_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                TestC.test_1.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestC.test_1', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_1', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_1(...)' code ##################

                pass
                
                # ################# End of 'test_1(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_1' in the type store
                # Getting the type of 'stypy_return_type' (line 988)
                stypy_return_type_202583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202583)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_1'
                return stypy_return_type_202583


            @norecursion
            def test_3(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_3'
                module_type_store = module_type_store.open_function_context('test_3', 989, 12, False)
                # Assigning a type to the variable 'self' (line 990)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 990, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                TestC.test_3.__dict__.__setitem__('stypy_localization', localization)
                TestC.test_3.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                TestC.test_3.__dict__.__setitem__('stypy_type_store', module_type_store)
                TestC.test_3.__dict__.__setitem__('stypy_function_name', 'TestC.test_3')
                TestC.test_3.__dict__.__setitem__('stypy_param_names_list', [])
                TestC.test_3.__dict__.__setitem__('stypy_varargs_param_name', None)
                TestC.test_3.__dict__.__setitem__('stypy_kwargs_param_name', None)
                TestC.test_3.__dict__.__setitem__('stypy_call_defaults', defaults)
                TestC.test_3.__dict__.__setitem__('stypy_call_varargs', varargs)
                TestC.test_3.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                TestC.test_3.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'TestC.test_3', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_3', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_3(...)' code ##################

                pass
                
                # ################# End of 'test_3(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_3' in the type store
                # Getting the type of 'stypy_return_type' (line 989)
                stypy_return_type_202584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202584)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_3'
                return stypy_return_type_202584

        
        # Assigning a type to the variable 'TestC' (line 987)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 987, 8), 'TestC', TestC)
        
        # Assigning a Call to a Name (line 991):
        
        # Call to TestLoader(...): (line 991)
        # Processing the call keyword arguments (line 991)
        kwargs_202587 = {}
        # Getting the type of 'unittest' (line 991)
        unittest_202585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 991)
        TestLoader_202586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 991, 17), unittest_202585, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 991)
        TestLoader_call_result_202588 = invoke(stypy.reporting.localization.Localization(__file__, 991, 17), TestLoader_202586, *[], **kwargs_202587)
        
        # Assigning a type to the variable 'loader' (line 991)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 991, 8), 'loader', TestLoader_call_result_202588)
        
        # Assigning a List to a Name (line 993):
        
        # Obtaining an instance of the builtin type 'list' (line 993)
        list_202589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 993, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 993)
        # Adding element type (line 993)
        str_202590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 993, 17), 'str', 'test_1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 993, 16), list_202589, str_202590)
        # Adding element type (line 993)
        str_202591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 993, 27), 'str', 'test_2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 993, 16), list_202589, str_202591)
        # Adding element type (line 993)
        str_202592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 993, 37), 'str', 'test_3')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 993, 16), list_202589, str_202592)
        
        # Assigning a type to the variable 'names' (line 993)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 993, 8), 'names', list_202589)
        
        # Call to assertEqual(...): (line 994)
        # Processing the call arguments (line 994)
        
        # Call to getTestCaseNames(...): (line 994)
        # Processing the call arguments (line 994)
        # Getting the type of 'TestC' (line 994)
        TestC_202597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 49), 'TestC', False)
        # Processing the call keyword arguments (line 994)
        kwargs_202598 = {}
        # Getting the type of 'loader' (line 994)
        loader_202595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 25), 'loader', False)
        # Obtaining the member 'getTestCaseNames' of a type (line 994)
        getTestCaseNames_202596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 25), loader_202595, 'getTestCaseNames')
        # Calling getTestCaseNames(args, kwargs) (line 994)
        getTestCaseNames_call_result_202599 = invoke(stypy.reporting.localization.Localization(__file__, 994, 25), getTestCaseNames_202596, *[TestC_202597], **kwargs_202598)
        
        # Getting the type of 'names' (line 994)
        names_202600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 57), 'names', False)
        # Processing the call keyword arguments (line 994)
        kwargs_202601 = {}
        # Getting the type of 'self' (line 994)
        self_202593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 994)
        assertEqual_202594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 8), self_202593, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 994)
        assertEqual_call_result_202602 = invoke(stypy.reporting.localization.Localization(__file__, 994, 8), assertEqual_202594, *[getTestCaseNames_call_result_202599, names_202600], **kwargs_202601)
        
        
        # ################# End of 'test_getTestCaseNames__inheritance(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_getTestCaseNames__inheritance' in the type store
        # Getting the type of 'stypy_return_type' (line 981)
        stypy_return_type_202603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202603)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_getTestCaseNames__inheritance'
        return stypy_return_type_202603


    @norecursion
    def test_testMethodPrefix__loadTestsFromTestCase(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_testMethodPrefix__loadTestsFromTestCase'
        module_type_store = module_type_store.open_function_context('test_testMethodPrefix__loadTestsFromTestCase', 1007, 4, False)
        # Assigning a type to the variable 'self' (line 1008)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1008, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_testMethodPrefix__loadTestsFromTestCase.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromTestCase.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromTestCase.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromTestCase.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_testMethodPrefix__loadTestsFromTestCase')
        Test_TestLoader.test_testMethodPrefix__loadTestsFromTestCase.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_testMethodPrefix__loadTestsFromTestCase.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromTestCase.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromTestCase.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromTestCase.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromTestCase.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromTestCase.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_testMethodPrefix__loadTestsFromTestCase', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_testMethodPrefix__loadTestsFromTestCase', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_testMethodPrefix__loadTestsFromTestCase(...)' code ##################

        # Declaration of the 'Foo' class
        # Getting the type of 'unittest' (line 1008)
        unittest_202604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 18), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 1008)
        TestCase_202605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1008, 18), unittest_202604, 'TestCase')

        class Foo(TestCase_202605, ):

            @norecursion
            def test_1(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_1'
                module_type_store = module_type_store.open_function_context('test_1', 1009, 12, False)
                # Assigning a type to the variable 'self' (line 1010)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1010, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_1.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_1.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_1.__dict__.__setitem__('stypy_function_name', 'Foo.test_1')
                Foo.test_1.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_1.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_1.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_1.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_1', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_1', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_1(...)' code ##################

                pass
                
                # ################# End of 'test_1(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_1' in the type store
                # Getting the type of 'stypy_return_type' (line 1009)
                stypy_return_type_202606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202606)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_1'
                return stypy_return_type_202606


            @norecursion
            def test_2(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_2'
                module_type_store = module_type_store.open_function_context('test_2', 1010, 12, False)
                # Assigning a type to the variable 'self' (line 1011)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1011, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_2.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_2.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_2.__dict__.__setitem__('stypy_function_name', 'Foo.test_2')
                Foo.test_2.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_2.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_2.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_2.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_2', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_2', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_2(...)' code ##################

                pass
                
                # ################# End of 'test_2(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_2' in the type store
                # Getting the type of 'stypy_return_type' (line 1010)
                stypy_return_type_202607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202607)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_2'
                return stypy_return_type_202607


            @norecursion
            def foo_bar(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'foo_bar'
                module_type_store = module_type_store.open_function_context('foo_bar', 1011, 12, False)
                # Assigning a type to the variable 'self' (line 1012)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1012, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.foo_bar.__dict__.__setitem__('stypy_localization', localization)
                Foo.foo_bar.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.foo_bar.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.foo_bar.__dict__.__setitem__('stypy_function_name', 'Foo.foo_bar')
                Foo.foo_bar.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.foo_bar.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.foo_bar.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.foo_bar.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.foo_bar', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'foo_bar', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'foo_bar(...)' code ##################

                pass
                
                # ################# End of 'foo_bar(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'foo_bar' in the type store
                # Getting the type of 'stypy_return_type' (line 1011)
                stypy_return_type_202608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202608)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'foo_bar'
                return stypy_return_type_202608

        
        # Assigning a type to the variable 'Foo' (line 1008)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1008, 8), 'Foo', Foo)
        
        # Assigning a Call to a Name (line 1013):
        
        # Call to TestSuite(...): (line 1013)
        # Processing the call arguments (line 1013)
        
        # Obtaining an instance of the builtin type 'list' (line 1013)
        list_202611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1013, 37), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1013)
        # Adding element type (line 1013)
        
        # Call to Foo(...): (line 1013)
        # Processing the call arguments (line 1013)
        str_202613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1013, 42), 'str', 'foo_bar')
        # Processing the call keyword arguments (line 1013)
        kwargs_202614 = {}
        # Getting the type of 'Foo' (line 1013)
        Foo_202612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 38), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1013)
        Foo_call_result_202615 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 38), Foo_202612, *[str_202613], **kwargs_202614)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1013, 37), list_202611, Foo_call_result_202615)
        
        # Processing the call keyword arguments (line 1013)
        kwargs_202616 = {}
        # Getting the type of 'unittest' (line 1013)
        unittest_202609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 18), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 1013)
        TestSuite_202610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 18), unittest_202609, 'TestSuite')
        # Calling TestSuite(args, kwargs) (line 1013)
        TestSuite_call_result_202617 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 18), TestSuite_202610, *[list_202611], **kwargs_202616)
        
        # Assigning a type to the variable 'tests_1' (line 1013)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1013, 8), 'tests_1', TestSuite_call_result_202617)
        
        # Assigning a Call to a Name (line 1014):
        
        # Call to TestSuite(...): (line 1014)
        # Processing the call arguments (line 1014)
        
        # Obtaining an instance of the builtin type 'list' (line 1014)
        list_202620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1014, 37), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1014)
        # Adding element type (line 1014)
        
        # Call to Foo(...): (line 1014)
        # Processing the call arguments (line 1014)
        str_202622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1014, 42), 'str', 'test_1')
        # Processing the call keyword arguments (line 1014)
        kwargs_202623 = {}
        # Getting the type of 'Foo' (line 1014)
        Foo_202621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 38), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1014)
        Foo_call_result_202624 = invoke(stypy.reporting.localization.Localization(__file__, 1014, 38), Foo_202621, *[str_202622], **kwargs_202623)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1014, 37), list_202620, Foo_call_result_202624)
        # Adding element type (line 1014)
        
        # Call to Foo(...): (line 1014)
        # Processing the call arguments (line 1014)
        str_202626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1014, 57), 'str', 'test_2')
        # Processing the call keyword arguments (line 1014)
        kwargs_202627 = {}
        # Getting the type of 'Foo' (line 1014)
        Foo_202625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 53), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1014)
        Foo_call_result_202628 = invoke(stypy.reporting.localization.Localization(__file__, 1014, 53), Foo_202625, *[str_202626], **kwargs_202627)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1014, 37), list_202620, Foo_call_result_202628)
        
        # Processing the call keyword arguments (line 1014)
        kwargs_202629 = {}
        # Getting the type of 'unittest' (line 1014)
        unittest_202618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 18), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 1014)
        TestSuite_202619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1014, 18), unittest_202618, 'TestSuite')
        # Calling TestSuite(args, kwargs) (line 1014)
        TestSuite_call_result_202630 = invoke(stypy.reporting.localization.Localization(__file__, 1014, 18), TestSuite_202619, *[list_202620], **kwargs_202629)
        
        # Assigning a type to the variable 'tests_2' (line 1014)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1014, 8), 'tests_2', TestSuite_call_result_202630)
        
        # Assigning a Call to a Name (line 1016):
        
        # Call to TestLoader(...): (line 1016)
        # Processing the call keyword arguments (line 1016)
        kwargs_202633 = {}
        # Getting the type of 'unittest' (line 1016)
        unittest_202631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 1016)
        TestLoader_202632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1016, 17), unittest_202631, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 1016)
        TestLoader_call_result_202634 = invoke(stypy.reporting.localization.Localization(__file__, 1016, 17), TestLoader_202632, *[], **kwargs_202633)
        
        # Assigning a type to the variable 'loader' (line 1016)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1016, 8), 'loader', TestLoader_call_result_202634)
        
        # Assigning a Str to a Attribute (line 1017):
        str_202635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1017, 34), 'str', 'foo')
        # Getting the type of 'loader' (line 1017)
        loader_202636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 8), 'loader')
        # Setting the type of the member 'testMethodPrefix' of a type (line 1017)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1017, 8), loader_202636, 'testMethodPrefix', str_202635)
        
        # Call to assertEqual(...): (line 1018)
        # Processing the call arguments (line 1018)
        
        # Call to loadTestsFromTestCase(...): (line 1018)
        # Processing the call arguments (line 1018)
        # Getting the type of 'Foo' (line 1018)
        Foo_202641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 54), 'Foo', False)
        # Processing the call keyword arguments (line 1018)
        kwargs_202642 = {}
        # Getting the type of 'loader' (line 1018)
        loader_202639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 25), 'loader', False)
        # Obtaining the member 'loadTestsFromTestCase' of a type (line 1018)
        loadTestsFromTestCase_202640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1018, 25), loader_202639, 'loadTestsFromTestCase')
        # Calling loadTestsFromTestCase(args, kwargs) (line 1018)
        loadTestsFromTestCase_call_result_202643 = invoke(stypy.reporting.localization.Localization(__file__, 1018, 25), loadTestsFromTestCase_202640, *[Foo_202641], **kwargs_202642)
        
        # Getting the type of 'tests_1' (line 1018)
        tests_1_202644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 60), 'tests_1', False)
        # Processing the call keyword arguments (line 1018)
        kwargs_202645 = {}
        # Getting the type of 'self' (line 1018)
        self_202637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 1018)
        assertEqual_202638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1018, 8), self_202637, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 1018)
        assertEqual_call_result_202646 = invoke(stypy.reporting.localization.Localization(__file__, 1018, 8), assertEqual_202638, *[loadTestsFromTestCase_call_result_202643, tests_1_202644], **kwargs_202645)
        
        
        # Assigning a Str to a Attribute (line 1020):
        str_202647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 34), 'str', 'test')
        # Getting the type of 'loader' (line 1020)
        loader_202648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 8), 'loader')
        # Setting the type of the member 'testMethodPrefix' of a type (line 1020)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 8), loader_202648, 'testMethodPrefix', str_202647)
        
        # Call to assertEqual(...): (line 1021)
        # Processing the call arguments (line 1021)
        
        # Call to loadTestsFromTestCase(...): (line 1021)
        # Processing the call arguments (line 1021)
        # Getting the type of 'Foo' (line 1021)
        Foo_202653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 54), 'Foo', False)
        # Processing the call keyword arguments (line 1021)
        kwargs_202654 = {}
        # Getting the type of 'loader' (line 1021)
        loader_202651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 25), 'loader', False)
        # Obtaining the member 'loadTestsFromTestCase' of a type (line 1021)
        loadTestsFromTestCase_202652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1021, 25), loader_202651, 'loadTestsFromTestCase')
        # Calling loadTestsFromTestCase(args, kwargs) (line 1021)
        loadTestsFromTestCase_call_result_202655 = invoke(stypy.reporting.localization.Localization(__file__, 1021, 25), loadTestsFromTestCase_202652, *[Foo_202653], **kwargs_202654)
        
        # Getting the type of 'tests_2' (line 1021)
        tests_2_202656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 60), 'tests_2', False)
        # Processing the call keyword arguments (line 1021)
        kwargs_202657 = {}
        # Getting the type of 'self' (line 1021)
        self_202649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 1021)
        assertEqual_202650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1021, 8), self_202649, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 1021)
        assertEqual_call_result_202658 = invoke(stypy.reporting.localization.Localization(__file__, 1021, 8), assertEqual_202650, *[loadTestsFromTestCase_call_result_202655, tests_2_202656], **kwargs_202657)
        
        
        # ################# End of 'test_testMethodPrefix__loadTestsFromTestCase(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_testMethodPrefix__loadTestsFromTestCase' in the type store
        # Getting the type of 'stypy_return_type' (line 1007)
        stypy_return_type_202659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202659)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_testMethodPrefix__loadTestsFromTestCase'
        return stypy_return_type_202659


    @norecursion
    def test_testMethodPrefix__loadTestsFromModule(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_testMethodPrefix__loadTestsFromModule'
        module_type_store = module_type_store.open_function_context('test_testMethodPrefix__loadTestsFromModule', 1028, 4, False)
        # Assigning a type to the variable 'self' (line 1029)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1029, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_testMethodPrefix__loadTestsFromModule.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromModule.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromModule.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromModule.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_testMethodPrefix__loadTestsFromModule')
        Test_TestLoader.test_testMethodPrefix__loadTestsFromModule.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_testMethodPrefix__loadTestsFromModule.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromModule.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromModule.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromModule.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromModule.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromModule.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_testMethodPrefix__loadTestsFromModule', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_testMethodPrefix__loadTestsFromModule', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_testMethodPrefix__loadTestsFromModule(...)' code ##################

        
        # Assigning a Call to a Name (line 1029):
        
        # Call to ModuleType(...): (line 1029)
        # Processing the call arguments (line 1029)
        str_202662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1029, 29), 'str', 'm')
        # Processing the call keyword arguments (line 1029)
        kwargs_202663 = {}
        # Getting the type of 'types' (line 1029)
        types_202660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 1029)
        ModuleType_202661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1029, 12), types_202660, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 1029)
        ModuleType_call_result_202664 = invoke(stypy.reporting.localization.Localization(__file__, 1029, 12), ModuleType_202661, *[str_202662], **kwargs_202663)
        
        # Assigning a type to the variable 'm' (line 1029)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1029, 8), 'm', ModuleType_call_result_202664)
        # Declaration of the 'Foo' class
        # Getting the type of 'unittest' (line 1030)
        unittest_202665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 18), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 1030)
        TestCase_202666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1030, 18), unittest_202665, 'TestCase')

        class Foo(TestCase_202666, ):

            @norecursion
            def test_1(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_1'
                module_type_store = module_type_store.open_function_context('test_1', 1031, 12, False)
                # Assigning a type to the variable 'self' (line 1032)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1032, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_1.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_1.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_1.__dict__.__setitem__('stypy_function_name', 'Foo.test_1')
                Foo.test_1.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_1.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_1.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_1.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_1', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_1', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_1(...)' code ##################

                pass
                
                # ################# End of 'test_1(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_1' in the type store
                # Getting the type of 'stypy_return_type' (line 1031)
                stypy_return_type_202667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202667)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_1'
                return stypy_return_type_202667


            @norecursion
            def test_2(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_2'
                module_type_store = module_type_store.open_function_context('test_2', 1032, 12, False)
                # Assigning a type to the variable 'self' (line 1033)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1033, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_2.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_2.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_2.__dict__.__setitem__('stypy_function_name', 'Foo.test_2')
                Foo.test_2.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_2.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_2.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_2.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_2', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_2', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_2(...)' code ##################

                pass
                
                # ################# End of 'test_2(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_2' in the type store
                # Getting the type of 'stypy_return_type' (line 1032)
                stypy_return_type_202668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202668)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_2'
                return stypy_return_type_202668


            @norecursion
            def foo_bar(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'foo_bar'
                module_type_store = module_type_store.open_function_context('foo_bar', 1033, 12, False)
                # Assigning a type to the variable 'self' (line 1034)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1034, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.foo_bar.__dict__.__setitem__('stypy_localization', localization)
                Foo.foo_bar.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.foo_bar.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.foo_bar.__dict__.__setitem__('stypy_function_name', 'Foo.foo_bar')
                Foo.foo_bar.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.foo_bar.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.foo_bar.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.foo_bar.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.foo_bar', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'foo_bar', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'foo_bar(...)' code ##################

                pass
                
                # ################# End of 'foo_bar(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'foo_bar' in the type store
                # Getting the type of 'stypy_return_type' (line 1033)
                stypy_return_type_202669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202669)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'foo_bar'
                return stypy_return_type_202669

        
        # Assigning a type to the variable 'Foo' (line 1030)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1030, 8), 'Foo', Foo)
        
        # Assigning a Name to a Attribute (line 1034):
        # Getting the type of 'Foo' (line 1034)
        Foo_202670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 16), 'Foo')
        # Getting the type of 'm' (line 1034)
        m_202671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 8), 'm')
        # Setting the type of the member 'Foo' of a type (line 1034)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1034, 8), m_202671, 'Foo', Foo_202670)
        
        # Assigning a List to a Name (line 1036):
        
        # Obtaining an instance of the builtin type 'list' (line 1036)
        list_202672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1036, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1036)
        # Adding element type (line 1036)
        
        # Call to TestSuite(...): (line 1036)
        # Processing the call arguments (line 1036)
        
        # Obtaining an instance of the builtin type 'list' (line 1036)
        list_202675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1036, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1036)
        # Adding element type (line 1036)
        
        # Call to Foo(...): (line 1036)
        # Processing the call arguments (line 1036)
        str_202677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1036, 43), 'str', 'foo_bar')
        # Processing the call keyword arguments (line 1036)
        kwargs_202678 = {}
        # Getting the type of 'Foo' (line 1036)
        Foo_202676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 39), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1036)
        Foo_call_result_202679 = invoke(stypy.reporting.localization.Localization(__file__, 1036, 39), Foo_202676, *[str_202677], **kwargs_202678)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1036, 38), list_202675, Foo_call_result_202679)
        
        # Processing the call keyword arguments (line 1036)
        kwargs_202680 = {}
        # Getting the type of 'unittest' (line 1036)
        unittest_202673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 19), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 1036)
        TestSuite_202674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1036, 19), unittest_202673, 'TestSuite')
        # Calling TestSuite(args, kwargs) (line 1036)
        TestSuite_call_result_202681 = invoke(stypy.reporting.localization.Localization(__file__, 1036, 19), TestSuite_202674, *[list_202675], **kwargs_202680)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1036, 18), list_202672, TestSuite_call_result_202681)
        
        # Assigning a type to the variable 'tests_1' (line 1036)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1036, 8), 'tests_1', list_202672)
        
        # Assigning a List to a Name (line 1037):
        
        # Obtaining an instance of the builtin type 'list' (line 1037)
        list_202682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1037)
        # Adding element type (line 1037)
        
        # Call to TestSuite(...): (line 1037)
        # Processing the call arguments (line 1037)
        
        # Obtaining an instance of the builtin type 'list' (line 1037)
        list_202685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1037)
        # Adding element type (line 1037)
        
        # Call to Foo(...): (line 1037)
        # Processing the call arguments (line 1037)
        str_202687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 43), 'str', 'test_1')
        # Processing the call keyword arguments (line 1037)
        kwargs_202688 = {}
        # Getting the type of 'Foo' (line 1037)
        Foo_202686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 39), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1037)
        Foo_call_result_202689 = invoke(stypy.reporting.localization.Localization(__file__, 1037, 39), Foo_202686, *[str_202687], **kwargs_202688)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1037, 38), list_202685, Foo_call_result_202689)
        # Adding element type (line 1037)
        
        # Call to Foo(...): (line 1037)
        # Processing the call arguments (line 1037)
        str_202691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 58), 'str', 'test_2')
        # Processing the call keyword arguments (line 1037)
        kwargs_202692 = {}
        # Getting the type of 'Foo' (line 1037)
        Foo_202690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 54), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1037)
        Foo_call_result_202693 = invoke(stypy.reporting.localization.Localization(__file__, 1037, 54), Foo_202690, *[str_202691], **kwargs_202692)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1037, 38), list_202685, Foo_call_result_202693)
        
        # Processing the call keyword arguments (line 1037)
        kwargs_202694 = {}
        # Getting the type of 'unittest' (line 1037)
        unittest_202683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 19), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 1037)
        TestSuite_202684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 19), unittest_202683, 'TestSuite')
        # Calling TestSuite(args, kwargs) (line 1037)
        TestSuite_call_result_202695 = invoke(stypy.reporting.localization.Localization(__file__, 1037, 19), TestSuite_202684, *[list_202685], **kwargs_202694)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1037, 18), list_202682, TestSuite_call_result_202695)
        
        # Assigning a type to the variable 'tests_2' (line 1037)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1037, 8), 'tests_2', list_202682)
        
        # Assigning a Call to a Name (line 1039):
        
        # Call to TestLoader(...): (line 1039)
        # Processing the call keyword arguments (line 1039)
        kwargs_202698 = {}
        # Getting the type of 'unittest' (line 1039)
        unittest_202696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 1039)
        TestLoader_202697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 17), unittest_202696, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 1039)
        TestLoader_call_result_202699 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 17), TestLoader_202697, *[], **kwargs_202698)
        
        # Assigning a type to the variable 'loader' (line 1039)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1039, 8), 'loader', TestLoader_call_result_202699)
        
        # Assigning a Str to a Attribute (line 1040):
        str_202700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 34), 'str', 'foo')
        # Getting the type of 'loader' (line 1040)
        loader_202701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 8), 'loader')
        # Setting the type of the member 'testMethodPrefix' of a type (line 1040)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 8), loader_202701, 'testMethodPrefix', str_202700)
        
        # Call to assertEqual(...): (line 1041)
        # Processing the call arguments (line 1041)
        
        # Call to list(...): (line 1041)
        # Processing the call arguments (line 1041)
        
        # Call to loadTestsFromModule(...): (line 1041)
        # Processing the call arguments (line 1041)
        # Getting the type of 'm' (line 1041)
        m_202707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 57), 'm', False)
        # Processing the call keyword arguments (line 1041)
        kwargs_202708 = {}
        # Getting the type of 'loader' (line 1041)
        loader_202705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 30), 'loader', False)
        # Obtaining the member 'loadTestsFromModule' of a type (line 1041)
        loadTestsFromModule_202706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 30), loader_202705, 'loadTestsFromModule')
        # Calling loadTestsFromModule(args, kwargs) (line 1041)
        loadTestsFromModule_call_result_202709 = invoke(stypy.reporting.localization.Localization(__file__, 1041, 30), loadTestsFromModule_202706, *[m_202707], **kwargs_202708)
        
        # Processing the call keyword arguments (line 1041)
        kwargs_202710 = {}
        # Getting the type of 'list' (line 1041)
        list_202704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 25), 'list', False)
        # Calling list(args, kwargs) (line 1041)
        list_call_result_202711 = invoke(stypy.reporting.localization.Localization(__file__, 1041, 25), list_202704, *[loadTestsFromModule_call_result_202709], **kwargs_202710)
        
        # Getting the type of 'tests_1' (line 1041)
        tests_1_202712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 62), 'tests_1', False)
        # Processing the call keyword arguments (line 1041)
        kwargs_202713 = {}
        # Getting the type of 'self' (line 1041)
        self_202702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 1041)
        assertEqual_202703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 8), self_202702, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 1041)
        assertEqual_call_result_202714 = invoke(stypy.reporting.localization.Localization(__file__, 1041, 8), assertEqual_202703, *[list_call_result_202711, tests_1_202712], **kwargs_202713)
        
        
        # Assigning a Str to a Attribute (line 1043):
        str_202715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 34), 'str', 'test')
        # Getting the type of 'loader' (line 1043)
        loader_202716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 8), 'loader')
        # Setting the type of the member 'testMethodPrefix' of a type (line 1043)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1043, 8), loader_202716, 'testMethodPrefix', str_202715)
        
        # Call to assertEqual(...): (line 1044)
        # Processing the call arguments (line 1044)
        
        # Call to list(...): (line 1044)
        # Processing the call arguments (line 1044)
        
        # Call to loadTestsFromModule(...): (line 1044)
        # Processing the call arguments (line 1044)
        # Getting the type of 'm' (line 1044)
        m_202722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 57), 'm', False)
        # Processing the call keyword arguments (line 1044)
        kwargs_202723 = {}
        # Getting the type of 'loader' (line 1044)
        loader_202720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 30), 'loader', False)
        # Obtaining the member 'loadTestsFromModule' of a type (line 1044)
        loadTestsFromModule_202721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1044, 30), loader_202720, 'loadTestsFromModule')
        # Calling loadTestsFromModule(args, kwargs) (line 1044)
        loadTestsFromModule_call_result_202724 = invoke(stypy.reporting.localization.Localization(__file__, 1044, 30), loadTestsFromModule_202721, *[m_202722], **kwargs_202723)
        
        # Processing the call keyword arguments (line 1044)
        kwargs_202725 = {}
        # Getting the type of 'list' (line 1044)
        list_202719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 25), 'list', False)
        # Calling list(args, kwargs) (line 1044)
        list_call_result_202726 = invoke(stypy.reporting.localization.Localization(__file__, 1044, 25), list_202719, *[loadTestsFromModule_call_result_202724], **kwargs_202725)
        
        # Getting the type of 'tests_2' (line 1044)
        tests_2_202727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 62), 'tests_2', False)
        # Processing the call keyword arguments (line 1044)
        kwargs_202728 = {}
        # Getting the type of 'self' (line 1044)
        self_202717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 1044)
        assertEqual_202718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1044, 8), self_202717, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 1044)
        assertEqual_call_result_202729 = invoke(stypy.reporting.localization.Localization(__file__, 1044, 8), assertEqual_202718, *[list_call_result_202726, tests_2_202727], **kwargs_202728)
        
        
        # ################# End of 'test_testMethodPrefix__loadTestsFromModule(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_testMethodPrefix__loadTestsFromModule' in the type store
        # Getting the type of 'stypy_return_type' (line 1028)
        stypy_return_type_202730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202730)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_testMethodPrefix__loadTestsFromModule'
        return stypy_return_type_202730


    @norecursion
    def test_testMethodPrefix__loadTestsFromName(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_testMethodPrefix__loadTestsFromName'
        module_type_store = module_type_store.open_function_context('test_testMethodPrefix__loadTestsFromName', 1051, 4, False)
        # Assigning a type to the variable 'self' (line 1052)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1052, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_testMethodPrefix__loadTestsFromName.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromName.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromName.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromName.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_testMethodPrefix__loadTestsFromName')
        Test_TestLoader.test_testMethodPrefix__loadTestsFromName.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_testMethodPrefix__loadTestsFromName.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromName.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromName.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromName.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromName.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromName.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_testMethodPrefix__loadTestsFromName', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_testMethodPrefix__loadTestsFromName', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_testMethodPrefix__loadTestsFromName(...)' code ##################

        
        # Assigning a Call to a Name (line 1052):
        
        # Call to ModuleType(...): (line 1052)
        # Processing the call arguments (line 1052)
        str_202733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1052, 29), 'str', 'm')
        # Processing the call keyword arguments (line 1052)
        kwargs_202734 = {}
        # Getting the type of 'types' (line 1052)
        types_202731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 1052)
        ModuleType_202732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 12), types_202731, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 1052)
        ModuleType_call_result_202735 = invoke(stypy.reporting.localization.Localization(__file__, 1052, 12), ModuleType_202732, *[str_202733], **kwargs_202734)
        
        # Assigning a type to the variable 'm' (line 1052)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1052, 8), 'm', ModuleType_call_result_202735)
        # Declaration of the 'Foo' class
        # Getting the type of 'unittest' (line 1053)
        unittest_202736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 18), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 1053)
        TestCase_202737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1053, 18), unittest_202736, 'TestCase')

        class Foo(TestCase_202737, ):

            @norecursion
            def test_1(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_1'
                module_type_store = module_type_store.open_function_context('test_1', 1054, 12, False)
                # Assigning a type to the variable 'self' (line 1055)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1055, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_1.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_1.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_1.__dict__.__setitem__('stypy_function_name', 'Foo.test_1')
                Foo.test_1.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_1.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_1.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_1.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_1', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_1', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_1(...)' code ##################

                pass
                
                # ################# End of 'test_1(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_1' in the type store
                # Getting the type of 'stypy_return_type' (line 1054)
                stypy_return_type_202738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202738)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_1'
                return stypy_return_type_202738


            @norecursion
            def test_2(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_2'
                module_type_store = module_type_store.open_function_context('test_2', 1055, 12, False)
                # Assigning a type to the variable 'self' (line 1056)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1056, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_2.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_2.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_2.__dict__.__setitem__('stypy_function_name', 'Foo.test_2')
                Foo.test_2.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_2.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_2.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_2.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_2', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_2', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_2(...)' code ##################

                pass
                
                # ################# End of 'test_2(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_2' in the type store
                # Getting the type of 'stypy_return_type' (line 1055)
                stypy_return_type_202739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202739)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_2'
                return stypy_return_type_202739


            @norecursion
            def foo_bar(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'foo_bar'
                module_type_store = module_type_store.open_function_context('foo_bar', 1056, 12, False)
                # Assigning a type to the variable 'self' (line 1057)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1057, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.foo_bar.__dict__.__setitem__('stypy_localization', localization)
                Foo.foo_bar.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.foo_bar.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.foo_bar.__dict__.__setitem__('stypy_function_name', 'Foo.foo_bar')
                Foo.foo_bar.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.foo_bar.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.foo_bar.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.foo_bar.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.foo_bar', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'foo_bar', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'foo_bar(...)' code ##################

                pass
                
                # ################# End of 'foo_bar(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'foo_bar' in the type store
                # Getting the type of 'stypy_return_type' (line 1056)
                stypy_return_type_202740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202740)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'foo_bar'
                return stypy_return_type_202740

        
        # Assigning a type to the variable 'Foo' (line 1053)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1053, 8), 'Foo', Foo)
        
        # Assigning a Name to a Attribute (line 1057):
        # Getting the type of 'Foo' (line 1057)
        Foo_202741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 16), 'Foo')
        # Getting the type of 'm' (line 1057)
        m_202742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 8), 'm')
        # Setting the type of the member 'Foo' of a type (line 1057)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1057, 8), m_202742, 'Foo', Foo_202741)
        
        # Assigning a Call to a Name (line 1059):
        
        # Call to TestSuite(...): (line 1059)
        # Processing the call arguments (line 1059)
        
        # Obtaining an instance of the builtin type 'list' (line 1059)
        list_202745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1059, 37), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1059)
        # Adding element type (line 1059)
        
        # Call to Foo(...): (line 1059)
        # Processing the call arguments (line 1059)
        str_202747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1059, 42), 'str', 'foo_bar')
        # Processing the call keyword arguments (line 1059)
        kwargs_202748 = {}
        # Getting the type of 'Foo' (line 1059)
        Foo_202746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 38), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1059)
        Foo_call_result_202749 = invoke(stypy.reporting.localization.Localization(__file__, 1059, 38), Foo_202746, *[str_202747], **kwargs_202748)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1059, 37), list_202745, Foo_call_result_202749)
        
        # Processing the call keyword arguments (line 1059)
        kwargs_202750 = {}
        # Getting the type of 'unittest' (line 1059)
        unittest_202743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 18), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 1059)
        TestSuite_202744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1059, 18), unittest_202743, 'TestSuite')
        # Calling TestSuite(args, kwargs) (line 1059)
        TestSuite_call_result_202751 = invoke(stypy.reporting.localization.Localization(__file__, 1059, 18), TestSuite_202744, *[list_202745], **kwargs_202750)
        
        # Assigning a type to the variable 'tests_1' (line 1059)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1059, 8), 'tests_1', TestSuite_call_result_202751)
        
        # Assigning a Call to a Name (line 1060):
        
        # Call to TestSuite(...): (line 1060)
        # Processing the call arguments (line 1060)
        
        # Obtaining an instance of the builtin type 'list' (line 1060)
        list_202754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1060, 37), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1060)
        # Adding element type (line 1060)
        
        # Call to Foo(...): (line 1060)
        # Processing the call arguments (line 1060)
        str_202756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1060, 42), 'str', 'test_1')
        # Processing the call keyword arguments (line 1060)
        kwargs_202757 = {}
        # Getting the type of 'Foo' (line 1060)
        Foo_202755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 38), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1060)
        Foo_call_result_202758 = invoke(stypy.reporting.localization.Localization(__file__, 1060, 38), Foo_202755, *[str_202756], **kwargs_202757)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1060, 37), list_202754, Foo_call_result_202758)
        # Adding element type (line 1060)
        
        # Call to Foo(...): (line 1060)
        # Processing the call arguments (line 1060)
        str_202760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1060, 57), 'str', 'test_2')
        # Processing the call keyword arguments (line 1060)
        kwargs_202761 = {}
        # Getting the type of 'Foo' (line 1060)
        Foo_202759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 53), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1060)
        Foo_call_result_202762 = invoke(stypy.reporting.localization.Localization(__file__, 1060, 53), Foo_202759, *[str_202760], **kwargs_202761)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1060, 37), list_202754, Foo_call_result_202762)
        
        # Processing the call keyword arguments (line 1060)
        kwargs_202763 = {}
        # Getting the type of 'unittest' (line 1060)
        unittest_202752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 18), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 1060)
        TestSuite_202753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1060, 18), unittest_202752, 'TestSuite')
        # Calling TestSuite(args, kwargs) (line 1060)
        TestSuite_call_result_202764 = invoke(stypy.reporting.localization.Localization(__file__, 1060, 18), TestSuite_202753, *[list_202754], **kwargs_202763)
        
        # Assigning a type to the variable 'tests_2' (line 1060)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1060, 8), 'tests_2', TestSuite_call_result_202764)
        
        # Assigning a Call to a Name (line 1062):
        
        # Call to TestLoader(...): (line 1062)
        # Processing the call keyword arguments (line 1062)
        kwargs_202767 = {}
        # Getting the type of 'unittest' (line 1062)
        unittest_202765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 1062)
        TestLoader_202766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1062, 17), unittest_202765, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 1062)
        TestLoader_call_result_202768 = invoke(stypy.reporting.localization.Localization(__file__, 1062, 17), TestLoader_202766, *[], **kwargs_202767)
        
        # Assigning a type to the variable 'loader' (line 1062)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1062, 8), 'loader', TestLoader_call_result_202768)
        
        # Assigning a Str to a Attribute (line 1063):
        str_202769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1063, 34), 'str', 'foo')
        # Getting the type of 'loader' (line 1063)
        loader_202770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 8), 'loader')
        # Setting the type of the member 'testMethodPrefix' of a type (line 1063)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1063, 8), loader_202770, 'testMethodPrefix', str_202769)
        
        # Call to assertEqual(...): (line 1064)
        # Processing the call arguments (line 1064)
        
        # Call to loadTestsFromName(...): (line 1064)
        # Processing the call arguments (line 1064)
        str_202775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1064, 50), 'str', 'Foo')
        # Getting the type of 'm' (line 1064)
        m_202776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 57), 'm', False)
        # Processing the call keyword arguments (line 1064)
        kwargs_202777 = {}
        # Getting the type of 'loader' (line 1064)
        loader_202773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 25), 'loader', False)
        # Obtaining the member 'loadTestsFromName' of a type (line 1064)
        loadTestsFromName_202774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1064, 25), loader_202773, 'loadTestsFromName')
        # Calling loadTestsFromName(args, kwargs) (line 1064)
        loadTestsFromName_call_result_202778 = invoke(stypy.reporting.localization.Localization(__file__, 1064, 25), loadTestsFromName_202774, *[str_202775, m_202776], **kwargs_202777)
        
        # Getting the type of 'tests_1' (line 1064)
        tests_1_202779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 61), 'tests_1', False)
        # Processing the call keyword arguments (line 1064)
        kwargs_202780 = {}
        # Getting the type of 'self' (line 1064)
        self_202771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 1064)
        assertEqual_202772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1064, 8), self_202771, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 1064)
        assertEqual_call_result_202781 = invoke(stypy.reporting.localization.Localization(__file__, 1064, 8), assertEqual_202772, *[loadTestsFromName_call_result_202778, tests_1_202779], **kwargs_202780)
        
        
        # Assigning a Str to a Attribute (line 1066):
        str_202782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1066, 34), 'str', 'test')
        # Getting the type of 'loader' (line 1066)
        loader_202783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 8), 'loader')
        # Setting the type of the member 'testMethodPrefix' of a type (line 1066)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1066, 8), loader_202783, 'testMethodPrefix', str_202782)
        
        # Call to assertEqual(...): (line 1067)
        # Processing the call arguments (line 1067)
        
        # Call to loadTestsFromName(...): (line 1067)
        # Processing the call arguments (line 1067)
        str_202788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1067, 50), 'str', 'Foo')
        # Getting the type of 'm' (line 1067)
        m_202789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 57), 'm', False)
        # Processing the call keyword arguments (line 1067)
        kwargs_202790 = {}
        # Getting the type of 'loader' (line 1067)
        loader_202786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 25), 'loader', False)
        # Obtaining the member 'loadTestsFromName' of a type (line 1067)
        loadTestsFromName_202787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1067, 25), loader_202786, 'loadTestsFromName')
        # Calling loadTestsFromName(args, kwargs) (line 1067)
        loadTestsFromName_call_result_202791 = invoke(stypy.reporting.localization.Localization(__file__, 1067, 25), loadTestsFromName_202787, *[str_202788, m_202789], **kwargs_202790)
        
        # Getting the type of 'tests_2' (line 1067)
        tests_2_202792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 61), 'tests_2', False)
        # Processing the call keyword arguments (line 1067)
        kwargs_202793 = {}
        # Getting the type of 'self' (line 1067)
        self_202784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 1067)
        assertEqual_202785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1067, 8), self_202784, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 1067)
        assertEqual_call_result_202794 = invoke(stypy.reporting.localization.Localization(__file__, 1067, 8), assertEqual_202785, *[loadTestsFromName_call_result_202791, tests_2_202792], **kwargs_202793)
        
        
        # ################# End of 'test_testMethodPrefix__loadTestsFromName(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_testMethodPrefix__loadTestsFromName' in the type store
        # Getting the type of 'stypy_return_type' (line 1051)
        stypy_return_type_202795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202795)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_testMethodPrefix__loadTestsFromName'
        return stypy_return_type_202795


    @norecursion
    def test_testMethodPrefix__loadTestsFromNames(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_testMethodPrefix__loadTestsFromNames'
        module_type_store = module_type_store.open_function_context('test_testMethodPrefix__loadTestsFromNames', 1074, 4, False)
        # Assigning a type to the variable 'self' (line 1075)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1075, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_testMethodPrefix__loadTestsFromNames.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromNames.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromNames.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromNames.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_testMethodPrefix__loadTestsFromNames')
        Test_TestLoader.test_testMethodPrefix__loadTestsFromNames.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_testMethodPrefix__loadTestsFromNames.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromNames.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromNames.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromNames.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromNames.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_testMethodPrefix__loadTestsFromNames.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_testMethodPrefix__loadTestsFromNames', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_testMethodPrefix__loadTestsFromNames', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_testMethodPrefix__loadTestsFromNames(...)' code ##################

        
        # Assigning a Call to a Name (line 1075):
        
        # Call to ModuleType(...): (line 1075)
        # Processing the call arguments (line 1075)
        str_202798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1075, 29), 'str', 'm')
        # Processing the call keyword arguments (line 1075)
        kwargs_202799 = {}
        # Getting the type of 'types' (line 1075)
        types_202796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 1075)
        ModuleType_202797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1075, 12), types_202796, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 1075)
        ModuleType_call_result_202800 = invoke(stypy.reporting.localization.Localization(__file__, 1075, 12), ModuleType_202797, *[str_202798], **kwargs_202799)
        
        # Assigning a type to the variable 'm' (line 1075)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1075, 8), 'm', ModuleType_call_result_202800)
        # Declaration of the 'Foo' class
        # Getting the type of 'unittest' (line 1076)
        unittest_202801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 18), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 1076)
        TestCase_202802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1076, 18), unittest_202801, 'TestCase')

        class Foo(TestCase_202802, ):

            @norecursion
            def test_1(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_1'
                module_type_store = module_type_store.open_function_context('test_1', 1077, 12, False)
                # Assigning a type to the variable 'self' (line 1078)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1078, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_1.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_1.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_1.__dict__.__setitem__('stypy_function_name', 'Foo.test_1')
                Foo.test_1.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_1.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_1.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_1.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_1', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_1', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_1(...)' code ##################

                pass
                
                # ################# End of 'test_1(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_1' in the type store
                # Getting the type of 'stypy_return_type' (line 1077)
                stypy_return_type_202803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202803)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_1'
                return stypy_return_type_202803


            @norecursion
            def test_2(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_2'
                module_type_store = module_type_store.open_function_context('test_2', 1078, 12, False)
                # Assigning a type to the variable 'self' (line 1079)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1079, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_2.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_2.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_2.__dict__.__setitem__('stypy_function_name', 'Foo.test_2')
                Foo.test_2.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_2.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_2.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_2.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_2', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_2', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_2(...)' code ##################

                pass
                
                # ################# End of 'test_2(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_2' in the type store
                # Getting the type of 'stypy_return_type' (line 1078)
                stypy_return_type_202804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202804)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_2'
                return stypy_return_type_202804


            @norecursion
            def foo_bar(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'foo_bar'
                module_type_store = module_type_store.open_function_context('foo_bar', 1079, 12, False)
                # Assigning a type to the variable 'self' (line 1080)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1080, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.foo_bar.__dict__.__setitem__('stypy_localization', localization)
                Foo.foo_bar.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.foo_bar.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.foo_bar.__dict__.__setitem__('stypy_function_name', 'Foo.foo_bar')
                Foo.foo_bar.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.foo_bar.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.foo_bar.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.foo_bar.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.foo_bar', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'foo_bar', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'foo_bar(...)' code ##################

                pass
                
                # ################# End of 'foo_bar(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'foo_bar' in the type store
                # Getting the type of 'stypy_return_type' (line 1079)
                stypy_return_type_202805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202805)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'foo_bar'
                return stypy_return_type_202805

        
        # Assigning a type to the variable 'Foo' (line 1076)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1076, 8), 'Foo', Foo)
        
        # Assigning a Name to a Attribute (line 1080):
        # Getting the type of 'Foo' (line 1080)
        Foo_202806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 16), 'Foo')
        # Getting the type of 'm' (line 1080)
        m_202807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 8), 'm')
        # Setting the type of the member 'Foo' of a type (line 1080)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1080, 8), m_202807, 'Foo', Foo_202806)
        
        # Assigning a Call to a Name (line 1082):
        
        # Call to TestSuite(...): (line 1082)
        # Processing the call arguments (line 1082)
        
        # Obtaining an instance of the builtin type 'list' (line 1082)
        list_202810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1082, 37), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1082)
        # Adding element type (line 1082)
        
        # Call to TestSuite(...): (line 1082)
        # Processing the call arguments (line 1082)
        
        # Obtaining an instance of the builtin type 'list' (line 1082)
        list_202813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1082, 57), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1082)
        # Adding element type (line 1082)
        
        # Call to Foo(...): (line 1082)
        # Processing the call arguments (line 1082)
        str_202815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1082, 62), 'str', 'foo_bar')
        # Processing the call keyword arguments (line 1082)
        kwargs_202816 = {}
        # Getting the type of 'Foo' (line 1082)
        Foo_202814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 58), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1082)
        Foo_call_result_202817 = invoke(stypy.reporting.localization.Localization(__file__, 1082, 58), Foo_202814, *[str_202815], **kwargs_202816)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1082, 57), list_202813, Foo_call_result_202817)
        
        # Processing the call keyword arguments (line 1082)
        kwargs_202818 = {}
        # Getting the type of 'unittest' (line 1082)
        unittest_202811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 38), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 1082)
        TestSuite_202812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1082, 38), unittest_202811, 'TestSuite')
        # Calling TestSuite(args, kwargs) (line 1082)
        TestSuite_call_result_202819 = invoke(stypy.reporting.localization.Localization(__file__, 1082, 38), TestSuite_202812, *[list_202813], **kwargs_202818)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1082, 37), list_202810, TestSuite_call_result_202819)
        
        # Processing the call keyword arguments (line 1082)
        kwargs_202820 = {}
        # Getting the type of 'unittest' (line 1082)
        unittest_202808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 18), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 1082)
        TestSuite_202809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1082, 18), unittest_202808, 'TestSuite')
        # Calling TestSuite(args, kwargs) (line 1082)
        TestSuite_call_result_202821 = invoke(stypy.reporting.localization.Localization(__file__, 1082, 18), TestSuite_202809, *[list_202810], **kwargs_202820)
        
        # Assigning a type to the variable 'tests_1' (line 1082)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1082, 8), 'tests_1', TestSuite_call_result_202821)
        
        # Assigning a Call to a Name (line 1083):
        
        # Call to TestSuite(...): (line 1083)
        # Processing the call arguments (line 1083)
        
        # Obtaining an instance of the builtin type 'list' (line 1083)
        list_202824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1083, 37), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1083)
        # Adding element type (line 1083)
        
        # Call to Foo(...): (line 1083)
        # Processing the call arguments (line 1083)
        str_202826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1083, 42), 'str', 'test_1')
        # Processing the call keyword arguments (line 1083)
        kwargs_202827 = {}
        # Getting the type of 'Foo' (line 1083)
        Foo_202825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 38), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1083)
        Foo_call_result_202828 = invoke(stypy.reporting.localization.Localization(__file__, 1083, 38), Foo_202825, *[str_202826], **kwargs_202827)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1083, 37), list_202824, Foo_call_result_202828)
        # Adding element type (line 1083)
        
        # Call to Foo(...): (line 1083)
        # Processing the call arguments (line 1083)
        str_202830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1083, 57), 'str', 'test_2')
        # Processing the call keyword arguments (line 1083)
        kwargs_202831 = {}
        # Getting the type of 'Foo' (line 1083)
        Foo_202829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 53), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1083)
        Foo_call_result_202832 = invoke(stypy.reporting.localization.Localization(__file__, 1083, 53), Foo_202829, *[str_202830], **kwargs_202831)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1083, 37), list_202824, Foo_call_result_202832)
        
        # Processing the call keyword arguments (line 1083)
        kwargs_202833 = {}
        # Getting the type of 'unittest' (line 1083)
        unittest_202822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 18), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 1083)
        TestSuite_202823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1083, 18), unittest_202822, 'TestSuite')
        # Calling TestSuite(args, kwargs) (line 1083)
        TestSuite_call_result_202834 = invoke(stypy.reporting.localization.Localization(__file__, 1083, 18), TestSuite_202823, *[list_202824], **kwargs_202833)
        
        # Assigning a type to the variable 'tests_2' (line 1083)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1083, 8), 'tests_2', TestSuite_call_result_202834)
        
        # Assigning a Call to a Name (line 1084):
        
        # Call to TestSuite(...): (line 1084)
        # Processing the call arguments (line 1084)
        
        # Obtaining an instance of the builtin type 'list' (line 1084)
        list_202837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1084, 37), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1084)
        # Adding element type (line 1084)
        # Getting the type of 'tests_2' (line 1084)
        tests_2_202838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 38), 'tests_2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1084, 37), list_202837, tests_2_202838)
        
        # Processing the call keyword arguments (line 1084)
        kwargs_202839 = {}
        # Getting the type of 'unittest' (line 1084)
        unittest_202835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 18), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 1084)
        TestSuite_202836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1084, 18), unittest_202835, 'TestSuite')
        # Calling TestSuite(args, kwargs) (line 1084)
        TestSuite_call_result_202840 = invoke(stypy.reporting.localization.Localization(__file__, 1084, 18), TestSuite_202836, *[list_202837], **kwargs_202839)
        
        # Assigning a type to the variable 'tests_2' (line 1084)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1084, 8), 'tests_2', TestSuite_call_result_202840)
        
        # Assigning a Call to a Name (line 1086):
        
        # Call to TestLoader(...): (line 1086)
        # Processing the call keyword arguments (line 1086)
        kwargs_202843 = {}
        # Getting the type of 'unittest' (line 1086)
        unittest_202841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 1086)
        TestLoader_202842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 17), unittest_202841, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 1086)
        TestLoader_call_result_202844 = invoke(stypy.reporting.localization.Localization(__file__, 1086, 17), TestLoader_202842, *[], **kwargs_202843)
        
        # Assigning a type to the variable 'loader' (line 1086)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1086, 8), 'loader', TestLoader_call_result_202844)
        
        # Assigning a Str to a Attribute (line 1087):
        str_202845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1087, 34), 'str', 'foo')
        # Getting the type of 'loader' (line 1087)
        loader_202846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 8), 'loader')
        # Setting the type of the member 'testMethodPrefix' of a type (line 1087)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1087, 8), loader_202846, 'testMethodPrefix', str_202845)
        
        # Call to assertEqual(...): (line 1088)
        # Processing the call arguments (line 1088)
        
        # Call to loadTestsFromNames(...): (line 1088)
        # Processing the call arguments (line 1088)
        
        # Obtaining an instance of the builtin type 'list' (line 1088)
        list_202851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1088, 51), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1088)
        # Adding element type (line 1088)
        str_202852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1088, 52), 'str', 'Foo')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1088, 51), list_202851, str_202852)
        
        # Getting the type of 'm' (line 1088)
        m_202853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 60), 'm', False)
        # Processing the call keyword arguments (line 1088)
        kwargs_202854 = {}
        # Getting the type of 'loader' (line 1088)
        loader_202849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 25), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 1088)
        loadTestsFromNames_202850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 25), loader_202849, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 1088)
        loadTestsFromNames_call_result_202855 = invoke(stypy.reporting.localization.Localization(__file__, 1088, 25), loadTestsFromNames_202850, *[list_202851, m_202853], **kwargs_202854)
        
        # Getting the type of 'tests_1' (line 1088)
        tests_1_202856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 64), 'tests_1', False)
        # Processing the call keyword arguments (line 1088)
        kwargs_202857 = {}
        # Getting the type of 'self' (line 1088)
        self_202847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 1088)
        assertEqual_202848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 8), self_202847, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 1088)
        assertEqual_call_result_202858 = invoke(stypy.reporting.localization.Localization(__file__, 1088, 8), assertEqual_202848, *[loadTestsFromNames_call_result_202855, tests_1_202856], **kwargs_202857)
        
        
        # Assigning a Str to a Attribute (line 1090):
        str_202859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1090, 34), 'str', 'test')
        # Getting the type of 'loader' (line 1090)
        loader_202860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 8), 'loader')
        # Setting the type of the member 'testMethodPrefix' of a type (line 1090)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1090, 8), loader_202860, 'testMethodPrefix', str_202859)
        
        # Call to assertEqual(...): (line 1091)
        # Processing the call arguments (line 1091)
        
        # Call to loadTestsFromNames(...): (line 1091)
        # Processing the call arguments (line 1091)
        
        # Obtaining an instance of the builtin type 'list' (line 1091)
        list_202865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1091, 51), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1091)
        # Adding element type (line 1091)
        str_202866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1091, 52), 'str', 'Foo')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1091, 51), list_202865, str_202866)
        
        # Getting the type of 'm' (line 1091)
        m_202867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 60), 'm', False)
        # Processing the call keyword arguments (line 1091)
        kwargs_202868 = {}
        # Getting the type of 'loader' (line 1091)
        loader_202863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 25), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 1091)
        loadTestsFromNames_202864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 25), loader_202863, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 1091)
        loadTestsFromNames_call_result_202869 = invoke(stypy.reporting.localization.Localization(__file__, 1091, 25), loadTestsFromNames_202864, *[list_202865, m_202867], **kwargs_202868)
        
        # Getting the type of 'tests_2' (line 1091)
        tests_2_202870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 64), 'tests_2', False)
        # Processing the call keyword arguments (line 1091)
        kwargs_202871 = {}
        # Getting the type of 'self' (line 1091)
        self_202861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 1091)
        assertEqual_202862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 8), self_202861, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 1091)
        assertEqual_call_result_202872 = invoke(stypy.reporting.localization.Localization(__file__, 1091, 8), assertEqual_202862, *[loadTestsFromNames_call_result_202869, tests_2_202870], **kwargs_202871)
        
        
        # ################# End of 'test_testMethodPrefix__loadTestsFromNames(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_testMethodPrefix__loadTestsFromNames' in the type store
        # Getting the type of 'stypy_return_type' (line 1074)
        stypy_return_type_202873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202873)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_testMethodPrefix__loadTestsFromNames'
        return stypy_return_type_202873


    @norecursion
    def test_testMethodPrefix__default_value(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_testMethodPrefix__default_value'
        module_type_store = module_type_store.open_function_context('test_testMethodPrefix__default_value', 1094, 4, False)
        # Assigning a type to the variable 'self' (line 1095)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1095, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_testMethodPrefix__default_value.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_testMethodPrefix__default_value.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_testMethodPrefix__default_value.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_testMethodPrefix__default_value.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_testMethodPrefix__default_value')
        Test_TestLoader.test_testMethodPrefix__default_value.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_testMethodPrefix__default_value.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_testMethodPrefix__default_value.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_testMethodPrefix__default_value.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_testMethodPrefix__default_value.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_testMethodPrefix__default_value.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_testMethodPrefix__default_value.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_testMethodPrefix__default_value', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_testMethodPrefix__default_value', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_testMethodPrefix__default_value(...)' code ##################

        
        # Assigning a Call to a Name (line 1095):
        
        # Call to TestLoader(...): (line 1095)
        # Processing the call keyword arguments (line 1095)
        kwargs_202876 = {}
        # Getting the type of 'unittest' (line 1095)
        unittest_202874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 1095)
        TestLoader_202875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1095, 17), unittest_202874, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 1095)
        TestLoader_call_result_202877 = invoke(stypy.reporting.localization.Localization(__file__, 1095, 17), TestLoader_202875, *[], **kwargs_202876)
        
        # Assigning a type to the variable 'loader' (line 1095)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1095, 8), 'loader', TestLoader_call_result_202877)
        
        # Call to assertTrue(...): (line 1096)
        # Processing the call arguments (line 1096)
        
        # Getting the type of 'loader' (line 1096)
        loader_202880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 24), 'loader', False)
        # Obtaining the member 'testMethodPrefix' of a type (line 1096)
        testMethodPrefix_202881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1096, 24), loader_202880, 'testMethodPrefix')
        str_202882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1096, 51), 'str', 'test')
        # Applying the binary operator '==' (line 1096)
        result_eq_202883 = python_operator(stypy.reporting.localization.Localization(__file__, 1096, 24), '==', testMethodPrefix_202881, str_202882)
        
        # Processing the call keyword arguments (line 1096)
        kwargs_202884 = {}
        # Getting the type of 'self' (line 1096)
        self_202878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 8), 'self', False)
        # Obtaining the member 'assertTrue' of a type (line 1096)
        assertTrue_202879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1096, 8), self_202878, 'assertTrue')
        # Calling assertTrue(args, kwargs) (line 1096)
        assertTrue_call_result_202885 = invoke(stypy.reporting.localization.Localization(__file__, 1096, 8), assertTrue_202879, *[result_eq_202883], **kwargs_202884)
        
        
        # ################# End of 'test_testMethodPrefix__default_value(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_testMethodPrefix__default_value' in the type store
        # Getting the type of 'stypy_return_type' (line 1094)
        stypy_return_type_202886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202886)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_testMethodPrefix__default_value'
        return stypy_return_type_202886


    @norecursion
    def test_sortTestMethodsUsing__loadTestsFromTestCase(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_sortTestMethodsUsing__loadTestsFromTestCase'
        module_type_store = module_type_store.open_function_context('test_sortTestMethodsUsing__loadTestsFromTestCase', 1106, 4, False)
        # Assigning a type to the variable 'self' (line 1107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1107, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromTestCase.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromTestCase.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromTestCase.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromTestCase.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromTestCase')
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromTestCase.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromTestCase.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromTestCase.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromTestCase.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromTestCase.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromTestCase.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromTestCase.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromTestCase', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_sortTestMethodsUsing__loadTestsFromTestCase', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_sortTestMethodsUsing__loadTestsFromTestCase(...)' code ##################


        @norecursion
        def reversed_cmp(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'reversed_cmp'
            module_type_store = module_type_store.open_function_context('reversed_cmp', 1107, 8, False)
            
            # Passed parameters checking function
            reversed_cmp.stypy_localization = localization
            reversed_cmp.stypy_type_of_self = None
            reversed_cmp.stypy_type_store = module_type_store
            reversed_cmp.stypy_function_name = 'reversed_cmp'
            reversed_cmp.stypy_param_names_list = ['x', 'y']
            reversed_cmp.stypy_varargs_param_name = None
            reversed_cmp.stypy_kwargs_param_name = None
            reversed_cmp.stypy_call_defaults = defaults
            reversed_cmp.stypy_call_varargs = varargs
            reversed_cmp.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'reversed_cmp', ['x', 'y'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'reversed_cmp', localization, ['x', 'y'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'reversed_cmp(...)' code ##################

            
            
            # Call to cmp(...): (line 1108)
            # Processing the call arguments (line 1108)
            # Getting the type of 'x' (line 1108)
            x_202888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 24), 'x', False)
            # Getting the type of 'y' (line 1108)
            y_202889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 27), 'y', False)
            # Processing the call keyword arguments (line 1108)
            kwargs_202890 = {}
            # Getting the type of 'cmp' (line 1108)
            cmp_202887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 20), 'cmp', False)
            # Calling cmp(args, kwargs) (line 1108)
            cmp_call_result_202891 = invoke(stypy.reporting.localization.Localization(__file__, 1108, 20), cmp_202887, *[x_202888, y_202889], **kwargs_202890)
            
            # Applying the 'usub' unary operator (line 1108)
            result___neg___202892 = python_operator(stypy.reporting.localization.Localization(__file__, 1108, 19), 'usub', cmp_call_result_202891)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1108)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1108, 12), 'stypy_return_type', result___neg___202892)
            
            # ################# End of 'reversed_cmp(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'reversed_cmp' in the type store
            # Getting the type of 'stypy_return_type' (line 1107)
            stypy_return_type_202893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_202893)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'reversed_cmp'
            return stypy_return_type_202893

        # Assigning a type to the variable 'reversed_cmp' (line 1107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1107, 8), 'reversed_cmp', reversed_cmp)
        # Declaration of the 'Foo' class
        # Getting the type of 'unittest' (line 1110)
        unittest_202894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 18), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 1110)
        TestCase_202895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1110, 18), unittest_202894, 'TestCase')

        class Foo(TestCase_202895, ):

            @norecursion
            def test_1(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_1'
                module_type_store = module_type_store.open_function_context('test_1', 1111, 12, False)
                # Assigning a type to the variable 'self' (line 1112)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1112, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_1.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_1.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_1.__dict__.__setitem__('stypy_function_name', 'Foo.test_1')
                Foo.test_1.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_1.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_1.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_1.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_1', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_1', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_1(...)' code ##################

                pass
                
                # ################# End of 'test_1(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_1' in the type store
                # Getting the type of 'stypy_return_type' (line 1111)
                stypy_return_type_202896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202896)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_1'
                return stypy_return_type_202896


            @norecursion
            def test_2(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_2'
                module_type_store = module_type_store.open_function_context('test_2', 1112, 12, False)
                # Assigning a type to the variable 'self' (line 1113)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1113, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_2.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_2.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_2.__dict__.__setitem__('stypy_function_name', 'Foo.test_2')
                Foo.test_2.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_2.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_2.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_2.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_2', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_2', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_2(...)' code ##################

                pass
                
                # ################# End of 'test_2(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_2' in the type store
                # Getting the type of 'stypy_return_type' (line 1112)
                stypy_return_type_202897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202897)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_2'
                return stypy_return_type_202897

        
        # Assigning a type to the variable 'Foo' (line 1110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1110, 8), 'Foo', Foo)
        
        # Assigning a Call to a Name (line 1114):
        
        # Call to TestLoader(...): (line 1114)
        # Processing the call keyword arguments (line 1114)
        kwargs_202900 = {}
        # Getting the type of 'unittest' (line 1114)
        unittest_202898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 1114)
        TestLoader_202899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1114, 17), unittest_202898, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 1114)
        TestLoader_call_result_202901 = invoke(stypy.reporting.localization.Localization(__file__, 1114, 17), TestLoader_202899, *[], **kwargs_202900)
        
        # Assigning a type to the variable 'loader' (line 1114)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1114, 8), 'loader', TestLoader_call_result_202901)
        
        # Assigning a Name to a Attribute (line 1115):
        # Getting the type of 'reversed_cmp' (line 1115)
        reversed_cmp_202902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 38), 'reversed_cmp')
        # Getting the type of 'loader' (line 1115)
        loader_202903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 8), 'loader')
        # Setting the type of the member 'sortTestMethodsUsing' of a type (line 1115)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1115, 8), loader_202903, 'sortTestMethodsUsing', reversed_cmp_202902)
        
        # Assigning a Call to a Name (line 1117):
        
        # Call to suiteClass(...): (line 1117)
        # Processing the call arguments (line 1117)
        
        # Obtaining an instance of the builtin type 'list' (line 1117)
        list_202906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1117, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1117)
        # Adding element type (line 1117)
        
        # Call to Foo(...): (line 1117)
        # Processing the call arguments (line 1117)
        str_202908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1117, 39), 'str', 'test_2')
        # Processing the call keyword arguments (line 1117)
        kwargs_202909 = {}
        # Getting the type of 'Foo' (line 1117)
        Foo_202907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 35), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1117)
        Foo_call_result_202910 = invoke(stypy.reporting.localization.Localization(__file__, 1117, 35), Foo_202907, *[str_202908], **kwargs_202909)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1117, 34), list_202906, Foo_call_result_202910)
        # Adding element type (line 1117)
        
        # Call to Foo(...): (line 1117)
        # Processing the call arguments (line 1117)
        str_202912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1117, 54), 'str', 'test_1')
        # Processing the call keyword arguments (line 1117)
        kwargs_202913 = {}
        # Getting the type of 'Foo' (line 1117)
        Foo_202911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 50), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1117)
        Foo_call_result_202914 = invoke(stypy.reporting.localization.Localization(__file__, 1117, 50), Foo_202911, *[str_202912], **kwargs_202913)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1117, 34), list_202906, Foo_call_result_202914)
        
        # Processing the call keyword arguments (line 1117)
        kwargs_202915 = {}
        # Getting the type of 'loader' (line 1117)
        loader_202904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 16), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 1117)
        suiteClass_202905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1117, 16), loader_202904, 'suiteClass')
        # Calling suiteClass(args, kwargs) (line 1117)
        suiteClass_call_result_202916 = invoke(stypy.reporting.localization.Localization(__file__, 1117, 16), suiteClass_202905, *[list_202906], **kwargs_202915)
        
        # Assigning a type to the variable 'tests' (line 1117)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1117, 8), 'tests', suiteClass_call_result_202916)
        
        # Call to assertEqual(...): (line 1118)
        # Processing the call arguments (line 1118)
        
        # Call to loadTestsFromTestCase(...): (line 1118)
        # Processing the call arguments (line 1118)
        # Getting the type of 'Foo' (line 1118)
        Foo_202921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 54), 'Foo', False)
        # Processing the call keyword arguments (line 1118)
        kwargs_202922 = {}
        # Getting the type of 'loader' (line 1118)
        loader_202919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 25), 'loader', False)
        # Obtaining the member 'loadTestsFromTestCase' of a type (line 1118)
        loadTestsFromTestCase_202920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 25), loader_202919, 'loadTestsFromTestCase')
        # Calling loadTestsFromTestCase(args, kwargs) (line 1118)
        loadTestsFromTestCase_call_result_202923 = invoke(stypy.reporting.localization.Localization(__file__, 1118, 25), loadTestsFromTestCase_202920, *[Foo_202921], **kwargs_202922)
        
        # Getting the type of 'tests' (line 1118)
        tests_202924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 60), 'tests', False)
        # Processing the call keyword arguments (line 1118)
        kwargs_202925 = {}
        # Getting the type of 'self' (line 1118)
        self_202917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 1118)
        assertEqual_202918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 8), self_202917, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 1118)
        assertEqual_call_result_202926 = invoke(stypy.reporting.localization.Localization(__file__, 1118, 8), assertEqual_202918, *[loadTestsFromTestCase_call_result_202923, tests_202924], **kwargs_202925)
        
        
        # ################# End of 'test_sortTestMethodsUsing__loadTestsFromTestCase(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_sortTestMethodsUsing__loadTestsFromTestCase' in the type store
        # Getting the type of 'stypy_return_type' (line 1106)
        stypy_return_type_202927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202927)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_sortTestMethodsUsing__loadTestsFromTestCase'
        return stypy_return_type_202927


    @norecursion
    def test_sortTestMethodsUsing__loadTestsFromModule(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_sortTestMethodsUsing__loadTestsFromModule'
        module_type_store = module_type_store.open_function_context('test_sortTestMethodsUsing__loadTestsFromModule', 1122, 4, False)
        # Assigning a type to the variable 'self' (line 1123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1123, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromModule.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromModule.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromModule.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromModule.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromModule')
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromModule.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromModule.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromModule.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromModule.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromModule.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromModule.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromModule.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromModule', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_sortTestMethodsUsing__loadTestsFromModule', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_sortTestMethodsUsing__loadTestsFromModule(...)' code ##################


        @norecursion
        def reversed_cmp(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'reversed_cmp'
            module_type_store = module_type_store.open_function_context('reversed_cmp', 1123, 8, False)
            
            # Passed parameters checking function
            reversed_cmp.stypy_localization = localization
            reversed_cmp.stypy_type_of_self = None
            reversed_cmp.stypy_type_store = module_type_store
            reversed_cmp.stypy_function_name = 'reversed_cmp'
            reversed_cmp.stypy_param_names_list = ['x', 'y']
            reversed_cmp.stypy_varargs_param_name = None
            reversed_cmp.stypy_kwargs_param_name = None
            reversed_cmp.stypy_call_defaults = defaults
            reversed_cmp.stypy_call_varargs = varargs
            reversed_cmp.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'reversed_cmp', ['x', 'y'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'reversed_cmp', localization, ['x', 'y'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'reversed_cmp(...)' code ##################

            
            
            # Call to cmp(...): (line 1124)
            # Processing the call arguments (line 1124)
            # Getting the type of 'x' (line 1124)
            x_202929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 24), 'x', False)
            # Getting the type of 'y' (line 1124)
            y_202930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 27), 'y', False)
            # Processing the call keyword arguments (line 1124)
            kwargs_202931 = {}
            # Getting the type of 'cmp' (line 1124)
            cmp_202928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 20), 'cmp', False)
            # Calling cmp(args, kwargs) (line 1124)
            cmp_call_result_202932 = invoke(stypy.reporting.localization.Localization(__file__, 1124, 20), cmp_202928, *[x_202929, y_202930], **kwargs_202931)
            
            # Applying the 'usub' unary operator (line 1124)
            result___neg___202933 = python_operator(stypy.reporting.localization.Localization(__file__, 1124, 19), 'usub', cmp_call_result_202932)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1124)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1124, 12), 'stypy_return_type', result___neg___202933)
            
            # ################# End of 'reversed_cmp(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'reversed_cmp' in the type store
            # Getting the type of 'stypy_return_type' (line 1123)
            stypy_return_type_202934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_202934)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'reversed_cmp'
            return stypy_return_type_202934

        # Assigning a type to the variable 'reversed_cmp' (line 1123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1123, 8), 'reversed_cmp', reversed_cmp)
        
        # Assigning a Call to a Name (line 1126):
        
        # Call to ModuleType(...): (line 1126)
        # Processing the call arguments (line 1126)
        str_202937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1126, 29), 'str', 'm')
        # Processing the call keyword arguments (line 1126)
        kwargs_202938 = {}
        # Getting the type of 'types' (line 1126)
        types_202935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 1126)
        ModuleType_202936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 12), types_202935, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 1126)
        ModuleType_call_result_202939 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 12), ModuleType_202936, *[str_202937], **kwargs_202938)
        
        # Assigning a type to the variable 'm' (line 1126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 8), 'm', ModuleType_call_result_202939)
        # Declaration of the 'Foo' class
        # Getting the type of 'unittest' (line 1127)
        unittest_202940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 18), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 1127)
        TestCase_202941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1127, 18), unittest_202940, 'TestCase')

        class Foo(TestCase_202941, ):

            @norecursion
            def test_1(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_1'
                module_type_store = module_type_store.open_function_context('test_1', 1128, 12, False)
                # Assigning a type to the variable 'self' (line 1129)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1129, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_1.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_1.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_1.__dict__.__setitem__('stypy_function_name', 'Foo.test_1')
                Foo.test_1.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_1.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_1.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_1.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_1', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_1', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_1(...)' code ##################

                pass
                
                # ################# End of 'test_1(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_1' in the type store
                # Getting the type of 'stypy_return_type' (line 1128)
                stypy_return_type_202942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202942)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_1'
                return stypy_return_type_202942


            @norecursion
            def test_2(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_2'
                module_type_store = module_type_store.open_function_context('test_2', 1129, 12, False)
                # Assigning a type to the variable 'self' (line 1130)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1130, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_2.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_2.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_2.__dict__.__setitem__('stypy_function_name', 'Foo.test_2')
                Foo.test_2.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_2.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_2.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_2.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_2', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_2', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_2(...)' code ##################

                pass
                
                # ################# End of 'test_2(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_2' in the type store
                # Getting the type of 'stypy_return_type' (line 1129)
                stypy_return_type_202943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202943)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_2'
                return stypy_return_type_202943

        
        # Assigning a type to the variable 'Foo' (line 1127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 8), 'Foo', Foo)
        
        # Assigning a Name to a Attribute (line 1130):
        # Getting the type of 'Foo' (line 1130)
        Foo_202944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 16), 'Foo')
        # Getting the type of 'm' (line 1130)
        m_202945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 8), 'm')
        # Setting the type of the member 'Foo' of a type (line 1130)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1130, 8), m_202945, 'Foo', Foo_202944)
        
        # Assigning a Call to a Name (line 1132):
        
        # Call to TestLoader(...): (line 1132)
        # Processing the call keyword arguments (line 1132)
        kwargs_202948 = {}
        # Getting the type of 'unittest' (line 1132)
        unittest_202946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 1132)
        TestLoader_202947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1132, 17), unittest_202946, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 1132)
        TestLoader_call_result_202949 = invoke(stypy.reporting.localization.Localization(__file__, 1132, 17), TestLoader_202947, *[], **kwargs_202948)
        
        # Assigning a type to the variable 'loader' (line 1132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 8), 'loader', TestLoader_call_result_202949)
        
        # Assigning a Name to a Attribute (line 1133):
        # Getting the type of 'reversed_cmp' (line 1133)
        reversed_cmp_202950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 38), 'reversed_cmp')
        # Getting the type of 'loader' (line 1133)
        loader_202951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 8), 'loader')
        # Setting the type of the member 'sortTestMethodsUsing' of a type (line 1133)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 8), loader_202951, 'sortTestMethodsUsing', reversed_cmp_202950)
        
        # Assigning a List to a Name (line 1135):
        
        # Obtaining an instance of the builtin type 'list' (line 1135)
        list_202952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1135, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1135)
        # Adding element type (line 1135)
        
        # Call to suiteClass(...): (line 1135)
        # Processing the call arguments (line 1135)
        
        # Obtaining an instance of the builtin type 'list' (line 1135)
        list_202955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1135, 35), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1135)
        # Adding element type (line 1135)
        
        # Call to Foo(...): (line 1135)
        # Processing the call arguments (line 1135)
        str_202957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1135, 40), 'str', 'test_2')
        # Processing the call keyword arguments (line 1135)
        kwargs_202958 = {}
        # Getting the type of 'Foo' (line 1135)
        Foo_202956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 36), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1135)
        Foo_call_result_202959 = invoke(stypy.reporting.localization.Localization(__file__, 1135, 36), Foo_202956, *[str_202957], **kwargs_202958)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1135, 35), list_202955, Foo_call_result_202959)
        # Adding element type (line 1135)
        
        # Call to Foo(...): (line 1135)
        # Processing the call arguments (line 1135)
        str_202961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1135, 55), 'str', 'test_1')
        # Processing the call keyword arguments (line 1135)
        kwargs_202962 = {}
        # Getting the type of 'Foo' (line 1135)
        Foo_202960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 51), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1135)
        Foo_call_result_202963 = invoke(stypy.reporting.localization.Localization(__file__, 1135, 51), Foo_202960, *[str_202961], **kwargs_202962)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1135, 35), list_202955, Foo_call_result_202963)
        
        # Processing the call keyword arguments (line 1135)
        kwargs_202964 = {}
        # Getting the type of 'loader' (line 1135)
        loader_202953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 17), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 1135)
        suiteClass_202954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1135, 17), loader_202953, 'suiteClass')
        # Calling suiteClass(args, kwargs) (line 1135)
        suiteClass_call_result_202965 = invoke(stypy.reporting.localization.Localization(__file__, 1135, 17), suiteClass_202954, *[list_202955], **kwargs_202964)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1135, 16), list_202952, suiteClass_call_result_202965)
        
        # Assigning a type to the variable 'tests' (line 1135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1135, 8), 'tests', list_202952)
        
        # Call to assertEqual(...): (line 1136)
        # Processing the call arguments (line 1136)
        
        # Call to list(...): (line 1136)
        # Processing the call arguments (line 1136)
        
        # Call to loadTestsFromModule(...): (line 1136)
        # Processing the call arguments (line 1136)
        # Getting the type of 'm' (line 1136)
        m_202971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 57), 'm', False)
        # Processing the call keyword arguments (line 1136)
        kwargs_202972 = {}
        # Getting the type of 'loader' (line 1136)
        loader_202969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 30), 'loader', False)
        # Obtaining the member 'loadTestsFromModule' of a type (line 1136)
        loadTestsFromModule_202970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1136, 30), loader_202969, 'loadTestsFromModule')
        # Calling loadTestsFromModule(args, kwargs) (line 1136)
        loadTestsFromModule_call_result_202973 = invoke(stypy.reporting.localization.Localization(__file__, 1136, 30), loadTestsFromModule_202970, *[m_202971], **kwargs_202972)
        
        # Processing the call keyword arguments (line 1136)
        kwargs_202974 = {}
        # Getting the type of 'list' (line 1136)
        list_202968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 25), 'list', False)
        # Calling list(args, kwargs) (line 1136)
        list_call_result_202975 = invoke(stypy.reporting.localization.Localization(__file__, 1136, 25), list_202968, *[loadTestsFromModule_call_result_202973], **kwargs_202974)
        
        # Getting the type of 'tests' (line 1136)
        tests_202976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 62), 'tests', False)
        # Processing the call keyword arguments (line 1136)
        kwargs_202977 = {}
        # Getting the type of 'self' (line 1136)
        self_202966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 1136)
        assertEqual_202967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1136, 8), self_202966, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 1136)
        assertEqual_call_result_202978 = invoke(stypy.reporting.localization.Localization(__file__, 1136, 8), assertEqual_202967, *[list_call_result_202975, tests_202976], **kwargs_202977)
        
        
        # ################# End of 'test_sortTestMethodsUsing__loadTestsFromModule(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_sortTestMethodsUsing__loadTestsFromModule' in the type store
        # Getting the type of 'stypy_return_type' (line 1122)
        stypy_return_type_202979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_202979)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_sortTestMethodsUsing__loadTestsFromModule'
        return stypy_return_type_202979


    @norecursion
    def test_sortTestMethodsUsing__loadTestsFromName(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_sortTestMethodsUsing__loadTestsFromName'
        module_type_store = module_type_store.open_function_context('test_sortTestMethodsUsing__loadTestsFromName', 1140, 4, False)
        # Assigning a type to the variable 'self' (line 1141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromName.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromName.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromName.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromName.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromName')
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromName.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromName.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromName.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromName.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromName.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromName.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromName.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromName', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_sortTestMethodsUsing__loadTestsFromName', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_sortTestMethodsUsing__loadTestsFromName(...)' code ##################


        @norecursion
        def reversed_cmp(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'reversed_cmp'
            module_type_store = module_type_store.open_function_context('reversed_cmp', 1141, 8, False)
            
            # Passed parameters checking function
            reversed_cmp.stypy_localization = localization
            reversed_cmp.stypy_type_of_self = None
            reversed_cmp.stypy_type_store = module_type_store
            reversed_cmp.stypy_function_name = 'reversed_cmp'
            reversed_cmp.stypy_param_names_list = ['x', 'y']
            reversed_cmp.stypy_varargs_param_name = None
            reversed_cmp.stypy_kwargs_param_name = None
            reversed_cmp.stypy_call_defaults = defaults
            reversed_cmp.stypy_call_varargs = varargs
            reversed_cmp.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'reversed_cmp', ['x', 'y'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'reversed_cmp', localization, ['x', 'y'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'reversed_cmp(...)' code ##################

            
            
            # Call to cmp(...): (line 1142)
            # Processing the call arguments (line 1142)
            # Getting the type of 'x' (line 1142)
            x_202981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 24), 'x', False)
            # Getting the type of 'y' (line 1142)
            y_202982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 27), 'y', False)
            # Processing the call keyword arguments (line 1142)
            kwargs_202983 = {}
            # Getting the type of 'cmp' (line 1142)
            cmp_202980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 20), 'cmp', False)
            # Calling cmp(args, kwargs) (line 1142)
            cmp_call_result_202984 = invoke(stypy.reporting.localization.Localization(__file__, 1142, 20), cmp_202980, *[x_202981, y_202982], **kwargs_202983)
            
            # Applying the 'usub' unary operator (line 1142)
            result___neg___202985 = python_operator(stypy.reporting.localization.Localization(__file__, 1142, 19), 'usub', cmp_call_result_202984)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1142)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1142, 12), 'stypy_return_type', result___neg___202985)
            
            # ################# End of 'reversed_cmp(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'reversed_cmp' in the type store
            # Getting the type of 'stypy_return_type' (line 1141)
            stypy_return_type_202986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_202986)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'reversed_cmp'
            return stypy_return_type_202986

        # Assigning a type to the variable 'reversed_cmp' (line 1141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 8), 'reversed_cmp', reversed_cmp)
        
        # Assigning a Call to a Name (line 1144):
        
        # Call to ModuleType(...): (line 1144)
        # Processing the call arguments (line 1144)
        str_202989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1144, 29), 'str', 'm')
        # Processing the call keyword arguments (line 1144)
        kwargs_202990 = {}
        # Getting the type of 'types' (line 1144)
        types_202987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 1144)
        ModuleType_202988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1144, 12), types_202987, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 1144)
        ModuleType_call_result_202991 = invoke(stypy.reporting.localization.Localization(__file__, 1144, 12), ModuleType_202988, *[str_202989], **kwargs_202990)
        
        # Assigning a type to the variable 'm' (line 1144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1144, 8), 'm', ModuleType_call_result_202991)
        # Declaration of the 'Foo' class
        # Getting the type of 'unittest' (line 1145)
        unittest_202992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 18), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 1145)
        TestCase_202993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1145, 18), unittest_202992, 'TestCase')

        class Foo(TestCase_202993, ):

            @norecursion
            def test_1(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_1'
                module_type_store = module_type_store.open_function_context('test_1', 1146, 12, False)
                # Assigning a type to the variable 'self' (line 1147)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_1.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_1.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_1.__dict__.__setitem__('stypy_function_name', 'Foo.test_1')
                Foo.test_1.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_1.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_1.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_1.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_1', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_1', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_1(...)' code ##################

                pass
                
                # ################# End of 'test_1(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_1' in the type store
                # Getting the type of 'stypy_return_type' (line 1146)
                stypy_return_type_202994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202994)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_1'
                return stypy_return_type_202994


            @norecursion
            def test_2(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_2'
                module_type_store = module_type_store.open_function_context('test_2', 1147, 12, False)
                # Assigning a type to the variable 'self' (line 1148)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1148, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_2.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_2.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_2.__dict__.__setitem__('stypy_function_name', 'Foo.test_2')
                Foo.test_2.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_2.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_2.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_2.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_2', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_2', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_2(...)' code ##################

                pass
                
                # ################# End of 'test_2(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_2' in the type store
                # Getting the type of 'stypy_return_type' (line 1147)
                stypy_return_type_202995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_202995)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_2'
                return stypy_return_type_202995

        
        # Assigning a type to the variable 'Foo' (line 1145)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1145, 8), 'Foo', Foo)
        
        # Assigning a Name to a Attribute (line 1148):
        # Getting the type of 'Foo' (line 1148)
        Foo_202996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 16), 'Foo')
        # Getting the type of 'm' (line 1148)
        m_202997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 8), 'm')
        # Setting the type of the member 'Foo' of a type (line 1148)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1148, 8), m_202997, 'Foo', Foo_202996)
        
        # Assigning a Call to a Name (line 1150):
        
        # Call to TestLoader(...): (line 1150)
        # Processing the call keyword arguments (line 1150)
        kwargs_203000 = {}
        # Getting the type of 'unittest' (line 1150)
        unittest_202998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 1150)
        TestLoader_202999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1150, 17), unittest_202998, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 1150)
        TestLoader_call_result_203001 = invoke(stypy.reporting.localization.Localization(__file__, 1150, 17), TestLoader_202999, *[], **kwargs_203000)
        
        # Assigning a type to the variable 'loader' (line 1150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 8), 'loader', TestLoader_call_result_203001)
        
        # Assigning a Name to a Attribute (line 1151):
        # Getting the type of 'reversed_cmp' (line 1151)
        reversed_cmp_203002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 38), 'reversed_cmp')
        # Getting the type of 'loader' (line 1151)
        loader_203003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 8), 'loader')
        # Setting the type of the member 'sortTestMethodsUsing' of a type (line 1151)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1151, 8), loader_203003, 'sortTestMethodsUsing', reversed_cmp_203002)
        
        # Assigning a Call to a Name (line 1153):
        
        # Call to suiteClass(...): (line 1153)
        # Processing the call arguments (line 1153)
        
        # Obtaining an instance of the builtin type 'list' (line 1153)
        list_203006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1153, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1153)
        # Adding element type (line 1153)
        
        # Call to Foo(...): (line 1153)
        # Processing the call arguments (line 1153)
        str_203008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1153, 39), 'str', 'test_2')
        # Processing the call keyword arguments (line 1153)
        kwargs_203009 = {}
        # Getting the type of 'Foo' (line 1153)
        Foo_203007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 35), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1153)
        Foo_call_result_203010 = invoke(stypy.reporting.localization.Localization(__file__, 1153, 35), Foo_203007, *[str_203008], **kwargs_203009)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1153, 34), list_203006, Foo_call_result_203010)
        # Adding element type (line 1153)
        
        # Call to Foo(...): (line 1153)
        # Processing the call arguments (line 1153)
        str_203012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1153, 54), 'str', 'test_1')
        # Processing the call keyword arguments (line 1153)
        kwargs_203013 = {}
        # Getting the type of 'Foo' (line 1153)
        Foo_203011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 50), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1153)
        Foo_call_result_203014 = invoke(stypy.reporting.localization.Localization(__file__, 1153, 50), Foo_203011, *[str_203012], **kwargs_203013)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1153, 34), list_203006, Foo_call_result_203014)
        
        # Processing the call keyword arguments (line 1153)
        kwargs_203015 = {}
        # Getting the type of 'loader' (line 1153)
        loader_203004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 16), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 1153)
        suiteClass_203005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1153, 16), loader_203004, 'suiteClass')
        # Calling suiteClass(args, kwargs) (line 1153)
        suiteClass_call_result_203016 = invoke(stypy.reporting.localization.Localization(__file__, 1153, 16), suiteClass_203005, *[list_203006], **kwargs_203015)
        
        # Assigning a type to the variable 'tests' (line 1153)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1153, 8), 'tests', suiteClass_call_result_203016)
        
        # Call to assertEqual(...): (line 1154)
        # Processing the call arguments (line 1154)
        
        # Call to loadTestsFromName(...): (line 1154)
        # Processing the call arguments (line 1154)
        str_203021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1154, 50), 'str', 'Foo')
        # Getting the type of 'm' (line 1154)
        m_203022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 57), 'm', False)
        # Processing the call keyword arguments (line 1154)
        kwargs_203023 = {}
        # Getting the type of 'loader' (line 1154)
        loader_203019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 25), 'loader', False)
        # Obtaining the member 'loadTestsFromName' of a type (line 1154)
        loadTestsFromName_203020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1154, 25), loader_203019, 'loadTestsFromName')
        # Calling loadTestsFromName(args, kwargs) (line 1154)
        loadTestsFromName_call_result_203024 = invoke(stypy.reporting.localization.Localization(__file__, 1154, 25), loadTestsFromName_203020, *[str_203021, m_203022], **kwargs_203023)
        
        # Getting the type of 'tests' (line 1154)
        tests_203025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 61), 'tests', False)
        # Processing the call keyword arguments (line 1154)
        kwargs_203026 = {}
        # Getting the type of 'self' (line 1154)
        self_203017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 1154)
        assertEqual_203018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1154, 8), self_203017, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 1154)
        assertEqual_call_result_203027 = invoke(stypy.reporting.localization.Localization(__file__, 1154, 8), assertEqual_203018, *[loadTestsFromName_call_result_203024, tests_203025], **kwargs_203026)
        
        
        # ################# End of 'test_sortTestMethodsUsing__loadTestsFromName(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_sortTestMethodsUsing__loadTestsFromName' in the type store
        # Getting the type of 'stypy_return_type' (line 1140)
        stypy_return_type_203028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_203028)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_sortTestMethodsUsing__loadTestsFromName'
        return stypy_return_type_203028


    @norecursion
    def test_sortTestMethodsUsing__loadTestsFromNames(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_sortTestMethodsUsing__loadTestsFromNames'
        module_type_store = module_type_store.open_function_context('test_sortTestMethodsUsing__loadTestsFromNames', 1158, 4, False)
        # Assigning a type to the variable 'self' (line 1159)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1159, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromNames.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromNames.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromNames.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromNames.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromNames')
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromNames.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromNames.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromNames.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromNames.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromNames.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromNames.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromNames.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_sortTestMethodsUsing__loadTestsFromNames', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_sortTestMethodsUsing__loadTestsFromNames', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_sortTestMethodsUsing__loadTestsFromNames(...)' code ##################


        @norecursion
        def reversed_cmp(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'reversed_cmp'
            module_type_store = module_type_store.open_function_context('reversed_cmp', 1159, 8, False)
            
            # Passed parameters checking function
            reversed_cmp.stypy_localization = localization
            reversed_cmp.stypy_type_of_self = None
            reversed_cmp.stypy_type_store = module_type_store
            reversed_cmp.stypy_function_name = 'reversed_cmp'
            reversed_cmp.stypy_param_names_list = ['x', 'y']
            reversed_cmp.stypy_varargs_param_name = None
            reversed_cmp.stypy_kwargs_param_name = None
            reversed_cmp.stypy_call_defaults = defaults
            reversed_cmp.stypy_call_varargs = varargs
            reversed_cmp.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'reversed_cmp', ['x', 'y'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'reversed_cmp', localization, ['x', 'y'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'reversed_cmp(...)' code ##################

            
            
            # Call to cmp(...): (line 1160)
            # Processing the call arguments (line 1160)
            # Getting the type of 'x' (line 1160)
            x_203030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 24), 'x', False)
            # Getting the type of 'y' (line 1160)
            y_203031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 27), 'y', False)
            # Processing the call keyword arguments (line 1160)
            kwargs_203032 = {}
            # Getting the type of 'cmp' (line 1160)
            cmp_203029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 20), 'cmp', False)
            # Calling cmp(args, kwargs) (line 1160)
            cmp_call_result_203033 = invoke(stypy.reporting.localization.Localization(__file__, 1160, 20), cmp_203029, *[x_203030, y_203031], **kwargs_203032)
            
            # Applying the 'usub' unary operator (line 1160)
            result___neg___203034 = python_operator(stypy.reporting.localization.Localization(__file__, 1160, 19), 'usub', cmp_call_result_203033)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1160)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1160, 12), 'stypy_return_type', result___neg___203034)
            
            # ################# End of 'reversed_cmp(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'reversed_cmp' in the type store
            # Getting the type of 'stypy_return_type' (line 1159)
            stypy_return_type_203035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_203035)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'reversed_cmp'
            return stypy_return_type_203035

        # Assigning a type to the variable 'reversed_cmp' (line 1159)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1159, 8), 'reversed_cmp', reversed_cmp)
        
        # Assigning a Call to a Name (line 1162):
        
        # Call to ModuleType(...): (line 1162)
        # Processing the call arguments (line 1162)
        str_203038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1162, 29), 'str', 'm')
        # Processing the call keyword arguments (line 1162)
        kwargs_203039 = {}
        # Getting the type of 'types' (line 1162)
        types_203036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 1162)
        ModuleType_203037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1162, 12), types_203036, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 1162)
        ModuleType_call_result_203040 = invoke(stypy.reporting.localization.Localization(__file__, 1162, 12), ModuleType_203037, *[str_203038], **kwargs_203039)
        
        # Assigning a type to the variable 'm' (line 1162)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1162, 8), 'm', ModuleType_call_result_203040)
        # Declaration of the 'Foo' class
        # Getting the type of 'unittest' (line 1163)
        unittest_203041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 18), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 1163)
        TestCase_203042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 18), unittest_203041, 'TestCase')

        class Foo(TestCase_203042, ):

            @norecursion
            def test_1(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_1'
                module_type_store = module_type_store.open_function_context('test_1', 1164, 12, False)
                # Assigning a type to the variable 'self' (line 1165)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1165, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_1.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_1.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_1.__dict__.__setitem__('stypy_function_name', 'Foo.test_1')
                Foo.test_1.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_1.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_1.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_1.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_1', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_1', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_1(...)' code ##################

                pass
                
                # ################# End of 'test_1(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_1' in the type store
                # Getting the type of 'stypy_return_type' (line 1164)
                stypy_return_type_203043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_203043)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_1'
                return stypy_return_type_203043


            @norecursion
            def test_2(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_2'
                module_type_store = module_type_store.open_function_context('test_2', 1165, 12, False)
                # Assigning a type to the variable 'self' (line 1166)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1166, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_2.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_2.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_2.__dict__.__setitem__('stypy_function_name', 'Foo.test_2')
                Foo.test_2.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_2.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_2.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_2.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_2', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_2', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_2(...)' code ##################

                pass
                
                # ################# End of 'test_2(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_2' in the type store
                # Getting the type of 'stypy_return_type' (line 1165)
                stypy_return_type_203044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_203044)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_2'
                return stypy_return_type_203044

        
        # Assigning a type to the variable 'Foo' (line 1163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 8), 'Foo', Foo)
        
        # Assigning a Name to a Attribute (line 1166):
        # Getting the type of 'Foo' (line 1166)
        Foo_203045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 16), 'Foo')
        # Getting the type of 'm' (line 1166)
        m_203046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 8), 'm')
        # Setting the type of the member 'Foo' of a type (line 1166)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 8), m_203046, 'Foo', Foo_203045)
        
        # Assigning a Call to a Name (line 1168):
        
        # Call to TestLoader(...): (line 1168)
        # Processing the call keyword arguments (line 1168)
        kwargs_203049 = {}
        # Getting the type of 'unittest' (line 1168)
        unittest_203047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 1168)
        TestLoader_203048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1168, 17), unittest_203047, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 1168)
        TestLoader_call_result_203050 = invoke(stypy.reporting.localization.Localization(__file__, 1168, 17), TestLoader_203048, *[], **kwargs_203049)
        
        # Assigning a type to the variable 'loader' (line 1168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1168, 8), 'loader', TestLoader_call_result_203050)
        
        # Assigning a Name to a Attribute (line 1169):
        # Getting the type of 'reversed_cmp' (line 1169)
        reversed_cmp_203051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 38), 'reversed_cmp')
        # Getting the type of 'loader' (line 1169)
        loader_203052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 8), 'loader')
        # Setting the type of the member 'sortTestMethodsUsing' of a type (line 1169)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1169, 8), loader_203052, 'sortTestMethodsUsing', reversed_cmp_203051)
        
        # Assigning a List to a Name (line 1171):
        
        # Obtaining an instance of the builtin type 'list' (line 1171)
        list_203053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1171, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1171)
        # Adding element type (line 1171)
        
        # Call to suiteClass(...): (line 1171)
        # Processing the call arguments (line 1171)
        
        # Obtaining an instance of the builtin type 'list' (line 1171)
        list_203056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1171, 35), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1171)
        # Adding element type (line 1171)
        
        # Call to Foo(...): (line 1171)
        # Processing the call arguments (line 1171)
        str_203058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1171, 40), 'str', 'test_2')
        # Processing the call keyword arguments (line 1171)
        kwargs_203059 = {}
        # Getting the type of 'Foo' (line 1171)
        Foo_203057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 36), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1171)
        Foo_call_result_203060 = invoke(stypy.reporting.localization.Localization(__file__, 1171, 36), Foo_203057, *[str_203058], **kwargs_203059)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1171, 35), list_203056, Foo_call_result_203060)
        # Adding element type (line 1171)
        
        # Call to Foo(...): (line 1171)
        # Processing the call arguments (line 1171)
        str_203062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1171, 55), 'str', 'test_1')
        # Processing the call keyword arguments (line 1171)
        kwargs_203063 = {}
        # Getting the type of 'Foo' (line 1171)
        Foo_203061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 51), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1171)
        Foo_call_result_203064 = invoke(stypy.reporting.localization.Localization(__file__, 1171, 51), Foo_203061, *[str_203062], **kwargs_203063)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1171, 35), list_203056, Foo_call_result_203064)
        
        # Processing the call keyword arguments (line 1171)
        kwargs_203065 = {}
        # Getting the type of 'loader' (line 1171)
        loader_203054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 17), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 1171)
        suiteClass_203055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1171, 17), loader_203054, 'suiteClass')
        # Calling suiteClass(args, kwargs) (line 1171)
        suiteClass_call_result_203066 = invoke(stypy.reporting.localization.Localization(__file__, 1171, 17), suiteClass_203055, *[list_203056], **kwargs_203065)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1171, 16), list_203053, suiteClass_call_result_203066)
        
        # Assigning a type to the variable 'tests' (line 1171)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1171, 8), 'tests', list_203053)
        
        # Call to assertEqual(...): (line 1172)
        # Processing the call arguments (line 1172)
        
        # Call to list(...): (line 1172)
        # Processing the call arguments (line 1172)
        
        # Call to loadTestsFromNames(...): (line 1172)
        # Processing the call arguments (line 1172)
        
        # Obtaining an instance of the builtin type 'list' (line 1172)
        list_203072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1172, 56), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1172)
        # Adding element type (line 1172)
        str_203073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1172, 57), 'str', 'Foo')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1172, 56), list_203072, str_203073)
        
        # Getting the type of 'm' (line 1172)
        m_203074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 65), 'm', False)
        # Processing the call keyword arguments (line 1172)
        kwargs_203075 = {}
        # Getting the type of 'loader' (line 1172)
        loader_203070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 30), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 1172)
        loadTestsFromNames_203071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1172, 30), loader_203070, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 1172)
        loadTestsFromNames_call_result_203076 = invoke(stypy.reporting.localization.Localization(__file__, 1172, 30), loadTestsFromNames_203071, *[list_203072, m_203074], **kwargs_203075)
        
        # Processing the call keyword arguments (line 1172)
        kwargs_203077 = {}
        # Getting the type of 'list' (line 1172)
        list_203069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 25), 'list', False)
        # Calling list(args, kwargs) (line 1172)
        list_call_result_203078 = invoke(stypy.reporting.localization.Localization(__file__, 1172, 25), list_203069, *[loadTestsFromNames_call_result_203076], **kwargs_203077)
        
        # Getting the type of 'tests' (line 1172)
        tests_203079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 70), 'tests', False)
        # Processing the call keyword arguments (line 1172)
        kwargs_203080 = {}
        # Getting the type of 'self' (line 1172)
        self_203067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 1172)
        assertEqual_203068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1172, 8), self_203067, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 1172)
        assertEqual_call_result_203081 = invoke(stypy.reporting.localization.Localization(__file__, 1172, 8), assertEqual_203068, *[list_call_result_203078, tests_203079], **kwargs_203080)
        
        
        # ################# End of 'test_sortTestMethodsUsing__loadTestsFromNames(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_sortTestMethodsUsing__loadTestsFromNames' in the type store
        # Getting the type of 'stypy_return_type' (line 1158)
        stypy_return_type_203082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_203082)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_sortTestMethodsUsing__loadTestsFromNames'
        return stypy_return_type_203082


    @norecursion
    def test_sortTestMethodsUsing__getTestCaseNames(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_sortTestMethodsUsing__getTestCaseNames'
        module_type_store = module_type_store.open_function_context('test_sortTestMethodsUsing__getTestCaseNames', 1178, 4, False)
        # Assigning a type to the variable 'self' (line 1179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1179, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_sortTestMethodsUsing__getTestCaseNames.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_sortTestMethodsUsing__getTestCaseNames.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_sortTestMethodsUsing__getTestCaseNames.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_sortTestMethodsUsing__getTestCaseNames.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_sortTestMethodsUsing__getTestCaseNames')
        Test_TestLoader.test_sortTestMethodsUsing__getTestCaseNames.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_sortTestMethodsUsing__getTestCaseNames.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_sortTestMethodsUsing__getTestCaseNames.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_sortTestMethodsUsing__getTestCaseNames.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_sortTestMethodsUsing__getTestCaseNames.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_sortTestMethodsUsing__getTestCaseNames.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_sortTestMethodsUsing__getTestCaseNames.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_sortTestMethodsUsing__getTestCaseNames', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_sortTestMethodsUsing__getTestCaseNames', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_sortTestMethodsUsing__getTestCaseNames(...)' code ##################


        @norecursion
        def reversed_cmp(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'reversed_cmp'
            module_type_store = module_type_store.open_function_context('reversed_cmp', 1179, 8, False)
            
            # Passed parameters checking function
            reversed_cmp.stypy_localization = localization
            reversed_cmp.stypy_type_of_self = None
            reversed_cmp.stypy_type_store = module_type_store
            reversed_cmp.stypy_function_name = 'reversed_cmp'
            reversed_cmp.stypy_param_names_list = ['x', 'y']
            reversed_cmp.stypy_varargs_param_name = None
            reversed_cmp.stypy_kwargs_param_name = None
            reversed_cmp.stypy_call_defaults = defaults
            reversed_cmp.stypy_call_varargs = varargs
            reversed_cmp.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'reversed_cmp', ['x', 'y'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'reversed_cmp', localization, ['x', 'y'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'reversed_cmp(...)' code ##################

            
            
            # Call to cmp(...): (line 1180)
            # Processing the call arguments (line 1180)
            # Getting the type of 'x' (line 1180)
            x_203084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 24), 'x', False)
            # Getting the type of 'y' (line 1180)
            y_203085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 27), 'y', False)
            # Processing the call keyword arguments (line 1180)
            kwargs_203086 = {}
            # Getting the type of 'cmp' (line 1180)
            cmp_203083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 20), 'cmp', False)
            # Calling cmp(args, kwargs) (line 1180)
            cmp_call_result_203087 = invoke(stypy.reporting.localization.Localization(__file__, 1180, 20), cmp_203083, *[x_203084, y_203085], **kwargs_203086)
            
            # Applying the 'usub' unary operator (line 1180)
            result___neg___203088 = python_operator(stypy.reporting.localization.Localization(__file__, 1180, 19), 'usub', cmp_call_result_203087)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1180)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1180, 12), 'stypy_return_type', result___neg___203088)
            
            # ################# End of 'reversed_cmp(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'reversed_cmp' in the type store
            # Getting the type of 'stypy_return_type' (line 1179)
            stypy_return_type_203089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_203089)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'reversed_cmp'
            return stypy_return_type_203089

        # Assigning a type to the variable 'reversed_cmp' (line 1179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1179, 8), 'reversed_cmp', reversed_cmp)
        # Declaration of the 'Foo' class
        # Getting the type of 'unittest' (line 1182)
        unittest_203090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 18), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 1182)
        TestCase_203091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1182, 18), unittest_203090, 'TestCase')

        class Foo(TestCase_203091, ):

            @norecursion
            def test_1(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_1'
                module_type_store = module_type_store.open_function_context('test_1', 1183, 12, False)
                # Assigning a type to the variable 'self' (line 1184)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1184, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_1.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_1.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_1.__dict__.__setitem__('stypy_function_name', 'Foo.test_1')
                Foo.test_1.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_1.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_1.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_1.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_1', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_1', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_1(...)' code ##################

                pass
                
                # ################# End of 'test_1(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_1' in the type store
                # Getting the type of 'stypy_return_type' (line 1183)
                stypy_return_type_203092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_203092)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_1'
                return stypy_return_type_203092


            @norecursion
            def test_2(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_2'
                module_type_store = module_type_store.open_function_context('test_2', 1184, 12, False)
                # Assigning a type to the variable 'self' (line 1185)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1185, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_2.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_2.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_2.__dict__.__setitem__('stypy_function_name', 'Foo.test_2')
                Foo.test_2.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_2.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_2.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_2.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_2', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_2', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_2(...)' code ##################

                pass
                
                # ################# End of 'test_2(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_2' in the type store
                # Getting the type of 'stypy_return_type' (line 1184)
                stypy_return_type_203093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_203093)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_2'
                return stypy_return_type_203093

        
        # Assigning a type to the variable 'Foo' (line 1182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1182, 8), 'Foo', Foo)
        
        # Assigning a Call to a Name (line 1186):
        
        # Call to TestLoader(...): (line 1186)
        # Processing the call keyword arguments (line 1186)
        kwargs_203096 = {}
        # Getting the type of 'unittest' (line 1186)
        unittest_203094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 1186)
        TestLoader_203095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1186, 17), unittest_203094, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 1186)
        TestLoader_call_result_203097 = invoke(stypy.reporting.localization.Localization(__file__, 1186, 17), TestLoader_203095, *[], **kwargs_203096)
        
        # Assigning a type to the variable 'loader' (line 1186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1186, 8), 'loader', TestLoader_call_result_203097)
        
        # Assigning a Name to a Attribute (line 1187):
        # Getting the type of 'reversed_cmp' (line 1187)
        reversed_cmp_203098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 38), 'reversed_cmp')
        # Getting the type of 'loader' (line 1187)
        loader_203099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 8), 'loader')
        # Setting the type of the member 'sortTestMethodsUsing' of a type (line 1187)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 8), loader_203099, 'sortTestMethodsUsing', reversed_cmp_203098)
        
        # Assigning a List to a Name (line 1189):
        
        # Obtaining an instance of the builtin type 'list' (line 1189)
        list_203100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1189, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1189)
        # Adding element type (line 1189)
        str_203101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1189, 22), 'str', 'test_2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 21), list_203100, str_203101)
        # Adding element type (line 1189)
        str_203102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1189, 32), 'str', 'test_1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 21), list_203100, str_203102)
        
        # Assigning a type to the variable 'test_names' (line 1189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1189, 8), 'test_names', list_203100)
        
        # Call to assertEqual(...): (line 1190)
        # Processing the call arguments (line 1190)
        
        # Call to getTestCaseNames(...): (line 1190)
        # Processing the call arguments (line 1190)
        # Getting the type of 'Foo' (line 1190)
        Foo_203107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 49), 'Foo', False)
        # Processing the call keyword arguments (line 1190)
        kwargs_203108 = {}
        # Getting the type of 'loader' (line 1190)
        loader_203105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 25), 'loader', False)
        # Obtaining the member 'getTestCaseNames' of a type (line 1190)
        getTestCaseNames_203106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1190, 25), loader_203105, 'getTestCaseNames')
        # Calling getTestCaseNames(args, kwargs) (line 1190)
        getTestCaseNames_call_result_203109 = invoke(stypy.reporting.localization.Localization(__file__, 1190, 25), getTestCaseNames_203106, *[Foo_203107], **kwargs_203108)
        
        # Getting the type of 'test_names' (line 1190)
        test_names_203110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 55), 'test_names', False)
        # Processing the call keyword arguments (line 1190)
        kwargs_203111 = {}
        # Getting the type of 'self' (line 1190)
        self_203103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 1190)
        assertEqual_203104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1190, 8), self_203103, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 1190)
        assertEqual_call_result_203112 = invoke(stypy.reporting.localization.Localization(__file__, 1190, 8), assertEqual_203104, *[getTestCaseNames_call_result_203109, test_names_203110], **kwargs_203111)
        
        
        # ################# End of 'test_sortTestMethodsUsing__getTestCaseNames(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_sortTestMethodsUsing__getTestCaseNames' in the type store
        # Getting the type of 'stypy_return_type' (line 1178)
        stypy_return_type_203113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_203113)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_sortTestMethodsUsing__getTestCaseNames'
        return stypy_return_type_203113


    @norecursion
    def test_sortTestMethodsUsing__default_value(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_sortTestMethodsUsing__default_value'
        module_type_store = module_type_store.open_function_context('test_sortTestMethodsUsing__default_value', 1193, 4, False)
        # Assigning a type to the variable 'self' (line 1194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1194, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_sortTestMethodsUsing__default_value.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_sortTestMethodsUsing__default_value.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_sortTestMethodsUsing__default_value.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_sortTestMethodsUsing__default_value.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_sortTestMethodsUsing__default_value')
        Test_TestLoader.test_sortTestMethodsUsing__default_value.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_sortTestMethodsUsing__default_value.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_sortTestMethodsUsing__default_value.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_sortTestMethodsUsing__default_value.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_sortTestMethodsUsing__default_value.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_sortTestMethodsUsing__default_value.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_sortTestMethodsUsing__default_value.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_sortTestMethodsUsing__default_value', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_sortTestMethodsUsing__default_value', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_sortTestMethodsUsing__default_value(...)' code ##################

        
        # Assigning a Call to a Name (line 1194):
        
        # Call to TestLoader(...): (line 1194)
        # Processing the call keyword arguments (line 1194)
        kwargs_203116 = {}
        # Getting the type of 'unittest' (line 1194)
        unittest_203114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 1194)
        TestLoader_203115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1194, 17), unittest_203114, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 1194)
        TestLoader_call_result_203117 = invoke(stypy.reporting.localization.Localization(__file__, 1194, 17), TestLoader_203115, *[], **kwargs_203116)
        
        # Assigning a type to the variable 'loader' (line 1194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1194, 8), 'loader', TestLoader_call_result_203117)
        
        # Call to assertTrue(...): (line 1195)
        # Processing the call arguments (line 1195)
        
        # Getting the type of 'loader' (line 1195)
        loader_203120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 24), 'loader', False)
        # Obtaining the member 'sortTestMethodsUsing' of a type (line 1195)
        sortTestMethodsUsing_203121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 24), loader_203120, 'sortTestMethodsUsing')
        # Getting the type of 'cmp' (line 1195)
        cmp_203122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 55), 'cmp', False)
        # Applying the binary operator 'is' (line 1195)
        result_is__203123 = python_operator(stypy.reporting.localization.Localization(__file__, 1195, 24), 'is', sortTestMethodsUsing_203121, cmp_203122)
        
        # Processing the call keyword arguments (line 1195)
        kwargs_203124 = {}
        # Getting the type of 'self' (line 1195)
        self_203118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 8), 'self', False)
        # Obtaining the member 'assertTrue' of a type (line 1195)
        assertTrue_203119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 8), self_203118, 'assertTrue')
        # Calling assertTrue(args, kwargs) (line 1195)
        assertTrue_call_result_203125 = invoke(stypy.reporting.localization.Localization(__file__, 1195, 8), assertTrue_203119, *[result_is__203123], **kwargs_203124)
        
        
        # ################# End of 'test_sortTestMethodsUsing__default_value(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_sortTestMethodsUsing__default_value' in the type store
        # Getting the type of 'stypy_return_type' (line 1193)
        stypy_return_type_203126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_203126)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_sortTestMethodsUsing__default_value'
        return stypy_return_type_203126


    @norecursion
    def test_sortTestMethodsUsing__None(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_sortTestMethodsUsing__None'
        module_type_store = module_type_store.open_function_context('test_sortTestMethodsUsing__None', 1201, 4, False)
        # Assigning a type to the variable 'self' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_sortTestMethodsUsing__None.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_sortTestMethodsUsing__None.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_sortTestMethodsUsing__None.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_sortTestMethodsUsing__None.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_sortTestMethodsUsing__None')
        Test_TestLoader.test_sortTestMethodsUsing__None.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_sortTestMethodsUsing__None.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_sortTestMethodsUsing__None.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_sortTestMethodsUsing__None.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_sortTestMethodsUsing__None.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_sortTestMethodsUsing__None.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_sortTestMethodsUsing__None.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_sortTestMethodsUsing__None', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_sortTestMethodsUsing__None', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_sortTestMethodsUsing__None(...)' code ##################

        # Declaration of the 'Foo' class
        # Getting the type of 'unittest' (line 1202)
        unittest_203127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 18), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 1202)
        TestCase_203128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 18), unittest_203127, 'TestCase')

        class Foo(TestCase_203128, ):

            @norecursion
            def test_1(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_1'
                module_type_store = module_type_store.open_function_context('test_1', 1203, 12, False)
                # Assigning a type to the variable 'self' (line 1204)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1204, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_1.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_1.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_1.__dict__.__setitem__('stypy_function_name', 'Foo.test_1')
                Foo.test_1.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_1.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_1.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_1.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_1', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_1', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_1(...)' code ##################

                pass
                
                # ################# End of 'test_1(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_1' in the type store
                # Getting the type of 'stypy_return_type' (line 1203)
                stypy_return_type_203129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_203129)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_1'
                return stypy_return_type_203129


            @norecursion
            def test_2(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_2'
                module_type_store = module_type_store.open_function_context('test_2', 1204, 12, False)
                # Assigning a type to the variable 'self' (line 1205)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1205, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_2.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_2.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_2.__dict__.__setitem__('stypy_function_name', 'Foo.test_2')
                Foo.test_2.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_2.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_2.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_2.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_2', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_2', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_2(...)' code ##################

                pass
                
                # ################# End of 'test_2(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_2' in the type store
                # Getting the type of 'stypy_return_type' (line 1204)
                stypy_return_type_203130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_203130)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_2'
                return stypy_return_type_203130

        
        # Assigning a type to the variable 'Foo' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 8), 'Foo', Foo)
        
        # Assigning a Call to a Name (line 1206):
        
        # Call to TestLoader(...): (line 1206)
        # Processing the call keyword arguments (line 1206)
        kwargs_203133 = {}
        # Getting the type of 'unittest' (line 1206)
        unittest_203131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 1206)
        TestLoader_203132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1206, 17), unittest_203131, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 1206)
        TestLoader_call_result_203134 = invoke(stypy.reporting.localization.Localization(__file__, 1206, 17), TestLoader_203132, *[], **kwargs_203133)
        
        # Assigning a type to the variable 'loader' (line 1206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1206, 8), 'loader', TestLoader_call_result_203134)
        
        # Assigning a Name to a Attribute (line 1207):
        # Getting the type of 'None' (line 1207)
        None_203135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 38), 'None')
        # Getting the type of 'loader' (line 1207)
        loader_203136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 8), 'loader')
        # Setting the type of the member 'sortTestMethodsUsing' of a type (line 1207)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1207, 8), loader_203136, 'sortTestMethodsUsing', None_203135)
        
        # Assigning a List to a Name (line 1209):
        
        # Obtaining an instance of the builtin type 'list' (line 1209)
        list_203137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1209, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1209)
        # Adding element type (line 1209)
        str_203138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1209, 22), 'str', 'test_2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1209, 21), list_203137, str_203138)
        # Adding element type (line 1209)
        str_203139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1209, 32), 'str', 'test_1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1209, 21), list_203137, str_203139)
        
        # Assigning a type to the variable 'test_names' (line 1209)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1209, 8), 'test_names', list_203137)
        
        # Call to assertEqual(...): (line 1210)
        # Processing the call arguments (line 1210)
        
        # Call to set(...): (line 1210)
        # Processing the call arguments (line 1210)
        
        # Call to getTestCaseNames(...): (line 1210)
        # Processing the call arguments (line 1210)
        # Getting the type of 'Foo' (line 1210)
        Foo_203145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 53), 'Foo', False)
        # Processing the call keyword arguments (line 1210)
        kwargs_203146 = {}
        # Getting the type of 'loader' (line 1210)
        loader_203143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 29), 'loader', False)
        # Obtaining the member 'getTestCaseNames' of a type (line 1210)
        getTestCaseNames_203144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1210, 29), loader_203143, 'getTestCaseNames')
        # Calling getTestCaseNames(args, kwargs) (line 1210)
        getTestCaseNames_call_result_203147 = invoke(stypy.reporting.localization.Localization(__file__, 1210, 29), getTestCaseNames_203144, *[Foo_203145], **kwargs_203146)
        
        # Processing the call keyword arguments (line 1210)
        kwargs_203148 = {}
        # Getting the type of 'set' (line 1210)
        set_203142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 25), 'set', False)
        # Calling set(args, kwargs) (line 1210)
        set_call_result_203149 = invoke(stypy.reporting.localization.Localization(__file__, 1210, 25), set_203142, *[getTestCaseNames_call_result_203147], **kwargs_203148)
        
        
        # Call to set(...): (line 1210)
        # Processing the call arguments (line 1210)
        # Getting the type of 'test_names' (line 1210)
        test_names_203151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 64), 'test_names', False)
        # Processing the call keyword arguments (line 1210)
        kwargs_203152 = {}
        # Getting the type of 'set' (line 1210)
        set_203150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 60), 'set', False)
        # Calling set(args, kwargs) (line 1210)
        set_call_result_203153 = invoke(stypy.reporting.localization.Localization(__file__, 1210, 60), set_203150, *[test_names_203151], **kwargs_203152)
        
        # Processing the call keyword arguments (line 1210)
        kwargs_203154 = {}
        # Getting the type of 'self' (line 1210)
        self_203140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 1210)
        assertEqual_203141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1210, 8), self_203140, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 1210)
        assertEqual_call_result_203155 = invoke(stypy.reporting.localization.Localization(__file__, 1210, 8), assertEqual_203141, *[set_call_result_203149, set_call_result_203153], **kwargs_203154)
        
        
        # ################# End of 'test_sortTestMethodsUsing__None(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_sortTestMethodsUsing__None' in the type store
        # Getting the type of 'stypy_return_type' (line 1201)
        stypy_return_type_203156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_203156)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_sortTestMethodsUsing__None'
        return stypy_return_type_203156


    @norecursion
    def test_suiteClass__loadTestsFromTestCase(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_suiteClass__loadTestsFromTestCase'
        module_type_store = module_type_store.open_function_context('test_suiteClass__loadTestsFromTestCase', 1219, 4, False)
        # Assigning a type to the variable 'self' (line 1220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1220, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_suiteClass__loadTestsFromTestCase.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_suiteClass__loadTestsFromTestCase.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_suiteClass__loadTestsFromTestCase.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_suiteClass__loadTestsFromTestCase.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_suiteClass__loadTestsFromTestCase')
        Test_TestLoader.test_suiteClass__loadTestsFromTestCase.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_suiteClass__loadTestsFromTestCase.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_suiteClass__loadTestsFromTestCase.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_suiteClass__loadTestsFromTestCase.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_suiteClass__loadTestsFromTestCase.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_suiteClass__loadTestsFromTestCase.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_suiteClass__loadTestsFromTestCase.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_suiteClass__loadTestsFromTestCase', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_suiteClass__loadTestsFromTestCase', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_suiteClass__loadTestsFromTestCase(...)' code ##################

        # Declaration of the 'Foo' class
        # Getting the type of 'unittest' (line 1220)
        unittest_203157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 18), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 1220)
        TestCase_203158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1220, 18), unittest_203157, 'TestCase')

        class Foo(TestCase_203158, ):

            @norecursion
            def test_1(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_1'
                module_type_store = module_type_store.open_function_context('test_1', 1221, 12, False)
                # Assigning a type to the variable 'self' (line 1222)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1222, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_1.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_1.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_1.__dict__.__setitem__('stypy_function_name', 'Foo.test_1')
                Foo.test_1.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_1.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_1.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_1.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_1', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_1', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_1(...)' code ##################

                pass
                
                # ################# End of 'test_1(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_1' in the type store
                # Getting the type of 'stypy_return_type' (line 1221)
                stypy_return_type_203159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_203159)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_1'
                return stypy_return_type_203159


            @norecursion
            def test_2(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_2'
                module_type_store = module_type_store.open_function_context('test_2', 1222, 12, False)
                # Assigning a type to the variable 'self' (line 1223)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1223, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_2.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_2.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_2.__dict__.__setitem__('stypy_function_name', 'Foo.test_2')
                Foo.test_2.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_2.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_2.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_2.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_2', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_2', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_2(...)' code ##################

                pass
                
                # ################# End of 'test_2(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_2' in the type store
                # Getting the type of 'stypy_return_type' (line 1222)
                stypy_return_type_203160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_203160)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_2'
                return stypy_return_type_203160


            @norecursion
            def foo_bar(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'foo_bar'
                module_type_store = module_type_store.open_function_context('foo_bar', 1223, 12, False)
                # Assigning a type to the variable 'self' (line 1224)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1224, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.foo_bar.__dict__.__setitem__('stypy_localization', localization)
                Foo.foo_bar.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.foo_bar.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.foo_bar.__dict__.__setitem__('stypy_function_name', 'Foo.foo_bar')
                Foo.foo_bar.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.foo_bar.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.foo_bar.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.foo_bar.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.foo_bar', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'foo_bar', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'foo_bar(...)' code ##################

                pass
                
                # ################# End of 'foo_bar(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'foo_bar' in the type store
                # Getting the type of 'stypy_return_type' (line 1223)
                stypy_return_type_203161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_203161)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'foo_bar'
                return stypy_return_type_203161

        
        # Assigning a type to the variable 'Foo' (line 1220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1220, 8), 'Foo', Foo)
        
        # Assigning a List to a Name (line 1225):
        
        # Obtaining an instance of the builtin type 'list' (line 1225)
        list_203162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1225, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1225)
        # Adding element type (line 1225)
        
        # Call to Foo(...): (line 1225)
        # Processing the call arguments (line 1225)
        str_203164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1225, 21), 'str', 'test_1')
        # Processing the call keyword arguments (line 1225)
        kwargs_203165 = {}
        # Getting the type of 'Foo' (line 1225)
        Foo_203163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 17), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1225)
        Foo_call_result_203166 = invoke(stypy.reporting.localization.Localization(__file__, 1225, 17), Foo_203163, *[str_203164], **kwargs_203165)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1225, 16), list_203162, Foo_call_result_203166)
        # Adding element type (line 1225)
        
        # Call to Foo(...): (line 1225)
        # Processing the call arguments (line 1225)
        str_203168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1225, 36), 'str', 'test_2')
        # Processing the call keyword arguments (line 1225)
        kwargs_203169 = {}
        # Getting the type of 'Foo' (line 1225)
        Foo_203167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 32), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1225)
        Foo_call_result_203170 = invoke(stypy.reporting.localization.Localization(__file__, 1225, 32), Foo_203167, *[str_203168], **kwargs_203169)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1225, 16), list_203162, Foo_call_result_203170)
        
        # Assigning a type to the variable 'tests' (line 1225)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1225, 8), 'tests', list_203162)
        
        # Assigning a Call to a Name (line 1227):
        
        # Call to TestLoader(...): (line 1227)
        # Processing the call keyword arguments (line 1227)
        kwargs_203173 = {}
        # Getting the type of 'unittest' (line 1227)
        unittest_203171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 1227)
        TestLoader_203172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1227, 17), unittest_203171, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 1227)
        TestLoader_call_result_203174 = invoke(stypy.reporting.localization.Localization(__file__, 1227, 17), TestLoader_203172, *[], **kwargs_203173)
        
        # Assigning a type to the variable 'loader' (line 1227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1227, 8), 'loader', TestLoader_call_result_203174)
        
        # Assigning a Name to a Attribute (line 1228):
        # Getting the type of 'list' (line 1228)
        list_203175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 28), 'list')
        # Getting the type of 'loader' (line 1228)
        loader_203176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 8), 'loader')
        # Setting the type of the member 'suiteClass' of a type (line 1228)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1228, 8), loader_203176, 'suiteClass', list_203175)
        
        # Call to assertEqual(...): (line 1229)
        # Processing the call arguments (line 1229)
        
        # Call to loadTestsFromTestCase(...): (line 1229)
        # Processing the call arguments (line 1229)
        # Getting the type of 'Foo' (line 1229)
        Foo_203181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 54), 'Foo', False)
        # Processing the call keyword arguments (line 1229)
        kwargs_203182 = {}
        # Getting the type of 'loader' (line 1229)
        loader_203179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 25), 'loader', False)
        # Obtaining the member 'loadTestsFromTestCase' of a type (line 1229)
        loadTestsFromTestCase_203180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1229, 25), loader_203179, 'loadTestsFromTestCase')
        # Calling loadTestsFromTestCase(args, kwargs) (line 1229)
        loadTestsFromTestCase_call_result_203183 = invoke(stypy.reporting.localization.Localization(__file__, 1229, 25), loadTestsFromTestCase_203180, *[Foo_203181], **kwargs_203182)
        
        # Getting the type of 'tests' (line 1229)
        tests_203184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 60), 'tests', False)
        # Processing the call keyword arguments (line 1229)
        kwargs_203185 = {}
        # Getting the type of 'self' (line 1229)
        self_203177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 1229)
        assertEqual_203178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1229, 8), self_203177, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 1229)
        assertEqual_call_result_203186 = invoke(stypy.reporting.localization.Localization(__file__, 1229, 8), assertEqual_203178, *[loadTestsFromTestCase_call_result_203183, tests_203184], **kwargs_203185)
        
        
        # ################# End of 'test_suiteClass__loadTestsFromTestCase(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_suiteClass__loadTestsFromTestCase' in the type store
        # Getting the type of 'stypy_return_type' (line 1219)
        stypy_return_type_203187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1219, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_203187)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_suiteClass__loadTestsFromTestCase'
        return stypy_return_type_203187


    @norecursion
    def test_suiteClass__loadTestsFromModule(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_suiteClass__loadTestsFromModule'
        module_type_store = module_type_store.open_function_context('test_suiteClass__loadTestsFromModule', 1233, 4, False)
        # Assigning a type to the variable 'self' (line 1234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1234, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_suiteClass__loadTestsFromModule.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_suiteClass__loadTestsFromModule.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_suiteClass__loadTestsFromModule.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_suiteClass__loadTestsFromModule.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_suiteClass__loadTestsFromModule')
        Test_TestLoader.test_suiteClass__loadTestsFromModule.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_suiteClass__loadTestsFromModule.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_suiteClass__loadTestsFromModule.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_suiteClass__loadTestsFromModule.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_suiteClass__loadTestsFromModule.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_suiteClass__loadTestsFromModule.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_suiteClass__loadTestsFromModule.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_suiteClass__loadTestsFromModule', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_suiteClass__loadTestsFromModule', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_suiteClass__loadTestsFromModule(...)' code ##################

        
        # Assigning a Call to a Name (line 1234):
        
        # Call to ModuleType(...): (line 1234)
        # Processing the call arguments (line 1234)
        str_203190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1234, 29), 'str', 'm')
        # Processing the call keyword arguments (line 1234)
        kwargs_203191 = {}
        # Getting the type of 'types' (line 1234)
        types_203188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 1234)
        ModuleType_203189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1234, 12), types_203188, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 1234)
        ModuleType_call_result_203192 = invoke(stypy.reporting.localization.Localization(__file__, 1234, 12), ModuleType_203189, *[str_203190], **kwargs_203191)
        
        # Assigning a type to the variable 'm' (line 1234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1234, 8), 'm', ModuleType_call_result_203192)
        # Declaration of the 'Foo' class
        # Getting the type of 'unittest' (line 1235)
        unittest_203193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 18), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 1235)
        TestCase_203194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1235, 18), unittest_203193, 'TestCase')

        class Foo(TestCase_203194, ):

            @norecursion
            def test_1(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_1'
                module_type_store = module_type_store.open_function_context('test_1', 1236, 12, False)
                # Assigning a type to the variable 'self' (line 1237)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1237, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_1.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_1.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_1.__dict__.__setitem__('stypy_function_name', 'Foo.test_1')
                Foo.test_1.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_1.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_1.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_1.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_1', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_1', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_1(...)' code ##################

                pass
                
                # ################# End of 'test_1(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_1' in the type store
                # Getting the type of 'stypy_return_type' (line 1236)
                stypy_return_type_203195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_203195)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_1'
                return stypy_return_type_203195


            @norecursion
            def test_2(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_2'
                module_type_store = module_type_store.open_function_context('test_2', 1237, 12, False)
                # Assigning a type to the variable 'self' (line 1238)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1238, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_2.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_2.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_2.__dict__.__setitem__('stypy_function_name', 'Foo.test_2')
                Foo.test_2.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_2.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_2.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_2.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_2', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_2', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_2(...)' code ##################

                pass
                
                # ################# End of 'test_2(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_2' in the type store
                # Getting the type of 'stypy_return_type' (line 1237)
                stypy_return_type_203196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_203196)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_2'
                return stypy_return_type_203196


            @norecursion
            def foo_bar(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'foo_bar'
                module_type_store = module_type_store.open_function_context('foo_bar', 1238, 12, False)
                # Assigning a type to the variable 'self' (line 1239)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1239, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.foo_bar.__dict__.__setitem__('stypy_localization', localization)
                Foo.foo_bar.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.foo_bar.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.foo_bar.__dict__.__setitem__('stypy_function_name', 'Foo.foo_bar')
                Foo.foo_bar.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.foo_bar.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.foo_bar.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.foo_bar.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.foo_bar', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'foo_bar', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'foo_bar(...)' code ##################

                pass
                
                # ################# End of 'foo_bar(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'foo_bar' in the type store
                # Getting the type of 'stypy_return_type' (line 1238)
                stypy_return_type_203197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_203197)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'foo_bar'
                return stypy_return_type_203197

        
        # Assigning a type to the variable 'Foo' (line 1235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1235, 8), 'Foo', Foo)
        
        # Assigning a Name to a Attribute (line 1239):
        # Getting the type of 'Foo' (line 1239)
        Foo_203198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 16), 'Foo')
        # Getting the type of 'm' (line 1239)
        m_203199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 8), 'm')
        # Setting the type of the member 'Foo' of a type (line 1239)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1239, 8), m_203199, 'Foo', Foo_203198)
        
        # Assigning a List to a Name (line 1241):
        
        # Obtaining an instance of the builtin type 'list' (line 1241)
        list_203200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1241, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1241)
        # Adding element type (line 1241)
        
        # Obtaining an instance of the builtin type 'list' (line 1241)
        list_203201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1241, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1241)
        # Adding element type (line 1241)
        
        # Call to Foo(...): (line 1241)
        # Processing the call arguments (line 1241)
        str_203203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1241, 22), 'str', 'test_1')
        # Processing the call keyword arguments (line 1241)
        kwargs_203204 = {}
        # Getting the type of 'Foo' (line 1241)
        Foo_203202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 18), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1241)
        Foo_call_result_203205 = invoke(stypy.reporting.localization.Localization(__file__, 1241, 18), Foo_203202, *[str_203203], **kwargs_203204)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1241, 17), list_203201, Foo_call_result_203205)
        # Adding element type (line 1241)
        
        # Call to Foo(...): (line 1241)
        # Processing the call arguments (line 1241)
        str_203207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1241, 37), 'str', 'test_2')
        # Processing the call keyword arguments (line 1241)
        kwargs_203208 = {}
        # Getting the type of 'Foo' (line 1241)
        Foo_203206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 33), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1241)
        Foo_call_result_203209 = invoke(stypy.reporting.localization.Localization(__file__, 1241, 33), Foo_203206, *[str_203207], **kwargs_203208)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1241, 17), list_203201, Foo_call_result_203209)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1241, 16), list_203200, list_203201)
        
        # Assigning a type to the variable 'tests' (line 1241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1241, 8), 'tests', list_203200)
        
        # Assigning a Call to a Name (line 1243):
        
        # Call to TestLoader(...): (line 1243)
        # Processing the call keyword arguments (line 1243)
        kwargs_203212 = {}
        # Getting the type of 'unittest' (line 1243)
        unittest_203210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 1243)
        TestLoader_203211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1243, 17), unittest_203210, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 1243)
        TestLoader_call_result_203213 = invoke(stypy.reporting.localization.Localization(__file__, 1243, 17), TestLoader_203211, *[], **kwargs_203212)
        
        # Assigning a type to the variable 'loader' (line 1243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1243, 8), 'loader', TestLoader_call_result_203213)
        
        # Assigning a Name to a Attribute (line 1244):
        # Getting the type of 'list' (line 1244)
        list_203214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 28), 'list')
        # Getting the type of 'loader' (line 1244)
        loader_203215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 8), 'loader')
        # Setting the type of the member 'suiteClass' of a type (line 1244)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1244, 8), loader_203215, 'suiteClass', list_203214)
        
        # Call to assertEqual(...): (line 1245)
        # Processing the call arguments (line 1245)
        
        # Call to loadTestsFromModule(...): (line 1245)
        # Processing the call arguments (line 1245)
        # Getting the type of 'm' (line 1245)
        m_203220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 52), 'm', False)
        # Processing the call keyword arguments (line 1245)
        kwargs_203221 = {}
        # Getting the type of 'loader' (line 1245)
        loader_203218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 25), 'loader', False)
        # Obtaining the member 'loadTestsFromModule' of a type (line 1245)
        loadTestsFromModule_203219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1245, 25), loader_203218, 'loadTestsFromModule')
        # Calling loadTestsFromModule(args, kwargs) (line 1245)
        loadTestsFromModule_call_result_203222 = invoke(stypy.reporting.localization.Localization(__file__, 1245, 25), loadTestsFromModule_203219, *[m_203220], **kwargs_203221)
        
        # Getting the type of 'tests' (line 1245)
        tests_203223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 56), 'tests', False)
        # Processing the call keyword arguments (line 1245)
        kwargs_203224 = {}
        # Getting the type of 'self' (line 1245)
        self_203216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 1245)
        assertEqual_203217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1245, 8), self_203216, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 1245)
        assertEqual_call_result_203225 = invoke(stypy.reporting.localization.Localization(__file__, 1245, 8), assertEqual_203217, *[loadTestsFromModule_call_result_203222, tests_203223], **kwargs_203224)
        
        
        # ################# End of 'test_suiteClass__loadTestsFromModule(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_suiteClass__loadTestsFromModule' in the type store
        # Getting the type of 'stypy_return_type' (line 1233)
        stypy_return_type_203226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_203226)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_suiteClass__loadTestsFromModule'
        return stypy_return_type_203226


    @norecursion
    def test_suiteClass__loadTestsFromName(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_suiteClass__loadTestsFromName'
        module_type_store = module_type_store.open_function_context('test_suiteClass__loadTestsFromName', 1249, 4, False)
        # Assigning a type to the variable 'self' (line 1250)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1250, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_suiteClass__loadTestsFromName.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_suiteClass__loadTestsFromName.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_suiteClass__loadTestsFromName.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_suiteClass__loadTestsFromName.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_suiteClass__loadTestsFromName')
        Test_TestLoader.test_suiteClass__loadTestsFromName.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_suiteClass__loadTestsFromName.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_suiteClass__loadTestsFromName.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_suiteClass__loadTestsFromName.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_suiteClass__loadTestsFromName.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_suiteClass__loadTestsFromName.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_suiteClass__loadTestsFromName.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_suiteClass__loadTestsFromName', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_suiteClass__loadTestsFromName', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_suiteClass__loadTestsFromName(...)' code ##################

        
        # Assigning a Call to a Name (line 1250):
        
        # Call to ModuleType(...): (line 1250)
        # Processing the call arguments (line 1250)
        str_203229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1250, 29), 'str', 'm')
        # Processing the call keyword arguments (line 1250)
        kwargs_203230 = {}
        # Getting the type of 'types' (line 1250)
        types_203227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 1250)
        ModuleType_203228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1250, 12), types_203227, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 1250)
        ModuleType_call_result_203231 = invoke(stypy.reporting.localization.Localization(__file__, 1250, 12), ModuleType_203228, *[str_203229], **kwargs_203230)
        
        # Assigning a type to the variable 'm' (line 1250)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1250, 8), 'm', ModuleType_call_result_203231)
        # Declaration of the 'Foo' class
        # Getting the type of 'unittest' (line 1251)
        unittest_203232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 18), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 1251)
        TestCase_203233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1251, 18), unittest_203232, 'TestCase')

        class Foo(TestCase_203233, ):

            @norecursion
            def test_1(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_1'
                module_type_store = module_type_store.open_function_context('test_1', 1252, 12, False)
                # Assigning a type to the variable 'self' (line 1253)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1253, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_1.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_1.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_1.__dict__.__setitem__('stypy_function_name', 'Foo.test_1')
                Foo.test_1.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_1.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_1.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_1.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_1', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_1', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_1(...)' code ##################

                pass
                
                # ################# End of 'test_1(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_1' in the type store
                # Getting the type of 'stypy_return_type' (line 1252)
                stypy_return_type_203234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_203234)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_1'
                return stypy_return_type_203234


            @norecursion
            def test_2(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_2'
                module_type_store = module_type_store.open_function_context('test_2', 1253, 12, False)
                # Assigning a type to the variable 'self' (line 1254)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1254, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_2.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_2.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_2.__dict__.__setitem__('stypy_function_name', 'Foo.test_2')
                Foo.test_2.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_2.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_2.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_2.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_2', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_2', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_2(...)' code ##################

                pass
                
                # ################# End of 'test_2(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_2' in the type store
                # Getting the type of 'stypy_return_type' (line 1253)
                stypy_return_type_203235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_203235)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_2'
                return stypy_return_type_203235


            @norecursion
            def foo_bar(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'foo_bar'
                module_type_store = module_type_store.open_function_context('foo_bar', 1254, 12, False)
                # Assigning a type to the variable 'self' (line 1255)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1255, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.foo_bar.__dict__.__setitem__('stypy_localization', localization)
                Foo.foo_bar.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.foo_bar.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.foo_bar.__dict__.__setitem__('stypy_function_name', 'Foo.foo_bar')
                Foo.foo_bar.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.foo_bar.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.foo_bar.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.foo_bar.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.foo_bar', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'foo_bar', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'foo_bar(...)' code ##################

                pass
                
                # ################# End of 'foo_bar(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'foo_bar' in the type store
                # Getting the type of 'stypy_return_type' (line 1254)
                stypy_return_type_203236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_203236)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'foo_bar'
                return stypy_return_type_203236

        
        # Assigning a type to the variable 'Foo' (line 1251)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1251, 8), 'Foo', Foo)
        
        # Assigning a Name to a Attribute (line 1255):
        # Getting the type of 'Foo' (line 1255)
        Foo_203237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 16), 'Foo')
        # Getting the type of 'm' (line 1255)
        m_203238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 8), 'm')
        # Setting the type of the member 'Foo' of a type (line 1255)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1255, 8), m_203238, 'Foo', Foo_203237)
        
        # Assigning a List to a Name (line 1257):
        
        # Obtaining an instance of the builtin type 'list' (line 1257)
        list_203239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1257, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1257)
        # Adding element type (line 1257)
        
        # Call to Foo(...): (line 1257)
        # Processing the call arguments (line 1257)
        str_203241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1257, 21), 'str', 'test_1')
        # Processing the call keyword arguments (line 1257)
        kwargs_203242 = {}
        # Getting the type of 'Foo' (line 1257)
        Foo_203240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 17), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1257)
        Foo_call_result_203243 = invoke(stypy.reporting.localization.Localization(__file__, 1257, 17), Foo_203240, *[str_203241], **kwargs_203242)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1257, 16), list_203239, Foo_call_result_203243)
        # Adding element type (line 1257)
        
        # Call to Foo(...): (line 1257)
        # Processing the call arguments (line 1257)
        str_203245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1257, 36), 'str', 'test_2')
        # Processing the call keyword arguments (line 1257)
        kwargs_203246 = {}
        # Getting the type of 'Foo' (line 1257)
        Foo_203244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 32), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1257)
        Foo_call_result_203247 = invoke(stypy.reporting.localization.Localization(__file__, 1257, 32), Foo_203244, *[str_203245], **kwargs_203246)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1257, 16), list_203239, Foo_call_result_203247)
        
        # Assigning a type to the variable 'tests' (line 1257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1257, 8), 'tests', list_203239)
        
        # Assigning a Call to a Name (line 1259):
        
        # Call to TestLoader(...): (line 1259)
        # Processing the call keyword arguments (line 1259)
        kwargs_203250 = {}
        # Getting the type of 'unittest' (line 1259)
        unittest_203248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 1259)
        TestLoader_203249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1259, 17), unittest_203248, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 1259)
        TestLoader_call_result_203251 = invoke(stypy.reporting.localization.Localization(__file__, 1259, 17), TestLoader_203249, *[], **kwargs_203250)
        
        # Assigning a type to the variable 'loader' (line 1259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1259, 8), 'loader', TestLoader_call_result_203251)
        
        # Assigning a Name to a Attribute (line 1260):
        # Getting the type of 'list' (line 1260)
        list_203252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 28), 'list')
        # Getting the type of 'loader' (line 1260)
        loader_203253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 8), 'loader')
        # Setting the type of the member 'suiteClass' of a type (line 1260)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1260, 8), loader_203253, 'suiteClass', list_203252)
        
        # Call to assertEqual(...): (line 1261)
        # Processing the call arguments (line 1261)
        
        # Call to loadTestsFromName(...): (line 1261)
        # Processing the call arguments (line 1261)
        str_203258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1261, 50), 'str', 'Foo')
        # Getting the type of 'm' (line 1261)
        m_203259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 57), 'm', False)
        # Processing the call keyword arguments (line 1261)
        kwargs_203260 = {}
        # Getting the type of 'loader' (line 1261)
        loader_203256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 25), 'loader', False)
        # Obtaining the member 'loadTestsFromName' of a type (line 1261)
        loadTestsFromName_203257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1261, 25), loader_203256, 'loadTestsFromName')
        # Calling loadTestsFromName(args, kwargs) (line 1261)
        loadTestsFromName_call_result_203261 = invoke(stypy.reporting.localization.Localization(__file__, 1261, 25), loadTestsFromName_203257, *[str_203258, m_203259], **kwargs_203260)
        
        # Getting the type of 'tests' (line 1261)
        tests_203262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 61), 'tests', False)
        # Processing the call keyword arguments (line 1261)
        kwargs_203263 = {}
        # Getting the type of 'self' (line 1261)
        self_203254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 1261)
        assertEqual_203255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1261, 8), self_203254, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 1261)
        assertEqual_call_result_203264 = invoke(stypy.reporting.localization.Localization(__file__, 1261, 8), assertEqual_203255, *[loadTestsFromName_call_result_203261, tests_203262], **kwargs_203263)
        
        
        # ################# End of 'test_suiteClass__loadTestsFromName(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_suiteClass__loadTestsFromName' in the type store
        # Getting the type of 'stypy_return_type' (line 1249)
        stypy_return_type_203265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_203265)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_suiteClass__loadTestsFromName'
        return stypy_return_type_203265


    @norecursion
    def test_suiteClass__loadTestsFromNames(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_suiteClass__loadTestsFromNames'
        module_type_store = module_type_store.open_function_context('test_suiteClass__loadTestsFromNames', 1265, 4, False)
        # Assigning a type to the variable 'self' (line 1266)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1266, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_suiteClass__loadTestsFromNames.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_suiteClass__loadTestsFromNames.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_suiteClass__loadTestsFromNames.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_suiteClass__loadTestsFromNames.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_suiteClass__loadTestsFromNames')
        Test_TestLoader.test_suiteClass__loadTestsFromNames.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_suiteClass__loadTestsFromNames.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_suiteClass__loadTestsFromNames.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_suiteClass__loadTestsFromNames.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_suiteClass__loadTestsFromNames.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_suiteClass__loadTestsFromNames.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_suiteClass__loadTestsFromNames.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_suiteClass__loadTestsFromNames', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_suiteClass__loadTestsFromNames', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_suiteClass__loadTestsFromNames(...)' code ##################

        
        # Assigning a Call to a Name (line 1266):
        
        # Call to ModuleType(...): (line 1266)
        # Processing the call arguments (line 1266)
        str_203268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1266, 29), 'str', 'm')
        # Processing the call keyword arguments (line 1266)
        kwargs_203269 = {}
        # Getting the type of 'types' (line 1266)
        types_203266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 1266)
        ModuleType_203267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1266, 12), types_203266, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 1266)
        ModuleType_call_result_203270 = invoke(stypy.reporting.localization.Localization(__file__, 1266, 12), ModuleType_203267, *[str_203268], **kwargs_203269)
        
        # Assigning a type to the variable 'm' (line 1266)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1266, 8), 'm', ModuleType_call_result_203270)
        # Declaration of the 'Foo' class
        # Getting the type of 'unittest' (line 1267)
        unittest_203271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 18), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 1267)
        TestCase_203272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1267, 18), unittest_203271, 'TestCase')

        class Foo(TestCase_203272, ):

            @norecursion
            def test_1(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_1'
                module_type_store = module_type_store.open_function_context('test_1', 1268, 12, False)
                # Assigning a type to the variable 'self' (line 1269)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_1.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_1.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_1.__dict__.__setitem__('stypy_function_name', 'Foo.test_1')
                Foo.test_1.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_1.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_1.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_1.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_1.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_1', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_1', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_1(...)' code ##################

                pass
                
                # ################# End of 'test_1(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_1' in the type store
                # Getting the type of 'stypy_return_type' (line 1268)
                stypy_return_type_203273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_203273)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_1'
                return stypy_return_type_203273


            @norecursion
            def test_2(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'test_2'
                module_type_store = module_type_store.open_function_context('test_2', 1269, 12, False)
                # Assigning a type to the variable 'self' (line 1270)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1270, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.test_2.__dict__.__setitem__('stypy_localization', localization)
                Foo.test_2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.test_2.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.test_2.__dict__.__setitem__('stypy_function_name', 'Foo.test_2')
                Foo.test_2.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.test_2.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.test_2.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.test_2.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.test_2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.test_2.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.test_2', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'test_2', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'test_2(...)' code ##################

                pass
                
                # ################# End of 'test_2(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'test_2' in the type store
                # Getting the type of 'stypy_return_type' (line 1269)
                stypy_return_type_203274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_203274)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'test_2'
                return stypy_return_type_203274


            @norecursion
            def foo_bar(type_of_self, localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function 'foo_bar'
                module_type_store = module_type_store.open_function_context('foo_bar', 1270, 12, False)
                # Assigning a type to the variable 'self' (line 1271)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1271, 12), 'self', type_of_self)
                
                # Passed parameters checking function
                Foo.foo_bar.__dict__.__setitem__('stypy_localization', localization)
                Foo.foo_bar.__dict__.__setitem__('stypy_type_of_self', type_of_self)
                Foo.foo_bar.__dict__.__setitem__('stypy_type_store', module_type_store)
                Foo.foo_bar.__dict__.__setitem__('stypy_function_name', 'Foo.foo_bar')
                Foo.foo_bar.__dict__.__setitem__('stypy_param_names_list', [])
                Foo.foo_bar.__dict__.__setitem__('stypy_varargs_param_name', None)
                Foo.foo_bar.__dict__.__setitem__('stypy_kwargs_param_name', None)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_defaults', defaults)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_varargs', varargs)
                Foo.foo_bar.__dict__.__setitem__('stypy_call_kwargs', kwargs)
                Foo.foo_bar.__dict__.__setitem__('stypy_declared_arg_number', 1)
                arguments = process_argument_values(localization, type_of_self, module_type_store, 'Foo.foo_bar', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Initialize method data
                init_call_information(module_type_store, 'foo_bar', localization, [], arguments)
                
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of 'foo_bar(...)' code ##################

                pass
                
                # ################# End of 'foo_bar(...)' code ##################

                # Teardown call information
                teardown_call_information(localization, arguments)
                
                # Storing the return type of function 'foo_bar' in the type store
                # Getting the type of 'stypy_return_type' (line 1270)
                stypy_return_type_203275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 12), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_203275)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function 'foo_bar'
                return stypy_return_type_203275

        
        # Assigning a type to the variable 'Foo' (line 1267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1267, 8), 'Foo', Foo)
        
        # Assigning a Name to a Attribute (line 1271):
        # Getting the type of 'Foo' (line 1271)
        Foo_203276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 16), 'Foo')
        # Getting the type of 'm' (line 1271)
        m_203277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 8), 'm')
        # Setting the type of the member 'Foo' of a type (line 1271)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1271, 8), m_203277, 'Foo', Foo_203276)
        
        # Assigning a List to a Name (line 1273):
        
        # Obtaining an instance of the builtin type 'list' (line 1273)
        list_203278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1273, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1273)
        # Adding element type (line 1273)
        
        # Obtaining an instance of the builtin type 'list' (line 1273)
        list_203279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1273, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1273)
        # Adding element type (line 1273)
        
        # Call to Foo(...): (line 1273)
        # Processing the call arguments (line 1273)
        str_203281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1273, 22), 'str', 'test_1')
        # Processing the call keyword arguments (line 1273)
        kwargs_203282 = {}
        # Getting the type of 'Foo' (line 1273)
        Foo_203280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 18), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1273)
        Foo_call_result_203283 = invoke(stypy.reporting.localization.Localization(__file__, 1273, 18), Foo_203280, *[str_203281], **kwargs_203282)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1273, 17), list_203279, Foo_call_result_203283)
        # Adding element type (line 1273)
        
        # Call to Foo(...): (line 1273)
        # Processing the call arguments (line 1273)
        str_203285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1273, 37), 'str', 'test_2')
        # Processing the call keyword arguments (line 1273)
        kwargs_203286 = {}
        # Getting the type of 'Foo' (line 1273)
        Foo_203284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 33), 'Foo', False)
        # Calling Foo(args, kwargs) (line 1273)
        Foo_call_result_203287 = invoke(stypy.reporting.localization.Localization(__file__, 1273, 33), Foo_203284, *[str_203285], **kwargs_203286)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1273, 17), list_203279, Foo_call_result_203287)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1273, 16), list_203278, list_203279)
        
        # Assigning a type to the variable 'tests' (line 1273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1273, 8), 'tests', list_203278)
        
        # Assigning a Call to a Name (line 1275):
        
        # Call to TestLoader(...): (line 1275)
        # Processing the call keyword arguments (line 1275)
        kwargs_203290 = {}
        # Getting the type of 'unittest' (line 1275)
        unittest_203288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 1275)
        TestLoader_203289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1275, 17), unittest_203288, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 1275)
        TestLoader_call_result_203291 = invoke(stypy.reporting.localization.Localization(__file__, 1275, 17), TestLoader_203289, *[], **kwargs_203290)
        
        # Assigning a type to the variable 'loader' (line 1275)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1275, 8), 'loader', TestLoader_call_result_203291)
        
        # Assigning a Name to a Attribute (line 1276):
        # Getting the type of 'list' (line 1276)
        list_203292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 28), 'list')
        # Getting the type of 'loader' (line 1276)
        loader_203293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 8), 'loader')
        # Setting the type of the member 'suiteClass' of a type (line 1276)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1276, 8), loader_203293, 'suiteClass', list_203292)
        
        # Call to assertEqual(...): (line 1277)
        # Processing the call arguments (line 1277)
        
        # Call to loadTestsFromNames(...): (line 1277)
        # Processing the call arguments (line 1277)
        
        # Obtaining an instance of the builtin type 'list' (line 1277)
        list_203298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1277, 51), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1277)
        # Adding element type (line 1277)
        str_203299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1277, 52), 'str', 'Foo')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1277, 51), list_203298, str_203299)
        
        # Getting the type of 'm' (line 1277)
        m_203300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 60), 'm', False)
        # Processing the call keyword arguments (line 1277)
        kwargs_203301 = {}
        # Getting the type of 'loader' (line 1277)
        loader_203296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 25), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 1277)
        loadTestsFromNames_203297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1277, 25), loader_203296, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 1277)
        loadTestsFromNames_call_result_203302 = invoke(stypy.reporting.localization.Localization(__file__, 1277, 25), loadTestsFromNames_203297, *[list_203298, m_203300], **kwargs_203301)
        
        # Getting the type of 'tests' (line 1277)
        tests_203303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 64), 'tests', False)
        # Processing the call keyword arguments (line 1277)
        kwargs_203304 = {}
        # Getting the type of 'self' (line 1277)
        self_203294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 1277)
        assertEqual_203295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1277, 8), self_203294, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 1277)
        assertEqual_call_result_203305 = invoke(stypy.reporting.localization.Localization(__file__, 1277, 8), assertEqual_203295, *[loadTestsFromNames_call_result_203302, tests_203303], **kwargs_203304)
        
        
        # ################# End of 'test_suiteClass__loadTestsFromNames(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_suiteClass__loadTestsFromNames' in the type store
        # Getting the type of 'stypy_return_type' (line 1265)
        stypy_return_type_203306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_203306)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_suiteClass__loadTestsFromNames'
        return stypy_return_type_203306


    @norecursion
    def test_suiteClass__default_value(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_suiteClass__default_value'
        module_type_store = module_type_store.open_function_context('test_suiteClass__default_value', 1280, 4, False)
        # Assigning a type to the variable 'self' (line 1281)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1281, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_suiteClass__default_value.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_suiteClass__default_value.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_suiteClass__default_value.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_suiteClass__default_value.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_suiteClass__default_value')
        Test_TestLoader.test_suiteClass__default_value.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_suiteClass__default_value.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_suiteClass__default_value.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_suiteClass__default_value.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_suiteClass__default_value.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_suiteClass__default_value.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_suiteClass__default_value.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_suiteClass__default_value', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_suiteClass__default_value', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_suiteClass__default_value(...)' code ##################

        
        # Assigning a Call to a Name (line 1281):
        
        # Call to TestLoader(...): (line 1281)
        # Processing the call keyword arguments (line 1281)
        kwargs_203309 = {}
        # Getting the type of 'unittest' (line 1281)
        unittest_203307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 1281)
        TestLoader_203308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1281, 17), unittest_203307, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 1281)
        TestLoader_call_result_203310 = invoke(stypy.reporting.localization.Localization(__file__, 1281, 17), TestLoader_203308, *[], **kwargs_203309)
        
        # Assigning a type to the variable 'loader' (line 1281)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1281, 8), 'loader', TestLoader_call_result_203310)
        
        # Call to assertIs(...): (line 1282)
        # Processing the call arguments (line 1282)
        # Getting the type of 'loader' (line 1282)
        loader_203313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 22), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 1282)
        suiteClass_203314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1282, 22), loader_203313, 'suiteClass')
        # Getting the type of 'unittest' (line 1282)
        unittest_203315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 41), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 1282)
        TestSuite_203316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1282, 41), unittest_203315, 'TestSuite')
        # Processing the call keyword arguments (line 1282)
        kwargs_203317 = {}
        # Getting the type of 'self' (line 1282)
        self_203311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 8), 'self', False)
        # Obtaining the member 'assertIs' of a type (line 1282)
        assertIs_203312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1282, 8), self_203311, 'assertIs')
        # Calling assertIs(args, kwargs) (line 1282)
        assertIs_call_result_203318 = invoke(stypy.reporting.localization.Localization(__file__, 1282, 8), assertIs_203312, *[suiteClass_203314, TestSuite_203316], **kwargs_203317)
        
        
        # ################# End of 'test_suiteClass__default_value(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_suiteClass__default_value' in the type store
        # Getting the type of 'stypy_return_type' (line 1280)
        stypy_return_type_203319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_203319)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_suiteClass__default_value'
        return stypy_return_type_203319


    @norecursion
    def test_loadTestsFromName__function_with_different_name_than_method(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'test_loadTestsFromName__function_with_different_name_than_method'
        module_type_store = module_type_store.open_function_context('test_loadTestsFromName__function_with_different_name_than_method', 1286, 4, False)
        # Assigning a type to the variable 'self' (line 1287)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1287, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Test_TestLoader.test_loadTestsFromName__function_with_different_name_than_method.__dict__.__setitem__('stypy_localization', localization)
        Test_TestLoader.test_loadTestsFromName__function_with_different_name_than_method.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Test_TestLoader.test_loadTestsFromName__function_with_different_name_than_method.__dict__.__setitem__('stypy_type_store', module_type_store)
        Test_TestLoader.test_loadTestsFromName__function_with_different_name_than_method.__dict__.__setitem__('stypy_function_name', 'Test_TestLoader.test_loadTestsFromName__function_with_different_name_than_method')
        Test_TestLoader.test_loadTestsFromName__function_with_different_name_than_method.__dict__.__setitem__('stypy_param_names_list', [])
        Test_TestLoader.test_loadTestsFromName__function_with_different_name_than_method.__dict__.__setitem__('stypy_varargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__function_with_different_name_than_method.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Test_TestLoader.test_loadTestsFromName__function_with_different_name_than_method.__dict__.__setitem__('stypy_call_defaults', defaults)
        Test_TestLoader.test_loadTestsFromName__function_with_different_name_than_method.__dict__.__setitem__('stypy_call_varargs', varargs)
        Test_TestLoader.test_loadTestsFromName__function_with_different_name_than_method.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Test_TestLoader.test_loadTestsFromName__function_with_different_name_than_method.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.test_loadTestsFromName__function_with_different_name_than_method', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'test_loadTestsFromName__function_with_different_name_than_method', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'test_loadTestsFromName__function_with_different_name_than_method(...)' code ##################

        
        # Assigning a Call to a Name (line 1288):
        
        # Call to ModuleType(...): (line 1288)
        # Processing the call arguments (line 1288)
        str_203322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1288, 29), 'str', 'm')
        # Processing the call keyword arguments (line 1288)
        kwargs_203323 = {}
        # Getting the type of 'types' (line 1288)
        types_203320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 12), 'types', False)
        # Obtaining the member 'ModuleType' of a type (line 1288)
        ModuleType_203321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1288, 12), types_203320, 'ModuleType')
        # Calling ModuleType(args, kwargs) (line 1288)
        ModuleType_call_result_203324 = invoke(stypy.reporting.localization.Localization(__file__, 1288, 12), ModuleType_203321, *[str_203322], **kwargs_203323)
        
        # Assigning a type to the variable 'm' (line 1288)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1288, 8), 'm', ModuleType_call_result_203324)
        # Declaration of the 'MyTestCase' class
        # Getting the type of 'unittest' (line 1289)
        unittest_203325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 25), 'unittest')
        # Obtaining the member 'TestCase' of a type (line 1289)
        TestCase_203326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1289, 25), unittest_203325, 'TestCase')

        class MyTestCase(TestCase_203326, ):
            
            # Assigning a Lambda to a Name (line 1290):

            @norecursion
            def _stypy_temp_lambda_88(localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function '_stypy_temp_lambda_88'
                module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_88', 1290, 19, True)
                # Passed parameters checking function
                _stypy_temp_lambda_88.stypy_localization = localization
                _stypy_temp_lambda_88.stypy_type_of_self = None
                _stypy_temp_lambda_88.stypy_type_store = module_type_store
                _stypy_temp_lambda_88.stypy_function_name = '_stypy_temp_lambda_88'
                _stypy_temp_lambda_88.stypy_param_names_list = []
                _stypy_temp_lambda_88.stypy_varargs_param_name = None
                _stypy_temp_lambda_88.stypy_kwargs_param_name = None
                _stypy_temp_lambda_88.stypy_call_defaults = defaults
                _stypy_temp_lambda_88.stypy_call_varargs = varargs
                _stypy_temp_lambda_88.stypy_call_kwargs = kwargs
                arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_88', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Stacktrace push for error reporting
                localization.set_stack_trace('_stypy_temp_lambda_88', [], arguments)
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of the lambda function code ##################

                int_203327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1290, 27), 'int')
                # Assigning the return type of the lambda function
                # Assigning a type to the variable 'stypy_return_type' (line 1290)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1290, 19), 'stypy_return_type', int_203327)
                
                # ################# End of the lambda function code ##################

                # Stacktrace pop (error reporting)
                localization.unset_stack_trace()
                
                # Storing the return type of function '_stypy_temp_lambda_88' in the type store
                # Getting the type of 'stypy_return_type' (line 1290)
                stypy_return_type_203328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 19), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_203328)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function '_stypy_temp_lambda_88'
                return stypy_return_type_203328

            # Assigning a type to the variable '_stypy_temp_lambda_88' (line 1290)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1290, 19), '_stypy_temp_lambda_88', _stypy_temp_lambda_88)
            # Getting the type of '_stypy_temp_lambda_88' (line 1290)
            _stypy_temp_lambda_88_203329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 19), '_stypy_temp_lambda_88')
            # Assigning a type to the variable 'test' (line 1290)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1290, 12), 'test', _stypy_temp_lambda_88_203329)
        
        # Assigning a type to the variable 'MyTestCase' (line 1289)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1289, 8), 'MyTestCase', MyTestCase)
        
        # Assigning a Name to a Attribute (line 1291):
        # Getting the type of 'MyTestCase' (line 1291)
        MyTestCase_203330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 23), 'MyTestCase')
        # Getting the type of 'm' (line 1291)
        m_203331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 8), 'm')
        # Setting the type of the member 'testcase_1' of a type (line 1291)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1291, 8), m_203331, 'testcase_1', MyTestCase_203330)
        
        # Assigning a Call to a Name (line 1293):
        
        # Call to TestLoader(...): (line 1293)
        # Processing the call keyword arguments (line 1293)
        kwargs_203334 = {}
        # Getting the type of 'unittest' (line 1293)
        unittest_203332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 17), 'unittest', False)
        # Obtaining the member 'TestLoader' of a type (line 1293)
        TestLoader_203333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1293, 17), unittest_203332, 'TestLoader')
        # Calling TestLoader(args, kwargs) (line 1293)
        TestLoader_call_result_203335 = invoke(stypy.reporting.localization.Localization(__file__, 1293, 17), TestLoader_203333, *[], **kwargs_203334)
        
        # Assigning a type to the variable 'loader' (line 1293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1293, 8), 'loader', TestLoader_call_result_203335)
        
        # Assigning a Call to a Name (line 1294):
        
        # Call to loadTestsFromNames(...): (line 1294)
        # Processing the call arguments (line 1294)
        
        # Obtaining an instance of the builtin type 'list' (line 1294)
        list_203338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1294, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1294)
        # Adding element type (line 1294)
        str_203339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1294, 43), 'str', 'testcase_1.test')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1294, 42), list_203338, str_203339)
        
        # Getting the type of 'm' (line 1294)
        m_203340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 63), 'm', False)
        # Processing the call keyword arguments (line 1294)
        kwargs_203341 = {}
        # Getting the type of 'loader' (line 1294)
        loader_203336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 16), 'loader', False)
        # Obtaining the member 'loadTestsFromNames' of a type (line 1294)
        loadTestsFromNames_203337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 16), loader_203336, 'loadTestsFromNames')
        # Calling loadTestsFromNames(args, kwargs) (line 1294)
        loadTestsFromNames_call_result_203342 = invoke(stypy.reporting.localization.Localization(__file__, 1294, 16), loadTestsFromNames_203337, *[list_203338, m_203340], **kwargs_203341)
        
        # Assigning a type to the variable 'suite' (line 1294)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1294, 8), 'suite', loadTestsFromNames_call_result_203342)
        
        # Call to assertIsInstance(...): (line 1295)
        # Processing the call arguments (line 1295)
        # Getting the type of 'suite' (line 1295)
        suite_203345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 30), 'suite', False)
        # Getting the type of 'loader' (line 1295)
        loader_203346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 37), 'loader', False)
        # Obtaining the member 'suiteClass' of a type (line 1295)
        suiteClass_203347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1295, 37), loader_203346, 'suiteClass')
        # Processing the call keyword arguments (line 1295)
        kwargs_203348 = {}
        # Getting the type of 'self' (line 1295)
        self_203343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 8), 'self', False)
        # Obtaining the member 'assertIsInstance' of a type (line 1295)
        assertIsInstance_203344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1295, 8), self_203343, 'assertIsInstance')
        # Calling assertIsInstance(args, kwargs) (line 1295)
        assertIsInstance_call_result_203349 = invoke(stypy.reporting.localization.Localization(__file__, 1295, 8), assertIsInstance_203344, *[suite_203345, suiteClass_203347], **kwargs_203348)
        
        
        # Assigning a Call to a Name (line 1297):
        
        # Call to TestSuite(...): (line 1297)
        # Processing the call arguments (line 1297)
        
        # Obtaining an instance of the builtin type 'list' (line 1297)
        list_203352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, 39), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1297)
        # Adding element type (line 1297)
        
        # Call to MyTestCase(...): (line 1297)
        # Processing the call arguments (line 1297)
        str_203354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, 51), 'str', 'test')
        # Processing the call keyword arguments (line 1297)
        kwargs_203355 = {}
        # Getting the type of 'MyTestCase' (line 1297)
        MyTestCase_203353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 40), 'MyTestCase', False)
        # Calling MyTestCase(args, kwargs) (line 1297)
        MyTestCase_call_result_203356 = invoke(stypy.reporting.localization.Localization(__file__, 1297, 40), MyTestCase_203353, *[str_203354], **kwargs_203355)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1297, 39), list_203352, MyTestCase_call_result_203356)
        
        # Processing the call keyword arguments (line 1297)
        kwargs_203357 = {}
        # Getting the type of 'unittest' (line 1297)
        unittest_203350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 20), 'unittest', False)
        # Obtaining the member 'TestSuite' of a type (line 1297)
        TestSuite_203351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1297, 20), unittest_203350, 'TestSuite')
        # Calling TestSuite(args, kwargs) (line 1297)
        TestSuite_call_result_203358 = invoke(stypy.reporting.localization.Localization(__file__, 1297, 20), TestSuite_203351, *[list_203352], **kwargs_203357)
        
        # Assigning a type to the variable 'ref_suite' (line 1297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 8), 'ref_suite', TestSuite_call_result_203358)
        
        # Call to assertEqual(...): (line 1298)
        # Processing the call arguments (line 1298)
        
        # Call to list(...): (line 1298)
        # Processing the call arguments (line 1298)
        # Getting the type of 'suite' (line 1298)
        suite_203362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 30), 'suite', False)
        # Processing the call keyword arguments (line 1298)
        kwargs_203363 = {}
        # Getting the type of 'list' (line 1298)
        list_203361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 25), 'list', False)
        # Calling list(args, kwargs) (line 1298)
        list_call_result_203364 = invoke(stypy.reporting.localization.Localization(__file__, 1298, 25), list_203361, *[suite_203362], **kwargs_203363)
        
        
        # Obtaining an instance of the builtin type 'list' (line 1298)
        list_203365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1298, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1298)
        # Adding element type (line 1298)
        # Getting the type of 'ref_suite' (line 1298)
        ref_suite_203366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 39), 'ref_suite', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1298, 38), list_203365, ref_suite_203366)
        
        # Processing the call keyword arguments (line 1298)
        kwargs_203367 = {}
        # Getting the type of 'self' (line 1298)
        self_203359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 8), 'self', False)
        # Obtaining the member 'assertEqual' of a type (line 1298)
        assertEqual_203360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 8), self_203359, 'assertEqual')
        # Calling assertEqual(args, kwargs) (line 1298)
        assertEqual_call_result_203368 = invoke(stypy.reporting.localization.Localization(__file__, 1298, 8), assertEqual_203360, *[list_call_result_203364, list_203365], **kwargs_203367)
        
        
        # ################# End of 'test_loadTestsFromName__function_with_different_name_than_method(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'test_loadTestsFromName__function_with_different_name_than_method' in the type store
        # Getting the type of 'stypy_return_type' (line 1286)
        stypy_return_type_203369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_203369)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'test_loadTestsFromName__function_with_different_name_than_method'
        return stypy_return_type_203369


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 8, 0, False)
        # Assigning a type to the variable 'self' (line 9)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 9, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Test_TestLoader.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'Test_TestLoader' (line 8)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 8, 0), 'Test_TestLoader', Test_TestLoader)

if (__name__ == '__main__'):
    
    # Call to main(...): (line 1301)
    # Processing the call keyword arguments (line 1301)
    kwargs_203372 = {}
    # Getting the type of 'unittest' (line 1301)
    unittest_203370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 4), 'unittest', False)
    # Obtaining the member 'main' of a type (line 1301)
    main_203371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1301, 4), unittest_203370, 'main')
    # Calling main(args, kwargs) (line 1301)
    main_call_result_203373 = invoke(stypy.reporting.localization.Localization(__file__, 1301, 4), main_203371, *[], **kwargs_203372)
    


# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
