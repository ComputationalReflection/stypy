
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: Functions
3: ---------
4: .. autosummary::
5:    :toctree: generated/
6: 
7:     fmin_l_bfgs_b
8: 
9: '''
10: 
11: ## License for the Python wrapper
12: ## ==============================
13: 
14: ## Copyright (c) 2004 David M. Cooke <cookedm@physics.mcmaster.ca>
15: 
16: ## Permission is hereby granted, free of charge, to any person obtaining a
17: ## copy of this software and associated documentation files (the "Software"),
18: ## to deal in the Software without restriction, including without limitation
19: ## the rights to use, copy, modify, merge, publish, distribute, sublicense,
20: ## and/or sell copies of the Software, and to permit persons to whom the
21: ## Software is furnished to do so, subject to the following conditions:
22: 
23: ## The above copyright notice and this permission notice shall be included in
24: ## all copies or substantial portions of the Software.
25: 
26: ## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
27: ## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
28: ## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
29: ## AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
30: ## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
31: ## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
32: ## DEALINGS IN THE SOFTWARE.
33: 
34: ## Modifications by Travis Oliphant and Enthought, Inc. for inclusion in SciPy
35: 
36: from __future__ import division, print_function, absolute_import
37: 
38: import numpy as np
39: from numpy import array, asarray, float64, int32, zeros
40: from . import _lbfgsb
41: from .optimize import (approx_fprime, MemoizeJac, OptimizeResult,
42:                        _check_unknown_options, wrap_function,
43:                        _approx_fprime_helper)
44: from scipy.sparse.linalg import LinearOperator
45: 
46: __all__ = ['fmin_l_bfgs_b', 'LbfgsInvHessProduct']
47: 
48: 
49: def fmin_l_bfgs_b(func, x0, fprime=None, args=(),
50:                   approx_grad=0,
51:                   bounds=None, m=10, factr=1e7, pgtol=1e-5,
52:                   epsilon=1e-8,
53:                   iprint=-1, maxfun=15000, maxiter=15000, disp=None,
54:                   callback=None, maxls=20):
55:     '''
56:     Minimize a function func using the L-BFGS-B algorithm.
57: 
58:     Parameters
59:     ----------
60:     func : callable f(x,*args)
61:         Function to minimise.
62:     x0 : ndarray
63:         Initial guess.
64:     fprime : callable fprime(x,*args), optional
65:         The gradient of `func`.  If None, then `func` returns the function
66:         value and the gradient (``f, g = func(x, *args)``), unless
67:         `approx_grad` is True in which case `func` returns only ``f``.
68:     args : sequence, optional
69:         Arguments to pass to `func` and `fprime`.
70:     approx_grad : bool, optional
71:         Whether to approximate the gradient numerically (in which case
72:         `func` returns only the function value).
73:     bounds : list, optional
74:         ``(min, max)`` pairs for each element in ``x``, defining
75:         the bounds on that parameter. Use None or +-inf for one of ``min`` or
76:         ``max`` when there is no bound in that direction.
77:     m : int, optional
78:         The maximum number of variable metric corrections
79:         used to define the limited memory matrix. (The limited memory BFGS
80:         method does not store the full hessian but uses this many terms in an
81:         approximation to it.)
82:     factr : float, optional
83:         The iteration stops when
84:         ``(f^k - f^{k+1})/max{|f^k|,|f^{k+1}|,1} <= factr * eps``,
85:         where ``eps`` is the machine precision, which is automatically
86:         generated by the code. Typical values for `factr` are: 1e12 for
87:         low accuracy; 1e7 for moderate accuracy; 10.0 for extremely
88:         high accuracy. See Notes for relationship to `ftol`, which is exposed
89:         (instead of `factr`) by the `scipy.optimize.minimize` interface to
90:         L-BFGS-B.
91:     pgtol : float, optional
92:         The iteration will stop when
93:         ``max{|proj g_i | i = 1, ..., n} <= pgtol``
94:         where ``pg_i`` is the i-th component of the projected gradient.
95:     epsilon : float, optional
96:         Step size used when `approx_grad` is True, for numerically
97:         calculating the gradient
98:     iprint : int, optional
99:         Controls the frequency of output. ``iprint < 0`` means no output;
100:         ``iprint = 0``    print only one line at the last iteration;
101:         ``0 < iprint < 99`` print also f and ``|proj g|`` every iprint iterations;
102:         ``iprint = 99``   print details of every iteration except n-vectors;
103:         ``iprint = 100``  print also the changes of active set and final x;
104:         ``iprint > 100``  print details of every iteration including x and g.
105:     disp : int, optional
106:         If zero, then no output.  If a positive number, then this over-rides
107:         `iprint` (i.e., `iprint` gets the value of `disp`).
108:     maxfun : int, optional
109:         Maximum number of function evaluations.
110:     maxiter : int, optional
111:         Maximum number of iterations.
112:     callback : callable, optional
113:         Called after each iteration, as ``callback(xk)``, where ``xk`` is the
114:         current parameter vector.
115:     maxls : int, optional
116:         Maximum number of line search steps (per iteration). Default is 20.
117: 
118:     Returns
119:     -------
120:     x : array_like
121:         Estimated position of the minimum.
122:     f : float
123:         Value of `func` at the minimum.
124:     d : dict
125:         Information dictionary.
126: 
127:         * d['warnflag'] is
128: 
129:           - 0 if converged,
130:           - 1 if too many function evaluations or too many iterations,
131:           - 2 if stopped for another reason, given in d['task']
132: 
133:         * d['grad'] is the gradient at the minimum (should be 0 ish)
134:         * d['funcalls'] is the number of function calls made.
135:         * d['nit'] is the number of iterations.
136: 
137:     See also
138:     --------
139:     minimize: Interface to minimization algorithms for multivariate
140:         functions. See the 'L-BFGS-B' `method` in particular. Note that the
141:         `ftol` option is made available via that interface, while `factr` is
142:         provided via this interface, where `factr` is the factor multiplying
143:         the default machine floating-point precision to arrive at `ftol`:
144:         ``ftol = factr * numpy.finfo(float).eps``.
145: 
146:     Notes
147:     -----
148:     License of L-BFGS-B (FORTRAN code):
149: 
150:     The version included here (in fortran code) is 3.0
151:     (released April 25, 2011).  It was written by Ciyou Zhu, Richard Byrd,
152:     and Jorge Nocedal <nocedal@ece.nwu.edu>. It carries the following
153:     condition for use:
154: 
155:     This software is freely available, but we expect that all publications
156:     describing work using this software, or all commercial products using it,
157:     quote at least one of the references given below. This software is released
158:     under the BSD License.
159: 
160:     References
161:     ----------
162:     * R. H. Byrd, P. Lu and J. Nocedal. A Limited Memory Algorithm for Bound
163:       Constrained Optimization, (1995), SIAM Journal on Scientific and
164:       Statistical Computing, 16, 5, pp. 1190-1208.
165:     * C. Zhu, R. H. Byrd and J. Nocedal. L-BFGS-B: Algorithm 778: L-BFGS-B,
166:       FORTRAN routines for large scale bound constrained optimization (1997),
167:       ACM Transactions on Mathematical Software, 23, 4, pp. 550 - 560.
168:     * J.L. Morales and J. Nocedal. L-BFGS-B: Remark on Algorithm 778: L-BFGS-B,
169:       FORTRAN routines for large scale bound constrained optimization (2011),
170:       ACM Transactions on Mathematical Software, 38, 1.
171: 
172:     '''
173:     # handle fprime/approx_grad
174:     if approx_grad:
175:         fun = func
176:         jac = None
177:     elif fprime is None:
178:         fun = MemoizeJac(func)
179:         jac = fun.derivative
180:     else:
181:         fun = func
182:         jac = fprime
183: 
184:     # build options
185:     if disp is None:
186:         disp = iprint
187:     opts = {'disp': disp,
188:             'iprint': iprint,
189:             'maxcor': m,
190:             'ftol': factr * np.finfo(float).eps,
191:             'gtol': pgtol,
192:             'eps': epsilon,
193:             'maxfun': maxfun,
194:             'maxiter': maxiter,
195:             'callback': callback,
196:             'maxls': maxls}
197: 
198:     res = _minimize_lbfgsb(fun, x0, args=args, jac=jac, bounds=bounds,
199:                            **opts)
200:     d = {'grad': res['jac'],
201:          'task': res['message'],
202:          'funcalls': res['nfev'],
203:          'nit': res['nit'],
204:          'warnflag': res['status']}
205:     f = res['fun']
206:     x = res['x']
207: 
208:     return x, f, d
209: 
210: 
211: def _minimize_lbfgsb(fun, x0, args=(), jac=None, bounds=None,
212:                      disp=None, maxcor=10, ftol=2.2204460492503131e-09,
213:                      gtol=1e-5, eps=1e-8, maxfun=15000, maxiter=15000,
214:                      iprint=-1, callback=None, maxls=20, **unknown_options):
215:     '''
216:     Minimize a scalar function of one or more variables using the L-BFGS-B
217:     algorithm.
218: 
219:     Options
220:     -------
221:     disp : bool
222:        Set to True to print convergence messages.
223:     maxcor : int
224:         The maximum number of variable metric corrections used to
225:         define the limited memory matrix. (The limited memory BFGS
226:         method does not store the full hessian but uses this many terms
227:         in an approximation to it.)
228:     ftol : float
229:         The iteration stops when ``(f^k -
230:         f^{k+1})/max{|f^k|,|f^{k+1}|,1} <= ftol``.
231:     gtol : float
232:         The iteration will stop when ``max{|proj g_i | i = 1, ..., n}
233:         <= gtol`` where ``pg_i`` is the i-th component of the
234:         projected gradient.
235:     eps : float
236:         Step size used for numerical approximation of the jacobian.
237:     disp : int
238:         Set to True to print convergence messages.
239:     maxfun : int
240:         Maximum number of function evaluations.
241:     maxiter : int
242:         Maximum number of iterations.
243:     maxls : int, optional
244:         Maximum number of line search steps (per iteration). Default is 20.
245: 
246:     Notes
247:     -----
248:     The option `ftol` is exposed via the `scipy.optimize.minimize` interface,
249:     but calling `scipy.optimize.fmin_l_bfgs_b` directly exposes `factr`. The
250:     relationship between the two is ``ftol = factr * numpy.finfo(float).eps``.
251:     I.e., `factr` multiplies the default machine floating-point precision to
252:     arrive at `ftol`.
253: 
254:     '''
255:     _check_unknown_options(unknown_options)
256:     m = maxcor
257:     epsilon = eps
258:     pgtol = gtol
259:     factr = ftol / np.finfo(float).eps
260: 
261:     x0 = asarray(x0).ravel()
262:     n, = x0.shape
263: 
264:     if bounds is None:
265:         bounds = [(None, None)] * n
266:     if len(bounds) != n:
267:         raise ValueError('length of x0 != length of bounds')
268:     # unbounded variables must use None, not +-inf, for optimizer to work properly
269:     bounds = [(None if l == -np.inf else l, None if u == np.inf else u) for l, u in bounds]
270: 
271:     if disp is not None:
272:         if disp == 0:
273:             iprint = -1
274:         else:
275:             iprint = disp
276: 
277:     n_function_evals, fun = wrap_function(fun, ())
278:     if jac is None:
279:         def func_and_grad(x):
280:             f = fun(x, *args)
281:             g = _approx_fprime_helper(x, fun, epsilon, args=args, f0=f)
282:             return f, g
283:     else:
284:         def func_and_grad(x):
285:             f = fun(x, *args)
286:             g = jac(x, *args)
287:             return f, g
288: 
289:     nbd = zeros(n, int32)
290:     low_bnd = zeros(n, float64)
291:     upper_bnd = zeros(n, float64)
292:     bounds_map = {(None, None): 0,
293:                   (1, None): 1,
294:                   (1, 1): 2,
295:                   (None, 1): 3}
296:     for i in range(0, n):
297:         l, u = bounds[i]
298:         if l is not None:
299:             low_bnd[i] = l
300:             l = 1
301:         if u is not None:
302:             upper_bnd[i] = u
303:             u = 1
304:         nbd[i] = bounds_map[l, u]
305: 
306:     if not maxls > 0:
307:         raise ValueError('maxls must be positive.')
308: 
309:     x = array(x0, float64)
310:     f = array(0.0, float64)
311:     g = zeros((n,), float64)
312:     wa = zeros(2*m*n + 5*n + 11*m*m + 8*m, float64)
313:     iwa = zeros(3*n, int32)
314:     task = zeros(1, 'S60')
315:     csave = zeros(1, 'S60')
316:     lsave = zeros(4, int32)
317:     isave = zeros(44, int32)
318:     dsave = zeros(29, float64)
319: 
320:     task[:] = 'START'
321: 
322:     n_iterations = 0
323: 
324:     while 1:
325:         # x, f, g, wa, iwa, task, csave, lsave, isave, dsave = \
326:         _lbfgsb.setulb(m, x, low_bnd, upper_bnd, nbd, f, g, factr,
327:                        pgtol, wa, iwa, task, iprint, csave, lsave,
328:                        isave, dsave, maxls)
329:         task_str = task.tostring()
330:         if task_str.startswith(b'FG'):
331:             # The minimization routine wants f and g at the current x.
332:             # Note that interruptions due to maxfun are postponed
333:             # until the completion of the current minimization iteration.
334:             # Overwrite f and g:
335:             f, g = func_and_grad(x)
336:         elif task_str.startswith(b'NEW_X'):
337:             # new iteration
338:             if n_iterations > maxiter:
339:                 task[:] = 'STOP: TOTAL NO. of ITERATIONS EXCEEDS LIMIT'
340:             elif n_function_evals[0] > maxfun:
341:                 task[:] = ('STOP: TOTAL NO. of f AND g EVALUATIONS '
342:                            'EXCEEDS LIMIT')
343:             else:
344:                 n_iterations += 1
345:                 if callback is not None:
346:                     callback(x)
347:         else:
348:             break
349: 
350:     task_str = task.tostring().strip(b'\x00').strip()
351:     if task_str.startswith(b'CONV'):
352:         warnflag = 0
353:     elif n_function_evals[0] > maxfun:
354:         warnflag = 1
355:     elif n_iterations > maxiter:
356:         warnflag = 1
357:     else:
358:         warnflag = 2
359: 
360:     # These two portions of the workspace are described in the mainlb
361:     # subroutine in lbfgsb.f. See line 363.
362:     s = wa[0: m*n].reshape(m, n)
363:     y = wa[m*n: 2*m*n].reshape(m, n)
364: 
365:     # See lbfgsb.f line 160 for this portion of the workspace.
366:     # isave(31) = the total number of BFGS updates prior the current iteration;
367:     n_bfgs_updates = isave[30]
368: 
369:     n_corrs = min(n_bfgs_updates, maxcor)
370:     hess_inv = LbfgsInvHessProduct(s[:n_corrs], y[:n_corrs])
371: 
372:     return OptimizeResult(fun=f, jac=g, nfev=n_function_evals[0],
373:                           nit=n_iterations, status=warnflag, message=task_str,
374:                           x=x, success=(warnflag == 0), hess_inv=hess_inv)
375: 
376: 
377: class LbfgsInvHessProduct(LinearOperator):
378:     '''Linear operator for the L-BFGS approximate inverse Hessian.
379: 
380:     This operator computes the product of a vector with the approximate inverse
381:     of the Hessian of the objective function, using the L-BFGS limited
382:     memory approximation to the inverse Hessian, accumulated during the
383:     optimization.
384: 
385:     Objects of this class implement the ``scipy.sparse.linalg.LinearOperator``
386:     interface.
387: 
388:     Parameters
389:     ----------
390:     sk : array_like, shape=(n_corr, n)
391:         Array of `n_corr` most recent updates to the solution vector.
392:         (See [1]).
393:     yk : array_like, shape=(n_corr, n)
394:         Array of `n_corr` most recent updates to the gradient. (See [1]).
395: 
396:     References
397:     ----------
398:     .. [1] Nocedal, Jorge. "Updating quasi-Newton matrices with limited
399:        storage." Mathematics of computation 35.151 (1980): 773-782.
400: 
401:     '''
402:     def __init__(self, sk, yk):
403:         '''Construct the operator.'''
404:         if sk.shape != yk.shape or sk.ndim != 2:
405:             raise ValueError('sk and yk must have matching shape, (n_corrs, n)')
406:         n_corrs, n = sk.shape
407: 
408:         super(LbfgsInvHessProduct, self).__init__(
409:             dtype=np.float64, shape=(n, n))
410: 
411:         self.sk = sk
412:         self.yk = yk
413:         self.n_corrs = n_corrs
414:         self.rho = 1 / np.einsum('ij,ij->i', sk, yk)
415: 
416:     def _matvec(self, x):
417:         '''Efficient matrix-vector multiply with the BFGS matrices.
418: 
419:         This calculation is described in Section (4) of [1].
420: 
421:         Parameters
422:         ----------
423:         x : ndarray
424:             An array with shape (n,) or (n,1).
425: 
426:         Returns
427:         -------
428:         y : ndarray
429:             The matrix-vector product
430: 
431:         '''
432:         s, y, n_corrs, rho = self.sk, self.yk, self.n_corrs, self.rho
433:         q = np.array(x, dtype=self.dtype, copy=True)
434:         if q.ndim == 2 and q.shape[1] == 1:
435:             q = q.reshape(-1)
436: 
437:         alpha = np.zeros(n_corrs)
438: 
439:         for i in range(n_corrs-1, -1, -1):
440:             alpha[i] = rho[i] * np.dot(s[i], q)
441:             q = q - alpha[i]*y[i]
442: 
443:         r = q
444:         for i in range(n_corrs):
445:             beta = rho[i] * np.dot(y[i], r)
446:             r = r + s[i] * (alpha[i] - beta)
447: 
448:         return r
449: 
450:     def todense(self):
451:         '''Return a dense array representation of this operator.
452: 
453:         Returns
454:         -------
455:         arr : ndarray, shape=(n, n)
456:             An array with the same shape and containing
457:             the same data represented by this `LinearOperator`.
458: 
459:         '''
460:         s, y, n_corrs, rho = self.sk, self.yk, self.n_corrs, self.rho
461:         I = np.eye(*self.shape, dtype=self.dtype)
462:         Hk = I
463: 
464:         for i in range(n_corrs):
465:             A1 = I - s[i][:, np.newaxis] * y[i][np.newaxis, :] * rho[i]
466:             A2 = I - y[i][:, np.newaxis] * s[i][np.newaxis, :] * rho[i]
467: 
468:             Hk = np.dot(A1, np.dot(Hk, A2)) + (rho[i] * s[i][:, np.newaxis] *
469:                                                         s[i][np.newaxis, :])
470:         return Hk
471: 
472: 
473: if __name__ == '__main__':
474:     def func(x):
475:         f = 0.25 * (x[0] - 1) ** 2
476:         for i in range(1, x.shape[0]):
477:             f += (x[i] - x[i-1] ** 2) ** 2
478:         f *= 4
479:         return f
480: 
481:     def grad(x):
482:         g = zeros(x.shape, float64)
483:         t1 = x[1] - x[0] ** 2
484:         g[0] = 2 * (x[0] - 1) - 16 * x[0] * t1
485:         for i in range(1, g.shape[0] - 1):
486:             t2 = t1
487:             t1 = x[i + 1] - x[i] ** 2
488:             g[i] = 8 * t2 - 16*x[i] * t1
489:         g[-1] = 8 * t1
490:         return g
491: 
492:     def func_and_grad(x):
493:         return func(x), grad(x)
494: 
495:     class Problem(object):
496:         def fun(self, x):
497:             return func_and_grad(x)
498: 
499:     factr = 1e7
500:     pgtol = 1e-5
501: 
502:     n = 25
503:     m = 10
504: 
505:     bounds = [(None, None)] * n
506:     for i in range(0, n, 2):
507:         bounds[i] = (1.0, 100)
508:     for i in range(1, n, 2):
509:         bounds[i] = (-100, 100)
510: 
511:     x0 = zeros((n,), float64)
512:     x0[:] = 3
513: 
514:     x, f, d = fmin_l_bfgs_b(func, x0, fprime=grad, m=m,
515:                             factr=factr, pgtol=pgtol)
516:     print(x)
517:     print(f)
518:     print(d)
519:     x, f, d = fmin_l_bfgs_b(func, x0, approx_grad=1,
520:                             m=m, factr=factr, pgtol=pgtol)
521:     print(x)
522:     print(f)
523:     print(d)
524:     x, f, d = fmin_l_bfgs_b(func_and_grad, x0, approx_grad=0,
525:                             m=m, factr=factr, pgtol=pgtol)
526:     print(x)
527:     print(f)
528:     print(d)
529:     p = Problem()
530:     x, f, d = fmin_l_bfgs_b(p.fun, x0, approx_grad=0,
531:                             m=m, factr=factr, pgtol=pgtol)
532:     print(x)
533:     print(f)
534:     print(d)
535: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

str_167666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 9, (-1)), 'str', '\nFunctions\n---------\n.. autosummary::\n   :toctree: generated/\n\n    fmin_l_bfgs_b\n\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 38, 0))

# 'import numpy' statement (line 38)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_167667 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'numpy')

if (type(import_167667) is not StypyTypeError):

    if (import_167667 != 'pyd_module'):
        __import__(import_167667)
        sys_modules_167668 = sys.modules[import_167667]
        import_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'np', sys_modules_167668.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 38)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 38, 0), 'numpy', import_167667)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 39, 0))

# 'from numpy import array, asarray, float64, int32, zeros' statement (line 39)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_167669 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'numpy')

if (type(import_167669) is not StypyTypeError):

    if (import_167669 != 'pyd_module'):
        __import__(import_167669)
        sys_modules_167670 = sys.modules[import_167669]
        import_from_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'numpy', sys_modules_167670.module_type_store, module_type_store, ['array', 'asarray', 'float64', 'int32', 'zeros'])
        nest_module(stypy.reporting.localization.Localization(__file__, 39, 0), __file__, sys_modules_167670, sys_modules_167670.module_type_store, module_type_store)
    else:
        from numpy import array, asarray, float64, int32, zeros

        import_from_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'numpy', None, module_type_store, ['array', 'asarray', 'float64', 'int32', 'zeros'], [array, asarray, float64, int32, zeros])

else:
    # Assigning a type to the variable 'numpy' (line 39)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 0), 'numpy', import_167669)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 40, 0))

# 'from scipy.optimize import _lbfgsb' statement (line 40)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_167671 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'scipy.optimize')

if (type(import_167671) is not StypyTypeError):

    if (import_167671 != 'pyd_module'):
        __import__(import_167671)
        sys_modules_167672 = sys.modules[import_167671]
        import_from_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'scipy.optimize', sys_modules_167672.module_type_store, module_type_store, ['_lbfgsb'])
        nest_module(stypy.reporting.localization.Localization(__file__, 40, 0), __file__, sys_modules_167672, sys_modules_167672.module_type_store, module_type_store)
    else:
        from scipy.optimize import _lbfgsb

        import_from_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'scipy.optimize', None, module_type_store, ['_lbfgsb'], [_lbfgsb])

else:
    # Assigning a type to the variable 'scipy.optimize' (line 40)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 0), 'scipy.optimize', import_167671)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 41, 0))

# 'from scipy.optimize.optimize import approx_fprime, MemoizeJac, OptimizeResult, _check_unknown_options, wrap_function, _approx_fprime_helper' statement (line 41)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_167673 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'scipy.optimize.optimize')

if (type(import_167673) is not StypyTypeError):

    if (import_167673 != 'pyd_module'):
        __import__(import_167673)
        sys_modules_167674 = sys.modules[import_167673]
        import_from_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'scipy.optimize.optimize', sys_modules_167674.module_type_store, module_type_store, ['approx_fprime', 'MemoizeJac', 'OptimizeResult', '_check_unknown_options', 'wrap_function', '_approx_fprime_helper'])
        nest_module(stypy.reporting.localization.Localization(__file__, 41, 0), __file__, sys_modules_167674, sys_modules_167674.module_type_store, module_type_store)
    else:
        from scipy.optimize.optimize import approx_fprime, MemoizeJac, OptimizeResult, _check_unknown_options, wrap_function, _approx_fprime_helper

        import_from_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'scipy.optimize.optimize', None, module_type_store, ['approx_fprime', 'MemoizeJac', 'OptimizeResult', '_check_unknown_options', 'wrap_function', '_approx_fprime_helper'], [approx_fprime, MemoizeJac, OptimizeResult, _check_unknown_options, wrap_function, _approx_fprime_helper])

else:
    # Assigning a type to the variable 'scipy.optimize.optimize' (line 41)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 41, 0), 'scipy.optimize.optimize', import_167673)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 44, 0))

# 'from scipy.sparse.linalg import LinearOperator' statement (line 44)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_167675 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 44, 0), 'scipy.sparse.linalg')

if (type(import_167675) is not StypyTypeError):

    if (import_167675 != 'pyd_module'):
        __import__(import_167675)
        sys_modules_167676 = sys.modules[import_167675]
        import_from_module(stypy.reporting.localization.Localization(__file__, 44, 0), 'scipy.sparse.linalg', sys_modules_167676.module_type_store, module_type_store, ['LinearOperator'])
        nest_module(stypy.reporting.localization.Localization(__file__, 44, 0), __file__, sys_modules_167676, sys_modules_167676.module_type_store, module_type_store)
    else:
        from scipy.sparse.linalg import LinearOperator

        import_from_module(stypy.reporting.localization.Localization(__file__, 44, 0), 'scipy.sparse.linalg', None, module_type_store, ['LinearOperator'], [LinearOperator])

else:
    # Assigning a type to the variable 'scipy.sparse.linalg' (line 44)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 44, 0), 'scipy.sparse.linalg', import_167675)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')


# Assigning a List to a Name (line 46):

# Assigning a List to a Name (line 46):
__all__ = ['fmin_l_bfgs_b', 'LbfgsInvHessProduct']
module_type_store.set_exportable_members(['fmin_l_bfgs_b', 'LbfgsInvHessProduct'])

# Obtaining an instance of the builtin type 'list' (line 46)
list_167677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 46)
# Adding element type (line 46)
str_167678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 11), 'str', 'fmin_l_bfgs_b')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_167677, str_167678)
# Adding element type (line 46)
str_167679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 28), 'str', 'LbfgsInvHessProduct')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_167677, str_167679)

# Assigning a type to the variable '__all__' (line 46)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 46, 0), '__all__', list_167677)

@norecursion
def fmin_l_bfgs_b(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 49)
    None_167680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 49, 35), 'None')
    
    # Obtaining an instance of the builtin type 'tuple' (line 49)
    tuple_167681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 46), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 49)
    
    int_167682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 50, 30), 'int')
    # Getting the type of 'None' (line 51)
    None_167683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 25), 'None')
    int_167684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 33), 'int')
    float_167685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 43), 'float')
    float_167686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 54), 'float')
    float_167687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 26), 'float')
    int_167688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 53, 25), 'int')
    int_167689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 53, 36), 'int')
    int_167690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 53, 51), 'int')
    # Getting the type of 'None' (line 53)
    None_167691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 63), 'None')
    # Getting the type of 'None' (line 54)
    None_167692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 54, 27), 'None')
    int_167693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 54, 39), 'int')
    defaults = [None_167680, tuple_167681, int_167682, None_167683, int_167684, float_167685, float_167686, float_167687, int_167688, int_167689, int_167690, None_167691, None_167692, int_167693]
    # Create a new context for function 'fmin_l_bfgs_b'
    module_type_store = module_type_store.open_function_context('fmin_l_bfgs_b', 49, 0, False)
    
    # Passed parameters checking function
    fmin_l_bfgs_b.stypy_localization = localization
    fmin_l_bfgs_b.stypy_type_of_self = None
    fmin_l_bfgs_b.stypy_type_store = module_type_store
    fmin_l_bfgs_b.stypy_function_name = 'fmin_l_bfgs_b'
    fmin_l_bfgs_b.stypy_param_names_list = ['func', 'x0', 'fprime', 'args', 'approx_grad', 'bounds', 'm', 'factr', 'pgtol', 'epsilon', 'iprint', 'maxfun', 'maxiter', 'disp', 'callback', 'maxls']
    fmin_l_bfgs_b.stypy_varargs_param_name = None
    fmin_l_bfgs_b.stypy_kwargs_param_name = None
    fmin_l_bfgs_b.stypy_call_defaults = defaults
    fmin_l_bfgs_b.stypy_call_varargs = varargs
    fmin_l_bfgs_b.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fmin_l_bfgs_b', ['func', 'x0', 'fprime', 'args', 'approx_grad', 'bounds', 'm', 'factr', 'pgtol', 'epsilon', 'iprint', 'maxfun', 'maxiter', 'disp', 'callback', 'maxls'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fmin_l_bfgs_b', localization, ['func', 'x0', 'fprime', 'args', 'approx_grad', 'bounds', 'm', 'factr', 'pgtol', 'epsilon', 'iprint', 'maxfun', 'maxiter', 'disp', 'callback', 'maxls'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fmin_l_bfgs_b(...)' code ##################

    str_167694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 172, (-1)), 'str', "\n    Minimize a function func using the L-BFGS-B algorithm.\n\n    Parameters\n    ----------\n    func : callable f(x,*args)\n        Function to minimise.\n    x0 : ndarray\n        Initial guess.\n    fprime : callable fprime(x,*args), optional\n        The gradient of `func`.  If None, then `func` returns the function\n        value and the gradient (``f, g = func(x, *args)``), unless\n        `approx_grad` is True in which case `func` returns only ``f``.\n    args : sequence, optional\n        Arguments to pass to `func` and `fprime`.\n    approx_grad : bool, optional\n        Whether to approximate the gradient numerically (in which case\n        `func` returns only the function value).\n    bounds : list, optional\n        ``(min, max)`` pairs for each element in ``x``, defining\n        the bounds on that parameter. Use None or +-inf for one of ``min`` or\n        ``max`` when there is no bound in that direction.\n    m : int, optional\n        The maximum number of variable metric corrections\n        used to define the limited memory matrix. (The limited memory BFGS\n        method does not store the full hessian but uses this many terms in an\n        approximation to it.)\n    factr : float, optional\n        The iteration stops when\n        ``(f^k - f^{k+1})/max{|f^k|,|f^{k+1}|,1} <= factr * eps``,\n        where ``eps`` is the machine precision, which is automatically\n        generated by the code. Typical values for `factr` are: 1e12 for\n        low accuracy; 1e7 for moderate accuracy; 10.0 for extremely\n        high accuracy. See Notes for relationship to `ftol`, which is exposed\n        (instead of `factr`) by the `scipy.optimize.minimize` interface to\n        L-BFGS-B.\n    pgtol : float, optional\n        The iteration will stop when\n        ``max{|proj g_i | i = 1, ..., n} <= pgtol``\n        where ``pg_i`` is the i-th component of the projected gradient.\n    epsilon : float, optional\n        Step size used when `approx_grad` is True, for numerically\n        calculating the gradient\n    iprint : int, optional\n        Controls the frequency of output. ``iprint < 0`` means no output;\n        ``iprint = 0``    print only one line at the last iteration;\n        ``0 < iprint < 99`` print also f and ``|proj g|`` every iprint iterations;\n        ``iprint = 99``   print details of every iteration except n-vectors;\n        ``iprint = 100``  print also the changes of active set and final x;\n        ``iprint > 100``  print details of every iteration including x and g.\n    disp : int, optional\n        If zero, then no output.  If a positive number, then this over-rides\n        `iprint` (i.e., `iprint` gets the value of `disp`).\n    maxfun : int, optional\n        Maximum number of function evaluations.\n    maxiter : int, optional\n        Maximum number of iterations.\n    callback : callable, optional\n        Called after each iteration, as ``callback(xk)``, where ``xk`` is the\n        current parameter vector.\n    maxls : int, optional\n        Maximum number of line search steps (per iteration). Default is 20.\n\n    Returns\n    -------\n    x : array_like\n        Estimated position of the minimum.\n    f : float\n        Value of `func` at the minimum.\n    d : dict\n        Information dictionary.\n\n        * d['warnflag'] is\n\n          - 0 if converged,\n          - 1 if too many function evaluations or too many iterations,\n          - 2 if stopped for another reason, given in d['task']\n\n        * d['grad'] is the gradient at the minimum (should be 0 ish)\n        * d['funcalls'] is the number of function calls made.\n        * d['nit'] is the number of iterations.\n\n    See also\n    --------\n    minimize: Interface to minimization algorithms for multivariate\n        functions. See the 'L-BFGS-B' `method` in particular. Note that the\n        `ftol` option is made available via that interface, while `factr` is\n        provided via this interface, where `factr` is the factor multiplying\n        the default machine floating-point precision to arrive at `ftol`:\n        ``ftol = factr * numpy.finfo(float).eps``.\n\n    Notes\n    -----\n    License of L-BFGS-B (FORTRAN code):\n\n    The version included here (in fortran code) is 3.0\n    (released April 25, 2011).  It was written by Ciyou Zhu, Richard Byrd,\n    and Jorge Nocedal <nocedal@ece.nwu.edu>. It carries the following\n    condition for use:\n\n    This software is freely available, but we expect that all publications\n    describing work using this software, or all commercial products using it,\n    quote at least one of the references given below. This software is released\n    under the BSD License.\n\n    References\n    ----------\n    * R. H. Byrd, P. Lu and J. Nocedal. A Limited Memory Algorithm for Bound\n      Constrained Optimization, (1995), SIAM Journal on Scientific and\n      Statistical Computing, 16, 5, pp. 1190-1208.\n    * C. Zhu, R. H. Byrd and J. Nocedal. L-BFGS-B: Algorithm 778: L-BFGS-B,\n      FORTRAN routines for large scale bound constrained optimization (1997),\n      ACM Transactions on Mathematical Software, 23, 4, pp. 550 - 560.\n    * J.L. Morales and J. Nocedal. L-BFGS-B: Remark on Algorithm 778: L-BFGS-B,\n      FORTRAN routines for large scale bound constrained optimization (2011),\n      ACM Transactions on Mathematical Software, 38, 1.\n\n    ")
    
    # Getting the type of 'approx_grad' (line 174)
    approx_grad_167695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 7), 'approx_grad')
    # Testing the type of an if condition (line 174)
    if_condition_167696 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 174, 4), approx_grad_167695)
    # Assigning a type to the variable 'if_condition_167696' (line 174)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 174, 4), 'if_condition_167696', if_condition_167696)
    # SSA begins for if statement (line 174)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 175):
    
    # Assigning a Name to a Name (line 175):
    # Getting the type of 'func' (line 175)
    func_167697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 14), 'func')
    # Assigning a type to the variable 'fun' (line 175)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 175, 8), 'fun', func_167697)
    
    # Assigning a Name to a Name (line 176):
    
    # Assigning a Name to a Name (line 176):
    # Getting the type of 'None' (line 176)
    None_167698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 14), 'None')
    # Assigning a type to the variable 'jac' (line 176)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 176, 8), 'jac', None_167698)
    # SSA branch for the else part of an if statement (line 174)
    module_type_store.open_ssa_branch('else')
    
    # Type idiom detected: calculating its left and rigth part (line 177)
    # Getting the type of 'fprime' (line 177)
    fprime_167699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 9), 'fprime')
    # Getting the type of 'None' (line 177)
    None_167700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 19), 'None')
    
    (may_be_167701, more_types_in_union_167702) = may_be_none(fprime_167699, None_167700)

    if may_be_167701:

        if more_types_in_union_167702:
            # Runtime conditional SSA (line 177)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 178):
        
        # Assigning a Call to a Name (line 178):
        
        # Call to MemoizeJac(...): (line 178)
        # Processing the call arguments (line 178)
        # Getting the type of 'func' (line 178)
        func_167704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 25), 'func', False)
        # Processing the call keyword arguments (line 178)
        kwargs_167705 = {}
        # Getting the type of 'MemoizeJac' (line 178)
        MemoizeJac_167703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 14), 'MemoizeJac', False)
        # Calling MemoizeJac(args, kwargs) (line 178)
        MemoizeJac_call_result_167706 = invoke(stypy.reporting.localization.Localization(__file__, 178, 14), MemoizeJac_167703, *[func_167704], **kwargs_167705)
        
        # Assigning a type to the variable 'fun' (line 178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 178, 8), 'fun', MemoizeJac_call_result_167706)
        
        # Assigning a Attribute to a Name (line 179):
        
        # Assigning a Attribute to a Name (line 179):
        # Getting the type of 'fun' (line 179)
        fun_167707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 14), 'fun')
        # Obtaining the member 'derivative' of a type (line 179)
        derivative_167708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 179, 14), fun_167707, 'derivative')
        # Assigning a type to the variable 'jac' (line 179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 179, 8), 'jac', derivative_167708)

        if more_types_in_union_167702:
            # Runtime conditional SSA for else branch (line 177)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_167701) or more_types_in_union_167702):
        
        # Assigning a Name to a Name (line 181):
        
        # Assigning a Name to a Name (line 181):
        # Getting the type of 'func' (line 181)
        func_167709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 14), 'func')
        # Assigning a type to the variable 'fun' (line 181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 181, 8), 'fun', func_167709)
        
        # Assigning a Name to a Name (line 182):
        
        # Assigning a Name to a Name (line 182):
        # Getting the type of 'fprime' (line 182)
        fprime_167710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 14), 'fprime')
        # Assigning a type to the variable 'jac' (line 182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 182, 8), 'jac', fprime_167710)

        if (may_be_167701 and more_types_in_union_167702):
            # SSA join for if statement (line 177)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 174)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 185)
    # Getting the type of 'disp' (line 185)
    disp_167711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 7), 'disp')
    # Getting the type of 'None' (line 185)
    None_167712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 15), 'None')
    
    (may_be_167713, more_types_in_union_167714) = may_be_none(disp_167711, None_167712)

    if may_be_167713:

        if more_types_in_union_167714:
            # Runtime conditional SSA (line 185)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Name (line 186):
        
        # Assigning a Name to a Name (line 186):
        # Getting the type of 'iprint' (line 186)
        iprint_167715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 15), 'iprint')
        # Assigning a type to the variable 'disp' (line 186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 186, 8), 'disp', iprint_167715)

        if more_types_in_union_167714:
            # SSA join for if statement (line 185)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Dict to a Name (line 187):
    
    # Assigning a Dict to a Name (line 187):
    
    # Obtaining an instance of the builtin type 'dict' (line 187)
    dict_167716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 187, 11), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 187)
    # Adding element type (key, value) (line 187)
    str_167717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 187, 12), 'str', 'disp')
    # Getting the type of 'disp' (line 187)
    disp_167718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 20), 'disp')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 187, 11), dict_167716, (str_167717, disp_167718))
    # Adding element type (key, value) (line 187)
    str_167719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 12), 'str', 'iprint')
    # Getting the type of 'iprint' (line 188)
    iprint_167720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 22), 'iprint')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 187, 11), dict_167716, (str_167719, iprint_167720))
    # Adding element type (key, value) (line 187)
    str_167721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 12), 'str', 'maxcor')
    # Getting the type of 'm' (line 189)
    m_167722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 22), 'm')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 187, 11), dict_167716, (str_167721, m_167722))
    # Adding element type (key, value) (line 187)
    str_167723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 190, 12), 'str', 'ftol')
    # Getting the type of 'factr' (line 190)
    factr_167724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 20), 'factr')
    
    # Call to finfo(...): (line 190)
    # Processing the call arguments (line 190)
    # Getting the type of 'float' (line 190)
    float_167727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 37), 'float', False)
    # Processing the call keyword arguments (line 190)
    kwargs_167728 = {}
    # Getting the type of 'np' (line 190)
    np_167725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 28), 'np', False)
    # Obtaining the member 'finfo' of a type (line 190)
    finfo_167726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 190, 28), np_167725, 'finfo')
    # Calling finfo(args, kwargs) (line 190)
    finfo_call_result_167729 = invoke(stypy.reporting.localization.Localization(__file__, 190, 28), finfo_167726, *[float_167727], **kwargs_167728)
    
    # Obtaining the member 'eps' of a type (line 190)
    eps_167730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 190, 28), finfo_call_result_167729, 'eps')
    # Applying the binary operator '*' (line 190)
    result_mul_167731 = python_operator(stypy.reporting.localization.Localization(__file__, 190, 20), '*', factr_167724, eps_167730)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 187, 11), dict_167716, (str_167723, result_mul_167731))
    # Adding element type (key, value) (line 187)
    str_167732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 12), 'str', 'gtol')
    # Getting the type of 'pgtol' (line 191)
    pgtol_167733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 20), 'pgtol')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 187, 11), dict_167716, (str_167732, pgtol_167733))
    # Adding element type (key, value) (line 187)
    str_167734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 12), 'str', 'eps')
    # Getting the type of 'epsilon' (line 192)
    epsilon_167735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 19), 'epsilon')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 187, 11), dict_167716, (str_167734, epsilon_167735))
    # Adding element type (key, value) (line 187)
    str_167736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 12), 'str', 'maxfun')
    # Getting the type of 'maxfun' (line 193)
    maxfun_167737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 22), 'maxfun')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 187, 11), dict_167716, (str_167736, maxfun_167737))
    # Adding element type (key, value) (line 187)
    str_167738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, 12), 'str', 'maxiter')
    # Getting the type of 'maxiter' (line 194)
    maxiter_167739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 23), 'maxiter')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 187, 11), dict_167716, (str_167738, maxiter_167739))
    # Adding element type (key, value) (line 187)
    str_167740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 12), 'str', 'callback')
    # Getting the type of 'callback' (line 195)
    callback_167741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 24), 'callback')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 187, 11), dict_167716, (str_167740, callback_167741))
    # Adding element type (key, value) (line 187)
    str_167742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 196, 12), 'str', 'maxls')
    # Getting the type of 'maxls' (line 196)
    maxls_167743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 21), 'maxls')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 187, 11), dict_167716, (str_167742, maxls_167743))
    
    # Assigning a type to the variable 'opts' (line 187)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 187, 4), 'opts', dict_167716)
    
    # Assigning a Call to a Name (line 198):
    
    # Assigning a Call to a Name (line 198):
    
    # Call to _minimize_lbfgsb(...): (line 198)
    # Processing the call arguments (line 198)
    # Getting the type of 'fun' (line 198)
    fun_167745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 27), 'fun', False)
    # Getting the type of 'x0' (line 198)
    x0_167746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 32), 'x0', False)
    # Processing the call keyword arguments (line 198)
    # Getting the type of 'args' (line 198)
    args_167747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 41), 'args', False)
    keyword_167748 = args_167747
    # Getting the type of 'jac' (line 198)
    jac_167749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 51), 'jac', False)
    keyword_167750 = jac_167749
    # Getting the type of 'bounds' (line 198)
    bounds_167751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 63), 'bounds', False)
    keyword_167752 = bounds_167751
    # Getting the type of 'opts' (line 199)
    opts_167753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 29), 'opts', False)
    kwargs_167754 = {'opts_167753': opts_167753, 'args': keyword_167748, 'jac': keyword_167750, 'bounds': keyword_167752}
    # Getting the type of '_minimize_lbfgsb' (line 198)
    _minimize_lbfgsb_167744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 10), '_minimize_lbfgsb', False)
    # Calling _minimize_lbfgsb(args, kwargs) (line 198)
    _minimize_lbfgsb_call_result_167755 = invoke(stypy.reporting.localization.Localization(__file__, 198, 10), _minimize_lbfgsb_167744, *[fun_167745, x0_167746], **kwargs_167754)
    
    # Assigning a type to the variable 'res' (line 198)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 198, 4), 'res', _minimize_lbfgsb_call_result_167755)
    
    # Assigning a Dict to a Name (line 200):
    
    # Assigning a Dict to a Name (line 200):
    
    # Obtaining an instance of the builtin type 'dict' (line 200)
    dict_167756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 200, 8), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 200)
    # Adding element type (key, value) (line 200)
    str_167757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 200, 9), 'str', 'grad')
    
    # Obtaining the type of the subscript
    str_167758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 200, 21), 'str', 'jac')
    # Getting the type of 'res' (line 200)
    res_167759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 17), 'res')
    # Obtaining the member '__getitem__' of a type (line 200)
    getitem___167760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 200, 17), res_167759, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 200)
    subscript_call_result_167761 = invoke(stypy.reporting.localization.Localization(__file__, 200, 17), getitem___167760, str_167758)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 200, 8), dict_167756, (str_167757, subscript_call_result_167761))
    # Adding element type (key, value) (line 200)
    str_167762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 201, 9), 'str', 'task')
    
    # Obtaining the type of the subscript
    str_167763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 201, 21), 'str', 'message')
    # Getting the type of 'res' (line 201)
    res_167764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 17), 'res')
    # Obtaining the member '__getitem__' of a type (line 201)
    getitem___167765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 17), res_167764, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 201)
    subscript_call_result_167766 = invoke(stypy.reporting.localization.Localization(__file__, 201, 17), getitem___167765, str_167763)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 200, 8), dict_167756, (str_167762, subscript_call_result_167766))
    # Adding element type (key, value) (line 200)
    str_167767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 202, 9), 'str', 'funcalls')
    
    # Obtaining the type of the subscript
    str_167768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 202, 25), 'str', 'nfev')
    # Getting the type of 'res' (line 202)
    res_167769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 21), 'res')
    # Obtaining the member '__getitem__' of a type (line 202)
    getitem___167770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 21), res_167769, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 202)
    subscript_call_result_167771 = invoke(stypy.reporting.localization.Localization(__file__, 202, 21), getitem___167770, str_167768)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 200, 8), dict_167756, (str_167767, subscript_call_result_167771))
    # Adding element type (key, value) (line 200)
    str_167772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 203, 9), 'str', 'nit')
    
    # Obtaining the type of the subscript
    str_167773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 203, 20), 'str', 'nit')
    # Getting the type of 'res' (line 203)
    res_167774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 16), 'res')
    # Obtaining the member '__getitem__' of a type (line 203)
    getitem___167775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 203, 16), res_167774, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 203)
    subscript_call_result_167776 = invoke(stypy.reporting.localization.Localization(__file__, 203, 16), getitem___167775, str_167773)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 200, 8), dict_167756, (str_167772, subscript_call_result_167776))
    # Adding element type (key, value) (line 200)
    str_167777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 204, 9), 'str', 'warnflag')
    
    # Obtaining the type of the subscript
    str_167778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 204, 25), 'str', 'status')
    # Getting the type of 'res' (line 204)
    res_167779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 21), 'res')
    # Obtaining the member '__getitem__' of a type (line 204)
    getitem___167780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 204, 21), res_167779, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 204)
    subscript_call_result_167781 = invoke(stypy.reporting.localization.Localization(__file__, 204, 21), getitem___167780, str_167778)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 200, 8), dict_167756, (str_167777, subscript_call_result_167781))
    
    # Assigning a type to the variable 'd' (line 200)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 200, 4), 'd', dict_167756)
    
    # Assigning a Subscript to a Name (line 205):
    
    # Assigning a Subscript to a Name (line 205):
    
    # Obtaining the type of the subscript
    str_167782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 205, 12), 'str', 'fun')
    # Getting the type of 'res' (line 205)
    res_167783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 8), 'res')
    # Obtaining the member '__getitem__' of a type (line 205)
    getitem___167784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 205, 8), res_167783, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 205)
    subscript_call_result_167785 = invoke(stypy.reporting.localization.Localization(__file__, 205, 8), getitem___167784, str_167782)
    
    # Assigning a type to the variable 'f' (line 205)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 4), 'f', subscript_call_result_167785)
    
    # Assigning a Subscript to a Name (line 206):
    
    # Assigning a Subscript to a Name (line 206):
    
    # Obtaining the type of the subscript
    str_167786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 206, 12), 'str', 'x')
    # Getting the type of 'res' (line 206)
    res_167787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 8), 'res')
    # Obtaining the member '__getitem__' of a type (line 206)
    getitem___167788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 206, 8), res_167787, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 206)
    subscript_call_result_167789 = invoke(stypy.reporting.localization.Localization(__file__, 206, 8), getitem___167788, str_167786)
    
    # Assigning a type to the variable 'x' (line 206)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 206, 4), 'x', subscript_call_result_167789)
    
    # Obtaining an instance of the builtin type 'tuple' (line 208)
    tuple_167790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 208, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 208)
    # Adding element type (line 208)
    # Getting the type of 'x' (line 208)
    x_167791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 11), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 208, 11), tuple_167790, x_167791)
    # Adding element type (line 208)
    # Getting the type of 'f' (line 208)
    f_167792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 14), 'f')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 208, 11), tuple_167790, f_167792)
    # Adding element type (line 208)
    # Getting the type of 'd' (line 208)
    d_167793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 17), 'd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 208, 11), tuple_167790, d_167793)
    
    # Assigning a type to the variable 'stypy_return_type' (line 208)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 208, 4), 'stypy_return_type', tuple_167790)
    
    # ################# End of 'fmin_l_bfgs_b(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fmin_l_bfgs_b' in the type store
    # Getting the type of 'stypy_return_type' (line 49)
    stypy_return_type_167794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 49, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_167794)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fmin_l_bfgs_b'
    return stypy_return_type_167794

# Assigning a type to the variable 'fmin_l_bfgs_b' (line 49)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 49, 0), 'fmin_l_bfgs_b', fmin_l_bfgs_b)

@norecursion
def _minimize_lbfgsb(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 211)
    tuple_167795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, 35), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 211)
    
    # Getting the type of 'None' (line 211)
    None_167796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 43), 'None')
    # Getting the type of 'None' (line 211)
    None_167797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 56), 'None')
    # Getting the type of 'None' (line 212)
    None_167798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 26), 'None')
    int_167799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 212, 39), 'int')
    float_167800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 212, 48), 'float')
    float_167801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 213, 26), 'float')
    float_167802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 213, 36), 'float')
    int_167803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 213, 49), 'int')
    int_167804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 213, 64), 'int')
    int_167805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 214, 28), 'int')
    # Getting the type of 'None' (line 214)
    None_167806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 41), 'None')
    int_167807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 214, 53), 'int')
    defaults = [tuple_167795, None_167796, None_167797, None_167798, int_167799, float_167800, float_167801, float_167802, int_167803, int_167804, int_167805, None_167806, int_167807]
    # Create a new context for function '_minimize_lbfgsb'
    module_type_store = module_type_store.open_function_context('_minimize_lbfgsb', 211, 0, False)
    
    # Passed parameters checking function
    _minimize_lbfgsb.stypy_localization = localization
    _minimize_lbfgsb.stypy_type_of_self = None
    _minimize_lbfgsb.stypy_type_store = module_type_store
    _minimize_lbfgsb.stypy_function_name = '_minimize_lbfgsb'
    _minimize_lbfgsb.stypy_param_names_list = ['fun', 'x0', 'args', 'jac', 'bounds', 'disp', 'maxcor', 'ftol', 'gtol', 'eps', 'maxfun', 'maxiter', 'iprint', 'callback', 'maxls']
    _minimize_lbfgsb.stypy_varargs_param_name = None
    _minimize_lbfgsb.stypy_kwargs_param_name = 'unknown_options'
    _minimize_lbfgsb.stypy_call_defaults = defaults
    _minimize_lbfgsb.stypy_call_varargs = varargs
    _minimize_lbfgsb.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_minimize_lbfgsb', ['fun', 'x0', 'args', 'jac', 'bounds', 'disp', 'maxcor', 'ftol', 'gtol', 'eps', 'maxfun', 'maxiter', 'iprint', 'callback', 'maxls'], None, 'unknown_options', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_minimize_lbfgsb', localization, ['fun', 'x0', 'args', 'jac', 'bounds', 'disp', 'maxcor', 'ftol', 'gtol', 'eps', 'maxfun', 'maxiter', 'iprint', 'callback', 'maxls'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_minimize_lbfgsb(...)' code ##################

    str_167808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 254, (-1)), 'str', '\n    Minimize a scalar function of one or more variables using the L-BFGS-B\n    algorithm.\n\n    Options\n    -------\n    disp : bool\n       Set to True to print convergence messages.\n    maxcor : int\n        The maximum number of variable metric corrections used to\n        define the limited memory matrix. (The limited memory BFGS\n        method does not store the full hessian but uses this many terms\n        in an approximation to it.)\n    ftol : float\n        The iteration stops when ``(f^k -\n        f^{k+1})/max{|f^k|,|f^{k+1}|,1} <= ftol``.\n    gtol : float\n        The iteration will stop when ``max{|proj g_i | i = 1, ..., n}\n        <= gtol`` where ``pg_i`` is the i-th component of the\n        projected gradient.\n    eps : float\n        Step size used for numerical approximation of the jacobian.\n    disp : int\n        Set to True to print convergence messages.\n    maxfun : int\n        Maximum number of function evaluations.\n    maxiter : int\n        Maximum number of iterations.\n    maxls : int, optional\n        Maximum number of line search steps (per iteration). Default is 20.\n\n    Notes\n    -----\n    The option `ftol` is exposed via the `scipy.optimize.minimize` interface,\n    but calling `scipy.optimize.fmin_l_bfgs_b` directly exposes `factr`. The\n    relationship between the two is ``ftol = factr * numpy.finfo(float).eps``.\n    I.e., `factr` multiplies the default machine floating-point precision to\n    arrive at `ftol`.\n\n    ')
    
    # Call to _check_unknown_options(...): (line 255)
    # Processing the call arguments (line 255)
    # Getting the type of 'unknown_options' (line 255)
    unknown_options_167810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 27), 'unknown_options', False)
    # Processing the call keyword arguments (line 255)
    kwargs_167811 = {}
    # Getting the type of '_check_unknown_options' (line 255)
    _check_unknown_options_167809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 4), '_check_unknown_options', False)
    # Calling _check_unknown_options(args, kwargs) (line 255)
    _check_unknown_options_call_result_167812 = invoke(stypy.reporting.localization.Localization(__file__, 255, 4), _check_unknown_options_167809, *[unknown_options_167810], **kwargs_167811)
    
    
    # Assigning a Name to a Name (line 256):
    
    # Assigning a Name to a Name (line 256):
    # Getting the type of 'maxcor' (line 256)
    maxcor_167813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'maxcor')
    # Assigning a type to the variable 'm' (line 256)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 4), 'm', maxcor_167813)
    
    # Assigning a Name to a Name (line 257):
    
    # Assigning a Name to a Name (line 257):
    # Getting the type of 'eps' (line 257)
    eps_167814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 14), 'eps')
    # Assigning a type to the variable 'epsilon' (line 257)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 257, 4), 'epsilon', eps_167814)
    
    # Assigning a Name to a Name (line 258):
    
    # Assigning a Name to a Name (line 258):
    # Getting the type of 'gtol' (line 258)
    gtol_167815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 12), 'gtol')
    # Assigning a type to the variable 'pgtol' (line 258)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 4), 'pgtol', gtol_167815)
    
    # Assigning a BinOp to a Name (line 259):
    
    # Assigning a BinOp to a Name (line 259):
    # Getting the type of 'ftol' (line 259)
    ftol_167816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 12), 'ftol')
    
    # Call to finfo(...): (line 259)
    # Processing the call arguments (line 259)
    # Getting the type of 'float' (line 259)
    float_167819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 28), 'float', False)
    # Processing the call keyword arguments (line 259)
    kwargs_167820 = {}
    # Getting the type of 'np' (line 259)
    np_167817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 19), 'np', False)
    # Obtaining the member 'finfo' of a type (line 259)
    finfo_167818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 259, 19), np_167817, 'finfo')
    # Calling finfo(args, kwargs) (line 259)
    finfo_call_result_167821 = invoke(stypy.reporting.localization.Localization(__file__, 259, 19), finfo_167818, *[float_167819], **kwargs_167820)
    
    # Obtaining the member 'eps' of a type (line 259)
    eps_167822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 259, 19), finfo_call_result_167821, 'eps')
    # Applying the binary operator 'div' (line 259)
    result_div_167823 = python_operator(stypy.reporting.localization.Localization(__file__, 259, 12), 'div', ftol_167816, eps_167822)
    
    # Assigning a type to the variable 'factr' (line 259)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 259, 4), 'factr', result_div_167823)
    
    # Assigning a Call to a Name (line 261):
    
    # Assigning a Call to a Name (line 261):
    
    # Call to ravel(...): (line 261)
    # Processing the call keyword arguments (line 261)
    kwargs_167829 = {}
    
    # Call to asarray(...): (line 261)
    # Processing the call arguments (line 261)
    # Getting the type of 'x0' (line 261)
    x0_167825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 17), 'x0', False)
    # Processing the call keyword arguments (line 261)
    kwargs_167826 = {}
    # Getting the type of 'asarray' (line 261)
    asarray_167824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 9), 'asarray', False)
    # Calling asarray(args, kwargs) (line 261)
    asarray_call_result_167827 = invoke(stypy.reporting.localization.Localization(__file__, 261, 9), asarray_167824, *[x0_167825], **kwargs_167826)
    
    # Obtaining the member 'ravel' of a type (line 261)
    ravel_167828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 261, 9), asarray_call_result_167827, 'ravel')
    # Calling ravel(args, kwargs) (line 261)
    ravel_call_result_167830 = invoke(stypy.reporting.localization.Localization(__file__, 261, 9), ravel_167828, *[], **kwargs_167829)
    
    # Assigning a type to the variable 'x0' (line 261)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 261, 4), 'x0', ravel_call_result_167830)
    
    # Assigning a Attribute to a Tuple (line 262):
    
    # Assigning a Subscript to a Name (line 262):
    
    # Obtaining the type of the subscript
    int_167831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 262, 4), 'int')
    # Getting the type of 'x0' (line 262)
    x0_167832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 9), 'x0')
    # Obtaining the member 'shape' of a type (line 262)
    shape_167833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 262, 9), x0_167832, 'shape')
    # Obtaining the member '__getitem__' of a type (line 262)
    getitem___167834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 262, 4), shape_167833, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 262)
    subscript_call_result_167835 = invoke(stypy.reporting.localization.Localization(__file__, 262, 4), getitem___167834, int_167831)
    
    # Assigning a type to the variable 'tuple_var_assignment_167637' (line 262)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 262, 4), 'tuple_var_assignment_167637', subscript_call_result_167835)
    
    # Assigning a Name to a Name (line 262):
    # Getting the type of 'tuple_var_assignment_167637' (line 262)
    tuple_var_assignment_167637_167836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 4), 'tuple_var_assignment_167637')
    # Assigning a type to the variable 'n' (line 262)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 262, 4), 'n', tuple_var_assignment_167637_167836)
    
    # Type idiom detected: calculating its left and rigth part (line 264)
    # Getting the type of 'bounds' (line 264)
    bounds_167837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 7), 'bounds')
    # Getting the type of 'None' (line 264)
    None_167838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 17), 'None')
    
    (may_be_167839, more_types_in_union_167840) = may_be_none(bounds_167837, None_167838)

    if may_be_167839:

        if more_types_in_union_167840:
            # Runtime conditional SSA (line 264)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BinOp to a Name (line 265):
        
        # Assigning a BinOp to a Name (line 265):
        
        # Obtaining an instance of the builtin type 'list' (line 265)
        list_167841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 265, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 265)
        # Adding element type (line 265)
        
        # Obtaining an instance of the builtin type 'tuple' (line 265)
        tuple_167842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 265, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 265)
        # Adding element type (line 265)
        # Getting the type of 'None' (line 265)
        None_167843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 19), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 265, 19), tuple_167842, None_167843)
        # Adding element type (line 265)
        # Getting the type of 'None' (line 265)
        None_167844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 25), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 265, 19), tuple_167842, None_167844)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 265, 17), list_167841, tuple_167842)
        
        # Getting the type of 'n' (line 265)
        n_167845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 34), 'n')
        # Applying the binary operator '*' (line 265)
        result_mul_167846 = python_operator(stypy.reporting.localization.Localization(__file__, 265, 17), '*', list_167841, n_167845)
        
        # Assigning a type to the variable 'bounds' (line 265)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 265, 8), 'bounds', result_mul_167846)

        if more_types_in_union_167840:
            # SSA join for if statement (line 264)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    
    # Call to len(...): (line 266)
    # Processing the call arguments (line 266)
    # Getting the type of 'bounds' (line 266)
    bounds_167848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 11), 'bounds', False)
    # Processing the call keyword arguments (line 266)
    kwargs_167849 = {}
    # Getting the type of 'len' (line 266)
    len_167847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 7), 'len', False)
    # Calling len(args, kwargs) (line 266)
    len_call_result_167850 = invoke(stypy.reporting.localization.Localization(__file__, 266, 7), len_167847, *[bounds_167848], **kwargs_167849)
    
    # Getting the type of 'n' (line 266)
    n_167851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 22), 'n')
    # Applying the binary operator '!=' (line 266)
    result_ne_167852 = python_operator(stypy.reporting.localization.Localization(__file__, 266, 7), '!=', len_call_result_167850, n_167851)
    
    # Testing the type of an if condition (line 266)
    if_condition_167853 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 266, 4), result_ne_167852)
    # Assigning a type to the variable 'if_condition_167853' (line 266)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 266, 4), 'if_condition_167853', if_condition_167853)
    # SSA begins for if statement (line 266)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 267)
    # Processing the call arguments (line 267)
    str_167855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 267, 25), 'str', 'length of x0 != length of bounds')
    # Processing the call keyword arguments (line 267)
    kwargs_167856 = {}
    # Getting the type of 'ValueError' (line 267)
    ValueError_167854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 267)
    ValueError_call_result_167857 = invoke(stypy.reporting.localization.Localization(__file__, 267, 14), ValueError_167854, *[str_167855], **kwargs_167856)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 267, 8), ValueError_call_result_167857, 'raise parameter', BaseException)
    # SSA join for if statement (line 266)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a ListComp to a Name (line 269):
    
    # Assigning a ListComp to a Name (line 269):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'bounds' (line 269)
    bounds_167874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 84), 'bounds')
    comprehension_167875 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 269, 14), bounds_167874)
    # Assigning a type to the variable 'l' (line 269)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 269, 14), 'l', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 269, 14), comprehension_167875))
    # Assigning a type to the variable 'u' (line 269)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 269, 14), 'u', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 269, 14), comprehension_167875))
    
    # Obtaining an instance of the builtin type 'tuple' (line 269)
    tuple_167858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 269, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 269)
    # Adding element type (line 269)
    
    
    # Getting the type of 'l' (line 269)
    l_167859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 23), 'l')
    
    # Getting the type of 'np' (line 269)
    np_167860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 29), 'np')
    # Obtaining the member 'inf' of a type (line 269)
    inf_167861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 269, 29), np_167860, 'inf')
    # Applying the 'usub' unary operator (line 269)
    result___neg___167862 = python_operator(stypy.reporting.localization.Localization(__file__, 269, 28), 'usub', inf_167861)
    
    # Applying the binary operator '==' (line 269)
    result_eq_167863 = python_operator(stypy.reporting.localization.Localization(__file__, 269, 23), '==', l_167859, result___neg___167862)
    
    # Testing the type of an if expression (line 269)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 269, 15), result_eq_167863)
    # SSA begins for if expression (line 269)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    # Getting the type of 'None' (line 269)
    None_167864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 15), 'None')
    # SSA branch for the else part of an if expression (line 269)
    module_type_store.open_ssa_branch('if expression else')
    # Getting the type of 'l' (line 269)
    l_167865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 41), 'l')
    # SSA join for if expression (line 269)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_167866 = union_type.UnionType.add(None_167864, l_167865)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 269, 15), tuple_167858, if_exp_167866)
    # Adding element type (line 269)
    
    
    # Getting the type of 'u' (line 269)
    u_167867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 52), 'u')
    # Getting the type of 'np' (line 269)
    np_167868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 57), 'np')
    # Obtaining the member 'inf' of a type (line 269)
    inf_167869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 269, 57), np_167868, 'inf')
    # Applying the binary operator '==' (line 269)
    result_eq_167870 = python_operator(stypy.reporting.localization.Localization(__file__, 269, 52), '==', u_167867, inf_167869)
    
    # Testing the type of an if expression (line 269)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 269, 44), result_eq_167870)
    # SSA begins for if expression (line 269)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    # Getting the type of 'None' (line 269)
    None_167871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 44), 'None')
    # SSA branch for the else part of an if expression (line 269)
    module_type_store.open_ssa_branch('if expression else')
    # Getting the type of 'u' (line 269)
    u_167872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 69), 'u')
    # SSA join for if expression (line 269)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_167873 = union_type.UnionType.add(None_167871, u_167872)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 269, 15), tuple_167858, if_exp_167873)
    
    list_167876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 269, 14), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 269, 14), list_167876, tuple_167858)
    # Assigning a type to the variable 'bounds' (line 269)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 269, 4), 'bounds', list_167876)
    
    # Type idiom detected: calculating its left and rigth part (line 271)
    # Getting the type of 'disp' (line 271)
    disp_167877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 4), 'disp')
    # Getting the type of 'None' (line 271)
    None_167878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 19), 'None')
    
    (may_be_167879, more_types_in_union_167880) = may_not_be_none(disp_167877, None_167878)

    if may_be_167879:

        if more_types_in_union_167880:
            # Runtime conditional SSA (line 271)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Getting the type of 'disp' (line 272)
        disp_167881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 11), 'disp')
        int_167882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 272, 19), 'int')
        # Applying the binary operator '==' (line 272)
        result_eq_167883 = python_operator(stypy.reporting.localization.Localization(__file__, 272, 11), '==', disp_167881, int_167882)
        
        # Testing the type of an if condition (line 272)
        if_condition_167884 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 272, 8), result_eq_167883)
        # Assigning a type to the variable 'if_condition_167884' (line 272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 8), 'if_condition_167884', if_condition_167884)
        # SSA begins for if statement (line 272)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 273):
        
        # Assigning a Num to a Name (line 273):
        int_167885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 21), 'int')
        # Assigning a type to the variable 'iprint' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 12), 'iprint', int_167885)
        # SSA branch for the else part of an if statement (line 272)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 275):
        
        # Assigning a Name to a Name (line 275):
        # Getting the type of 'disp' (line 275)
        disp_167886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 21), 'disp')
        # Assigning a type to the variable 'iprint' (line 275)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 275, 12), 'iprint', disp_167886)
        # SSA join for if statement (line 272)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_167880:
            # SSA join for if statement (line 271)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Tuple (line 277):
    
    # Assigning a Subscript to a Name (line 277):
    
    # Obtaining the type of the subscript
    int_167887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 4), 'int')
    
    # Call to wrap_function(...): (line 277)
    # Processing the call arguments (line 277)
    # Getting the type of 'fun' (line 277)
    fun_167889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 42), 'fun', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 277)
    tuple_167890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 47), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 277)
    
    # Processing the call keyword arguments (line 277)
    kwargs_167891 = {}
    # Getting the type of 'wrap_function' (line 277)
    wrap_function_167888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 28), 'wrap_function', False)
    # Calling wrap_function(args, kwargs) (line 277)
    wrap_function_call_result_167892 = invoke(stypy.reporting.localization.Localization(__file__, 277, 28), wrap_function_167888, *[fun_167889, tuple_167890], **kwargs_167891)
    
    # Obtaining the member '__getitem__' of a type (line 277)
    getitem___167893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 4), wrap_function_call_result_167892, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 277)
    subscript_call_result_167894 = invoke(stypy.reporting.localization.Localization(__file__, 277, 4), getitem___167893, int_167887)
    
    # Assigning a type to the variable 'tuple_var_assignment_167638' (line 277)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 4), 'tuple_var_assignment_167638', subscript_call_result_167894)
    
    # Assigning a Subscript to a Name (line 277):
    
    # Obtaining the type of the subscript
    int_167895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 4), 'int')
    
    # Call to wrap_function(...): (line 277)
    # Processing the call arguments (line 277)
    # Getting the type of 'fun' (line 277)
    fun_167897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 42), 'fun', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 277)
    tuple_167898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 47), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 277)
    
    # Processing the call keyword arguments (line 277)
    kwargs_167899 = {}
    # Getting the type of 'wrap_function' (line 277)
    wrap_function_167896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 28), 'wrap_function', False)
    # Calling wrap_function(args, kwargs) (line 277)
    wrap_function_call_result_167900 = invoke(stypy.reporting.localization.Localization(__file__, 277, 28), wrap_function_167896, *[fun_167897, tuple_167898], **kwargs_167899)
    
    # Obtaining the member '__getitem__' of a type (line 277)
    getitem___167901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 4), wrap_function_call_result_167900, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 277)
    subscript_call_result_167902 = invoke(stypy.reporting.localization.Localization(__file__, 277, 4), getitem___167901, int_167895)
    
    # Assigning a type to the variable 'tuple_var_assignment_167639' (line 277)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 4), 'tuple_var_assignment_167639', subscript_call_result_167902)
    
    # Assigning a Name to a Name (line 277):
    # Getting the type of 'tuple_var_assignment_167638' (line 277)
    tuple_var_assignment_167638_167903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 4), 'tuple_var_assignment_167638')
    # Assigning a type to the variable 'n_function_evals' (line 277)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 4), 'n_function_evals', tuple_var_assignment_167638_167903)
    
    # Assigning a Name to a Name (line 277):
    # Getting the type of 'tuple_var_assignment_167639' (line 277)
    tuple_var_assignment_167639_167904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 4), 'tuple_var_assignment_167639')
    # Assigning a type to the variable 'fun' (line 277)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 22), 'fun', tuple_var_assignment_167639_167904)
    
    # Type idiom detected: calculating its left and rigth part (line 278)
    # Getting the type of 'jac' (line 278)
    jac_167905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 7), 'jac')
    # Getting the type of 'None' (line 278)
    None_167906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 14), 'None')
    
    (may_be_167907, more_types_in_union_167908) = may_be_none(jac_167905, None_167906)

    if may_be_167907:

        if more_types_in_union_167908:
            # Runtime conditional SSA (line 278)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store


        @norecursion
        def func_and_grad(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'func_and_grad'
            module_type_store = module_type_store.open_function_context('func_and_grad', 279, 8, False)
            
            # Passed parameters checking function
            func_and_grad.stypy_localization = localization
            func_and_grad.stypy_type_of_self = None
            func_and_grad.stypy_type_store = module_type_store
            func_and_grad.stypy_function_name = 'func_and_grad'
            func_and_grad.stypy_param_names_list = ['x']
            func_and_grad.stypy_varargs_param_name = None
            func_and_grad.stypy_kwargs_param_name = None
            func_and_grad.stypy_call_defaults = defaults
            func_and_grad.stypy_call_varargs = varargs
            func_and_grad.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'func_and_grad', ['x'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'func_and_grad', localization, ['x'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'func_and_grad(...)' code ##################

            
            # Assigning a Call to a Name (line 280):
            
            # Assigning a Call to a Name (line 280):
            
            # Call to fun(...): (line 280)
            # Processing the call arguments (line 280)
            # Getting the type of 'x' (line 280)
            x_167910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 20), 'x', False)
            # Getting the type of 'args' (line 280)
            args_167911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 24), 'args', False)
            # Processing the call keyword arguments (line 280)
            kwargs_167912 = {}
            # Getting the type of 'fun' (line 280)
            fun_167909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 16), 'fun', False)
            # Calling fun(args, kwargs) (line 280)
            fun_call_result_167913 = invoke(stypy.reporting.localization.Localization(__file__, 280, 16), fun_167909, *[x_167910, args_167911], **kwargs_167912)
            
            # Assigning a type to the variable 'f' (line 280)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 280, 12), 'f', fun_call_result_167913)
            
            # Assigning a Call to a Name (line 281):
            
            # Assigning a Call to a Name (line 281):
            
            # Call to _approx_fprime_helper(...): (line 281)
            # Processing the call arguments (line 281)
            # Getting the type of 'x' (line 281)
            x_167915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 38), 'x', False)
            # Getting the type of 'fun' (line 281)
            fun_167916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 41), 'fun', False)
            # Getting the type of 'epsilon' (line 281)
            epsilon_167917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 46), 'epsilon', False)
            # Processing the call keyword arguments (line 281)
            # Getting the type of 'args' (line 281)
            args_167918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 60), 'args', False)
            keyword_167919 = args_167918
            # Getting the type of 'f' (line 281)
            f_167920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 69), 'f', False)
            keyword_167921 = f_167920
            kwargs_167922 = {'f0': keyword_167921, 'args': keyword_167919}
            # Getting the type of '_approx_fprime_helper' (line 281)
            _approx_fprime_helper_167914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 16), '_approx_fprime_helper', False)
            # Calling _approx_fprime_helper(args, kwargs) (line 281)
            _approx_fprime_helper_call_result_167923 = invoke(stypy.reporting.localization.Localization(__file__, 281, 16), _approx_fprime_helper_167914, *[x_167915, fun_167916, epsilon_167917], **kwargs_167922)
            
            # Assigning a type to the variable 'g' (line 281)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 281, 12), 'g', _approx_fprime_helper_call_result_167923)
            
            # Obtaining an instance of the builtin type 'tuple' (line 282)
            tuple_167924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 282, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 282)
            # Adding element type (line 282)
            # Getting the type of 'f' (line 282)
            f_167925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 19), 'f')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 282, 19), tuple_167924, f_167925)
            # Adding element type (line 282)
            # Getting the type of 'g' (line 282)
            g_167926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 22), 'g')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 282, 19), tuple_167924, g_167926)
            
            # Assigning a type to the variable 'stypy_return_type' (line 282)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 282, 12), 'stypy_return_type', tuple_167924)
            
            # ################# End of 'func_and_grad(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'func_and_grad' in the type store
            # Getting the type of 'stypy_return_type' (line 279)
            stypy_return_type_167927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_167927)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'func_and_grad'
            return stypy_return_type_167927

        # Assigning a type to the variable 'func_and_grad' (line 279)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 279, 8), 'func_and_grad', func_and_grad)

        if more_types_in_union_167908:
            # Runtime conditional SSA for else branch (line 278)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_167907) or more_types_in_union_167908):

        @norecursion
        def func_and_grad(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'func_and_grad'
            module_type_store = module_type_store.open_function_context('func_and_grad', 284, 8, False)
            
            # Passed parameters checking function
            func_and_grad.stypy_localization = localization
            func_and_grad.stypy_type_of_self = None
            func_and_grad.stypy_type_store = module_type_store
            func_and_grad.stypy_function_name = 'func_and_grad'
            func_and_grad.stypy_param_names_list = ['x']
            func_and_grad.stypy_varargs_param_name = None
            func_and_grad.stypy_kwargs_param_name = None
            func_and_grad.stypy_call_defaults = defaults
            func_and_grad.stypy_call_varargs = varargs
            func_and_grad.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'func_and_grad', ['x'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'func_and_grad', localization, ['x'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'func_and_grad(...)' code ##################

            
            # Assigning a Call to a Name (line 285):
            
            # Assigning a Call to a Name (line 285):
            
            # Call to fun(...): (line 285)
            # Processing the call arguments (line 285)
            # Getting the type of 'x' (line 285)
            x_167929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 20), 'x', False)
            # Getting the type of 'args' (line 285)
            args_167930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 24), 'args', False)
            # Processing the call keyword arguments (line 285)
            kwargs_167931 = {}
            # Getting the type of 'fun' (line 285)
            fun_167928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 16), 'fun', False)
            # Calling fun(args, kwargs) (line 285)
            fun_call_result_167932 = invoke(stypy.reporting.localization.Localization(__file__, 285, 16), fun_167928, *[x_167929, args_167930], **kwargs_167931)
            
            # Assigning a type to the variable 'f' (line 285)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 285, 12), 'f', fun_call_result_167932)
            
            # Assigning a Call to a Name (line 286):
            
            # Assigning a Call to a Name (line 286):
            
            # Call to jac(...): (line 286)
            # Processing the call arguments (line 286)
            # Getting the type of 'x' (line 286)
            x_167934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 20), 'x', False)
            # Getting the type of 'args' (line 286)
            args_167935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 24), 'args', False)
            # Processing the call keyword arguments (line 286)
            kwargs_167936 = {}
            # Getting the type of 'jac' (line 286)
            jac_167933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 16), 'jac', False)
            # Calling jac(args, kwargs) (line 286)
            jac_call_result_167937 = invoke(stypy.reporting.localization.Localization(__file__, 286, 16), jac_167933, *[x_167934, args_167935], **kwargs_167936)
            
            # Assigning a type to the variable 'g' (line 286)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 12), 'g', jac_call_result_167937)
            
            # Obtaining an instance of the builtin type 'tuple' (line 287)
            tuple_167938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 287, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 287)
            # Adding element type (line 287)
            # Getting the type of 'f' (line 287)
            f_167939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 19), 'f')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 287, 19), tuple_167938, f_167939)
            # Adding element type (line 287)
            # Getting the type of 'g' (line 287)
            g_167940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 22), 'g')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 287, 19), tuple_167938, g_167940)
            
            # Assigning a type to the variable 'stypy_return_type' (line 287)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 287, 12), 'stypy_return_type', tuple_167938)
            
            # ################# End of 'func_and_grad(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'func_and_grad' in the type store
            # Getting the type of 'stypy_return_type' (line 284)
            stypy_return_type_167941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_167941)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'func_and_grad'
            return stypy_return_type_167941

        # Assigning a type to the variable 'func_and_grad' (line 284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 284, 8), 'func_and_grad', func_and_grad)

        if (may_be_167907 and more_types_in_union_167908):
            # SSA join for if statement (line 278)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 289):
    
    # Assigning a Call to a Name (line 289):
    
    # Call to zeros(...): (line 289)
    # Processing the call arguments (line 289)
    # Getting the type of 'n' (line 289)
    n_167943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 16), 'n', False)
    # Getting the type of 'int32' (line 289)
    int32_167944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 19), 'int32', False)
    # Processing the call keyword arguments (line 289)
    kwargs_167945 = {}
    # Getting the type of 'zeros' (line 289)
    zeros_167942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 10), 'zeros', False)
    # Calling zeros(args, kwargs) (line 289)
    zeros_call_result_167946 = invoke(stypy.reporting.localization.Localization(__file__, 289, 10), zeros_167942, *[n_167943, int32_167944], **kwargs_167945)
    
    # Assigning a type to the variable 'nbd' (line 289)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 289, 4), 'nbd', zeros_call_result_167946)
    
    # Assigning a Call to a Name (line 290):
    
    # Assigning a Call to a Name (line 290):
    
    # Call to zeros(...): (line 290)
    # Processing the call arguments (line 290)
    # Getting the type of 'n' (line 290)
    n_167948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 20), 'n', False)
    # Getting the type of 'float64' (line 290)
    float64_167949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 23), 'float64', False)
    # Processing the call keyword arguments (line 290)
    kwargs_167950 = {}
    # Getting the type of 'zeros' (line 290)
    zeros_167947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 14), 'zeros', False)
    # Calling zeros(args, kwargs) (line 290)
    zeros_call_result_167951 = invoke(stypy.reporting.localization.Localization(__file__, 290, 14), zeros_167947, *[n_167948, float64_167949], **kwargs_167950)
    
    # Assigning a type to the variable 'low_bnd' (line 290)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 290, 4), 'low_bnd', zeros_call_result_167951)
    
    # Assigning a Call to a Name (line 291):
    
    # Assigning a Call to a Name (line 291):
    
    # Call to zeros(...): (line 291)
    # Processing the call arguments (line 291)
    # Getting the type of 'n' (line 291)
    n_167953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 22), 'n', False)
    # Getting the type of 'float64' (line 291)
    float64_167954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 25), 'float64', False)
    # Processing the call keyword arguments (line 291)
    kwargs_167955 = {}
    # Getting the type of 'zeros' (line 291)
    zeros_167952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 16), 'zeros', False)
    # Calling zeros(args, kwargs) (line 291)
    zeros_call_result_167956 = invoke(stypy.reporting.localization.Localization(__file__, 291, 16), zeros_167952, *[n_167953, float64_167954], **kwargs_167955)
    
    # Assigning a type to the variable 'upper_bnd' (line 291)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 291, 4), 'upper_bnd', zeros_call_result_167956)
    
    # Assigning a Dict to a Name (line 292):
    
    # Assigning a Dict to a Name (line 292):
    
    # Obtaining an instance of the builtin type 'dict' (line 292)
    dict_167957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 17), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 292)
    # Adding element type (key, value) (line 292)
    
    # Obtaining an instance of the builtin type 'tuple' (line 292)
    tuple_167958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 292)
    # Adding element type (line 292)
    # Getting the type of 'None' (line 292)
    None_167959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 19), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 292, 19), tuple_167958, None_167959)
    # Adding element type (line 292)
    # Getting the type of 'None' (line 292)
    None_167960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 25), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 292, 19), tuple_167958, None_167960)
    
    int_167961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 32), 'int')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 292, 17), dict_167957, (tuple_167958, int_167961))
    # Adding element type (key, value) (line 292)
    
    # Obtaining an instance of the builtin type 'tuple' (line 293)
    tuple_167962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 293, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 293)
    # Adding element type (line 293)
    int_167963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 293, 19), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 293, 19), tuple_167962, int_167963)
    # Adding element type (line 293)
    # Getting the type of 'None' (line 293)
    None_167964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 22), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 293, 19), tuple_167962, None_167964)
    
    int_167965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 293, 29), 'int')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 292, 17), dict_167957, (tuple_167962, int_167965))
    # Adding element type (key, value) (line 292)
    
    # Obtaining an instance of the builtin type 'tuple' (line 294)
    tuple_167966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 294, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 294)
    # Adding element type (line 294)
    int_167967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 294, 19), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 294, 19), tuple_167966, int_167967)
    # Adding element type (line 294)
    int_167968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 294, 22), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 294, 19), tuple_167966, int_167968)
    
    int_167969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 294, 26), 'int')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 292, 17), dict_167957, (tuple_167966, int_167969))
    # Adding element type (key, value) (line 292)
    
    # Obtaining an instance of the builtin type 'tuple' (line 295)
    tuple_167970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 295, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 295)
    # Adding element type (line 295)
    # Getting the type of 'None' (line 295)
    None_167971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 19), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 295, 19), tuple_167970, None_167971)
    # Adding element type (line 295)
    int_167972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 295, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 295, 19), tuple_167970, int_167972)
    
    int_167973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 295, 29), 'int')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 292, 17), dict_167957, (tuple_167970, int_167973))
    
    # Assigning a type to the variable 'bounds_map' (line 292)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 292, 4), 'bounds_map', dict_167957)
    
    
    # Call to range(...): (line 296)
    # Processing the call arguments (line 296)
    int_167975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 296, 19), 'int')
    # Getting the type of 'n' (line 296)
    n_167976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 22), 'n', False)
    # Processing the call keyword arguments (line 296)
    kwargs_167977 = {}
    # Getting the type of 'range' (line 296)
    range_167974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 13), 'range', False)
    # Calling range(args, kwargs) (line 296)
    range_call_result_167978 = invoke(stypy.reporting.localization.Localization(__file__, 296, 13), range_167974, *[int_167975, n_167976], **kwargs_167977)
    
    # Testing the type of a for loop iterable (line 296)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 296, 4), range_call_result_167978)
    # Getting the type of the for loop variable (line 296)
    for_loop_var_167979 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 296, 4), range_call_result_167978)
    # Assigning a type to the variable 'i' (line 296)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 296, 4), 'i', for_loop_var_167979)
    # SSA begins for a for statement (line 296)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Tuple (line 297):
    
    # Assigning a Subscript to a Name (line 297):
    
    # Obtaining the type of the subscript
    int_167980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 297, 8), 'int')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 297)
    i_167981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 22), 'i')
    # Getting the type of 'bounds' (line 297)
    bounds_167982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 15), 'bounds')
    # Obtaining the member '__getitem__' of a type (line 297)
    getitem___167983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 15), bounds_167982, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 297)
    subscript_call_result_167984 = invoke(stypy.reporting.localization.Localization(__file__, 297, 15), getitem___167983, i_167981)
    
    # Obtaining the member '__getitem__' of a type (line 297)
    getitem___167985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 8), subscript_call_result_167984, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 297)
    subscript_call_result_167986 = invoke(stypy.reporting.localization.Localization(__file__, 297, 8), getitem___167985, int_167980)
    
    # Assigning a type to the variable 'tuple_var_assignment_167640' (line 297)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 8), 'tuple_var_assignment_167640', subscript_call_result_167986)
    
    # Assigning a Subscript to a Name (line 297):
    
    # Obtaining the type of the subscript
    int_167987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 297, 8), 'int')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 297)
    i_167988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 22), 'i')
    # Getting the type of 'bounds' (line 297)
    bounds_167989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 15), 'bounds')
    # Obtaining the member '__getitem__' of a type (line 297)
    getitem___167990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 15), bounds_167989, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 297)
    subscript_call_result_167991 = invoke(stypy.reporting.localization.Localization(__file__, 297, 15), getitem___167990, i_167988)
    
    # Obtaining the member '__getitem__' of a type (line 297)
    getitem___167992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 8), subscript_call_result_167991, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 297)
    subscript_call_result_167993 = invoke(stypy.reporting.localization.Localization(__file__, 297, 8), getitem___167992, int_167987)
    
    # Assigning a type to the variable 'tuple_var_assignment_167641' (line 297)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 8), 'tuple_var_assignment_167641', subscript_call_result_167993)
    
    # Assigning a Name to a Name (line 297):
    # Getting the type of 'tuple_var_assignment_167640' (line 297)
    tuple_var_assignment_167640_167994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 8), 'tuple_var_assignment_167640')
    # Assigning a type to the variable 'l' (line 297)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 8), 'l', tuple_var_assignment_167640_167994)
    
    # Assigning a Name to a Name (line 297):
    # Getting the type of 'tuple_var_assignment_167641' (line 297)
    tuple_var_assignment_167641_167995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 8), 'tuple_var_assignment_167641')
    # Assigning a type to the variable 'u' (line 297)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 11), 'u', tuple_var_assignment_167641_167995)
    
    # Type idiom detected: calculating its left and rigth part (line 298)
    # Getting the type of 'l' (line 298)
    l_167996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 8), 'l')
    # Getting the type of 'None' (line 298)
    None_167997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 20), 'None')
    
    (may_be_167998, more_types_in_union_167999) = may_not_be_none(l_167996, None_167997)

    if may_be_167998:

        if more_types_in_union_167999:
            # Runtime conditional SSA (line 298)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Subscript (line 299):
        
        # Assigning a Name to a Subscript (line 299):
        # Getting the type of 'l' (line 299)
        l_168000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 25), 'l')
        # Getting the type of 'low_bnd' (line 299)
        low_bnd_168001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 12), 'low_bnd')
        # Getting the type of 'i' (line 299)
        i_168002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 20), 'i')
        # Storing an element on a container (line 299)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 299, 12), low_bnd_168001, (i_168002, l_168000))
        
        # Assigning a Num to a Name (line 300):
        
        # Assigning a Num to a Name (line 300):
        int_168003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 300, 16), 'int')
        # Assigning a type to the variable 'l' (line 300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 300, 12), 'l', int_168003)

        if more_types_in_union_167999:
            # SSA join for if statement (line 298)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 301)
    # Getting the type of 'u' (line 301)
    u_168004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 8), 'u')
    # Getting the type of 'None' (line 301)
    None_168005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 20), 'None')
    
    (may_be_168006, more_types_in_union_168007) = may_not_be_none(u_168004, None_168005)

    if may_be_168006:

        if more_types_in_union_168007:
            # Runtime conditional SSA (line 301)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Subscript (line 302):
        
        # Assigning a Name to a Subscript (line 302):
        # Getting the type of 'u' (line 302)
        u_168008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 27), 'u')
        # Getting the type of 'upper_bnd' (line 302)
        upper_bnd_168009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 12), 'upper_bnd')
        # Getting the type of 'i' (line 302)
        i_168010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 22), 'i')
        # Storing an element on a container (line 302)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 302, 12), upper_bnd_168009, (i_168010, u_168008))
        
        # Assigning a Num to a Name (line 303):
        
        # Assigning a Num to a Name (line 303):
        int_168011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 303, 16), 'int')
        # Assigning a type to the variable 'u' (line 303)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 303, 12), 'u', int_168011)

        if more_types_in_union_168007:
            # SSA join for if statement (line 301)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Subscript to a Subscript (line 304):
    
    # Assigning a Subscript to a Subscript (line 304):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 304)
    tuple_168012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 304, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 304)
    # Adding element type (line 304)
    # Getting the type of 'l' (line 304)
    l_168013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 28), 'l')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 304, 28), tuple_168012, l_168013)
    # Adding element type (line 304)
    # Getting the type of 'u' (line 304)
    u_168014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 31), 'u')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 304, 28), tuple_168012, u_168014)
    
    # Getting the type of 'bounds_map' (line 304)
    bounds_map_168015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 17), 'bounds_map')
    # Obtaining the member '__getitem__' of a type (line 304)
    getitem___168016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 304, 17), bounds_map_168015, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 304)
    subscript_call_result_168017 = invoke(stypy.reporting.localization.Localization(__file__, 304, 17), getitem___168016, tuple_168012)
    
    # Getting the type of 'nbd' (line 304)
    nbd_168018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 8), 'nbd')
    # Getting the type of 'i' (line 304)
    i_168019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 12), 'i')
    # Storing an element on a container (line 304)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 304, 8), nbd_168018, (i_168019, subscript_call_result_168017))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Getting the type of 'maxls' (line 306)
    maxls_168020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 11), 'maxls')
    int_168021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 306, 19), 'int')
    # Applying the binary operator '>' (line 306)
    result_gt_168022 = python_operator(stypy.reporting.localization.Localization(__file__, 306, 11), '>', maxls_168020, int_168021)
    
    # Applying the 'not' unary operator (line 306)
    result_not__168023 = python_operator(stypy.reporting.localization.Localization(__file__, 306, 7), 'not', result_gt_168022)
    
    # Testing the type of an if condition (line 306)
    if_condition_168024 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 306, 4), result_not__168023)
    # Assigning a type to the variable 'if_condition_168024' (line 306)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 306, 4), 'if_condition_168024', if_condition_168024)
    # SSA begins for if statement (line 306)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 307)
    # Processing the call arguments (line 307)
    str_168026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 307, 25), 'str', 'maxls must be positive.')
    # Processing the call keyword arguments (line 307)
    kwargs_168027 = {}
    # Getting the type of 'ValueError' (line 307)
    ValueError_168025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 307)
    ValueError_call_result_168028 = invoke(stypy.reporting.localization.Localization(__file__, 307, 14), ValueError_168025, *[str_168026], **kwargs_168027)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 307, 8), ValueError_call_result_168028, 'raise parameter', BaseException)
    # SSA join for if statement (line 306)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 309):
    
    # Assigning a Call to a Name (line 309):
    
    # Call to array(...): (line 309)
    # Processing the call arguments (line 309)
    # Getting the type of 'x0' (line 309)
    x0_168030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 14), 'x0', False)
    # Getting the type of 'float64' (line 309)
    float64_168031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 18), 'float64', False)
    # Processing the call keyword arguments (line 309)
    kwargs_168032 = {}
    # Getting the type of 'array' (line 309)
    array_168029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 8), 'array', False)
    # Calling array(args, kwargs) (line 309)
    array_call_result_168033 = invoke(stypy.reporting.localization.Localization(__file__, 309, 8), array_168029, *[x0_168030, float64_168031], **kwargs_168032)
    
    # Assigning a type to the variable 'x' (line 309)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 309, 4), 'x', array_call_result_168033)
    
    # Assigning a Call to a Name (line 310):
    
    # Assigning a Call to a Name (line 310):
    
    # Call to array(...): (line 310)
    # Processing the call arguments (line 310)
    float_168035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 310, 14), 'float')
    # Getting the type of 'float64' (line 310)
    float64_168036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 19), 'float64', False)
    # Processing the call keyword arguments (line 310)
    kwargs_168037 = {}
    # Getting the type of 'array' (line 310)
    array_168034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 8), 'array', False)
    # Calling array(args, kwargs) (line 310)
    array_call_result_168038 = invoke(stypy.reporting.localization.Localization(__file__, 310, 8), array_168034, *[float_168035, float64_168036], **kwargs_168037)
    
    # Assigning a type to the variable 'f' (line 310)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 310, 4), 'f', array_call_result_168038)
    
    # Assigning a Call to a Name (line 311):
    
    # Assigning a Call to a Name (line 311):
    
    # Call to zeros(...): (line 311)
    # Processing the call arguments (line 311)
    
    # Obtaining an instance of the builtin type 'tuple' (line 311)
    tuple_168040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 311, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 311)
    # Adding element type (line 311)
    # Getting the type of 'n' (line 311)
    n_168041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 15), 'n', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 311, 15), tuple_168040, n_168041)
    
    # Getting the type of 'float64' (line 311)
    float64_168042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 20), 'float64', False)
    # Processing the call keyword arguments (line 311)
    kwargs_168043 = {}
    # Getting the type of 'zeros' (line 311)
    zeros_168039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 8), 'zeros', False)
    # Calling zeros(args, kwargs) (line 311)
    zeros_call_result_168044 = invoke(stypy.reporting.localization.Localization(__file__, 311, 8), zeros_168039, *[tuple_168040, float64_168042], **kwargs_168043)
    
    # Assigning a type to the variable 'g' (line 311)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 311, 4), 'g', zeros_call_result_168044)
    
    # Assigning a Call to a Name (line 312):
    
    # Assigning a Call to a Name (line 312):
    
    # Call to zeros(...): (line 312)
    # Processing the call arguments (line 312)
    int_168046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 312, 15), 'int')
    # Getting the type of 'm' (line 312)
    m_168047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 17), 'm', False)
    # Applying the binary operator '*' (line 312)
    result_mul_168048 = python_operator(stypy.reporting.localization.Localization(__file__, 312, 15), '*', int_168046, m_168047)
    
    # Getting the type of 'n' (line 312)
    n_168049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 19), 'n', False)
    # Applying the binary operator '*' (line 312)
    result_mul_168050 = python_operator(stypy.reporting.localization.Localization(__file__, 312, 18), '*', result_mul_168048, n_168049)
    
    int_168051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 312, 23), 'int')
    # Getting the type of 'n' (line 312)
    n_168052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 25), 'n', False)
    # Applying the binary operator '*' (line 312)
    result_mul_168053 = python_operator(stypy.reporting.localization.Localization(__file__, 312, 23), '*', int_168051, n_168052)
    
    # Applying the binary operator '+' (line 312)
    result_add_168054 = python_operator(stypy.reporting.localization.Localization(__file__, 312, 15), '+', result_mul_168050, result_mul_168053)
    
    int_168055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 312, 29), 'int')
    # Getting the type of 'm' (line 312)
    m_168056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 32), 'm', False)
    # Applying the binary operator '*' (line 312)
    result_mul_168057 = python_operator(stypy.reporting.localization.Localization(__file__, 312, 29), '*', int_168055, m_168056)
    
    # Getting the type of 'm' (line 312)
    m_168058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 34), 'm', False)
    # Applying the binary operator '*' (line 312)
    result_mul_168059 = python_operator(stypy.reporting.localization.Localization(__file__, 312, 33), '*', result_mul_168057, m_168058)
    
    # Applying the binary operator '+' (line 312)
    result_add_168060 = python_operator(stypy.reporting.localization.Localization(__file__, 312, 27), '+', result_add_168054, result_mul_168059)
    
    int_168061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 312, 38), 'int')
    # Getting the type of 'm' (line 312)
    m_168062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 40), 'm', False)
    # Applying the binary operator '*' (line 312)
    result_mul_168063 = python_operator(stypy.reporting.localization.Localization(__file__, 312, 38), '*', int_168061, m_168062)
    
    # Applying the binary operator '+' (line 312)
    result_add_168064 = python_operator(stypy.reporting.localization.Localization(__file__, 312, 36), '+', result_add_168060, result_mul_168063)
    
    # Getting the type of 'float64' (line 312)
    float64_168065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 43), 'float64', False)
    # Processing the call keyword arguments (line 312)
    kwargs_168066 = {}
    # Getting the type of 'zeros' (line 312)
    zeros_168045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 9), 'zeros', False)
    # Calling zeros(args, kwargs) (line 312)
    zeros_call_result_168067 = invoke(stypy.reporting.localization.Localization(__file__, 312, 9), zeros_168045, *[result_add_168064, float64_168065], **kwargs_168066)
    
    # Assigning a type to the variable 'wa' (line 312)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 312, 4), 'wa', zeros_call_result_168067)
    
    # Assigning a Call to a Name (line 313):
    
    # Assigning a Call to a Name (line 313):
    
    # Call to zeros(...): (line 313)
    # Processing the call arguments (line 313)
    int_168069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 313, 16), 'int')
    # Getting the type of 'n' (line 313)
    n_168070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 18), 'n', False)
    # Applying the binary operator '*' (line 313)
    result_mul_168071 = python_operator(stypy.reporting.localization.Localization(__file__, 313, 16), '*', int_168069, n_168070)
    
    # Getting the type of 'int32' (line 313)
    int32_168072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 21), 'int32', False)
    # Processing the call keyword arguments (line 313)
    kwargs_168073 = {}
    # Getting the type of 'zeros' (line 313)
    zeros_168068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 10), 'zeros', False)
    # Calling zeros(args, kwargs) (line 313)
    zeros_call_result_168074 = invoke(stypy.reporting.localization.Localization(__file__, 313, 10), zeros_168068, *[result_mul_168071, int32_168072], **kwargs_168073)
    
    # Assigning a type to the variable 'iwa' (line 313)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 313, 4), 'iwa', zeros_call_result_168074)
    
    # Assigning a Call to a Name (line 314):
    
    # Assigning a Call to a Name (line 314):
    
    # Call to zeros(...): (line 314)
    # Processing the call arguments (line 314)
    int_168076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 314, 17), 'int')
    str_168077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 314, 20), 'str', 'S60')
    # Processing the call keyword arguments (line 314)
    kwargs_168078 = {}
    # Getting the type of 'zeros' (line 314)
    zeros_168075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 11), 'zeros', False)
    # Calling zeros(args, kwargs) (line 314)
    zeros_call_result_168079 = invoke(stypy.reporting.localization.Localization(__file__, 314, 11), zeros_168075, *[int_168076, str_168077], **kwargs_168078)
    
    # Assigning a type to the variable 'task' (line 314)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 4), 'task', zeros_call_result_168079)
    
    # Assigning a Call to a Name (line 315):
    
    # Assigning a Call to a Name (line 315):
    
    # Call to zeros(...): (line 315)
    # Processing the call arguments (line 315)
    int_168081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 315, 18), 'int')
    str_168082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 315, 21), 'str', 'S60')
    # Processing the call keyword arguments (line 315)
    kwargs_168083 = {}
    # Getting the type of 'zeros' (line 315)
    zeros_168080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 12), 'zeros', False)
    # Calling zeros(args, kwargs) (line 315)
    zeros_call_result_168084 = invoke(stypy.reporting.localization.Localization(__file__, 315, 12), zeros_168080, *[int_168081, str_168082], **kwargs_168083)
    
    # Assigning a type to the variable 'csave' (line 315)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 315, 4), 'csave', zeros_call_result_168084)
    
    # Assigning a Call to a Name (line 316):
    
    # Assigning a Call to a Name (line 316):
    
    # Call to zeros(...): (line 316)
    # Processing the call arguments (line 316)
    int_168086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 316, 18), 'int')
    # Getting the type of 'int32' (line 316)
    int32_168087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 21), 'int32', False)
    # Processing the call keyword arguments (line 316)
    kwargs_168088 = {}
    # Getting the type of 'zeros' (line 316)
    zeros_168085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 12), 'zeros', False)
    # Calling zeros(args, kwargs) (line 316)
    zeros_call_result_168089 = invoke(stypy.reporting.localization.Localization(__file__, 316, 12), zeros_168085, *[int_168086, int32_168087], **kwargs_168088)
    
    # Assigning a type to the variable 'lsave' (line 316)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 316, 4), 'lsave', zeros_call_result_168089)
    
    # Assigning a Call to a Name (line 317):
    
    # Assigning a Call to a Name (line 317):
    
    # Call to zeros(...): (line 317)
    # Processing the call arguments (line 317)
    int_168091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 18), 'int')
    # Getting the type of 'int32' (line 317)
    int32_168092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 22), 'int32', False)
    # Processing the call keyword arguments (line 317)
    kwargs_168093 = {}
    # Getting the type of 'zeros' (line 317)
    zeros_168090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 12), 'zeros', False)
    # Calling zeros(args, kwargs) (line 317)
    zeros_call_result_168094 = invoke(stypy.reporting.localization.Localization(__file__, 317, 12), zeros_168090, *[int_168091, int32_168092], **kwargs_168093)
    
    # Assigning a type to the variable 'isave' (line 317)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 317, 4), 'isave', zeros_call_result_168094)
    
    # Assigning a Call to a Name (line 318):
    
    # Assigning a Call to a Name (line 318):
    
    # Call to zeros(...): (line 318)
    # Processing the call arguments (line 318)
    int_168096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 18), 'int')
    # Getting the type of 'float64' (line 318)
    float64_168097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 22), 'float64', False)
    # Processing the call keyword arguments (line 318)
    kwargs_168098 = {}
    # Getting the type of 'zeros' (line 318)
    zeros_168095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 12), 'zeros', False)
    # Calling zeros(args, kwargs) (line 318)
    zeros_call_result_168099 = invoke(stypy.reporting.localization.Localization(__file__, 318, 12), zeros_168095, *[int_168096, float64_168097], **kwargs_168098)
    
    # Assigning a type to the variable 'dsave' (line 318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 318, 4), 'dsave', zeros_call_result_168099)
    
    # Assigning a Str to a Subscript (line 320):
    
    # Assigning a Str to a Subscript (line 320):
    str_168100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 320, 14), 'str', 'START')
    # Getting the type of 'task' (line 320)
    task_168101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 4), 'task')
    slice_168102 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 320, 4), None, None, None)
    # Storing an element on a container (line 320)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 320, 4), task_168101, (slice_168102, str_168100))
    
    # Assigning a Num to a Name (line 322):
    
    # Assigning a Num to a Name (line 322):
    int_168103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 322, 19), 'int')
    # Assigning a type to the variable 'n_iterations' (line 322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 322, 4), 'n_iterations', int_168103)
    
    int_168104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 324, 10), 'int')
    # Testing the type of an if condition (line 324)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 324, 4), int_168104)
    # SSA begins for while statement (line 324)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Call to setulb(...): (line 326)
    # Processing the call arguments (line 326)
    # Getting the type of 'm' (line 326)
    m_168107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 23), 'm', False)
    # Getting the type of 'x' (line 326)
    x_168108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 26), 'x', False)
    # Getting the type of 'low_bnd' (line 326)
    low_bnd_168109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 29), 'low_bnd', False)
    # Getting the type of 'upper_bnd' (line 326)
    upper_bnd_168110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 38), 'upper_bnd', False)
    # Getting the type of 'nbd' (line 326)
    nbd_168111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 49), 'nbd', False)
    # Getting the type of 'f' (line 326)
    f_168112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 54), 'f', False)
    # Getting the type of 'g' (line 326)
    g_168113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 57), 'g', False)
    # Getting the type of 'factr' (line 326)
    factr_168114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 60), 'factr', False)
    # Getting the type of 'pgtol' (line 327)
    pgtol_168115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 23), 'pgtol', False)
    # Getting the type of 'wa' (line 327)
    wa_168116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 30), 'wa', False)
    # Getting the type of 'iwa' (line 327)
    iwa_168117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 34), 'iwa', False)
    # Getting the type of 'task' (line 327)
    task_168118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 39), 'task', False)
    # Getting the type of 'iprint' (line 327)
    iprint_168119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 45), 'iprint', False)
    # Getting the type of 'csave' (line 327)
    csave_168120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 53), 'csave', False)
    # Getting the type of 'lsave' (line 327)
    lsave_168121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 60), 'lsave', False)
    # Getting the type of 'isave' (line 328)
    isave_168122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 23), 'isave', False)
    # Getting the type of 'dsave' (line 328)
    dsave_168123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 30), 'dsave', False)
    # Getting the type of 'maxls' (line 328)
    maxls_168124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 37), 'maxls', False)
    # Processing the call keyword arguments (line 326)
    kwargs_168125 = {}
    # Getting the type of '_lbfgsb' (line 326)
    _lbfgsb_168105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 8), '_lbfgsb', False)
    # Obtaining the member 'setulb' of a type (line 326)
    setulb_168106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 326, 8), _lbfgsb_168105, 'setulb')
    # Calling setulb(args, kwargs) (line 326)
    setulb_call_result_168126 = invoke(stypy.reporting.localization.Localization(__file__, 326, 8), setulb_168106, *[m_168107, x_168108, low_bnd_168109, upper_bnd_168110, nbd_168111, f_168112, g_168113, factr_168114, pgtol_168115, wa_168116, iwa_168117, task_168118, iprint_168119, csave_168120, lsave_168121, isave_168122, dsave_168123, maxls_168124], **kwargs_168125)
    
    
    # Assigning a Call to a Name (line 329):
    
    # Assigning a Call to a Name (line 329):
    
    # Call to tostring(...): (line 329)
    # Processing the call keyword arguments (line 329)
    kwargs_168129 = {}
    # Getting the type of 'task' (line 329)
    task_168127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 19), 'task', False)
    # Obtaining the member 'tostring' of a type (line 329)
    tostring_168128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 329, 19), task_168127, 'tostring')
    # Calling tostring(args, kwargs) (line 329)
    tostring_call_result_168130 = invoke(stypy.reporting.localization.Localization(__file__, 329, 19), tostring_168128, *[], **kwargs_168129)
    
    # Assigning a type to the variable 'task_str' (line 329)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 329, 8), 'task_str', tostring_call_result_168130)
    
    
    # Call to startswith(...): (line 330)
    # Processing the call arguments (line 330)
    str_168133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 330, 31), 'str', 'FG')
    # Processing the call keyword arguments (line 330)
    kwargs_168134 = {}
    # Getting the type of 'task_str' (line 330)
    task_str_168131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 11), 'task_str', False)
    # Obtaining the member 'startswith' of a type (line 330)
    startswith_168132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 330, 11), task_str_168131, 'startswith')
    # Calling startswith(args, kwargs) (line 330)
    startswith_call_result_168135 = invoke(stypy.reporting.localization.Localization(__file__, 330, 11), startswith_168132, *[str_168133], **kwargs_168134)
    
    # Testing the type of an if condition (line 330)
    if_condition_168136 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 330, 8), startswith_call_result_168135)
    # Assigning a type to the variable 'if_condition_168136' (line 330)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 330, 8), 'if_condition_168136', if_condition_168136)
    # SSA begins for if statement (line 330)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 335):
    
    # Assigning a Subscript to a Name (line 335):
    
    # Obtaining the type of the subscript
    int_168137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 335, 12), 'int')
    
    # Call to func_and_grad(...): (line 335)
    # Processing the call arguments (line 335)
    # Getting the type of 'x' (line 335)
    x_168139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 33), 'x', False)
    # Processing the call keyword arguments (line 335)
    kwargs_168140 = {}
    # Getting the type of 'func_and_grad' (line 335)
    func_and_grad_168138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 19), 'func_and_grad', False)
    # Calling func_and_grad(args, kwargs) (line 335)
    func_and_grad_call_result_168141 = invoke(stypy.reporting.localization.Localization(__file__, 335, 19), func_and_grad_168138, *[x_168139], **kwargs_168140)
    
    # Obtaining the member '__getitem__' of a type (line 335)
    getitem___168142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 335, 12), func_and_grad_call_result_168141, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 335)
    subscript_call_result_168143 = invoke(stypy.reporting.localization.Localization(__file__, 335, 12), getitem___168142, int_168137)
    
    # Assigning a type to the variable 'tuple_var_assignment_167642' (line 335)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 335, 12), 'tuple_var_assignment_167642', subscript_call_result_168143)
    
    # Assigning a Subscript to a Name (line 335):
    
    # Obtaining the type of the subscript
    int_168144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 335, 12), 'int')
    
    # Call to func_and_grad(...): (line 335)
    # Processing the call arguments (line 335)
    # Getting the type of 'x' (line 335)
    x_168146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 33), 'x', False)
    # Processing the call keyword arguments (line 335)
    kwargs_168147 = {}
    # Getting the type of 'func_and_grad' (line 335)
    func_and_grad_168145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 19), 'func_and_grad', False)
    # Calling func_and_grad(args, kwargs) (line 335)
    func_and_grad_call_result_168148 = invoke(stypy.reporting.localization.Localization(__file__, 335, 19), func_and_grad_168145, *[x_168146], **kwargs_168147)
    
    # Obtaining the member '__getitem__' of a type (line 335)
    getitem___168149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 335, 12), func_and_grad_call_result_168148, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 335)
    subscript_call_result_168150 = invoke(stypy.reporting.localization.Localization(__file__, 335, 12), getitem___168149, int_168144)
    
    # Assigning a type to the variable 'tuple_var_assignment_167643' (line 335)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 335, 12), 'tuple_var_assignment_167643', subscript_call_result_168150)
    
    # Assigning a Name to a Name (line 335):
    # Getting the type of 'tuple_var_assignment_167642' (line 335)
    tuple_var_assignment_167642_168151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 12), 'tuple_var_assignment_167642')
    # Assigning a type to the variable 'f' (line 335)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 335, 12), 'f', tuple_var_assignment_167642_168151)
    
    # Assigning a Name to a Name (line 335):
    # Getting the type of 'tuple_var_assignment_167643' (line 335)
    tuple_var_assignment_167643_168152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 12), 'tuple_var_assignment_167643')
    # Assigning a type to the variable 'g' (line 335)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 335, 15), 'g', tuple_var_assignment_167643_168152)
    # SSA branch for the else part of an if statement (line 330)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to startswith(...): (line 336)
    # Processing the call arguments (line 336)
    str_168155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 336, 33), 'str', 'NEW_X')
    # Processing the call keyword arguments (line 336)
    kwargs_168156 = {}
    # Getting the type of 'task_str' (line 336)
    task_str_168153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 13), 'task_str', False)
    # Obtaining the member 'startswith' of a type (line 336)
    startswith_168154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 336, 13), task_str_168153, 'startswith')
    # Calling startswith(args, kwargs) (line 336)
    startswith_call_result_168157 = invoke(stypy.reporting.localization.Localization(__file__, 336, 13), startswith_168154, *[str_168155], **kwargs_168156)
    
    # Testing the type of an if condition (line 336)
    if_condition_168158 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 336, 13), startswith_call_result_168157)
    # Assigning a type to the variable 'if_condition_168158' (line 336)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 336, 13), 'if_condition_168158', if_condition_168158)
    # SSA begins for if statement (line 336)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'n_iterations' (line 338)
    n_iterations_168159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 15), 'n_iterations')
    # Getting the type of 'maxiter' (line 338)
    maxiter_168160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 30), 'maxiter')
    # Applying the binary operator '>' (line 338)
    result_gt_168161 = python_operator(stypy.reporting.localization.Localization(__file__, 338, 15), '>', n_iterations_168159, maxiter_168160)
    
    # Testing the type of an if condition (line 338)
    if_condition_168162 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 338, 12), result_gt_168161)
    # Assigning a type to the variable 'if_condition_168162' (line 338)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 338, 12), 'if_condition_168162', if_condition_168162)
    # SSA begins for if statement (line 338)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Subscript (line 339):
    
    # Assigning a Str to a Subscript (line 339):
    str_168163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 339, 26), 'str', 'STOP: TOTAL NO. of ITERATIONS EXCEEDS LIMIT')
    # Getting the type of 'task' (line 339)
    task_168164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 16), 'task')
    slice_168165 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 339, 16), None, None, None)
    # Storing an element on a container (line 339)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 339, 16), task_168164, (slice_168165, str_168163))
    # SSA branch for the else part of an if statement (line 338)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Obtaining the type of the subscript
    int_168166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 340, 34), 'int')
    # Getting the type of 'n_function_evals' (line 340)
    n_function_evals_168167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 17), 'n_function_evals')
    # Obtaining the member '__getitem__' of a type (line 340)
    getitem___168168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 340, 17), n_function_evals_168167, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 340)
    subscript_call_result_168169 = invoke(stypy.reporting.localization.Localization(__file__, 340, 17), getitem___168168, int_168166)
    
    # Getting the type of 'maxfun' (line 340)
    maxfun_168170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 39), 'maxfun')
    # Applying the binary operator '>' (line 340)
    result_gt_168171 = python_operator(stypy.reporting.localization.Localization(__file__, 340, 17), '>', subscript_call_result_168169, maxfun_168170)
    
    # Testing the type of an if condition (line 340)
    if_condition_168172 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 340, 17), result_gt_168171)
    # Assigning a type to the variable 'if_condition_168172' (line 340)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 340, 17), 'if_condition_168172', if_condition_168172)
    # SSA begins for if statement (line 340)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Subscript (line 341):
    
    # Assigning a Str to a Subscript (line 341):
    str_168173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 341, 27), 'str', 'STOP: TOTAL NO. of f AND g EVALUATIONS EXCEEDS LIMIT')
    # Getting the type of 'task' (line 341)
    task_168174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 16), 'task')
    slice_168175 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 341, 16), None, None, None)
    # Storing an element on a container (line 341)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 341, 16), task_168174, (slice_168175, str_168173))
    # SSA branch for the else part of an if statement (line 340)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'n_iterations' (line 344)
    n_iterations_168176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 16), 'n_iterations')
    int_168177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 344, 32), 'int')
    # Applying the binary operator '+=' (line 344)
    result_iadd_168178 = python_operator(stypy.reporting.localization.Localization(__file__, 344, 16), '+=', n_iterations_168176, int_168177)
    # Assigning a type to the variable 'n_iterations' (line 344)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 344, 16), 'n_iterations', result_iadd_168178)
    
    
    # Type idiom detected: calculating its left and rigth part (line 345)
    # Getting the type of 'callback' (line 345)
    callback_168179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 16), 'callback')
    # Getting the type of 'None' (line 345)
    None_168180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 35), 'None')
    
    (may_be_168181, more_types_in_union_168182) = may_not_be_none(callback_168179, None_168180)

    if may_be_168181:

        if more_types_in_union_168182:
            # Runtime conditional SSA (line 345)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to callback(...): (line 346)
        # Processing the call arguments (line 346)
        # Getting the type of 'x' (line 346)
        x_168184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 29), 'x', False)
        # Processing the call keyword arguments (line 346)
        kwargs_168185 = {}
        # Getting the type of 'callback' (line 346)
        callback_168183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 20), 'callback', False)
        # Calling callback(args, kwargs) (line 346)
        callback_call_result_168186 = invoke(stypy.reporting.localization.Localization(__file__, 346, 20), callback_168183, *[x_168184], **kwargs_168185)
        

        if more_types_in_union_168182:
            # SSA join for if statement (line 345)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 340)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 338)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 336)
    module_type_store.open_ssa_branch('else')
    # SSA join for if statement (line 336)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 330)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for while statement (line 324)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 350):
    
    # Assigning a Call to a Name (line 350):
    
    # Call to strip(...): (line 350)
    # Processing the call keyword arguments (line 350)
    kwargs_168196 = {}
    
    # Call to strip(...): (line 350)
    # Processing the call arguments (line 350)
    str_168192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 350, 37), 'str', '\x00')
    # Processing the call keyword arguments (line 350)
    kwargs_168193 = {}
    
    # Call to tostring(...): (line 350)
    # Processing the call keyword arguments (line 350)
    kwargs_168189 = {}
    # Getting the type of 'task' (line 350)
    task_168187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 15), 'task', False)
    # Obtaining the member 'tostring' of a type (line 350)
    tostring_168188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 350, 15), task_168187, 'tostring')
    # Calling tostring(args, kwargs) (line 350)
    tostring_call_result_168190 = invoke(stypy.reporting.localization.Localization(__file__, 350, 15), tostring_168188, *[], **kwargs_168189)
    
    # Obtaining the member 'strip' of a type (line 350)
    strip_168191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 350, 15), tostring_call_result_168190, 'strip')
    # Calling strip(args, kwargs) (line 350)
    strip_call_result_168194 = invoke(stypy.reporting.localization.Localization(__file__, 350, 15), strip_168191, *[str_168192], **kwargs_168193)
    
    # Obtaining the member 'strip' of a type (line 350)
    strip_168195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 350, 15), strip_call_result_168194, 'strip')
    # Calling strip(args, kwargs) (line 350)
    strip_call_result_168197 = invoke(stypy.reporting.localization.Localization(__file__, 350, 15), strip_168195, *[], **kwargs_168196)
    
    # Assigning a type to the variable 'task_str' (line 350)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 350, 4), 'task_str', strip_call_result_168197)
    
    
    # Call to startswith(...): (line 351)
    # Processing the call arguments (line 351)
    str_168200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 351, 27), 'str', 'CONV')
    # Processing the call keyword arguments (line 351)
    kwargs_168201 = {}
    # Getting the type of 'task_str' (line 351)
    task_str_168198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 7), 'task_str', False)
    # Obtaining the member 'startswith' of a type (line 351)
    startswith_168199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 351, 7), task_str_168198, 'startswith')
    # Calling startswith(args, kwargs) (line 351)
    startswith_call_result_168202 = invoke(stypy.reporting.localization.Localization(__file__, 351, 7), startswith_168199, *[str_168200], **kwargs_168201)
    
    # Testing the type of an if condition (line 351)
    if_condition_168203 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 351, 4), startswith_call_result_168202)
    # Assigning a type to the variable 'if_condition_168203' (line 351)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 351, 4), 'if_condition_168203', if_condition_168203)
    # SSA begins for if statement (line 351)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 352):
    
    # Assigning a Num to a Name (line 352):
    int_168204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 19), 'int')
    # Assigning a type to the variable 'warnflag' (line 352)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'warnflag', int_168204)
    # SSA branch for the else part of an if statement (line 351)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Obtaining the type of the subscript
    int_168205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 353, 26), 'int')
    # Getting the type of 'n_function_evals' (line 353)
    n_function_evals_168206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 9), 'n_function_evals')
    # Obtaining the member '__getitem__' of a type (line 353)
    getitem___168207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 353, 9), n_function_evals_168206, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 353)
    subscript_call_result_168208 = invoke(stypy.reporting.localization.Localization(__file__, 353, 9), getitem___168207, int_168205)
    
    # Getting the type of 'maxfun' (line 353)
    maxfun_168209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 31), 'maxfun')
    # Applying the binary operator '>' (line 353)
    result_gt_168210 = python_operator(stypy.reporting.localization.Localization(__file__, 353, 9), '>', subscript_call_result_168208, maxfun_168209)
    
    # Testing the type of an if condition (line 353)
    if_condition_168211 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 353, 9), result_gt_168210)
    # Assigning a type to the variable 'if_condition_168211' (line 353)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 353, 9), 'if_condition_168211', if_condition_168211)
    # SSA begins for if statement (line 353)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 354):
    
    # Assigning a Num to a Name (line 354):
    int_168212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 354, 19), 'int')
    # Assigning a type to the variable 'warnflag' (line 354)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 354, 8), 'warnflag', int_168212)
    # SSA branch for the else part of an if statement (line 353)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'n_iterations' (line 355)
    n_iterations_168213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 9), 'n_iterations')
    # Getting the type of 'maxiter' (line 355)
    maxiter_168214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 24), 'maxiter')
    # Applying the binary operator '>' (line 355)
    result_gt_168215 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 9), '>', n_iterations_168213, maxiter_168214)
    
    # Testing the type of an if condition (line 355)
    if_condition_168216 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 355, 9), result_gt_168215)
    # Assigning a type to the variable 'if_condition_168216' (line 355)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 355, 9), 'if_condition_168216', if_condition_168216)
    # SSA begins for if statement (line 355)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 356):
    
    # Assigning a Num to a Name (line 356):
    int_168217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 356, 19), 'int')
    # Assigning a type to the variable 'warnflag' (line 356)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 8), 'warnflag', int_168217)
    # SSA branch for the else part of an if statement (line 355)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Name (line 358):
    
    # Assigning a Num to a Name (line 358):
    int_168218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 358, 19), 'int')
    # Assigning a type to the variable 'warnflag' (line 358)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 358, 8), 'warnflag', int_168218)
    # SSA join for if statement (line 355)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 353)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 351)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 362):
    
    # Assigning a Call to a Name (line 362):
    
    # Call to reshape(...): (line 362)
    # Processing the call arguments (line 362)
    # Getting the type of 'm' (line 362)
    m_168228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 27), 'm', False)
    # Getting the type of 'n' (line 362)
    n_168229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 30), 'n', False)
    # Processing the call keyword arguments (line 362)
    kwargs_168230 = {}
    
    # Obtaining the type of the subscript
    int_168219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 362, 11), 'int')
    # Getting the type of 'm' (line 362)
    m_168220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 14), 'm', False)
    # Getting the type of 'n' (line 362)
    n_168221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 16), 'n', False)
    # Applying the binary operator '*' (line 362)
    result_mul_168222 = python_operator(stypy.reporting.localization.Localization(__file__, 362, 14), '*', m_168220, n_168221)
    
    slice_168223 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 362, 8), int_168219, result_mul_168222, None)
    # Getting the type of 'wa' (line 362)
    wa_168224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 8), 'wa', False)
    # Obtaining the member '__getitem__' of a type (line 362)
    getitem___168225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 362, 8), wa_168224, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 362)
    subscript_call_result_168226 = invoke(stypy.reporting.localization.Localization(__file__, 362, 8), getitem___168225, slice_168223)
    
    # Obtaining the member 'reshape' of a type (line 362)
    reshape_168227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 362, 8), subscript_call_result_168226, 'reshape')
    # Calling reshape(args, kwargs) (line 362)
    reshape_call_result_168231 = invoke(stypy.reporting.localization.Localization(__file__, 362, 8), reshape_168227, *[m_168228, n_168229], **kwargs_168230)
    
    # Assigning a type to the variable 's' (line 362)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 362, 4), 's', reshape_call_result_168231)
    
    # Assigning a Call to a Name (line 363):
    
    # Assigning a Call to a Name (line 363):
    
    # Call to reshape(...): (line 363)
    # Processing the call arguments (line 363)
    # Getting the type of 'm' (line 363)
    m_168245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 31), 'm', False)
    # Getting the type of 'n' (line 363)
    n_168246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 34), 'n', False)
    # Processing the call keyword arguments (line 363)
    kwargs_168247 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'm' (line 363)
    m_168232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 11), 'm', False)
    # Getting the type of 'n' (line 363)
    n_168233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 13), 'n', False)
    # Applying the binary operator '*' (line 363)
    result_mul_168234 = python_operator(stypy.reporting.localization.Localization(__file__, 363, 11), '*', m_168232, n_168233)
    
    int_168235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 363, 16), 'int')
    # Getting the type of 'm' (line 363)
    m_168236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 18), 'm', False)
    # Applying the binary operator '*' (line 363)
    result_mul_168237 = python_operator(stypy.reporting.localization.Localization(__file__, 363, 16), '*', int_168235, m_168236)
    
    # Getting the type of 'n' (line 363)
    n_168238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 20), 'n', False)
    # Applying the binary operator '*' (line 363)
    result_mul_168239 = python_operator(stypy.reporting.localization.Localization(__file__, 363, 19), '*', result_mul_168237, n_168238)
    
    slice_168240 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 363, 8), result_mul_168234, result_mul_168239, None)
    # Getting the type of 'wa' (line 363)
    wa_168241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 8), 'wa', False)
    # Obtaining the member '__getitem__' of a type (line 363)
    getitem___168242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 363, 8), wa_168241, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 363)
    subscript_call_result_168243 = invoke(stypy.reporting.localization.Localization(__file__, 363, 8), getitem___168242, slice_168240)
    
    # Obtaining the member 'reshape' of a type (line 363)
    reshape_168244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 363, 8), subscript_call_result_168243, 'reshape')
    # Calling reshape(args, kwargs) (line 363)
    reshape_call_result_168248 = invoke(stypy.reporting.localization.Localization(__file__, 363, 8), reshape_168244, *[m_168245, n_168246], **kwargs_168247)
    
    # Assigning a type to the variable 'y' (line 363)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 363, 4), 'y', reshape_call_result_168248)
    
    # Assigning a Subscript to a Name (line 367):
    
    # Assigning a Subscript to a Name (line 367):
    
    # Obtaining the type of the subscript
    int_168249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 367, 27), 'int')
    # Getting the type of 'isave' (line 367)
    isave_168250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 21), 'isave')
    # Obtaining the member '__getitem__' of a type (line 367)
    getitem___168251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 367, 21), isave_168250, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 367)
    subscript_call_result_168252 = invoke(stypy.reporting.localization.Localization(__file__, 367, 21), getitem___168251, int_168249)
    
    # Assigning a type to the variable 'n_bfgs_updates' (line 367)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 367, 4), 'n_bfgs_updates', subscript_call_result_168252)
    
    # Assigning a Call to a Name (line 369):
    
    # Assigning a Call to a Name (line 369):
    
    # Call to min(...): (line 369)
    # Processing the call arguments (line 369)
    # Getting the type of 'n_bfgs_updates' (line 369)
    n_bfgs_updates_168254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 18), 'n_bfgs_updates', False)
    # Getting the type of 'maxcor' (line 369)
    maxcor_168255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 34), 'maxcor', False)
    # Processing the call keyword arguments (line 369)
    kwargs_168256 = {}
    # Getting the type of 'min' (line 369)
    min_168253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 14), 'min', False)
    # Calling min(args, kwargs) (line 369)
    min_call_result_168257 = invoke(stypy.reporting.localization.Localization(__file__, 369, 14), min_168253, *[n_bfgs_updates_168254, maxcor_168255], **kwargs_168256)
    
    # Assigning a type to the variable 'n_corrs' (line 369)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 369, 4), 'n_corrs', min_call_result_168257)
    
    # Assigning a Call to a Name (line 370):
    
    # Assigning a Call to a Name (line 370):
    
    # Call to LbfgsInvHessProduct(...): (line 370)
    # Processing the call arguments (line 370)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n_corrs' (line 370)
    n_corrs_168259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 38), 'n_corrs', False)
    slice_168260 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 370, 35), None, n_corrs_168259, None)
    # Getting the type of 's' (line 370)
    s_168261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 35), 's', False)
    # Obtaining the member '__getitem__' of a type (line 370)
    getitem___168262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 370, 35), s_168261, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 370)
    subscript_call_result_168263 = invoke(stypy.reporting.localization.Localization(__file__, 370, 35), getitem___168262, slice_168260)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'n_corrs' (line 370)
    n_corrs_168264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 51), 'n_corrs', False)
    slice_168265 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 370, 48), None, n_corrs_168264, None)
    # Getting the type of 'y' (line 370)
    y_168266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 48), 'y', False)
    # Obtaining the member '__getitem__' of a type (line 370)
    getitem___168267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 370, 48), y_168266, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 370)
    subscript_call_result_168268 = invoke(stypy.reporting.localization.Localization(__file__, 370, 48), getitem___168267, slice_168265)
    
    # Processing the call keyword arguments (line 370)
    kwargs_168269 = {}
    # Getting the type of 'LbfgsInvHessProduct' (line 370)
    LbfgsInvHessProduct_168258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 15), 'LbfgsInvHessProduct', False)
    # Calling LbfgsInvHessProduct(args, kwargs) (line 370)
    LbfgsInvHessProduct_call_result_168270 = invoke(stypy.reporting.localization.Localization(__file__, 370, 15), LbfgsInvHessProduct_168258, *[subscript_call_result_168263, subscript_call_result_168268], **kwargs_168269)
    
    # Assigning a type to the variable 'hess_inv' (line 370)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 370, 4), 'hess_inv', LbfgsInvHessProduct_call_result_168270)
    
    # Call to OptimizeResult(...): (line 372)
    # Processing the call keyword arguments (line 372)
    # Getting the type of 'f' (line 372)
    f_168272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 30), 'f', False)
    keyword_168273 = f_168272
    # Getting the type of 'g' (line 372)
    g_168274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 37), 'g', False)
    keyword_168275 = g_168274
    
    # Obtaining the type of the subscript
    int_168276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 372, 62), 'int')
    # Getting the type of 'n_function_evals' (line 372)
    n_function_evals_168277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 45), 'n_function_evals', False)
    # Obtaining the member '__getitem__' of a type (line 372)
    getitem___168278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 372, 45), n_function_evals_168277, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 372)
    subscript_call_result_168279 = invoke(stypy.reporting.localization.Localization(__file__, 372, 45), getitem___168278, int_168276)
    
    keyword_168280 = subscript_call_result_168279
    # Getting the type of 'n_iterations' (line 373)
    n_iterations_168281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 30), 'n_iterations', False)
    keyword_168282 = n_iterations_168281
    # Getting the type of 'warnflag' (line 373)
    warnflag_168283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 51), 'warnflag', False)
    keyword_168284 = warnflag_168283
    # Getting the type of 'task_str' (line 373)
    task_str_168285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 69), 'task_str', False)
    keyword_168286 = task_str_168285
    # Getting the type of 'x' (line 374)
    x_168287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 28), 'x', False)
    keyword_168288 = x_168287
    
    # Getting the type of 'warnflag' (line 374)
    warnflag_168289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 40), 'warnflag', False)
    int_168290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 374, 52), 'int')
    # Applying the binary operator '==' (line 374)
    result_eq_168291 = python_operator(stypy.reporting.localization.Localization(__file__, 374, 40), '==', warnflag_168289, int_168290)
    
    keyword_168292 = result_eq_168291
    # Getting the type of 'hess_inv' (line 374)
    hess_inv_168293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 65), 'hess_inv', False)
    keyword_168294 = hess_inv_168293
    kwargs_168295 = {'status': keyword_168284, 'success': keyword_168292, 'nfev': keyword_168280, 'hess_inv': keyword_168294, 'fun': keyword_168273, 'x': keyword_168288, 'message': keyword_168286, 'jac': keyword_168275, 'nit': keyword_168282}
    # Getting the type of 'OptimizeResult' (line 372)
    OptimizeResult_168271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 11), 'OptimizeResult', False)
    # Calling OptimizeResult(args, kwargs) (line 372)
    OptimizeResult_call_result_168296 = invoke(stypy.reporting.localization.Localization(__file__, 372, 11), OptimizeResult_168271, *[], **kwargs_168295)
    
    # Assigning a type to the variable 'stypy_return_type' (line 372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 4), 'stypy_return_type', OptimizeResult_call_result_168296)
    
    # ################# End of '_minimize_lbfgsb(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_minimize_lbfgsb' in the type store
    # Getting the type of 'stypy_return_type' (line 211)
    stypy_return_type_168297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_168297)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_minimize_lbfgsb'
    return stypy_return_type_168297

# Assigning a type to the variable '_minimize_lbfgsb' (line 211)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 211, 0), '_minimize_lbfgsb', _minimize_lbfgsb)
# Declaration of the 'LbfgsInvHessProduct' class
# Getting the type of 'LinearOperator' (line 377)
LinearOperator_168298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 26), 'LinearOperator')

class LbfgsInvHessProduct(LinearOperator_168298, ):
    str_168299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 401, (-1)), 'str', 'Linear operator for the L-BFGS approximate inverse Hessian.\n\n    This operator computes the product of a vector with the approximate inverse\n    of the Hessian of the objective function, using the L-BFGS limited\n    memory approximation to the inverse Hessian, accumulated during the\n    optimization.\n\n    Objects of this class implement the ``scipy.sparse.linalg.LinearOperator``\n    interface.\n\n    Parameters\n    ----------\n    sk : array_like, shape=(n_corr, n)\n        Array of `n_corr` most recent updates to the solution vector.\n        (See [1]).\n    yk : array_like, shape=(n_corr, n)\n        Array of `n_corr` most recent updates to the gradient. (See [1]).\n\n    References\n    ----------\n    .. [1] Nocedal, Jorge. "Updating quasi-Newton matrices with limited\n       storage." Mathematics of computation 35.151 (1980): 773-782.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 402, 4, False)
        # Assigning a type to the variable 'self' (line 403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LbfgsInvHessProduct.__init__', ['sk', 'yk'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['sk', 'yk'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_168300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 8), 'str', 'Construct the operator.')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'sk' (line 404)
        sk_168301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 11), 'sk')
        # Obtaining the member 'shape' of a type (line 404)
        shape_168302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 404, 11), sk_168301, 'shape')
        # Getting the type of 'yk' (line 404)
        yk_168303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 23), 'yk')
        # Obtaining the member 'shape' of a type (line 404)
        shape_168304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 404, 23), yk_168303, 'shape')
        # Applying the binary operator '!=' (line 404)
        result_ne_168305 = python_operator(stypy.reporting.localization.Localization(__file__, 404, 11), '!=', shape_168302, shape_168304)
        
        
        # Getting the type of 'sk' (line 404)
        sk_168306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 35), 'sk')
        # Obtaining the member 'ndim' of a type (line 404)
        ndim_168307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 404, 35), sk_168306, 'ndim')
        int_168308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 404, 46), 'int')
        # Applying the binary operator '!=' (line 404)
        result_ne_168309 = python_operator(stypy.reporting.localization.Localization(__file__, 404, 35), '!=', ndim_168307, int_168308)
        
        # Applying the binary operator 'or' (line 404)
        result_or_keyword_168310 = python_operator(stypy.reporting.localization.Localization(__file__, 404, 11), 'or', result_ne_168305, result_ne_168309)
        
        # Testing the type of an if condition (line 404)
        if_condition_168311 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 404, 8), result_or_keyword_168310)
        # Assigning a type to the variable 'if_condition_168311' (line 404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 404, 8), 'if_condition_168311', if_condition_168311)
        # SSA begins for if statement (line 404)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 405)
        # Processing the call arguments (line 405)
        str_168313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 405, 29), 'str', 'sk and yk must have matching shape, (n_corrs, n)')
        # Processing the call keyword arguments (line 405)
        kwargs_168314 = {}
        # Getting the type of 'ValueError' (line 405)
        ValueError_168312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 405)
        ValueError_call_result_168315 = invoke(stypy.reporting.localization.Localization(__file__, 405, 18), ValueError_168312, *[str_168313], **kwargs_168314)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 405, 12), ValueError_call_result_168315, 'raise parameter', BaseException)
        # SSA join for if statement (line 404)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Tuple (line 406):
        
        # Assigning a Subscript to a Name (line 406):
        
        # Obtaining the type of the subscript
        int_168316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 406, 8), 'int')
        # Getting the type of 'sk' (line 406)
        sk_168317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 21), 'sk')
        # Obtaining the member 'shape' of a type (line 406)
        shape_168318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 406, 21), sk_168317, 'shape')
        # Obtaining the member '__getitem__' of a type (line 406)
        getitem___168319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 406, 8), shape_168318, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 406)
        subscript_call_result_168320 = invoke(stypy.reporting.localization.Localization(__file__, 406, 8), getitem___168319, int_168316)
        
        # Assigning a type to the variable 'tuple_var_assignment_167644' (line 406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 406, 8), 'tuple_var_assignment_167644', subscript_call_result_168320)
        
        # Assigning a Subscript to a Name (line 406):
        
        # Obtaining the type of the subscript
        int_168321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 406, 8), 'int')
        # Getting the type of 'sk' (line 406)
        sk_168322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 21), 'sk')
        # Obtaining the member 'shape' of a type (line 406)
        shape_168323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 406, 21), sk_168322, 'shape')
        # Obtaining the member '__getitem__' of a type (line 406)
        getitem___168324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 406, 8), shape_168323, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 406)
        subscript_call_result_168325 = invoke(stypy.reporting.localization.Localization(__file__, 406, 8), getitem___168324, int_168321)
        
        # Assigning a type to the variable 'tuple_var_assignment_167645' (line 406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 406, 8), 'tuple_var_assignment_167645', subscript_call_result_168325)
        
        # Assigning a Name to a Name (line 406):
        # Getting the type of 'tuple_var_assignment_167644' (line 406)
        tuple_var_assignment_167644_168326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 8), 'tuple_var_assignment_167644')
        # Assigning a type to the variable 'n_corrs' (line 406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 406, 8), 'n_corrs', tuple_var_assignment_167644_168326)
        
        # Assigning a Name to a Name (line 406):
        # Getting the type of 'tuple_var_assignment_167645' (line 406)
        tuple_var_assignment_167645_168327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 8), 'tuple_var_assignment_167645')
        # Assigning a type to the variable 'n' (line 406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 406, 17), 'n', tuple_var_assignment_167645_168327)
        
        # Call to __init__(...): (line 408)
        # Processing the call keyword arguments (line 408)
        # Getting the type of 'np' (line 409)
        np_168334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 18), 'np', False)
        # Obtaining the member 'float64' of a type (line 409)
        float64_168335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 409, 18), np_168334, 'float64')
        keyword_168336 = float64_168335
        
        # Obtaining an instance of the builtin type 'tuple' (line 409)
        tuple_168337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 409, 37), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 409)
        # Adding element type (line 409)
        # Getting the type of 'n' (line 409)
        n_168338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 37), 'n', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 409, 37), tuple_168337, n_168338)
        # Adding element type (line 409)
        # Getting the type of 'n' (line 409)
        n_168339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 40), 'n', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 409, 37), tuple_168337, n_168339)
        
        keyword_168340 = tuple_168337
        kwargs_168341 = {'dtype': keyword_168336, 'shape': keyword_168340}
        
        # Call to super(...): (line 408)
        # Processing the call arguments (line 408)
        # Getting the type of 'LbfgsInvHessProduct' (line 408)
        LbfgsInvHessProduct_168329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 14), 'LbfgsInvHessProduct', False)
        # Getting the type of 'self' (line 408)
        self_168330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 35), 'self', False)
        # Processing the call keyword arguments (line 408)
        kwargs_168331 = {}
        # Getting the type of 'super' (line 408)
        super_168328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 8), 'super', False)
        # Calling super(args, kwargs) (line 408)
        super_call_result_168332 = invoke(stypy.reporting.localization.Localization(__file__, 408, 8), super_168328, *[LbfgsInvHessProduct_168329, self_168330], **kwargs_168331)
        
        # Obtaining the member '__init__' of a type (line 408)
        init___168333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 408, 8), super_call_result_168332, '__init__')
        # Calling __init__(args, kwargs) (line 408)
        init___call_result_168342 = invoke(stypy.reporting.localization.Localization(__file__, 408, 8), init___168333, *[], **kwargs_168341)
        
        
        # Assigning a Name to a Attribute (line 411):
        
        # Assigning a Name to a Attribute (line 411):
        # Getting the type of 'sk' (line 411)
        sk_168343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 18), 'sk')
        # Getting the type of 'self' (line 411)
        self_168344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 8), 'self')
        # Setting the type of the member 'sk' of a type (line 411)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 8), self_168344, 'sk', sk_168343)
        
        # Assigning a Name to a Attribute (line 412):
        
        # Assigning a Name to a Attribute (line 412):
        # Getting the type of 'yk' (line 412)
        yk_168345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 18), 'yk')
        # Getting the type of 'self' (line 412)
        self_168346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 8), 'self')
        # Setting the type of the member 'yk' of a type (line 412)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 412, 8), self_168346, 'yk', yk_168345)
        
        # Assigning a Name to a Attribute (line 413):
        
        # Assigning a Name to a Attribute (line 413):
        # Getting the type of 'n_corrs' (line 413)
        n_corrs_168347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 23), 'n_corrs')
        # Getting the type of 'self' (line 413)
        self_168348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 8), 'self')
        # Setting the type of the member 'n_corrs' of a type (line 413)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 413, 8), self_168348, 'n_corrs', n_corrs_168347)
        
        # Assigning a BinOp to a Attribute (line 414):
        
        # Assigning a BinOp to a Attribute (line 414):
        int_168349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 414, 19), 'int')
        
        # Call to einsum(...): (line 414)
        # Processing the call arguments (line 414)
        str_168352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 414, 33), 'str', 'ij,ij->i')
        # Getting the type of 'sk' (line 414)
        sk_168353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 45), 'sk', False)
        # Getting the type of 'yk' (line 414)
        yk_168354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 49), 'yk', False)
        # Processing the call keyword arguments (line 414)
        kwargs_168355 = {}
        # Getting the type of 'np' (line 414)
        np_168350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 23), 'np', False)
        # Obtaining the member 'einsum' of a type (line 414)
        einsum_168351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 23), np_168350, 'einsum')
        # Calling einsum(args, kwargs) (line 414)
        einsum_call_result_168356 = invoke(stypy.reporting.localization.Localization(__file__, 414, 23), einsum_168351, *[str_168352, sk_168353, yk_168354], **kwargs_168355)
        
        # Applying the binary operator 'div' (line 414)
        result_div_168357 = python_operator(stypy.reporting.localization.Localization(__file__, 414, 19), 'div', int_168349, einsum_call_result_168356)
        
        # Getting the type of 'self' (line 414)
        self_168358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 8), 'self')
        # Setting the type of the member 'rho' of a type (line 414)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 8), self_168358, 'rho', result_div_168357)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _matvec(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_matvec'
        module_type_store = module_type_store.open_function_context('_matvec', 416, 4, False)
        # Assigning a type to the variable 'self' (line 417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 417, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LbfgsInvHessProduct._matvec.__dict__.__setitem__('stypy_localization', localization)
        LbfgsInvHessProduct._matvec.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LbfgsInvHessProduct._matvec.__dict__.__setitem__('stypy_type_store', module_type_store)
        LbfgsInvHessProduct._matvec.__dict__.__setitem__('stypy_function_name', 'LbfgsInvHessProduct._matvec')
        LbfgsInvHessProduct._matvec.__dict__.__setitem__('stypy_param_names_list', ['x'])
        LbfgsInvHessProduct._matvec.__dict__.__setitem__('stypy_varargs_param_name', None)
        LbfgsInvHessProduct._matvec.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LbfgsInvHessProduct._matvec.__dict__.__setitem__('stypy_call_defaults', defaults)
        LbfgsInvHessProduct._matvec.__dict__.__setitem__('stypy_call_varargs', varargs)
        LbfgsInvHessProduct._matvec.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LbfgsInvHessProduct._matvec.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LbfgsInvHessProduct._matvec', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_matvec', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_matvec(...)' code ##################

        str_168359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 431, (-1)), 'str', 'Efficient matrix-vector multiply with the BFGS matrices.\n\n        This calculation is described in Section (4) of [1].\n\n        Parameters\n        ----------\n        x : ndarray\n            An array with shape (n,) or (n,1).\n\n        Returns\n        -------\n        y : ndarray\n            The matrix-vector product\n\n        ')
        
        # Assigning a Tuple to a Tuple (line 432):
        
        # Assigning a Attribute to a Name (line 432):
        # Getting the type of 'self' (line 432)
        self_168360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 29), 'self')
        # Obtaining the member 'sk' of a type (line 432)
        sk_168361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 432, 29), self_168360, 'sk')
        # Assigning a type to the variable 'tuple_assignment_167646' (line 432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 8), 'tuple_assignment_167646', sk_168361)
        
        # Assigning a Attribute to a Name (line 432):
        # Getting the type of 'self' (line 432)
        self_168362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 38), 'self')
        # Obtaining the member 'yk' of a type (line 432)
        yk_168363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 432, 38), self_168362, 'yk')
        # Assigning a type to the variable 'tuple_assignment_167647' (line 432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 8), 'tuple_assignment_167647', yk_168363)
        
        # Assigning a Attribute to a Name (line 432):
        # Getting the type of 'self' (line 432)
        self_168364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 47), 'self')
        # Obtaining the member 'n_corrs' of a type (line 432)
        n_corrs_168365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 432, 47), self_168364, 'n_corrs')
        # Assigning a type to the variable 'tuple_assignment_167648' (line 432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 8), 'tuple_assignment_167648', n_corrs_168365)
        
        # Assigning a Attribute to a Name (line 432):
        # Getting the type of 'self' (line 432)
        self_168366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 61), 'self')
        # Obtaining the member 'rho' of a type (line 432)
        rho_168367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 432, 61), self_168366, 'rho')
        # Assigning a type to the variable 'tuple_assignment_167649' (line 432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 8), 'tuple_assignment_167649', rho_168367)
        
        # Assigning a Name to a Name (line 432):
        # Getting the type of 'tuple_assignment_167646' (line 432)
        tuple_assignment_167646_168368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 8), 'tuple_assignment_167646')
        # Assigning a type to the variable 's' (line 432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 8), 's', tuple_assignment_167646_168368)
        
        # Assigning a Name to a Name (line 432):
        # Getting the type of 'tuple_assignment_167647' (line 432)
        tuple_assignment_167647_168369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 8), 'tuple_assignment_167647')
        # Assigning a type to the variable 'y' (line 432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 11), 'y', tuple_assignment_167647_168369)
        
        # Assigning a Name to a Name (line 432):
        # Getting the type of 'tuple_assignment_167648' (line 432)
        tuple_assignment_167648_168370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 8), 'tuple_assignment_167648')
        # Assigning a type to the variable 'n_corrs' (line 432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 14), 'n_corrs', tuple_assignment_167648_168370)
        
        # Assigning a Name to a Name (line 432):
        # Getting the type of 'tuple_assignment_167649' (line 432)
        tuple_assignment_167649_168371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 8), 'tuple_assignment_167649')
        # Assigning a type to the variable 'rho' (line 432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 23), 'rho', tuple_assignment_167649_168371)
        
        # Assigning a Call to a Name (line 433):
        
        # Assigning a Call to a Name (line 433):
        
        # Call to array(...): (line 433)
        # Processing the call arguments (line 433)
        # Getting the type of 'x' (line 433)
        x_168374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 21), 'x', False)
        # Processing the call keyword arguments (line 433)
        # Getting the type of 'self' (line 433)
        self_168375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 30), 'self', False)
        # Obtaining the member 'dtype' of a type (line 433)
        dtype_168376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 30), self_168375, 'dtype')
        keyword_168377 = dtype_168376
        # Getting the type of 'True' (line 433)
        True_168378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 47), 'True', False)
        keyword_168379 = True_168378
        kwargs_168380 = {'dtype': keyword_168377, 'copy': keyword_168379}
        # Getting the type of 'np' (line 433)
        np_168372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 12), 'np', False)
        # Obtaining the member 'array' of a type (line 433)
        array_168373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 12), np_168372, 'array')
        # Calling array(args, kwargs) (line 433)
        array_call_result_168381 = invoke(stypy.reporting.localization.Localization(__file__, 433, 12), array_168373, *[x_168374], **kwargs_168380)
        
        # Assigning a type to the variable 'q' (line 433)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 433, 8), 'q', array_call_result_168381)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'q' (line 434)
        q_168382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 11), 'q')
        # Obtaining the member 'ndim' of a type (line 434)
        ndim_168383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 11), q_168382, 'ndim')
        int_168384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 434, 21), 'int')
        # Applying the binary operator '==' (line 434)
        result_eq_168385 = python_operator(stypy.reporting.localization.Localization(__file__, 434, 11), '==', ndim_168383, int_168384)
        
        
        
        # Obtaining the type of the subscript
        int_168386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 434, 35), 'int')
        # Getting the type of 'q' (line 434)
        q_168387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 27), 'q')
        # Obtaining the member 'shape' of a type (line 434)
        shape_168388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 27), q_168387, 'shape')
        # Obtaining the member '__getitem__' of a type (line 434)
        getitem___168389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 27), shape_168388, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 434)
        subscript_call_result_168390 = invoke(stypy.reporting.localization.Localization(__file__, 434, 27), getitem___168389, int_168386)
        
        int_168391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 434, 41), 'int')
        # Applying the binary operator '==' (line 434)
        result_eq_168392 = python_operator(stypy.reporting.localization.Localization(__file__, 434, 27), '==', subscript_call_result_168390, int_168391)
        
        # Applying the binary operator 'and' (line 434)
        result_and_keyword_168393 = python_operator(stypy.reporting.localization.Localization(__file__, 434, 11), 'and', result_eq_168385, result_eq_168392)
        
        # Testing the type of an if condition (line 434)
        if_condition_168394 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 434, 8), result_and_keyword_168393)
        # Assigning a type to the variable 'if_condition_168394' (line 434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 8), 'if_condition_168394', if_condition_168394)
        # SSA begins for if statement (line 434)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 435):
        
        # Assigning a Call to a Name (line 435):
        
        # Call to reshape(...): (line 435)
        # Processing the call arguments (line 435)
        int_168397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 435, 26), 'int')
        # Processing the call keyword arguments (line 435)
        kwargs_168398 = {}
        # Getting the type of 'q' (line 435)
        q_168395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 16), 'q', False)
        # Obtaining the member 'reshape' of a type (line 435)
        reshape_168396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 16), q_168395, 'reshape')
        # Calling reshape(args, kwargs) (line 435)
        reshape_call_result_168399 = invoke(stypy.reporting.localization.Localization(__file__, 435, 16), reshape_168396, *[int_168397], **kwargs_168398)
        
        # Assigning a type to the variable 'q' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 12), 'q', reshape_call_result_168399)
        # SSA join for if statement (line 434)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 437):
        
        # Assigning a Call to a Name (line 437):
        
        # Call to zeros(...): (line 437)
        # Processing the call arguments (line 437)
        # Getting the type of 'n_corrs' (line 437)
        n_corrs_168402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 25), 'n_corrs', False)
        # Processing the call keyword arguments (line 437)
        kwargs_168403 = {}
        # Getting the type of 'np' (line 437)
        np_168400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 16), 'np', False)
        # Obtaining the member 'zeros' of a type (line 437)
        zeros_168401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 437, 16), np_168400, 'zeros')
        # Calling zeros(args, kwargs) (line 437)
        zeros_call_result_168404 = invoke(stypy.reporting.localization.Localization(__file__, 437, 16), zeros_168401, *[n_corrs_168402], **kwargs_168403)
        
        # Assigning a type to the variable 'alpha' (line 437)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 437, 8), 'alpha', zeros_call_result_168404)
        
        
        # Call to range(...): (line 439)
        # Processing the call arguments (line 439)
        # Getting the type of 'n_corrs' (line 439)
        n_corrs_168406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 23), 'n_corrs', False)
        int_168407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 439, 31), 'int')
        # Applying the binary operator '-' (line 439)
        result_sub_168408 = python_operator(stypy.reporting.localization.Localization(__file__, 439, 23), '-', n_corrs_168406, int_168407)
        
        int_168409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 439, 34), 'int')
        int_168410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 439, 38), 'int')
        # Processing the call keyword arguments (line 439)
        kwargs_168411 = {}
        # Getting the type of 'range' (line 439)
        range_168405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 17), 'range', False)
        # Calling range(args, kwargs) (line 439)
        range_call_result_168412 = invoke(stypy.reporting.localization.Localization(__file__, 439, 17), range_168405, *[result_sub_168408, int_168409, int_168410], **kwargs_168411)
        
        # Testing the type of a for loop iterable (line 439)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 439, 8), range_call_result_168412)
        # Getting the type of the for loop variable (line 439)
        for_loop_var_168413 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 439, 8), range_call_result_168412)
        # Assigning a type to the variable 'i' (line 439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 439, 8), 'i', for_loop_var_168413)
        # SSA begins for a for statement (line 439)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Subscript (line 440):
        
        # Assigning a BinOp to a Subscript (line 440):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 440)
        i_168414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 27), 'i')
        # Getting the type of 'rho' (line 440)
        rho_168415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 23), 'rho')
        # Obtaining the member '__getitem__' of a type (line 440)
        getitem___168416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 440, 23), rho_168415, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 440)
        subscript_call_result_168417 = invoke(stypy.reporting.localization.Localization(__file__, 440, 23), getitem___168416, i_168414)
        
        
        # Call to dot(...): (line 440)
        # Processing the call arguments (line 440)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 440)
        i_168420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 41), 'i', False)
        # Getting the type of 's' (line 440)
        s_168421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 39), 's', False)
        # Obtaining the member '__getitem__' of a type (line 440)
        getitem___168422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 440, 39), s_168421, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 440)
        subscript_call_result_168423 = invoke(stypy.reporting.localization.Localization(__file__, 440, 39), getitem___168422, i_168420)
        
        # Getting the type of 'q' (line 440)
        q_168424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 45), 'q', False)
        # Processing the call keyword arguments (line 440)
        kwargs_168425 = {}
        # Getting the type of 'np' (line 440)
        np_168418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 32), 'np', False)
        # Obtaining the member 'dot' of a type (line 440)
        dot_168419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 440, 32), np_168418, 'dot')
        # Calling dot(args, kwargs) (line 440)
        dot_call_result_168426 = invoke(stypy.reporting.localization.Localization(__file__, 440, 32), dot_168419, *[subscript_call_result_168423, q_168424], **kwargs_168425)
        
        # Applying the binary operator '*' (line 440)
        result_mul_168427 = python_operator(stypy.reporting.localization.Localization(__file__, 440, 23), '*', subscript_call_result_168417, dot_call_result_168426)
        
        # Getting the type of 'alpha' (line 440)
        alpha_168428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 12), 'alpha')
        # Getting the type of 'i' (line 440)
        i_168429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 18), 'i')
        # Storing an element on a container (line 440)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 440, 12), alpha_168428, (i_168429, result_mul_168427))
        
        # Assigning a BinOp to a Name (line 441):
        
        # Assigning a BinOp to a Name (line 441):
        # Getting the type of 'q' (line 441)
        q_168430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 16), 'q')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 441)
        i_168431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 26), 'i')
        # Getting the type of 'alpha' (line 441)
        alpha_168432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 20), 'alpha')
        # Obtaining the member '__getitem__' of a type (line 441)
        getitem___168433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 441, 20), alpha_168432, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 441)
        subscript_call_result_168434 = invoke(stypy.reporting.localization.Localization(__file__, 441, 20), getitem___168433, i_168431)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 441)
        i_168435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 31), 'i')
        # Getting the type of 'y' (line 441)
        y_168436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 29), 'y')
        # Obtaining the member '__getitem__' of a type (line 441)
        getitem___168437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 441, 29), y_168436, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 441)
        subscript_call_result_168438 = invoke(stypy.reporting.localization.Localization(__file__, 441, 29), getitem___168437, i_168435)
        
        # Applying the binary operator '*' (line 441)
        result_mul_168439 = python_operator(stypy.reporting.localization.Localization(__file__, 441, 20), '*', subscript_call_result_168434, subscript_call_result_168438)
        
        # Applying the binary operator '-' (line 441)
        result_sub_168440 = python_operator(stypy.reporting.localization.Localization(__file__, 441, 16), '-', q_168430, result_mul_168439)
        
        # Assigning a type to the variable 'q' (line 441)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 441, 12), 'q', result_sub_168440)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 443):
        
        # Assigning a Name to a Name (line 443):
        # Getting the type of 'q' (line 443)
        q_168441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 12), 'q')
        # Assigning a type to the variable 'r' (line 443)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 443, 8), 'r', q_168441)
        
        
        # Call to range(...): (line 444)
        # Processing the call arguments (line 444)
        # Getting the type of 'n_corrs' (line 444)
        n_corrs_168443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 23), 'n_corrs', False)
        # Processing the call keyword arguments (line 444)
        kwargs_168444 = {}
        # Getting the type of 'range' (line 444)
        range_168442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 17), 'range', False)
        # Calling range(args, kwargs) (line 444)
        range_call_result_168445 = invoke(stypy.reporting.localization.Localization(__file__, 444, 17), range_168442, *[n_corrs_168443], **kwargs_168444)
        
        # Testing the type of a for loop iterable (line 444)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 444, 8), range_call_result_168445)
        # Getting the type of the for loop variable (line 444)
        for_loop_var_168446 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 444, 8), range_call_result_168445)
        # Assigning a type to the variable 'i' (line 444)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 444, 8), 'i', for_loop_var_168446)
        # SSA begins for a for statement (line 444)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Name (line 445):
        
        # Assigning a BinOp to a Name (line 445):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 445)
        i_168447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 23), 'i')
        # Getting the type of 'rho' (line 445)
        rho_168448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 19), 'rho')
        # Obtaining the member '__getitem__' of a type (line 445)
        getitem___168449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 19), rho_168448, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 445)
        subscript_call_result_168450 = invoke(stypy.reporting.localization.Localization(__file__, 445, 19), getitem___168449, i_168447)
        
        
        # Call to dot(...): (line 445)
        # Processing the call arguments (line 445)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 445)
        i_168453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 37), 'i', False)
        # Getting the type of 'y' (line 445)
        y_168454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 35), 'y', False)
        # Obtaining the member '__getitem__' of a type (line 445)
        getitem___168455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 35), y_168454, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 445)
        subscript_call_result_168456 = invoke(stypy.reporting.localization.Localization(__file__, 445, 35), getitem___168455, i_168453)
        
        # Getting the type of 'r' (line 445)
        r_168457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 41), 'r', False)
        # Processing the call keyword arguments (line 445)
        kwargs_168458 = {}
        # Getting the type of 'np' (line 445)
        np_168451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 28), 'np', False)
        # Obtaining the member 'dot' of a type (line 445)
        dot_168452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 28), np_168451, 'dot')
        # Calling dot(args, kwargs) (line 445)
        dot_call_result_168459 = invoke(stypy.reporting.localization.Localization(__file__, 445, 28), dot_168452, *[subscript_call_result_168456, r_168457], **kwargs_168458)
        
        # Applying the binary operator '*' (line 445)
        result_mul_168460 = python_operator(stypy.reporting.localization.Localization(__file__, 445, 19), '*', subscript_call_result_168450, dot_call_result_168459)
        
        # Assigning a type to the variable 'beta' (line 445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 445, 12), 'beta', result_mul_168460)
        
        # Assigning a BinOp to a Name (line 446):
        
        # Assigning a BinOp to a Name (line 446):
        # Getting the type of 'r' (line 446)
        r_168461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 16), 'r')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 446)
        i_168462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 22), 'i')
        # Getting the type of 's' (line 446)
        s_168463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 20), 's')
        # Obtaining the member '__getitem__' of a type (line 446)
        getitem___168464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 20), s_168463, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 446)
        subscript_call_result_168465 = invoke(stypy.reporting.localization.Localization(__file__, 446, 20), getitem___168464, i_168462)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 446)
        i_168466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 34), 'i')
        # Getting the type of 'alpha' (line 446)
        alpha_168467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 28), 'alpha')
        # Obtaining the member '__getitem__' of a type (line 446)
        getitem___168468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 28), alpha_168467, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 446)
        subscript_call_result_168469 = invoke(stypy.reporting.localization.Localization(__file__, 446, 28), getitem___168468, i_168466)
        
        # Getting the type of 'beta' (line 446)
        beta_168470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 39), 'beta')
        # Applying the binary operator '-' (line 446)
        result_sub_168471 = python_operator(stypy.reporting.localization.Localization(__file__, 446, 28), '-', subscript_call_result_168469, beta_168470)
        
        # Applying the binary operator '*' (line 446)
        result_mul_168472 = python_operator(stypy.reporting.localization.Localization(__file__, 446, 20), '*', subscript_call_result_168465, result_sub_168471)
        
        # Applying the binary operator '+' (line 446)
        result_add_168473 = python_operator(stypy.reporting.localization.Localization(__file__, 446, 16), '+', r_168461, result_mul_168472)
        
        # Assigning a type to the variable 'r' (line 446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 12), 'r', result_add_168473)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'r' (line 448)
        r_168474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 15), 'r')
        # Assigning a type to the variable 'stypy_return_type' (line 448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 448, 8), 'stypy_return_type', r_168474)
        
        # ################# End of '_matvec(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_matvec' in the type store
        # Getting the type of 'stypy_return_type' (line 416)
        stypy_return_type_168475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_168475)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_matvec'
        return stypy_return_type_168475


    @norecursion
    def todense(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'todense'
        module_type_store = module_type_store.open_function_context('todense', 450, 4, False)
        # Assigning a type to the variable 'self' (line 451)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 451, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LbfgsInvHessProduct.todense.__dict__.__setitem__('stypy_localization', localization)
        LbfgsInvHessProduct.todense.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LbfgsInvHessProduct.todense.__dict__.__setitem__('stypy_type_store', module_type_store)
        LbfgsInvHessProduct.todense.__dict__.__setitem__('stypy_function_name', 'LbfgsInvHessProduct.todense')
        LbfgsInvHessProduct.todense.__dict__.__setitem__('stypy_param_names_list', [])
        LbfgsInvHessProduct.todense.__dict__.__setitem__('stypy_varargs_param_name', None)
        LbfgsInvHessProduct.todense.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LbfgsInvHessProduct.todense.__dict__.__setitem__('stypy_call_defaults', defaults)
        LbfgsInvHessProduct.todense.__dict__.__setitem__('stypy_call_varargs', varargs)
        LbfgsInvHessProduct.todense.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LbfgsInvHessProduct.todense.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LbfgsInvHessProduct.todense', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'todense', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'todense(...)' code ##################

        str_168476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 459, (-1)), 'str', 'Return a dense array representation of this operator.\n\n        Returns\n        -------\n        arr : ndarray, shape=(n, n)\n            An array with the same shape and containing\n            the same data represented by this `LinearOperator`.\n\n        ')
        
        # Assigning a Tuple to a Tuple (line 460):
        
        # Assigning a Attribute to a Name (line 460):
        # Getting the type of 'self' (line 460)
        self_168477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 29), 'self')
        # Obtaining the member 'sk' of a type (line 460)
        sk_168478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 29), self_168477, 'sk')
        # Assigning a type to the variable 'tuple_assignment_167650' (line 460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 460, 8), 'tuple_assignment_167650', sk_168478)
        
        # Assigning a Attribute to a Name (line 460):
        # Getting the type of 'self' (line 460)
        self_168479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 38), 'self')
        # Obtaining the member 'yk' of a type (line 460)
        yk_168480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 38), self_168479, 'yk')
        # Assigning a type to the variable 'tuple_assignment_167651' (line 460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 460, 8), 'tuple_assignment_167651', yk_168480)
        
        # Assigning a Attribute to a Name (line 460):
        # Getting the type of 'self' (line 460)
        self_168481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 47), 'self')
        # Obtaining the member 'n_corrs' of a type (line 460)
        n_corrs_168482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 47), self_168481, 'n_corrs')
        # Assigning a type to the variable 'tuple_assignment_167652' (line 460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 460, 8), 'tuple_assignment_167652', n_corrs_168482)
        
        # Assigning a Attribute to a Name (line 460):
        # Getting the type of 'self' (line 460)
        self_168483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 61), 'self')
        # Obtaining the member 'rho' of a type (line 460)
        rho_168484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 61), self_168483, 'rho')
        # Assigning a type to the variable 'tuple_assignment_167653' (line 460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 460, 8), 'tuple_assignment_167653', rho_168484)
        
        # Assigning a Name to a Name (line 460):
        # Getting the type of 'tuple_assignment_167650' (line 460)
        tuple_assignment_167650_168485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 8), 'tuple_assignment_167650')
        # Assigning a type to the variable 's' (line 460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 460, 8), 's', tuple_assignment_167650_168485)
        
        # Assigning a Name to a Name (line 460):
        # Getting the type of 'tuple_assignment_167651' (line 460)
        tuple_assignment_167651_168486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 8), 'tuple_assignment_167651')
        # Assigning a type to the variable 'y' (line 460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 460, 11), 'y', tuple_assignment_167651_168486)
        
        # Assigning a Name to a Name (line 460):
        # Getting the type of 'tuple_assignment_167652' (line 460)
        tuple_assignment_167652_168487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 8), 'tuple_assignment_167652')
        # Assigning a type to the variable 'n_corrs' (line 460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 460, 14), 'n_corrs', tuple_assignment_167652_168487)
        
        # Assigning a Name to a Name (line 460):
        # Getting the type of 'tuple_assignment_167653' (line 460)
        tuple_assignment_167653_168488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 8), 'tuple_assignment_167653')
        # Assigning a type to the variable 'rho' (line 460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 460, 23), 'rho', tuple_assignment_167653_168488)
        
        # Assigning a Call to a Name (line 461):
        
        # Assigning a Call to a Name (line 461):
        
        # Call to eye(...): (line 461)
        # Getting the type of 'self' (line 461)
        self_168491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 20), 'self', False)
        # Obtaining the member 'shape' of a type (line 461)
        shape_168492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 461, 20), self_168491, 'shape')
        # Processing the call keyword arguments (line 461)
        # Getting the type of 'self' (line 461)
        self_168493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 38), 'self', False)
        # Obtaining the member 'dtype' of a type (line 461)
        dtype_168494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 461, 38), self_168493, 'dtype')
        keyword_168495 = dtype_168494
        kwargs_168496 = {'dtype': keyword_168495}
        # Getting the type of 'np' (line 461)
        np_168489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 12), 'np', False)
        # Obtaining the member 'eye' of a type (line 461)
        eye_168490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 461, 12), np_168489, 'eye')
        # Calling eye(args, kwargs) (line 461)
        eye_call_result_168497 = invoke(stypy.reporting.localization.Localization(__file__, 461, 12), eye_168490, *[shape_168492], **kwargs_168496)
        
        # Assigning a type to the variable 'I' (line 461)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 461, 8), 'I', eye_call_result_168497)
        
        # Assigning a Name to a Name (line 462):
        
        # Assigning a Name to a Name (line 462):
        # Getting the type of 'I' (line 462)
        I_168498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 13), 'I')
        # Assigning a type to the variable 'Hk' (line 462)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 462, 8), 'Hk', I_168498)
        
        
        # Call to range(...): (line 464)
        # Processing the call arguments (line 464)
        # Getting the type of 'n_corrs' (line 464)
        n_corrs_168500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 23), 'n_corrs', False)
        # Processing the call keyword arguments (line 464)
        kwargs_168501 = {}
        # Getting the type of 'range' (line 464)
        range_168499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 17), 'range', False)
        # Calling range(args, kwargs) (line 464)
        range_call_result_168502 = invoke(stypy.reporting.localization.Localization(__file__, 464, 17), range_168499, *[n_corrs_168500], **kwargs_168501)
        
        # Testing the type of a for loop iterable (line 464)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 464, 8), range_call_result_168502)
        # Getting the type of the for loop variable (line 464)
        for_loop_var_168503 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 464, 8), range_call_result_168502)
        # Assigning a type to the variable 'i' (line 464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 8), 'i', for_loop_var_168503)
        # SSA begins for a for statement (line 464)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Name (line 465):
        
        # Assigning a BinOp to a Name (line 465):
        # Getting the type of 'I' (line 465)
        I_168504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 17), 'I')
        
        # Obtaining the type of the subscript
        slice_168505 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 465, 21), None, None, None)
        # Getting the type of 'np' (line 465)
        np_168506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 29), 'np')
        # Obtaining the member 'newaxis' of a type (line 465)
        newaxis_168507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 465, 29), np_168506, 'newaxis')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 465)
        i_168508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 23), 'i')
        # Getting the type of 's' (line 465)
        s_168509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 21), 's')
        # Obtaining the member '__getitem__' of a type (line 465)
        getitem___168510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 465, 21), s_168509, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 465)
        subscript_call_result_168511 = invoke(stypy.reporting.localization.Localization(__file__, 465, 21), getitem___168510, i_168508)
        
        # Obtaining the member '__getitem__' of a type (line 465)
        getitem___168512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 465, 21), subscript_call_result_168511, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 465)
        subscript_call_result_168513 = invoke(stypy.reporting.localization.Localization(__file__, 465, 21), getitem___168512, (slice_168505, newaxis_168507))
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'np' (line 465)
        np_168514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 48), 'np')
        # Obtaining the member 'newaxis' of a type (line 465)
        newaxis_168515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 465, 48), np_168514, 'newaxis')
        slice_168516 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 465, 43), None, None, None)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 465)
        i_168517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 45), 'i')
        # Getting the type of 'y' (line 465)
        y_168518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 43), 'y')
        # Obtaining the member '__getitem__' of a type (line 465)
        getitem___168519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 465, 43), y_168518, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 465)
        subscript_call_result_168520 = invoke(stypy.reporting.localization.Localization(__file__, 465, 43), getitem___168519, i_168517)
        
        # Obtaining the member '__getitem__' of a type (line 465)
        getitem___168521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 465, 43), subscript_call_result_168520, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 465)
        subscript_call_result_168522 = invoke(stypy.reporting.localization.Localization(__file__, 465, 43), getitem___168521, (newaxis_168515, slice_168516))
        
        # Applying the binary operator '*' (line 465)
        result_mul_168523 = python_operator(stypy.reporting.localization.Localization(__file__, 465, 21), '*', subscript_call_result_168513, subscript_call_result_168522)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 465)
        i_168524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 69), 'i')
        # Getting the type of 'rho' (line 465)
        rho_168525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 65), 'rho')
        # Obtaining the member '__getitem__' of a type (line 465)
        getitem___168526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 465, 65), rho_168525, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 465)
        subscript_call_result_168527 = invoke(stypy.reporting.localization.Localization(__file__, 465, 65), getitem___168526, i_168524)
        
        # Applying the binary operator '*' (line 465)
        result_mul_168528 = python_operator(stypy.reporting.localization.Localization(__file__, 465, 63), '*', result_mul_168523, subscript_call_result_168527)
        
        # Applying the binary operator '-' (line 465)
        result_sub_168529 = python_operator(stypy.reporting.localization.Localization(__file__, 465, 17), '-', I_168504, result_mul_168528)
        
        # Assigning a type to the variable 'A1' (line 465)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 465, 12), 'A1', result_sub_168529)
        
        # Assigning a BinOp to a Name (line 466):
        
        # Assigning a BinOp to a Name (line 466):
        # Getting the type of 'I' (line 466)
        I_168530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 17), 'I')
        
        # Obtaining the type of the subscript
        slice_168531 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 466, 21), None, None, None)
        # Getting the type of 'np' (line 466)
        np_168532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 29), 'np')
        # Obtaining the member 'newaxis' of a type (line 466)
        newaxis_168533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 29), np_168532, 'newaxis')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 466)
        i_168534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 23), 'i')
        # Getting the type of 'y' (line 466)
        y_168535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 21), 'y')
        # Obtaining the member '__getitem__' of a type (line 466)
        getitem___168536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 21), y_168535, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 466)
        subscript_call_result_168537 = invoke(stypy.reporting.localization.Localization(__file__, 466, 21), getitem___168536, i_168534)
        
        # Obtaining the member '__getitem__' of a type (line 466)
        getitem___168538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 21), subscript_call_result_168537, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 466)
        subscript_call_result_168539 = invoke(stypy.reporting.localization.Localization(__file__, 466, 21), getitem___168538, (slice_168531, newaxis_168533))
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'np' (line 466)
        np_168540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 48), 'np')
        # Obtaining the member 'newaxis' of a type (line 466)
        newaxis_168541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 48), np_168540, 'newaxis')
        slice_168542 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 466, 43), None, None, None)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 466)
        i_168543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 45), 'i')
        # Getting the type of 's' (line 466)
        s_168544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 43), 's')
        # Obtaining the member '__getitem__' of a type (line 466)
        getitem___168545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 43), s_168544, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 466)
        subscript_call_result_168546 = invoke(stypy.reporting.localization.Localization(__file__, 466, 43), getitem___168545, i_168543)
        
        # Obtaining the member '__getitem__' of a type (line 466)
        getitem___168547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 43), subscript_call_result_168546, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 466)
        subscript_call_result_168548 = invoke(stypy.reporting.localization.Localization(__file__, 466, 43), getitem___168547, (newaxis_168541, slice_168542))
        
        # Applying the binary operator '*' (line 466)
        result_mul_168549 = python_operator(stypy.reporting.localization.Localization(__file__, 466, 21), '*', subscript_call_result_168539, subscript_call_result_168548)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 466)
        i_168550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 69), 'i')
        # Getting the type of 'rho' (line 466)
        rho_168551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 65), 'rho')
        # Obtaining the member '__getitem__' of a type (line 466)
        getitem___168552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 65), rho_168551, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 466)
        subscript_call_result_168553 = invoke(stypy.reporting.localization.Localization(__file__, 466, 65), getitem___168552, i_168550)
        
        # Applying the binary operator '*' (line 466)
        result_mul_168554 = python_operator(stypy.reporting.localization.Localization(__file__, 466, 63), '*', result_mul_168549, subscript_call_result_168553)
        
        # Applying the binary operator '-' (line 466)
        result_sub_168555 = python_operator(stypy.reporting.localization.Localization(__file__, 466, 17), '-', I_168530, result_mul_168554)
        
        # Assigning a type to the variable 'A2' (line 466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 466, 12), 'A2', result_sub_168555)
        
        # Assigning a BinOp to a Name (line 468):
        
        # Assigning a BinOp to a Name (line 468):
        
        # Call to dot(...): (line 468)
        # Processing the call arguments (line 468)
        # Getting the type of 'A1' (line 468)
        A1_168558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 24), 'A1', False)
        
        # Call to dot(...): (line 468)
        # Processing the call arguments (line 468)
        # Getting the type of 'Hk' (line 468)
        Hk_168561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 35), 'Hk', False)
        # Getting the type of 'A2' (line 468)
        A2_168562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 39), 'A2', False)
        # Processing the call keyword arguments (line 468)
        kwargs_168563 = {}
        # Getting the type of 'np' (line 468)
        np_168559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 28), 'np', False)
        # Obtaining the member 'dot' of a type (line 468)
        dot_168560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 28), np_168559, 'dot')
        # Calling dot(args, kwargs) (line 468)
        dot_call_result_168564 = invoke(stypy.reporting.localization.Localization(__file__, 468, 28), dot_168560, *[Hk_168561, A2_168562], **kwargs_168563)
        
        # Processing the call keyword arguments (line 468)
        kwargs_168565 = {}
        # Getting the type of 'np' (line 468)
        np_168556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 17), 'np', False)
        # Obtaining the member 'dot' of a type (line 468)
        dot_168557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 17), np_168556, 'dot')
        # Calling dot(args, kwargs) (line 468)
        dot_call_result_168566 = invoke(stypy.reporting.localization.Localization(__file__, 468, 17), dot_168557, *[A1_168558, dot_call_result_168564], **kwargs_168565)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 468)
        i_168567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 51), 'i')
        # Getting the type of 'rho' (line 468)
        rho_168568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 47), 'rho')
        # Obtaining the member '__getitem__' of a type (line 468)
        getitem___168569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 47), rho_168568, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 468)
        subscript_call_result_168570 = invoke(stypy.reporting.localization.Localization(__file__, 468, 47), getitem___168569, i_168567)
        
        
        # Obtaining the type of the subscript
        slice_168571 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 468, 56), None, None, None)
        # Getting the type of 'np' (line 468)
        np_168572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 64), 'np')
        # Obtaining the member 'newaxis' of a type (line 468)
        newaxis_168573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 64), np_168572, 'newaxis')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 468)
        i_168574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 58), 'i')
        # Getting the type of 's' (line 468)
        s_168575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 56), 's')
        # Obtaining the member '__getitem__' of a type (line 468)
        getitem___168576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 56), s_168575, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 468)
        subscript_call_result_168577 = invoke(stypy.reporting.localization.Localization(__file__, 468, 56), getitem___168576, i_168574)
        
        # Obtaining the member '__getitem__' of a type (line 468)
        getitem___168578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 56), subscript_call_result_168577, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 468)
        subscript_call_result_168579 = invoke(stypy.reporting.localization.Localization(__file__, 468, 56), getitem___168578, (slice_168571, newaxis_168573))
        
        # Applying the binary operator '*' (line 468)
        result_mul_168580 = python_operator(stypy.reporting.localization.Localization(__file__, 468, 47), '*', subscript_call_result_168570, subscript_call_result_168579)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'np' (line 469)
        np_168581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 61), 'np')
        # Obtaining the member 'newaxis' of a type (line 469)
        newaxis_168582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 469, 61), np_168581, 'newaxis')
        slice_168583 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 469, 56), None, None, None)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 469)
        i_168584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 58), 'i')
        # Getting the type of 's' (line 469)
        s_168585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 56), 's')
        # Obtaining the member '__getitem__' of a type (line 469)
        getitem___168586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 469, 56), s_168585, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 469)
        subscript_call_result_168587 = invoke(stypy.reporting.localization.Localization(__file__, 469, 56), getitem___168586, i_168584)
        
        # Obtaining the member '__getitem__' of a type (line 469)
        getitem___168588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 469, 56), subscript_call_result_168587, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 469)
        subscript_call_result_168589 = invoke(stypy.reporting.localization.Localization(__file__, 469, 56), getitem___168588, (newaxis_168582, slice_168583))
        
        # Applying the binary operator '*' (line 468)
        result_mul_168590 = python_operator(stypy.reporting.localization.Localization(__file__, 468, 76), '*', result_mul_168580, subscript_call_result_168589)
        
        # Applying the binary operator '+' (line 468)
        result_add_168591 = python_operator(stypy.reporting.localization.Localization(__file__, 468, 17), '+', dot_call_result_168566, result_mul_168590)
        
        # Assigning a type to the variable 'Hk' (line 468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 468, 12), 'Hk', result_add_168591)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'Hk' (line 470)
        Hk_168592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 15), 'Hk')
        # Assigning a type to the variable 'stypy_return_type' (line 470)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 470, 8), 'stypy_return_type', Hk_168592)
        
        # ################# End of 'todense(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'todense' in the type store
        # Getting the type of 'stypy_return_type' (line 450)
        stypy_return_type_168593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_168593)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'todense'
        return stypy_return_type_168593


# Assigning a type to the variable 'LbfgsInvHessProduct' (line 377)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 0), 'LbfgsInvHessProduct', LbfgsInvHessProduct)

if (__name__ == '__main__'):

    @norecursion
    def func(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'func'
        module_type_store = module_type_store.open_function_context('func', 474, 4, False)
        
        # Passed parameters checking function
        func.stypy_localization = localization
        func.stypy_type_of_self = None
        func.stypy_type_store = module_type_store
        func.stypy_function_name = 'func'
        func.stypy_param_names_list = ['x']
        func.stypy_varargs_param_name = None
        func.stypy_kwargs_param_name = None
        func.stypy_call_defaults = defaults
        func.stypy_call_varargs = varargs
        func.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'func', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'func', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'func(...)' code ##################

        
        # Assigning a BinOp to a Name (line 475):
        
        # Assigning a BinOp to a Name (line 475):
        float_168594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 12), 'float')
        
        # Obtaining the type of the subscript
        int_168595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 22), 'int')
        # Getting the type of 'x' (line 475)
        x_168596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 20), 'x')
        # Obtaining the member '__getitem__' of a type (line 475)
        getitem___168597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 20), x_168596, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 475)
        subscript_call_result_168598 = invoke(stypy.reporting.localization.Localization(__file__, 475, 20), getitem___168597, int_168595)
        
        int_168599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 27), 'int')
        # Applying the binary operator '-' (line 475)
        result_sub_168600 = python_operator(stypy.reporting.localization.Localization(__file__, 475, 20), '-', subscript_call_result_168598, int_168599)
        
        int_168601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 33), 'int')
        # Applying the binary operator '**' (line 475)
        result_pow_168602 = python_operator(stypy.reporting.localization.Localization(__file__, 475, 19), '**', result_sub_168600, int_168601)
        
        # Applying the binary operator '*' (line 475)
        result_mul_168603 = python_operator(stypy.reporting.localization.Localization(__file__, 475, 12), '*', float_168594, result_pow_168602)
        
        # Assigning a type to the variable 'f' (line 475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'f', result_mul_168603)
        
        
        # Call to range(...): (line 476)
        # Processing the call arguments (line 476)
        int_168605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 476, 23), 'int')
        
        # Obtaining the type of the subscript
        int_168606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 476, 34), 'int')
        # Getting the type of 'x' (line 476)
        x_168607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 26), 'x', False)
        # Obtaining the member 'shape' of a type (line 476)
        shape_168608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 476, 26), x_168607, 'shape')
        # Obtaining the member '__getitem__' of a type (line 476)
        getitem___168609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 476, 26), shape_168608, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 476)
        subscript_call_result_168610 = invoke(stypy.reporting.localization.Localization(__file__, 476, 26), getitem___168609, int_168606)
        
        # Processing the call keyword arguments (line 476)
        kwargs_168611 = {}
        # Getting the type of 'range' (line 476)
        range_168604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 17), 'range', False)
        # Calling range(args, kwargs) (line 476)
        range_call_result_168612 = invoke(stypy.reporting.localization.Localization(__file__, 476, 17), range_168604, *[int_168605, subscript_call_result_168610], **kwargs_168611)
        
        # Testing the type of a for loop iterable (line 476)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 476, 8), range_call_result_168612)
        # Getting the type of the for loop variable (line 476)
        for_loop_var_168613 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 476, 8), range_call_result_168612)
        # Assigning a type to the variable 'i' (line 476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 476, 8), 'i', for_loop_var_168613)
        # SSA begins for a for statement (line 476)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'f' (line 477)
        f_168614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 12), 'f')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 477)
        i_168615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 20), 'i')
        # Getting the type of 'x' (line 477)
        x_168616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 18), 'x')
        # Obtaining the member '__getitem__' of a type (line 477)
        getitem___168617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 477, 18), x_168616, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 477)
        subscript_call_result_168618 = invoke(stypy.reporting.localization.Localization(__file__, 477, 18), getitem___168617, i_168615)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 477)
        i_168619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 27), 'i')
        int_168620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 29), 'int')
        # Applying the binary operator '-' (line 477)
        result_sub_168621 = python_operator(stypy.reporting.localization.Localization(__file__, 477, 27), '-', i_168619, int_168620)
        
        # Getting the type of 'x' (line 477)
        x_168622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 25), 'x')
        # Obtaining the member '__getitem__' of a type (line 477)
        getitem___168623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 477, 25), x_168622, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 477)
        subscript_call_result_168624 = invoke(stypy.reporting.localization.Localization(__file__, 477, 25), getitem___168623, result_sub_168621)
        
        int_168625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 35), 'int')
        # Applying the binary operator '**' (line 477)
        result_pow_168626 = python_operator(stypy.reporting.localization.Localization(__file__, 477, 25), '**', subscript_call_result_168624, int_168625)
        
        # Applying the binary operator '-' (line 477)
        result_sub_168627 = python_operator(stypy.reporting.localization.Localization(__file__, 477, 18), '-', subscript_call_result_168618, result_pow_168626)
        
        int_168628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 41), 'int')
        # Applying the binary operator '**' (line 477)
        result_pow_168629 = python_operator(stypy.reporting.localization.Localization(__file__, 477, 17), '**', result_sub_168627, int_168628)
        
        # Applying the binary operator '+=' (line 477)
        result_iadd_168630 = python_operator(stypy.reporting.localization.Localization(__file__, 477, 12), '+=', f_168614, result_pow_168629)
        # Assigning a type to the variable 'f' (line 477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 12), 'f', result_iadd_168630)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'f' (line 478)
        f_168631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 8), 'f')
        int_168632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 478, 13), 'int')
        # Applying the binary operator '*=' (line 478)
        result_imul_168633 = python_operator(stypy.reporting.localization.Localization(__file__, 478, 8), '*=', f_168631, int_168632)
        # Assigning a type to the variable 'f' (line 478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 8), 'f', result_imul_168633)
        
        # Getting the type of 'f' (line 479)
        f_168634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 15), 'f')
        # Assigning a type to the variable 'stypy_return_type' (line 479)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 479, 8), 'stypy_return_type', f_168634)
        
        # ################# End of 'func(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'func' in the type store
        # Getting the type of 'stypy_return_type' (line 474)
        stypy_return_type_168635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_168635)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'func'
        return stypy_return_type_168635

    # Assigning a type to the variable 'func' (line 474)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 4), 'func', func)

    @norecursion
    def grad(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'grad'
        module_type_store = module_type_store.open_function_context('grad', 481, 4, False)
        
        # Passed parameters checking function
        grad.stypy_localization = localization
        grad.stypy_type_of_self = None
        grad.stypy_type_store = module_type_store
        grad.stypy_function_name = 'grad'
        grad.stypy_param_names_list = ['x']
        grad.stypy_varargs_param_name = None
        grad.stypy_kwargs_param_name = None
        grad.stypy_call_defaults = defaults
        grad.stypy_call_varargs = varargs
        grad.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'grad', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'grad', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'grad(...)' code ##################

        
        # Assigning a Call to a Name (line 482):
        
        # Assigning a Call to a Name (line 482):
        
        # Call to zeros(...): (line 482)
        # Processing the call arguments (line 482)
        # Getting the type of 'x' (line 482)
        x_168637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 18), 'x', False)
        # Obtaining the member 'shape' of a type (line 482)
        shape_168638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 18), x_168637, 'shape')
        # Getting the type of 'float64' (line 482)
        float64_168639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 27), 'float64', False)
        # Processing the call keyword arguments (line 482)
        kwargs_168640 = {}
        # Getting the type of 'zeros' (line 482)
        zeros_168636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 12), 'zeros', False)
        # Calling zeros(args, kwargs) (line 482)
        zeros_call_result_168641 = invoke(stypy.reporting.localization.Localization(__file__, 482, 12), zeros_168636, *[shape_168638, float64_168639], **kwargs_168640)
        
        # Assigning a type to the variable 'g' (line 482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 8), 'g', zeros_call_result_168641)
        
        # Assigning a BinOp to a Name (line 483):
        
        # Assigning a BinOp to a Name (line 483):
        
        # Obtaining the type of the subscript
        int_168642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 15), 'int')
        # Getting the type of 'x' (line 483)
        x_168643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 13), 'x')
        # Obtaining the member '__getitem__' of a type (line 483)
        getitem___168644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 483, 13), x_168643, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 483)
        subscript_call_result_168645 = invoke(stypy.reporting.localization.Localization(__file__, 483, 13), getitem___168644, int_168642)
        
        
        # Obtaining the type of the subscript
        int_168646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 22), 'int')
        # Getting the type of 'x' (line 483)
        x_168647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 20), 'x')
        # Obtaining the member '__getitem__' of a type (line 483)
        getitem___168648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 483, 20), x_168647, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 483)
        subscript_call_result_168649 = invoke(stypy.reporting.localization.Localization(__file__, 483, 20), getitem___168648, int_168646)
        
        int_168650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 28), 'int')
        # Applying the binary operator '**' (line 483)
        result_pow_168651 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 20), '**', subscript_call_result_168649, int_168650)
        
        # Applying the binary operator '-' (line 483)
        result_sub_168652 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 13), '-', subscript_call_result_168645, result_pow_168651)
        
        # Assigning a type to the variable 't1' (line 483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 483, 8), 't1', result_sub_168652)
        
        # Assigning a BinOp to a Subscript (line 484):
        
        # Assigning a BinOp to a Subscript (line 484):
        int_168653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 484, 15), 'int')
        
        # Obtaining the type of the subscript
        int_168654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 484, 22), 'int')
        # Getting the type of 'x' (line 484)
        x_168655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 20), 'x')
        # Obtaining the member '__getitem__' of a type (line 484)
        getitem___168656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 20), x_168655, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 484)
        subscript_call_result_168657 = invoke(stypy.reporting.localization.Localization(__file__, 484, 20), getitem___168656, int_168654)
        
        int_168658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 484, 27), 'int')
        # Applying the binary operator '-' (line 484)
        result_sub_168659 = python_operator(stypy.reporting.localization.Localization(__file__, 484, 20), '-', subscript_call_result_168657, int_168658)
        
        # Applying the binary operator '*' (line 484)
        result_mul_168660 = python_operator(stypy.reporting.localization.Localization(__file__, 484, 15), '*', int_168653, result_sub_168659)
        
        int_168661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 484, 32), 'int')
        
        # Obtaining the type of the subscript
        int_168662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 484, 39), 'int')
        # Getting the type of 'x' (line 484)
        x_168663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 37), 'x')
        # Obtaining the member '__getitem__' of a type (line 484)
        getitem___168664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 37), x_168663, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 484)
        subscript_call_result_168665 = invoke(stypy.reporting.localization.Localization(__file__, 484, 37), getitem___168664, int_168662)
        
        # Applying the binary operator '*' (line 484)
        result_mul_168666 = python_operator(stypy.reporting.localization.Localization(__file__, 484, 32), '*', int_168661, subscript_call_result_168665)
        
        # Getting the type of 't1' (line 484)
        t1_168667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 44), 't1')
        # Applying the binary operator '*' (line 484)
        result_mul_168668 = python_operator(stypy.reporting.localization.Localization(__file__, 484, 42), '*', result_mul_168666, t1_168667)
        
        # Applying the binary operator '-' (line 484)
        result_sub_168669 = python_operator(stypy.reporting.localization.Localization(__file__, 484, 15), '-', result_mul_168660, result_mul_168668)
        
        # Getting the type of 'g' (line 484)
        g_168670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 8), 'g')
        int_168671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 484, 10), 'int')
        # Storing an element on a container (line 484)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 484, 8), g_168670, (int_168671, result_sub_168669))
        
        
        # Call to range(...): (line 485)
        # Processing the call arguments (line 485)
        int_168673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 23), 'int')
        
        # Obtaining the type of the subscript
        int_168674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 34), 'int')
        # Getting the type of 'g' (line 485)
        g_168675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 26), 'g', False)
        # Obtaining the member 'shape' of a type (line 485)
        shape_168676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 26), g_168675, 'shape')
        # Obtaining the member '__getitem__' of a type (line 485)
        getitem___168677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 26), shape_168676, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 485)
        subscript_call_result_168678 = invoke(stypy.reporting.localization.Localization(__file__, 485, 26), getitem___168677, int_168674)
        
        int_168679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 39), 'int')
        # Applying the binary operator '-' (line 485)
        result_sub_168680 = python_operator(stypy.reporting.localization.Localization(__file__, 485, 26), '-', subscript_call_result_168678, int_168679)
        
        # Processing the call keyword arguments (line 485)
        kwargs_168681 = {}
        # Getting the type of 'range' (line 485)
        range_168672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 17), 'range', False)
        # Calling range(args, kwargs) (line 485)
        range_call_result_168682 = invoke(stypy.reporting.localization.Localization(__file__, 485, 17), range_168672, *[int_168673, result_sub_168680], **kwargs_168681)
        
        # Testing the type of a for loop iterable (line 485)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 485, 8), range_call_result_168682)
        # Getting the type of the for loop variable (line 485)
        for_loop_var_168683 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 485, 8), range_call_result_168682)
        # Assigning a type to the variable 'i' (line 485)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 485, 8), 'i', for_loop_var_168683)
        # SSA begins for a for statement (line 485)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Name to a Name (line 486):
        
        # Assigning a Name to a Name (line 486):
        # Getting the type of 't1' (line 486)
        t1_168684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 17), 't1')
        # Assigning a type to the variable 't2' (line 486)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 486, 12), 't2', t1_168684)
        
        # Assigning a BinOp to a Name (line 487):
        
        # Assigning a BinOp to a Name (line 487):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 487)
        i_168685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 19), 'i')
        int_168686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 487, 23), 'int')
        # Applying the binary operator '+' (line 487)
        result_add_168687 = python_operator(stypy.reporting.localization.Localization(__file__, 487, 19), '+', i_168685, int_168686)
        
        # Getting the type of 'x' (line 487)
        x_168688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 17), 'x')
        # Obtaining the member '__getitem__' of a type (line 487)
        getitem___168689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 17), x_168688, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 487)
        subscript_call_result_168690 = invoke(stypy.reporting.localization.Localization(__file__, 487, 17), getitem___168689, result_add_168687)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 487)
        i_168691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 30), 'i')
        # Getting the type of 'x' (line 487)
        x_168692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 28), 'x')
        # Obtaining the member '__getitem__' of a type (line 487)
        getitem___168693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 28), x_168692, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 487)
        subscript_call_result_168694 = invoke(stypy.reporting.localization.Localization(__file__, 487, 28), getitem___168693, i_168691)
        
        int_168695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 487, 36), 'int')
        # Applying the binary operator '**' (line 487)
        result_pow_168696 = python_operator(stypy.reporting.localization.Localization(__file__, 487, 28), '**', subscript_call_result_168694, int_168695)
        
        # Applying the binary operator '-' (line 487)
        result_sub_168697 = python_operator(stypy.reporting.localization.Localization(__file__, 487, 17), '-', subscript_call_result_168690, result_pow_168696)
        
        # Assigning a type to the variable 't1' (line 487)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 487, 12), 't1', result_sub_168697)
        
        # Assigning a BinOp to a Subscript (line 488):
        
        # Assigning a BinOp to a Subscript (line 488):
        int_168698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 488, 19), 'int')
        # Getting the type of 't2' (line 488)
        t2_168699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 23), 't2')
        # Applying the binary operator '*' (line 488)
        result_mul_168700 = python_operator(stypy.reporting.localization.Localization(__file__, 488, 19), '*', int_168698, t2_168699)
        
        int_168701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 488, 28), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 488)
        i_168702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 33), 'i')
        # Getting the type of 'x' (line 488)
        x_168703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 31), 'x')
        # Obtaining the member '__getitem__' of a type (line 488)
        getitem___168704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 31), x_168703, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 488)
        subscript_call_result_168705 = invoke(stypy.reporting.localization.Localization(__file__, 488, 31), getitem___168704, i_168702)
        
        # Applying the binary operator '*' (line 488)
        result_mul_168706 = python_operator(stypy.reporting.localization.Localization(__file__, 488, 28), '*', int_168701, subscript_call_result_168705)
        
        # Getting the type of 't1' (line 488)
        t1_168707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 38), 't1')
        # Applying the binary operator '*' (line 488)
        result_mul_168708 = python_operator(stypy.reporting.localization.Localization(__file__, 488, 36), '*', result_mul_168706, t1_168707)
        
        # Applying the binary operator '-' (line 488)
        result_sub_168709 = python_operator(stypy.reporting.localization.Localization(__file__, 488, 19), '-', result_mul_168700, result_mul_168708)
        
        # Getting the type of 'g' (line 488)
        g_168710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 12), 'g')
        # Getting the type of 'i' (line 488)
        i_168711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 14), 'i')
        # Storing an element on a container (line 488)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 488, 12), g_168710, (i_168711, result_sub_168709))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Subscript (line 489):
        
        # Assigning a BinOp to a Subscript (line 489):
        int_168712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 489, 16), 'int')
        # Getting the type of 't1' (line 489)
        t1_168713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 20), 't1')
        # Applying the binary operator '*' (line 489)
        result_mul_168714 = python_operator(stypy.reporting.localization.Localization(__file__, 489, 16), '*', int_168712, t1_168713)
        
        # Getting the type of 'g' (line 489)
        g_168715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 8), 'g')
        int_168716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 489, 10), 'int')
        # Storing an element on a container (line 489)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 489, 8), g_168715, (int_168716, result_mul_168714))
        # Getting the type of 'g' (line 490)
        g_168717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 15), 'g')
        # Assigning a type to the variable 'stypy_return_type' (line 490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 490, 8), 'stypy_return_type', g_168717)
        
        # ################# End of 'grad(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'grad' in the type store
        # Getting the type of 'stypy_return_type' (line 481)
        stypy_return_type_168718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_168718)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'grad'
        return stypy_return_type_168718

    # Assigning a type to the variable 'grad' (line 481)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 481, 4), 'grad', grad)

    @norecursion
    def func_and_grad(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'func_and_grad'
        module_type_store = module_type_store.open_function_context('func_and_grad', 492, 4, False)
        
        # Passed parameters checking function
        func_and_grad.stypy_localization = localization
        func_and_grad.stypy_type_of_self = None
        func_and_grad.stypy_type_store = module_type_store
        func_and_grad.stypy_function_name = 'func_and_grad'
        func_and_grad.stypy_param_names_list = ['x']
        func_and_grad.stypy_varargs_param_name = None
        func_and_grad.stypy_kwargs_param_name = None
        func_and_grad.stypy_call_defaults = defaults
        func_and_grad.stypy_call_varargs = varargs
        func_and_grad.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'func_and_grad', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'func_and_grad', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'func_and_grad(...)' code ##################

        
        # Obtaining an instance of the builtin type 'tuple' (line 493)
        tuple_168719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 493, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 493)
        # Adding element type (line 493)
        
        # Call to func(...): (line 493)
        # Processing the call arguments (line 493)
        # Getting the type of 'x' (line 493)
        x_168721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 20), 'x', False)
        # Processing the call keyword arguments (line 493)
        kwargs_168722 = {}
        # Getting the type of 'func' (line 493)
        func_168720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 15), 'func', False)
        # Calling func(args, kwargs) (line 493)
        func_call_result_168723 = invoke(stypy.reporting.localization.Localization(__file__, 493, 15), func_168720, *[x_168721], **kwargs_168722)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 493, 15), tuple_168719, func_call_result_168723)
        # Adding element type (line 493)
        
        # Call to grad(...): (line 493)
        # Processing the call arguments (line 493)
        # Getting the type of 'x' (line 493)
        x_168725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 29), 'x', False)
        # Processing the call keyword arguments (line 493)
        kwargs_168726 = {}
        # Getting the type of 'grad' (line 493)
        grad_168724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 24), 'grad', False)
        # Calling grad(args, kwargs) (line 493)
        grad_call_result_168727 = invoke(stypy.reporting.localization.Localization(__file__, 493, 24), grad_168724, *[x_168725], **kwargs_168726)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 493, 15), tuple_168719, grad_call_result_168727)
        
        # Assigning a type to the variable 'stypy_return_type' (line 493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 493, 8), 'stypy_return_type', tuple_168719)
        
        # ################# End of 'func_and_grad(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'func_and_grad' in the type store
        # Getting the type of 'stypy_return_type' (line 492)
        stypy_return_type_168728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_168728)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'func_and_grad'
        return stypy_return_type_168728

    # Assigning a type to the variable 'func_and_grad' (line 492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 492, 4), 'func_and_grad', func_and_grad)
    # Declaration of the 'Problem' class

    class Problem(object, ):

        @norecursion
        def fun(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'fun'
            module_type_store = module_type_store.open_function_context('fun', 496, 8, False)
            # Assigning a type to the variable 'self' (line 497)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            Problem.fun.__dict__.__setitem__('stypy_localization', localization)
            Problem.fun.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            Problem.fun.__dict__.__setitem__('stypy_type_store', module_type_store)
            Problem.fun.__dict__.__setitem__('stypy_function_name', 'Problem.fun')
            Problem.fun.__dict__.__setitem__('stypy_param_names_list', ['x'])
            Problem.fun.__dict__.__setitem__('stypy_varargs_param_name', None)
            Problem.fun.__dict__.__setitem__('stypy_kwargs_param_name', None)
            Problem.fun.__dict__.__setitem__('stypy_call_defaults', defaults)
            Problem.fun.__dict__.__setitem__('stypy_call_varargs', varargs)
            Problem.fun.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            Problem.fun.__dict__.__setitem__('stypy_declared_arg_number', 2)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Problem.fun', ['x'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'fun', localization, ['x'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'fun(...)' code ##################

            
            # Call to func_and_grad(...): (line 497)
            # Processing the call arguments (line 497)
            # Getting the type of 'x' (line 497)
            x_168730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 33), 'x', False)
            # Processing the call keyword arguments (line 497)
            kwargs_168731 = {}
            # Getting the type of 'func_and_grad' (line 497)
            func_and_grad_168729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 19), 'func_and_grad', False)
            # Calling func_and_grad(args, kwargs) (line 497)
            func_and_grad_call_result_168732 = invoke(stypy.reporting.localization.Localization(__file__, 497, 19), func_and_grad_168729, *[x_168730], **kwargs_168731)
            
            # Assigning a type to the variable 'stypy_return_type' (line 497)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'stypy_return_type', func_and_grad_call_result_168732)
            
            # ################# End of 'fun(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'fun' in the type store
            # Getting the type of 'stypy_return_type' (line 496)
            stypy_return_type_168733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_168733)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'fun'
            return stypy_return_type_168733


        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 495, 4, False)
            # Assigning a type to the variable 'self' (line 496)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 496, 4), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Problem.__init__', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            pass
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()

    
    # Assigning a type to the variable 'Problem' (line 495)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 495, 4), 'Problem', Problem)
    
    # Assigning a Num to a Name (line 499):
    
    # Assigning a Num to a Name (line 499):
    float_168734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 499, 12), 'float')
    # Assigning a type to the variable 'factr' (line 499)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 499, 4), 'factr', float_168734)
    
    # Assigning a Num to a Name (line 500):
    
    # Assigning a Num to a Name (line 500):
    float_168735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 500, 12), 'float')
    # Assigning a type to the variable 'pgtol' (line 500)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 500, 4), 'pgtol', float_168735)
    
    # Assigning a Num to a Name (line 502):
    
    # Assigning a Num to a Name (line 502):
    int_168736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 8), 'int')
    # Assigning a type to the variable 'n' (line 502)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 502, 4), 'n', int_168736)
    
    # Assigning a Num to a Name (line 503):
    
    # Assigning a Num to a Name (line 503):
    int_168737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 503, 8), 'int')
    # Assigning a type to the variable 'm' (line 503)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 503, 4), 'm', int_168737)
    
    # Assigning a BinOp to a Name (line 505):
    
    # Assigning a BinOp to a Name (line 505):
    
    # Obtaining an instance of the builtin type 'list' (line 505)
    list_168738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 505, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 505)
    # Adding element type (line 505)
    
    # Obtaining an instance of the builtin type 'tuple' (line 505)
    tuple_168739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 505, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 505)
    # Adding element type (line 505)
    # Getting the type of 'None' (line 505)
    None_168740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 15), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 505, 15), tuple_168739, None_168740)
    # Adding element type (line 505)
    # Getting the type of 'None' (line 505)
    None_168741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 21), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 505, 15), tuple_168739, None_168741)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 505, 13), list_168738, tuple_168739)
    
    # Getting the type of 'n' (line 505)
    n_168742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 30), 'n')
    # Applying the binary operator '*' (line 505)
    result_mul_168743 = python_operator(stypy.reporting.localization.Localization(__file__, 505, 13), '*', list_168738, n_168742)
    
    # Assigning a type to the variable 'bounds' (line 505)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 505, 4), 'bounds', result_mul_168743)
    
    
    # Call to range(...): (line 506)
    # Processing the call arguments (line 506)
    int_168745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 506, 19), 'int')
    # Getting the type of 'n' (line 506)
    n_168746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 22), 'n', False)
    int_168747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 506, 25), 'int')
    # Processing the call keyword arguments (line 506)
    kwargs_168748 = {}
    # Getting the type of 'range' (line 506)
    range_168744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 13), 'range', False)
    # Calling range(args, kwargs) (line 506)
    range_call_result_168749 = invoke(stypy.reporting.localization.Localization(__file__, 506, 13), range_168744, *[int_168745, n_168746, int_168747], **kwargs_168748)
    
    # Testing the type of a for loop iterable (line 506)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 506, 4), range_call_result_168749)
    # Getting the type of the for loop variable (line 506)
    for_loop_var_168750 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 506, 4), range_call_result_168749)
    # Assigning a type to the variable 'i' (line 506)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 506, 4), 'i', for_loop_var_168750)
    # SSA begins for a for statement (line 506)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Tuple to a Subscript (line 507):
    
    # Assigning a Tuple to a Subscript (line 507):
    
    # Obtaining an instance of the builtin type 'tuple' (line 507)
    tuple_168751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 507, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 507)
    # Adding element type (line 507)
    float_168752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 507, 21), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 507, 21), tuple_168751, float_168752)
    # Adding element type (line 507)
    int_168753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 507, 26), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 507, 21), tuple_168751, int_168753)
    
    # Getting the type of 'bounds' (line 507)
    bounds_168754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 8), 'bounds')
    # Getting the type of 'i' (line 507)
    i_168755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 15), 'i')
    # Storing an element on a container (line 507)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 507, 8), bounds_168754, (i_168755, tuple_168751))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to range(...): (line 508)
    # Processing the call arguments (line 508)
    int_168757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 508, 19), 'int')
    # Getting the type of 'n' (line 508)
    n_168758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 22), 'n', False)
    int_168759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 508, 25), 'int')
    # Processing the call keyword arguments (line 508)
    kwargs_168760 = {}
    # Getting the type of 'range' (line 508)
    range_168756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 13), 'range', False)
    # Calling range(args, kwargs) (line 508)
    range_call_result_168761 = invoke(stypy.reporting.localization.Localization(__file__, 508, 13), range_168756, *[int_168757, n_168758, int_168759], **kwargs_168760)
    
    # Testing the type of a for loop iterable (line 508)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 508, 4), range_call_result_168761)
    # Getting the type of the for loop variable (line 508)
    for_loop_var_168762 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 508, 4), range_call_result_168761)
    # Assigning a type to the variable 'i' (line 508)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 4), 'i', for_loop_var_168762)
    # SSA begins for a for statement (line 508)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Tuple to a Subscript (line 509):
    
    # Assigning a Tuple to a Subscript (line 509):
    
    # Obtaining an instance of the builtin type 'tuple' (line 509)
    tuple_168763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 509, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 509)
    # Adding element type (line 509)
    int_168764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 509, 21), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 509, 21), tuple_168763, int_168764)
    # Adding element type (line 509)
    int_168765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 509, 27), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 509, 21), tuple_168763, int_168765)
    
    # Getting the type of 'bounds' (line 509)
    bounds_168766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 8), 'bounds')
    # Getting the type of 'i' (line 509)
    i_168767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 15), 'i')
    # Storing an element on a container (line 509)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 509, 8), bounds_168766, (i_168767, tuple_168763))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 511):
    
    # Assigning a Call to a Name (line 511):
    
    # Call to zeros(...): (line 511)
    # Processing the call arguments (line 511)
    
    # Obtaining an instance of the builtin type 'tuple' (line 511)
    tuple_168769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 511, 16), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 511)
    # Adding element type (line 511)
    # Getting the type of 'n' (line 511)
    n_168770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 16), 'n', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 511, 16), tuple_168769, n_168770)
    
    # Getting the type of 'float64' (line 511)
    float64_168771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 21), 'float64', False)
    # Processing the call keyword arguments (line 511)
    kwargs_168772 = {}
    # Getting the type of 'zeros' (line 511)
    zeros_168768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 9), 'zeros', False)
    # Calling zeros(args, kwargs) (line 511)
    zeros_call_result_168773 = invoke(stypy.reporting.localization.Localization(__file__, 511, 9), zeros_168768, *[tuple_168769, float64_168771], **kwargs_168772)
    
    # Assigning a type to the variable 'x0' (line 511)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 511, 4), 'x0', zeros_call_result_168773)
    
    # Assigning a Num to a Subscript (line 512):
    
    # Assigning a Num to a Subscript (line 512):
    int_168774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 512, 12), 'int')
    # Getting the type of 'x0' (line 512)
    x0_168775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 4), 'x0')
    slice_168776 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 512, 4), None, None, None)
    # Storing an element on a container (line 512)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 512, 4), x0_168775, (slice_168776, int_168774))
    
    # Assigning a Call to a Tuple (line 514):
    
    # Assigning a Subscript to a Name (line 514):
    
    # Obtaining the type of the subscript
    int_168777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 514, 4), 'int')
    
    # Call to fmin_l_bfgs_b(...): (line 514)
    # Processing the call arguments (line 514)
    # Getting the type of 'func' (line 514)
    func_168779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 28), 'func', False)
    # Getting the type of 'x0' (line 514)
    x0_168780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 34), 'x0', False)
    # Processing the call keyword arguments (line 514)
    # Getting the type of 'grad' (line 514)
    grad_168781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 45), 'grad', False)
    keyword_168782 = grad_168781
    # Getting the type of 'm' (line 514)
    m_168783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 53), 'm', False)
    keyword_168784 = m_168783
    # Getting the type of 'factr' (line 515)
    factr_168785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 34), 'factr', False)
    keyword_168786 = factr_168785
    # Getting the type of 'pgtol' (line 515)
    pgtol_168787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 47), 'pgtol', False)
    keyword_168788 = pgtol_168787
    kwargs_168789 = {'factr': keyword_168786, 'm': keyword_168784, 'fprime': keyword_168782, 'pgtol': keyword_168788}
    # Getting the type of 'fmin_l_bfgs_b' (line 514)
    fmin_l_bfgs_b_168778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 14), 'fmin_l_bfgs_b', False)
    # Calling fmin_l_bfgs_b(args, kwargs) (line 514)
    fmin_l_bfgs_b_call_result_168790 = invoke(stypy.reporting.localization.Localization(__file__, 514, 14), fmin_l_bfgs_b_168778, *[func_168779, x0_168780], **kwargs_168789)
    
    # Obtaining the member '__getitem__' of a type (line 514)
    getitem___168791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 4), fmin_l_bfgs_b_call_result_168790, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 514)
    subscript_call_result_168792 = invoke(stypy.reporting.localization.Localization(__file__, 514, 4), getitem___168791, int_168777)
    
    # Assigning a type to the variable 'tuple_var_assignment_167654' (line 514)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 4), 'tuple_var_assignment_167654', subscript_call_result_168792)
    
    # Assigning a Subscript to a Name (line 514):
    
    # Obtaining the type of the subscript
    int_168793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 514, 4), 'int')
    
    # Call to fmin_l_bfgs_b(...): (line 514)
    # Processing the call arguments (line 514)
    # Getting the type of 'func' (line 514)
    func_168795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 28), 'func', False)
    # Getting the type of 'x0' (line 514)
    x0_168796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 34), 'x0', False)
    # Processing the call keyword arguments (line 514)
    # Getting the type of 'grad' (line 514)
    grad_168797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 45), 'grad', False)
    keyword_168798 = grad_168797
    # Getting the type of 'm' (line 514)
    m_168799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 53), 'm', False)
    keyword_168800 = m_168799
    # Getting the type of 'factr' (line 515)
    factr_168801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 34), 'factr', False)
    keyword_168802 = factr_168801
    # Getting the type of 'pgtol' (line 515)
    pgtol_168803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 47), 'pgtol', False)
    keyword_168804 = pgtol_168803
    kwargs_168805 = {'factr': keyword_168802, 'm': keyword_168800, 'fprime': keyword_168798, 'pgtol': keyword_168804}
    # Getting the type of 'fmin_l_bfgs_b' (line 514)
    fmin_l_bfgs_b_168794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 14), 'fmin_l_bfgs_b', False)
    # Calling fmin_l_bfgs_b(args, kwargs) (line 514)
    fmin_l_bfgs_b_call_result_168806 = invoke(stypy.reporting.localization.Localization(__file__, 514, 14), fmin_l_bfgs_b_168794, *[func_168795, x0_168796], **kwargs_168805)
    
    # Obtaining the member '__getitem__' of a type (line 514)
    getitem___168807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 4), fmin_l_bfgs_b_call_result_168806, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 514)
    subscript_call_result_168808 = invoke(stypy.reporting.localization.Localization(__file__, 514, 4), getitem___168807, int_168793)
    
    # Assigning a type to the variable 'tuple_var_assignment_167655' (line 514)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 4), 'tuple_var_assignment_167655', subscript_call_result_168808)
    
    # Assigning a Subscript to a Name (line 514):
    
    # Obtaining the type of the subscript
    int_168809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 514, 4), 'int')
    
    # Call to fmin_l_bfgs_b(...): (line 514)
    # Processing the call arguments (line 514)
    # Getting the type of 'func' (line 514)
    func_168811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 28), 'func', False)
    # Getting the type of 'x0' (line 514)
    x0_168812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 34), 'x0', False)
    # Processing the call keyword arguments (line 514)
    # Getting the type of 'grad' (line 514)
    grad_168813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 45), 'grad', False)
    keyword_168814 = grad_168813
    # Getting the type of 'm' (line 514)
    m_168815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 53), 'm', False)
    keyword_168816 = m_168815
    # Getting the type of 'factr' (line 515)
    factr_168817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 34), 'factr', False)
    keyword_168818 = factr_168817
    # Getting the type of 'pgtol' (line 515)
    pgtol_168819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 47), 'pgtol', False)
    keyword_168820 = pgtol_168819
    kwargs_168821 = {'factr': keyword_168818, 'm': keyword_168816, 'fprime': keyword_168814, 'pgtol': keyword_168820}
    # Getting the type of 'fmin_l_bfgs_b' (line 514)
    fmin_l_bfgs_b_168810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 14), 'fmin_l_bfgs_b', False)
    # Calling fmin_l_bfgs_b(args, kwargs) (line 514)
    fmin_l_bfgs_b_call_result_168822 = invoke(stypy.reporting.localization.Localization(__file__, 514, 14), fmin_l_bfgs_b_168810, *[func_168811, x0_168812], **kwargs_168821)
    
    # Obtaining the member '__getitem__' of a type (line 514)
    getitem___168823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 4), fmin_l_bfgs_b_call_result_168822, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 514)
    subscript_call_result_168824 = invoke(stypy.reporting.localization.Localization(__file__, 514, 4), getitem___168823, int_168809)
    
    # Assigning a type to the variable 'tuple_var_assignment_167656' (line 514)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 4), 'tuple_var_assignment_167656', subscript_call_result_168824)
    
    # Assigning a Name to a Name (line 514):
    # Getting the type of 'tuple_var_assignment_167654' (line 514)
    tuple_var_assignment_167654_168825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 4), 'tuple_var_assignment_167654')
    # Assigning a type to the variable 'x' (line 514)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 4), 'x', tuple_var_assignment_167654_168825)
    
    # Assigning a Name to a Name (line 514):
    # Getting the type of 'tuple_var_assignment_167655' (line 514)
    tuple_var_assignment_167655_168826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 4), 'tuple_var_assignment_167655')
    # Assigning a type to the variable 'f' (line 514)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 7), 'f', tuple_var_assignment_167655_168826)
    
    # Assigning a Name to a Name (line 514):
    # Getting the type of 'tuple_var_assignment_167656' (line 514)
    tuple_var_assignment_167656_168827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 4), 'tuple_var_assignment_167656')
    # Assigning a type to the variable 'd' (line 514)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 10), 'd', tuple_var_assignment_167656_168827)
    
    # Call to print(...): (line 516)
    # Processing the call arguments (line 516)
    # Getting the type of 'x' (line 516)
    x_168829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 10), 'x', False)
    # Processing the call keyword arguments (line 516)
    kwargs_168830 = {}
    # Getting the type of 'print' (line 516)
    print_168828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 4), 'print', False)
    # Calling print(args, kwargs) (line 516)
    print_call_result_168831 = invoke(stypy.reporting.localization.Localization(__file__, 516, 4), print_168828, *[x_168829], **kwargs_168830)
    
    
    # Call to print(...): (line 517)
    # Processing the call arguments (line 517)
    # Getting the type of 'f' (line 517)
    f_168833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 10), 'f', False)
    # Processing the call keyword arguments (line 517)
    kwargs_168834 = {}
    # Getting the type of 'print' (line 517)
    print_168832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 4), 'print', False)
    # Calling print(args, kwargs) (line 517)
    print_call_result_168835 = invoke(stypy.reporting.localization.Localization(__file__, 517, 4), print_168832, *[f_168833], **kwargs_168834)
    
    
    # Call to print(...): (line 518)
    # Processing the call arguments (line 518)
    # Getting the type of 'd' (line 518)
    d_168837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 10), 'd', False)
    # Processing the call keyword arguments (line 518)
    kwargs_168838 = {}
    # Getting the type of 'print' (line 518)
    print_168836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 4), 'print', False)
    # Calling print(args, kwargs) (line 518)
    print_call_result_168839 = invoke(stypy.reporting.localization.Localization(__file__, 518, 4), print_168836, *[d_168837], **kwargs_168838)
    
    
    # Assigning a Call to a Tuple (line 519):
    
    # Assigning a Subscript to a Name (line 519):
    
    # Obtaining the type of the subscript
    int_168840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 519, 4), 'int')
    
    # Call to fmin_l_bfgs_b(...): (line 519)
    # Processing the call arguments (line 519)
    # Getting the type of 'func' (line 519)
    func_168842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 28), 'func', False)
    # Getting the type of 'x0' (line 519)
    x0_168843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 34), 'x0', False)
    # Processing the call keyword arguments (line 519)
    int_168844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 519, 50), 'int')
    keyword_168845 = int_168844
    # Getting the type of 'm' (line 520)
    m_168846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 30), 'm', False)
    keyword_168847 = m_168846
    # Getting the type of 'factr' (line 520)
    factr_168848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 39), 'factr', False)
    keyword_168849 = factr_168848
    # Getting the type of 'pgtol' (line 520)
    pgtol_168850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 52), 'pgtol', False)
    keyword_168851 = pgtol_168850
    kwargs_168852 = {'m': keyword_168847, 'approx_grad': keyword_168845, 'pgtol': keyword_168851, 'factr': keyword_168849}
    # Getting the type of 'fmin_l_bfgs_b' (line 519)
    fmin_l_bfgs_b_168841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 14), 'fmin_l_bfgs_b', False)
    # Calling fmin_l_bfgs_b(args, kwargs) (line 519)
    fmin_l_bfgs_b_call_result_168853 = invoke(stypy.reporting.localization.Localization(__file__, 519, 14), fmin_l_bfgs_b_168841, *[func_168842, x0_168843], **kwargs_168852)
    
    # Obtaining the member '__getitem__' of a type (line 519)
    getitem___168854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 4), fmin_l_bfgs_b_call_result_168853, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 519)
    subscript_call_result_168855 = invoke(stypy.reporting.localization.Localization(__file__, 519, 4), getitem___168854, int_168840)
    
    # Assigning a type to the variable 'tuple_var_assignment_167657' (line 519)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 4), 'tuple_var_assignment_167657', subscript_call_result_168855)
    
    # Assigning a Subscript to a Name (line 519):
    
    # Obtaining the type of the subscript
    int_168856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 519, 4), 'int')
    
    # Call to fmin_l_bfgs_b(...): (line 519)
    # Processing the call arguments (line 519)
    # Getting the type of 'func' (line 519)
    func_168858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 28), 'func', False)
    # Getting the type of 'x0' (line 519)
    x0_168859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 34), 'x0', False)
    # Processing the call keyword arguments (line 519)
    int_168860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 519, 50), 'int')
    keyword_168861 = int_168860
    # Getting the type of 'm' (line 520)
    m_168862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 30), 'm', False)
    keyword_168863 = m_168862
    # Getting the type of 'factr' (line 520)
    factr_168864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 39), 'factr', False)
    keyword_168865 = factr_168864
    # Getting the type of 'pgtol' (line 520)
    pgtol_168866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 52), 'pgtol', False)
    keyword_168867 = pgtol_168866
    kwargs_168868 = {'m': keyword_168863, 'approx_grad': keyword_168861, 'pgtol': keyword_168867, 'factr': keyword_168865}
    # Getting the type of 'fmin_l_bfgs_b' (line 519)
    fmin_l_bfgs_b_168857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 14), 'fmin_l_bfgs_b', False)
    # Calling fmin_l_bfgs_b(args, kwargs) (line 519)
    fmin_l_bfgs_b_call_result_168869 = invoke(stypy.reporting.localization.Localization(__file__, 519, 14), fmin_l_bfgs_b_168857, *[func_168858, x0_168859], **kwargs_168868)
    
    # Obtaining the member '__getitem__' of a type (line 519)
    getitem___168870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 4), fmin_l_bfgs_b_call_result_168869, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 519)
    subscript_call_result_168871 = invoke(stypy.reporting.localization.Localization(__file__, 519, 4), getitem___168870, int_168856)
    
    # Assigning a type to the variable 'tuple_var_assignment_167658' (line 519)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 4), 'tuple_var_assignment_167658', subscript_call_result_168871)
    
    # Assigning a Subscript to a Name (line 519):
    
    # Obtaining the type of the subscript
    int_168872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 519, 4), 'int')
    
    # Call to fmin_l_bfgs_b(...): (line 519)
    # Processing the call arguments (line 519)
    # Getting the type of 'func' (line 519)
    func_168874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 28), 'func', False)
    # Getting the type of 'x0' (line 519)
    x0_168875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 34), 'x0', False)
    # Processing the call keyword arguments (line 519)
    int_168876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 519, 50), 'int')
    keyword_168877 = int_168876
    # Getting the type of 'm' (line 520)
    m_168878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 30), 'm', False)
    keyword_168879 = m_168878
    # Getting the type of 'factr' (line 520)
    factr_168880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 39), 'factr', False)
    keyword_168881 = factr_168880
    # Getting the type of 'pgtol' (line 520)
    pgtol_168882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 52), 'pgtol', False)
    keyword_168883 = pgtol_168882
    kwargs_168884 = {'m': keyword_168879, 'approx_grad': keyword_168877, 'pgtol': keyword_168883, 'factr': keyword_168881}
    # Getting the type of 'fmin_l_bfgs_b' (line 519)
    fmin_l_bfgs_b_168873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 14), 'fmin_l_bfgs_b', False)
    # Calling fmin_l_bfgs_b(args, kwargs) (line 519)
    fmin_l_bfgs_b_call_result_168885 = invoke(stypy.reporting.localization.Localization(__file__, 519, 14), fmin_l_bfgs_b_168873, *[func_168874, x0_168875], **kwargs_168884)
    
    # Obtaining the member '__getitem__' of a type (line 519)
    getitem___168886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 4), fmin_l_bfgs_b_call_result_168885, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 519)
    subscript_call_result_168887 = invoke(stypy.reporting.localization.Localization(__file__, 519, 4), getitem___168886, int_168872)
    
    # Assigning a type to the variable 'tuple_var_assignment_167659' (line 519)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 4), 'tuple_var_assignment_167659', subscript_call_result_168887)
    
    # Assigning a Name to a Name (line 519):
    # Getting the type of 'tuple_var_assignment_167657' (line 519)
    tuple_var_assignment_167657_168888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 4), 'tuple_var_assignment_167657')
    # Assigning a type to the variable 'x' (line 519)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 4), 'x', tuple_var_assignment_167657_168888)
    
    # Assigning a Name to a Name (line 519):
    # Getting the type of 'tuple_var_assignment_167658' (line 519)
    tuple_var_assignment_167658_168889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 4), 'tuple_var_assignment_167658')
    # Assigning a type to the variable 'f' (line 519)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 7), 'f', tuple_var_assignment_167658_168889)
    
    # Assigning a Name to a Name (line 519):
    # Getting the type of 'tuple_var_assignment_167659' (line 519)
    tuple_var_assignment_167659_168890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 4), 'tuple_var_assignment_167659')
    # Assigning a type to the variable 'd' (line 519)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 10), 'd', tuple_var_assignment_167659_168890)
    
    # Call to print(...): (line 521)
    # Processing the call arguments (line 521)
    # Getting the type of 'x' (line 521)
    x_168892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 10), 'x', False)
    # Processing the call keyword arguments (line 521)
    kwargs_168893 = {}
    # Getting the type of 'print' (line 521)
    print_168891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 4), 'print', False)
    # Calling print(args, kwargs) (line 521)
    print_call_result_168894 = invoke(stypy.reporting.localization.Localization(__file__, 521, 4), print_168891, *[x_168892], **kwargs_168893)
    
    
    # Call to print(...): (line 522)
    # Processing the call arguments (line 522)
    # Getting the type of 'f' (line 522)
    f_168896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 10), 'f', False)
    # Processing the call keyword arguments (line 522)
    kwargs_168897 = {}
    # Getting the type of 'print' (line 522)
    print_168895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 4), 'print', False)
    # Calling print(args, kwargs) (line 522)
    print_call_result_168898 = invoke(stypy.reporting.localization.Localization(__file__, 522, 4), print_168895, *[f_168896], **kwargs_168897)
    
    
    # Call to print(...): (line 523)
    # Processing the call arguments (line 523)
    # Getting the type of 'd' (line 523)
    d_168900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 10), 'd', False)
    # Processing the call keyword arguments (line 523)
    kwargs_168901 = {}
    # Getting the type of 'print' (line 523)
    print_168899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 4), 'print', False)
    # Calling print(args, kwargs) (line 523)
    print_call_result_168902 = invoke(stypy.reporting.localization.Localization(__file__, 523, 4), print_168899, *[d_168900], **kwargs_168901)
    
    
    # Assigning a Call to a Tuple (line 524):
    
    # Assigning a Subscript to a Name (line 524):
    
    # Obtaining the type of the subscript
    int_168903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, 4), 'int')
    
    # Call to fmin_l_bfgs_b(...): (line 524)
    # Processing the call arguments (line 524)
    # Getting the type of 'func_and_grad' (line 524)
    func_and_grad_168905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 28), 'func_and_grad', False)
    # Getting the type of 'x0' (line 524)
    x0_168906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 43), 'x0', False)
    # Processing the call keyword arguments (line 524)
    int_168907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, 59), 'int')
    keyword_168908 = int_168907
    # Getting the type of 'm' (line 525)
    m_168909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 30), 'm', False)
    keyword_168910 = m_168909
    # Getting the type of 'factr' (line 525)
    factr_168911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 39), 'factr', False)
    keyword_168912 = factr_168911
    # Getting the type of 'pgtol' (line 525)
    pgtol_168913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 52), 'pgtol', False)
    keyword_168914 = pgtol_168913
    kwargs_168915 = {'m': keyword_168910, 'approx_grad': keyword_168908, 'pgtol': keyword_168914, 'factr': keyword_168912}
    # Getting the type of 'fmin_l_bfgs_b' (line 524)
    fmin_l_bfgs_b_168904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 14), 'fmin_l_bfgs_b', False)
    # Calling fmin_l_bfgs_b(args, kwargs) (line 524)
    fmin_l_bfgs_b_call_result_168916 = invoke(stypy.reporting.localization.Localization(__file__, 524, 14), fmin_l_bfgs_b_168904, *[func_and_grad_168905, x0_168906], **kwargs_168915)
    
    # Obtaining the member '__getitem__' of a type (line 524)
    getitem___168917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 4), fmin_l_bfgs_b_call_result_168916, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 524)
    subscript_call_result_168918 = invoke(stypy.reporting.localization.Localization(__file__, 524, 4), getitem___168917, int_168903)
    
    # Assigning a type to the variable 'tuple_var_assignment_167660' (line 524)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 4), 'tuple_var_assignment_167660', subscript_call_result_168918)
    
    # Assigning a Subscript to a Name (line 524):
    
    # Obtaining the type of the subscript
    int_168919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, 4), 'int')
    
    # Call to fmin_l_bfgs_b(...): (line 524)
    # Processing the call arguments (line 524)
    # Getting the type of 'func_and_grad' (line 524)
    func_and_grad_168921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 28), 'func_and_grad', False)
    # Getting the type of 'x0' (line 524)
    x0_168922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 43), 'x0', False)
    # Processing the call keyword arguments (line 524)
    int_168923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, 59), 'int')
    keyword_168924 = int_168923
    # Getting the type of 'm' (line 525)
    m_168925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 30), 'm', False)
    keyword_168926 = m_168925
    # Getting the type of 'factr' (line 525)
    factr_168927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 39), 'factr', False)
    keyword_168928 = factr_168927
    # Getting the type of 'pgtol' (line 525)
    pgtol_168929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 52), 'pgtol', False)
    keyword_168930 = pgtol_168929
    kwargs_168931 = {'m': keyword_168926, 'approx_grad': keyword_168924, 'pgtol': keyword_168930, 'factr': keyword_168928}
    # Getting the type of 'fmin_l_bfgs_b' (line 524)
    fmin_l_bfgs_b_168920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 14), 'fmin_l_bfgs_b', False)
    # Calling fmin_l_bfgs_b(args, kwargs) (line 524)
    fmin_l_bfgs_b_call_result_168932 = invoke(stypy.reporting.localization.Localization(__file__, 524, 14), fmin_l_bfgs_b_168920, *[func_and_grad_168921, x0_168922], **kwargs_168931)
    
    # Obtaining the member '__getitem__' of a type (line 524)
    getitem___168933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 4), fmin_l_bfgs_b_call_result_168932, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 524)
    subscript_call_result_168934 = invoke(stypy.reporting.localization.Localization(__file__, 524, 4), getitem___168933, int_168919)
    
    # Assigning a type to the variable 'tuple_var_assignment_167661' (line 524)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 4), 'tuple_var_assignment_167661', subscript_call_result_168934)
    
    # Assigning a Subscript to a Name (line 524):
    
    # Obtaining the type of the subscript
    int_168935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, 4), 'int')
    
    # Call to fmin_l_bfgs_b(...): (line 524)
    # Processing the call arguments (line 524)
    # Getting the type of 'func_and_grad' (line 524)
    func_and_grad_168937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 28), 'func_and_grad', False)
    # Getting the type of 'x0' (line 524)
    x0_168938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 43), 'x0', False)
    # Processing the call keyword arguments (line 524)
    int_168939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, 59), 'int')
    keyword_168940 = int_168939
    # Getting the type of 'm' (line 525)
    m_168941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 30), 'm', False)
    keyword_168942 = m_168941
    # Getting the type of 'factr' (line 525)
    factr_168943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 39), 'factr', False)
    keyword_168944 = factr_168943
    # Getting the type of 'pgtol' (line 525)
    pgtol_168945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 52), 'pgtol', False)
    keyword_168946 = pgtol_168945
    kwargs_168947 = {'m': keyword_168942, 'approx_grad': keyword_168940, 'pgtol': keyword_168946, 'factr': keyword_168944}
    # Getting the type of 'fmin_l_bfgs_b' (line 524)
    fmin_l_bfgs_b_168936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 14), 'fmin_l_bfgs_b', False)
    # Calling fmin_l_bfgs_b(args, kwargs) (line 524)
    fmin_l_bfgs_b_call_result_168948 = invoke(stypy.reporting.localization.Localization(__file__, 524, 14), fmin_l_bfgs_b_168936, *[func_and_grad_168937, x0_168938], **kwargs_168947)
    
    # Obtaining the member '__getitem__' of a type (line 524)
    getitem___168949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 4), fmin_l_bfgs_b_call_result_168948, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 524)
    subscript_call_result_168950 = invoke(stypy.reporting.localization.Localization(__file__, 524, 4), getitem___168949, int_168935)
    
    # Assigning a type to the variable 'tuple_var_assignment_167662' (line 524)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 4), 'tuple_var_assignment_167662', subscript_call_result_168950)
    
    # Assigning a Name to a Name (line 524):
    # Getting the type of 'tuple_var_assignment_167660' (line 524)
    tuple_var_assignment_167660_168951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 4), 'tuple_var_assignment_167660')
    # Assigning a type to the variable 'x' (line 524)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 4), 'x', tuple_var_assignment_167660_168951)
    
    # Assigning a Name to a Name (line 524):
    # Getting the type of 'tuple_var_assignment_167661' (line 524)
    tuple_var_assignment_167661_168952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 4), 'tuple_var_assignment_167661')
    # Assigning a type to the variable 'f' (line 524)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 7), 'f', tuple_var_assignment_167661_168952)
    
    # Assigning a Name to a Name (line 524):
    # Getting the type of 'tuple_var_assignment_167662' (line 524)
    tuple_var_assignment_167662_168953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 4), 'tuple_var_assignment_167662')
    # Assigning a type to the variable 'd' (line 524)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 10), 'd', tuple_var_assignment_167662_168953)
    
    # Call to print(...): (line 526)
    # Processing the call arguments (line 526)
    # Getting the type of 'x' (line 526)
    x_168955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 10), 'x', False)
    # Processing the call keyword arguments (line 526)
    kwargs_168956 = {}
    # Getting the type of 'print' (line 526)
    print_168954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 4), 'print', False)
    # Calling print(args, kwargs) (line 526)
    print_call_result_168957 = invoke(stypy.reporting.localization.Localization(__file__, 526, 4), print_168954, *[x_168955], **kwargs_168956)
    
    
    # Call to print(...): (line 527)
    # Processing the call arguments (line 527)
    # Getting the type of 'f' (line 527)
    f_168959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 10), 'f', False)
    # Processing the call keyword arguments (line 527)
    kwargs_168960 = {}
    # Getting the type of 'print' (line 527)
    print_168958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 4), 'print', False)
    # Calling print(args, kwargs) (line 527)
    print_call_result_168961 = invoke(stypy.reporting.localization.Localization(__file__, 527, 4), print_168958, *[f_168959], **kwargs_168960)
    
    
    # Call to print(...): (line 528)
    # Processing the call arguments (line 528)
    # Getting the type of 'd' (line 528)
    d_168963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 10), 'd', False)
    # Processing the call keyword arguments (line 528)
    kwargs_168964 = {}
    # Getting the type of 'print' (line 528)
    print_168962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 4), 'print', False)
    # Calling print(args, kwargs) (line 528)
    print_call_result_168965 = invoke(stypy.reporting.localization.Localization(__file__, 528, 4), print_168962, *[d_168963], **kwargs_168964)
    
    
    # Assigning a Call to a Name (line 529):
    
    # Assigning a Call to a Name (line 529):
    
    # Call to Problem(...): (line 529)
    # Processing the call keyword arguments (line 529)
    kwargs_168967 = {}
    # Getting the type of 'Problem' (line 529)
    Problem_168966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 8), 'Problem', False)
    # Calling Problem(args, kwargs) (line 529)
    Problem_call_result_168968 = invoke(stypy.reporting.localization.Localization(__file__, 529, 8), Problem_168966, *[], **kwargs_168967)
    
    # Assigning a type to the variable 'p' (line 529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 4), 'p', Problem_call_result_168968)
    
    # Assigning a Call to a Tuple (line 530):
    
    # Assigning a Subscript to a Name (line 530):
    
    # Obtaining the type of the subscript
    int_168969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 530, 4), 'int')
    
    # Call to fmin_l_bfgs_b(...): (line 530)
    # Processing the call arguments (line 530)
    # Getting the type of 'p' (line 530)
    p_168971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 28), 'p', False)
    # Obtaining the member 'fun' of a type (line 530)
    fun_168972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 28), p_168971, 'fun')
    # Getting the type of 'x0' (line 530)
    x0_168973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 35), 'x0', False)
    # Processing the call keyword arguments (line 530)
    int_168974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 530, 51), 'int')
    keyword_168975 = int_168974
    # Getting the type of 'm' (line 531)
    m_168976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 30), 'm', False)
    keyword_168977 = m_168976
    # Getting the type of 'factr' (line 531)
    factr_168978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 39), 'factr', False)
    keyword_168979 = factr_168978
    # Getting the type of 'pgtol' (line 531)
    pgtol_168980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 52), 'pgtol', False)
    keyword_168981 = pgtol_168980
    kwargs_168982 = {'m': keyword_168977, 'approx_grad': keyword_168975, 'pgtol': keyword_168981, 'factr': keyword_168979}
    # Getting the type of 'fmin_l_bfgs_b' (line 530)
    fmin_l_bfgs_b_168970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 14), 'fmin_l_bfgs_b', False)
    # Calling fmin_l_bfgs_b(args, kwargs) (line 530)
    fmin_l_bfgs_b_call_result_168983 = invoke(stypy.reporting.localization.Localization(__file__, 530, 14), fmin_l_bfgs_b_168970, *[fun_168972, x0_168973], **kwargs_168982)
    
    # Obtaining the member '__getitem__' of a type (line 530)
    getitem___168984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 4), fmin_l_bfgs_b_call_result_168983, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 530)
    subscript_call_result_168985 = invoke(stypy.reporting.localization.Localization(__file__, 530, 4), getitem___168984, int_168969)
    
    # Assigning a type to the variable 'tuple_var_assignment_167663' (line 530)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 530, 4), 'tuple_var_assignment_167663', subscript_call_result_168985)
    
    # Assigning a Subscript to a Name (line 530):
    
    # Obtaining the type of the subscript
    int_168986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 530, 4), 'int')
    
    # Call to fmin_l_bfgs_b(...): (line 530)
    # Processing the call arguments (line 530)
    # Getting the type of 'p' (line 530)
    p_168988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 28), 'p', False)
    # Obtaining the member 'fun' of a type (line 530)
    fun_168989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 28), p_168988, 'fun')
    # Getting the type of 'x0' (line 530)
    x0_168990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 35), 'x0', False)
    # Processing the call keyword arguments (line 530)
    int_168991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 530, 51), 'int')
    keyword_168992 = int_168991
    # Getting the type of 'm' (line 531)
    m_168993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 30), 'm', False)
    keyword_168994 = m_168993
    # Getting the type of 'factr' (line 531)
    factr_168995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 39), 'factr', False)
    keyword_168996 = factr_168995
    # Getting the type of 'pgtol' (line 531)
    pgtol_168997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 52), 'pgtol', False)
    keyword_168998 = pgtol_168997
    kwargs_168999 = {'m': keyword_168994, 'approx_grad': keyword_168992, 'pgtol': keyword_168998, 'factr': keyword_168996}
    # Getting the type of 'fmin_l_bfgs_b' (line 530)
    fmin_l_bfgs_b_168987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 14), 'fmin_l_bfgs_b', False)
    # Calling fmin_l_bfgs_b(args, kwargs) (line 530)
    fmin_l_bfgs_b_call_result_169000 = invoke(stypy.reporting.localization.Localization(__file__, 530, 14), fmin_l_bfgs_b_168987, *[fun_168989, x0_168990], **kwargs_168999)
    
    # Obtaining the member '__getitem__' of a type (line 530)
    getitem___169001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 4), fmin_l_bfgs_b_call_result_169000, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 530)
    subscript_call_result_169002 = invoke(stypy.reporting.localization.Localization(__file__, 530, 4), getitem___169001, int_168986)
    
    # Assigning a type to the variable 'tuple_var_assignment_167664' (line 530)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 530, 4), 'tuple_var_assignment_167664', subscript_call_result_169002)
    
    # Assigning a Subscript to a Name (line 530):
    
    # Obtaining the type of the subscript
    int_169003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 530, 4), 'int')
    
    # Call to fmin_l_bfgs_b(...): (line 530)
    # Processing the call arguments (line 530)
    # Getting the type of 'p' (line 530)
    p_169005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 28), 'p', False)
    # Obtaining the member 'fun' of a type (line 530)
    fun_169006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 28), p_169005, 'fun')
    # Getting the type of 'x0' (line 530)
    x0_169007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 35), 'x0', False)
    # Processing the call keyword arguments (line 530)
    int_169008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 530, 51), 'int')
    keyword_169009 = int_169008
    # Getting the type of 'm' (line 531)
    m_169010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 30), 'm', False)
    keyword_169011 = m_169010
    # Getting the type of 'factr' (line 531)
    factr_169012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 39), 'factr', False)
    keyword_169013 = factr_169012
    # Getting the type of 'pgtol' (line 531)
    pgtol_169014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 52), 'pgtol', False)
    keyword_169015 = pgtol_169014
    kwargs_169016 = {'m': keyword_169011, 'approx_grad': keyword_169009, 'pgtol': keyword_169015, 'factr': keyword_169013}
    # Getting the type of 'fmin_l_bfgs_b' (line 530)
    fmin_l_bfgs_b_169004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 14), 'fmin_l_bfgs_b', False)
    # Calling fmin_l_bfgs_b(args, kwargs) (line 530)
    fmin_l_bfgs_b_call_result_169017 = invoke(stypy.reporting.localization.Localization(__file__, 530, 14), fmin_l_bfgs_b_169004, *[fun_169006, x0_169007], **kwargs_169016)
    
    # Obtaining the member '__getitem__' of a type (line 530)
    getitem___169018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 4), fmin_l_bfgs_b_call_result_169017, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 530)
    subscript_call_result_169019 = invoke(stypy.reporting.localization.Localization(__file__, 530, 4), getitem___169018, int_169003)
    
    # Assigning a type to the variable 'tuple_var_assignment_167665' (line 530)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 530, 4), 'tuple_var_assignment_167665', subscript_call_result_169019)
    
    # Assigning a Name to a Name (line 530):
    # Getting the type of 'tuple_var_assignment_167663' (line 530)
    tuple_var_assignment_167663_169020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 4), 'tuple_var_assignment_167663')
    # Assigning a type to the variable 'x' (line 530)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 530, 4), 'x', tuple_var_assignment_167663_169020)
    
    # Assigning a Name to a Name (line 530):
    # Getting the type of 'tuple_var_assignment_167664' (line 530)
    tuple_var_assignment_167664_169021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 4), 'tuple_var_assignment_167664')
    # Assigning a type to the variable 'f' (line 530)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 530, 7), 'f', tuple_var_assignment_167664_169021)
    
    # Assigning a Name to a Name (line 530):
    # Getting the type of 'tuple_var_assignment_167665' (line 530)
    tuple_var_assignment_167665_169022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 4), 'tuple_var_assignment_167665')
    # Assigning a type to the variable 'd' (line 530)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 530, 10), 'd', tuple_var_assignment_167665_169022)
    
    # Call to print(...): (line 532)
    # Processing the call arguments (line 532)
    # Getting the type of 'x' (line 532)
    x_169024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 10), 'x', False)
    # Processing the call keyword arguments (line 532)
    kwargs_169025 = {}
    # Getting the type of 'print' (line 532)
    print_169023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 4), 'print', False)
    # Calling print(args, kwargs) (line 532)
    print_call_result_169026 = invoke(stypy.reporting.localization.Localization(__file__, 532, 4), print_169023, *[x_169024], **kwargs_169025)
    
    
    # Call to print(...): (line 533)
    # Processing the call arguments (line 533)
    # Getting the type of 'f' (line 533)
    f_169028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 10), 'f', False)
    # Processing the call keyword arguments (line 533)
    kwargs_169029 = {}
    # Getting the type of 'print' (line 533)
    print_169027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 4), 'print', False)
    # Calling print(args, kwargs) (line 533)
    print_call_result_169030 = invoke(stypy.reporting.localization.Localization(__file__, 533, 4), print_169027, *[f_169028], **kwargs_169029)
    
    
    # Call to print(...): (line 534)
    # Processing the call arguments (line 534)
    # Getting the type of 'd' (line 534)
    d_169032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 10), 'd', False)
    # Processing the call keyword arguments (line 534)
    kwargs_169033 = {}
    # Getting the type of 'print' (line 534)
    print_169031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 4), 'print', False)
    # Calling print(args, kwargs) (line 534)
    print_call_result_169034 = invoke(stypy.reporting.localization.Localization(__file__, 534, 4), print_169031, *[d_169032], **kwargs_169033)
    


# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
