
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: #__docformat__ = "restructuredtext en"
2: # ******NOTICE***************
3: # optimize.py module by Travis E. Oliphant
4: #
5: # You may copy and use this module as you see fit with no
6: # guarantee implied provided you keep this notice in all copies.
7: # *****END NOTICE************
8: 
9: # A collection of optimization algorithms.  Version 0.5
10: # CHANGES
11: #  Added fminbound (July 2001)
12: #  Added brute (Aug. 2002)
13: #  Finished line search satisfying strong Wolfe conditions (Mar. 2004)
14: #  Updated strong Wolfe conditions line search to use
15: #      cubic-interpolation (Mar. 2004)
16: 
17: from __future__ import division, print_function, absolute_import
18: 
19: 
20: # Minimization routines
21: 
22: __all__ = ['fmin', 'fmin_powell', 'fmin_bfgs', 'fmin_ncg', 'fmin_cg',
23:            'fminbound', 'brent', 'golden', 'bracket', 'rosen', 'rosen_der',
24:            'rosen_hess', 'rosen_hess_prod', 'brute', 'approx_fprime',
25:            'line_search', 'check_grad', 'OptimizeResult', 'show_options',
26:            'OptimizeWarning']
27: 
28: __docformat__ = "restructuredtext en"
29: 
30: import warnings
31: import sys
32: import numpy
33: from scipy._lib.six import callable, xrange
34: from numpy import (atleast_1d, eye, mgrid, argmin, zeros, shape, squeeze,
35:                    vectorize, asarray, sqrt, Inf, asfarray, isinf)
36: import numpy as np
37: from .linesearch import (line_search_wolfe1, line_search_wolfe2,
38:                          line_search_wolfe2 as line_search,
39:                          LineSearchWarning)
40: from scipy._lib._util import getargspec_no_self as _getargspec
41: 
42: 
43: # standard status messages of optimizers
44: _status_message = {'success': 'Optimization terminated successfully.',
45:                    'maxfev': 'Maximum number of function evaluations has '
46:                               'been exceeded.',
47:                    'maxiter': 'Maximum number of iterations has been '
48:                               'exceeded.',
49:                    'pr_loss': 'Desired error not necessarily achieved due '
50:                               'to precision loss.'}
51: 
52: 
53: class MemoizeJac(object):
54:     ''' Decorator that caches the value gradient of function each time it
55:     is called. '''
56:     def __init__(self, fun):
57:         self.fun = fun
58:         self.jac = None
59:         self.x = None
60: 
61:     def __call__(self, x, *args):
62:         self.x = numpy.asarray(x).copy()
63:         fg = self.fun(x, *args)
64:         self.jac = fg[1]
65:         return fg[0]
66: 
67:     def derivative(self, x, *args):
68:         if self.jac is not None and numpy.alltrue(x == self.x):
69:             return self.jac
70:         else:
71:             self(x, *args)
72:             return self.jac
73: 
74: 
75: class OptimizeResult(dict):
76:     ''' Represents the optimization result.
77: 
78:     Attributes
79:     ----------
80:     x : ndarray
81:         The solution of the optimization.
82:     success : bool
83:         Whether or not the optimizer exited successfully.
84:     status : int
85:         Termination status of the optimizer. Its value depends on the
86:         underlying solver. Refer to `message` for details.
87:     message : str
88:         Description of the cause of the termination.
89:     fun, jac, hess: ndarray
90:         Values of objective function, its Jacobian and its Hessian (if
91:         available). The Hessians may be approximations, see the documentation
92:         of the function in question.
93:     hess_inv : object
94:         Inverse of the objective function's Hessian; may be an approximation.
95:         Not available for all solvers. The type of this attribute may be
96:         either np.ndarray or scipy.sparse.linalg.LinearOperator.
97:     nfev, njev, nhev : int
98:         Number of evaluations of the objective functions and of its
99:         Jacobian and Hessian.
100:     nit : int
101:         Number of iterations performed by the optimizer.
102:     maxcv : float
103:         The maximum constraint violation.
104: 
105:     Notes
106:     -----
107:     There may be additional attributes not listed above depending of the
108:     specific solver. Since this class is essentially a subclass of dict
109:     with attribute accessors, one can see which attributes are available
110:     using the `keys()` method.
111:     '''
112:     def __getattr__(self, name):
113:         try:
114:             return self[name]
115:         except KeyError:
116:             raise AttributeError(name)
117: 
118:     __setattr__ = dict.__setitem__
119:     __delattr__ = dict.__delitem__
120: 
121:     def __repr__(self):
122:         if self.keys():
123:             m = max(map(len, list(self.keys()))) + 1
124:             return '\n'.join([k.rjust(m) + ': ' + repr(v)
125:                               for k, v in sorted(self.items())])
126:         else:
127:             return self.__class__.__name__ + "()"
128: 
129:     def __dir__(self):
130:         return list(self.keys())
131: 
132: 
133: class OptimizeWarning(UserWarning):
134:     pass
135: 
136: 
137: def _check_unknown_options(unknown_options):
138:     if unknown_options:
139:         msg = ", ".join(map(str, unknown_options.keys()))
140:         # Stack level 4: this is called from _minimize_*, which is
141:         # called from another function in Scipy. Level 4 is the first
142:         # level in user code.
143:         warnings.warn("Unknown solver options: %s" % msg, OptimizeWarning, 4)
144: 
145: 
146: def is_array_scalar(x):
147:     '''Test whether `x` is either a scalar or an array scalar.
148: 
149:     '''
150:     return np.size(x) == 1
151: 
152: _epsilon = sqrt(numpy.finfo(float).eps)
153: 
154: 
155: def vecnorm(x, ord=2):
156:     if ord == Inf:
157:         return numpy.amax(numpy.abs(x))
158:     elif ord == -Inf:
159:         return numpy.amin(numpy.abs(x))
160:     else:
161:         return numpy.sum(numpy.abs(x)**ord, axis=0)**(1.0 / ord)
162: 
163: 
164: def rosen(x):
165:     '''
166:     The Rosenbrock function.
167: 
168:     The function computed is::
169: 
170:         sum(100.0*(x[1:] - x[:-1]**2.0)**2.0 + (1 - x[:-1])**2.0)
171: 
172:     Parameters
173:     ----------
174:     x : array_like
175:         1-D array of points at which the Rosenbrock function is to be computed.
176: 
177:     Returns
178:     -------
179:     f : float
180:         The value of the Rosenbrock function.
181: 
182:     See Also
183:     --------
184:     rosen_der, rosen_hess, rosen_hess_prod
185: 
186:     '''
187:     x = asarray(x)
188:     r = numpy.sum(100.0 * (x[1:] - x[:-1]**2.0)**2.0 + (1 - x[:-1])**2.0,
189:                   axis=0)
190:     return r
191: 
192: 
193: def rosen_der(x):
194:     '''
195:     The derivative (i.e. gradient) of the Rosenbrock function.
196: 
197:     Parameters
198:     ----------
199:     x : array_like
200:         1-D array of points at which the derivative is to be computed.
201: 
202:     Returns
203:     -------
204:     rosen_der : (N,) ndarray
205:         The gradient of the Rosenbrock function at `x`.
206: 
207:     See Also
208:     --------
209:     rosen, rosen_hess, rosen_hess_prod
210: 
211:     '''
212:     x = asarray(x)
213:     xm = x[1:-1]
214:     xm_m1 = x[:-2]
215:     xm_p1 = x[2:]
216:     der = numpy.zeros_like(x)
217:     der[1:-1] = (200 * (xm - xm_m1**2) -
218:                  400 * (xm_p1 - xm**2) * xm - 2 * (1 - xm))
219:     der[0] = -400 * x[0] * (x[1] - x[0]**2) - 2 * (1 - x[0])
220:     der[-1] = 200 * (x[-1] - x[-2]**2)
221:     return der
222: 
223: 
224: def rosen_hess(x):
225:     '''
226:     The Hessian matrix of the Rosenbrock function.
227: 
228:     Parameters
229:     ----------
230:     x : array_like
231:         1-D array of points at which the Hessian matrix is to be computed.
232: 
233:     Returns
234:     -------
235:     rosen_hess : ndarray
236:         The Hessian matrix of the Rosenbrock function at `x`.
237: 
238:     See Also
239:     --------
240:     rosen, rosen_der, rosen_hess_prod
241: 
242:     '''
243:     x = atleast_1d(x)
244:     H = numpy.diag(-400 * x[:-1], 1) - numpy.diag(400 * x[:-1], -1)
245:     diagonal = numpy.zeros(len(x), dtype=x.dtype)
246:     diagonal[0] = 1200 * x[0]**2 - 400 * x[1] + 2
247:     diagonal[-1] = 200
248:     diagonal[1:-1] = 202 + 1200 * x[1:-1]**2 - 400 * x[2:]
249:     H = H + numpy.diag(diagonal)
250:     return H
251: 
252: 
253: def rosen_hess_prod(x, p):
254:     '''
255:     Product of the Hessian matrix of the Rosenbrock function with a vector.
256: 
257:     Parameters
258:     ----------
259:     x : array_like
260:         1-D array of points at which the Hessian matrix is to be computed.
261:     p : array_like
262:         1-D array, the vector to be multiplied by the Hessian matrix.
263: 
264:     Returns
265:     -------
266:     rosen_hess_prod : ndarray
267:         The Hessian matrix of the Rosenbrock function at `x` multiplied
268:         by the vector `p`.
269: 
270:     See Also
271:     --------
272:     rosen, rosen_der, rosen_hess
273: 
274:     '''
275:     x = atleast_1d(x)
276:     Hp = numpy.zeros(len(x), dtype=x.dtype)
277:     Hp[0] = (1200 * x[0]**2 - 400 * x[1] + 2) * p[0] - 400 * x[0] * p[1]
278:     Hp[1:-1] = (-400 * x[:-2] * p[:-2] +
279:                 (202 + 1200 * x[1:-1]**2 - 400 * x[2:]) * p[1:-1] -
280:                 400 * x[1:-1] * p[2:])
281:     Hp[-1] = -400 * x[-2] * p[-2] + 200*p[-1]
282:     return Hp
283: 
284: 
285: def wrap_function(function, args):
286:     ncalls = [0]
287:     if function is None:
288:         return ncalls, None
289: 
290:     def function_wrapper(*wrapper_args):
291:         ncalls[0] += 1
292:         return function(*(wrapper_args + args))
293: 
294:     return ncalls, function_wrapper
295: 
296: 
297: def fmin(func, x0, args=(), xtol=1e-4, ftol=1e-4, maxiter=None, maxfun=None,
298:          full_output=0, disp=1, retall=0, callback=None, initial_simplex=None):
299:     '''
300:     Minimize a function using the downhill simplex algorithm.
301: 
302:     This algorithm only uses function values, not derivatives or second
303:     derivatives.
304: 
305:     Parameters
306:     ----------
307:     func : callable func(x,*args)
308:         The objective function to be minimized.
309:     x0 : ndarray
310:         Initial guess.
311:     args : tuple, optional
312:         Extra arguments passed to func, i.e. ``f(x,*args)``.
313:     xtol : float, optional
314:         Absolute error in xopt between iterations that is acceptable for
315:         convergence.
316:     ftol : number, optional
317:         Absolute error in func(xopt) between iterations that is acceptable for
318:         convergence.
319:     maxiter : int, optional
320:         Maximum number of iterations to perform.
321:     maxfun : number, optional
322:         Maximum number of function evaluations to make.
323:     full_output : bool, optional
324:         Set to True if fopt and warnflag outputs are desired.
325:     disp : bool, optional
326:         Set to True to print convergence messages.
327:     retall : bool, optional
328:         Set to True to return list of solutions at each iteration.
329:     callback : callable, optional
330:         Called after each iteration, as callback(xk), where xk is the
331:         current parameter vector.
332:     initial_simplex : array_like of shape (N + 1, N), optional
333:         Initial simplex. If given, overrides `x0`.
334:         ``initial_simplex[j,:]`` should contain the coordinates of
335:         the j-th vertex of the ``N+1`` vertices in the simplex, where
336:         ``N`` is the dimension.
337: 
338:     Returns
339:     -------
340:     xopt : ndarray
341:         Parameter that minimizes function.
342:     fopt : float
343:         Value of function at minimum: ``fopt = func(xopt)``.
344:     iter : int
345:         Number of iterations performed.
346:     funcalls : int
347:         Number of function calls made.
348:     warnflag : int
349:         1 : Maximum number of function evaluations made.
350:         2 : Maximum number of iterations reached.
351:     allvecs : list
352:         Solution at each iteration.
353: 
354:     See also
355:     --------
356:     minimize: Interface to minimization algorithms for multivariate
357:         functions. See the 'Nelder-Mead' `method` in particular.
358: 
359:     Notes
360:     -----
361:     Uses a Nelder-Mead simplex algorithm to find the minimum of function of
362:     one or more variables.
363: 
364:     This algorithm has a long history of successful use in applications.
365:     But it will usually be slower than an algorithm that uses first or
366:     second derivative information. In practice it can have poor
367:     performance in high-dimensional problems and is not robust to
368:     minimizing complicated functions. Additionally, there currently is no
369:     complete theory describing when the algorithm will successfully
370:     converge to the minimum, or how fast it will if it does. Both the ftol and
371:     xtol criteria must be met for convergence.
372: 
373:     Examples
374:     --------
375:     >>> def f(x):
376:     ...     return x**2
377: 
378:     >>> from scipy import optimize
379: 
380:     >>> minimum = optimize.fmin(f, 1)
381:     Optimization terminated successfully.
382:              Current function value: 0.000000
383:              Iterations: 17
384:              Function evaluations: 34
385:     >>> minimum[0]
386:     -8.8817841970012523e-16
387: 
388:     References
389:     ----------
390:     .. [1] Nelder, J.A. and Mead, R. (1965), "A simplex method for function
391:            minimization", The Computer Journal, 7, pp. 308-313
392: 
393:     .. [2] Wright, M.H. (1996), "Direct Search Methods: Once Scorned, Now
394:            Respectable", in Numerical Analysis 1995, Proceedings of the
395:            1995 Dundee Biennial Conference in Numerical Analysis, D.F.
396:            Griffiths and G.A. Watson (Eds.), Addison Wesley Longman,
397:            Harlow, UK, pp. 191-208.
398: 
399:     '''
400:     opts = {'xatol': xtol,
401:             'fatol': ftol,
402:             'maxiter': maxiter,
403:             'maxfev': maxfun,
404:             'disp': disp,
405:             'return_all': retall,
406:             'initial_simplex': initial_simplex}
407: 
408:     res = _minimize_neldermead(func, x0, args, callback=callback, **opts)
409:     if full_output:
410:         retlist = res['x'], res['fun'], res['nit'], res['nfev'], res['status']
411:         if retall:
412:             retlist += (res['allvecs'], )
413:         return retlist
414:     else:
415:         if retall:
416:             return res['x'], res['allvecs']
417:         else:
418:             return res['x']
419: 
420: 
421: def _minimize_neldermead(func, x0, args=(), callback=None,
422:                          maxiter=None, maxfev=None, disp=False,
423:                          return_all=False, initial_simplex=None,
424:                          xatol=1e-4, fatol=1e-4, **unknown_options):
425:     '''
426:     Minimization of scalar function of one or more variables using the
427:     Nelder-Mead algorithm.
428: 
429:     Options
430:     -------
431:     disp : bool
432:         Set to True to print convergence messages.
433:     maxiter, maxfev : int
434:         Maximum allowed number of iterations and function evaluations.
435:         Will default to ``N*200``, where ``N`` is the number of
436:         variables, if neither `maxiter` or `maxfev` is set. If both
437:         `maxiter` and `maxfev` are set, minimization will stop at the
438:         first reached.
439:     initial_simplex : array_like of shape (N + 1, N)
440:         Initial simplex. If given, overrides `x0`.
441:         ``initial_simplex[j,:]`` should contain the coordinates of
442:         the j-th vertex of the ``N+1`` vertices in the simplex, where
443:         ``N`` is the dimension.
444:     xatol : float, optional
445:         Absolute error in xopt between iterations that is acceptable for
446:         convergence.
447:     fatol : number, optional
448:         Absolute error in func(xopt) between iterations that is acceptable for
449:         convergence.
450: 
451:     '''
452:     if 'ftol' in unknown_options:
453:         warnings.warn("ftol is deprecated for Nelder-Mead,"
454:                       " use fatol instead. If you specified both, only"
455:                       " fatol is used.",
456:                       DeprecationWarning)
457:         if (np.isclose(fatol, 1e-4) and
458:                 not np.isclose(unknown_options['ftol'], 1e-4)):
459:             # only ftol was probably specified, use it.
460:             fatol = unknown_options['ftol']
461:         unknown_options.pop('ftol')
462:     if 'xtol' in unknown_options:
463:         warnings.warn("xtol is deprecated for Nelder-Mead,"
464:                       " use xatol instead. If you specified both, only"
465:                       " xatol is used.",
466:                       DeprecationWarning)
467:         if (np.isclose(xatol, 1e-4) and
468:                 not np.isclose(unknown_options['xtol'], 1e-4)):
469:             # only xtol was probably specified, use it.
470:             xatol = unknown_options['xtol']
471:         unknown_options.pop('xtol')
472: 
473:     _check_unknown_options(unknown_options)
474:     maxfun = maxfev
475:     retall = return_all
476: 
477:     fcalls, func = wrap_function(func, args)
478: 
479:     rho = 1
480:     chi = 2
481:     psi = 0.5
482:     sigma = 0.5
483:     nonzdelt = 0.05
484:     zdelt = 0.00025
485: 
486:     x0 = asfarray(x0).flatten()
487: 
488:     if initial_simplex is None:
489:         N = len(x0)
490: 
491:         sim = numpy.zeros((N + 1, N), dtype=x0.dtype)
492:         sim[0] = x0
493:         for k in range(N):
494:             y = numpy.array(x0, copy=True)
495:             if y[k] != 0:
496:                 y[k] = (1 + nonzdelt)*y[k]
497:             else:
498:                 y[k] = zdelt
499:             sim[k + 1] = y
500:     else:
501:         sim = np.asfarray(initial_simplex).copy()
502:         if sim.ndim != 2 or sim.shape[0] != sim.shape[1] + 1:
503:             raise ValueError("`initial_simplex` should be an array of shape (N+1,N)")
504:         if len(x0) != sim.shape[1]:
505:             raise ValueError("Size of `initial_simplex` is not consistent with `x0`")
506:         N = sim.shape[1]
507: 
508:     if retall:
509:         allvecs = [sim[0]]
510: 
511:     # If neither are set, then set both to default
512:     if maxiter is None and maxfun is None:
513:         maxiter = N * 200
514:         maxfun = N * 200
515:     elif maxiter is None:
516:         # Convert remaining Nones, to np.inf, unless the other is np.inf, in
517:         # which case use the default to avoid unbounded iteration
518:         if maxfun == np.inf:
519:             maxiter = N * 200
520:         else:
521:             maxiter = np.inf
522:     elif maxfun is None:
523:         if maxiter == np.inf:
524:             maxfun = N * 200
525:         else:
526:             maxfun = np.inf
527: 
528:     one2np1 = list(range(1, N + 1))
529:     fsim = numpy.zeros((N + 1,), float)
530: 
531:     for k in range(N + 1):
532:         fsim[k] = func(sim[k])
533: 
534:     ind = numpy.argsort(fsim)
535:     fsim = numpy.take(fsim, ind, 0)
536:     # sort so sim[0,:] has the lowest function value
537:     sim = numpy.take(sim, ind, 0)
538: 
539:     iterations = 1
540: 
541:     while (fcalls[0] < maxfun and iterations < maxiter):
542:         if (numpy.max(numpy.ravel(numpy.abs(sim[1:] - sim[0]))) <= xatol and
543:                 numpy.max(numpy.abs(fsim[0] - fsim[1:])) <= fatol):
544:             break
545: 
546:         xbar = numpy.add.reduce(sim[:-1], 0) / N
547:         xr = (1 + rho) * xbar - rho * sim[-1]
548:         fxr = func(xr)
549:         doshrink = 0
550: 
551:         if fxr < fsim[0]:
552:             xe = (1 + rho * chi) * xbar - rho * chi * sim[-1]
553:             fxe = func(xe)
554: 
555:             if fxe < fxr:
556:                 sim[-1] = xe
557:                 fsim[-1] = fxe
558:             else:
559:                 sim[-1] = xr
560:                 fsim[-1] = fxr
561:         else:  # fsim[0] <= fxr
562:             if fxr < fsim[-2]:
563:                 sim[-1] = xr
564:                 fsim[-1] = fxr
565:             else:  # fxr >= fsim[-2]
566:                 # Perform contraction
567:                 if fxr < fsim[-1]:
568:                     xc = (1 + psi * rho) * xbar - psi * rho * sim[-1]
569:                     fxc = func(xc)
570: 
571:                     if fxc <= fxr:
572:                         sim[-1] = xc
573:                         fsim[-1] = fxc
574:                     else:
575:                         doshrink = 1
576:                 else:
577:                     # Perform an inside contraction
578:                     xcc = (1 - psi) * xbar + psi * sim[-1]
579:                     fxcc = func(xcc)
580: 
581:                     if fxcc < fsim[-1]:
582:                         sim[-1] = xcc
583:                         fsim[-1] = fxcc
584:                     else:
585:                         doshrink = 1
586: 
587:                 if doshrink:
588:                     for j in one2np1:
589:                         sim[j] = sim[0] + sigma * (sim[j] - sim[0])
590:                         fsim[j] = func(sim[j])
591: 
592:         ind = numpy.argsort(fsim)
593:         sim = numpy.take(sim, ind, 0)
594:         fsim = numpy.take(fsim, ind, 0)
595:         if callback is not None:
596:             callback(sim[0])
597:         iterations += 1
598:         if retall:
599:             allvecs.append(sim[0])
600: 
601:     x = sim[0]
602:     fval = numpy.min(fsim)
603:     warnflag = 0
604: 
605:     if fcalls[0] >= maxfun:
606:         warnflag = 1
607:         msg = _status_message['maxfev']
608:         if disp:
609:             print('Warning: ' + msg)
610:     elif iterations >= maxiter:
611:         warnflag = 2
612:         msg = _status_message['maxiter']
613:         if disp:
614:             print('Warning: ' + msg)
615:     else:
616:         msg = _status_message['success']
617:         if disp:
618:             print(msg)
619:             print("         Current function value: %f" % fval)
620:             print("         Iterations: %d" % iterations)
621:             print("         Function evaluations: %d" % fcalls[0])
622: 
623:     result = OptimizeResult(fun=fval, nit=iterations, nfev=fcalls[0],
624:                             status=warnflag, success=(warnflag == 0),
625:                             message=msg, x=x, final_simplex=(sim, fsim))
626:     if retall:
627:         result['allvecs'] = allvecs
628:     return result
629: 
630: 
631: def _approx_fprime_helper(xk, f, epsilon, args=(), f0=None):
632:     '''
633:     See ``approx_fprime``.  An optional initial function value arg is added.
634: 
635:     '''
636:     if f0 is None:
637:         f0 = f(*((xk,) + args))
638:     grad = numpy.zeros((len(xk),), float)
639:     ei = numpy.zeros((len(xk),), float)
640:     for k in range(len(xk)):
641:         ei[k] = 1.0
642:         d = epsilon * ei
643:         grad[k] = (f(*((xk + d,) + args)) - f0) / d[k]
644:         ei[k] = 0.0
645:     return grad
646: 
647: 
648: def approx_fprime(xk, f, epsilon, *args):
649:     '''Finite-difference approximation of the gradient of a scalar function.
650: 
651:     Parameters
652:     ----------
653:     xk : array_like
654:         The coordinate vector at which to determine the gradient of `f`.
655:     f : callable
656:         The function of which to determine the gradient (partial derivatives).
657:         Should take `xk` as first argument, other arguments to `f` can be
658:         supplied in ``*args``.  Should return a scalar, the value of the
659:         function at `xk`.
660:     epsilon : array_like
661:         Increment to `xk` to use for determining the function gradient.
662:         If a scalar, uses the same finite difference delta for all partial
663:         derivatives.  If an array, should contain one value per element of
664:         `xk`.
665:     \\*args : args, optional
666:         Any other arguments that are to be passed to `f`.
667: 
668:     Returns
669:     -------
670:     grad : ndarray
671:         The partial derivatives of `f` to `xk`.
672: 
673:     See Also
674:     --------
675:     check_grad : Check correctness of gradient function against approx_fprime.
676: 
677:     Notes
678:     -----
679:     The function gradient is determined by the forward finite difference
680:     formula::
681: 
682:                  f(xk[i] + epsilon[i]) - f(xk[i])
683:         f'[i] = ---------------------------------
684:                             epsilon[i]
685: 
686:     The main use of `approx_fprime` is in scalar function optimizers like
687:     `fmin_bfgs`, to determine numerically the Jacobian of a function.
688: 
689:     Examples
690:     --------
691:     >>> from scipy import optimize
692:     >>> def func(x, c0, c1):
693:     ...     "Coordinate vector `x` should be an array of size two."
694:     ...     return c0 * x[0]**2 + c1*x[1]**2
695: 
696:     >>> x = np.ones(2)
697:     >>> c0, c1 = (1, 200)
698:     >>> eps = np.sqrt(np.finfo(float).eps)
699:     >>> optimize.approx_fprime(x, func, [eps, np.sqrt(200) * eps], c0, c1)
700:     array([   2.        ,  400.00004198])
701: 
702:     '''
703:     return _approx_fprime_helper(xk, f, epsilon, args=args)
704: 
705: 
706: def check_grad(func, grad, x0, *args, **kwargs):
707:     '''Check the correctness of a gradient function by comparing it against a
708:     (forward) finite-difference approximation of the gradient.
709: 
710:     Parameters
711:     ----------
712:     func : callable ``func(x0, *args)``
713:         Function whose derivative is to be checked.
714:     grad : callable ``grad(x0, *args)``
715:         Gradient of `func`.
716:     x0 : ndarray
717:         Points to check `grad` against forward difference approximation of grad
718:         using `func`.
719:     args : \\*args, optional
720:         Extra arguments passed to `func` and `grad`.
721:     epsilon : float, optional
722:         Step size used for the finite difference approximation. It defaults to
723:         ``sqrt(numpy.finfo(float).eps)``, which is approximately 1.49e-08.
724: 
725:     Returns
726:     -------
727:     err : float
728:         The square root of the sum of squares (i.e. the 2-norm) of the
729:         difference between ``grad(x0, *args)`` and the finite difference
730:         approximation of `grad` using func at the points `x0`.
731: 
732:     See Also
733:     --------
734:     approx_fprime
735: 
736:     Examples
737:     --------
738:     >>> def func(x):
739:     ...     return x[0]**2 - 0.5 * x[1]**3
740:     >>> def grad(x):
741:     ...     return [2 * x[0], -1.5 * x[1]**2]
742:     >>> from scipy.optimize import check_grad
743:     >>> check_grad(func, grad, [1.5, -1.5])
744:     2.9802322387695312e-08
745: 
746:     '''
747:     step = kwargs.pop('epsilon', _epsilon)
748:     if kwargs:
749:         raise ValueError("Unknown keyword arguments: %r" %
750:                          (list(kwargs.keys()),))
751:     return sqrt(sum((grad(x0, *args) -
752:                      approx_fprime(x0, func, step, *args))**2))
753: 
754: 
755: def approx_fhess_p(x0, p, fprime, epsilon, *args):
756:     f2 = fprime(*((x0 + epsilon*p,) + args))
757:     f1 = fprime(*((x0,) + args))
758:     return (f2 - f1) / epsilon
759: 
760: 
761: class _LineSearchError(RuntimeError):
762:     pass
763: 
764: 
765: def _line_search_wolfe12(f, fprime, xk, pk, gfk, old_fval, old_old_fval,
766:                          **kwargs):
767:     '''
768:     Same as line_search_wolfe1, but fall back to line_search_wolfe2 if
769:     suitable step length is not found, and raise an exception if a
770:     suitable step length is not found.
771: 
772:     Raises
773:     ------
774:     _LineSearchError
775:         If no suitable step size is found
776: 
777:     '''
778: 
779:     extra_condition = kwargs.pop('extra_condition', None)
780: 
781:     ret = line_search_wolfe1(f, fprime, xk, pk, gfk,
782:                              old_fval, old_old_fval,
783:                              **kwargs)
784: 
785:     if ret[0] is not None and extra_condition is not None:
786:         xp1 = xk + ret[0] * pk
787:         if not extra_condition(ret[0], xp1, ret[3], ret[5]):
788:             # Reject step if extra_condition fails
789:             ret = (None,)
790: 
791:     if ret[0] is None:
792:         # line search failed: try different one.
793:         with warnings.catch_warnings():
794:             warnings.simplefilter('ignore', LineSearchWarning)
795:             kwargs2 = {}
796:             for key in ('c1', 'c2', 'amax'):
797:                 if key in kwargs:
798:                     kwargs2[key] = kwargs[key]
799:             ret = line_search_wolfe2(f, fprime, xk, pk, gfk,
800:                                      old_fval, old_old_fval,
801:                                      extra_condition=extra_condition,
802:                                      **kwargs2)
803: 
804:     if ret[0] is None:
805:         raise _LineSearchError()
806: 
807:     return ret
808: 
809: 
810: def fmin_bfgs(f, x0, fprime=None, args=(), gtol=1e-5, norm=Inf,
811:               epsilon=_epsilon, maxiter=None, full_output=0, disp=1,
812:               retall=0, callback=None):
813:     '''
814:     Minimize a function using the BFGS algorithm.
815: 
816:     Parameters
817:     ----------
818:     f : callable f(x,*args)
819:         Objective function to be minimized.
820:     x0 : ndarray
821:         Initial guess.
822:     fprime : callable f'(x,*args), optional
823:         Gradient of f.
824:     args : tuple, optional
825:         Extra arguments passed to f and fprime.
826:     gtol : float, optional
827:         Gradient norm must be less than gtol before successful termination.
828:     norm : float, optional
829:         Order of norm (Inf is max, -Inf is min)
830:     epsilon : int or ndarray, optional
831:         If fprime is approximated, use this value for the step size.
832:     callback : callable, optional
833:         An optional user-supplied function to call after each
834:         iteration.  Called as callback(xk), where xk is the
835:         current parameter vector.
836:     maxiter : int, optional
837:         Maximum number of iterations to perform.
838:     full_output : bool, optional
839:         If True,return fopt, func_calls, grad_calls, and warnflag
840:         in addition to xopt.
841:     disp : bool, optional
842:         Print convergence message if True.
843:     retall : bool, optional
844:         Return a list of results at each iteration if True.
845: 
846:     Returns
847:     -------
848:     xopt : ndarray
849:         Parameters which minimize f, i.e. f(xopt) == fopt.
850:     fopt : float
851:         Minimum value.
852:     gopt : ndarray
853:         Value of gradient at minimum, f'(xopt), which should be near 0.
854:     Bopt : ndarray
855:         Value of 1/f''(xopt), i.e. the inverse hessian matrix.
856:     func_calls : int
857:         Number of function_calls made.
858:     grad_calls : int
859:         Number of gradient calls made.
860:     warnflag : integer
861:         1 : Maximum number of iterations exceeded.
862:         2 : Gradient and/or function calls not changing.
863:     allvecs  :  list
864:         `OptimizeResult` at each iteration.  Only returned if retall is True.
865: 
866:     See also
867:     --------
868:     minimize: Interface to minimization algorithms for multivariate
869:         functions. See the 'BFGS' `method` in particular.
870: 
871:     Notes
872:     -----
873:     Optimize the function, f, whose gradient is given by fprime
874:     using the quasi-Newton method of Broyden, Fletcher, Goldfarb,
875:     and Shanno (BFGS)
876: 
877:     References
878:     ----------
879:     Wright, and Nocedal 'Numerical Optimization', 1999, pg. 198.
880: 
881:     '''
882:     opts = {'gtol': gtol,
883:             'norm': norm,
884:             'eps': epsilon,
885:             'disp': disp,
886:             'maxiter': maxiter,
887:             'return_all': retall}
888: 
889:     res = _minimize_bfgs(f, x0, args, fprime, callback=callback, **opts)
890: 
891:     if full_output:
892:         retlist = (res['x'], res['fun'], res['jac'], res['hess_inv'],
893:                    res['nfev'], res['njev'], res['status'])
894:         if retall:
895:             retlist += (res['allvecs'], )
896:         return retlist
897:     else:
898:         if retall:
899:             return res['x'], res['allvecs']
900:         else:
901:             return res['x']
902: 
903: 
904: def _minimize_bfgs(fun, x0, args=(), jac=None, callback=None,
905:                    gtol=1e-5, norm=Inf, eps=_epsilon, maxiter=None,
906:                    disp=False, return_all=False,
907:                    **unknown_options):
908:     '''
909:     Minimization of scalar function of one or more variables using the
910:     BFGS algorithm.
911: 
912:     Options
913:     -------
914:     disp : bool
915:         Set to True to print convergence messages.
916:     maxiter : int
917:         Maximum number of iterations to perform.
918:     gtol : float
919:         Gradient norm must be less than `gtol` before successful
920:         termination.
921:     norm : float
922:         Order of norm (Inf is max, -Inf is min).
923:     eps : float or ndarray
924:         If `jac` is approximated, use this value for the step size.
925: 
926:     '''
927:     _check_unknown_options(unknown_options)
928:     f = fun
929:     fprime = jac
930:     epsilon = eps
931:     retall = return_all
932: 
933:     x0 = asarray(x0).flatten()
934:     if x0.ndim == 0:
935:         x0.shape = (1,)
936:     if maxiter is None:
937:         maxiter = len(x0) * 200
938:     func_calls, f = wrap_function(f, args)
939:     if fprime is None:
940:         grad_calls, myfprime = wrap_function(approx_fprime, (f, epsilon))
941:     else:
942:         grad_calls, myfprime = wrap_function(fprime, args)
943:     gfk = myfprime(x0)
944:     k = 0
945:     N = len(x0)
946:     I = numpy.eye(N, dtype=int)
947:     Hk = I
948: 
949:     # Sets the initial step guess to dx ~ 1
950:     old_fval = f(x0)
951:     old_old_fval = old_fval + np.linalg.norm(gfk) / 2
952: 
953:     xk = x0
954:     if retall:
955:         allvecs = [x0]
956:     sk = [2 * gtol]
957:     warnflag = 0
958:     gnorm = vecnorm(gfk, ord=norm)
959:     while (gnorm > gtol) and (k < maxiter):
960:         pk = -numpy.dot(Hk, gfk)
961:         try:
962:             alpha_k, fc, gc, old_fval, old_old_fval, gfkp1 = \
963:                      _line_search_wolfe12(f, myfprime, xk, pk, gfk,
964:                                           old_fval, old_old_fval, amin=1e-100, amax=1e100)
965:         except _LineSearchError:
966:             # Line search failed to find a better solution.
967:             warnflag = 2
968:             break
969: 
970:         xkp1 = xk + alpha_k * pk
971:         if retall:
972:             allvecs.append(xkp1)
973:         sk = xkp1 - xk
974:         xk = xkp1
975:         if gfkp1 is None:
976:             gfkp1 = myfprime(xkp1)
977: 
978:         yk = gfkp1 - gfk
979:         gfk = gfkp1
980:         if callback is not None:
981:             callback(xk)
982:         k += 1
983:         gnorm = vecnorm(gfk, ord=norm)
984:         if (gnorm <= gtol):
985:             break
986: 
987:         if not numpy.isfinite(old_fval):
988:             # We correctly found +-Inf as optimal value, or something went
989:             # wrong.
990:             warnflag = 2
991:             break
992: 
993:         try:  # this was handled in numeric, let it remaines for more safety
994:             rhok = 1.0 / (numpy.dot(yk, sk))
995:         except ZeroDivisionError:
996:             rhok = 1000.0
997:             if disp:
998:                 print("Divide-by-zero encountered: rhok assumed large")
999:         if isinf(rhok):  # this is patch for numpy
1000:             rhok = 1000.0
1001:             if disp:
1002:                 print("Divide-by-zero encountered: rhok assumed large")
1003:         A1 = I - sk[:, numpy.newaxis] * yk[numpy.newaxis, :] * rhok
1004:         A2 = I - yk[:, numpy.newaxis] * sk[numpy.newaxis, :] * rhok
1005:         Hk = numpy.dot(A1, numpy.dot(Hk, A2)) + (rhok * sk[:, numpy.newaxis] *
1006:                                                  sk[numpy.newaxis, :])
1007: 
1008:     fval = old_fval
1009:     if np.isnan(fval):
1010:         # This can happen if the first call to f returned NaN;
1011:         # the loop is then never entered.
1012:         warnflag = 2
1013: 
1014:     if warnflag == 2:
1015:         msg = _status_message['pr_loss']
1016:         if disp:
1017:             print("Warning: " + msg)
1018:             print("         Current function value: %f" % fval)
1019:             print("         Iterations: %d" % k)
1020:             print("         Function evaluations: %d" % func_calls[0])
1021:             print("         Gradient evaluations: %d" % grad_calls[0])
1022: 
1023:     elif k >= maxiter:
1024:         warnflag = 1
1025:         msg = _status_message['maxiter']
1026:         if disp:
1027:             print("Warning: " + msg)
1028:             print("         Current function value: %f" % fval)
1029:             print("         Iterations: %d" % k)
1030:             print("         Function evaluations: %d" % func_calls[0])
1031:             print("         Gradient evaluations: %d" % grad_calls[0])
1032:     else:
1033:         msg = _status_message['success']
1034:         if disp:
1035:             print(msg)
1036:             print("         Current function value: %f" % fval)
1037:             print("         Iterations: %d" % k)
1038:             print("         Function evaluations: %d" % func_calls[0])
1039:             print("         Gradient evaluations: %d" % grad_calls[0])
1040: 
1041:     result = OptimizeResult(fun=fval, jac=gfk, hess_inv=Hk, nfev=func_calls[0],
1042:                             njev=grad_calls[0], status=warnflag,
1043:                             success=(warnflag == 0), message=msg, x=xk,
1044:                             nit=k)
1045:     if retall:
1046:         result['allvecs'] = allvecs
1047:     return result
1048: 
1049: 
1050: def fmin_cg(f, x0, fprime=None, args=(), gtol=1e-5, norm=Inf, epsilon=_epsilon,
1051:             maxiter=None, full_output=0, disp=1, retall=0, callback=None):
1052:     '''
1053:     Minimize a function using a nonlinear conjugate gradient algorithm.
1054: 
1055:     Parameters
1056:     ----------
1057:     f : callable, ``f(x, *args)``
1058:         Objective function to be minimized.  Here `x` must be a 1-D array of
1059:         the variables that are to be changed in the search for a minimum, and
1060:         `args` are the other (fixed) parameters of `f`.
1061:     x0 : ndarray
1062:         A user-supplied initial estimate of `xopt`, the optimal value of `x`.
1063:         It must be a 1-D array of values.
1064:     fprime : callable, ``fprime(x, *args)``, optional
1065:         A function that returns the gradient of `f` at `x`. Here `x` and `args`
1066:         are as described above for `f`. The returned value must be a 1-D array.
1067:         Defaults to None, in which case the gradient is approximated
1068:         numerically (see `epsilon`, below).
1069:     args : tuple, optional
1070:         Parameter values passed to `f` and `fprime`. Must be supplied whenever
1071:         additional fixed parameters are needed to completely specify the
1072:         functions `f` and `fprime`.
1073:     gtol : float, optional
1074:         Stop when the norm of the gradient is less than `gtol`.
1075:     norm : float, optional
1076:         Order to use for the norm of the gradient
1077:         (``-np.Inf`` is min, ``np.Inf`` is max).
1078:     epsilon : float or ndarray, optional
1079:         Step size(s) to use when `fprime` is approximated numerically. Can be a
1080:         scalar or a 1-D array.  Defaults to ``sqrt(eps)``, with eps the
1081:         floating point machine precision.  Usually ``sqrt(eps)`` is about
1082:         1.5e-8.
1083:     maxiter : int, optional
1084:         Maximum number of iterations to perform. Default is ``200 * len(x0)``.
1085:     full_output : bool, optional
1086:         If True, return `fopt`, `func_calls`, `grad_calls`, and `warnflag` in
1087:         addition to `xopt`.  See the Returns section below for additional
1088:         information on optional return values.
1089:     disp : bool, optional
1090:         If True, return a convergence message, followed by `xopt`.
1091:     retall : bool, optional
1092:         If True, add to the returned values the results of each iteration.
1093:     callback : callable, optional
1094:         An optional user-supplied function, called after each iteration.
1095:         Called as ``callback(xk)``, where ``xk`` is the current value of `x0`.
1096: 
1097:     Returns
1098:     -------
1099:     xopt : ndarray
1100:         Parameters which minimize f, i.e. ``f(xopt) == fopt``.
1101:     fopt : float, optional
1102:         Minimum value found, f(xopt).  Only returned if `full_output` is True.
1103:     func_calls : int, optional
1104:         The number of function_calls made.  Only returned if `full_output`
1105:         is True.
1106:     grad_calls : int, optional
1107:         The number of gradient calls made. Only returned if `full_output` is
1108:         True.
1109:     warnflag : int, optional
1110:         Integer value with warning status, only returned if `full_output` is
1111:         True.
1112: 
1113:         0 : Success.
1114: 
1115:         1 : The maximum number of iterations was exceeded.
1116: 
1117:         2 : Gradient and/or function calls were not changing.  May indicate
1118:             that precision was lost, i.e., the routine did not converge.
1119: 
1120:     allvecs : list of ndarray, optional
1121:         List of arrays, containing the results at each iteration.
1122:         Only returned if `retall` is True.
1123: 
1124:     See Also
1125:     --------
1126:     minimize : common interface to all `scipy.optimize` algorithms for
1127:                unconstrained and constrained minimization of multivariate
1128:                functions.  It provides an alternative way to call
1129:                ``fmin_cg``, by specifying ``method='CG'``.
1130: 
1131:     Notes
1132:     -----
1133:     This conjugate gradient algorithm is based on that of Polak and Ribiere
1134:     [1]_.
1135: 
1136:     Conjugate gradient methods tend to work better when:
1137: 
1138:     1. `f` has a unique global minimizing point, and no local minima or
1139:        other stationary points,
1140:     2. `f` is, at least locally, reasonably well approximated by a
1141:        quadratic function of the variables,
1142:     3. `f` is continuous and has a continuous gradient,
1143:     4. `fprime` is not too large, e.g., has a norm less than 1000,
1144:     5. The initial guess, `x0`, is reasonably close to `f` 's global
1145:        minimizing point, `xopt`.
1146: 
1147:     References
1148:     ----------
1149:     .. [1] Wright & Nocedal, "Numerical Optimization", 1999, pp. 120-122.
1150: 
1151:     Examples
1152:     --------
1153:     Example 1: seek the minimum value of the expression
1154:     ``a*u**2 + b*u*v + c*v**2 + d*u + e*v + f`` for given values
1155:     of the parameters and an initial guess ``(u, v) = (0, 0)``.
1156: 
1157:     >>> args = (2, 3, 7, 8, 9, 10)  # parameter values
1158:     >>> def f(x, *args):
1159:     ...     u, v = x
1160:     ...     a, b, c, d, e, f = args
1161:     ...     return a*u**2 + b*u*v + c*v**2 + d*u + e*v + f
1162:     >>> def gradf(x, *args):
1163:     ...     u, v = x
1164:     ...     a, b, c, d, e, f = args
1165:     ...     gu = 2*a*u + b*v + d     # u-component of the gradient
1166:     ...     gv = b*u + 2*c*v + e     # v-component of the gradient
1167:     ...     return np.asarray((gu, gv))
1168:     >>> x0 = np.asarray((0, 0))  # Initial guess.
1169:     >>> from scipy import optimize
1170:     >>> res1 = optimize.fmin_cg(f, x0, fprime=gradf, args=args)
1171:     Optimization terminated successfully.
1172:              Current function value: 1.617021
1173:              Iterations: 4
1174:              Function evaluations: 8
1175:              Gradient evaluations: 8
1176:     >>> res1
1177:     array([-1.80851064, -0.25531915])
1178: 
1179:     Example 2: solve the same problem using the `minimize` function.
1180:     (This `myopts` dictionary shows all of the available options,
1181:     although in practice only non-default values would be needed.
1182:     The returned value will be a dictionary.)
1183: 
1184:     >>> opts = {'maxiter' : None,    # default value.
1185:     ...         'disp' : True,    # non-default value.
1186:     ...         'gtol' : 1e-5,    # default value.
1187:     ...         'norm' : np.inf,  # default value.
1188:     ...         'eps' : 1.4901161193847656e-08}  # default value.
1189:     >>> res2 = optimize.minimize(f, x0, jac=gradf, args=args,
1190:     ...                          method='CG', options=opts)
1191:     Optimization terminated successfully.
1192:             Current function value: 1.617021
1193:             Iterations: 4
1194:             Function evaluations: 8
1195:             Gradient evaluations: 8
1196:     >>> res2.x  # minimum found
1197:     array([-1.80851064, -0.25531915])
1198: 
1199:     '''
1200:     opts = {'gtol': gtol,
1201:             'norm': norm,
1202:             'eps': epsilon,
1203:             'disp': disp,
1204:             'maxiter': maxiter,
1205:             'return_all': retall}
1206: 
1207:     res = _minimize_cg(f, x0, args, fprime, callback=callback, **opts)
1208: 
1209:     if full_output:
1210:         retlist = res['x'], res['fun'], res['nfev'], res['njev'], res['status']
1211:         if retall:
1212:             retlist += (res['allvecs'], )
1213:         return retlist
1214:     else:
1215:         if retall:
1216:             return res['x'], res['allvecs']
1217:         else:
1218:             return res['x']
1219: 
1220: 
1221: def _minimize_cg(fun, x0, args=(), jac=None, callback=None,
1222:                  gtol=1e-5, norm=Inf, eps=_epsilon, maxiter=None,
1223:                  disp=False, return_all=False,
1224:                  **unknown_options):
1225:     '''
1226:     Minimization of scalar function of one or more variables using the
1227:     conjugate gradient algorithm.
1228: 
1229:     Options
1230:     -------
1231:     disp : bool
1232:         Set to True to print convergence messages.
1233:     maxiter : int
1234:         Maximum number of iterations to perform.
1235:     gtol : float
1236:         Gradient norm must be less than `gtol` before successful
1237:         termination.
1238:     norm : float
1239:         Order of norm (Inf is max, -Inf is min).
1240:     eps : float or ndarray
1241:         If `jac` is approximated, use this value for the step size.
1242: 
1243:     '''
1244:     _check_unknown_options(unknown_options)
1245:     f = fun
1246:     fprime = jac
1247:     epsilon = eps
1248:     retall = return_all
1249: 
1250:     x0 = asarray(x0).flatten()
1251:     if maxiter is None:
1252:         maxiter = len(x0) * 200
1253:     func_calls, f = wrap_function(f, args)
1254:     if fprime is None:
1255:         grad_calls, myfprime = wrap_function(approx_fprime, (f, epsilon))
1256:     else:
1257:         grad_calls, myfprime = wrap_function(fprime, args)
1258:     gfk = myfprime(x0)
1259:     k = 0
1260:     xk = x0
1261: 
1262:     # Sets the initial step guess to dx ~ 1
1263:     old_fval = f(xk)
1264:     old_old_fval = old_fval + np.linalg.norm(gfk) / 2
1265: 
1266:     if retall:
1267:         allvecs = [xk]
1268:     warnflag = 0
1269:     pk = -gfk
1270:     gnorm = vecnorm(gfk, ord=norm)
1271: 
1272:     sigma_3 = 0.01
1273: 
1274:     while (gnorm > gtol) and (k < maxiter):
1275:         deltak = numpy.dot(gfk, gfk)
1276: 
1277:         cached_step = [None]
1278: 
1279:         def polak_ribiere_powell_step(alpha, gfkp1=None):
1280:             xkp1 = xk + alpha * pk
1281:             if gfkp1 is None:
1282:                 gfkp1 = myfprime(xkp1)
1283:             yk = gfkp1 - gfk
1284:             beta_k = max(0, numpy.dot(yk, gfkp1) / deltak)
1285:             pkp1 = -gfkp1 + beta_k * pk
1286:             gnorm = vecnorm(gfkp1, ord=norm)
1287:             return (alpha, xkp1, pkp1, gfkp1, gnorm)
1288: 
1289:         def descent_condition(alpha, xkp1, fp1, gfkp1):
1290:             # Polak-Ribiere+ needs an explicit check of a sufficient
1291:             # descent condition, which is not guaranteed by strong Wolfe.
1292:             #
1293:             # See Gilbert & Nocedal, "Global convergence properties of
1294:             # conjugate gradient methods for optimization",
1295:             # SIAM J. Optimization 2, 21 (1992).
1296:             cached_step[:] = polak_ribiere_powell_step(alpha, gfkp1)
1297:             alpha, xk, pk, gfk, gnorm = cached_step
1298: 
1299:             # Accept step if it leads to convergence.
1300:             if gnorm <= gtol:
1301:                 return True
1302: 
1303:             # Accept step if sufficient descent condition applies.
1304:             return numpy.dot(pk, gfk) <= -sigma_3 * numpy.dot(gfk, gfk)
1305: 
1306:         try:
1307:             alpha_k, fc, gc, old_fval, old_old_fval, gfkp1 = \
1308:                      _line_search_wolfe12(f, myfprime, xk, pk, gfk, old_fval,
1309:                                           old_old_fval, c2=0.4, amin=1e-100, amax=1e100,
1310:                                           extra_condition=descent_condition)
1311:         except _LineSearchError:
1312:             # Line search failed to find a better solution.
1313:             warnflag = 2
1314:             break
1315: 
1316:         # Reuse already computed results if possible
1317:         if alpha_k == cached_step[0]:
1318:             alpha_k, xk, pk, gfk, gnorm = cached_step
1319:         else:
1320:             alpha_k, xk, pk, gfk, gnorm = polak_ribiere_powell_step(alpha_k, gfkp1)
1321: 
1322:         if retall:
1323:             allvecs.append(xk)
1324:         if callback is not None:
1325:             callback(xk)
1326:         k += 1
1327: 
1328:     fval = old_fval
1329:     if warnflag == 2:
1330:         msg = _status_message['pr_loss']
1331:         if disp:
1332:             print("Warning: " + msg)
1333:             print("         Current function value: %f" % fval)
1334:             print("         Iterations: %d" % k)
1335:             print("         Function evaluations: %d" % func_calls[0])
1336:             print("         Gradient evaluations: %d" % grad_calls[0])
1337: 
1338:     elif k >= maxiter:
1339:         warnflag = 1
1340:         msg = _status_message['maxiter']
1341:         if disp:
1342:             print("Warning: " + msg)
1343:             print("         Current function value: %f" % fval)
1344:             print("         Iterations: %d" % k)
1345:             print("         Function evaluations: %d" % func_calls[0])
1346:             print("         Gradient evaluations: %d" % grad_calls[0])
1347:     else:
1348:         msg = _status_message['success']
1349:         if disp:
1350:             print(msg)
1351:             print("         Current function value: %f" % fval)
1352:             print("         Iterations: %d" % k)
1353:             print("         Function evaluations: %d" % func_calls[0])
1354:             print("         Gradient evaluations: %d" % grad_calls[0])
1355: 
1356:     result = OptimizeResult(fun=fval, jac=gfk, nfev=func_calls[0],
1357:                             njev=grad_calls[0], status=warnflag,
1358:                             success=(warnflag == 0), message=msg, x=xk,
1359:                             nit=k)
1360:     if retall:
1361:         result['allvecs'] = allvecs
1362:     return result
1363: 
1364: 
1365: def fmin_ncg(f, x0, fprime, fhess_p=None, fhess=None, args=(), avextol=1e-5,
1366:              epsilon=_epsilon, maxiter=None, full_output=0, disp=1, retall=0,
1367:              callback=None):
1368:     '''
1369:     Unconstrained minimization of a function using the Newton-CG method.
1370: 
1371:     Parameters
1372:     ----------
1373:     f : callable ``f(x, *args)``
1374:         Objective function to be minimized.
1375:     x0 : ndarray
1376:         Initial guess.
1377:     fprime : callable ``f'(x, *args)``
1378:         Gradient of f.
1379:     fhess_p : callable ``fhess_p(x, p, *args)``, optional
1380:         Function which computes the Hessian of f times an
1381:         arbitrary vector, p.
1382:     fhess : callable ``fhess(x, *args)``, optional
1383:         Function to compute the Hessian matrix of f.
1384:     args : tuple, optional
1385:         Extra arguments passed to f, fprime, fhess_p, and fhess
1386:         (the same set of extra arguments is supplied to all of
1387:         these functions).
1388:     epsilon : float or ndarray, optional
1389:         If fhess is approximated, use this value for the step size.
1390:     callback : callable, optional
1391:         An optional user-supplied function which is called after
1392:         each iteration.  Called as callback(xk), where xk is the
1393:         current parameter vector.
1394:     avextol : float, optional
1395:         Convergence is assumed when the average relative error in
1396:         the minimizer falls below this amount.
1397:     maxiter : int, optional
1398:         Maximum number of iterations to perform.
1399:     full_output : bool, optional
1400:         If True, return the optional outputs.
1401:     disp : bool, optional
1402:         If True, print convergence message.
1403:     retall : bool, optional
1404:         If True, return a list of results at each iteration.
1405: 
1406:     Returns
1407:     -------
1408:     xopt : ndarray
1409:         Parameters which minimize f, i.e. ``f(xopt) == fopt``.
1410:     fopt : float
1411:         Value of the function at xopt, i.e. ``fopt = f(xopt)``.
1412:     fcalls : int
1413:         Number of function calls made.
1414:     gcalls : int
1415:         Number of gradient calls made.
1416:     hcalls : int
1417:         Number of hessian calls made.
1418:     warnflag : int
1419:         Warnings generated by the algorithm.
1420:         1 : Maximum number of iterations exceeded.
1421:     allvecs : list
1422:         The result at each iteration, if retall is True (see below).
1423: 
1424:     See also
1425:     --------
1426:     minimize: Interface to minimization algorithms for multivariate
1427:         functions. See the 'Newton-CG' `method` in particular.
1428: 
1429:     Notes
1430:     -----
1431:     Only one of `fhess_p` or `fhess` need to be given.  If `fhess`
1432:     is provided, then `fhess_p` will be ignored.  If neither `fhess`
1433:     nor `fhess_p` is provided, then the hessian product will be
1434:     approximated using finite differences on `fprime`. `fhess_p`
1435:     must compute the hessian times an arbitrary vector. If it is not
1436:     given, finite-differences on `fprime` are used to compute
1437:     it.
1438: 
1439:     Newton-CG methods are also called truncated Newton methods. This
1440:     function differs from scipy.optimize.fmin_tnc because
1441: 
1442:     1. scipy.optimize.fmin_ncg is written purely in python using numpy
1443:         and scipy while scipy.optimize.fmin_tnc calls a C function.
1444:     2. scipy.optimize.fmin_ncg is only for unconstrained minimization
1445:         while scipy.optimize.fmin_tnc is for unconstrained minimization
1446:         or box constrained minimization. (Box constraints give
1447:         lower and upper bounds for each variable separately.)
1448: 
1449:     References
1450:     ----------
1451:     Wright & Nocedal, 'Numerical Optimization', 1999, pg. 140.
1452: 
1453:     '''
1454:     opts = {'xtol': avextol,
1455:             'eps': epsilon,
1456:             'maxiter': maxiter,
1457:             'disp': disp,
1458:             'return_all': retall}
1459: 
1460:     res = _minimize_newtoncg(f, x0, args, fprime, fhess, fhess_p,
1461:                              callback=callback, **opts)
1462: 
1463:     if full_output:
1464:         retlist = (res['x'], res['fun'], res['nfev'], res['njev'],
1465:                    res['nhev'], res['status'])
1466:         if retall:
1467:             retlist += (res['allvecs'], )
1468:         return retlist
1469:     else:
1470:         if retall:
1471:             return res['x'], res['allvecs']
1472:         else:
1473:             return res['x']
1474: 
1475: 
1476: def _minimize_newtoncg(fun, x0, args=(), jac=None, hess=None, hessp=None,
1477:                        callback=None, xtol=1e-5, eps=_epsilon, maxiter=None,
1478:                        disp=False, return_all=False,
1479:                        **unknown_options):
1480:     '''
1481:     Minimization of scalar function of one or more variables using the
1482:     Newton-CG algorithm.
1483: 
1484:     Note that the `jac` parameter (Jacobian) is required.
1485: 
1486:     Options
1487:     -------
1488:     disp : bool
1489:         Set to True to print convergence messages.
1490:     xtol : float
1491:         Average relative error in solution `xopt` acceptable for
1492:         convergence.
1493:     maxiter : int
1494:         Maximum number of iterations to perform.
1495:     eps : float or ndarray
1496:         If `jac` is approximated, use this value for the step size.
1497: 
1498:     '''
1499:     _check_unknown_options(unknown_options)
1500:     if jac is None:
1501:         raise ValueError('Jacobian is required for Newton-CG method')
1502:     f = fun
1503:     fprime = jac
1504:     fhess_p = hessp
1505:     fhess = hess
1506:     avextol = xtol
1507:     epsilon = eps
1508:     retall = return_all
1509: 
1510:     def terminate(warnflag, msg):
1511:         if disp:
1512:             print(msg)
1513:             print("         Current function value: %f" % old_fval)
1514:             print("         Iterations: %d" % k)
1515:             print("         Function evaluations: %d" % fcalls[0])
1516:             print("         Gradient evaluations: %d" % gcalls[0])
1517:             print("         Hessian evaluations: %d" % hcalls)
1518:         fval = old_fval
1519:         result = OptimizeResult(fun=fval, jac=gfk, nfev=fcalls[0],
1520:                                 njev=gcalls[0], nhev=hcalls, status=warnflag,
1521:                                 success=(warnflag == 0), message=msg, x=xk,
1522:                                 nit=k)
1523:         if retall:
1524:             result['allvecs'] = allvecs
1525:         return result
1526: 
1527:     x0 = asarray(x0).flatten()
1528:     fcalls, f = wrap_function(f, args)
1529:     gcalls, fprime = wrap_function(fprime, args)
1530:     hcalls = 0
1531:     if maxiter is None:
1532:         maxiter = len(x0)*200
1533:     cg_maxiter = 20*len(x0)
1534: 
1535:     xtol = len(x0) * avextol
1536:     update = [2 * xtol]
1537:     xk = x0
1538:     if retall:
1539:         allvecs = [xk]
1540:     k = 0
1541:     old_fval = f(x0)
1542:     old_old_fval = None
1543:     float64eps = numpy.finfo(numpy.float64).eps
1544:     while numpy.add.reduce(numpy.abs(update)) > xtol:
1545:         if k >= maxiter:
1546:             msg = "Warning: " + _status_message['maxiter']
1547:             return terminate(1, msg)
1548:         # Compute a search direction pk by applying the CG method to
1549:         #  del2 f(xk) p = - grad f(xk) starting from 0.
1550:         b = -fprime(xk)
1551:         maggrad = numpy.add.reduce(numpy.abs(b))
1552:         eta = numpy.min([0.5, numpy.sqrt(maggrad)])
1553:         termcond = eta * maggrad
1554:         xsupi = zeros(len(x0), dtype=x0.dtype)
1555:         ri = -b
1556:         psupi = -ri
1557:         i = 0
1558:         dri0 = numpy.dot(ri, ri)
1559: 
1560:         if fhess is not None:             # you want to compute hessian once.
1561:             A = fhess(*(xk,) + args)
1562:             hcalls = hcalls + 1
1563: 
1564:         for k2 in xrange(cg_maxiter):
1565:             if numpy.add.reduce(numpy.abs(ri)) <= termcond:
1566:                 break
1567:             if fhess is None:
1568:                 if fhess_p is None:
1569:                     Ap = approx_fhess_p(xk, psupi, fprime, epsilon)
1570:                 else:
1571:                     Ap = fhess_p(xk, psupi, *args)
1572:                     hcalls = hcalls + 1
1573:             else:
1574:                 Ap = numpy.dot(A, psupi)
1575:             # check curvature
1576:             Ap = asarray(Ap).squeeze()  # get rid of matrices...
1577:             curv = numpy.dot(psupi, Ap)
1578:             if 0 <= curv <= 3 * float64eps:
1579:                 break
1580:             elif curv < 0:
1581:                 if (i > 0):
1582:                     break
1583:                 else:
1584:                     # fall back to steepest descent direction
1585:                     xsupi = dri0 / (-curv) * b
1586:                     break
1587:             alphai = dri0 / curv
1588:             xsupi = xsupi + alphai * psupi
1589:             ri = ri + alphai * Ap
1590:             dri1 = numpy.dot(ri, ri)
1591:             betai = dri1 / dri0
1592:             psupi = -ri + betai * psupi
1593:             i = i + 1
1594:             dri0 = dri1          # update numpy.dot(ri,ri) for next time.
1595:         else:
1596:             # curvature keeps increasing, bail out
1597:             msg = ("Warning: CG iterations didn't converge.  The Hessian is not "
1598:                    "positive definite.")
1599:             return terminate(3, msg)
1600: 
1601:         pk = xsupi  # search direction is solution to system.
1602:         gfk = -b    # gradient at xk
1603: 
1604:         try:
1605:             alphak, fc, gc, old_fval, old_old_fval, gfkp1 = \
1606:                      _line_search_wolfe12(f, fprime, xk, pk, gfk,
1607:                                           old_fval, old_old_fval)
1608:         except _LineSearchError:
1609:             # Line search failed to find a better solution.
1610:             msg = "Warning: " + _status_message['pr_loss']
1611:             return terminate(2, msg)
1612: 
1613:         update = alphak * pk
1614:         xk = xk + update        # upcast if necessary
1615:         if callback is not None:
1616:             callback(xk)
1617:         if retall:
1618:             allvecs.append(xk)
1619:         k += 1
1620:     else:
1621:         msg = _status_message['success']
1622:         return terminate(0, msg)
1623: 
1624: 
1625: def fminbound(func, x1, x2, args=(), xtol=1e-5, maxfun=500,
1626:               full_output=0, disp=1):
1627:     '''Bounded minimization for scalar functions.
1628: 
1629:     Parameters
1630:     ----------
1631:     func : callable f(x,*args)
1632:         Objective function to be minimized (must accept and return scalars).
1633:     x1, x2 : float or array scalar
1634:         The optimization bounds.
1635:     args : tuple, optional
1636:         Extra arguments passed to function.
1637:     xtol : float, optional
1638:         The convergence tolerance.
1639:     maxfun : int, optional
1640:         Maximum number of function evaluations allowed.
1641:     full_output : bool, optional
1642:         If True, return optional outputs.
1643:     disp : int, optional
1644:         If non-zero, print messages.
1645:             0 : no message printing.
1646:             1 : non-convergence notification messages only.
1647:             2 : print a message on convergence too.
1648:             3 : print iteration results.
1649: 
1650: 
1651:     Returns
1652:     -------
1653:     xopt : ndarray
1654:         Parameters (over given interval) which minimize the
1655:         objective function.
1656:     fval : number
1657:         The function value at the minimum point.
1658:     ierr : int
1659:         An error flag (0 if converged, 1 if maximum number of
1660:         function calls reached).
1661:     numfunc : int
1662:       The number of function calls made.
1663: 
1664:     See also
1665:     --------
1666:     minimize_scalar: Interface to minimization algorithms for scalar
1667:         univariate functions. See the 'Bounded' `method` in particular.
1668: 
1669:     Notes
1670:     -----
1671:     Finds a local minimizer of the scalar function `func` in the
1672:     interval x1 < xopt < x2 using Brent's method.  (See `brent`
1673:     for auto-bracketing).
1674: 
1675:     Examples
1676:     --------
1677:     `fminbound` finds the minimum of the function in the given range.
1678:     The following examples illustrate the same
1679: 
1680:     >>> def f(x):
1681:     ...     return x**2
1682: 
1683:     >>> from scipy import optimize
1684: 
1685:     >>> minimum = optimize.fminbound(f, -1, 2)
1686:     >>> minimum
1687:     0.0
1688:     >>> minimum = optimize.fminbound(f, 1, 2)
1689:     >>> minimum
1690:     1.0000059608609866
1691:     '''
1692:     options = {'xatol': xtol,
1693:                'maxiter': maxfun,
1694:                'disp': disp}
1695: 
1696:     res = _minimize_scalar_bounded(func, (x1, x2), args, **options)
1697:     if full_output:
1698:         return res['x'], res['fun'], res['status'], res['nfev']
1699:     else:
1700:         return res['x']
1701: 
1702: 
1703: def _minimize_scalar_bounded(func, bounds, args=(),
1704:                              xatol=1e-5, maxiter=500, disp=0,
1705:                              **unknown_options):
1706:     '''
1707:     Options
1708:     -------
1709:     maxiter : int
1710:         Maximum number of iterations to perform.
1711:     disp : bool
1712:         Set to True to print convergence messages.
1713:     xatol : float
1714:         Absolute error in solution `xopt` acceptable for convergence.
1715: 
1716:     '''
1717:     _check_unknown_options(unknown_options)
1718:     maxfun = maxiter
1719:     # Test bounds are of correct form
1720:     if len(bounds) != 2:
1721:         raise ValueError('bounds must have two elements.')
1722:     x1, x2 = bounds
1723: 
1724:     if not (is_array_scalar(x1) and is_array_scalar(x2)):
1725:         raise ValueError("Optimisation bounds must be scalars"
1726:                          " or array scalars.")
1727:     if x1 > x2:
1728:         raise ValueError("The lower bound exceeds the upper bound.")
1729: 
1730:     flag = 0
1731:     header = ' Func-count     x          f(x)          Procedure'
1732:     step = '       initial'
1733: 
1734:     sqrt_eps = sqrt(2.2e-16)
1735:     golden_mean = 0.5 * (3.0 - sqrt(5.0))
1736:     a, b = x1, x2
1737:     fulc = a + golden_mean * (b - a)
1738:     nfc, xf = fulc, fulc
1739:     rat = e = 0.0
1740:     x = xf
1741:     fx = func(x, *args)
1742:     num = 1
1743:     fmin_data = (1, xf, fx)
1744: 
1745:     ffulc = fnfc = fx
1746:     xm = 0.5 * (a + b)
1747:     tol1 = sqrt_eps * numpy.abs(xf) + xatol / 3.0
1748:     tol2 = 2.0 * tol1
1749: 
1750:     if disp > 2:
1751:         print(" ")
1752:         print(header)
1753:         print("%5.0f   %12.6g %12.6g %s" % (fmin_data + (step,)))
1754: 
1755:     while (numpy.abs(xf - xm) > (tol2 - 0.5 * (b - a))):
1756:         golden = 1
1757:         # Check for parabolic fit
1758:         if numpy.abs(e) > tol1:
1759:             golden = 0
1760:             r = (xf - nfc) * (fx - ffulc)
1761:             q = (xf - fulc) * (fx - fnfc)
1762:             p = (xf - fulc) * q - (xf - nfc) * r
1763:             q = 2.0 * (q - r)
1764:             if q > 0.0:
1765:                 p = -p
1766:             q = numpy.abs(q)
1767:             r = e
1768:             e = rat
1769: 
1770:             # Check for acceptability of parabola
1771:             if ((numpy.abs(p) < numpy.abs(0.5*q*r)) and (p > q*(a - xf)) and
1772:                     (p < q * (b - xf))):
1773:                 rat = (p + 0.0) / q
1774:                 x = xf + rat
1775:                 step = '       parabolic'
1776: 
1777:                 if ((x - a) < tol2) or ((b - x) < tol2):
1778:                     si = numpy.sign(xm - xf) + ((xm - xf) == 0)
1779:                     rat = tol1 * si
1780:             else:      # do a golden section step
1781:                 golden = 1
1782: 
1783:         if golden:  # Do a golden-section step
1784:             if xf >= xm:
1785:                 e = a - xf
1786:             else:
1787:                 e = b - xf
1788:             rat = golden_mean*e
1789:             step = '       golden'
1790: 
1791:         si = numpy.sign(rat) + (rat == 0)
1792:         x = xf + si * numpy.max([numpy.abs(rat), tol1])
1793:         fu = func(x, *args)
1794:         num += 1
1795:         fmin_data = (num, x, fu)
1796:         if disp > 2:
1797:             print("%5.0f   %12.6g %12.6g %s" % (fmin_data + (step,)))
1798: 
1799:         if fu <= fx:
1800:             if x >= xf:
1801:                 a = xf
1802:             else:
1803:                 b = xf
1804:             fulc, ffulc = nfc, fnfc
1805:             nfc, fnfc = xf, fx
1806:             xf, fx = x, fu
1807:         else:
1808:             if x < xf:
1809:                 a = x
1810:             else:
1811:                 b = x
1812:             if (fu <= fnfc) or (nfc == xf):
1813:                 fulc, ffulc = nfc, fnfc
1814:                 nfc, fnfc = x, fu
1815:             elif (fu <= ffulc) or (fulc == xf) or (fulc == nfc):
1816:                 fulc, ffulc = x, fu
1817: 
1818:         xm = 0.5 * (a + b)
1819:         tol1 = sqrt_eps * numpy.abs(xf) + xatol / 3.0
1820:         tol2 = 2.0 * tol1
1821: 
1822:         if num >= maxfun:
1823:             flag = 1
1824:             break
1825: 
1826:     fval = fx
1827:     if disp > 0:
1828:         _endprint(x, flag, fval, maxfun, xatol, disp)
1829: 
1830:     result = OptimizeResult(fun=fval, status=flag, success=(flag == 0),
1831:                             message={0: 'Solution found.',
1832:                                      1: 'Maximum number of function calls '
1833:                                         'reached.'}.get(flag, ''),
1834:                             x=xf, nfev=num)
1835: 
1836:     return result
1837: 
1838: 
1839: class Brent:
1840:     #need to rethink design of __init__
1841:     def __init__(self, func, args=(), tol=1.48e-8, maxiter=500,
1842:                  full_output=0):
1843:         self.func = func
1844:         self.args = args
1845:         self.tol = tol
1846:         self.maxiter = maxiter
1847:         self._mintol = 1.0e-11
1848:         self._cg = 0.3819660
1849:         self.xmin = None
1850:         self.fval = None
1851:         self.iter = 0
1852:         self.funcalls = 0
1853: 
1854:     # need to rethink design of set_bracket (new options, etc)
1855:     def set_bracket(self, brack=None):
1856:         self.brack = brack
1857: 
1858:     def get_bracket_info(self):
1859:         #set up
1860:         func = self.func
1861:         args = self.args
1862:         brack = self.brack
1863:         ### BEGIN core bracket_info code ###
1864:         ### carefully DOCUMENT any CHANGES in core ##
1865:         if brack is None:
1866:             xa, xb, xc, fa, fb, fc, funcalls = bracket(func, args=args)
1867:         elif len(brack) == 2:
1868:             xa, xb, xc, fa, fb, fc, funcalls = bracket(func, xa=brack[0],
1869:                                                        xb=brack[1], args=args)
1870:         elif len(brack) == 3:
1871:             xa, xb, xc = brack
1872:             if (xa > xc):  # swap so xa < xc can be assumed
1873:                 xc, xa = xa, xc
1874:             if not ((xa < xb) and (xb < xc)):
1875:                 raise ValueError("Not a bracketing interval.")
1876:             fa = func(*((xa,) + args))
1877:             fb = func(*((xb,) + args))
1878:             fc = func(*((xc,) + args))
1879:             if not ((fb < fa) and (fb < fc)):
1880:                 raise ValueError("Not a bracketing interval.")
1881:             funcalls = 3
1882:         else:
1883:             raise ValueError("Bracketing interval must be "
1884:                              "length 2 or 3 sequence.")
1885:         ### END core bracket_info code ###
1886: 
1887:         return xa, xb, xc, fa, fb, fc, funcalls
1888: 
1889:     def optimize(self):
1890:         # set up for optimization
1891:         func = self.func
1892:         xa, xb, xc, fa, fb, fc, funcalls = self.get_bracket_info()
1893:         _mintol = self._mintol
1894:         _cg = self._cg
1895:         #################################
1896:         #BEGIN CORE ALGORITHM
1897:         #################################
1898:         x = w = v = xb
1899:         fw = fv = fx = func(*((x,) + self.args))
1900:         if (xa < xc):
1901:             a = xa
1902:             b = xc
1903:         else:
1904:             a = xc
1905:             b = xa
1906:         deltax = 0.0
1907:         funcalls = 1
1908:         iter = 0
1909:         while (iter < self.maxiter):
1910:             tol1 = self.tol * numpy.abs(x) + _mintol
1911:             tol2 = 2.0 * tol1
1912:             xmid = 0.5 * (a + b)
1913:             # check for convergence
1914:             if numpy.abs(x - xmid) < (tol2 - 0.5 * (b - a)):
1915:                 break
1916:             # XXX In the first iteration, rat is only bound in the true case
1917:             # of this conditional. This used to cause an UnboundLocalError
1918:             # (gh-4140). It should be set before the if (but to what?).
1919:             if (numpy.abs(deltax) <= tol1):
1920:                 if (x >= xmid):
1921:                     deltax = a - x       # do a golden section step
1922:                 else:
1923:                     deltax = b - x
1924:                 rat = _cg * deltax
1925:             else:                              # do a parabolic step
1926:                 tmp1 = (x - w) * (fx - fv)
1927:                 tmp2 = (x - v) * (fx - fw)
1928:                 p = (x - v) * tmp2 - (x - w) * tmp1
1929:                 tmp2 = 2.0 * (tmp2 - tmp1)
1930:                 if (tmp2 > 0.0):
1931:                     p = -p
1932:                 tmp2 = numpy.abs(tmp2)
1933:                 dx_temp = deltax
1934:                 deltax = rat
1935:                 # check parabolic fit
1936:                 if ((p > tmp2 * (a - x)) and (p < tmp2 * (b - x)) and
1937:                         (numpy.abs(p) < numpy.abs(0.5 * tmp2 * dx_temp))):
1938:                     rat = p * 1.0 / tmp2        # if parabolic step is useful.
1939:                     u = x + rat
1940:                     if ((u - a) < tol2 or (b - u) < tol2):
1941:                         if xmid - x >= 0:
1942:                             rat = tol1
1943:                         else:
1944:                             rat = -tol1
1945:                 else:
1946:                     if (x >= xmid):
1947:                         deltax = a - x  # if it's not do a golden section step
1948:                     else:
1949:                         deltax = b - x
1950:                     rat = _cg * deltax
1951: 
1952:             if (numpy.abs(rat) < tol1):            # update by at least tol1
1953:                 if rat >= 0:
1954:                     u = x + tol1
1955:                 else:
1956:                     u = x - tol1
1957:             else:
1958:                 u = x + rat
1959:             fu = func(*((u,) + self.args))      # calculate new output value
1960:             funcalls += 1
1961: 
1962:             if (fu > fx):                 # if it's bigger than current
1963:                 if (u < x):
1964:                     a = u
1965:                 else:
1966:                     b = u
1967:                 if (fu <= fw) or (w == x):
1968:                     v = w
1969:                     w = u
1970:                     fv = fw
1971:                     fw = fu
1972:                 elif (fu <= fv) or (v == x) or (v == w):
1973:                     v = u
1974:                     fv = fu
1975:             else:
1976:                 if (u >= x):
1977:                     a = x
1978:                 else:
1979:                     b = x
1980:                 v = w
1981:                 w = x
1982:                 x = u
1983:                 fv = fw
1984:                 fw = fx
1985:                 fx = fu
1986: 
1987:             iter += 1
1988:         #################################
1989:         #END CORE ALGORITHM
1990:         #################################
1991: 
1992:         self.xmin = x
1993:         self.fval = fx
1994:         self.iter = iter
1995:         self.funcalls = funcalls
1996: 
1997:     def get_result(self, full_output=False):
1998:         if full_output:
1999:             return self.xmin, self.fval, self.iter, self.funcalls
2000:         else:
2001:             return self.xmin
2002: 
2003: 
2004: def brent(func, args=(), brack=None, tol=1.48e-8, full_output=0, maxiter=500):
2005:     '''
2006:     Given a function of one-variable and a possible bracket, return
2007:     the local minimum of the function isolated to a fractional precision
2008:     of tol.
2009: 
2010:     Parameters
2011:     ----------
2012:     func : callable f(x,*args)
2013:         Objective function.
2014:     args : tuple, optional
2015:         Additional arguments (if present).
2016:     brack : tuple, optional
2017:         Either a triple (xa,xb,xc) where xa<xb<xc and func(xb) <
2018:         func(xa), func(xc) or a pair (xa,xb) which are used as a
2019:         starting interval for a downhill bracket search (see
2020:         `bracket`). Providing the pair (xa,xb) does not always mean
2021:         the obtained solution will satisfy xa<=x<=xb.
2022:     tol : float, optional
2023:         Stop if between iteration change is less than `tol`.
2024:     full_output : bool, optional
2025:         If True, return all output args (xmin, fval, iter,
2026:         funcalls).
2027:     maxiter : int, optional
2028:         Maximum number of iterations in solution.
2029: 
2030:     Returns
2031:     -------
2032:     xmin : ndarray
2033:         Optimum point.
2034:     fval : float
2035:         Optimum value.
2036:     iter : int
2037:         Number of iterations.
2038:     funcalls : int
2039:         Number of objective function evaluations made.
2040: 
2041:     See also
2042:     --------
2043:     minimize_scalar: Interface to minimization algorithms for scalar
2044:         univariate functions. See the 'Brent' `method` in particular.
2045: 
2046:     Notes
2047:     -----
2048:     Uses inverse parabolic interpolation when possible to speed up
2049:     convergence of golden section method.
2050: 
2051:     Does not ensure that the minimum lies in the range specified by
2052:     `brack`. See `fminbound`.
2053:     
2054:     Examples
2055:     --------
2056:     We illustrate the behaviour of the function when `brack` is of
2057:     size 2 and 3 respectively. In the case where `brack` is of the
2058:     form (xa,xb), we can see for the given values, the output need
2059:     not necessarily lie in the range (xa,xb).
2060: 
2061:     >>> def f(x):
2062:     ...     return x**2
2063:     
2064:     >>> from scipy import optimize
2065: 
2066:     >>> minimum = optimize.brent(f,brack=(1,2))
2067:     >>> minimum
2068:     0.0
2069:     >>> minimum = optimize.brent(f,brack=(-1,0.5,2))
2070:     >>> minimum
2071:     -2.7755575615628914e-17
2072: 
2073:     '''
2074:     options = {'xtol': tol,
2075:                'maxiter': maxiter}
2076:     res = _minimize_scalar_brent(func, brack, args, **options)
2077:     if full_output:
2078:         return res['x'], res['fun'], res['nit'], res['nfev']
2079:     else:
2080:         return res['x']
2081: 
2082: 
2083: def _minimize_scalar_brent(func, brack=None, args=(),
2084:                            xtol=1.48e-8, maxiter=500,
2085:                            **unknown_options):
2086:     '''
2087:     Options
2088:     -------
2089:     maxiter : int
2090:         Maximum number of iterations to perform.
2091:     xtol : float
2092:         Relative error in solution `xopt` acceptable for convergence.
2093: 
2094:     Notes
2095:     -----
2096:     Uses inverse parabolic interpolation when possible to speed up
2097:     convergence of golden section method.
2098: 
2099:     '''
2100:     _check_unknown_options(unknown_options)
2101:     tol = xtol
2102:     if tol < 0:
2103:         raise ValueError('tolerance should be >= 0, got %r' % tol)
2104: 
2105:     brent = Brent(func=func, args=args, tol=tol,
2106:                   full_output=True, maxiter=maxiter)
2107:     brent.set_bracket(brack)
2108:     brent.optimize()
2109:     x, fval, nit, nfev = brent.get_result(full_output=True)
2110:     return OptimizeResult(fun=fval, x=x, nit=nit, nfev=nfev,
2111:                           success=nit < maxiter)
2112: 
2113: 
2114: def golden(func, args=(), brack=None, tol=_epsilon,
2115:            full_output=0, maxiter=5000):
2116:     '''
2117:     Return the minimum of a function of one variable using golden section
2118:     method.
2119: 
2120:     Given a function of one variable and a possible bracketing interval,
2121:     return the minimum of the function isolated to a fractional precision of
2122:     tol.
2123: 
2124:     Parameters
2125:     ----------
2126:     func : callable func(x,*args)
2127:         Objective function to minimize.
2128:     args : tuple, optional
2129:         Additional arguments (if present), passed to func.
2130:     brack : tuple, optional
2131:         Triple (a,b,c), where (a<b<c) and func(b) <
2132:         func(a),func(c).  If bracket consists of two numbers (a,
2133:         c), then they are assumed to be a starting interval for a
2134:         downhill bracket search (see `bracket`); it doesn't always
2135:         mean that obtained solution will satisfy a<=x<=c.
2136:     tol : float, optional
2137:         x tolerance stop criterion
2138:     full_output : bool, optional
2139:         If True, return optional outputs.
2140:     maxiter : int
2141:         Maximum number of iterations to perform.
2142: 
2143:     See also
2144:     --------
2145:     minimize_scalar: Interface to minimization algorithms for scalar
2146:         univariate functions. See the 'Golden' `method` in particular.
2147: 
2148:     Notes
2149:     -----
2150:     Uses analog of bisection method to decrease the bracketed
2151:     interval.
2152: 
2153:     Examples
2154:     --------
2155:     We illustrate the behaviour of the function when `brack` is of
2156:     size 2 and 3 respectively. In the case where `brack` is of the
2157:     form (xa,xb), we can see for the given values, the output need
2158:     not necessarily lie in the range ``(xa, xb)``.
2159: 
2160:     >>> def f(x):
2161:     ...     return x**2
2162:     
2163:     >>> from scipy import optimize
2164: 
2165:     >>> minimum = optimize.golden(f, brack=(1, 2))
2166:     >>> minimum
2167:     1.5717277788484873e-162
2168:     >>> minimum = optimize.golden(f, brack=(-1, 0.5, 2))
2169:     >>> minimum
2170:     -1.5717277788484873e-162
2171: 
2172:     '''
2173:     options = {'xtol': tol, 'maxiter': maxiter}
2174:     res = _minimize_scalar_golden(func, brack, args, **options)
2175:     if full_output:
2176:         return res['x'], res['fun'], res['nfev']
2177:     else:
2178:         return res['x']
2179: 
2180: 
2181: def _minimize_scalar_golden(func, brack=None, args=(),
2182:                             xtol=_epsilon, maxiter=5000, **unknown_options):
2183:     '''
2184:     Options
2185:     -------
2186:     maxiter : int
2187:         Maximum number of iterations to perform.
2188:     xtol : float
2189:         Relative error in solution `xopt` acceptable for convergence.
2190: 
2191:     '''
2192:     _check_unknown_options(unknown_options)
2193:     tol = xtol
2194:     if brack is None:
2195:         xa, xb, xc, fa, fb, fc, funcalls = bracket(func, args=args)
2196:     elif len(brack) == 2:
2197:         xa, xb, xc, fa, fb, fc, funcalls = bracket(func, xa=brack[0],
2198:                                                    xb=brack[1], args=args)
2199:     elif len(brack) == 3:
2200:         xa, xb, xc = brack
2201:         if (xa > xc):  # swap so xa < xc can be assumed
2202:             xc, xa = xa, xc
2203:         if not ((xa < xb) and (xb < xc)):
2204:             raise ValueError("Not a bracketing interval.")
2205:         fa = func(*((xa,) + args))
2206:         fb = func(*((xb,) + args))
2207:         fc = func(*((xc,) + args))
2208:         if not ((fb < fa) and (fb < fc)):
2209:             raise ValueError("Not a bracketing interval.")
2210:         funcalls = 3
2211:     else:
2212:         raise ValueError("Bracketing interval must be length 2 or 3 sequence.")
2213: 
2214:     _gR = 0.61803399  # golden ratio conjugate: 2.0/(1.0+sqrt(5.0))
2215:     _gC = 1.0 - _gR
2216:     x3 = xc
2217:     x0 = xa
2218:     if (numpy.abs(xc - xb) > numpy.abs(xb - xa)):
2219:         x1 = xb
2220:         x2 = xb + _gC * (xc - xb)
2221:     else:
2222:         x2 = xb
2223:         x1 = xb - _gC * (xb - xa)
2224:     f1 = func(*((x1,) + args))
2225:     f2 = func(*((x2,) + args))
2226:     funcalls += 2
2227:     nit = 0
2228:     for i in xrange(maxiter):
2229:         if numpy.abs(x3 - x0) <= tol * (numpy.abs(x1) + numpy.abs(x2)):
2230:             break
2231:         if (f2 < f1):
2232:             x0 = x1
2233:             x1 = x2
2234:             x2 = _gR * x1 + _gC * x3
2235:             f1 = f2
2236:             f2 = func(*((x2,) + args))
2237:         else:
2238:             x3 = x2
2239:             x2 = x1
2240:             x1 = _gR * x2 + _gC * x0
2241:             f2 = f1
2242:             f1 = func(*((x1,) + args))
2243:         funcalls += 1
2244:         nit += 1
2245:     if (f1 < f2):
2246:         xmin = x1
2247:         fval = f1
2248:     else:
2249:         xmin = x2
2250:         fval = f2
2251: 
2252:     return OptimizeResult(fun=fval, nfev=funcalls, x=xmin, nit=nit,
2253:                           success=nit < maxiter)
2254: 
2255: 
2256: def bracket(func, xa=0.0, xb=1.0, args=(), grow_limit=110.0, maxiter=1000):
2257:     '''
2258:     Bracket the minimum of the function.
2259: 
2260:     Given a function and distinct initial points, search in the
2261:     downhill direction (as defined by the initital points) and return
2262:     new points xa, xb, xc that bracket the minimum of the function
2263:     f(xa) > f(xb) < f(xc). It doesn't always mean that obtained
2264:     solution will satisfy xa<=x<=xb
2265: 
2266:     Parameters
2267:     ----------
2268:     func : callable f(x,*args)
2269:         Objective function to minimize.
2270:     xa, xb : float, optional
2271:         Bracketing interval. Defaults `xa` to 0.0, and `xb` to 1.0.
2272:     args : tuple, optional
2273:         Additional arguments (if present), passed to `func`.
2274:     grow_limit : float, optional
2275:         Maximum grow limit.  Defaults to 110.0
2276:     maxiter : int, optional
2277:         Maximum number of iterations to perform. Defaults to 1000.
2278: 
2279:     Returns
2280:     -------
2281:     xa, xb, xc : float
2282:         Bracket.
2283:     fa, fb, fc : float
2284:         Objective function values in bracket.
2285:     funcalls : int
2286:         Number of function evaluations made.
2287: 
2288:     '''
2289:     _gold = 1.618034  # golden ratio: (1.0+sqrt(5.0))/2.0
2290:     _verysmall_num = 1e-21
2291:     fa = func(*(xa,) + args)
2292:     fb = func(*(xb,) + args)
2293:     if (fa < fb):                      # Switch so fa > fb
2294:         xa, xb = xb, xa
2295:         fa, fb = fb, fa
2296:     xc = xb + _gold * (xb - xa)
2297:     fc = func(*((xc,) + args))
2298:     funcalls = 3
2299:     iter = 0
2300:     while (fc < fb):
2301:         tmp1 = (xb - xa) * (fb - fc)
2302:         tmp2 = (xb - xc) * (fb - fa)
2303:         val = tmp2 - tmp1
2304:         if numpy.abs(val) < _verysmall_num:
2305:             denom = 2.0 * _verysmall_num
2306:         else:
2307:             denom = 2.0 * val
2308:         w = xb - ((xb - xc) * tmp2 - (xb - xa) * tmp1) / denom
2309:         wlim = xb + grow_limit * (xc - xb)
2310:         if iter > maxiter:
2311:             raise RuntimeError("Too many iterations.")
2312:         iter += 1
2313:         if (w - xc) * (xb - w) > 0.0:
2314:             fw = func(*((w,) + args))
2315:             funcalls += 1
2316:             if (fw < fc):
2317:                 xa = xb
2318:                 xb = w
2319:                 fa = fb
2320:                 fb = fw
2321:                 return xa, xb, xc, fa, fb, fc, funcalls
2322:             elif (fw > fb):
2323:                 xc = w
2324:                 fc = fw
2325:                 return xa, xb, xc, fa, fb, fc, funcalls
2326:             w = xc + _gold * (xc - xb)
2327:             fw = func(*((w,) + args))
2328:             funcalls += 1
2329:         elif (w - wlim)*(wlim - xc) >= 0.0:
2330:             w = wlim
2331:             fw = func(*((w,) + args))
2332:             funcalls += 1
2333:         elif (w - wlim)*(xc - w) > 0.0:
2334:             fw = func(*((w,) + args))
2335:             funcalls += 1
2336:             if (fw < fc):
2337:                 xb = xc
2338:                 xc = w
2339:                 w = xc + _gold * (xc - xb)
2340:                 fb = fc
2341:                 fc = fw
2342:                 fw = func(*((w,) + args))
2343:                 funcalls += 1
2344:         else:
2345:             w = xc + _gold * (xc - xb)
2346:             fw = func(*((w,) + args))
2347:             funcalls += 1
2348:         xa = xb
2349:         xb = xc
2350:         xc = w
2351:         fa = fb
2352:         fb = fc
2353:         fc = fw
2354:     return xa, xb, xc, fa, fb, fc, funcalls
2355: 
2356: 
2357: def _linesearch_powell(func, p, xi, tol=1e-3):
2358:     '''Line-search algorithm using fminbound.
2359: 
2360:     Find the minimium of the function ``func(x0+ alpha*direc)``.
2361: 
2362:     '''
2363:     def myfunc(alpha):
2364:         return func(p + alpha*xi)
2365:     alpha_min, fret, iter, num = brent(myfunc, full_output=1, tol=tol)
2366:     xi = alpha_min*xi
2367:     return squeeze(fret), p + xi, xi
2368: 
2369: 
2370: def fmin_powell(func, x0, args=(), xtol=1e-4, ftol=1e-4, maxiter=None,
2371:                 maxfun=None, full_output=0, disp=1, retall=0, callback=None,
2372:                 direc=None):
2373:     '''
2374:     Minimize a function using modified Powell's method. This method
2375:     only uses function values, not derivatives.
2376: 
2377:     Parameters
2378:     ----------
2379:     func : callable f(x,*args)
2380:         Objective function to be minimized.
2381:     x0 : ndarray
2382:         Initial guess.
2383:     args : tuple, optional
2384:         Extra arguments passed to func.
2385:     callback : callable, optional
2386:         An optional user-supplied function, called after each
2387:         iteration.  Called as ``callback(xk)``, where ``xk`` is the
2388:         current parameter vector.
2389:     direc : ndarray, optional
2390:         Initial direction set.
2391:     xtol : float, optional
2392:         Line-search error tolerance.
2393:     ftol : float, optional
2394:         Relative error in ``func(xopt)`` acceptable for convergence.
2395:     maxiter : int, optional
2396:         Maximum number of iterations to perform.
2397:     maxfun : int, optional
2398:         Maximum number of function evaluations to make.
2399:     full_output : bool, optional
2400:         If True, fopt, xi, direc, iter, funcalls, and
2401:         warnflag are returned.
2402:     disp : bool, optional
2403:         If True, print convergence messages.
2404:     retall : bool, optional
2405:         If True, return a list of the solution at each iteration.
2406: 
2407:     Returns
2408:     -------
2409:     xopt : ndarray
2410:         Parameter which minimizes `func`.
2411:     fopt : number
2412:         Value of function at minimum: ``fopt = func(xopt)``.
2413:     direc : ndarray
2414:         Current direction set.
2415:     iter : int
2416:         Number of iterations.
2417:     funcalls : int
2418:         Number of function calls made.
2419:     warnflag : int
2420:         Integer warning flag:
2421:             1 : Maximum number of function evaluations.
2422:             2 : Maximum number of iterations.
2423:     allvecs : list
2424:         List of solutions at each iteration.
2425: 
2426:     See also
2427:     --------
2428:     minimize: Interface to unconstrained minimization algorithms for
2429:         multivariate functions. See the 'Powell' `method` in particular.
2430: 
2431:     Notes
2432:     -----
2433:     Uses a modification of Powell's method to find the minimum of
2434:     a function of N variables. Powell's method is a conjugate
2435:     direction method.
2436: 
2437:     The algorithm has two loops. The outer loop
2438:     merely iterates over the inner loop. The inner loop minimizes
2439:     over each current direction in the direction set. At the end
2440:     of the inner loop, if certain conditions are met, the direction
2441:     that gave the largest decrease is dropped and replaced with
2442:     the difference between the current estimated x and the estimated
2443:     x from the beginning of the inner-loop.
2444: 
2445:     The technical conditions for replacing the direction of greatest
2446:     increase amount to checking that
2447: 
2448:     1. No further gain can be made along the direction of greatest increase
2449:        from that iteration.
2450:     2. The direction of greatest increase accounted for a large sufficient
2451:        fraction of the decrease in the function value from that iteration of
2452:        the inner loop.
2453: 
2454:     Examples
2455:     --------
2456:     >>> def f(x):
2457:     ...     return x**2
2458: 
2459:     >>> from scipy import optimize
2460: 
2461:     >>> minimum = optimize.fmin_powell(f, -1)
2462:     Optimization terminated successfully.
2463:              Current function value: 0.000000
2464:              Iterations: 2
2465:              Function evaluations: 18
2466:     >>> minimum
2467:     array(0.0)
2468: 
2469:     References
2470:     ----------
2471:     Powell M.J.D. (1964) An efficient method for finding the minimum of a
2472:     function of several variables without calculating derivatives,
2473:     Computer Journal, 7 (2):155-162.
2474: 
2475:     Press W., Teukolsky S.A., Vetterling W.T., and Flannery B.P.:
2476:     Numerical Recipes (any edition), Cambridge University Press
2477: 
2478:     '''
2479:     opts = {'xtol': xtol,
2480:             'ftol': ftol,
2481:             'maxiter': maxiter,
2482:             'maxfev': maxfun,
2483:             'disp': disp,
2484:             'direc': direc,
2485:             'return_all': retall}
2486: 
2487:     res = _minimize_powell(func, x0, args, callback=callback, **opts)
2488: 
2489:     if full_output:
2490:         retlist = (res['x'], res['fun'], res['direc'], res['nit'],
2491:                    res['nfev'], res['status'])
2492:         if retall:
2493:             retlist += (res['allvecs'], )
2494:         return retlist
2495:     else:
2496:         if retall:
2497:             return res['x'], res['allvecs']
2498:         else:
2499:             return res['x']
2500: 
2501: 
2502: def _minimize_powell(func, x0, args=(), callback=None,
2503:                      xtol=1e-4, ftol=1e-4, maxiter=None, maxfev=None,
2504:                      disp=False, direc=None, return_all=False,
2505:                      **unknown_options):
2506:     '''
2507:     Minimization of scalar function of one or more variables using the
2508:     modified Powell algorithm.
2509: 
2510:     Options
2511:     -------
2512:     disp : bool
2513:         Set to True to print convergence messages.
2514:     xtol : float
2515:         Relative error in solution `xopt` acceptable for convergence.
2516:     ftol : float
2517:         Relative error in ``fun(xopt)`` acceptable for convergence.
2518:     maxiter, maxfev : int
2519:         Maximum allowed number of iterations and function evaluations.
2520:         Will default to ``N*1000``, where ``N`` is the number of
2521:         variables, if neither `maxiter` or `maxfev` is set. If both
2522:         `maxiter` and `maxfev` are set, minimization will stop at the
2523:         first reached.
2524:     direc : ndarray
2525:         Initial set of direction vectors for the Powell method.
2526: 
2527:     '''
2528:     _check_unknown_options(unknown_options)
2529:     maxfun = maxfev
2530:     retall = return_all
2531:     # we need to use a mutable object here that we can update in the
2532:     # wrapper function
2533:     fcalls, func = wrap_function(func, args)
2534:     x = asarray(x0).flatten()
2535:     if retall:
2536:         allvecs = [x]
2537:     N = len(x)
2538:     # If neither are set, then set both to default
2539:     if maxiter is None and maxfun is None:
2540:         maxiter = N * 1000
2541:         maxfun = N * 1000
2542:     elif maxiter is None:
2543:         # Convert remaining Nones, to np.inf, unless the other is np.inf, in
2544:         # which case use the default to avoid unbounded iteration
2545:         if maxfun == np.inf:
2546:             maxiter = N * 1000
2547:         else:
2548:             maxiter = np.inf
2549:     elif maxfun is None:
2550:         if maxiter == np.inf:
2551:             maxfun = N * 1000
2552:         else:
2553:             maxfun = np.inf
2554: 
2555:     if direc is None:
2556:         direc = eye(N, dtype=float)
2557:     else:
2558:         direc = asarray(direc, dtype=float)
2559: 
2560:     fval = squeeze(func(x))
2561:     x1 = x.copy()
2562:     iter = 0
2563:     ilist = list(range(N))
2564:     while True:
2565:         fx = fval
2566:         bigind = 0
2567:         delta = 0.0
2568:         for i in ilist:
2569:             direc1 = direc[i]
2570:             fx2 = fval
2571:             fval, x, direc1 = _linesearch_powell(func, x, direc1,
2572:                                                  tol=xtol * 100)
2573:             if (fx2 - fval) > delta:
2574:                 delta = fx2 - fval
2575:                 bigind = i
2576:         iter += 1
2577:         if callback is not None:
2578:             callback(x)
2579:         if retall:
2580:             allvecs.append(x)
2581:         bnd = ftol * (numpy.abs(fx) + numpy.abs(fval)) + 1e-20
2582:         if 2.0 * (fx - fval) <= bnd:
2583:             break
2584:         if fcalls[0] >= maxfun:
2585:             break
2586:         if iter >= maxiter:
2587:             break
2588: 
2589:         # Construct the extrapolated point
2590:         direc1 = x - x1
2591:         x2 = 2*x - x1
2592:         x1 = x.copy()
2593:         fx2 = squeeze(func(x2))
2594: 
2595:         if (fx > fx2):
2596:             t = 2.0*(fx + fx2 - 2.0*fval)
2597:             temp = (fx - fval - delta)
2598:             t *= temp*temp
2599:             temp = fx - fx2
2600:             t -= delta*temp*temp
2601:             if t < 0.0:
2602:                 fval, x, direc1 = _linesearch_powell(func, x, direc1,
2603:                                                      tol=xtol*100)
2604:                 direc[bigind] = direc[-1]
2605:                 direc[-1] = direc1
2606: 
2607:     warnflag = 0
2608:     if fcalls[0] >= maxfun:
2609:         warnflag = 1
2610:         msg = _status_message['maxfev']
2611:         if disp:
2612:             print("Warning: " + msg)
2613:     elif iter >= maxiter:
2614:         warnflag = 2
2615:         msg = _status_message['maxiter']
2616:         if disp:
2617:             print("Warning: " + msg)
2618:     else:
2619:         msg = _status_message['success']
2620:         if disp:
2621:             print(msg)
2622:             print("         Current function value: %f" % fval)
2623:             print("         Iterations: %d" % iter)
2624:             print("         Function evaluations: %d" % fcalls[0])
2625: 
2626:     x = squeeze(x)
2627: 
2628:     result = OptimizeResult(fun=fval, direc=direc, nit=iter, nfev=fcalls[0],
2629:                             status=warnflag, success=(warnflag == 0),
2630:                             message=msg, x=x)
2631:     if retall:
2632:         result['allvecs'] = allvecs
2633:     return result
2634: 
2635: 
2636: def _endprint(x, flag, fval, maxfun, xtol, disp):
2637:     if flag == 0:
2638:         if disp > 1:
2639:             print("\nOptimization terminated successfully;\n"
2640:                   "The returned value satisfies the termination criteria\n"
2641:                   "(using xtol = ", xtol, ")")
2642:     if flag == 1:
2643:         if disp:
2644:             print("\nMaximum number of function evaluations exceeded --- "
2645:                   "increase maxfun argument.\n")
2646:     return
2647: 
2648: 
2649: def brute(func, ranges, args=(), Ns=20, full_output=0, finish=fmin,
2650:           disp=False):
2651:     '''Minimize a function over a given range by brute force.
2652: 
2653:     Uses the "brute force" method, i.e. computes the function's value
2654:     at each point of a multidimensional grid of points, to find the global
2655:     minimum of the function.
2656: 
2657:     The function is evaluated everywhere in the range with the datatype of the
2658:     first call to the function, as enforced by the ``vectorize`` NumPy
2659:     function.  The value and type of the function evaluation returned when
2660:     ``full_output=True`` are affected in addition by the ``finish`` argument
2661:     (see Notes).
2662: 
2663:     Parameters
2664:     ----------
2665:     func : callable
2666:         The objective function to be minimized. Must be in the
2667:         form ``f(x, *args)``, where ``x`` is the argument in
2668:         the form of a 1-D array and ``args`` is a tuple of any
2669:         additional fixed parameters needed to completely specify
2670:         the function.
2671:     ranges : tuple
2672:         Each component of the `ranges` tuple must be either a
2673:         "slice object" or a range tuple of the form ``(low, high)``.
2674:         The program uses these to create the grid of points on which
2675:         the objective function will be computed. See `Note 2` for
2676:         more detail.
2677:     args : tuple, optional
2678:         Any additional fixed parameters needed to completely specify
2679:         the function.
2680:     Ns : int, optional
2681:         Number of grid points along the axes, if not otherwise
2682:         specified. See `Note2`.
2683:     full_output : bool, optional
2684:         If True, return the evaluation grid and the objective function's
2685:         values on it.
2686:     finish : callable, optional
2687:         An optimization function that is called with the result of brute force
2688:         minimization as initial guess.  `finish` should take `func` and
2689:         the initial guess as positional arguments, and take `args` as
2690:         keyword arguments.  It may additionally take `full_output`
2691:         and/or `disp` as keyword arguments.  Use None if no "polishing"
2692:         function is to be used. See Notes for more details.
2693:     disp : bool, optional
2694:         Set to True to print convergence messages.
2695: 
2696:     Returns
2697:     -------
2698:     x0 : ndarray
2699:         A 1-D array containing the coordinates of a point at which the
2700:         objective function had its minimum value. (See `Note 1` for
2701:         which point is returned.)
2702:     fval : float
2703:         Function value at the point `x0`. (Returned when `full_output` is
2704:         True.)
2705:     grid : tuple
2706:         Representation of the evaluation grid.  It has the same
2707:         length as `x0`. (Returned when `full_output` is True.)
2708:     Jout : ndarray
2709:         Function values at each point of the evaluation
2710:         grid, `i.e.`, ``Jout = func(*grid)``. (Returned
2711:         when `full_output` is True.)
2712: 
2713:     See Also
2714:     --------
2715:     basinhopping, differential_evolution
2716: 
2717:     Notes
2718:     -----
2719:     *Note 1*: The program finds the gridpoint at which the lowest value
2720:     of the objective function occurs.  If `finish` is None, that is the
2721:     point returned.  When the global minimum occurs within (or not very far
2722:     outside) the grid's boundaries, and the grid is fine enough, that
2723:     point will be in the neighborhood of the global minimum.
2724: 
2725:     However, users often employ some other optimization program to
2726:     "polish" the gridpoint values, `i.e.`, to seek a more precise
2727:     (local) minimum near `brute's` best gridpoint.
2728:     The `brute` function's `finish` option provides a convenient way to do
2729:     that.  Any polishing program used must take `brute's` output as its
2730:     initial guess as a positional argument, and take `brute's` input values
2731:     for `args` as keyword arguments, otherwise an error will be raised.
2732:     It may additionally take `full_output` and/or `disp` as keyword arguments.
2733: 
2734:     `brute` assumes that the `finish` function returns either an
2735:     `OptimizeResult` object or a tuple in the form:
2736:     ``(xmin, Jmin, ... , statuscode)``, where ``xmin`` is the minimizing
2737:     value of the argument, ``Jmin`` is the minimum value of the objective
2738:     function, "..." may be some other returned values (which are not used
2739:     by `brute`), and ``statuscode`` is the status code of the `finish` program.
2740: 
2741:     Note that when `finish` is not None, the values returned are those
2742:     of the `finish` program, *not* the gridpoint ones.  Consequently,
2743:     while `brute` confines its search to the input grid points,
2744:     the `finish` program's results usually will not coincide with any
2745:     gridpoint, and may fall outside the grid's boundary. Thus, if a
2746:     minimum only needs to be found over the provided grid points, make
2747:     sure to pass in `finish=None`.
2748: 
2749:     *Note 2*: The grid of points is a `numpy.mgrid` object.
2750:     For `brute` the `ranges` and `Ns` inputs have the following effect.
2751:     Each component of the `ranges` tuple can be either a slice object or a
2752:     two-tuple giving a range of values, such as (0, 5).  If the component is a
2753:     slice object, `brute` uses it directly.  If the component is a two-tuple
2754:     range, `brute` internally converts it to a slice object that interpolates
2755:     `Ns` points from its low-value to its high-value, inclusive.
2756: 
2757:     Examples
2758:     --------
2759:     We illustrate the use of `brute` to seek the global minimum of a function
2760:     of two variables that is given as the sum of a positive-definite
2761:     quadratic and two deep "Gaussian-shaped" craters.  Specifically, define
2762:     the objective function `f` as the sum of three other functions,
2763:     ``f = f1 + f2 + f3``.  We suppose each of these has a signature
2764:     ``(z, *params)``, where ``z = (x, y)``,  and ``params`` and the functions
2765:     are as defined below.
2766: 
2767:     >>> params = (2, 3, 7, 8, 9, 10, 44, -1, 2, 26, 1, -2, 0.5)
2768:     >>> def f1(z, *params):
2769:     ...     x, y = z
2770:     ...     a, b, c, d, e, f, g, h, i, j, k, l, scale = params
2771:     ...     return (a * x**2 + b * x * y + c * y**2 + d*x + e*y + f)
2772: 
2773:     >>> def f2(z, *params):
2774:     ...     x, y = z
2775:     ...     a, b, c, d, e, f, g, h, i, j, k, l, scale = params
2776:     ...     return (-g*np.exp(-((x-h)**2 + (y-i)**2) / scale))
2777: 
2778:     >>> def f3(z, *params):
2779:     ...     x, y = z
2780:     ...     a, b, c, d, e, f, g, h, i, j, k, l, scale = params
2781:     ...     return (-j*np.exp(-((x-k)**2 + (y-l)**2) / scale))
2782: 
2783:     >>> def f(z, *params):
2784:     ...     return f1(z, *params) + f2(z, *params) + f3(z, *params)
2785: 
2786:     Thus, the objective function may have local minima near the minimum
2787:     of each of the three functions of which it is composed.  To
2788:     use `fmin` to polish its gridpoint result, we may then continue as
2789:     follows:
2790: 
2791:     >>> rranges = (slice(-4, 4, 0.25), slice(-4, 4, 0.25))
2792:     >>> from scipy import optimize
2793:     >>> resbrute = optimize.brute(f, rranges, args=params, full_output=True,
2794:     ...                           finish=optimize.fmin)
2795:     >>> resbrute[0]  # global minimum
2796:     array([-1.05665192,  1.80834843])
2797:     >>> resbrute[1]  # function value at global minimum
2798:     -3.4085818767
2799: 
2800:     Note that if `finish` had been set to None, we would have gotten the
2801:     gridpoint [-1.0 1.75] where the rounded function value is -2.892.
2802: 
2803:     '''
2804:     N = len(ranges)
2805:     if N > 40:
2806:         raise ValueError("Brute Force not possible with more "
2807:                          "than 40 variables.")
2808:     lrange = list(ranges)
2809:     for k in range(N):
2810:         if type(lrange[k]) is not type(slice(None)):
2811:             if len(lrange[k]) < 3:
2812:                 lrange[k] = tuple(lrange[k]) + (complex(Ns),)
2813:             lrange[k] = slice(*lrange[k])
2814:     if (N == 1):
2815:         lrange = lrange[0]
2816: 
2817:     def _scalarfunc(*params):
2818:         params = squeeze(asarray(params))
2819:         return func(params, *args)
2820: 
2821:     vecfunc = vectorize(_scalarfunc)
2822:     grid = mgrid[lrange]
2823:     if (N == 1):
2824:         grid = (grid,)
2825:     Jout = vecfunc(*grid)
2826:     Nshape = shape(Jout)
2827:     indx = argmin(Jout.ravel(), axis=-1)
2828:     Nindx = zeros(N, int)
2829:     xmin = zeros(N, float)
2830:     for k in range(N - 1, -1, -1):
2831:         thisN = Nshape[k]
2832:         Nindx[k] = indx % Nshape[k]
2833:         indx = indx // thisN
2834:     for k in range(N):
2835:         xmin[k] = grid[k][tuple(Nindx)]
2836: 
2837:     Jmin = Jout[tuple(Nindx)]
2838:     if (N == 1):
2839:         grid = grid[0]
2840:         xmin = xmin[0]
2841:     if callable(finish):
2842:         # set up kwargs for `finish` function
2843:         finish_args = _getargspec(finish).args
2844:         finish_kwargs = dict()
2845:         if 'full_output' in finish_args:
2846:             finish_kwargs['full_output'] = 1
2847:         if 'disp' in finish_args:
2848:             finish_kwargs['disp'] = disp
2849:         elif 'options' in finish_args:
2850:             # pass 'disp' as `options`
2851:             # (e.g. if `finish` is `minimize`)
2852:             finish_kwargs['options'] = {'disp': disp}
2853: 
2854:         # run minimizer
2855:         res = finish(func, xmin, args=args, **finish_kwargs)
2856: 
2857:         if isinstance(res, OptimizeResult):
2858:             xmin = res.x
2859:             Jmin = res.fun
2860:             success = res.success
2861:         else:
2862:             xmin = res[0]
2863:             Jmin = res[1]
2864:             success = res[-1] == 0
2865:         if not success:
2866:             if disp:
2867:                 print("Warning: Either final optimization did not succeed "
2868:                       "or `finish` does not return `statuscode` as its last "
2869:                       "argument.")
2870: 
2871:     if full_output:
2872:         return xmin, Jmin, grid, Jout
2873:     else:
2874:         return xmin
2875: 
2876: 
2877: def show_options(solver=None, method=None, disp=True):
2878:     '''
2879:     Show documentation for additional options of optimization solvers.
2880: 
2881:     These are method-specific options that can be supplied through the
2882:     ``options`` dict.
2883: 
2884:     Parameters
2885:     ----------
2886:     solver : str
2887:         Type of optimization solver. One of 'minimize', 'minimize_scalar',
2888:         'root', or 'linprog'.
2889:     method : str, optional
2890:         If not given, shows all methods of the specified solver. Otherwise,
2891:         show only the options for the specified method. Valid values
2892:         corresponds to methods' names of respective solver (e.g. 'BFGS' for
2893:         'minimize').
2894:     disp : bool, optional
2895:         Whether to print the result rather than returning it.
2896: 
2897:     Returns
2898:     -------
2899:     text
2900:         Either None (for disp=False) or the text string (disp=True)
2901: 
2902:     Notes
2903:     -----
2904:     The solver-specific methods are:
2905: 
2906:     `scipy.optimize.minimize`
2907: 
2908:     - :ref:`Nelder-Mead <optimize.minimize-neldermead>`
2909:     - :ref:`Powell      <optimize.minimize-powell>`
2910:     - :ref:`CG          <optimize.minimize-cg>`
2911:     - :ref:`BFGS        <optimize.minimize-bfgs>`
2912:     - :ref:`Newton-CG   <optimize.minimize-newtoncg>`
2913:     - :ref:`L-BFGS-B    <optimize.minimize-lbfgsb>`
2914:     - :ref:`TNC         <optimize.minimize-tnc>`
2915:     - :ref:`COBYLA      <optimize.minimize-cobyla>`
2916:     - :ref:`SLSQP       <optimize.minimize-slsqp>`
2917:     - :ref:`dogleg      <optimize.minimize-dogleg>`
2918:     - :ref:`trust-ncg   <optimize.minimize-trustncg>`
2919: 
2920:     `scipy.optimize.root`
2921: 
2922:     - :ref:`hybr              <optimize.root-hybr>`
2923:     - :ref:`lm                <optimize.root-lm>`
2924:     - :ref:`broyden1          <optimize.root-broyden1>`
2925:     - :ref:`broyden2          <optimize.root-broyden2>`
2926:     - :ref:`anderson          <optimize.root-anderson>`
2927:     - :ref:`linearmixing      <optimize.root-linearmixing>`
2928:     - :ref:`diagbroyden       <optimize.root-diagbroyden>`
2929:     - :ref:`excitingmixing    <optimize.root-excitingmixing>`
2930:     - :ref:`krylov            <optimize.root-krylov>`
2931:     - :ref:`df-sane           <optimize.root-dfsane>`
2932: 
2933:     `scipy.optimize.minimize_scalar`
2934: 
2935:     - :ref:`brent       <optimize.minimize_scalar-brent>`
2936:     - :ref:`golden      <optimize.minimize_scalar-golden>`
2937:     - :ref:`bounded     <optimize.minimize_scalar-bounded>`
2938: 
2939:     `scipy.optimize.linprog`
2940: 
2941:     - :ref:`simplex         <optimize.linprog-simplex>`
2942:     - :ref:`interior-point  <optimize.linprog-interior-point>`
2943: 
2944:     '''
2945:     import textwrap
2946: 
2947:     doc_routines = {
2948:         'minimize': (
2949:             ('bfgs', 'scipy.optimize.optimize._minimize_bfgs'),
2950:             ('cg', 'scipy.optimize.optimize._minimize_cg'),
2951:             ('cobyla', 'scipy.optimize.cobyla._minimize_cobyla'),
2952:             ('dogleg', 'scipy.optimize._trustregion_dogleg._minimize_dogleg'),
2953:             ('l-bfgs-b', 'scipy.optimize.lbfgsb._minimize_lbfgsb'),
2954:             ('nelder-mead', 'scipy.optimize.optimize._minimize_neldermead'),
2955:             ('newtoncg', 'scipy.optimize.optimize._minimize_newtoncg'),
2956:             ('powell', 'scipy.optimize.optimize._minimize_powell'),
2957:             ('slsqp', 'scipy.optimize.slsqp._minimize_slsqp'),
2958:             ('tnc', 'scipy.optimize.tnc._minimize_tnc'),
2959:             ('trust-ncg', 'scipy.optimize._trustregion_ncg._minimize_trust_ncg'),
2960:         ),
2961:         'root': (
2962:             ('hybr', 'scipy.optimize.minpack._root_hybr'),
2963:             ('lm', 'scipy.optimize._root._root_leastsq'),
2964:             ('broyden1', 'scipy.optimize._root._root_broyden1_doc'),
2965:             ('broyden2', 'scipy.optimize._root._root_broyden2_doc'),
2966:             ('anderson', 'scipy.optimize._root._root_anderson_doc'),
2967:             ('diagbroyden', 'scipy.optimize._root._root_diagbroyden_doc'),
2968:             ('excitingmixing', 'scipy.optimize._root._root_excitingmixing_doc'),
2969:             ('linearmixing', 'scipy.optimize._root._root_linearmixing_doc'),
2970:             ('krylov', 'scipy.optimize._root._root_krylov_doc'),
2971:             ('df-sane', 'scipy.optimize._spectral._root_df_sane'),
2972:         ),
2973:         'linprog': (
2974:             ('simplex', 'scipy.optimize._linprog._linprog_simplex'),
2975:             ('interior-point', 'scipy.optimize._linprog._linprog_ip'),
2976:         ),
2977:         'minimize_scalar': (
2978:             ('brent', 'scipy.optimize.optimize._minimize_scalar_brent'),
2979:             ('bounded', 'scipy.optimize.optimize._minimize_scalar_bounded'),
2980:             ('golden', 'scipy.optimize.optimize._minimize_scalar_golden'),
2981:         ),
2982:     }
2983: 
2984:     if solver is None:
2985:         text = ["\n\n\n========\n", "minimize\n", "========\n"]
2986:         text.append(show_options('minimize', disp=False))
2987:         text.extend(["\n\n===============\n", "minimize_scalar\n",
2988:                      "===============\n"])
2989:         text.append(show_options('minimize_scalar', disp=False))
2990:         text.extend(["\n\n\n====\n", "root\n",
2991:                      "====\n"])
2992:         text.append(show_options('root', disp=False))
2993:         text.extend(['\n\n\n=======\n', 'linprog\n',
2994:                      '=======\n'])
2995:         text.append(show_options('linprog', disp=False))
2996:         text = "".join(text)
2997:     else:
2998:         solver = solver.lower()
2999:         if solver not in doc_routines:
3000:             raise ValueError('Unknown solver %r' % (solver,))
3001: 
3002:         if method is None:
3003:             text = []
3004:             for name, _ in doc_routines[solver]:
3005:                 text.extend(["\n\n" + name, "\n" + "="*len(name) + "\n\n"])
3006:                 text.append(show_options(solver, name, disp=False))
3007:             text = "".join(text)
3008:         else:
3009:             methods = dict(doc_routines[solver])
3010:             if method not in methods:
3011:                 raise ValueError("Unknown method %r" % (method,))
3012:             name = methods[method]
3013: 
3014:             # Import function object
3015:             parts = name.split('.')
3016:             mod_name = ".".join(parts[:-1])
3017:             __import__(mod_name)
3018:             obj = getattr(sys.modules[mod_name], parts[-1])
3019: 
3020:             # Get doc
3021:             doc = obj.__doc__
3022:             if doc is not None:
3023:                 text = textwrap.dedent(doc).strip()
3024:             else:
3025:                 text = ""
3026: 
3027:     if disp:
3028:         print(text)
3029:         return
3030:     else:
3031:         return text
3032: 
3033: 
3034: def main():
3035:     import time
3036: 
3037:     times = []
3038:     algor = []
3039:     x0 = [0.8, 1.2, 0.7]
3040:     print("Nelder-Mead Simplex")
3041:     print("===================")
3042:     start = time.time()
3043:     x = fmin(rosen, x0)
3044:     print(x)
3045:     times.append(time.time() - start)
3046:     algor.append('Nelder-Mead Simplex\t')
3047: 
3048:     print()
3049:     print("Powell Direction Set Method")
3050:     print("===========================")
3051:     start = time.time()
3052:     x = fmin_powell(rosen, x0)
3053:     print(x)
3054:     times.append(time.time() - start)
3055:     algor.append('Powell Direction Set Method.')
3056: 
3057:     print()
3058:     print("Nonlinear CG")
3059:     print("============")
3060:     start = time.time()
3061:     x = fmin_cg(rosen, x0, fprime=rosen_der, maxiter=200)
3062:     print(x)
3063:     times.append(time.time() - start)
3064:     algor.append('Nonlinear CG     \t')
3065: 
3066:     print()
3067:     print("BFGS Quasi-Newton")
3068:     print("=================")
3069:     start = time.time()
3070:     x = fmin_bfgs(rosen, x0, fprime=rosen_der, maxiter=80)
3071:     print(x)
3072:     times.append(time.time() - start)
3073:     algor.append('BFGS Quasi-Newton\t')
3074: 
3075:     print()
3076:     print("BFGS approximate gradient")
3077:     print("=========================")
3078:     start = time.time()
3079:     x = fmin_bfgs(rosen, x0, gtol=1e-4, maxiter=100)
3080:     print(x)
3081:     times.append(time.time() - start)
3082:     algor.append('BFGS without gradient\t')
3083: 
3084:     print()
3085:     print("Newton-CG with Hessian product")
3086:     print("==============================")
3087:     start = time.time()
3088:     x = fmin_ncg(rosen, x0, rosen_der, fhess_p=rosen_hess_prod, maxiter=80)
3089:     print(x)
3090:     times.append(time.time() - start)
3091:     algor.append('Newton-CG with hessian product')
3092: 
3093:     print()
3094:     print("Newton-CG with full Hessian")
3095:     print("===========================")
3096:     start = time.time()
3097:     x = fmin_ncg(rosen, x0, rosen_der, fhess=rosen_hess, maxiter=80)
3098:     print(x)
3099:     times.append(time.time() - start)
3100:     algor.append('Newton-CG with full hessian')
3101: 
3102:     print()
3103:     print("\nMinimizing the Rosenbrock function of order 3\n")
3104:     print(" Algorithm \t\t\t       Seconds")
3105:     print("===========\t\t\t      =========")
3106:     for k in range(len(algor)):
3107:         print(algor[k], "\t -- ", times[k])
3108: 
3109: 
3110: if __name__ == "__main__":
3111:     main()
3112: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################


# Assigning a List to a Name (line 22):

# Assigning a List to a Name (line 22):
__all__ = ['fmin', 'fmin_powell', 'fmin_bfgs', 'fmin_ncg', 'fmin_cg', 'fminbound', 'brent', 'golden', 'bracket', 'rosen', 'rosen_der', 'rosen_hess', 'rosen_hess_prod', 'brute', 'approx_fprime', 'line_search', 'check_grad', 'OptimizeResult', 'show_options', 'OptimizeWarning']
module_type_store.set_exportable_members(['fmin', 'fmin_powell', 'fmin_bfgs', 'fmin_ncg', 'fmin_cg', 'fminbound', 'brent', 'golden', 'bracket', 'rosen', 'rosen_der', 'rosen_hess', 'rosen_hess_prod', 'brute', 'approx_fprime', 'line_search', 'check_grad', 'OptimizeResult', 'show_options', 'OptimizeWarning'])

# Obtaining an instance of the builtin type 'list' (line 22)
list_176748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 22, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 22)
# Adding element type (line 22)
str_176749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 22, 11), 'str', 'fmin')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 22, 10), list_176748, str_176749)
# Adding element type (line 22)
str_176750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 22, 19), 'str', 'fmin_powell')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 22, 10), list_176748, str_176750)
# Adding element type (line 22)
str_176751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 22, 34), 'str', 'fmin_bfgs')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 22, 10), list_176748, str_176751)
# Adding element type (line 22)
str_176752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 22, 47), 'str', 'fmin_ncg')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 22, 10), list_176748, str_176752)
# Adding element type (line 22)
str_176753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 22, 59), 'str', 'fmin_cg')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 22, 10), list_176748, str_176753)
# Adding element type (line 22)
str_176754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, 11), 'str', 'fminbound')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 22, 10), list_176748, str_176754)
# Adding element type (line 22)
str_176755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, 24), 'str', 'brent')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 22, 10), list_176748, str_176755)
# Adding element type (line 22)
str_176756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, 33), 'str', 'golden')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 22, 10), list_176748, str_176756)
# Adding element type (line 22)
str_176757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, 43), 'str', 'bracket')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 22, 10), list_176748, str_176757)
# Adding element type (line 22)
str_176758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, 54), 'str', 'rosen')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 22, 10), list_176748, str_176758)
# Adding element type (line 22)
str_176759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, 63), 'str', 'rosen_der')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 22, 10), list_176748, str_176759)
# Adding element type (line 22)
str_176760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 24, 11), 'str', 'rosen_hess')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 22, 10), list_176748, str_176760)
# Adding element type (line 22)
str_176761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 24, 25), 'str', 'rosen_hess_prod')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 22, 10), list_176748, str_176761)
# Adding element type (line 22)
str_176762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 24, 44), 'str', 'brute')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 22, 10), list_176748, str_176762)
# Adding element type (line 22)
str_176763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 24, 53), 'str', 'approx_fprime')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 22, 10), list_176748, str_176763)
# Adding element type (line 22)
str_176764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, 11), 'str', 'line_search')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 22, 10), list_176748, str_176764)
# Adding element type (line 22)
str_176765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, 26), 'str', 'check_grad')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 22, 10), list_176748, str_176765)
# Adding element type (line 22)
str_176766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, 40), 'str', 'OptimizeResult')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 22, 10), list_176748, str_176766)
# Adding element type (line 22)
str_176767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, 58), 'str', 'show_options')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 22, 10), list_176748, str_176767)
# Adding element type (line 22)
str_176768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 11), 'str', 'OptimizeWarning')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 22, 10), list_176748, str_176768)

# Assigning a type to the variable '__all__' (line 22)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 22, 0), '__all__', list_176748)

# Assigning a Str to a Name (line 28):

# Assigning a Str to a Name (line 28):
str_176769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 16), 'str', 'restructuredtext en')
# Assigning a type to the variable '__docformat__' (line 28)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), '__docformat__', str_176769)
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 30, 0))

# 'import warnings' statement (line 30)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 31, 0))

# 'import sys' statement (line 31)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'sys', sys, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 32, 0))

# 'import numpy' statement (line 32)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_176770 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'numpy')

if (type(import_176770) is not StypyTypeError):

    if (import_176770 != 'pyd_module'):
        __import__(import_176770)
        sys_modules_176771 = sys.modules[import_176770]
        import_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'numpy', sys_modules_176771.module_type_store, module_type_store)
    else:
        import numpy

        import_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'numpy', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 32)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 32, 0), 'numpy', import_176770)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 33, 0))

# 'from scipy._lib.six import callable, xrange' statement (line 33)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_176772 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'scipy._lib.six')

if (type(import_176772) is not StypyTypeError):

    if (import_176772 != 'pyd_module'):
        __import__(import_176772)
        sys_modules_176773 = sys.modules[import_176772]
        import_from_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'scipy._lib.six', sys_modules_176773.module_type_store, module_type_store, ['callable', 'xrange'])
        nest_module(stypy.reporting.localization.Localization(__file__, 33, 0), __file__, sys_modules_176773, sys_modules_176773.module_type_store, module_type_store)
    else:
        from scipy._lib.six import callable, xrange

        import_from_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'scipy._lib.six', None, module_type_store, ['callable', 'xrange'], [callable, xrange])

else:
    # Assigning a type to the variable 'scipy._lib.six' (line 33)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 33, 0), 'scipy._lib.six', import_176772)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 34, 0))

# 'from numpy import atleast_1d, eye, mgrid, argmin, zeros, shape, squeeze, vectorize, asarray, sqrt, Inf, asfarray, isinf' statement (line 34)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_176774 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'numpy')

if (type(import_176774) is not StypyTypeError):

    if (import_176774 != 'pyd_module'):
        __import__(import_176774)
        sys_modules_176775 = sys.modules[import_176774]
        import_from_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'numpy', sys_modules_176775.module_type_store, module_type_store, ['atleast_1d', 'eye', 'mgrid', 'argmin', 'zeros', 'shape', 'squeeze', 'vectorize', 'asarray', 'sqrt', 'Inf', 'asfarray', 'isinf'])
        nest_module(stypy.reporting.localization.Localization(__file__, 34, 0), __file__, sys_modules_176775, sys_modules_176775.module_type_store, module_type_store)
    else:
        from numpy import atleast_1d, eye, mgrid, argmin, zeros, shape, squeeze, vectorize, asarray, sqrt, Inf, asfarray, isinf

        import_from_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'numpy', None, module_type_store, ['atleast_1d', 'eye', 'mgrid', 'argmin', 'zeros', 'shape', 'squeeze', 'vectorize', 'asarray', 'sqrt', 'Inf', 'asfarray', 'isinf'], [atleast_1d, eye, mgrid, argmin, zeros, shape, squeeze, vectorize, asarray, sqrt, Inf, asfarray, isinf])

else:
    # Assigning a type to the variable 'numpy' (line 34)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 0), 'numpy', import_176774)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 36, 0))

# 'import numpy' statement (line 36)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_176776 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 36, 0), 'numpy')

if (type(import_176776) is not StypyTypeError):

    if (import_176776 != 'pyd_module'):
        __import__(import_176776)
        sys_modules_176777 = sys.modules[import_176776]
        import_module(stypy.reporting.localization.Localization(__file__, 36, 0), 'np', sys_modules_176777.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 36, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 36)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 36, 0), 'numpy', import_176776)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 37, 0))

# 'from scipy.optimize.linesearch import line_search_wolfe1, line_search_wolfe2, line_search, LineSearchWarning' statement (line 37)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_176778 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'scipy.optimize.linesearch')

if (type(import_176778) is not StypyTypeError):

    if (import_176778 != 'pyd_module'):
        __import__(import_176778)
        sys_modules_176779 = sys.modules[import_176778]
        import_from_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'scipy.optimize.linesearch', sys_modules_176779.module_type_store, module_type_store, ['line_search_wolfe1', 'line_search_wolfe2', 'line_search_wolfe2', 'LineSearchWarning'])
        nest_module(stypy.reporting.localization.Localization(__file__, 37, 0), __file__, sys_modules_176779, sys_modules_176779.module_type_store, module_type_store)
    else:
        from scipy.optimize.linesearch import line_search_wolfe1, line_search_wolfe2, line_search_wolfe2 as line_search, LineSearchWarning

        import_from_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'scipy.optimize.linesearch', None, module_type_store, ['line_search_wolfe1', 'line_search_wolfe2', 'line_search_wolfe2', 'LineSearchWarning'], [line_search_wolfe1, line_search_wolfe2, line_search, LineSearchWarning])

else:
    # Assigning a type to the variable 'scipy.optimize.linesearch' (line 37)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 37, 0), 'scipy.optimize.linesearch', import_176778)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 40, 0))

# 'from scipy._lib._util import _getargspec' statement (line 40)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_176780 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'scipy._lib._util')

if (type(import_176780) is not StypyTypeError):

    if (import_176780 != 'pyd_module'):
        __import__(import_176780)
        sys_modules_176781 = sys.modules[import_176780]
        import_from_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'scipy._lib._util', sys_modules_176781.module_type_store, module_type_store, ['getargspec_no_self'])
        nest_module(stypy.reporting.localization.Localization(__file__, 40, 0), __file__, sys_modules_176781, sys_modules_176781.module_type_store, module_type_store)
    else:
        from scipy._lib._util import getargspec_no_self as _getargspec

        import_from_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'scipy._lib._util', None, module_type_store, ['getargspec_no_self'], [_getargspec])

else:
    # Assigning a type to the variable 'scipy._lib._util' (line 40)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 0), 'scipy._lib._util', import_176780)

# Adding an alias
module_type_store.add_alias('_getargspec', 'getargspec_no_self')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')


# Assigning a Dict to a Name (line 44):

# Assigning a Dict to a Name (line 44):

# Obtaining an instance of the builtin type 'dict' (line 44)
dict_176782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 18), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 44)
# Adding element type (key, value) (line 44)
str_176783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 19), 'str', 'success')
str_176784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 30), 'str', 'Optimization terminated successfully.')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 18), dict_176782, (str_176783, str_176784))
# Adding element type (key, value) (line 44)
str_176785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 19), 'str', 'maxfev')
str_176786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 29), 'str', 'Maximum number of function evaluations has been exceeded.')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 18), dict_176782, (str_176785, str_176786))
# Adding element type (key, value) (line 44)
str_176787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 19), 'str', 'maxiter')
str_176788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 30), 'str', 'Maximum number of iterations has been exceeded.')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 18), dict_176782, (str_176787, str_176788))
# Adding element type (key, value) (line 44)
str_176789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 19), 'str', 'pr_loss')
str_176790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 30), 'str', 'Desired error not necessarily achieved due to precision loss.')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 18), dict_176782, (str_176789, str_176790))

# Assigning a type to the variable '_status_message' (line 44)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 44, 0), '_status_message', dict_176782)
# Declaration of the 'MemoizeJac' class

class MemoizeJac(object, ):
    str_176791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 55, (-1)), 'str', ' Decorator that caches the value gradient of function each time it\n    is called. ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 56, 4, False)
        # Assigning a type to the variable 'self' (line 57)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 57, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MemoizeJac.__init__', ['fun'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['fun'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 57):
        
        # Assigning a Name to a Attribute (line 57):
        # Getting the type of 'fun' (line 57)
        fun_176792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 57, 19), 'fun')
        # Getting the type of 'self' (line 57)
        self_176793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 57, 8), 'self')
        # Setting the type of the member 'fun' of a type (line 57)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 57, 8), self_176793, 'fun', fun_176792)
        
        # Assigning a Name to a Attribute (line 58):
        
        # Assigning a Name to a Attribute (line 58):
        # Getting the type of 'None' (line 58)
        None_176794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 58, 19), 'None')
        # Getting the type of 'self' (line 58)
        self_176795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 58, 8), 'self')
        # Setting the type of the member 'jac' of a type (line 58)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 58, 8), self_176795, 'jac', None_176794)
        
        # Assigning a Name to a Attribute (line 59):
        
        # Assigning a Name to a Attribute (line 59):
        # Getting the type of 'None' (line 59)
        None_176796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 17), 'None')
        # Getting the type of 'self' (line 59)
        self_176797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 8), 'self')
        # Setting the type of the member 'x' of a type (line 59)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 59, 8), self_176797, 'x', None_176796)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 61, 4, False)
        # Assigning a type to the variable 'self' (line 62)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 62, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MemoizeJac.__call__.__dict__.__setitem__('stypy_localization', localization)
        MemoizeJac.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MemoizeJac.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MemoizeJac.__call__.__dict__.__setitem__('stypy_function_name', 'MemoizeJac.__call__')
        MemoizeJac.__call__.__dict__.__setitem__('stypy_param_names_list', ['x'])
        MemoizeJac.__call__.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        MemoizeJac.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MemoizeJac.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MemoizeJac.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MemoizeJac.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MemoizeJac.__call__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MemoizeJac.__call__', ['x'], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 62):
        
        # Assigning a Call to a Attribute (line 62):
        
        # Call to copy(...): (line 62)
        # Processing the call keyword arguments (line 62)
        kwargs_176804 = {}
        
        # Call to asarray(...): (line 62)
        # Processing the call arguments (line 62)
        # Getting the type of 'x' (line 62)
        x_176800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 62, 31), 'x', False)
        # Processing the call keyword arguments (line 62)
        kwargs_176801 = {}
        # Getting the type of 'numpy' (line 62)
        numpy_176798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 62, 17), 'numpy', False)
        # Obtaining the member 'asarray' of a type (line 62)
        asarray_176799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 62, 17), numpy_176798, 'asarray')
        # Calling asarray(args, kwargs) (line 62)
        asarray_call_result_176802 = invoke(stypy.reporting.localization.Localization(__file__, 62, 17), asarray_176799, *[x_176800], **kwargs_176801)
        
        # Obtaining the member 'copy' of a type (line 62)
        copy_176803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 62, 17), asarray_call_result_176802, 'copy')
        # Calling copy(args, kwargs) (line 62)
        copy_call_result_176805 = invoke(stypy.reporting.localization.Localization(__file__, 62, 17), copy_176803, *[], **kwargs_176804)
        
        # Getting the type of 'self' (line 62)
        self_176806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 62, 8), 'self')
        # Setting the type of the member 'x' of a type (line 62)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 62, 8), self_176806, 'x', copy_call_result_176805)
        
        # Assigning a Call to a Name (line 63):
        
        # Assigning a Call to a Name (line 63):
        
        # Call to fun(...): (line 63)
        # Processing the call arguments (line 63)
        # Getting the type of 'x' (line 63)
        x_176809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 63, 22), 'x', False)
        # Getting the type of 'args' (line 63)
        args_176810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 63, 26), 'args', False)
        # Processing the call keyword arguments (line 63)
        kwargs_176811 = {}
        # Getting the type of 'self' (line 63)
        self_176807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 63, 13), 'self', False)
        # Obtaining the member 'fun' of a type (line 63)
        fun_176808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 63, 13), self_176807, 'fun')
        # Calling fun(args, kwargs) (line 63)
        fun_call_result_176812 = invoke(stypy.reporting.localization.Localization(__file__, 63, 13), fun_176808, *[x_176809, args_176810], **kwargs_176811)
        
        # Assigning a type to the variable 'fg' (line 63)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 63, 8), 'fg', fun_call_result_176812)
        
        # Assigning a Subscript to a Attribute (line 64):
        
        # Assigning a Subscript to a Attribute (line 64):
        
        # Obtaining the type of the subscript
        int_176813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 64, 22), 'int')
        # Getting the type of 'fg' (line 64)
        fg_176814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 64, 19), 'fg')
        # Obtaining the member '__getitem__' of a type (line 64)
        getitem___176815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 64, 19), fg_176814, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 64)
        subscript_call_result_176816 = invoke(stypy.reporting.localization.Localization(__file__, 64, 19), getitem___176815, int_176813)
        
        # Getting the type of 'self' (line 64)
        self_176817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 64, 8), 'self')
        # Setting the type of the member 'jac' of a type (line 64)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 64, 8), self_176817, 'jac', subscript_call_result_176816)
        
        # Obtaining the type of the subscript
        int_176818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 65, 18), 'int')
        # Getting the type of 'fg' (line 65)
        fg_176819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 15), 'fg')
        # Obtaining the member '__getitem__' of a type (line 65)
        getitem___176820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 65, 15), fg_176819, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 65)
        subscript_call_result_176821 = invoke(stypy.reporting.localization.Localization(__file__, 65, 15), getitem___176820, int_176818)
        
        # Assigning a type to the variable 'stypy_return_type' (line 65)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 65, 8), 'stypy_return_type', subscript_call_result_176821)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 61)
        stypy_return_type_176822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 61, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_176822)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_176822


    @norecursion
    def derivative(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'derivative'
        module_type_store = module_type_store.open_function_context('derivative', 67, 4, False)
        # Assigning a type to the variable 'self' (line 68)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 68, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MemoizeJac.derivative.__dict__.__setitem__('stypy_localization', localization)
        MemoizeJac.derivative.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MemoizeJac.derivative.__dict__.__setitem__('stypy_type_store', module_type_store)
        MemoizeJac.derivative.__dict__.__setitem__('stypy_function_name', 'MemoizeJac.derivative')
        MemoizeJac.derivative.__dict__.__setitem__('stypy_param_names_list', ['x'])
        MemoizeJac.derivative.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        MemoizeJac.derivative.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MemoizeJac.derivative.__dict__.__setitem__('stypy_call_defaults', defaults)
        MemoizeJac.derivative.__dict__.__setitem__('stypy_call_varargs', varargs)
        MemoizeJac.derivative.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MemoizeJac.derivative.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MemoizeJac.derivative', ['x'], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'derivative', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'derivative(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 68)
        self_176823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 11), 'self')
        # Obtaining the member 'jac' of a type (line 68)
        jac_176824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 68, 11), self_176823, 'jac')
        # Getting the type of 'None' (line 68)
        None_176825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 27), 'None')
        # Applying the binary operator 'isnot' (line 68)
        result_is_not_176826 = python_operator(stypy.reporting.localization.Localization(__file__, 68, 11), 'isnot', jac_176824, None_176825)
        
        
        # Call to alltrue(...): (line 68)
        # Processing the call arguments (line 68)
        
        # Getting the type of 'x' (line 68)
        x_176829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 50), 'x', False)
        # Getting the type of 'self' (line 68)
        self_176830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 55), 'self', False)
        # Obtaining the member 'x' of a type (line 68)
        x_176831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 68, 55), self_176830, 'x')
        # Applying the binary operator '==' (line 68)
        result_eq_176832 = python_operator(stypy.reporting.localization.Localization(__file__, 68, 50), '==', x_176829, x_176831)
        
        # Processing the call keyword arguments (line 68)
        kwargs_176833 = {}
        # Getting the type of 'numpy' (line 68)
        numpy_176827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 36), 'numpy', False)
        # Obtaining the member 'alltrue' of a type (line 68)
        alltrue_176828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 68, 36), numpy_176827, 'alltrue')
        # Calling alltrue(args, kwargs) (line 68)
        alltrue_call_result_176834 = invoke(stypy.reporting.localization.Localization(__file__, 68, 36), alltrue_176828, *[result_eq_176832], **kwargs_176833)
        
        # Applying the binary operator 'and' (line 68)
        result_and_keyword_176835 = python_operator(stypy.reporting.localization.Localization(__file__, 68, 11), 'and', result_is_not_176826, alltrue_call_result_176834)
        
        # Testing the type of an if condition (line 68)
        if_condition_176836 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 68, 8), result_and_keyword_176835)
        # Assigning a type to the variable 'if_condition_176836' (line 68)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 68, 8), 'if_condition_176836', if_condition_176836)
        # SSA begins for if statement (line 68)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 69)
        self_176837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 19), 'self')
        # Obtaining the member 'jac' of a type (line 69)
        jac_176838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 69, 19), self_176837, 'jac')
        # Assigning a type to the variable 'stypy_return_type' (line 69)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 69, 12), 'stypy_return_type', jac_176838)
        # SSA branch for the else part of an if statement (line 68)
        module_type_store.open_ssa_branch('else')
        
        # Call to self(...): (line 71)
        # Processing the call arguments (line 71)
        # Getting the type of 'x' (line 71)
        x_176840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 17), 'x', False)
        # Getting the type of 'args' (line 71)
        args_176841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 21), 'args', False)
        # Processing the call keyword arguments (line 71)
        kwargs_176842 = {}
        # Getting the type of 'self' (line 71)
        self_176839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 12), 'self', False)
        # Calling self(args, kwargs) (line 71)
        self_call_result_176843 = invoke(stypy.reporting.localization.Localization(__file__, 71, 12), self_176839, *[x_176840, args_176841], **kwargs_176842)
        
        # Getting the type of 'self' (line 72)
        self_176844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 19), 'self')
        # Obtaining the member 'jac' of a type (line 72)
        jac_176845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 72, 19), self_176844, 'jac')
        # Assigning a type to the variable 'stypy_return_type' (line 72)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 72, 12), 'stypy_return_type', jac_176845)
        # SSA join for if statement (line 68)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'derivative(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'derivative' in the type store
        # Getting the type of 'stypy_return_type' (line 67)
        stypy_return_type_176846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 67, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_176846)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'derivative'
        return stypy_return_type_176846


# Assigning a type to the variable 'MemoizeJac' (line 53)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 53, 0), 'MemoizeJac', MemoizeJac)
# Declaration of the 'OptimizeResult' class
# Getting the type of 'dict' (line 75)
dict_176847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 21), 'dict')

class OptimizeResult(dict_176847, ):
    str_176848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 111, (-1)), 'str', " Represents the optimization result.\n\n    Attributes\n    ----------\n    x : ndarray\n        The solution of the optimization.\n    success : bool\n        Whether or not the optimizer exited successfully.\n    status : int\n        Termination status of the optimizer. Its value depends on the\n        underlying solver. Refer to `message` for details.\n    message : str\n        Description of the cause of the termination.\n    fun, jac, hess: ndarray\n        Values of objective function, its Jacobian and its Hessian (if\n        available). The Hessians may be approximations, see the documentation\n        of the function in question.\n    hess_inv : object\n        Inverse of the objective function's Hessian; may be an approximation.\n        Not available for all solvers. The type of this attribute may be\n        either np.ndarray or scipy.sparse.linalg.LinearOperator.\n    nfev, njev, nhev : int\n        Number of evaluations of the objective functions and of its\n        Jacobian and Hessian.\n    nit : int\n        Number of iterations performed by the optimizer.\n    maxcv : float\n        The maximum constraint violation.\n\n    Notes\n    -----\n    There may be additional attributes not listed above depending of the\n    specific solver. Since this class is essentially a subclass of dict\n    with attribute accessors, one can see which attributes are available\n    using the `keys()` method.\n    ")

    @norecursion
    def __getattr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getattr__'
        module_type_store = module_type_store.open_function_context('__getattr__', 112, 4, False)
        # Assigning a type to the variable 'self' (line 113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OptimizeResult.__getattr__.__dict__.__setitem__('stypy_localization', localization)
        OptimizeResult.__getattr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OptimizeResult.__getattr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        OptimizeResult.__getattr__.__dict__.__setitem__('stypy_function_name', 'OptimizeResult.__getattr__')
        OptimizeResult.__getattr__.__dict__.__setitem__('stypy_param_names_list', ['name'])
        OptimizeResult.__getattr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        OptimizeResult.__getattr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OptimizeResult.__getattr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        OptimizeResult.__getattr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        OptimizeResult.__getattr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OptimizeResult.__getattr__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OptimizeResult.__getattr__', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getattr__', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getattr__(...)' code ##################

        
        
        # SSA begins for try-except statement (line 113)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Obtaining the type of the subscript
        # Getting the type of 'name' (line 114)
        name_176849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 24), 'name')
        # Getting the type of 'self' (line 114)
        self_176850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 19), 'self')
        # Obtaining the member '__getitem__' of a type (line 114)
        getitem___176851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 114, 19), self_176850, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 114)
        subscript_call_result_176852 = invoke(stypy.reporting.localization.Localization(__file__, 114, 19), getitem___176851, name_176849)
        
        # Assigning a type to the variable 'stypy_return_type' (line 114)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 114, 12), 'stypy_return_type', subscript_call_result_176852)
        # SSA branch for the except part of a try statement (line 113)
        # SSA branch for the except 'KeyError' branch of a try statement (line 113)
        module_type_store.open_ssa_branch('except')
        
        # Call to AttributeError(...): (line 116)
        # Processing the call arguments (line 116)
        # Getting the type of 'name' (line 116)
        name_176854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 33), 'name', False)
        # Processing the call keyword arguments (line 116)
        kwargs_176855 = {}
        # Getting the type of 'AttributeError' (line 116)
        AttributeError_176853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 18), 'AttributeError', False)
        # Calling AttributeError(args, kwargs) (line 116)
        AttributeError_call_result_176856 = invoke(stypy.reporting.localization.Localization(__file__, 116, 18), AttributeError_176853, *[name_176854], **kwargs_176855)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 116, 12), AttributeError_call_result_176856, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 113)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__getattr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getattr__' in the type store
        # Getting the type of 'stypy_return_type' (line 112)
        stypy_return_type_176857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_176857)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getattr__'
        return stypy_return_type_176857

    
    # Assigning a Attribute to a Name (line 118):
    
    # Assigning a Attribute to a Name (line 119):

    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 121, 4, False)
        # Assigning a type to the variable 'self' (line 122)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 122, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OptimizeResult.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        OptimizeResult.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OptimizeResult.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        OptimizeResult.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'OptimizeResult.stypy__repr__')
        OptimizeResult.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        OptimizeResult.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        OptimizeResult.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OptimizeResult.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        OptimizeResult.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        OptimizeResult.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OptimizeResult.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OptimizeResult.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        
        
        # Call to keys(...): (line 122)
        # Processing the call keyword arguments (line 122)
        kwargs_176860 = {}
        # Getting the type of 'self' (line 122)
        self_176858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 11), 'self', False)
        # Obtaining the member 'keys' of a type (line 122)
        keys_176859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 122, 11), self_176858, 'keys')
        # Calling keys(args, kwargs) (line 122)
        keys_call_result_176861 = invoke(stypy.reporting.localization.Localization(__file__, 122, 11), keys_176859, *[], **kwargs_176860)
        
        # Testing the type of an if condition (line 122)
        if_condition_176862 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 122, 8), keys_call_result_176861)
        # Assigning a type to the variable 'if_condition_176862' (line 122)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 122, 8), 'if_condition_176862', if_condition_176862)
        # SSA begins for if statement (line 122)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 123):
        
        # Assigning a BinOp to a Name (line 123):
        
        # Call to max(...): (line 123)
        # Processing the call arguments (line 123)
        
        # Call to map(...): (line 123)
        # Processing the call arguments (line 123)
        # Getting the type of 'len' (line 123)
        len_176865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 24), 'len', False)
        
        # Call to list(...): (line 123)
        # Processing the call arguments (line 123)
        
        # Call to keys(...): (line 123)
        # Processing the call keyword arguments (line 123)
        kwargs_176869 = {}
        # Getting the type of 'self' (line 123)
        self_176867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 34), 'self', False)
        # Obtaining the member 'keys' of a type (line 123)
        keys_176868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 123, 34), self_176867, 'keys')
        # Calling keys(args, kwargs) (line 123)
        keys_call_result_176870 = invoke(stypy.reporting.localization.Localization(__file__, 123, 34), keys_176868, *[], **kwargs_176869)
        
        # Processing the call keyword arguments (line 123)
        kwargs_176871 = {}
        # Getting the type of 'list' (line 123)
        list_176866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 29), 'list', False)
        # Calling list(args, kwargs) (line 123)
        list_call_result_176872 = invoke(stypy.reporting.localization.Localization(__file__, 123, 29), list_176866, *[keys_call_result_176870], **kwargs_176871)
        
        # Processing the call keyword arguments (line 123)
        kwargs_176873 = {}
        # Getting the type of 'map' (line 123)
        map_176864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 20), 'map', False)
        # Calling map(args, kwargs) (line 123)
        map_call_result_176874 = invoke(stypy.reporting.localization.Localization(__file__, 123, 20), map_176864, *[len_176865, list_call_result_176872], **kwargs_176873)
        
        # Processing the call keyword arguments (line 123)
        kwargs_176875 = {}
        # Getting the type of 'max' (line 123)
        max_176863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 16), 'max', False)
        # Calling max(args, kwargs) (line 123)
        max_call_result_176876 = invoke(stypy.reporting.localization.Localization(__file__, 123, 16), max_176863, *[map_call_result_176874], **kwargs_176875)
        
        int_176877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 123, 51), 'int')
        # Applying the binary operator '+' (line 123)
        result_add_176878 = python_operator(stypy.reporting.localization.Localization(__file__, 123, 16), '+', max_call_result_176876, int_176877)
        
        # Assigning a type to the variable 'm' (line 123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 123, 12), 'm', result_add_176878)
        
        # Call to join(...): (line 124)
        # Processing the call arguments (line 124)
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to sorted(...): (line 125)
        # Processing the call arguments (line 125)
        
        # Call to items(...): (line 125)
        # Processing the call keyword arguments (line 125)
        kwargs_176896 = {}
        # Getting the type of 'self' (line 125)
        self_176894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 49), 'self', False)
        # Obtaining the member 'items' of a type (line 125)
        items_176895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 125, 49), self_176894, 'items')
        # Calling items(args, kwargs) (line 125)
        items_call_result_176897 = invoke(stypy.reporting.localization.Localization(__file__, 125, 49), items_176895, *[], **kwargs_176896)
        
        # Processing the call keyword arguments (line 125)
        kwargs_176898 = {}
        # Getting the type of 'sorted' (line 125)
        sorted_176893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 42), 'sorted', False)
        # Calling sorted(args, kwargs) (line 125)
        sorted_call_result_176899 = invoke(stypy.reporting.localization.Localization(__file__, 125, 42), sorted_176893, *[items_call_result_176897], **kwargs_176898)
        
        comprehension_176900 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 124, 30), sorted_call_result_176899)
        # Assigning a type to the variable 'k' (line 124)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 124, 30), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 124, 30), comprehension_176900))
        # Assigning a type to the variable 'v' (line 124)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 124, 30), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 124, 30), comprehension_176900))
        
        # Call to rjust(...): (line 124)
        # Processing the call arguments (line 124)
        # Getting the type of 'm' (line 124)
        m_176883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 38), 'm', False)
        # Processing the call keyword arguments (line 124)
        kwargs_176884 = {}
        # Getting the type of 'k' (line 124)
        k_176881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 30), 'k', False)
        # Obtaining the member 'rjust' of a type (line 124)
        rjust_176882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 124, 30), k_176881, 'rjust')
        # Calling rjust(args, kwargs) (line 124)
        rjust_call_result_176885 = invoke(stypy.reporting.localization.Localization(__file__, 124, 30), rjust_176882, *[m_176883], **kwargs_176884)
        
        str_176886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 124, 43), 'str', ': ')
        # Applying the binary operator '+' (line 124)
        result_add_176887 = python_operator(stypy.reporting.localization.Localization(__file__, 124, 30), '+', rjust_call_result_176885, str_176886)
        
        
        # Call to repr(...): (line 124)
        # Processing the call arguments (line 124)
        # Getting the type of 'v' (line 124)
        v_176889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 55), 'v', False)
        # Processing the call keyword arguments (line 124)
        kwargs_176890 = {}
        # Getting the type of 'repr' (line 124)
        repr_176888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 50), 'repr', False)
        # Calling repr(args, kwargs) (line 124)
        repr_call_result_176891 = invoke(stypy.reporting.localization.Localization(__file__, 124, 50), repr_176888, *[v_176889], **kwargs_176890)
        
        # Applying the binary operator '+' (line 124)
        result_add_176892 = python_operator(stypy.reporting.localization.Localization(__file__, 124, 48), '+', result_add_176887, repr_call_result_176891)
        
        list_176901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 124, 30), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 124, 30), list_176901, result_add_176892)
        # Processing the call keyword arguments (line 124)
        kwargs_176902 = {}
        str_176879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 124, 19), 'str', '\n')
        # Obtaining the member 'join' of a type (line 124)
        join_176880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 124, 19), str_176879, 'join')
        # Calling join(args, kwargs) (line 124)
        join_call_result_176903 = invoke(stypy.reporting.localization.Localization(__file__, 124, 19), join_176880, *[list_176901], **kwargs_176902)
        
        # Assigning a type to the variable 'stypy_return_type' (line 124)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 124, 12), 'stypy_return_type', join_call_result_176903)
        # SSA branch for the else part of an if statement (line 122)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'self' (line 127)
        self_176904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 19), 'self')
        # Obtaining the member '__class__' of a type (line 127)
        class___176905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 127, 19), self_176904, '__class__')
        # Obtaining the member '__name__' of a type (line 127)
        name___176906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 127, 19), class___176905, '__name__')
        str_176907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 127, 45), 'str', '()')
        # Applying the binary operator '+' (line 127)
        result_add_176908 = python_operator(stypy.reporting.localization.Localization(__file__, 127, 19), '+', name___176906, str_176907)
        
        # Assigning a type to the variable 'stypy_return_type' (line 127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 127, 12), 'stypy_return_type', result_add_176908)
        # SSA join for if statement (line 122)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 121)
        stypy_return_type_176909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_176909)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_176909


    @norecursion
    def __dir__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__dir__'
        module_type_store = module_type_store.open_function_context('__dir__', 129, 4, False)
        # Assigning a type to the variable 'self' (line 130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        OptimizeResult.__dir__.__dict__.__setitem__('stypy_localization', localization)
        OptimizeResult.__dir__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        OptimizeResult.__dir__.__dict__.__setitem__('stypy_type_store', module_type_store)
        OptimizeResult.__dir__.__dict__.__setitem__('stypy_function_name', 'OptimizeResult.__dir__')
        OptimizeResult.__dir__.__dict__.__setitem__('stypy_param_names_list', [])
        OptimizeResult.__dir__.__dict__.__setitem__('stypy_varargs_param_name', None)
        OptimizeResult.__dir__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        OptimizeResult.__dir__.__dict__.__setitem__('stypy_call_defaults', defaults)
        OptimizeResult.__dir__.__dict__.__setitem__('stypy_call_varargs', varargs)
        OptimizeResult.__dir__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        OptimizeResult.__dir__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OptimizeResult.__dir__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__dir__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__dir__(...)' code ##################

        
        # Call to list(...): (line 130)
        # Processing the call arguments (line 130)
        
        # Call to keys(...): (line 130)
        # Processing the call keyword arguments (line 130)
        kwargs_176913 = {}
        # Getting the type of 'self' (line 130)
        self_176911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 20), 'self', False)
        # Obtaining the member 'keys' of a type (line 130)
        keys_176912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 130, 20), self_176911, 'keys')
        # Calling keys(args, kwargs) (line 130)
        keys_call_result_176914 = invoke(stypy.reporting.localization.Localization(__file__, 130, 20), keys_176912, *[], **kwargs_176913)
        
        # Processing the call keyword arguments (line 130)
        kwargs_176915 = {}
        # Getting the type of 'list' (line 130)
        list_176910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 15), 'list', False)
        # Calling list(args, kwargs) (line 130)
        list_call_result_176916 = invoke(stypy.reporting.localization.Localization(__file__, 130, 15), list_176910, *[keys_call_result_176914], **kwargs_176915)
        
        # Assigning a type to the variable 'stypy_return_type' (line 130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 8), 'stypy_return_type', list_call_result_176916)
        
        # ################# End of '__dir__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__dir__' in the type store
        # Getting the type of 'stypy_return_type' (line 129)
        stypy_return_type_176917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_176917)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__dir__'
        return stypy_return_type_176917


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 75, 0, False)
        # Assigning a type to the variable 'self' (line 76)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 76, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OptimizeResult.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'OptimizeResult' (line 75)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 0), 'OptimizeResult', OptimizeResult)

# Assigning a Attribute to a Name (line 118):
# Getting the type of 'dict' (line 118)
dict_176918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 118, 18), 'dict')
# Obtaining the member '__setitem__' of a type (line 118)
setitem___176919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 118, 18), dict_176918, '__setitem__')
# Getting the type of 'OptimizeResult'
OptimizeResult_176920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'OptimizeResult')
# Setting the type of the member '__setattr__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), OptimizeResult_176920, '__setattr__', setitem___176919)

# Assigning a Attribute to a Name (line 119):
# Getting the type of 'dict' (line 119)
dict_176921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 18), 'dict')
# Obtaining the member '__delitem__' of a type (line 119)
delitem___176922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 119, 18), dict_176921, '__delitem__')
# Getting the type of 'OptimizeResult'
OptimizeResult_176923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'OptimizeResult')
# Setting the type of the member '__delattr__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), OptimizeResult_176923, '__delattr__', delitem___176922)
# Declaration of the 'OptimizeWarning' class
# Getting the type of 'UserWarning' (line 133)
UserWarning_176924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 22), 'UserWarning')

class OptimizeWarning(UserWarning_176924, ):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 133, 0, False)
        # Assigning a type to the variable 'self' (line 134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 134, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'OptimizeWarning.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'OptimizeWarning' (line 133)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 133, 0), 'OptimizeWarning', OptimizeWarning)

@norecursion
def _check_unknown_options(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_check_unknown_options'
    module_type_store = module_type_store.open_function_context('_check_unknown_options', 137, 0, False)
    
    # Passed parameters checking function
    _check_unknown_options.stypy_localization = localization
    _check_unknown_options.stypy_type_of_self = None
    _check_unknown_options.stypy_type_store = module_type_store
    _check_unknown_options.stypy_function_name = '_check_unknown_options'
    _check_unknown_options.stypy_param_names_list = ['unknown_options']
    _check_unknown_options.stypy_varargs_param_name = None
    _check_unknown_options.stypy_kwargs_param_name = None
    _check_unknown_options.stypy_call_defaults = defaults
    _check_unknown_options.stypy_call_varargs = varargs
    _check_unknown_options.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_check_unknown_options', ['unknown_options'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_check_unknown_options', localization, ['unknown_options'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_check_unknown_options(...)' code ##################

    
    # Getting the type of 'unknown_options' (line 138)
    unknown_options_176925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 7), 'unknown_options')
    # Testing the type of an if condition (line 138)
    if_condition_176926 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 138, 4), unknown_options_176925)
    # Assigning a type to the variable 'if_condition_176926' (line 138)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 138, 4), 'if_condition_176926', if_condition_176926)
    # SSA begins for if statement (line 138)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 139):
    
    # Assigning a Call to a Name (line 139):
    
    # Call to join(...): (line 139)
    # Processing the call arguments (line 139)
    
    # Call to map(...): (line 139)
    # Processing the call arguments (line 139)
    # Getting the type of 'str' (line 139)
    str_176930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 28), 'str', False)
    
    # Call to keys(...): (line 139)
    # Processing the call keyword arguments (line 139)
    kwargs_176933 = {}
    # Getting the type of 'unknown_options' (line 139)
    unknown_options_176931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 33), 'unknown_options', False)
    # Obtaining the member 'keys' of a type (line 139)
    keys_176932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 139, 33), unknown_options_176931, 'keys')
    # Calling keys(args, kwargs) (line 139)
    keys_call_result_176934 = invoke(stypy.reporting.localization.Localization(__file__, 139, 33), keys_176932, *[], **kwargs_176933)
    
    # Processing the call keyword arguments (line 139)
    kwargs_176935 = {}
    # Getting the type of 'map' (line 139)
    map_176929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 24), 'map', False)
    # Calling map(args, kwargs) (line 139)
    map_call_result_176936 = invoke(stypy.reporting.localization.Localization(__file__, 139, 24), map_176929, *[str_176930, keys_call_result_176934], **kwargs_176935)
    
    # Processing the call keyword arguments (line 139)
    kwargs_176937 = {}
    str_176927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 139, 14), 'str', ', ')
    # Obtaining the member 'join' of a type (line 139)
    join_176928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 139, 14), str_176927, 'join')
    # Calling join(args, kwargs) (line 139)
    join_call_result_176938 = invoke(stypy.reporting.localization.Localization(__file__, 139, 14), join_176928, *[map_call_result_176936], **kwargs_176937)
    
    # Assigning a type to the variable 'msg' (line 139)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 139, 8), 'msg', join_call_result_176938)
    
    # Call to warn(...): (line 143)
    # Processing the call arguments (line 143)
    str_176941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 143, 22), 'str', 'Unknown solver options: %s')
    # Getting the type of 'msg' (line 143)
    msg_176942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 53), 'msg', False)
    # Applying the binary operator '%' (line 143)
    result_mod_176943 = python_operator(stypy.reporting.localization.Localization(__file__, 143, 22), '%', str_176941, msg_176942)
    
    # Getting the type of 'OptimizeWarning' (line 143)
    OptimizeWarning_176944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 58), 'OptimizeWarning', False)
    int_176945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 143, 75), 'int')
    # Processing the call keyword arguments (line 143)
    kwargs_176946 = {}
    # Getting the type of 'warnings' (line 143)
    warnings_176939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 143)
    warn_176940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 143, 8), warnings_176939, 'warn')
    # Calling warn(args, kwargs) (line 143)
    warn_call_result_176947 = invoke(stypy.reporting.localization.Localization(__file__, 143, 8), warn_176940, *[result_mod_176943, OptimizeWarning_176944, int_176945], **kwargs_176946)
    
    # SSA join for if statement (line 138)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_check_unknown_options(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_check_unknown_options' in the type store
    # Getting the type of 'stypy_return_type' (line 137)
    stypy_return_type_176948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_176948)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_check_unknown_options'
    return stypy_return_type_176948

# Assigning a type to the variable '_check_unknown_options' (line 137)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 137, 0), '_check_unknown_options', _check_unknown_options)

@norecursion
def is_array_scalar(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'is_array_scalar'
    module_type_store = module_type_store.open_function_context('is_array_scalar', 146, 0, False)
    
    # Passed parameters checking function
    is_array_scalar.stypy_localization = localization
    is_array_scalar.stypy_type_of_self = None
    is_array_scalar.stypy_type_store = module_type_store
    is_array_scalar.stypy_function_name = 'is_array_scalar'
    is_array_scalar.stypy_param_names_list = ['x']
    is_array_scalar.stypy_varargs_param_name = None
    is_array_scalar.stypy_kwargs_param_name = None
    is_array_scalar.stypy_call_defaults = defaults
    is_array_scalar.stypy_call_varargs = varargs
    is_array_scalar.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_array_scalar', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_array_scalar', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_array_scalar(...)' code ##################

    str_176949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 149, (-1)), 'str', 'Test whether `x` is either a scalar or an array scalar.\n\n    ')
    
    
    # Call to size(...): (line 150)
    # Processing the call arguments (line 150)
    # Getting the type of 'x' (line 150)
    x_176952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 19), 'x', False)
    # Processing the call keyword arguments (line 150)
    kwargs_176953 = {}
    # Getting the type of 'np' (line 150)
    np_176950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 11), 'np', False)
    # Obtaining the member 'size' of a type (line 150)
    size_176951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 150, 11), np_176950, 'size')
    # Calling size(args, kwargs) (line 150)
    size_call_result_176954 = invoke(stypy.reporting.localization.Localization(__file__, 150, 11), size_176951, *[x_176952], **kwargs_176953)
    
    int_176955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 150, 25), 'int')
    # Applying the binary operator '==' (line 150)
    result_eq_176956 = python_operator(stypy.reporting.localization.Localization(__file__, 150, 11), '==', size_call_result_176954, int_176955)
    
    # Assigning a type to the variable 'stypy_return_type' (line 150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 150, 4), 'stypy_return_type', result_eq_176956)
    
    # ################# End of 'is_array_scalar(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_array_scalar' in the type store
    # Getting the type of 'stypy_return_type' (line 146)
    stypy_return_type_176957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_176957)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_array_scalar'
    return stypy_return_type_176957

# Assigning a type to the variable 'is_array_scalar' (line 146)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 146, 0), 'is_array_scalar', is_array_scalar)

# Assigning a Call to a Name (line 152):

# Assigning a Call to a Name (line 152):

# Call to sqrt(...): (line 152)
# Processing the call arguments (line 152)

# Call to finfo(...): (line 152)
# Processing the call arguments (line 152)
# Getting the type of 'float' (line 152)
float_176961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 28), 'float', False)
# Processing the call keyword arguments (line 152)
kwargs_176962 = {}
# Getting the type of 'numpy' (line 152)
numpy_176959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 16), 'numpy', False)
# Obtaining the member 'finfo' of a type (line 152)
finfo_176960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 16), numpy_176959, 'finfo')
# Calling finfo(args, kwargs) (line 152)
finfo_call_result_176963 = invoke(stypy.reporting.localization.Localization(__file__, 152, 16), finfo_176960, *[float_176961], **kwargs_176962)

# Obtaining the member 'eps' of a type (line 152)
eps_176964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 16), finfo_call_result_176963, 'eps')
# Processing the call keyword arguments (line 152)
kwargs_176965 = {}
# Getting the type of 'sqrt' (line 152)
sqrt_176958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 11), 'sqrt', False)
# Calling sqrt(args, kwargs) (line 152)
sqrt_call_result_176966 = invoke(stypy.reporting.localization.Localization(__file__, 152, 11), sqrt_176958, *[eps_176964], **kwargs_176965)

# Assigning a type to the variable '_epsilon' (line 152)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 152, 0), '_epsilon', sqrt_call_result_176966)

@norecursion
def vecnorm(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_176967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 155, 19), 'int')
    defaults = [int_176967]
    # Create a new context for function 'vecnorm'
    module_type_store = module_type_store.open_function_context('vecnorm', 155, 0, False)
    
    # Passed parameters checking function
    vecnorm.stypy_localization = localization
    vecnorm.stypy_type_of_self = None
    vecnorm.stypy_type_store = module_type_store
    vecnorm.stypy_function_name = 'vecnorm'
    vecnorm.stypy_param_names_list = ['x', 'ord']
    vecnorm.stypy_varargs_param_name = None
    vecnorm.stypy_kwargs_param_name = None
    vecnorm.stypy_call_defaults = defaults
    vecnorm.stypy_call_varargs = varargs
    vecnorm.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'vecnorm', ['x', 'ord'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'vecnorm', localization, ['x', 'ord'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'vecnorm(...)' code ##################

    
    
    # Getting the type of 'ord' (line 156)
    ord_176968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 7), 'ord')
    # Getting the type of 'Inf' (line 156)
    Inf_176969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 14), 'Inf')
    # Applying the binary operator '==' (line 156)
    result_eq_176970 = python_operator(stypy.reporting.localization.Localization(__file__, 156, 7), '==', ord_176968, Inf_176969)
    
    # Testing the type of an if condition (line 156)
    if_condition_176971 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 156, 4), result_eq_176970)
    # Assigning a type to the variable 'if_condition_176971' (line 156)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 156, 4), 'if_condition_176971', if_condition_176971)
    # SSA begins for if statement (line 156)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to amax(...): (line 157)
    # Processing the call arguments (line 157)
    
    # Call to abs(...): (line 157)
    # Processing the call arguments (line 157)
    # Getting the type of 'x' (line 157)
    x_176976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 36), 'x', False)
    # Processing the call keyword arguments (line 157)
    kwargs_176977 = {}
    # Getting the type of 'numpy' (line 157)
    numpy_176974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 26), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 157)
    abs_176975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 157, 26), numpy_176974, 'abs')
    # Calling abs(args, kwargs) (line 157)
    abs_call_result_176978 = invoke(stypy.reporting.localization.Localization(__file__, 157, 26), abs_176975, *[x_176976], **kwargs_176977)
    
    # Processing the call keyword arguments (line 157)
    kwargs_176979 = {}
    # Getting the type of 'numpy' (line 157)
    numpy_176972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 15), 'numpy', False)
    # Obtaining the member 'amax' of a type (line 157)
    amax_176973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 157, 15), numpy_176972, 'amax')
    # Calling amax(args, kwargs) (line 157)
    amax_call_result_176980 = invoke(stypy.reporting.localization.Localization(__file__, 157, 15), amax_176973, *[abs_call_result_176978], **kwargs_176979)
    
    # Assigning a type to the variable 'stypy_return_type' (line 157)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 157, 8), 'stypy_return_type', amax_call_result_176980)
    # SSA branch for the else part of an if statement (line 156)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'ord' (line 158)
    ord_176981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 9), 'ord')
    
    # Getting the type of 'Inf' (line 158)
    Inf_176982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 17), 'Inf')
    # Applying the 'usub' unary operator (line 158)
    result___neg___176983 = python_operator(stypy.reporting.localization.Localization(__file__, 158, 16), 'usub', Inf_176982)
    
    # Applying the binary operator '==' (line 158)
    result_eq_176984 = python_operator(stypy.reporting.localization.Localization(__file__, 158, 9), '==', ord_176981, result___neg___176983)
    
    # Testing the type of an if condition (line 158)
    if_condition_176985 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 158, 9), result_eq_176984)
    # Assigning a type to the variable 'if_condition_176985' (line 158)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 9), 'if_condition_176985', if_condition_176985)
    # SSA begins for if statement (line 158)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to amin(...): (line 159)
    # Processing the call arguments (line 159)
    
    # Call to abs(...): (line 159)
    # Processing the call arguments (line 159)
    # Getting the type of 'x' (line 159)
    x_176990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 36), 'x', False)
    # Processing the call keyword arguments (line 159)
    kwargs_176991 = {}
    # Getting the type of 'numpy' (line 159)
    numpy_176988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 26), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 159)
    abs_176989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 26), numpy_176988, 'abs')
    # Calling abs(args, kwargs) (line 159)
    abs_call_result_176992 = invoke(stypy.reporting.localization.Localization(__file__, 159, 26), abs_176989, *[x_176990], **kwargs_176991)
    
    # Processing the call keyword arguments (line 159)
    kwargs_176993 = {}
    # Getting the type of 'numpy' (line 159)
    numpy_176986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 15), 'numpy', False)
    # Obtaining the member 'amin' of a type (line 159)
    amin_176987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 15), numpy_176986, 'amin')
    # Calling amin(args, kwargs) (line 159)
    amin_call_result_176994 = invoke(stypy.reporting.localization.Localization(__file__, 159, 15), amin_176987, *[abs_call_result_176992], **kwargs_176993)
    
    # Assigning a type to the variable 'stypy_return_type' (line 159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 8), 'stypy_return_type', amin_call_result_176994)
    # SSA branch for the else part of an if statement (line 158)
    module_type_store.open_ssa_branch('else')
    
    # Call to sum(...): (line 161)
    # Processing the call arguments (line 161)
    
    # Call to abs(...): (line 161)
    # Processing the call arguments (line 161)
    # Getting the type of 'x' (line 161)
    x_176999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 35), 'x', False)
    # Processing the call keyword arguments (line 161)
    kwargs_177000 = {}
    # Getting the type of 'numpy' (line 161)
    numpy_176997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 25), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 161)
    abs_176998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 25), numpy_176997, 'abs')
    # Calling abs(args, kwargs) (line 161)
    abs_call_result_177001 = invoke(stypy.reporting.localization.Localization(__file__, 161, 25), abs_176998, *[x_176999], **kwargs_177000)
    
    # Getting the type of 'ord' (line 161)
    ord_177002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 39), 'ord', False)
    # Applying the binary operator '**' (line 161)
    result_pow_177003 = python_operator(stypy.reporting.localization.Localization(__file__, 161, 25), '**', abs_call_result_177001, ord_177002)
    
    # Processing the call keyword arguments (line 161)
    int_177004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 161, 49), 'int')
    keyword_177005 = int_177004
    kwargs_177006 = {'axis': keyword_177005}
    # Getting the type of 'numpy' (line 161)
    numpy_176995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 15), 'numpy', False)
    # Obtaining the member 'sum' of a type (line 161)
    sum_176996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 15), numpy_176995, 'sum')
    # Calling sum(args, kwargs) (line 161)
    sum_call_result_177007 = invoke(stypy.reporting.localization.Localization(__file__, 161, 15), sum_176996, *[result_pow_177003], **kwargs_177006)
    
    float_177008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 161, 54), 'float')
    # Getting the type of 'ord' (line 161)
    ord_177009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 60), 'ord')
    # Applying the binary operator 'div' (line 161)
    result_div_177010 = python_operator(stypy.reporting.localization.Localization(__file__, 161, 54), 'div', float_177008, ord_177009)
    
    # Applying the binary operator '**' (line 161)
    result_pow_177011 = python_operator(stypy.reporting.localization.Localization(__file__, 161, 15), '**', sum_call_result_177007, result_div_177010)
    
    # Assigning a type to the variable 'stypy_return_type' (line 161)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 161, 8), 'stypy_return_type', result_pow_177011)
    # SSA join for if statement (line 158)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 156)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'vecnorm(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'vecnorm' in the type store
    # Getting the type of 'stypy_return_type' (line 155)
    stypy_return_type_177012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_177012)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'vecnorm'
    return stypy_return_type_177012

# Assigning a type to the variable 'vecnorm' (line 155)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 155, 0), 'vecnorm', vecnorm)

@norecursion
def rosen(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'rosen'
    module_type_store = module_type_store.open_function_context('rosen', 164, 0, False)
    
    # Passed parameters checking function
    rosen.stypy_localization = localization
    rosen.stypy_type_of_self = None
    rosen.stypy_type_store = module_type_store
    rosen.stypy_function_name = 'rosen'
    rosen.stypy_param_names_list = ['x']
    rosen.stypy_varargs_param_name = None
    rosen.stypy_kwargs_param_name = None
    rosen.stypy_call_defaults = defaults
    rosen.stypy_call_varargs = varargs
    rosen.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rosen', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rosen', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rosen(...)' code ##################

    str_177013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 186, (-1)), 'str', '\n    The Rosenbrock function.\n\n    The function computed is::\n\n        sum(100.0*(x[1:] - x[:-1]**2.0)**2.0 + (1 - x[:-1])**2.0)\n\n    Parameters\n    ----------\n    x : array_like\n        1-D array of points at which the Rosenbrock function is to be computed.\n\n    Returns\n    -------\n    f : float\n        The value of the Rosenbrock function.\n\n    See Also\n    --------\n    rosen_der, rosen_hess, rosen_hess_prod\n\n    ')
    
    # Assigning a Call to a Name (line 187):
    
    # Assigning a Call to a Name (line 187):
    
    # Call to asarray(...): (line 187)
    # Processing the call arguments (line 187)
    # Getting the type of 'x' (line 187)
    x_177015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 16), 'x', False)
    # Processing the call keyword arguments (line 187)
    kwargs_177016 = {}
    # Getting the type of 'asarray' (line 187)
    asarray_177014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 187)
    asarray_call_result_177017 = invoke(stypy.reporting.localization.Localization(__file__, 187, 8), asarray_177014, *[x_177015], **kwargs_177016)
    
    # Assigning a type to the variable 'x' (line 187)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 187, 4), 'x', asarray_call_result_177017)
    
    # Assigning a Call to a Name (line 188):
    
    # Assigning a Call to a Name (line 188):
    
    # Call to sum(...): (line 188)
    # Processing the call arguments (line 188)
    float_177020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 18), 'float')
    
    # Obtaining the type of the subscript
    int_177021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 29), 'int')
    slice_177022 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 188, 27), int_177021, None, None)
    # Getting the type of 'x' (line 188)
    x_177023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 27), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 188)
    getitem___177024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 27), x_177023, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 188)
    subscript_call_result_177025 = invoke(stypy.reporting.localization.Localization(__file__, 188, 27), getitem___177024, slice_177022)
    
    
    # Obtaining the type of the subscript
    int_177026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 38), 'int')
    slice_177027 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 188, 35), None, int_177026, None)
    # Getting the type of 'x' (line 188)
    x_177028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 35), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 188)
    getitem___177029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 35), x_177028, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 188)
    subscript_call_result_177030 = invoke(stypy.reporting.localization.Localization(__file__, 188, 35), getitem___177029, slice_177027)
    
    float_177031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 43), 'float')
    # Applying the binary operator '**' (line 188)
    result_pow_177032 = python_operator(stypy.reporting.localization.Localization(__file__, 188, 35), '**', subscript_call_result_177030, float_177031)
    
    # Applying the binary operator '-' (line 188)
    result_sub_177033 = python_operator(stypy.reporting.localization.Localization(__file__, 188, 27), '-', subscript_call_result_177025, result_pow_177032)
    
    float_177034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 49), 'float')
    # Applying the binary operator '**' (line 188)
    result_pow_177035 = python_operator(stypy.reporting.localization.Localization(__file__, 188, 26), '**', result_sub_177033, float_177034)
    
    # Applying the binary operator '*' (line 188)
    result_mul_177036 = python_operator(stypy.reporting.localization.Localization(__file__, 188, 18), '*', float_177020, result_pow_177035)
    
    int_177037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 56), 'int')
    
    # Obtaining the type of the subscript
    int_177038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 63), 'int')
    slice_177039 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 188, 60), None, int_177038, None)
    # Getting the type of 'x' (line 188)
    x_177040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 60), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 188)
    getitem___177041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 60), x_177040, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 188)
    subscript_call_result_177042 = invoke(stypy.reporting.localization.Localization(__file__, 188, 60), getitem___177041, slice_177039)
    
    # Applying the binary operator '-' (line 188)
    result_sub_177043 = python_operator(stypy.reporting.localization.Localization(__file__, 188, 56), '-', int_177037, subscript_call_result_177042)
    
    float_177044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 69), 'float')
    # Applying the binary operator '**' (line 188)
    result_pow_177045 = python_operator(stypy.reporting.localization.Localization(__file__, 188, 55), '**', result_sub_177043, float_177044)
    
    # Applying the binary operator '+' (line 188)
    result_add_177046 = python_operator(stypy.reporting.localization.Localization(__file__, 188, 18), '+', result_mul_177036, result_pow_177045)
    
    # Processing the call keyword arguments (line 188)
    int_177047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 23), 'int')
    keyword_177048 = int_177047
    kwargs_177049 = {'axis': keyword_177048}
    # Getting the type of 'numpy' (line 188)
    numpy_177018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 8), 'numpy', False)
    # Obtaining the member 'sum' of a type (line 188)
    sum_177019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 8), numpy_177018, 'sum')
    # Calling sum(args, kwargs) (line 188)
    sum_call_result_177050 = invoke(stypy.reporting.localization.Localization(__file__, 188, 8), sum_177019, *[result_add_177046], **kwargs_177049)
    
    # Assigning a type to the variable 'r' (line 188)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 188, 4), 'r', sum_call_result_177050)
    # Getting the type of 'r' (line 190)
    r_177051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 11), 'r')
    # Assigning a type to the variable 'stypy_return_type' (line 190)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 190, 4), 'stypy_return_type', r_177051)
    
    # ################# End of 'rosen(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rosen' in the type store
    # Getting the type of 'stypy_return_type' (line 164)
    stypy_return_type_177052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_177052)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rosen'
    return stypy_return_type_177052

# Assigning a type to the variable 'rosen' (line 164)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 164, 0), 'rosen', rosen)

@norecursion
def rosen_der(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'rosen_der'
    module_type_store = module_type_store.open_function_context('rosen_der', 193, 0, False)
    
    # Passed parameters checking function
    rosen_der.stypy_localization = localization
    rosen_der.stypy_type_of_self = None
    rosen_der.stypy_type_store = module_type_store
    rosen_der.stypy_function_name = 'rosen_der'
    rosen_der.stypy_param_names_list = ['x']
    rosen_der.stypy_varargs_param_name = None
    rosen_der.stypy_kwargs_param_name = None
    rosen_der.stypy_call_defaults = defaults
    rosen_der.stypy_call_varargs = varargs
    rosen_der.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rosen_der', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rosen_der', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rosen_der(...)' code ##################

    str_177053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, (-1)), 'str', '\n    The derivative (i.e. gradient) of the Rosenbrock function.\n\n    Parameters\n    ----------\n    x : array_like\n        1-D array of points at which the derivative is to be computed.\n\n    Returns\n    -------\n    rosen_der : (N,) ndarray\n        The gradient of the Rosenbrock function at `x`.\n\n    See Also\n    --------\n    rosen, rosen_hess, rosen_hess_prod\n\n    ')
    
    # Assigning a Call to a Name (line 212):
    
    # Assigning a Call to a Name (line 212):
    
    # Call to asarray(...): (line 212)
    # Processing the call arguments (line 212)
    # Getting the type of 'x' (line 212)
    x_177055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 16), 'x', False)
    # Processing the call keyword arguments (line 212)
    kwargs_177056 = {}
    # Getting the type of 'asarray' (line 212)
    asarray_177054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 212)
    asarray_call_result_177057 = invoke(stypy.reporting.localization.Localization(__file__, 212, 8), asarray_177054, *[x_177055], **kwargs_177056)
    
    # Assigning a type to the variable 'x' (line 212)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 212, 4), 'x', asarray_call_result_177057)
    
    # Assigning a Subscript to a Name (line 213):
    
    # Assigning a Subscript to a Name (line 213):
    
    # Obtaining the type of the subscript
    int_177058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 213, 11), 'int')
    int_177059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 213, 13), 'int')
    slice_177060 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 213, 9), int_177058, int_177059, None)
    # Getting the type of 'x' (line 213)
    x_177061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 9), 'x')
    # Obtaining the member '__getitem__' of a type (line 213)
    getitem___177062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 213, 9), x_177061, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 213)
    subscript_call_result_177063 = invoke(stypy.reporting.localization.Localization(__file__, 213, 9), getitem___177062, slice_177060)
    
    # Assigning a type to the variable 'xm' (line 213)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 4), 'xm', subscript_call_result_177063)
    
    # Assigning a Subscript to a Name (line 214):
    
    # Assigning a Subscript to a Name (line 214):
    
    # Obtaining the type of the subscript
    int_177064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 214, 15), 'int')
    slice_177065 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 214, 12), None, int_177064, None)
    # Getting the type of 'x' (line 214)
    x_177066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 12), 'x')
    # Obtaining the member '__getitem__' of a type (line 214)
    getitem___177067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 12), x_177066, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 214)
    subscript_call_result_177068 = invoke(stypy.reporting.localization.Localization(__file__, 214, 12), getitem___177067, slice_177065)
    
    # Assigning a type to the variable 'xm_m1' (line 214)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 4), 'xm_m1', subscript_call_result_177068)
    
    # Assigning a Subscript to a Name (line 215):
    
    # Assigning a Subscript to a Name (line 215):
    
    # Obtaining the type of the subscript
    int_177069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 215, 14), 'int')
    slice_177070 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 215, 12), int_177069, None, None)
    # Getting the type of 'x' (line 215)
    x_177071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 12), 'x')
    # Obtaining the member '__getitem__' of a type (line 215)
    getitem___177072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 215, 12), x_177071, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 215)
    subscript_call_result_177073 = invoke(stypy.reporting.localization.Localization(__file__, 215, 12), getitem___177072, slice_177070)
    
    # Assigning a type to the variable 'xm_p1' (line 215)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 215, 4), 'xm_p1', subscript_call_result_177073)
    
    # Assigning a Call to a Name (line 216):
    
    # Assigning a Call to a Name (line 216):
    
    # Call to zeros_like(...): (line 216)
    # Processing the call arguments (line 216)
    # Getting the type of 'x' (line 216)
    x_177076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 27), 'x', False)
    # Processing the call keyword arguments (line 216)
    kwargs_177077 = {}
    # Getting the type of 'numpy' (line 216)
    numpy_177074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 10), 'numpy', False)
    # Obtaining the member 'zeros_like' of a type (line 216)
    zeros_like_177075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 216, 10), numpy_177074, 'zeros_like')
    # Calling zeros_like(args, kwargs) (line 216)
    zeros_like_call_result_177078 = invoke(stypy.reporting.localization.Localization(__file__, 216, 10), zeros_like_177075, *[x_177076], **kwargs_177077)
    
    # Assigning a type to the variable 'der' (line 216)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 216, 4), 'der', zeros_like_call_result_177078)
    
    # Assigning a BinOp to a Subscript (line 217):
    
    # Assigning a BinOp to a Subscript (line 217):
    int_177079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 217, 17), 'int')
    # Getting the type of 'xm' (line 217)
    xm_177080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 24), 'xm')
    # Getting the type of 'xm_m1' (line 217)
    xm_m1_177081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 29), 'xm_m1')
    int_177082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 217, 36), 'int')
    # Applying the binary operator '**' (line 217)
    result_pow_177083 = python_operator(stypy.reporting.localization.Localization(__file__, 217, 29), '**', xm_m1_177081, int_177082)
    
    # Applying the binary operator '-' (line 217)
    result_sub_177084 = python_operator(stypy.reporting.localization.Localization(__file__, 217, 24), '-', xm_177080, result_pow_177083)
    
    # Applying the binary operator '*' (line 217)
    result_mul_177085 = python_operator(stypy.reporting.localization.Localization(__file__, 217, 17), '*', int_177079, result_sub_177084)
    
    int_177086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 218, 17), 'int')
    # Getting the type of 'xm_p1' (line 218)
    xm_p1_177087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 24), 'xm_p1')
    # Getting the type of 'xm' (line 218)
    xm_177088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 32), 'xm')
    int_177089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 218, 36), 'int')
    # Applying the binary operator '**' (line 218)
    result_pow_177090 = python_operator(stypy.reporting.localization.Localization(__file__, 218, 32), '**', xm_177088, int_177089)
    
    # Applying the binary operator '-' (line 218)
    result_sub_177091 = python_operator(stypy.reporting.localization.Localization(__file__, 218, 24), '-', xm_p1_177087, result_pow_177090)
    
    # Applying the binary operator '*' (line 218)
    result_mul_177092 = python_operator(stypy.reporting.localization.Localization(__file__, 218, 17), '*', int_177086, result_sub_177091)
    
    # Getting the type of 'xm' (line 218)
    xm_177093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 41), 'xm')
    # Applying the binary operator '*' (line 218)
    result_mul_177094 = python_operator(stypy.reporting.localization.Localization(__file__, 218, 39), '*', result_mul_177092, xm_177093)
    
    # Applying the binary operator '-' (line 217)
    result_sub_177095 = python_operator(stypy.reporting.localization.Localization(__file__, 217, 17), '-', result_mul_177085, result_mul_177094)
    
    int_177096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 218, 46), 'int')
    int_177097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 218, 51), 'int')
    # Getting the type of 'xm' (line 218)
    xm_177098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 55), 'xm')
    # Applying the binary operator '-' (line 218)
    result_sub_177099 = python_operator(stypy.reporting.localization.Localization(__file__, 218, 51), '-', int_177097, xm_177098)
    
    # Applying the binary operator '*' (line 218)
    result_mul_177100 = python_operator(stypy.reporting.localization.Localization(__file__, 218, 46), '*', int_177096, result_sub_177099)
    
    # Applying the binary operator '-' (line 218)
    result_sub_177101 = python_operator(stypy.reporting.localization.Localization(__file__, 218, 44), '-', result_sub_177095, result_mul_177100)
    
    # Getting the type of 'der' (line 217)
    der_177102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 4), 'der')
    int_177103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 217, 8), 'int')
    int_177104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 217, 10), 'int')
    slice_177105 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 217, 4), int_177103, int_177104, None)
    # Storing an element on a container (line 217)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 217, 4), der_177102, (slice_177105, result_sub_177101))
    
    # Assigning a BinOp to a Subscript (line 219):
    
    # Assigning a BinOp to a Subscript (line 219):
    int_177106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, 13), 'int')
    
    # Obtaining the type of the subscript
    int_177107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, 22), 'int')
    # Getting the type of 'x' (line 219)
    x_177108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 20), 'x')
    # Obtaining the member '__getitem__' of a type (line 219)
    getitem___177109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 20), x_177108, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 219)
    subscript_call_result_177110 = invoke(stypy.reporting.localization.Localization(__file__, 219, 20), getitem___177109, int_177107)
    
    # Applying the binary operator '*' (line 219)
    result_mul_177111 = python_operator(stypy.reporting.localization.Localization(__file__, 219, 13), '*', int_177106, subscript_call_result_177110)
    
    
    # Obtaining the type of the subscript
    int_177112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, 30), 'int')
    # Getting the type of 'x' (line 219)
    x_177113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 28), 'x')
    # Obtaining the member '__getitem__' of a type (line 219)
    getitem___177114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 28), x_177113, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 219)
    subscript_call_result_177115 = invoke(stypy.reporting.localization.Localization(__file__, 219, 28), getitem___177114, int_177112)
    
    
    # Obtaining the type of the subscript
    int_177116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, 37), 'int')
    # Getting the type of 'x' (line 219)
    x_177117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 35), 'x')
    # Obtaining the member '__getitem__' of a type (line 219)
    getitem___177118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 35), x_177117, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 219)
    subscript_call_result_177119 = invoke(stypy.reporting.localization.Localization(__file__, 219, 35), getitem___177118, int_177116)
    
    int_177120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, 41), 'int')
    # Applying the binary operator '**' (line 219)
    result_pow_177121 = python_operator(stypy.reporting.localization.Localization(__file__, 219, 35), '**', subscript_call_result_177119, int_177120)
    
    # Applying the binary operator '-' (line 219)
    result_sub_177122 = python_operator(stypy.reporting.localization.Localization(__file__, 219, 28), '-', subscript_call_result_177115, result_pow_177121)
    
    # Applying the binary operator '*' (line 219)
    result_mul_177123 = python_operator(stypy.reporting.localization.Localization(__file__, 219, 25), '*', result_mul_177111, result_sub_177122)
    
    int_177124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, 46), 'int')
    int_177125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, 51), 'int')
    
    # Obtaining the type of the subscript
    int_177126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, 57), 'int')
    # Getting the type of 'x' (line 219)
    x_177127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 55), 'x')
    # Obtaining the member '__getitem__' of a type (line 219)
    getitem___177128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 55), x_177127, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 219)
    subscript_call_result_177129 = invoke(stypy.reporting.localization.Localization(__file__, 219, 55), getitem___177128, int_177126)
    
    # Applying the binary operator '-' (line 219)
    result_sub_177130 = python_operator(stypy.reporting.localization.Localization(__file__, 219, 51), '-', int_177125, subscript_call_result_177129)
    
    # Applying the binary operator '*' (line 219)
    result_mul_177131 = python_operator(stypy.reporting.localization.Localization(__file__, 219, 46), '*', int_177124, result_sub_177130)
    
    # Applying the binary operator '-' (line 219)
    result_sub_177132 = python_operator(stypy.reporting.localization.Localization(__file__, 219, 13), '-', result_mul_177123, result_mul_177131)
    
    # Getting the type of 'der' (line 219)
    der_177133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 4), 'der')
    int_177134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, 8), 'int')
    # Storing an element on a container (line 219)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 219, 4), der_177133, (int_177134, result_sub_177132))
    
    # Assigning a BinOp to a Subscript (line 220):
    
    # Assigning a BinOp to a Subscript (line 220):
    int_177135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 220, 14), 'int')
    
    # Obtaining the type of the subscript
    int_177136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 220, 23), 'int')
    # Getting the type of 'x' (line 220)
    x_177137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 21), 'x')
    # Obtaining the member '__getitem__' of a type (line 220)
    getitem___177138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 220, 21), x_177137, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 220)
    subscript_call_result_177139 = invoke(stypy.reporting.localization.Localization(__file__, 220, 21), getitem___177138, int_177136)
    
    
    # Obtaining the type of the subscript
    int_177140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 220, 31), 'int')
    # Getting the type of 'x' (line 220)
    x_177141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 29), 'x')
    # Obtaining the member '__getitem__' of a type (line 220)
    getitem___177142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 220, 29), x_177141, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 220)
    subscript_call_result_177143 = invoke(stypy.reporting.localization.Localization(__file__, 220, 29), getitem___177142, int_177140)
    
    int_177144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 220, 36), 'int')
    # Applying the binary operator '**' (line 220)
    result_pow_177145 = python_operator(stypy.reporting.localization.Localization(__file__, 220, 29), '**', subscript_call_result_177143, int_177144)
    
    # Applying the binary operator '-' (line 220)
    result_sub_177146 = python_operator(stypy.reporting.localization.Localization(__file__, 220, 21), '-', subscript_call_result_177139, result_pow_177145)
    
    # Applying the binary operator '*' (line 220)
    result_mul_177147 = python_operator(stypy.reporting.localization.Localization(__file__, 220, 14), '*', int_177135, result_sub_177146)
    
    # Getting the type of 'der' (line 220)
    der_177148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 4), 'der')
    int_177149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 220, 8), 'int')
    # Storing an element on a container (line 220)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 220, 4), der_177148, (int_177149, result_mul_177147))
    # Getting the type of 'der' (line 221)
    der_177150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 11), 'der')
    # Assigning a type to the variable 'stypy_return_type' (line 221)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 221, 4), 'stypy_return_type', der_177150)
    
    # ################# End of 'rosen_der(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rosen_der' in the type store
    # Getting the type of 'stypy_return_type' (line 193)
    stypy_return_type_177151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_177151)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rosen_der'
    return stypy_return_type_177151

# Assigning a type to the variable 'rosen_der' (line 193)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 193, 0), 'rosen_der', rosen_der)

@norecursion
def rosen_hess(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'rosen_hess'
    module_type_store = module_type_store.open_function_context('rosen_hess', 224, 0, False)
    
    # Passed parameters checking function
    rosen_hess.stypy_localization = localization
    rosen_hess.stypy_type_of_self = None
    rosen_hess.stypy_type_store = module_type_store
    rosen_hess.stypy_function_name = 'rosen_hess'
    rosen_hess.stypy_param_names_list = ['x']
    rosen_hess.stypy_varargs_param_name = None
    rosen_hess.stypy_kwargs_param_name = None
    rosen_hess.stypy_call_defaults = defaults
    rosen_hess.stypy_call_varargs = varargs
    rosen_hess.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rosen_hess', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rosen_hess', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rosen_hess(...)' code ##################

    str_177152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 242, (-1)), 'str', '\n    The Hessian matrix of the Rosenbrock function.\n\n    Parameters\n    ----------\n    x : array_like\n        1-D array of points at which the Hessian matrix is to be computed.\n\n    Returns\n    -------\n    rosen_hess : ndarray\n        The Hessian matrix of the Rosenbrock function at `x`.\n\n    See Also\n    --------\n    rosen, rosen_der, rosen_hess_prod\n\n    ')
    
    # Assigning a Call to a Name (line 243):
    
    # Assigning a Call to a Name (line 243):
    
    # Call to atleast_1d(...): (line 243)
    # Processing the call arguments (line 243)
    # Getting the type of 'x' (line 243)
    x_177154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 19), 'x', False)
    # Processing the call keyword arguments (line 243)
    kwargs_177155 = {}
    # Getting the type of 'atleast_1d' (line 243)
    atleast_1d_177153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 243)
    atleast_1d_call_result_177156 = invoke(stypy.reporting.localization.Localization(__file__, 243, 8), atleast_1d_177153, *[x_177154], **kwargs_177155)
    
    # Assigning a type to the variable 'x' (line 243)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 243, 4), 'x', atleast_1d_call_result_177156)
    
    # Assigning a BinOp to a Name (line 244):
    
    # Assigning a BinOp to a Name (line 244):
    
    # Call to diag(...): (line 244)
    # Processing the call arguments (line 244)
    int_177159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 19), 'int')
    
    # Obtaining the type of the subscript
    int_177160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 29), 'int')
    slice_177161 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 244, 26), None, int_177160, None)
    # Getting the type of 'x' (line 244)
    x_177162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 26), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 244)
    getitem___177163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 244, 26), x_177162, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 244)
    subscript_call_result_177164 = invoke(stypy.reporting.localization.Localization(__file__, 244, 26), getitem___177163, slice_177161)
    
    # Applying the binary operator '*' (line 244)
    result_mul_177165 = python_operator(stypy.reporting.localization.Localization(__file__, 244, 19), '*', int_177159, subscript_call_result_177164)
    
    int_177166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 34), 'int')
    # Processing the call keyword arguments (line 244)
    kwargs_177167 = {}
    # Getting the type of 'numpy' (line 244)
    numpy_177157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 8), 'numpy', False)
    # Obtaining the member 'diag' of a type (line 244)
    diag_177158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 244, 8), numpy_177157, 'diag')
    # Calling diag(args, kwargs) (line 244)
    diag_call_result_177168 = invoke(stypy.reporting.localization.Localization(__file__, 244, 8), diag_177158, *[result_mul_177165, int_177166], **kwargs_177167)
    
    
    # Call to diag(...): (line 244)
    # Processing the call arguments (line 244)
    int_177171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 50), 'int')
    
    # Obtaining the type of the subscript
    int_177172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 59), 'int')
    slice_177173 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 244, 56), None, int_177172, None)
    # Getting the type of 'x' (line 244)
    x_177174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 56), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 244)
    getitem___177175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 244, 56), x_177174, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 244)
    subscript_call_result_177176 = invoke(stypy.reporting.localization.Localization(__file__, 244, 56), getitem___177175, slice_177173)
    
    # Applying the binary operator '*' (line 244)
    result_mul_177177 = python_operator(stypy.reporting.localization.Localization(__file__, 244, 50), '*', int_177171, subscript_call_result_177176)
    
    int_177178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 64), 'int')
    # Processing the call keyword arguments (line 244)
    kwargs_177179 = {}
    # Getting the type of 'numpy' (line 244)
    numpy_177169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 39), 'numpy', False)
    # Obtaining the member 'diag' of a type (line 244)
    diag_177170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 244, 39), numpy_177169, 'diag')
    # Calling diag(args, kwargs) (line 244)
    diag_call_result_177180 = invoke(stypy.reporting.localization.Localization(__file__, 244, 39), diag_177170, *[result_mul_177177, int_177178], **kwargs_177179)
    
    # Applying the binary operator '-' (line 244)
    result_sub_177181 = python_operator(stypy.reporting.localization.Localization(__file__, 244, 8), '-', diag_call_result_177168, diag_call_result_177180)
    
    # Assigning a type to the variable 'H' (line 244)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 4), 'H', result_sub_177181)
    
    # Assigning a Call to a Name (line 245):
    
    # Assigning a Call to a Name (line 245):
    
    # Call to zeros(...): (line 245)
    # Processing the call arguments (line 245)
    
    # Call to len(...): (line 245)
    # Processing the call arguments (line 245)
    # Getting the type of 'x' (line 245)
    x_177185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 31), 'x', False)
    # Processing the call keyword arguments (line 245)
    kwargs_177186 = {}
    # Getting the type of 'len' (line 245)
    len_177184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 27), 'len', False)
    # Calling len(args, kwargs) (line 245)
    len_call_result_177187 = invoke(stypy.reporting.localization.Localization(__file__, 245, 27), len_177184, *[x_177185], **kwargs_177186)
    
    # Processing the call keyword arguments (line 245)
    # Getting the type of 'x' (line 245)
    x_177188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 41), 'x', False)
    # Obtaining the member 'dtype' of a type (line 245)
    dtype_177189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 245, 41), x_177188, 'dtype')
    keyword_177190 = dtype_177189
    kwargs_177191 = {'dtype': keyword_177190}
    # Getting the type of 'numpy' (line 245)
    numpy_177182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 15), 'numpy', False)
    # Obtaining the member 'zeros' of a type (line 245)
    zeros_177183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 245, 15), numpy_177182, 'zeros')
    # Calling zeros(args, kwargs) (line 245)
    zeros_call_result_177192 = invoke(stypy.reporting.localization.Localization(__file__, 245, 15), zeros_177183, *[len_call_result_177187], **kwargs_177191)
    
    # Assigning a type to the variable 'diagonal' (line 245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 245, 4), 'diagonal', zeros_call_result_177192)
    
    # Assigning a BinOp to a Subscript (line 246):
    
    # Assigning a BinOp to a Subscript (line 246):
    int_177193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 246, 18), 'int')
    
    # Obtaining the type of the subscript
    int_177194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 246, 27), 'int')
    # Getting the type of 'x' (line 246)
    x_177195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 25), 'x')
    # Obtaining the member '__getitem__' of a type (line 246)
    getitem___177196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 246, 25), x_177195, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 246)
    subscript_call_result_177197 = invoke(stypy.reporting.localization.Localization(__file__, 246, 25), getitem___177196, int_177194)
    
    int_177198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 246, 31), 'int')
    # Applying the binary operator '**' (line 246)
    result_pow_177199 = python_operator(stypy.reporting.localization.Localization(__file__, 246, 25), '**', subscript_call_result_177197, int_177198)
    
    # Applying the binary operator '*' (line 246)
    result_mul_177200 = python_operator(stypy.reporting.localization.Localization(__file__, 246, 18), '*', int_177193, result_pow_177199)
    
    int_177201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 246, 35), 'int')
    
    # Obtaining the type of the subscript
    int_177202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 246, 43), 'int')
    # Getting the type of 'x' (line 246)
    x_177203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 41), 'x')
    # Obtaining the member '__getitem__' of a type (line 246)
    getitem___177204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 246, 41), x_177203, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 246)
    subscript_call_result_177205 = invoke(stypy.reporting.localization.Localization(__file__, 246, 41), getitem___177204, int_177202)
    
    # Applying the binary operator '*' (line 246)
    result_mul_177206 = python_operator(stypy.reporting.localization.Localization(__file__, 246, 35), '*', int_177201, subscript_call_result_177205)
    
    # Applying the binary operator '-' (line 246)
    result_sub_177207 = python_operator(stypy.reporting.localization.Localization(__file__, 246, 18), '-', result_mul_177200, result_mul_177206)
    
    int_177208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 246, 48), 'int')
    # Applying the binary operator '+' (line 246)
    result_add_177209 = python_operator(stypy.reporting.localization.Localization(__file__, 246, 46), '+', result_sub_177207, int_177208)
    
    # Getting the type of 'diagonal' (line 246)
    diagonal_177210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 4), 'diagonal')
    int_177211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 246, 13), 'int')
    # Storing an element on a container (line 246)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 246, 4), diagonal_177210, (int_177211, result_add_177209))
    
    # Assigning a Num to a Subscript (line 247):
    
    # Assigning a Num to a Subscript (line 247):
    int_177212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, 19), 'int')
    # Getting the type of 'diagonal' (line 247)
    diagonal_177213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 4), 'diagonal')
    int_177214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, 13), 'int')
    # Storing an element on a container (line 247)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 247, 4), diagonal_177213, (int_177214, int_177212))
    
    # Assigning a BinOp to a Subscript (line 248):
    
    # Assigning a BinOp to a Subscript (line 248):
    int_177215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 21), 'int')
    int_177216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 27), 'int')
    
    # Obtaining the type of the subscript
    int_177217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 36), 'int')
    int_177218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 38), 'int')
    slice_177219 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 248, 34), int_177217, int_177218, None)
    # Getting the type of 'x' (line 248)
    x_177220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 34), 'x')
    # Obtaining the member '__getitem__' of a type (line 248)
    getitem___177221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 248, 34), x_177220, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 248)
    subscript_call_result_177222 = invoke(stypy.reporting.localization.Localization(__file__, 248, 34), getitem___177221, slice_177219)
    
    int_177223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 43), 'int')
    # Applying the binary operator '**' (line 248)
    result_pow_177224 = python_operator(stypy.reporting.localization.Localization(__file__, 248, 34), '**', subscript_call_result_177222, int_177223)
    
    # Applying the binary operator '*' (line 248)
    result_mul_177225 = python_operator(stypy.reporting.localization.Localization(__file__, 248, 27), '*', int_177216, result_pow_177224)
    
    # Applying the binary operator '+' (line 248)
    result_add_177226 = python_operator(stypy.reporting.localization.Localization(__file__, 248, 21), '+', int_177215, result_mul_177225)
    
    int_177227 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 47), 'int')
    
    # Obtaining the type of the subscript
    int_177228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 55), 'int')
    slice_177229 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 248, 53), int_177228, None, None)
    # Getting the type of 'x' (line 248)
    x_177230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 53), 'x')
    # Obtaining the member '__getitem__' of a type (line 248)
    getitem___177231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 248, 53), x_177230, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 248)
    subscript_call_result_177232 = invoke(stypy.reporting.localization.Localization(__file__, 248, 53), getitem___177231, slice_177229)
    
    # Applying the binary operator '*' (line 248)
    result_mul_177233 = python_operator(stypy.reporting.localization.Localization(__file__, 248, 47), '*', int_177227, subscript_call_result_177232)
    
    # Applying the binary operator '-' (line 248)
    result_sub_177234 = python_operator(stypy.reporting.localization.Localization(__file__, 248, 45), '-', result_add_177226, result_mul_177233)
    
    # Getting the type of 'diagonal' (line 248)
    diagonal_177235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 4), 'diagonal')
    int_177236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 13), 'int')
    int_177237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 15), 'int')
    slice_177238 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 248, 4), int_177236, int_177237, None)
    # Storing an element on a container (line 248)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 248, 4), diagonal_177235, (slice_177238, result_sub_177234))
    
    # Assigning a BinOp to a Name (line 249):
    
    # Assigning a BinOp to a Name (line 249):
    # Getting the type of 'H' (line 249)
    H_177239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 8), 'H')
    
    # Call to diag(...): (line 249)
    # Processing the call arguments (line 249)
    # Getting the type of 'diagonal' (line 249)
    diagonal_177242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 23), 'diagonal', False)
    # Processing the call keyword arguments (line 249)
    kwargs_177243 = {}
    # Getting the type of 'numpy' (line 249)
    numpy_177240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 12), 'numpy', False)
    # Obtaining the member 'diag' of a type (line 249)
    diag_177241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 249, 12), numpy_177240, 'diag')
    # Calling diag(args, kwargs) (line 249)
    diag_call_result_177244 = invoke(stypy.reporting.localization.Localization(__file__, 249, 12), diag_177241, *[diagonal_177242], **kwargs_177243)
    
    # Applying the binary operator '+' (line 249)
    result_add_177245 = python_operator(stypy.reporting.localization.Localization(__file__, 249, 8), '+', H_177239, diag_call_result_177244)
    
    # Assigning a type to the variable 'H' (line 249)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 249, 4), 'H', result_add_177245)
    # Getting the type of 'H' (line 250)
    H_177246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 11), 'H')
    # Assigning a type to the variable 'stypy_return_type' (line 250)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 250, 4), 'stypy_return_type', H_177246)
    
    # ################# End of 'rosen_hess(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rosen_hess' in the type store
    # Getting the type of 'stypy_return_type' (line 224)
    stypy_return_type_177247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_177247)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rosen_hess'
    return stypy_return_type_177247

# Assigning a type to the variable 'rosen_hess' (line 224)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 224, 0), 'rosen_hess', rosen_hess)

@norecursion
def rosen_hess_prod(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'rosen_hess_prod'
    module_type_store = module_type_store.open_function_context('rosen_hess_prod', 253, 0, False)
    
    # Passed parameters checking function
    rosen_hess_prod.stypy_localization = localization
    rosen_hess_prod.stypy_type_of_self = None
    rosen_hess_prod.stypy_type_store = module_type_store
    rosen_hess_prod.stypy_function_name = 'rosen_hess_prod'
    rosen_hess_prod.stypy_param_names_list = ['x', 'p']
    rosen_hess_prod.stypy_varargs_param_name = None
    rosen_hess_prod.stypy_kwargs_param_name = None
    rosen_hess_prod.stypy_call_defaults = defaults
    rosen_hess_prod.stypy_call_varargs = varargs
    rosen_hess_prod.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rosen_hess_prod', ['x', 'p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rosen_hess_prod', localization, ['x', 'p'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rosen_hess_prod(...)' code ##################

    str_177248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 274, (-1)), 'str', '\n    Product of the Hessian matrix of the Rosenbrock function with a vector.\n\n    Parameters\n    ----------\n    x : array_like\n        1-D array of points at which the Hessian matrix is to be computed.\n    p : array_like\n        1-D array, the vector to be multiplied by the Hessian matrix.\n\n    Returns\n    -------\n    rosen_hess_prod : ndarray\n        The Hessian matrix of the Rosenbrock function at `x` multiplied\n        by the vector `p`.\n\n    See Also\n    --------\n    rosen, rosen_der, rosen_hess\n\n    ')
    
    # Assigning a Call to a Name (line 275):
    
    # Assigning a Call to a Name (line 275):
    
    # Call to atleast_1d(...): (line 275)
    # Processing the call arguments (line 275)
    # Getting the type of 'x' (line 275)
    x_177250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 19), 'x', False)
    # Processing the call keyword arguments (line 275)
    kwargs_177251 = {}
    # Getting the type of 'atleast_1d' (line 275)
    atleast_1d_177249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 275)
    atleast_1d_call_result_177252 = invoke(stypy.reporting.localization.Localization(__file__, 275, 8), atleast_1d_177249, *[x_177250], **kwargs_177251)
    
    # Assigning a type to the variable 'x' (line 275)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 275, 4), 'x', atleast_1d_call_result_177252)
    
    # Assigning a Call to a Name (line 276):
    
    # Assigning a Call to a Name (line 276):
    
    # Call to zeros(...): (line 276)
    # Processing the call arguments (line 276)
    
    # Call to len(...): (line 276)
    # Processing the call arguments (line 276)
    # Getting the type of 'x' (line 276)
    x_177256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 25), 'x', False)
    # Processing the call keyword arguments (line 276)
    kwargs_177257 = {}
    # Getting the type of 'len' (line 276)
    len_177255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 21), 'len', False)
    # Calling len(args, kwargs) (line 276)
    len_call_result_177258 = invoke(stypy.reporting.localization.Localization(__file__, 276, 21), len_177255, *[x_177256], **kwargs_177257)
    
    # Processing the call keyword arguments (line 276)
    # Getting the type of 'x' (line 276)
    x_177259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 35), 'x', False)
    # Obtaining the member 'dtype' of a type (line 276)
    dtype_177260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 276, 35), x_177259, 'dtype')
    keyword_177261 = dtype_177260
    kwargs_177262 = {'dtype': keyword_177261}
    # Getting the type of 'numpy' (line 276)
    numpy_177253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 9), 'numpy', False)
    # Obtaining the member 'zeros' of a type (line 276)
    zeros_177254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 276, 9), numpy_177253, 'zeros')
    # Calling zeros(args, kwargs) (line 276)
    zeros_call_result_177263 = invoke(stypy.reporting.localization.Localization(__file__, 276, 9), zeros_177254, *[len_call_result_177258], **kwargs_177262)
    
    # Assigning a type to the variable 'Hp' (line 276)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 4), 'Hp', zeros_call_result_177263)
    
    # Assigning a BinOp to a Subscript (line 277):
    
    # Assigning a BinOp to a Subscript (line 277):
    int_177264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 13), 'int')
    
    # Obtaining the type of the subscript
    int_177265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 22), 'int')
    # Getting the type of 'x' (line 277)
    x_177266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 20), 'x')
    # Obtaining the member '__getitem__' of a type (line 277)
    getitem___177267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 20), x_177266, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 277)
    subscript_call_result_177268 = invoke(stypy.reporting.localization.Localization(__file__, 277, 20), getitem___177267, int_177265)
    
    int_177269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 26), 'int')
    # Applying the binary operator '**' (line 277)
    result_pow_177270 = python_operator(stypy.reporting.localization.Localization(__file__, 277, 20), '**', subscript_call_result_177268, int_177269)
    
    # Applying the binary operator '*' (line 277)
    result_mul_177271 = python_operator(stypy.reporting.localization.Localization(__file__, 277, 13), '*', int_177264, result_pow_177270)
    
    int_177272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 30), 'int')
    
    # Obtaining the type of the subscript
    int_177273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 38), 'int')
    # Getting the type of 'x' (line 277)
    x_177274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 36), 'x')
    # Obtaining the member '__getitem__' of a type (line 277)
    getitem___177275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 36), x_177274, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 277)
    subscript_call_result_177276 = invoke(stypy.reporting.localization.Localization(__file__, 277, 36), getitem___177275, int_177273)
    
    # Applying the binary operator '*' (line 277)
    result_mul_177277 = python_operator(stypy.reporting.localization.Localization(__file__, 277, 30), '*', int_177272, subscript_call_result_177276)
    
    # Applying the binary operator '-' (line 277)
    result_sub_177278 = python_operator(stypy.reporting.localization.Localization(__file__, 277, 13), '-', result_mul_177271, result_mul_177277)
    
    int_177279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 43), 'int')
    # Applying the binary operator '+' (line 277)
    result_add_177280 = python_operator(stypy.reporting.localization.Localization(__file__, 277, 41), '+', result_sub_177278, int_177279)
    
    
    # Obtaining the type of the subscript
    int_177281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 50), 'int')
    # Getting the type of 'p' (line 277)
    p_177282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 48), 'p')
    # Obtaining the member '__getitem__' of a type (line 277)
    getitem___177283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 48), p_177282, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 277)
    subscript_call_result_177284 = invoke(stypy.reporting.localization.Localization(__file__, 277, 48), getitem___177283, int_177281)
    
    # Applying the binary operator '*' (line 277)
    result_mul_177285 = python_operator(stypy.reporting.localization.Localization(__file__, 277, 12), '*', result_add_177280, subscript_call_result_177284)
    
    int_177286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 55), 'int')
    
    # Obtaining the type of the subscript
    int_177287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 63), 'int')
    # Getting the type of 'x' (line 277)
    x_177288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 61), 'x')
    # Obtaining the member '__getitem__' of a type (line 277)
    getitem___177289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 61), x_177288, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 277)
    subscript_call_result_177290 = invoke(stypy.reporting.localization.Localization(__file__, 277, 61), getitem___177289, int_177287)
    
    # Applying the binary operator '*' (line 277)
    result_mul_177291 = python_operator(stypy.reporting.localization.Localization(__file__, 277, 55), '*', int_177286, subscript_call_result_177290)
    
    
    # Obtaining the type of the subscript
    int_177292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 70), 'int')
    # Getting the type of 'p' (line 277)
    p_177293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 68), 'p')
    # Obtaining the member '__getitem__' of a type (line 277)
    getitem___177294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 68), p_177293, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 277)
    subscript_call_result_177295 = invoke(stypy.reporting.localization.Localization(__file__, 277, 68), getitem___177294, int_177292)
    
    # Applying the binary operator '*' (line 277)
    result_mul_177296 = python_operator(stypy.reporting.localization.Localization(__file__, 277, 66), '*', result_mul_177291, subscript_call_result_177295)
    
    # Applying the binary operator '-' (line 277)
    result_sub_177297 = python_operator(stypy.reporting.localization.Localization(__file__, 277, 12), '-', result_mul_177285, result_mul_177296)
    
    # Getting the type of 'Hp' (line 277)
    Hp_177298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 4), 'Hp')
    int_177299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 7), 'int')
    # Storing an element on a container (line 277)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 277, 4), Hp_177298, (int_177299, result_sub_177297))
    
    # Assigning a BinOp to a Subscript (line 278):
    
    # Assigning a BinOp to a Subscript (line 278):
    int_177300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 278, 16), 'int')
    
    # Obtaining the type of the subscript
    int_177301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 278, 26), 'int')
    slice_177302 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 278, 23), None, int_177301, None)
    # Getting the type of 'x' (line 278)
    x_177303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 23), 'x')
    # Obtaining the member '__getitem__' of a type (line 278)
    getitem___177304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 278, 23), x_177303, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 278)
    subscript_call_result_177305 = invoke(stypy.reporting.localization.Localization(__file__, 278, 23), getitem___177304, slice_177302)
    
    # Applying the binary operator '*' (line 278)
    result_mul_177306 = python_operator(stypy.reporting.localization.Localization(__file__, 278, 16), '*', int_177300, subscript_call_result_177305)
    
    
    # Obtaining the type of the subscript
    int_177307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 278, 35), 'int')
    slice_177308 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 278, 32), None, int_177307, None)
    # Getting the type of 'p' (line 278)
    p_177309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 32), 'p')
    # Obtaining the member '__getitem__' of a type (line 278)
    getitem___177310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 278, 32), p_177309, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 278)
    subscript_call_result_177311 = invoke(stypy.reporting.localization.Localization(__file__, 278, 32), getitem___177310, slice_177308)
    
    # Applying the binary operator '*' (line 278)
    result_mul_177312 = python_operator(stypy.reporting.localization.Localization(__file__, 278, 30), '*', result_mul_177306, subscript_call_result_177311)
    
    int_177313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 17), 'int')
    int_177314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 23), 'int')
    
    # Obtaining the type of the subscript
    int_177315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 32), 'int')
    int_177316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 34), 'int')
    slice_177317 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 279, 30), int_177315, int_177316, None)
    # Getting the type of 'x' (line 279)
    x_177318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 30), 'x')
    # Obtaining the member '__getitem__' of a type (line 279)
    getitem___177319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 279, 30), x_177318, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 279)
    subscript_call_result_177320 = invoke(stypy.reporting.localization.Localization(__file__, 279, 30), getitem___177319, slice_177317)
    
    int_177321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 39), 'int')
    # Applying the binary operator '**' (line 279)
    result_pow_177322 = python_operator(stypy.reporting.localization.Localization(__file__, 279, 30), '**', subscript_call_result_177320, int_177321)
    
    # Applying the binary operator '*' (line 279)
    result_mul_177323 = python_operator(stypy.reporting.localization.Localization(__file__, 279, 23), '*', int_177314, result_pow_177322)
    
    # Applying the binary operator '+' (line 279)
    result_add_177324 = python_operator(stypy.reporting.localization.Localization(__file__, 279, 17), '+', int_177313, result_mul_177323)
    
    int_177325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 43), 'int')
    
    # Obtaining the type of the subscript
    int_177326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 51), 'int')
    slice_177327 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 279, 49), int_177326, None, None)
    # Getting the type of 'x' (line 279)
    x_177328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 49), 'x')
    # Obtaining the member '__getitem__' of a type (line 279)
    getitem___177329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 279, 49), x_177328, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 279)
    subscript_call_result_177330 = invoke(stypy.reporting.localization.Localization(__file__, 279, 49), getitem___177329, slice_177327)
    
    # Applying the binary operator '*' (line 279)
    result_mul_177331 = python_operator(stypy.reporting.localization.Localization(__file__, 279, 43), '*', int_177325, subscript_call_result_177330)
    
    # Applying the binary operator '-' (line 279)
    result_sub_177332 = python_operator(stypy.reporting.localization.Localization(__file__, 279, 41), '-', result_add_177324, result_mul_177331)
    
    
    # Obtaining the type of the subscript
    int_177333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 60), 'int')
    int_177334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 62), 'int')
    slice_177335 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 279, 58), int_177333, int_177334, None)
    # Getting the type of 'p' (line 279)
    p_177336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 58), 'p')
    # Obtaining the member '__getitem__' of a type (line 279)
    getitem___177337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 279, 58), p_177336, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 279)
    subscript_call_result_177338 = invoke(stypy.reporting.localization.Localization(__file__, 279, 58), getitem___177337, slice_177335)
    
    # Applying the binary operator '*' (line 279)
    result_mul_177339 = python_operator(stypy.reporting.localization.Localization(__file__, 279, 16), '*', result_sub_177332, subscript_call_result_177338)
    
    # Applying the binary operator '+' (line 278)
    result_add_177340 = python_operator(stypy.reporting.localization.Localization(__file__, 278, 16), '+', result_mul_177312, result_mul_177339)
    
    int_177341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 280, 16), 'int')
    
    # Obtaining the type of the subscript
    int_177342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 280, 24), 'int')
    int_177343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 280, 26), 'int')
    slice_177344 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 280, 22), int_177342, int_177343, None)
    # Getting the type of 'x' (line 280)
    x_177345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 22), 'x')
    # Obtaining the member '__getitem__' of a type (line 280)
    getitem___177346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 280, 22), x_177345, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 280)
    subscript_call_result_177347 = invoke(stypy.reporting.localization.Localization(__file__, 280, 22), getitem___177346, slice_177344)
    
    # Applying the binary operator '*' (line 280)
    result_mul_177348 = python_operator(stypy.reporting.localization.Localization(__file__, 280, 16), '*', int_177341, subscript_call_result_177347)
    
    
    # Obtaining the type of the subscript
    int_177349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 280, 34), 'int')
    slice_177350 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 280, 32), int_177349, None, None)
    # Getting the type of 'p' (line 280)
    p_177351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 32), 'p')
    # Obtaining the member '__getitem__' of a type (line 280)
    getitem___177352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 280, 32), p_177351, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 280)
    subscript_call_result_177353 = invoke(stypy.reporting.localization.Localization(__file__, 280, 32), getitem___177352, slice_177350)
    
    # Applying the binary operator '*' (line 280)
    result_mul_177354 = python_operator(stypy.reporting.localization.Localization(__file__, 280, 30), '*', result_mul_177348, subscript_call_result_177353)
    
    # Applying the binary operator '-' (line 279)
    result_sub_177355 = python_operator(stypy.reporting.localization.Localization(__file__, 279, 66), '-', result_add_177340, result_mul_177354)
    
    # Getting the type of 'Hp' (line 278)
    Hp_177356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 4), 'Hp')
    int_177357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 278, 7), 'int')
    int_177358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 278, 9), 'int')
    slice_177359 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 278, 4), int_177357, int_177358, None)
    # Storing an element on a container (line 278)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 278, 4), Hp_177356, (slice_177359, result_sub_177355))
    
    # Assigning a BinOp to a Subscript (line 281):
    
    # Assigning a BinOp to a Subscript (line 281):
    int_177360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 281, 13), 'int')
    
    # Obtaining the type of the subscript
    int_177361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 281, 22), 'int')
    # Getting the type of 'x' (line 281)
    x_177362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 20), 'x')
    # Obtaining the member '__getitem__' of a type (line 281)
    getitem___177363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 281, 20), x_177362, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 281)
    subscript_call_result_177364 = invoke(stypy.reporting.localization.Localization(__file__, 281, 20), getitem___177363, int_177361)
    
    # Applying the binary operator '*' (line 281)
    result_mul_177365 = python_operator(stypy.reporting.localization.Localization(__file__, 281, 13), '*', int_177360, subscript_call_result_177364)
    
    
    # Obtaining the type of the subscript
    int_177366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 281, 30), 'int')
    # Getting the type of 'p' (line 281)
    p_177367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 28), 'p')
    # Obtaining the member '__getitem__' of a type (line 281)
    getitem___177368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 281, 28), p_177367, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 281)
    subscript_call_result_177369 = invoke(stypy.reporting.localization.Localization(__file__, 281, 28), getitem___177368, int_177366)
    
    # Applying the binary operator '*' (line 281)
    result_mul_177370 = python_operator(stypy.reporting.localization.Localization(__file__, 281, 26), '*', result_mul_177365, subscript_call_result_177369)
    
    int_177371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 281, 36), 'int')
    
    # Obtaining the type of the subscript
    int_177372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 281, 42), 'int')
    # Getting the type of 'p' (line 281)
    p_177373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 40), 'p')
    # Obtaining the member '__getitem__' of a type (line 281)
    getitem___177374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 281, 40), p_177373, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 281)
    subscript_call_result_177375 = invoke(stypy.reporting.localization.Localization(__file__, 281, 40), getitem___177374, int_177372)
    
    # Applying the binary operator '*' (line 281)
    result_mul_177376 = python_operator(stypy.reporting.localization.Localization(__file__, 281, 36), '*', int_177371, subscript_call_result_177375)
    
    # Applying the binary operator '+' (line 281)
    result_add_177377 = python_operator(stypy.reporting.localization.Localization(__file__, 281, 13), '+', result_mul_177370, result_mul_177376)
    
    # Getting the type of 'Hp' (line 281)
    Hp_177378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 4), 'Hp')
    int_177379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 281, 7), 'int')
    # Storing an element on a container (line 281)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 281, 4), Hp_177378, (int_177379, result_add_177377))
    # Getting the type of 'Hp' (line 282)
    Hp_177380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 11), 'Hp')
    # Assigning a type to the variable 'stypy_return_type' (line 282)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 282, 4), 'stypy_return_type', Hp_177380)
    
    # ################# End of 'rosen_hess_prod(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rosen_hess_prod' in the type store
    # Getting the type of 'stypy_return_type' (line 253)
    stypy_return_type_177381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_177381)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rosen_hess_prod'
    return stypy_return_type_177381

# Assigning a type to the variable 'rosen_hess_prod' (line 253)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 253, 0), 'rosen_hess_prod', rosen_hess_prod)

@norecursion
def wrap_function(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'wrap_function'
    module_type_store = module_type_store.open_function_context('wrap_function', 285, 0, False)
    
    # Passed parameters checking function
    wrap_function.stypy_localization = localization
    wrap_function.stypy_type_of_self = None
    wrap_function.stypy_type_store = module_type_store
    wrap_function.stypy_function_name = 'wrap_function'
    wrap_function.stypy_param_names_list = ['function', 'args']
    wrap_function.stypy_varargs_param_name = None
    wrap_function.stypy_kwargs_param_name = None
    wrap_function.stypy_call_defaults = defaults
    wrap_function.stypy_call_varargs = varargs
    wrap_function.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'wrap_function', ['function', 'args'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'wrap_function', localization, ['function', 'args'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'wrap_function(...)' code ##################

    
    # Assigning a List to a Name (line 286):
    
    # Assigning a List to a Name (line 286):
    
    # Obtaining an instance of the builtin type 'list' (line 286)
    list_177382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 286, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 286)
    # Adding element type (line 286)
    int_177383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 286, 14), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 286, 13), list_177382, int_177383)
    
    # Assigning a type to the variable 'ncalls' (line 286)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 4), 'ncalls', list_177382)
    
    # Type idiom detected: calculating its left and rigth part (line 287)
    # Getting the type of 'function' (line 287)
    function_177384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 7), 'function')
    # Getting the type of 'None' (line 287)
    None_177385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 19), 'None')
    
    (may_be_177386, more_types_in_union_177387) = may_be_none(function_177384, None_177385)

    if may_be_177386:

        if more_types_in_union_177387:
            # Runtime conditional SSA (line 287)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Obtaining an instance of the builtin type 'tuple' (line 288)
        tuple_177388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 288, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 288)
        # Adding element type (line 288)
        # Getting the type of 'ncalls' (line 288)
        ncalls_177389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 15), 'ncalls')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 288, 15), tuple_177388, ncalls_177389)
        # Adding element type (line 288)
        # Getting the type of 'None' (line 288)
        None_177390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 23), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 288, 15), tuple_177388, None_177390)
        
        # Assigning a type to the variable 'stypy_return_type' (line 288)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 288, 8), 'stypy_return_type', tuple_177388)

        if more_types_in_union_177387:
            # SSA join for if statement (line 287)
            module_type_store = module_type_store.join_ssa_context()


    

    @norecursion
    def function_wrapper(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'function_wrapper'
        module_type_store = module_type_store.open_function_context('function_wrapper', 290, 4, False)
        
        # Passed parameters checking function
        function_wrapper.stypy_localization = localization
        function_wrapper.stypy_type_of_self = None
        function_wrapper.stypy_type_store = module_type_store
        function_wrapper.stypy_function_name = 'function_wrapper'
        function_wrapper.stypy_param_names_list = []
        function_wrapper.stypy_varargs_param_name = 'wrapper_args'
        function_wrapper.stypy_kwargs_param_name = None
        function_wrapper.stypy_call_defaults = defaults
        function_wrapper.stypy_call_varargs = varargs
        function_wrapper.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'function_wrapper', [], 'wrapper_args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'function_wrapper', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'function_wrapper(...)' code ##################

        
        # Getting the type of 'ncalls' (line 291)
        ncalls_177391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 8), 'ncalls')
        
        # Obtaining the type of the subscript
        int_177392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 291, 15), 'int')
        # Getting the type of 'ncalls' (line 291)
        ncalls_177393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 8), 'ncalls')
        # Obtaining the member '__getitem__' of a type (line 291)
        getitem___177394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 291, 8), ncalls_177393, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 291)
        subscript_call_result_177395 = invoke(stypy.reporting.localization.Localization(__file__, 291, 8), getitem___177394, int_177392)
        
        int_177396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 291, 21), 'int')
        # Applying the binary operator '+=' (line 291)
        result_iadd_177397 = python_operator(stypy.reporting.localization.Localization(__file__, 291, 8), '+=', subscript_call_result_177395, int_177396)
        # Getting the type of 'ncalls' (line 291)
        ncalls_177398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 8), 'ncalls')
        int_177399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 291, 15), 'int')
        # Storing an element on a container (line 291)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 291, 8), ncalls_177398, (int_177399, result_iadd_177397))
        
        
        # Call to function(...): (line 292)
        # Getting the type of 'wrapper_args' (line 292)
        wrapper_args_177401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 26), 'wrapper_args', False)
        # Getting the type of 'args' (line 292)
        args_177402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 41), 'args', False)
        # Applying the binary operator '+' (line 292)
        result_add_177403 = python_operator(stypy.reporting.localization.Localization(__file__, 292, 26), '+', wrapper_args_177401, args_177402)
        
        # Processing the call keyword arguments (line 292)
        kwargs_177404 = {}
        # Getting the type of 'function' (line 292)
        function_177400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 15), 'function', False)
        # Calling function(args, kwargs) (line 292)
        function_call_result_177405 = invoke(stypy.reporting.localization.Localization(__file__, 292, 15), function_177400, *[result_add_177403], **kwargs_177404)
        
        # Assigning a type to the variable 'stypy_return_type' (line 292)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 292, 8), 'stypy_return_type', function_call_result_177405)
        
        # ################# End of 'function_wrapper(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'function_wrapper' in the type store
        # Getting the type of 'stypy_return_type' (line 290)
        stypy_return_type_177406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_177406)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'function_wrapper'
        return stypy_return_type_177406

    # Assigning a type to the variable 'function_wrapper' (line 290)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 290, 4), 'function_wrapper', function_wrapper)
    
    # Obtaining an instance of the builtin type 'tuple' (line 294)
    tuple_177407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 294, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 294)
    # Adding element type (line 294)
    # Getting the type of 'ncalls' (line 294)
    ncalls_177408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 11), 'ncalls')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 294, 11), tuple_177407, ncalls_177408)
    # Adding element type (line 294)
    # Getting the type of 'function_wrapper' (line 294)
    function_wrapper_177409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 19), 'function_wrapper')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 294, 11), tuple_177407, function_wrapper_177409)
    
    # Assigning a type to the variable 'stypy_return_type' (line 294)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 294, 4), 'stypy_return_type', tuple_177407)
    
    # ################# End of 'wrap_function(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'wrap_function' in the type store
    # Getting the type of 'stypy_return_type' (line 285)
    stypy_return_type_177410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_177410)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'wrap_function'
    return stypy_return_type_177410

# Assigning a type to the variable 'wrap_function' (line 285)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 285, 0), 'wrap_function', wrap_function)

@norecursion
def fmin(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 297)
    tuple_177411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 297, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 297)
    
    float_177412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 297, 33), 'float')
    float_177413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 297, 44), 'float')
    # Getting the type of 'None' (line 297)
    None_177414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 58), 'None')
    # Getting the type of 'None' (line 297)
    None_177415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 71), 'None')
    int_177416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 298, 21), 'int')
    int_177417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 298, 29), 'int')
    int_177418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 298, 39), 'int')
    # Getting the type of 'None' (line 298)
    None_177419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 51), 'None')
    # Getting the type of 'None' (line 298)
    None_177420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 73), 'None')
    defaults = [tuple_177411, float_177412, float_177413, None_177414, None_177415, int_177416, int_177417, int_177418, None_177419, None_177420]
    # Create a new context for function 'fmin'
    module_type_store = module_type_store.open_function_context('fmin', 297, 0, False)
    
    # Passed parameters checking function
    fmin.stypy_localization = localization
    fmin.stypy_type_of_self = None
    fmin.stypy_type_store = module_type_store
    fmin.stypy_function_name = 'fmin'
    fmin.stypy_param_names_list = ['func', 'x0', 'args', 'xtol', 'ftol', 'maxiter', 'maxfun', 'full_output', 'disp', 'retall', 'callback', 'initial_simplex']
    fmin.stypy_varargs_param_name = None
    fmin.stypy_kwargs_param_name = None
    fmin.stypy_call_defaults = defaults
    fmin.stypy_call_varargs = varargs
    fmin.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fmin', ['func', 'x0', 'args', 'xtol', 'ftol', 'maxiter', 'maxfun', 'full_output', 'disp', 'retall', 'callback', 'initial_simplex'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fmin', localization, ['func', 'x0', 'args', 'xtol', 'ftol', 'maxiter', 'maxfun', 'full_output', 'disp', 'retall', 'callback', 'initial_simplex'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fmin(...)' code ##################

    str_177421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 399, (-1)), 'str', '\n    Minimize a function using the downhill simplex algorithm.\n\n    This algorithm only uses function values, not derivatives or second\n    derivatives.\n\n    Parameters\n    ----------\n    func : callable func(x,*args)\n        The objective function to be minimized.\n    x0 : ndarray\n        Initial guess.\n    args : tuple, optional\n        Extra arguments passed to func, i.e. ``f(x,*args)``.\n    xtol : float, optional\n        Absolute error in xopt between iterations that is acceptable for\n        convergence.\n    ftol : number, optional\n        Absolute error in func(xopt) between iterations that is acceptable for\n        convergence.\n    maxiter : int, optional\n        Maximum number of iterations to perform.\n    maxfun : number, optional\n        Maximum number of function evaluations to make.\n    full_output : bool, optional\n        Set to True if fopt and warnflag outputs are desired.\n    disp : bool, optional\n        Set to True to print convergence messages.\n    retall : bool, optional\n        Set to True to return list of solutions at each iteration.\n    callback : callable, optional\n        Called after each iteration, as callback(xk), where xk is the\n        current parameter vector.\n    initial_simplex : array_like of shape (N + 1, N), optional\n        Initial simplex. If given, overrides `x0`.\n        ``initial_simplex[j,:]`` should contain the coordinates of\n        the j-th vertex of the ``N+1`` vertices in the simplex, where\n        ``N`` is the dimension.\n\n    Returns\n    -------\n    xopt : ndarray\n        Parameter that minimizes function.\n    fopt : float\n        Value of function at minimum: ``fopt = func(xopt)``.\n    iter : int\n        Number of iterations performed.\n    funcalls : int\n        Number of function calls made.\n    warnflag : int\n        1 : Maximum number of function evaluations made.\n        2 : Maximum number of iterations reached.\n    allvecs : list\n        Solution at each iteration.\n\n    See also\n    --------\n    minimize: Interface to minimization algorithms for multivariate\n        functions. See the \'Nelder-Mead\' `method` in particular.\n\n    Notes\n    -----\n    Uses a Nelder-Mead simplex algorithm to find the minimum of function of\n    one or more variables.\n\n    This algorithm has a long history of successful use in applications.\n    But it will usually be slower than an algorithm that uses first or\n    second derivative information. In practice it can have poor\n    performance in high-dimensional problems and is not robust to\n    minimizing complicated functions. Additionally, there currently is no\n    complete theory describing when the algorithm will successfully\n    converge to the minimum, or how fast it will if it does. Both the ftol and\n    xtol criteria must be met for convergence.\n\n    Examples\n    --------\n    >>> def f(x):\n    ...     return x**2\n\n    >>> from scipy import optimize\n\n    >>> minimum = optimize.fmin(f, 1)\n    Optimization terminated successfully.\n             Current function value: 0.000000\n             Iterations: 17\n             Function evaluations: 34\n    >>> minimum[0]\n    -8.8817841970012523e-16\n\n    References\n    ----------\n    .. [1] Nelder, J.A. and Mead, R. (1965), "A simplex method for function\n           minimization", The Computer Journal, 7, pp. 308-313\n\n    .. [2] Wright, M.H. (1996), "Direct Search Methods: Once Scorned, Now\n           Respectable", in Numerical Analysis 1995, Proceedings of the\n           1995 Dundee Biennial Conference in Numerical Analysis, D.F.\n           Griffiths and G.A. Watson (Eds.), Addison Wesley Longman,\n           Harlow, UK, pp. 191-208.\n\n    ')
    
    # Assigning a Dict to a Name (line 400):
    
    # Assigning a Dict to a Name (line 400):
    
    # Obtaining an instance of the builtin type 'dict' (line 400)
    dict_177422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 400, 11), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 400)
    # Adding element type (key, value) (line 400)
    str_177423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 400, 12), 'str', 'xatol')
    # Getting the type of 'xtol' (line 400)
    xtol_177424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 21), 'xtol')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 400, 11), dict_177422, (str_177423, xtol_177424))
    # Adding element type (key, value) (line 400)
    str_177425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 401, 12), 'str', 'fatol')
    # Getting the type of 'ftol' (line 401)
    ftol_177426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 21), 'ftol')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 400, 11), dict_177422, (str_177425, ftol_177426))
    # Adding element type (key, value) (line 400)
    str_177427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 402, 12), 'str', 'maxiter')
    # Getting the type of 'maxiter' (line 402)
    maxiter_177428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 23), 'maxiter')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 400, 11), dict_177422, (str_177427, maxiter_177428))
    # Adding element type (key, value) (line 400)
    str_177429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 12), 'str', 'maxfev')
    # Getting the type of 'maxfun' (line 403)
    maxfun_177430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 22), 'maxfun')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 400, 11), dict_177422, (str_177429, maxfun_177430))
    # Adding element type (key, value) (line 400)
    str_177431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 404, 12), 'str', 'disp')
    # Getting the type of 'disp' (line 404)
    disp_177432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 20), 'disp')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 400, 11), dict_177422, (str_177431, disp_177432))
    # Adding element type (key, value) (line 400)
    str_177433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 405, 12), 'str', 'return_all')
    # Getting the type of 'retall' (line 405)
    retall_177434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 26), 'retall')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 400, 11), dict_177422, (str_177433, retall_177434))
    # Adding element type (key, value) (line 400)
    str_177435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 406, 12), 'str', 'initial_simplex')
    # Getting the type of 'initial_simplex' (line 406)
    initial_simplex_177436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 31), 'initial_simplex')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 400, 11), dict_177422, (str_177435, initial_simplex_177436))
    
    # Assigning a type to the variable 'opts' (line 400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 400, 4), 'opts', dict_177422)
    
    # Assigning a Call to a Name (line 408):
    
    # Assigning a Call to a Name (line 408):
    
    # Call to _minimize_neldermead(...): (line 408)
    # Processing the call arguments (line 408)
    # Getting the type of 'func' (line 408)
    func_177438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 31), 'func', False)
    # Getting the type of 'x0' (line 408)
    x0_177439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 37), 'x0', False)
    # Getting the type of 'args' (line 408)
    args_177440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 41), 'args', False)
    # Processing the call keyword arguments (line 408)
    # Getting the type of 'callback' (line 408)
    callback_177441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 56), 'callback', False)
    keyword_177442 = callback_177441
    # Getting the type of 'opts' (line 408)
    opts_177443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 68), 'opts', False)
    kwargs_177444 = {'callback': keyword_177442, 'opts_177443': opts_177443}
    # Getting the type of '_minimize_neldermead' (line 408)
    _minimize_neldermead_177437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 10), '_minimize_neldermead', False)
    # Calling _minimize_neldermead(args, kwargs) (line 408)
    _minimize_neldermead_call_result_177445 = invoke(stypy.reporting.localization.Localization(__file__, 408, 10), _minimize_neldermead_177437, *[func_177438, x0_177439, args_177440], **kwargs_177444)
    
    # Assigning a type to the variable 'res' (line 408)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 408, 4), 'res', _minimize_neldermead_call_result_177445)
    
    # Getting the type of 'full_output' (line 409)
    full_output_177446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 7), 'full_output')
    # Testing the type of an if condition (line 409)
    if_condition_177447 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 409, 4), full_output_177446)
    # Assigning a type to the variable 'if_condition_177447' (line 409)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 409, 4), 'if_condition_177447', if_condition_177447)
    # SSA begins for if statement (line 409)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 410):
    
    # Assigning a Tuple to a Name (line 410):
    
    # Obtaining an instance of the builtin type 'tuple' (line 410)
    tuple_177448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 410, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 410)
    # Adding element type (line 410)
    
    # Obtaining the type of the subscript
    str_177449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 410, 22), 'str', 'x')
    # Getting the type of 'res' (line 410)
    res_177450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 18), 'res')
    # Obtaining the member '__getitem__' of a type (line 410)
    getitem___177451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 18), res_177450, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 410)
    subscript_call_result_177452 = invoke(stypy.reporting.localization.Localization(__file__, 410, 18), getitem___177451, str_177449)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 410, 18), tuple_177448, subscript_call_result_177452)
    # Adding element type (line 410)
    
    # Obtaining the type of the subscript
    str_177453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 410, 32), 'str', 'fun')
    # Getting the type of 'res' (line 410)
    res_177454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 28), 'res')
    # Obtaining the member '__getitem__' of a type (line 410)
    getitem___177455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 28), res_177454, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 410)
    subscript_call_result_177456 = invoke(stypy.reporting.localization.Localization(__file__, 410, 28), getitem___177455, str_177453)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 410, 18), tuple_177448, subscript_call_result_177456)
    # Adding element type (line 410)
    
    # Obtaining the type of the subscript
    str_177457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 410, 44), 'str', 'nit')
    # Getting the type of 'res' (line 410)
    res_177458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 40), 'res')
    # Obtaining the member '__getitem__' of a type (line 410)
    getitem___177459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 40), res_177458, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 410)
    subscript_call_result_177460 = invoke(stypy.reporting.localization.Localization(__file__, 410, 40), getitem___177459, str_177457)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 410, 18), tuple_177448, subscript_call_result_177460)
    # Adding element type (line 410)
    
    # Obtaining the type of the subscript
    str_177461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 410, 56), 'str', 'nfev')
    # Getting the type of 'res' (line 410)
    res_177462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 52), 'res')
    # Obtaining the member '__getitem__' of a type (line 410)
    getitem___177463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 52), res_177462, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 410)
    subscript_call_result_177464 = invoke(stypy.reporting.localization.Localization(__file__, 410, 52), getitem___177463, str_177461)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 410, 18), tuple_177448, subscript_call_result_177464)
    # Adding element type (line 410)
    
    # Obtaining the type of the subscript
    str_177465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 410, 69), 'str', 'status')
    # Getting the type of 'res' (line 410)
    res_177466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 65), 'res')
    # Obtaining the member '__getitem__' of a type (line 410)
    getitem___177467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 65), res_177466, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 410)
    subscript_call_result_177468 = invoke(stypy.reporting.localization.Localization(__file__, 410, 65), getitem___177467, str_177465)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 410, 18), tuple_177448, subscript_call_result_177468)
    
    # Assigning a type to the variable 'retlist' (line 410)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'retlist', tuple_177448)
    
    # Getting the type of 'retall' (line 411)
    retall_177469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 11), 'retall')
    # Testing the type of an if condition (line 411)
    if_condition_177470 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 411, 8), retall_177469)
    # Assigning a type to the variable 'if_condition_177470' (line 411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 8), 'if_condition_177470', if_condition_177470)
    # SSA begins for if statement (line 411)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'retlist' (line 412)
    retlist_177471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 12), 'retlist')
    
    # Obtaining an instance of the builtin type 'tuple' (line 412)
    tuple_177472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 412, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 412)
    # Adding element type (line 412)
    
    # Obtaining the type of the subscript
    str_177473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 412, 28), 'str', 'allvecs')
    # Getting the type of 'res' (line 412)
    res_177474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 24), 'res')
    # Obtaining the member '__getitem__' of a type (line 412)
    getitem___177475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 412, 24), res_177474, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 412)
    subscript_call_result_177476 = invoke(stypy.reporting.localization.Localization(__file__, 412, 24), getitem___177475, str_177473)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 412, 24), tuple_177472, subscript_call_result_177476)
    
    # Applying the binary operator '+=' (line 412)
    result_iadd_177477 = python_operator(stypy.reporting.localization.Localization(__file__, 412, 12), '+=', retlist_177471, tuple_177472)
    # Assigning a type to the variable 'retlist' (line 412)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 12), 'retlist', result_iadd_177477)
    
    # SSA join for if statement (line 411)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'retlist' (line 413)
    retlist_177478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 15), 'retlist')
    # Assigning a type to the variable 'stypy_return_type' (line 413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 413, 8), 'stypy_return_type', retlist_177478)
    # SSA branch for the else part of an if statement (line 409)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'retall' (line 415)
    retall_177479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 11), 'retall')
    # Testing the type of an if condition (line 415)
    if_condition_177480 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 415, 8), retall_177479)
    # Assigning a type to the variable 'if_condition_177480' (line 415)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 415, 8), 'if_condition_177480', if_condition_177480)
    # SSA begins for if statement (line 415)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 416)
    tuple_177481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 416, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 416)
    # Adding element type (line 416)
    
    # Obtaining the type of the subscript
    str_177482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 416, 23), 'str', 'x')
    # Getting the type of 'res' (line 416)
    res_177483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 19), 'res')
    # Obtaining the member '__getitem__' of a type (line 416)
    getitem___177484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 416, 19), res_177483, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 416)
    subscript_call_result_177485 = invoke(stypy.reporting.localization.Localization(__file__, 416, 19), getitem___177484, str_177482)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 416, 19), tuple_177481, subscript_call_result_177485)
    # Adding element type (line 416)
    
    # Obtaining the type of the subscript
    str_177486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 416, 33), 'str', 'allvecs')
    # Getting the type of 'res' (line 416)
    res_177487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 29), 'res')
    # Obtaining the member '__getitem__' of a type (line 416)
    getitem___177488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 416, 29), res_177487, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 416)
    subscript_call_result_177489 = invoke(stypy.reporting.localization.Localization(__file__, 416, 29), getitem___177488, str_177486)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 416, 19), tuple_177481, subscript_call_result_177489)
    
    # Assigning a type to the variable 'stypy_return_type' (line 416)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 416, 12), 'stypy_return_type', tuple_177481)
    # SSA branch for the else part of an if statement (line 415)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining the type of the subscript
    str_177490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 23), 'str', 'x')
    # Getting the type of 'res' (line 418)
    res_177491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 19), 'res')
    # Obtaining the member '__getitem__' of a type (line 418)
    getitem___177492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 418, 19), res_177491, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 418)
    subscript_call_result_177493 = invoke(stypy.reporting.localization.Localization(__file__, 418, 19), getitem___177492, str_177490)
    
    # Assigning a type to the variable 'stypy_return_type' (line 418)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 418, 12), 'stypy_return_type', subscript_call_result_177493)
    # SSA join for if statement (line 415)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 409)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'fmin(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fmin' in the type store
    # Getting the type of 'stypy_return_type' (line 297)
    stypy_return_type_177494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_177494)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fmin'
    return stypy_return_type_177494

# Assigning a type to the variable 'fmin' (line 297)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 0), 'fmin', fmin)

@norecursion
def _minimize_neldermead(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 421)
    tuple_177495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 421, 40), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 421)
    
    # Getting the type of 'None' (line 421)
    None_177496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 53), 'None')
    # Getting the type of 'None' (line 422)
    None_177497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 33), 'None')
    # Getting the type of 'None' (line 422)
    None_177498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 46), 'None')
    # Getting the type of 'False' (line 422)
    False_177499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 57), 'False')
    # Getting the type of 'False' (line 423)
    False_177500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 36), 'False')
    # Getting the type of 'None' (line 423)
    None_177501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 59), 'None')
    float_177502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 424, 31), 'float')
    float_177503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 424, 43), 'float')
    defaults = [tuple_177495, None_177496, None_177497, None_177498, False_177499, False_177500, None_177501, float_177502, float_177503]
    # Create a new context for function '_minimize_neldermead'
    module_type_store = module_type_store.open_function_context('_minimize_neldermead', 421, 0, False)
    
    # Passed parameters checking function
    _minimize_neldermead.stypy_localization = localization
    _minimize_neldermead.stypy_type_of_self = None
    _minimize_neldermead.stypy_type_store = module_type_store
    _minimize_neldermead.stypy_function_name = '_minimize_neldermead'
    _minimize_neldermead.stypy_param_names_list = ['func', 'x0', 'args', 'callback', 'maxiter', 'maxfev', 'disp', 'return_all', 'initial_simplex', 'xatol', 'fatol']
    _minimize_neldermead.stypy_varargs_param_name = None
    _minimize_neldermead.stypy_kwargs_param_name = 'unknown_options'
    _minimize_neldermead.stypy_call_defaults = defaults
    _minimize_neldermead.stypy_call_varargs = varargs
    _minimize_neldermead.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_minimize_neldermead', ['func', 'x0', 'args', 'callback', 'maxiter', 'maxfev', 'disp', 'return_all', 'initial_simplex', 'xatol', 'fatol'], None, 'unknown_options', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_minimize_neldermead', localization, ['func', 'x0', 'args', 'callback', 'maxiter', 'maxfev', 'disp', 'return_all', 'initial_simplex', 'xatol', 'fatol'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_minimize_neldermead(...)' code ##################

    str_177504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 451, (-1)), 'str', '\n    Minimization of scalar function of one or more variables using the\n    Nelder-Mead algorithm.\n\n    Options\n    -------\n    disp : bool\n        Set to True to print convergence messages.\n    maxiter, maxfev : int\n        Maximum allowed number of iterations and function evaluations.\n        Will default to ``N*200``, where ``N`` is the number of\n        variables, if neither `maxiter` or `maxfev` is set. If both\n        `maxiter` and `maxfev` are set, minimization will stop at the\n        first reached.\n    initial_simplex : array_like of shape (N + 1, N)\n        Initial simplex. If given, overrides `x0`.\n        ``initial_simplex[j,:]`` should contain the coordinates of\n        the j-th vertex of the ``N+1`` vertices in the simplex, where\n        ``N`` is the dimension.\n    xatol : float, optional\n        Absolute error in xopt between iterations that is acceptable for\n        convergence.\n    fatol : number, optional\n        Absolute error in func(xopt) between iterations that is acceptable for\n        convergence.\n\n    ')
    
    
    str_177505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 452, 7), 'str', 'ftol')
    # Getting the type of 'unknown_options' (line 452)
    unknown_options_177506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 17), 'unknown_options')
    # Applying the binary operator 'in' (line 452)
    result_contains_177507 = python_operator(stypy.reporting.localization.Localization(__file__, 452, 7), 'in', str_177505, unknown_options_177506)
    
    # Testing the type of an if condition (line 452)
    if_condition_177508 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 452, 4), result_contains_177507)
    # Assigning a type to the variable 'if_condition_177508' (line 452)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 452, 4), 'if_condition_177508', if_condition_177508)
    # SSA begins for if statement (line 452)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 453)
    # Processing the call arguments (line 453)
    str_177511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 453, 22), 'str', 'ftol is deprecated for Nelder-Mead, use fatol instead. If you specified both, only fatol is used.')
    # Getting the type of 'DeprecationWarning' (line 456)
    DeprecationWarning_177512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 22), 'DeprecationWarning', False)
    # Processing the call keyword arguments (line 453)
    kwargs_177513 = {}
    # Getting the type of 'warnings' (line 453)
    warnings_177509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 453)
    warn_177510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 453, 8), warnings_177509, 'warn')
    # Calling warn(args, kwargs) (line 453)
    warn_call_result_177514 = invoke(stypy.reporting.localization.Localization(__file__, 453, 8), warn_177510, *[str_177511, DeprecationWarning_177512], **kwargs_177513)
    
    
    
    # Evaluating a boolean operation
    
    # Call to isclose(...): (line 457)
    # Processing the call arguments (line 457)
    # Getting the type of 'fatol' (line 457)
    fatol_177517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 23), 'fatol', False)
    float_177518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 457, 30), 'float')
    # Processing the call keyword arguments (line 457)
    kwargs_177519 = {}
    # Getting the type of 'np' (line 457)
    np_177515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 12), 'np', False)
    # Obtaining the member 'isclose' of a type (line 457)
    isclose_177516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 457, 12), np_177515, 'isclose')
    # Calling isclose(args, kwargs) (line 457)
    isclose_call_result_177520 = invoke(stypy.reporting.localization.Localization(__file__, 457, 12), isclose_177516, *[fatol_177517, float_177518], **kwargs_177519)
    
    
    
    # Call to isclose(...): (line 458)
    # Processing the call arguments (line 458)
    
    # Obtaining the type of the subscript
    str_177523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 458, 47), 'str', 'ftol')
    # Getting the type of 'unknown_options' (line 458)
    unknown_options_177524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 31), 'unknown_options', False)
    # Obtaining the member '__getitem__' of a type (line 458)
    getitem___177525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 458, 31), unknown_options_177524, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 458)
    subscript_call_result_177526 = invoke(stypy.reporting.localization.Localization(__file__, 458, 31), getitem___177525, str_177523)
    
    float_177527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 458, 56), 'float')
    # Processing the call keyword arguments (line 458)
    kwargs_177528 = {}
    # Getting the type of 'np' (line 458)
    np_177521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 20), 'np', False)
    # Obtaining the member 'isclose' of a type (line 458)
    isclose_177522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 458, 20), np_177521, 'isclose')
    # Calling isclose(args, kwargs) (line 458)
    isclose_call_result_177529 = invoke(stypy.reporting.localization.Localization(__file__, 458, 20), isclose_177522, *[subscript_call_result_177526, float_177527], **kwargs_177528)
    
    # Applying the 'not' unary operator (line 458)
    result_not__177530 = python_operator(stypy.reporting.localization.Localization(__file__, 458, 16), 'not', isclose_call_result_177529)
    
    # Applying the binary operator 'and' (line 457)
    result_and_keyword_177531 = python_operator(stypy.reporting.localization.Localization(__file__, 457, 12), 'and', isclose_call_result_177520, result_not__177530)
    
    # Testing the type of an if condition (line 457)
    if_condition_177532 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 457, 8), result_and_keyword_177531)
    # Assigning a type to the variable 'if_condition_177532' (line 457)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 457, 8), 'if_condition_177532', if_condition_177532)
    # SSA begins for if statement (line 457)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 460):
    
    # Assigning a Subscript to a Name (line 460):
    
    # Obtaining the type of the subscript
    str_177533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 460, 36), 'str', 'ftol')
    # Getting the type of 'unknown_options' (line 460)
    unknown_options_177534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 20), 'unknown_options')
    # Obtaining the member '__getitem__' of a type (line 460)
    getitem___177535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 20), unknown_options_177534, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 460)
    subscript_call_result_177536 = invoke(stypy.reporting.localization.Localization(__file__, 460, 20), getitem___177535, str_177533)
    
    # Assigning a type to the variable 'fatol' (line 460)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 460, 12), 'fatol', subscript_call_result_177536)
    # SSA join for if statement (line 457)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to pop(...): (line 461)
    # Processing the call arguments (line 461)
    str_177539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 461, 28), 'str', 'ftol')
    # Processing the call keyword arguments (line 461)
    kwargs_177540 = {}
    # Getting the type of 'unknown_options' (line 461)
    unknown_options_177537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 8), 'unknown_options', False)
    # Obtaining the member 'pop' of a type (line 461)
    pop_177538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 461, 8), unknown_options_177537, 'pop')
    # Calling pop(args, kwargs) (line 461)
    pop_call_result_177541 = invoke(stypy.reporting.localization.Localization(__file__, 461, 8), pop_177538, *[str_177539], **kwargs_177540)
    
    # SSA join for if statement (line 452)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    str_177542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 462, 7), 'str', 'xtol')
    # Getting the type of 'unknown_options' (line 462)
    unknown_options_177543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 17), 'unknown_options')
    # Applying the binary operator 'in' (line 462)
    result_contains_177544 = python_operator(stypy.reporting.localization.Localization(__file__, 462, 7), 'in', str_177542, unknown_options_177543)
    
    # Testing the type of an if condition (line 462)
    if_condition_177545 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 462, 4), result_contains_177544)
    # Assigning a type to the variable 'if_condition_177545' (line 462)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 462, 4), 'if_condition_177545', if_condition_177545)
    # SSA begins for if statement (line 462)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 463)
    # Processing the call arguments (line 463)
    str_177548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 463, 22), 'str', 'xtol is deprecated for Nelder-Mead, use xatol instead. If you specified both, only xatol is used.')
    # Getting the type of 'DeprecationWarning' (line 466)
    DeprecationWarning_177549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 22), 'DeprecationWarning', False)
    # Processing the call keyword arguments (line 463)
    kwargs_177550 = {}
    # Getting the type of 'warnings' (line 463)
    warnings_177546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 463)
    warn_177547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 463, 8), warnings_177546, 'warn')
    # Calling warn(args, kwargs) (line 463)
    warn_call_result_177551 = invoke(stypy.reporting.localization.Localization(__file__, 463, 8), warn_177547, *[str_177548, DeprecationWarning_177549], **kwargs_177550)
    
    
    
    # Evaluating a boolean operation
    
    # Call to isclose(...): (line 467)
    # Processing the call arguments (line 467)
    # Getting the type of 'xatol' (line 467)
    xatol_177554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 23), 'xatol', False)
    float_177555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 467, 30), 'float')
    # Processing the call keyword arguments (line 467)
    kwargs_177556 = {}
    # Getting the type of 'np' (line 467)
    np_177552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 12), 'np', False)
    # Obtaining the member 'isclose' of a type (line 467)
    isclose_177553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 467, 12), np_177552, 'isclose')
    # Calling isclose(args, kwargs) (line 467)
    isclose_call_result_177557 = invoke(stypy.reporting.localization.Localization(__file__, 467, 12), isclose_177553, *[xatol_177554, float_177555], **kwargs_177556)
    
    
    
    # Call to isclose(...): (line 468)
    # Processing the call arguments (line 468)
    
    # Obtaining the type of the subscript
    str_177560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 468, 47), 'str', 'xtol')
    # Getting the type of 'unknown_options' (line 468)
    unknown_options_177561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 31), 'unknown_options', False)
    # Obtaining the member '__getitem__' of a type (line 468)
    getitem___177562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 31), unknown_options_177561, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 468)
    subscript_call_result_177563 = invoke(stypy.reporting.localization.Localization(__file__, 468, 31), getitem___177562, str_177560)
    
    float_177564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 468, 56), 'float')
    # Processing the call keyword arguments (line 468)
    kwargs_177565 = {}
    # Getting the type of 'np' (line 468)
    np_177558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 20), 'np', False)
    # Obtaining the member 'isclose' of a type (line 468)
    isclose_177559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 20), np_177558, 'isclose')
    # Calling isclose(args, kwargs) (line 468)
    isclose_call_result_177566 = invoke(stypy.reporting.localization.Localization(__file__, 468, 20), isclose_177559, *[subscript_call_result_177563, float_177564], **kwargs_177565)
    
    # Applying the 'not' unary operator (line 468)
    result_not__177567 = python_operator(stypy.reporting.localization.Localization(__file__, 468, 16), 'not', isclose_call_result_177566)
    
    # Applying the binary operator 'and' (line 467)
    result_and_keyword_177568 = python_operator(stypy.reporting.localization.Localization(__file__, 467, 12), 'and', isclose_call_result_177557, result_not__177567)
    
    # Testing the type of an if condition (line 467)
    if_condition_177569 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 467, 8), result_and_keyword_177568)
    # Assigning a type to the variable 'if_condition_177569' (line 467)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 467, 8), 'if_condition_177569', if_condition_177569)
    # SSA begins for if statement (line 467)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 470):
    
    # Assigning a Subscript to a Name (line 470):
    
    # Obtaining the type of the subscript
    str_177570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 470, 36), 'str', 'xtol')
    # Getting the type of 'unknown_options' (line 470)
    unknown_options_177571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 20), 'unknown_options')
    # Obtaining the member '__getitem__' of a type (line 470)
    getitem___177572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 470, 20), unknown_options_177571, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 470)
    subscript_call_result_177573 = invoke(stypy.reporting.localization.Localization(__file__, 470, 20), getitem___177572, str_177570)
    
    # Assigning a type to the variable 'xatol' (line 470)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 470, 12), 'xatol', subscript_call_result_177573)
    # SSA join for if statement (line 467)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to pop(...): (line 471)
    # Processing the call arguments (line 471)
    str_177576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 471, 28), 'str', 'xtol')
    # Processing the call keyword arguments (line 471)
    kwargs_177577 = {}
    # Getting the type of 'unknown_options' (line 471)
    unknown_options_177574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 8), 'unknown_options', False)
    # Obtaining the member 'pop' of a type (line 471)
    pop_177575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 471, 8), unknown_options_177574, 'pop')
    # Calling pop(args, kwargs) (line 471)
    pop_call_result_177578 = invoke(stypy.reporting.localization.Localization(__file__, 471, 8), pop_177575, *[str_177576], **kwargs_177577)
    
    # SSA join for if statement (line 462)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to _check_unknown_options(...): (line 473)
    # Processing the call arguments (line 473)
    # Getting the type of 'unknown_options' (line 473)
    unknown_options_177580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 27), 'unknown_options', False)
    # Processing the call keyword arguments (line 473)
    kwargs_177581 = {}
    # Getting the type of '_check_unknown_options' (line 473)
    _check_unknown_options_177579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 4), '_check_unknown_options', False)
    # Calling _check_unknown_options(args, kwargs) (line 473)
    _check_unknown_options_call_result_177582 = invoke(stypy.reporting.localization.Localization(__file__, 473, 4), _check_unknown_options_177579, *[unknown_options_177580], **kwargs_177581)
    
    
    # Assigning a Name to a Name (line 474):
    
    # Assigning a Name to a Name (line 474):
    # Getting the type of 'maxfev' (line 474)
    maxfev_177583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 13), 'maxfev')
    # Assigning a type to the variable 'maxfun' (line 474)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 4), 'maxfun', maxfev_177583)
    
    # Assigning a Name to a Name (line 475):
    
    # Assigning a Name to a Name (line 475):
    # Getting the type of 'return_all' (line 475)
    return_all_177584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 13), 'return_all')
    # Assigning a type to the variable 'retall' (line 475)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 4), 'retall', return_all_177584)
    
    # Assigning a Call to a Tuple (line 477):
    
    # Assigning a Subscript to a Name (line 477):
    
    # Obtaining the type of the subscript
    int_177585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 4), 'int')
    
    # Call to wrap_function(...): (line 477)
    # Processing the call arguments (line 477)
    # Getting the type of 'func' (line 477)
    func_177587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 33), 'func', False)
    # Getting the type of 'args' (line 477)
    args_177588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 39), 'args', False)
    # Processing the call keyword arguments (line 477)
    kwargs_177589 = {}
    # Getting the type of 'wrap_function' (line 477)
    wrap_function_177586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 19), 'wrap_function', False)
    # Calling wrap_function(args, kwargs) (line 477)
    wrap_function_call_result_177590 = invoke(stypy.reporting.localization.Localization(__file__, 477, 19), wrap_function_177586, *[func_177587, args_177588], **kwargs_177589)
    
    # Obtaining the member '__getitem__' of a type (line 477)
    getitem___177591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 477, 4), wrap_function_call_result_177590, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 477)
    subscript_call_result_177592 = invoke(stypy.reporting.localization.Localization(__file__, 477, 4), getitem___177591, int_177585)
    
    # Assigning a type to the variable 'tuple_var_assignment_176614' (line 477)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 4), 'tuple_var_assignment_176614', subscript_call_result_177592)
    
    # Assigning a Subscript to a Name (line 477):
    
    # Obtaining the type of the subscript
    int_177593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 4), 'int')
    
    # Call to wrap_function(...): (line 477)
    # Processing the call arguments (line 477)
    # Getting the type of 'func' (line 477)
    func_177595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 33), 'func', False)
    # Getting the type of 'args' (line 477)
    args_177596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 39), 'args', False)
    # Processing the call keyword arguments (line 477)
    kwargs_177597 = {}
    # Getting the type of 'wrap_function' (line 477)
    wrap_function_177594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 19), 'wrap_function', False)
    # Calling wrap_function(args, kwargs) (line 477)
    wrap_function_call_result_177598 = invoke(stypy.reporting.localization.Localization(__file__, 477, 19), wrap_function_177594, *[func_177595, args_177596], **kwargs_177597)
    
    # Obtaining the member '__getitem__' of a type (line 477)
    getitem___177599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 477, 4), wrap_function_call_result_177598, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 477)
    subscript_call_result_177600 = invoke(stypy.reporting.localization.Localization(__file__, 477, 4), getitem___177599, int_177593)
    
    # Assigning a type to the variable 'tuple_var_assignment_176615' (line 477)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 4), 'tuple_var_assignment_176615', subscript_call_result_177600)
    
    # Assigning a Name to a Name (line 477):
    # Getting the type of 'tuple_var_assignment_176614' (line 477)
    tuple_var_assignment_176614_177601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 4), 'tuple_var_assignment_176614')
    # Assigning a type to the variable 'fcalls' (line 477)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 4), 'fcalls', tuple_var_assignment_176614_177601)
    
    # Assigning a Name to a Name (line 477):
    # Getting the type of 'tuple_var_assignment_176615' (line 477)
    tuple_var_assignment_176615_177602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 4), 'tuple_var_assignment_176615')
    # Assigning a type to the variable 'func' (line 477)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 12), 'func', tuple_var_assignment_176615_177602)
    
    # Assigning a Num to a Name (line 479):
    
    # Assigning a Num to a Name (line 479):
    int_177603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 479, 10), 'int')
    # Assigning a type to the variable 'rho' (line 479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 479, 4), 'rho', int_177603)
    
    # Assigning a Num to a Name (line 480):
    
    # Assigning a Num to a Name (line 480):
    int_177604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 480, 10), 'int')
    # Assigning a type to the variable 'chi' (line 480)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 4), 'chi', int_177604)
    
    # Assigning a Num to a Name (line 481):
    
    # Assigning a Num to a Name (line 481):
    float_177605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, 10), 'float')
    # Assigning a type to the variable 'psi' (line 481)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 481, 4), 'psi', float_177605)
    
    # Assigning a Num to a Name (line 482):
    
    # Assigning a Num to a Name (line 482):
    float_177606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 482, 12), 'float')
    # Assigning a type to the variable 'sigma' (line 482)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 4), 'sigma', float_177606)
    
    # Assigning a Num to a Name (line 483):
    
    # Assigning a Num to a Name (line 483):
    float_177607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 15), 'float')
    # Assigning a type to the variable 'nonzdelt' (line 483)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 483, 4), 'nonzdelt', float_177607)
    
    # Assigning a Num to a Name (line 484):
    
    # Assigning a Num to a Name (line 484):
    float_177608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 484, 12), 'float')
    # Assigning a type to the variable 'zdelt' (line 484)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 484, 4), 'zdelt', float_177608)
    
    # Assigning a Call to a Name (line 486):
    
    # Assigning a Call to a Name (line 486):
    
    # Call to flatten(...): (line 486)
    # Processing the call keyword arguments (line 486)
    kwargs_177614 = {}
    
    # Call to asfarray(...): (line 486)
    # Processing the call arguments (line 486)
    # Getting the type of 'x0' (line 486)
    x0_177610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 18), 'x0', False)
    # Processing the call keyword arguments (line 486)
    kwargs_177611 = {}
    # Getting the type of 'asfarray' (line 486)
    asfarray_177609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 9), 'asfarray', False)
    # Calling asfarray(args, kwargs) (line 486)
    asfarray_call_result_177612 = invoke(stypy.reporting.localization.Localization(__file__, 486, 9), asfarray_177609, *[x0_177610], **kwargs_177611)
    
    # Obtaining the member 'flatten' of a type (line 486)
    flatten_177613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 9), asfarray_call_result_177612, 'flatten')
    # Calling flatten(args, kwargs) (line 486)
    flatten_call_result_177615 = invoke(stypy.reporting.localization.Localization(__file__, 486, 9), flatten_177613, *[], **kwargs_177614)
    
    # Assigning a type to the variable 'x0' (line 486)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 486, 4), 'x0', flatten_call_result_177615)
    
    # Type idiom detected: calculating its left and rigth part (line 488)
    # Getting the type of 'initial_simplex' (line 488)
    initial_simplex_177616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 7), 'initial_simplex')
    # Getting the type of 'None' (line 488)
    None_177617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 26), 'None')
    
    (may_be_177618, more_types_in_union_177619) = may_be_none(initial_simplex_177616, None_177617)

    if may_be_177618:

        if more_types_in_union_177619:
            # Runtime conditional SSA (line 488)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 489):
        
        # Assigning a Call to a Name (line 489):
        
        # Call to len(...): (line 489)
        # Processing the call arguments (line 489)
        # Getting the type of 'x0' (line 489)
        x0_177621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 16), 'x0', False)
        # Processing the call keyword arguments (line 489)
        kwargs_177622 = {}
        # Getting the type of 'len' (line 489)
        len_177620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 12), 'len', False)
        # Calling len(args, kwargs) (line 489)
        len_call_result_177623 = invoke(stypy.reporting.localization.Localization(__file__, 489, 12), len_177620, *[x0_177621], **kwargs_177622)
        
        # Assigning a type to the variable 'N' (line 489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 489, 8), 'N', len_call_result_177623)
        
        # Assigning a Call to a Name (line 491):
        
        # Assigning a Call to a Name (line 491):
        
        # Call to zeros(...): (line 491)
        # Processing the call arguments (line 491)
        
        # Obtaining an instance of the builtin type 'tuple' (line 491)
        tuple_177626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 491, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 491)
        # Adding element type (line 491)
        # Getting the type of 'N' (line 491)
        N_177627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 27), 'N', False)
        int_177628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 491, 31), 'int')
        # Applying the binary operator '+' (line 491)
        result_add_177629 = python_operator(stypy.reporting.localization.Localization(__file__, 491, 27), '+', N_177627, int_177628)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 491, 27), tuple_177626, result_add_177629)
        # Adding element type (line 491)
        # Getting the type of 'N' (line 491)
        N_177630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 34), 'N', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 491, 27), tuple_177626, N_177630)
        
        # Processing the call keyword arguments (line 491)
        # Getting the type of 'x0' (line 491)
        x0_177631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 44), 'x0', False)
        # Obtaining the member 'dtype' of a type (line 491)
        dtype_177632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 44), x0_177631, 'dtype')
        keyword_177633 = dtype_177632
        kwargs_177634 = {'dtype': keyword_177633}
        # Getting the type of 'numpy' (line 491)
        numpy_177624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 14), 'numpy', False)
        # Obtaining the member 'zeros' of a type (line 491)
        zeros_177625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 14), numpy_177624, 'zeros')
        # Calling zeros(args, kwargs) (line 491)
        zeros_call_result_177635 = invoke(stypy.reporting.localization.Localization(__file__, 491, 14), zeros_177625, *[tuple_177626], **kwargs_177634)
        
        # Assigning a type to the variable 'sim' (line 491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 491, 8), 'sim', zeros_call_result_177635)
        
        # Assigning a Name to a Subscript (line 492):
        
        # Assigning a Name to a Subscript (line 492):
        # Getting the type of 'x0' (line 492)
        x0_177636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 17), 'x0')
        # Getting the type of 'sim' (line 492)
        sim_177637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 8), 'sim')
        int_177638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 492, 12), 'int')
        # Storing an element on a container (line 492)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 492, 8), sim_177637, (int_177638, x0_177636))
        
        
        # Call to range(...): (line 493)
        # Processing the call arguments (line 493)
        # Getting the type of 'N' (line 493)
        N_177640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 23), 'N', False)
        # Processing the call keyword arguments (line 493)
        kwargs_177641 = {}
        # Getting the type of 'range' (line 493)
        range_177639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 17), 'range', False)
        # Calling range(args, kwargs) (line 493)
        range_call_result_177642 = invoke(stypy.reporting.localization.Localization(__file__, 493, 17), range_177639, *[N_177640], **kwargs_177641)
        
        # Testing the type of a for loop iterable (line 493)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 493, 8), range_call_result_177642)
        # Getting the type of the for loop variable (line 493)
        for_loop_var_177643 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 493, 8), range_call_result_177642)
        # Assigning a type to the variable 'k' (line 493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 493, 8), 'k', for_loop_var_177643)
        # SSA begins for a for statement (line 493)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 494):
        
        # Assigning a Call to a Name (line 494):
        
        # Call to array(...): (line 494)
        # Processing the call arguments (line 494)
        # Getting the type of 'x0' (line 494)
        x0_177646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 28), 'x0', False)
        # Processing the call keyword arguments (line 494)
        # Getting the type of 'True' (line 494)
        True_177647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 37), 'True', False)
        keyword_177648 = True_177647
        kwargs_177649 = {'copy': keyword_177648}
        # Getting the type of 'numpy' (line 494)
        numpy_177644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 16), 'numpy', False)
        # Obtaining the member 'array' of a type (line 494)
        array_177645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 16), numpy_177644, 'array')
        # Calling array(args, kwargs) (line 494)
        array_call_result_177650 = invoke(stypy.reporting.localization.Localization(__file__, 494, 16), array_177645, *[x0_177646], **kwargs_177649)
        
        # Assigning a type to the variable 'y' (line 494)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 494, 12), 'y', array_call_result_177650)
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 495)
        k_177651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 17), 'k')
        # Getting the type of 'y' (line 495)
        y_177652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 15), 'y')
        # Obtaining the member '__getitem__' of a type (line 495)
        getitem___177653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 495, 15), y_177652, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 495)
        subscript_call_result_177654 = invoke(stypy.reporting.localization.Localization(__file__, 495, 15), getitem___177653, k_177651)
        
        int_177655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 495, 23), 'int')
        # Applying the binary operator '!=' (line 495)
        result_ne_177656 = python_operator(stypy.reporting.localization.Localization(__file__, 495, 15), '!=', subscript_call_result_177654, int_177655)
        
        # Testing the type of an if condition (line 495)
        if_condition_177657 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 495, 12), result_ne_177656)
        # Assigning a type to the variable 'if_condition_177657' (line 495)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 495, 12), 'if_condition_177657', if_condition_177657)
        # SSA begins for if statement (line 495)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Subscript (line 496):
        
        # Assigning a BinOp to a Subscript (line 496):
        int_177658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 496, 24), 'int')
        # Getting the type of 'nonzdelt' (line 496)
        nonzdelt_177659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 28), 'nonzdelt')
        # Applying the binary operator '+' (line 496)
        result_add_177660 = python_operator(stypy.reporting.localization.Localization(__file__, 496, 24), '+', int_177658, nonzdelt_177659)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 496)
        k_177661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 40), 'k')
        # Getting the type of 'y' (line 496)
        y_177662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 38), 'y')
        # Obtaining the member '__getitem__' of a type (line 496)
        getitem___177663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 38), y_177662, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 496)
        subscript_call_result_177664 = invoke(stypy.reporting.localization.Localization(__file__, 496, 38), getitem___177663, k_177661)
        
        # Applying the binary operator '*' (line 496)
        result_mul_177665 = python_operator(stypy.reporting.localization.Localization(__file__, 496, 23), '*', result_add_177660, subscript_call_result_177664)
        
        # Getting the type of 'y' (line 496)
        y_177666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 16), 'y')
        # Getting the type of 'k' (line 496)
        k_177667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 18), 'k')
        # Storing an element on a container (line 496)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 496, 16), y_177666, (k_177667, result_mul_177665))
        # SSA branch for the else part of an if statement (line 495)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Subscript (line 498):
        
        # Assigning a Name to a Subscript (line 498):
        # Getting the type of 'zdelt' (line 498)
        zdelt_177668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 23), 'zdelt')
        # Getting the type of 'y' (line 498)
        y_177669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 16), 'y')
        # Getting the type of 'k' (line 498)
        k_177670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 18), 'k')
        # Storing an element on a container (line 498)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 498, 16), y_177669, (k_177670, zdelt_177668))
        # SSA join for if statement (line 495)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Subscript (line 499):
        
        # Assigning a Name to a Subscript (line 499):
        # Getting the type of 'y' (line 499)
        y_177671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 25), 'y')
        # Getting the type of 'sim' (line 499)
        sim_177672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 12), 'sim')
        # Getting the type of 'k' (line 499)
        k_177673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 16), 'k')
        int_177674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 499, 20), 'int')
        # Applying the binary operator '+' (line 499)
        result_add_177675 = python_operator(stypy.reporting.localization.Localization(__file__, 499, 16), '+', k_177673, int_177674)
        
        # Storing an element on a container (line 499)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 499, 12), sim_177672, (result_add_177675, y_177671))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_177619:
            # Runtime conditional SSA for else branch (line 488)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_177618) or more_types_in_union_177619):
        
        # Assigning a Call to a Name (line 501):
        
        # Assigning a Call to a Name (line 501):
        
        # Call to copy(...): (line 501)
        # Processing the call keyword arguments (line 501)
        kwargs_177682 = {}
        
        # Call to asfarray(...): (line 501)
        # Processing the call arguments (line 501)
        # Getting the type of 'initial_simplex' (line 501)
        initial_simplex_177678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 26), 'initial_simplex', False)
        # Processing the call keyword arguments (line 501)
        kwargs_177679 = {}
        # Getting the type of 'np' (line 501)
        np_177676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 14), 'np', False)
        # Obtaining the member 'asfarray' of a type (line 501)
        asfarray_177677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 501, 14), np_177676, 'asfarray')
        # Calling asfarray(args, kwargs) (line 501)
        asfarray_call_result_177680 = invoke(stypy.reporting.localization.Localization(__file__, 501, 14), asfarray_177677, *[initial_simplex_177678], **kwargs_177679)
        
        # Obtaining the member 'copy' of a type (line 501)
        copy_177681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 501, 14), asfarray_call_result_177680, 'copy')
        # Calling copy(args, kwargs) (line 501)
        copy_call_result_177683 = invoke(stypy.reporting.localization.Localization(__file__, 501, 14), copy_177681, *[], **kwargs_177682)
        
        # Assigning a type to the variable 'sim' (line 501)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 501, 8), 'sim', copy_call_result_177683)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'sim' (line 502)
        sim_177684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 11), 'sim')
        # Obtaining the member 'ndim' of a type (line 502)
        ndim_177685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 502, 11), sim_177684, 'ndim')
        int_177686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 23), 'int')
        # Applying the binary operator '!=' (line 502)
        result_ne_177687 = python_operator(stypy.reporting.localization.Localization(__file__, 502, 11), '!=', ndim_177685, int_177686)
        
        
        
        # Obtaining the type of the subscript
        int_177688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 38), 'int')
        # Getting the type of 'sim' (line 502)
        sim_177689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 28), 'sim')
        # Obtaining the member 'shape' of a type (line 502)
        shape_177690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 502, 28), sim_177689, 'shape')
        # Obtaining the member '__getitem__' of a type (line 502)
        getitem___177691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 502, 28), shape_177690, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 502)
        subscript_call_result_177692 = invoke(stypy.reporting.localization.Localization(__file__, 502, 28), getitem___177691, int_177688)
        
        
        # Obtaining the type of the subscript
        int_177693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 54), 'int')
        # Getting the type of 'sim' (line 502)
        sim_177694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 44), 'sim')
        # Obtaining the member 'shape' of a type (line 502)
        shape_177695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 502, 44), sim_177694, 'shape')
        # Obtaining the member '__getitem__' of a type (line 502)
        getitem___177696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 502, 44), shape_177695, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 502)
        subscript_call_result_177697 = invoke(stypy.reporting.localization.Localization(__file__, 502, 44), getitem___177696, int_177693)
        
        int_177698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 59), 'int')
        # Applying the binary operator '+' (line 502)
        result_add_177699 = python_operator(stypy.reporting.localization.Localization(__file__, 502, 44), '+', subscript_call_result_177697, int_177698)
        
        # Applying the binary operator '!=' (line 502)
        result_ne_177700 = python_operator(stypy.reporting.localization.Localization(__file__, 502, 28), '!=', subscript_call_result_177692, result_add_177699)
        
        # Applying the binary operator 'or' (line 502)
        result_or_keyword_177701 = python_operator(stypy.reporting.localization.Localization(__file__, 502, 11), 'or', result_ne_177687, result_ne_177700)
        
        # Testing the type of an if condition (line 502)
        if_condition_177702 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 502, 8), result_or_keyword_177701)
        # Assigning a type to the variable 'if_condition_177702' (line 502)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 502, 8), 'if_condition_177702', if_condition_177702)
        # SSA begins for if statement (line 502)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 503)
        # Processing the call arguments (line 503)
        str_177704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 503, 29), 'str', '`initial_simplex` should be an array of shape (N+1,N)')
        # Processing the call keyword arguments (line 503)
        kwargs_177705 = {}
        # Getting the type of 'ValueError' (line 503)
        ValueError_177703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 503)
        ValueError_call_result_177706 = invoke(stypy.reporting.localization.Localization(__file__, 503, 18), ValueError_177703, *[str_177704], **kwargs_177705)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 503, 12), ValueError_call_result_177706, 'raise parameter', BaseException)
        # SSA join for if statement (line 502)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to len(...): (line 504)
        # Processing the call arguments (line 504)
        # Getting the type of 'x0' (line 504)
        x0_177708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 15), 'x0', False)
        # Processing the call keyword arguments (line 504)
        kwargs_177709 = {}
        # Getting the type of 'len' (line 504)
        len_177707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 11), 'len', False)
        # Calling len(args, kwargs) (line 504)
        len_call_result_177710 = invoke(stypy.reporting.localization.Localization(__file__, 504, 11), len_177707, *[x0_177708], **kwargs_177709)
        
        
        # Obtaining the type of the subscript
        int_177711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 504, 32), 'int')
        # Getting the type of 'sim' (line 504)
        sim_177712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 22), 'sim')
        # Obtaining the member 'shape' of a type (line 504)
        shape_177713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 504, 22), sim_177712, 'shape')
        # Obtaining the member '__getitem__' of a type (line 504)
        getitem___177714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 504, 22), shape_177713, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 504)
        subscript_call_result_177715 = invoke(stypy.reporting.localization.Localization(__file__, 504, 22), getitem___177714, int_177711)
        
        # Applying the binary operator '!=' (line 504)
        result_ne_177716 = python_operator(stypy.reporting.localization.Localization(__file__, 504, 11), '!=', len_call_result_177710, subscript_call_result_177715)
        
        # Testing the type of an if condition (line 504)
        if_condition_177717 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 504, 8), result_ne_177716)
        # Assigning a type to the variable 'if_condition_177717' (line 504)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 504, 8), 'if_condition_177717', if_condition_177717)
        # SSA begins for if statement (line 504)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 505)
        # Processing the call arguments (line 505)
        str_177719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 505, 29), 'str', 'Size of `initial_simplex` is not consistent with `x0`')
        # Processing the call keyword arguments (line 505)
        kwargs_177720 = {}
        # Getting the type of 'ValueError' (line 505)
        ValueError_177718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 505)
        ValueError_call_result_177721 = invoke(stypy.reporting.localization.Localization(__file__, 505, 18), ValueError_177718, *[str_177719], **kwargs_177720)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 505, 12), ValueError_call_result_177721, 'raise parameter', BaseException)
        # SSA join for if statement (line 504)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 506):
        
        # Assigning a Subscript to a Name (line 506):
        
        # Obtaining the type of the subscript
        int_177722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 506, 22), 'int')
        # Getting the type of 'sim' (line 506)
        sim_177723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 12), 'sim')
        # Obtaining the member 'shape' of a type (line 506)
        shape_177724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 506, 12), sim_177723, 'shape')
        # Obtaining the member '__getitem__' of a type (line 506)
        getitem___177725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 506, 12), shape_177724, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 506)
        subscript_call_result_177726 = invoke(stypy.reporting.localization.Localization(__file__, 506, 12), getitem___177725, int_177722)
        
        # Assigning a type to the variable 'N' (line 506)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 506, 8), 'N', subscript_call_result_177726)

        if (may_be_177618 and more_types_in_union_177619):
            # SSA join for if statement (line 488)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Getting the type of 'retall' (line 508)
    retall_177727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 7), 'retall')
    # Testing the type of an if condition (line 508)
    if_condition_177728 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 508, 4), retall_177727)
    # Assigning a type to the variable 'if_condition_177728' (line 508)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 4), 'if_condition_177728', if_condition_177728)
    # SSA begins for if statement (line 508)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a List to a Name (line 509):
    
    # Assigning a List to a Name (line 509):
    
    # Obtaining an instance of the builtin type 'list' (line 509)
    list_177729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 509, 18), 'list')
    # Adding type elements to the builtin type 'list' instance (line 509)
    # Adding element type (line 509)
    
    # Obtaining the type of the subscript
    int_177730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 509, 23), 'int')
    # Getting the type of 'sim' (line 509)
    sim_177731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 19), 'sim')
    # Obtaining the member '__getitem__' of a type (line 509)
    getitem___177732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 509, 19), sim_177731, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 509)
    subscript_call_result_177733 = invoke(stypy.reporting.localization.Localization(__file__, 509, 19), getitem___177732, int_177730)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 509, 18), list_177729, subscript_call_result_177733)
    
    # Assigning a type to the variable 'allvecs' (line 509)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 509, 8), 'allvecs', list_177729)
    # SSA join for if statement (line 508)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'maxiter' (line 512)
    maxiter_177734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 7), 'maxiter')
    # Getting the type of 'None' (line 512)
    None_177735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 18), 'None')
    # Applying the binary operator 'is' (line 512)
    result_is__177736 = python_operator(stypy.reporting.localization.Localization(__file__, 512, 7), 'is', maxiter_177734, None_177735)
    
    
    # Getting the type of 'maxfun' (line 512)
    maxfun_177737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 27), 'maxfun')
    # Getting the type of 'None' (line 512)
    None_177738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 37), 'None')
    # Applying the binary operator 'is' (line 512)
    result_is__177739 = python_operator(stypy.reporting.localization.Localization(__file__, 512, 27), 'is', maxfun_177737, None_177738)
    
    # Applying the binary operator 'and' (line 512)
    result_and_keyword_177740 = python_operator(stypy.reporting.localization.Localization(__file__, 512, 7), 'and', result_is__177736, result_is__177739)
    
    # Testing the type of an if condition (line 512)
    if_condition_177741 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 512, 4), result_and_keyword_177740)
    # Assigning a type to the variable 'if_condition_177741' (line 512)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 4), 'if_condition_177741', if_condition_177741)
    # SSA begins for if statement (line 512)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 513):
    
    # Assigning a BinOp to a Name (line 513):
    # Getting the type of 'N' (line 513)
    N_177742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 18), 'N')
    int_177743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 513, 22), 'int')
    # Applying the binary operator '*' (line 513)
    result_mul_177744 = python_operator(stypy.reporting.localization.Localization(__file__, 513, 18), '*', N_177742, int_177743)
    
    # Assigning a type to the variable 'maxiter' (line 513)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 513, 8), 'maxiter', result_mul_177744)
    
    # Assigning a BinOp to a Name (line 514):
    
    # Assigning a BinOp to a Name (line 514):
    # Getting the type of 'N' (line 514)
    N_177745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 17), 'N')
    int_177746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 514, 21), 'int')
    # Applying the binary operator '*' (line 514)
    result_mul_177747 = python_operator(stypy.reporting.localization.Localization(__file__, 514, 17), '*', N_177745, int_177746)
    
    # Assigning a type to the variable 'maxfun' (line 514)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 8), 'maxfun', result_mul_177747)
    # SSA branch for the else part of an if statement (line 512)
    module_type_store.open_ssa_branch('else')
    
    # Type idiom detected: calculating its left and rigth part (line 515)
    # Getting the type of 'maxiter' (line 515)
    maxiter_177748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 9), 'maxiter')
    # Getting the type of 'None' (line 515)
    None_177749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 20), 'None')
    
    (may_be_177750, more_types_in_union_177751) = may_be_none(maxiter_177748, None_177749)

    if may_be_177750:

        if more_types_in_union_177751:
            # Runtime conditional SSA (line 515)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Getting the type of 'maxfun' (line 518)
        maxfun_177752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 11), 'maxfun')
        # Getting the type of 'np' (line 518)
        np_177753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 21), 'np')
        # Obtaining the member 'inf' of a type (line 518)
        inf_177754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 21), np_177753, 'inf')
        # Applying the binary operator '==' (line 518)
        result_eq_177755 = python_operator(stypy.reporting.localization.Localization(__file__, 518, 11), '==', maxfun_177752, inf_177754)
        
        # Testing the type of an if condition (line 518)
        if_condition_177756 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 518, 8), result_eq_177755)
        # Assigning a type to the variable 'if_condition_177756' (line 518)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 8), 'if_condition_177756', if_condition_177756)
        # SSA begins for if statement (line 518)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 519):
        
        # Assigning a BinOp to a Name (line 519):
        # Getting the type of 'N' (line 519)
        N_177757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 22), 'N')
        int_177758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 519, 26), 'int')
        # Applying the binary operator '*' (line 519)
        result_mul_177759 = python_operator(stypy.reporting.localization.Localization(__file__, 519, 22), '*', N_177757, int_177758)
        
        # Assigning a type to the variable 'maxiter' (line 519)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 12), 'maxiter', result_mul_177759)
        # SSA branch for the else part of an if statement (line 518)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 521):
        
        # Assigning a Attribute to a Name (line 521):
        # Getting the type of 'np' (line 521)
        np_177760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 22), 'np')
        # Obtaining the member 'inf' of a type (line 521)
        inf_177761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 521, 22), np_177760, 'inf')
        # Assigning a type to the variable 'maxiter' (line 521)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 521, 12), 'maxiter', inf_177761)
        # SSA join for if statement (line 518)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_177751:
            # Runtime conditional SSA for else branch (line 515)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_177750) or more_types_in_union_177751):
        
        # Type idiom detected: calculating its left and rigth part (line 522)
        # Getting the type of 'maxfun' (line 522)
        maxfun_177762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 9), 'maxfun')
        # Getting the type of 'None' (line 522)
        None_177763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 19), 'None')
        
        (may_be_177764, more_types_in_union_177765) = may_be_none(maxfun_177762, None_177763)

        if may_be_177764:

            if more_types_in_union_177765:
                # Runtime conditional SSA (line 522)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Getting the type of 'maxiter' (line 523)
            maxiter_177766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 11), 'maxiter')
            # Getting the type of 'np' (line 523)
            np_177767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 22), 'np')
            # Obtaining the member 'inf' of a type (line 523)
            inf_177768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 22), np_177767, 'inf')
            # Applying the binary operator '==' (line 523)
            result_eq_177769 = python_operator(stypy.reporting.localization.Localization(__file__, 523, 11), '==', maxiter_177766, inf_177768)
            
            # Testing the type of an if condition (line 523)
            if_condition_177770 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 523, 8), result_eq_177769)
            # Assigning a type to the variable 'if_condition_177770' (line 523)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 8), 'if_condition_177770', if_condition_177770)
            # SSA begins for if statement (line 523)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Name (line 524):
            
            # Assigning a BinOp to a Name (line 524):
            # Getting the type of 'N' (line 524)
            N_177771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 21), 'N')
            int_177772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, 25), 'int')
            # Applying the binary operator '*' (line 524)
            result_mul_177773 = python_operator(stypy.reporting.localization.Localization(__file__, 524, 21), '*', N_177771, int_177772)
            
            # Assigning a type to the variable 'maxfun' (line 524)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 12), 'maxfun', result_mul_177773)
            # SSA branch for the else part of an if statement (line 523)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Attribute to a Name (line 526):
            
            # Assigning a Attribute to a Name (line 526):
            # Getting the type of 'np' (line 526)
            np_177774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 21), 'np')
            # Obtaining the member 'inf' of a type (line 526)
            inf_177775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 21), np_177774, 'inf')
            # Assigning a type to the variable 'maxfun' (line 526)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 12), 'maxfun', inf_177775)
            # SSA join for if statement (line 523)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_177765:
                # SSA join for if statement (line 522)
                module_type_store = module_type_store.join_ssa_context()


        

        if (may_be_177750 and more_types_in_union_177751):
            # SSA join for if statement (line 515)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 512)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 528):
    
    # Assigning a Call to a Name (line 528):
    
    # Call to list(...): (line 528)
    # Processing the call arguments (line 528)
    
    # Call to range(...): (line 528)
    # Processing the call arguments (line 528)
    int_177778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 528, 25), 'int')
    # Getting the type of 'N' (line 528)
    N_177779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 28), 'N', False)
    int_177780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 528, 32), 'int')
    # Applying the binary operator '+' (line 528)
    result_add_177781 = python_operator(stypy.reporting.localization.Localization(__file__, 528, 28), '+', N_177779, int_177780)
    
    # Processing the call keyword arguments (line 528)
    kwargs_177782 = {}
    # Getting the type of 'range' (line 528)
    range_177777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 19), 'range', False)
    # Calling range(args, kwargs) (line 528)
    range_call_result_177783 = invoke(stypy.reporting.localization.Localization(__file__, 528, 19), range_177777, *[int_177778, result_add_177781], **kwargs_177782)
    
    # Processing the call keyword arguments (line 528)
    kwargs_177784 = {}
    # Getting the type of 'list' (line 528)
    list_177776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 14), 'list', False)
    # Calling list(args, kwargs) (line 528)
    list_call_result_177785 = invoke(stypy.reporting.localization.Localization(__file__, 528, 14), list_177776, *[range_call_result_177783], **kwargs_177784)
    
    # Assigning a type to the variable 'one2np1' (line 528)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 4), 'one2np1', list_call_result_177785)
    
    # Assigning a Call to a Name (line 529):
    
    # Assigning a Call to a Name (line 529):
    
    # Call to zeros(...): (line 529)
    # Processing the call arguments (line 529)
    
    # Obtaining an instance of the builtin type 'tuple' (line 529)
    tuple_177788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 529, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 529)
    # Adding element type (line 529)
    # Getting the type of 'N' (line 529)
    N_177789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 24), 'N', False)
    int_177790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 529, 28), 'int')
    # Applying the binary operator '+' (line 529)
    result_add_177791 = python_operator(stypy.reporting.localization.Localization(__file__, 529, 24), '+', N_177789, int_177790)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 529, 24), tuple_177788, result_add_177791)
    
    # Getting the type of 'float' (line 529)
    float_177792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 33), 'float', False)
    # Processing the call keyword arguments (line 529)
    kwargs_177793 = {}
    # Getting the type of 'numpy' (line 529)
    numpy_177786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 11), 'numpy', False)
    # Obtaining the member 'zeros' of a type (line 529)
    zeros_177787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 529, 11), numpy_177786, 'zeros')
    # Calling zeros(args, kwargs) (line 529)
    zeros_call_result_177794 = invoke(stypy.reporting.localization.Localization(__file__, 529, 11), zeros_177787, *[tuple_177788, float_177792], **kwargs_177793)
    
    # Assigning a type to the variable 'fsim' (line 529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 4), 'fsim', zeros_call_result_177794)
    
    
    # Call to range(...): (line 531)
    # Processing the call arguments (line 531)
    # Getting the type of 'N' (line 531)
    N_177796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 19), 'N', False)
    int_177797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 531, 23), 'int')
    # Applying the binary operator '+' (line 531)
    result_add_177798 = python_operator(stypy.reporting.localization.Localization(__file__, 531, 19), '+', N_177796, int_177797)
    
    # Processing the call keyword arguments (line 531)
    kwargs_177799 = {}
    # Getting the type of 'range' (line 531)
    range_177795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 13), 'range', False)
    # Calling range(args, kwargs) (line 531)
    range_call_result_177800 = invoke(stypy.reporting.localization.Localization(__file__, 531, 13), range_177795, *[result_add_177798], **kwargs_177799)
    
    # Testing the type of a for loop iterable (line 531)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 531, 4), range_call_result_177800)
    # Getting the type of the for loop variable (line 531)
    for_loop_var_177801 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 531, 4), range_call_result_177800)
    # Assigning a type to the variable 'k' (line 531)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 531, 4), 'k', for_loop_var_177801)
    # SSA begins for a for statement (line 531)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Subscript (line 532):
    
    # Assigning a Call to a Subscript (line 532):
    
    # Call to func(...): (line 532)
    # Processing the call arguments (line 532)
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 532)
    k_177803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 27), 'k', False)
    # Getting the type of 'sim' (line 532)
    sim_177804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 23), 'sim', False)
    # Obtaining the member '__getitem__' of a type (line 532)
    getitem___177805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 532, 23), sim_177804, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 532)
    subscript_call_result_177806 = invoke(stypy.reporting.localization.Localization(__file__, 532, 23), getitem___177805, k_177803)
    
    # Processing the call keyword arguments (line 532)
    kwargs_177807 = {}
    # Getting the type of 'func' (line 532)
    func_177802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 18), 'func', False)
    # Calling func(args, kwargs) (line 532)
    func_call_result_177808 = invoke(stypy.reporting.localization.Localization(__file__, 532, 18), func_177802, *[subscript_call_result_177806], **kwargs_177807)
    
    # Getting the type of 'fsim' (line 532)
    fsim_177809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 8), 'fsim')
    # Getting the type of 'k' (line 532)
    k_177810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 13), 'k')
    # Storing an element on a container (line 532)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 532, 8), fsim_177809, (k_177810, func_call_result_177808))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 534):
    
    # Assigning a Call to a Name (line 534):
    
    # Call to argsort(...): (line 534)
    # Processing the call arguments (line 534)
    # Getting the type of 'fsim' (line 534)
    fsim_177813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 24), 'fsim', False)
    # Processing the call keyword arguments (line 534)
    kwargs_177814 = {}
    # Getting the type of 'numpy' (line 534)
    numpy_177811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 10), 'numpy', False)
    # Obtaining the member 'argsort' of a type (line 534)
    argsort_177812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 10), numpy_177811, 'argsort')
    # Calling argsort(args, kwargs) (line 534)
    argsort_call_result_177815 = invoke(stypy.reporting.localization.Localization(__file__, 534, 10), argsort_177812, *[fsim_177813], **kwargs_177814)
    
    # Assigning a type to the variable 'ind' (line 534)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 4), 'ind', argsort_call_result_177815)
    
    # Assigning a Call to a Name (line 535):
    
    # Assigning a Call to a Name (line 535):
    
    # Call to take(...): (line 535)
    # Processing the call arguments (line 535)
    # Getting the type of 'fsim' (line 535)
    fsim_177818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 22), 'fsim', False)
    # Getting the type of 'ind' (line 535)
    ind_177819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 28), 'ind', False)
    int_177820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 33), 'int')
    # Processing the call keyword arguments (line 535)
    kwargs_177821 = {}
    # Getting the type of 'numpy' (line 535)
    numpy_177816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 11), 'numpy', False)
    # Obtaining the member 'take' of a type (line 535)
    take_177817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 11), numpy_177816, 'take')
    # Calling take(args, kwargs) (line 535)
    take_call_result_177822 = invoke(stypy.reporting.localization.Localization(__file__, 535, 11), take_177817, *[fsim_177818, ind_177819, int_177820], **kwargs_177821)
    
    # Assigning a type to the variable 'fsim' (line 535)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 535, 4), 'fsim', take_call_result_177822)
    
    # Assigning a Call to a Name (line 537):
    
    # Assigning a Call to a Name (line 537):
    
    # Call to take(...): (line 537)
    # Processing the call arguments (line 537)
    # Getting the type of 'sim' (line 537)
    sim_177825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 21), 'sim', False)
    # Getting the type of 'ind' (line 537)
    ind_177826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 26), 'ind', False)
    int_177827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 537, 31), 'int')
    # Processing the call keyword arguments (line 537)
    kwargs_177828 = {}
    # Getting the type of 'numpy' (line 537)
    numpy_177823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 10), 'numpy', False)
    # Obtaining the member 'take' of a type (line 537)
    take_177824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 537, 10), numpy_177823, 'take')
    # Calling take(args, kwargs) (line 537)
    take_call_result_177829 = invoke(stypy.reporting.localization.Localization(__file__, 537, 10), take_177824, *[sim_177825, ind_177826, int_177827], **kwargs_177828)
    
    # Assigning a type to the variable 'sim' (line 537)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 537, 4), 'sim', take_call_result_177829)
    
    # Assigning a Num to a Name (line 539):
    
    # Assigning a Num to a Name (line 539):
    int_177830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 539, 17), 'int')
    # Assigning a type to the variable 'iterations' (line 539)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 539, 4), 'iterations', int_177830)
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    int_177831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 541, 18), 'int')
    # Getting the type of 'fcalls' (line 541)
    fcalls_177832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 11), 'fcalls')
    # Obtaining the member '__getitem__' of a type (line 541)
    getitem___177833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 11), fcalls_177832, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 541)
    subscript_call_result_177834 = invoke(stypy.reporting.localization.Localization(__file__, 541, 11), getitem___177833, int_177831)
    
    # Getting the type of 'maxfun' (line 541)
    maxfun_177835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 23), 'maxfun')
    # Applying the binary operator '<' (line 541)
    result_lt_177836 = python_operator(stypy.reporting.localization.Localization(__file__, 541, 11), '<', subscript_call_result_177834, maxfun_177835)
    
    
    # Getting the type of 'iterations' (line 541)
    iterations_177837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 34), 'iterations')
    # Getting the type of 'maxiter' (line 541)
    maxiter_177838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 47), 'maxiter')
    # Applying the binary operator '<' (line 541)
    result_lt_177839 = python_operator(stypy.reporting.localization.Localization(__file__, 541, 34), '<', iterations_177837, maxiter_177838)
    
    # Applying the binary operator 'and' (line 541)
    result_and_keyword_177840 = python_operator(stypy.reporting.localization.Localization(__file__, 541, 11), 'and', result_lt_177836, result_lt_177839)
    
    # Testing the type of an if condition (line 541)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 541, 4), result_and_keyword_177840)
    # SSA begins for while statement (line 541)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    
    # Evaluating a boolean operation
    
    
    # Call to max(...): (line 542)
    # Processing the call arguments (line 542)
    
    # Call to ravel(...): (line 542)
    # Processing the call arguments (line 542)
    
    # Call to abs(...): (line 542)
    # Processing the call arguments (line 542)
    
    # Obtaining the type of the subscript
    int_177847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 542, 48), 'int')
    slice_177848 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 542, 44), int_177847, None, None)
    # Getting the type of 'sim' (line 542)
    sim_177849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 44), 'sim', False)
    # Obtaining the member '__getitem__' of a type (line 542)
    getitem___177850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 44), sim_177849, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 542)
    subscript_call_result_177851 = invoke(stypy.reporting.localization.Localization(__file__, 542, 44), getitem___177850, slice_177848)
    
    
    # Obtaining the type of the subscript
    int_177852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 542, 58), 'int')
    # Getting the type of 'sim' (line 542)
    sim_177853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 54), 'sim', False)
    # Obtaining the member '__getitem__' of a type (line 542)
    getitem___177854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 54), sim_177853, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 542)
    subscript_call_result_177855 = invoke(stypy.reporting.localization.Localization(__file__, 542, 54), getitem___177854, int_177852)
    
    # Applying the binary operator '-' (line 542)
    result_sub_177856 = python_operator(stypy.reporting.localization.Localization(__file__, 542, 44), '-', subscript_call_result_177851, subscript_call_result_177855)
    
    # Processing the call keyword arguments (line 542)
    kwargs_177857 = {}
    # Getting the type of 'numpy' (line 542)
    numpy_177845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 34), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 542)
    abs_177846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 34), numpy_177845, 'abs')
    # Calling abs(args, kwargs) (line 542)
    abs_call_result_177858 = invoke(stypy.reporting.localization.Localization(__file__, 542, 34), abs_177846, *[result_sub_177856], **kwargs_177857)
    
    # Processing the call keyword arguments (line 542)
    kwargs_177859 = {}
    # Getting the type of 'numpy' (line 542)
    numpy_177843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 22), 'numpy', False)
    # Obtaining the member 'ravel' of a type (line 542)
    ravel_177844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 22), numpy_177843, 'ravel')
    # Calling ravel(args, kwargs) (line 542)
    ravel_call_result_177860 = invoke(stypy.reporting.localization.Localization(__file__, 542, 22), ravel_177844, *[abs_call_result_177858], **kwargs_177859)
    
    # Processing the call keyword arguments (line 542)
    kwargs_177861 = {}
    # Getting the type of 'numpy' (line 542)
    numpy_177841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 12), 'numpy', False)
    # Obtaining the member 'max' of a type (line 542)
    max_177842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 12), numpy_177841, 'max')
    # Calling max(args, kwargs) (line 542)
    max_call_result_177862 = invoke(stypy.reporting.localization.Localization(__file__, 542, 12), max_177842, *[ravel_call_result_177860], **kwargs_177861)
    
    # Getting the type of 'xatol' (line 542)
    xatol_177863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 67), 'xatol')
    # Applying the binary operator '<=' (line 542)
    result_le_177864 = python_operator(stypy.reporting.localization.Localization(__file__, 542, 12), '<=', max_call_result_177862, xatol_177863)
    
    
    
    # Call to max(...): (line 543)
    # Processing the call arguments (line 543)
    
    # Call to abs(...): (line 543)
    # Processing the call arguments (line 543)
    
    # Obtaining the type of the subscript
    int_177869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 543, 41), 'int')
    # Getting the type of 'fsim' (line 543)
    fsim_177870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 36), 'fsim', False)
    # Obtaining the member '__getitem__' of a type (line 543)
    getitem___177871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 36), fsim_177870, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 543)
    subscript_call_result_177872 = invoke(stypy.reporting.localization.Localization(__file__, 543, 36), getitem___177871, int_177869)
    
    
    # Obtaining the type of the subscript
    int_177873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 543, 51), 'int')
    slice_177874 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 543, 46), int_177873, None, None)
    # Getting the type of 'fsim' (line 543)
    fsim_177875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 46), 'fsim', False)
    # Obtaining the member '__getitem__' of a type (line 543)
    getitem___177876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 46), fsim_177875, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 543)
    subscript_call_result_177877 = invoke(stypy.reporting.localization.Localization(__file__, 543, 46), getitem___177876, slice_177874)
    
    # Applying the binary operator '-' (line 543)
    result_sub_177878 = python_operator(stypy.reporting.localization.Localization(__file__, 543, 36), '-', subscript_call_result_177872, subscript_call_result_177877)
    
    # Processing the call keyword arguments (line 543)
    kwargs_177879 = {}
    # Getting the type of 'numpy' (line 543)
    numpy_177867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 26), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 543)
    abs_177868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 26), numpy_177867, 'abs')
    # Calling abs(args, kwargs) (line 543)
    abs_call_result_177880 = invoke(stypy.reporting.localization.Localization(__file__, 543, 26), abs_177868, *[result_sub_177878], **kwargs_177879)
    
    # Processing the call keyword arguments (line 543)
    kwargs_177881 = {}
    # Getting the type of 'numpy' (line 543)
    numpy_177865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 16), 'numpy', False)
    # Obtaining the member 'max' of a type (line 543)
    max_177866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 16), numpy_177865, 'max')
    # Calling max(args, kwargs) (line 543)
    max_call_result_177882 = invoke(stypy.reporting.localization.Localization(__file__, 543, 16), max_177866, *[abs_call_result_177880], **kwargs_177881)
    
    # Getting the type of 'fatol' (line 543)
    fatol_177883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 60), 'fatol')
    # Applying the binary operator '<=' (line 543)
    result_le_177884 = python_operator(stypy.reporting.localization.Localization(__file__, 543, 16), '<=', max_call_result_177882, fatol_177883)
    
    # Applying the binary operator 'and' (line 542)
    result_and_keyword_177885 = python_operator(stypy.reporting.localization.Localization(__file__, 542, 12), 'and', result_le_177864, result_le_177884)
    
    # Testing the type of an if condition (line 542)
    if_condition_177886 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 542, 8), result_and_keyword_177885)
    # Assigning a type to the variable 'if_condition_177886' (line 542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 542, 8), 'if_condition_177886', if_condition_177886)
    # SSA begins for if statement (line 542)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 542)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 546):
    
    # Assigning a BinOp to a Name (line 546):
    
    # Call to reduce(...): (line 546)
    # Processing the call arguments (line 546)
    
    # Obtaining the type of the subscript
    int_177890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 546, 37), 'int')
    slice_177891 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 546, 32), None, int_177890, None)
    # Getting the type of 'sim' (line 546)
    sim_177892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 32), 'sim', False)
    # Obtaining the member '__getitem__' of a type (line 546)
    getitem___177893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 546, 32), sim_177892, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 546)
    subscript_call_result_177894 = invoke(stypy.reporting.localization.Localization(__file__, 546, 32), getitem___177893, slice_177891)
    
    int_177895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 546, 42), 'int')
    # Processing the call keyword arguments (line 546)
    kwargs_177896 = {}
    # Getting the type of 'numpy' (line 546)
    numpy_177887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 15), 'numpy', False)
    # Obtaining the member 'add' of a type (line 546)
    add_177888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 546, 15), numpy_177887, 'add')
    # Obtaining the member 'reduce' of a type (line 546)
    reduce_177889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 546, 15), add_177888, 'reduce')
    # Calling reduce(args, kwargs) (line 546)
    reduce_call_result_177897 = invoke(stypy.reporting.localization.Localization(__file__, 546, 15), reduce_177889, *[subscript_call_result_177894, int_177895], **kwargs_177896)
    
    # Getting the type of 'N' (line 546)
    N_177898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 47), 'N')
    # Applying the binary operator 'div' (line 546)
    result_div_177899 = python_operator(stypy.reporting.localization.Localization(__file__, 546, 15), 'div', reduce_call_result_177897, N_177898)
    
    # Assigning a type to the variable 'xbar' (line 546)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 546, 8), 'xbar', result_div_177899)
    
    # Assigning a BinOp to a Name (line 547):
    
    # Assigning a BinOp to a Name (line 547):
    int_177900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 14), 'int')
    # Getting the type of 'rho' (line 547)
    rho_177901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 18), 'rho')
    # Applying the binary operator '+' (line 547)
    result_add_177902 = python_operator(stypy.reporting.localization.Localization(__file__, 547, 14), '+', int_177900, rho_177901)
    
    # Getting the type of 'xbar' (line 547)
    xbar_177903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 25), 'xbar')
    # Applying the binary operator '*' (line 547)
    result_mul_177904 = python_operator(stypy.reporting.localization.Localization(__file__, 547, 13), '*', result_add_177902, xbar_177903)
    
    # Getting the type of 'rho' (line 547)
    rho_177905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 32), 'rho')
    
    # Obtaining the type of the subscript
    int_177906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 42), 'int')
    # Getting the type of 'sim' (line 547)
    sim_177907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 38), 'sim')
    # Obtaining the member '__getitem__' of a type (line 547)
    getitem___177908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 547, 38), sim_177907, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 547)
    subscript_call_result_177909 = invoke(stypy.reporting.localization.Localization(__file__, 547, 38), getitem___177908, int_177906)
    
    # Applying the binary operator '*' (line 547)
    result_mul_177910 = python_operator(stypy.reporting.localization.Localization(__file__, 547, 32), '*', rho_177905, subscript_call_result_177909)
    
    # Applying the binary operator '-' (line 547)
    result_sub_177911 = python_operator(stypy.reporting.localization.Localization(__file__, 547, 13), '-', result_mul_177904, result_mul_177910)
    
    # Assigning a type to the variable 'xr' (line 547)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 8), 'xr', result_sub_177911)
    
    # Assigning a Call to a Name (line 548):
    
    # Assigning a Call to a Name (line 548):
    
    # Call to func(...): (line 548)
    # Processing the call arguments (line 548)
    # Getting the type of 'xr' (line 548)
    xr_177913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 19), 'xr', False)
    # Processing the call keyword arguments (line 548)
    kwargs_177914 = {}
    # Getting the type of 'func' (line 548)
    func_177912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 14), 'func', False)
    # Calling func(args, kwargs) (line 548)
    func_call_result_177915 = invoke(stypy.reporting.localization.Localization(__file__, 548, 14), func_177912, *[xr_177913], **kwargs_177914)
    
    # Assigning a type to the variable 'fxr' (line 548)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 548, 8), 'fxr', func_call_result_177915)
    
    # Assigning a Num to a Name (line 549):
    
    # Assigning a Num to a Name (line 549):
    int_177916 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 549, 19), 'int')
    # Assigning a type to the variable 'doshrink' (line 549)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 8), 'doshrink', int_177916)
    
    
    # Getting the type of 'fxr' (line 551)
    fxr_177917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 11), 'fxr')
    
    # Obtaining the type of the subscript
    int_177918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 551, 22), 'int')
    # Getting the type of 'fsim' (line 551)
    fsim_177919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 17), 'fsim')
    # Obtaining the member '__getitem__' of a type (line 551)
    getitem___177920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 17), fsim_177919, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 551)
    subscript_call_result_177921 = invoke(stypy.reporting.localization.Localization(__file__, 551, 17), getitem___177920, int_177918)
    
    # Applying the binary operator '<' (line 551)
    result_lt_177922 = python_operator(stypy.reporting.localization.Localization(__file__, 551, 11), '<', fxr_177917, subscript_call_result_177921)
    
    # Testing the type of an if condition (line 551)
    if_condition_177923 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 551, 8), result_lt_177922)
    # Assigning a type to the variable 'if_condition_177923' (line 551)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 8), 'if_condition_177923', if_condition_177923)
    # SSA begins for if statement (line 551)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 552):
    
    # Assigning a BinOp to a Name (line 552):
    int_177924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 552, 18), 'int')
    # Getting the type of 'rho' (line 552)
    rho_177925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 22), 'rho')
    # Getting the type of 'chi' (line 552)
    chi_177926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 28), 'chi')
    # Applying the binary operator '*' (line 552)
    result_mul_177927 = python_operator(stypy.reporting.localization.Localization(__file__, 552, 22), '*', rho_177925, chi_177926)
    
    # Applying the binary operator '+' (line 552)
    result_add_177928 = python_operator(stypy.reporting.localization.Localization(__file__, 552, 18), '+', int_177924, result_mul_177927)
    
    # Getting the type of 'xbar' (line 552)
    xbar_177929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 35), 'xbar')
    # Applying the binary operator '*' (line 552)
    result_mul_177930 = python_operator(stypy.reporting.localization.Localization(__file__, 552, 17), '*', result_add_177928, xbar_177929)
    
    # Getting the type of 'rho' (line 552)
    rho_177931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 42), 'rho')
    # Getting the type of 'chi' (line 552)
    chi_177932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 48), 'chi')
    # Applying the binary operator '*' (line 552)
    result_mul_177933 = python_operator(stypy.reporting.localization.Localization(__file__, 552, 42), '*', rho_177931, chi_177932)
    
    
    # Obtaining the type of the subscript
    int_177934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 552, 58), 'int')
    # Getting the type of 'sim' (line 552)
    sim_177935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 54), 'sim')
    # Obtaining the member '__getitem__' of a type (line 552)
    getitem___177936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 54), sim_177935, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 552)
    subscript_call_result_177937 = invoke(stypy.reporting.localization.Localization(__file__, 552, 54), getitem___177936, int_177934)
    
    # Applying the binary operator '*' (line 552)
    result_mul_177938 = python_operator(stypy.reporting.localization.Localization(__file__, 552, 52), '*', result_mul_177933, subscript_call_result_177937)
    
    # Applying the binary operator '-' (line 552)
    result_sub_177939 = python_operator(stypy.reporting.localization.Localization(__file__, 552, 17), '-', result_mul_177930, result_mul_177938)
    
    # Assigning a type to the variable 'xe' (line 552)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 12), 'xe', result_sub_177939)
    
    # Assigning a Call to a Name (line 553):
    
    # Assigning a Call to a Name (line 553):
    
    # Call to func(...): (line 553)
    # Processing the call arguments (line 553)
    # Getting the type of 'xe' (line 553)
    xe_177941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 23), 'xe', False)
    # Processing the call keyword arguments (line 553)
    kwargs_177942 = {}
    # Getting the type of 'func' (line 553)
    func_177940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 18), 'func', False)
    # Calling func(args, kwargs) (line 553)
    func_call_result_177943 = invoke(stypy.reporting.localization.Localization(__file__, 553, 18), func_177940, *[xe_177941], **kwargs_177942)
    
    # Assigning a type to the variable 'fxe' (line 553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 12), 'fxe', func_call_result_177943)
    
    
    # Getting the type of 'fxe' (line 555)
    fxe_177944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 15), 'fxe')
    # Getting the type of 'fxr' (line 555)
    fxr_177945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 21), 'fxr')
    # Applying the binary operator '<' (line 555)
    result_lt_177946 = python_operator(stypy.reporting.localization.Localization(__file__, 555, 15), '<', fxe_177944, fxr_177945)
    
    # Testing the type of an if condition (line 555)
    if_condition_177947 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 555, 12), result_lt_177946)
    # Assigning a type to the variable 'if_condition_177947' (line 555)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 555, 12), 'if_condition_177947', if_condition_177947)
    # SSA begins for if statement (line 555)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 556):
    
    # Assigning a Name to a Subscript (line 556):
    # Getting the type of 'xe' (line 556)
    xe_177948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 26), 'xe')
    # Getting the type of 'sim' (line 556)
    sim_177949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 16), 'sim')
    int_177950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 556, 20), 'int')
    # Storing an element on a container (line 556)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 556, 16), sim_177949, (int_177950, xe_177948))
    
    # Assigning a Name to a Subscript (line 557):
    
    # Assigning a Name to a Subscript (line 557):
    # Getting the type of 'fxe' (line 557)
    fxe_177951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 27), 'fxe')
    # Getting the type of 'fsim' (line 557)
    fsim_177952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 16), 'fsim')
    int_177953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 557, 21), 'int')
    # Storing an element on a container (line 557)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 557, 16), fsim_177952, (int_177953, fxe_177951))
    # SSA branch for the else part of an if statement (line 555)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Subscript (line 559):
    
    # Assigning a Name to a Subscript (line 559):
    # Getting the type of 'xr' (line 559)
    xr_177954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 26), 'xr')
    # Getting the type of 'sim' (line 559)
    sim_177955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 16), 'sim')
    int_177956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 20), 'int')
    # Storing an element on a container (line 559)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 559, 16), sim_177955, (int_177956, xr_177954))
    
    # Assigning a Name to a Subscript (line 560):
    
    # Assigning a Name to a Subscript (line 560):
    # Getting the type of 'fxr' (line 560)
    fxr_177957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 27), 'fxr')
    # Getting the type of 'fsim' (line 560)
    fsim_177958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 16), 'fsim')
    int_177959 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 21), 'int')
    # Storing an element on a container (line 560)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 560, 16), fsim_177958, (int_177959, fxr_177957))
    # SSA join for if statement (line 555)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 551)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'fxr' (line 562)
    fxr_177960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 15), 'fxr')
    
    # Obtaining the type of the subscript
    int_177961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 26), 'int')
    # Getting the type of 'fsim' (line 562)
    fsim_177962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 21), 'fsim')
    # Obtaining the member '__getitem__' of a type (line 562)
    getitem___177963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 21), fsim_177962, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 562)
    subscript_call_result_177964 = invoke(stypy.reporting.localization.Localization(__file__, 562, 21), getitem___177963, int_177961)
    
    # Applying the binary operator '<' (line 562)
    result_lt_177965 = python_operator(stypy.reporting.localization.Localization(__file__, 562, 15), '<', fxr_177960, subscript_call_result_177964)
    
    # Testing the type of an if condition (line 562)
    if_condition_177966 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 562, 12), result_lt_177965)
    # Assigning a type to the variable 'if_condition_177966' (line 562)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 562, 12), 'if_condition_177966', if_condition_177966)
    # SSA begins for if statement (line 562)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 563):
    
    # Assigning a Name to a Subscript (line 563):
    # Getting the type of 'xr' (line 563)
    xr_177967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 26), 'xr')
    # Getting the type of 'sim' (line 563)
    sim_177968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 16), 'sim')
    int_177969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 563, 20), 'int')
    # Storing an element on a container (line 563)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 563, 16), sim_177968, (int_177969, xr_177967))
    
    # Assigning a Name to a Subscript (line 564):
    
    # Assigning a Name to a Subscript (line 564):
    # Getting the type of 'fxr' (line 564)
    fxr_177970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 27), 'fxr')
    # Getting the type of 'fsim' (line 564)
    fsim_177971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 16), 'fsim')
    int_177972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 564, 21), 'int')
    # Storing an element on a container (line 564)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 564, 16), fsim_177971, (int_177972, fxr_177970))
    # SSA branch for the else part of an if statement (line 562)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'fxr' (line 567)
    fxr_177973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 19), 'fxr')
    
    # Obtaining the type of the subscript
    int_177974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 567, 30), 'int')
    # Getting the type of 'fsim' (line 567)
    fsim_177975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 25), 'fsim')
    # Obtaining the member '__getitem__' of a type (line 567)
    getitem___177976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 25), fsim_177975, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 567)
    subscript_call_result_177977 = invoke(stypy.reporting.localization.Localization(__file__, 567, 25), getitem___177976, int_177974)
    
    # Applying the binary operator '<' (line 567)
    result_lt_177978 = python_operator(stypy.reporting.localization.Localization(__file__, 567, 19), '<', fxr_177973, subscript_call_result_177977)
    
    # Testing the type of an if condition (line 567)
    if_condition_177979 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 567, 16), result_lt_177978)
    # Assigning a type to the variable 'if_condition_177979' (line 567)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 16), 'if_condition_177979', if_condition_177979)
    # SSA begins for if statement (line 567)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 568):
    
    # Assigning a BinOp to a Name (line 568):
    int_177980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 568, 26), 'int')
    # Getting the type of 'psi' (line 568)
    psi_177981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 30), 'psi')
    # Getting the type of 'rho' (line 568)
    rho_177982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 36), 'rho')
    # Applying the binary operator '*' (line 568)
    result_mul_177983 = python_operator(stypy.reporting.localization.Localization(__file__, 568, 30), '*', psi_177981, rho_177982)
    
    # Applying the binary operator '+' (line 568)
    result_add_177984 = python_operator(stypy.reporting.localization.Localization(__file__, 568, 26), '+', int_177980, result_mul_177983)
    
    # Getting the type of 'xbar' (line 568)
    xbar_177985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 43), 'xbar')
    # Applying the binary operator '*' (line 568)
    result_mul_177986 = python_operator(stypy.reporting.localization.Localization(__file__, 568, 25), '*', result_add_177984, xbar_177985)
    
    # Getting the type of 'psi' (line 568)
    psi_177987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 50), 'psi')
    # Getting the type of 'rho' (line 568)
    rho_177988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 56), 'rho')
    # Applying the binary operator '*' (line 568)
    result_mul_177989 = python_operator(stypy.reporting.localization.Localization(__file__, 568, 50), '*', psi_177987, rho_177988)
    
    
    # Obtaining the type of the subscript
    int_177990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 568, 66), 'int')
    # Getting the type of 'sim' (line 568)
    sim_177991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 62), 'sim')
    # Obtaining the member '__getitem__' of a type (line 568)
    getitem___177992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 568, 62), sim_177991, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 568)
    subscript_call_result_177993 = invoke(stypy.reporting.localization.Localization(__file__, 568, 62), getitem___177992, int_177990)
    
    # Applying the binary operator '*' (line 568)
    result_mul_177994 = python_operator(stypy.reporting.localization.Localization(__file__, 568, 60), '*', result_mul_177989, subscript_call_result_177993)
    
    # Applying the binary operator '-' (line 568)
    result_sub_177995 = python_operator(stypy.reporting.localization.Localization(__file__, 568, 25), '-', result_mul_177986, result_mul_177994)
    
    # Assigning a type to the variable 'xc' (line 568)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 568, 20), 'xc', result_sub_177995)
    
    # Assigning a Call to a Name (line 569):
    
    # Assigning a Call to a Name (line 569):
    
    # Call to func(...): (line 569)
    # Processing the call arguments (line 569)
    # Getting the type of 'xc' (line 569)
    xc_177997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 31), 'xc', False)
    # Processing the call keyword arguments (line 569)
    kwargs_177998 = {}
    # Getting the type of 'func' (line 569)
    func_177996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 26), 'func', False)
    # Calling func(args, kwargs) (line 569)
    func_call_result_177999 = invoke(stypy.reporting.localization.Localization(__file__, 569, 26), func_177996, *[xc_177997], **kwargs_177998)
    
    # Assigning a type to the variable 'fxc' (line 569)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 569, 20), 'fxc', func_call_result_177999)
    
    
    # Getting the type of 'fxc' (line 571)
    fxc_178000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 23), 'fxc')
    # Getting the type of 'fxr' (line 571)
    fxr_178001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 30), 'fxr')
    # Applying the binary operator '<=' (line 571)
    result_le_178002 = python_operator(stypy.reporting.localization.Localization(__file__, 571, 23), '<=', fxc_178000, fxr_178001)
    
    # Testing the type of an if condition (line 571)
    if_condition_178003 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 571, 20), result_le_178002)
    # Assigning a type to the variable 'if_condition_178003' (line 571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 20), 'if_condition_178003', if_condition_178003)
    # SSA begins for if statement (line 571)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 572):
    
    # Assigning a Name to a Subscript (line 572):
    # Getting the type of 'xc' (line 572)
    xc_178004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 34), 'xc')
    # Getting the type of 'sim' (line 572)
    sim_178005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 24), 'sim')
    int_178006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 572, 28), 'int')
    # Storing an element on a container (line 572)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 572, 24), sim_178005, (int_178006, xc_178004))
    
    # Assigning a Name to a Subscript (line 573):
    
    # Assigning a Name to a Subscript (line 573):
    # Getting the type of 'fxc' (line 573)
    fxc_178007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 35), 'fxc')
    # Getting the type of 'fsim' (line 573)
    fsim_178008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 24), 'fsim')
    int_178009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 573, 29), 'int')
    # Storing an element on a container (line 573)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 573, 24), fsim_178008, (int_178009, fxc_178007))
    # SSA branch for the else part of an if statement (line 571)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Name (line 575):
    
    # Assigning a Num to a Name (line 575):
    int_178010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 575, 35), 'int')
    # Assigning a type to the variable 'doshrink' (line 575)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 575, 24), 'doshrink', int_178010)
    # SSA join for if statement (line 571)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 567)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 578):
    
    # Assigning a BinOp to a Name (line 578):
    int_178011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, 27), 'int')
    # Getting the type of 'psi' (line 578)
    psi_178012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 31), 'psi')
    # Applying the binary operator '-' (line 578)
    result_sub_178013 = python_operator(stypy.reporting.localization.Localization(__file__, 578, 27), '-', int_178011, psi_178012)
    
    # Getting the type of 'xbar' (line 578)
    xbar_178014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 38), 'xbar')
    # Applying the binary operator '*' (line 578)
    result_mul_178015 = python_operator(stypy.reporting.localization.Localization(__file__, 578, 26), '*', result_sub_178013, xbar_178014)
    
    # Getting the type of 'psi' (line 578)
    psi_178016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 45), 'psi')
    
    # Obtaining the type of the subscript
    int_178017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, 55), 'int')
    # Getting the type of 'sim' (line 578)
    sim_178018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 51), 'sim')
    # Obtaining the member '__getitem__' of a type (line 578)
    getitem___178019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 51), sim_178018, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 578)
    subscript_call_result_178020 = invoke(stypy.reporting.localization.Localization(__file__, 578, 51), getitem___178019, int_178017)
    
    # Applying the binary operator '*' (line 578)
    result_mul_178021 = python_operator(stypy.reporting.localization.Localization(__file__, 578, 45), '*', psi_178016, subscript_call_result_178020)
    
    # Applying the binary operator '+' (line 578)
    result_add_178022 = python_operator(stypy.reporting.localization.Localization(__file__, 578, 26), '+', result_mul_178015, result_mul_178021)
    
    # Assigning a type to the variable 'xcc' (line 578)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 20), 'xcc', result_add_178022)
    
    # Assigning a Call to a Name (line 579):
    
    # Assigning a Call to a Name (line 579):
    
    # Call to func(...): (line 579)
    # Processing the call arguments (line 579)
    # Getting the type of 'xcc' (line 579)
    xcc_178024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 32), 'xcc', False)
    # Processing the call keyword arguments (line 579)
    kwargs_178025 = {}
    # Getting the type of 'func' (line 579)
    func_178023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 27), 'func', False)
    # Calling func(args, kwargs) (line 579)
    func_call_result_178026 = invoke(stypy.reporting.localization.Localization(__file__, 579, 27), func_178023, *[xcc_178024], **kwargs_178025)
    
    # Assigning a type to the variable 'fxcc' (line 579)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 579, 20), 'fxcc', func_call_result_178026)
    
    
    # Getting the type of 'fxcc' (line 581)
    fxcc_178027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 23), 'fxcc')
    
    # Obtaining the type of the subscript
    int_178028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 581, 35), 'int')
    # Getting the type of 'fsim' (line 581)
    fsim_178029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 30), 'fsim')
    # Obtaining the member '__getitem__' of a type (line 581)
    getitem___178030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 30), fsim_178029, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 581)
    subscript_call_result_178031 = invoke(stypy.reporting.localization.Localization(__file__, 581, 30), getitem___178030, int_178028)
    
    # Applying the binary operator '<' (line 581)
    result_lt_178032 = python_operator(stypy.reporting.localization.Localization(__file__, 581, 23), '<', fxcc_178027, subscript_call_result_178031)
    
    # Testing the type of an if condition (line 581)
    if_condition_178033 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 581, 20), result_lt_178032)
    # Assigning a type to the variable 'if_condition_178033' (line 581)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 20), 'if_condition_178033', if_condition_178033)
    # SSA begins for if statement (line 581)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 582):
    
    # Assigning a Name to a Subscript (line 582):
    # Getting the type of 'xcc' (line 582)
    xcc_178034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 34), 'xcc')
    # Getting the type of 'sim' (line 582)
    sim_178035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 24), 'sim')
    int_178036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 582, 28), 'int')
    # Storing an element on a container (line 582)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 582, 24), sim_178035, (int_178036, xcc_178034))
    
    # Assigning a Name to a Subscript (line 583):
    
    # Assigning a Name to a Subscript (line 583):
    # Getting the type of 'fxcc' (line 583)
    fxcc_178037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 35), 'fxcc')
    # Getting the type of 'fsim' (line 583)
    fsim_178038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 24), 'fsim')
    int_178039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 583, 29), 'int')
    # Storing an element on a container (line 583)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 583, 24), fsim_178038, (int_178039, fxcc_178037))
    # SSA branch for the else part of an if statement (line 581)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Name (line 585):
    
    # Assigning a Num to a Name (line 585):
    int_178040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 585, 35), 'int')
    # Assigning a type to the variable 'doshrink' (line 585)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 585, 24), 'doshrink', int_178040)
    # SSA join for if statement (line 581)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 567)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'doshrink' (line 587)
    doshrink_178041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 19), 'doshrink')
    # Testing the type of an if condition (line 587)
    if_condition_178042 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 587, 16), doshrink_178041)
    # Assigning a type to the variable 'if_condition_178042' (line 587)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 587, 16), 'if_condition_178042', if_condition_178042)
    # SSA begins for if statement (line 587)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'one2np1' (line 588)
    one2np1_178043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 29), 'one2np1')
    # Testing the type of a for loop iterable (line 588)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 588, 20), one2np1_178043)
    # Getting the type of the for loop variable (line 588)
    for_loop_var_178044 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 588, 20), one2np1_178043)
    # Assigning a type to the variable 'j' (line 588)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 20), 'j', for_loop_var_178044)
    # SSA begins for a for statement (line 588)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Subscript (line 589):
    
    # Assigning a BinOp to a Subscript (line 589):
    
    # Obtaining the type of the subscript
    int_178045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 589, 37), 'int')
    # Getting the type of 'sim' (line 589)
    sim_178046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 33), 'sim')
    # Obtaining the member '__getitem__' of a type (line 589)
    getitem___178047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 33), sim_178046, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 589)
    subscript_call_result_178048 = invoke(stypy.reporting.localization.Localization(__file__, 589, 33), getitem___178047, int_178045)
    
    # Getting the type of 'sigma' (line 589)
    sigma_178049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 42), 'sigma')
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 589)
    j_178050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 55), 'j')
    # Getting the type of 'sim' (line 589)
    sim_178051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 51), 'sim')
    # Obtaining the member '__getitem__' of a type (line 589)
    getitem___178052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 51), sim_178051, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 589)
    subscript_call_result_178053 = invoke(stypy.reporting.localization.Localization(__file__, 589, 51), getitem___178052, j_178050)
    
    
    # Obtaining the type of the subscript
    int_178054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 589, 64), 'int')
    # Getting the type of 'sim' (line 589)
    sim_178055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 60), 'sim')
    # Obtaining the member '__getitem__' of a type (line 589)
    getitem___178056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 60), sim_178055, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 589)
    subscript_call_result_178057 = invoke(stypy.reporting.localization.Localization(__file__, 589, 60), getitem___178056, int_178054)
    
    # Applying the binary operator '-' (line 589)
    result_sub_178058 = python_operator(stypy.reporting.localization.Localization(__file__, 589, 51), '-', subscript_call_result_178053, subscript_call_result_178057)
    
    # Applying the binary operator '*' (line 589)
    result_mul_178059 = python_operator(stypy.reporting.localization.Localization(__file__, 589, 42), '*', sigma_178049, result_sub_178058)
    
    # Applying the binary operator '+' (line 589)
    result_add_178060 = python_operator(stypy.reporting.localization.Localization(__file__, 589, 33), '+', subscript_call_result_178048, result_mul_178059)
    
    # Getting the type of 'sim' (line 589)
    sim_178061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 24), 'sim')
    # Getting the type of 'j' (line 589)
    j_178062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 28), 'j')
    # Storing an element on a container (line 589)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 589, 24), sim_178061, (j_178062, result_add_178060))
    
    # Assigning a Call to a Subscript (line 590):
    
    # Assigning a Call to a Subscript (line 590):
    
    # Call to func(...): (line 590)
    # Processing the call arguments (line 590)
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 590)
    j_178064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 43), 'j', False)
    # Getting the type of 'sim' (line 590)
    sim_178065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 39), 'sim', False)
    # Obtaining the member '__getitem__' of a type (line 590)
    getitem___178066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 39), sim_178065, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 590)
    subscript_call_result_178067 = invoke(stypy.reporting.localization.Localization(__file__, 590, 39), getitem___178066, j_178064)
    
    # Processing the call keyword arguments (line 590)
    kwargs_178068 = {}
    # Getting the type of 'func' (line 590)
    func_178063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 34), 'func', False)
    # Calling func(args, kwargs) (line 590)
    func_call_result_178069 = invoke(stypy.reporting.localization.Localization(__file__, 590, 34), func_178063, *[subscript_call_result_178067], **kwargs_178068)
    
    # Getting the type of 'fsim' (line 590)
    fsim_178070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 24), 'fsim')
    # Getting the type of 'j' (line 590)
    j_178071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 29), 'j')
    # Storing an element on a container (line 590)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 590, 24), fsim_178070, (j_178071, func_call_result_178069))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 587)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 562)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 551)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 592):
    
    # Assigning a Call to a Name (line 592):
    
    # Call to argsort(...): (line 592)
    # Processing the call arguments (line 592)
    # Getting the type of 'fsim' (line 592)
    fsim_178074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 28), 'fsim', False)
    # Processing the call keyword arguments (line 592)
    kwargs_178075 = {}
    # Getting the type of 'numpy' (line 592)
    numpy_178072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 14), 'numpy', False)
    # Obtaining the member 'argsort' of a type (line 592)
    argsort_178073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 14), numpy_178072, 'argsort')
    # Calling argsort(args, kwargs) (line 592)
    argsort_call_result_178076 = invoke(stypy.reporting.localization.Localization(__file__, 592, 14), argsort_178073, *[fsim_178074], **kwargs_178075)
    
    # Assigning a type to the variable 'ind' (line 592)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 592, 8), 'ind', argsort_call_result_178076)
    
    # Assigning a Call to a Name (line 593):
    
    # Assigning a Call to a Name (line 593):
    
    # Call to take(...): (line 593)
    # Processing the call arguments (line 593)
    # Getting the type of 'sim' (line 593)
    sim_178079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 25), 'sim', False)
    # Getting the type of 'ind' (line 593)
    ind_178080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 30), 'ind', False)
    int_178081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 593, 35), 'int')
    # Processing the call keyword arguments (line 593)
    kwargs_178082 = {}
    # Getting the type of 'numpy' (line 593)
    numpy_178077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 14), 'numpy', False)
    # Obtaining the member 'take' of a type (line 593)
    take_178078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 14), numpy_178077, 'take')
    # Calling take(args, kwargs) (line 593)
    take_call_result_178083 = invoke(stypy.reporting.localization.Localization(__file__, 593, 14), take_178078, *[sim_178079, ind_178080, int_178081], **kwargs_178082)
    
    # Assigning a type to the variable 'sim' (line 593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 8), 'sim', take_call_result_178083)
    
    # Assigning a Call to a Name (line 594):
    
    # Assigning a Call to a Name (line 594):
    
    # Call to take(...): (line 594)
    # Processing the call arguments (line 594)
    # Getting the type of 'fsim' (line 594)
    fsim_178086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 26), 'fsim', False)
    # Getting the type of 'ind' (line 594)
    ind_178087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 32), 'ind', False)
    int_178088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 594, 37), 'int')
    # Processing the call keyword arguments (line 594)
    kwargs_178089 = {}
    # Getting the type of 'numpy' (line 594)
    numpy_178084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 15), 'numpy', False)
    # Obtaining the member 'take' of a type (line 594)
    take_178085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 15), numpy_178084, 'take')
    # Calling take(args, kwargs) (line 594)
    take_call_result_178090 = invoke(stypy.reporting.localization.Localization(__file__, 594, 15), take_178085, *[fsim_178086, ind_178087, int_178088], **kwargs_178089)
    
    # Assigning a type to the variable 'fsim' (line 594)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 8), 'fsim', take_call_result_178090)
    
    # Type idiom detected: calculating its left and rigth part (line 595)
    # Getting the type of 'callback' (line 595)
    callback_178091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 8), 'callback')
    # Getting the type of 'None' (line 595)
    None_178092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 27), 'None')
    
    (may_be_178093, more_types_in_union_178094) = may_not_be_none(callback_178091, None_178092)

    if may_be_178093:

        if more_types_in_union_178094:
            # Runtime conditional SSA (line 595)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to callback(...): (line 596)
        # Processing the call arguments (line 596)
        
        # Obtaining the type of the subscript
        int_178096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 596, 25), 'int')
        # Getting the type of 'sim' (line 596)
        sim_178097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 21), 'sim', False)
        # Obtaining the member '__getitem__' of a type (line 596)
        getitem___178098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 596, 21), sim_178097, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 596)
        subscript_call_result_178099 = invoke(stypy.reporting.localization.Localization(__file__, 596, 21), getitem___178098, int_178096)
        
        # Processing the call keyword arguments (line 596)
        kwargs_178100 = {}
        # Getting the type of 'callback' (line 596)
        callback_178095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 12), 'callback', False)
        # Calling callback(args, kwargs) (line 596)
        callback_call_result_178101 = invoke(stypy.reporting.localization.Localization(__file__, 596, 12), callback_178095, *[subscript_call_result_178099], **kwargs_178100)
        

        if more_types_in_union_178094:
            # SSA join for if statement (line 595)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Getting the type of 'iterations' (line 597)
    iterations_178102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 8), 'iterations')
    int_178103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 597, 22), 'int')
    # Applying the binary operator '+=' (line 597)
    result_iadd_178104 = python_operator(stypy.reporting.localization.Localization(__file__, 597, 8), '+=', iterations_178102, int_178103)
    # Assigning a type to the variable 'iterations' (line 597)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 597, 8), 'iterations', result_iadd_178104)
    
    
    # Getting the type of 'retall' (line 598)
    retall_178105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 11), 'retall')
    # Testing the type of an if condition (line 598)
    if_condition_178106 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 598, 8), retall_178105)
    # Assigning a type to the variable 'if_condition_178106' (line 598)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 8), 'if_condition_178106', if_condition_178106)
    # SSA begins for if statement (line 598)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 599)
    # Processing the call arguments (line 599)
    
    # Obtaining the type of the subscript
    int_178109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 599, 31), 'int')
    # Getting the type of 'sim' (line 599)
    sim_178110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 27), 'sim', False)
    # Obtaining the member '__getitem__' of a type (line 599)
    getitem___178111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 27), sim_178110, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 599)
    subscript_call_result_178112 = invoke(stypy.reporting.localization.Localization(__file__, 599, 27), getitem___178111, int_178109)
    
    # Processing the call keyword arguments (line 599)
    kwargs_178113 = {}
    # Getting the type of 'allvecs' (line 599)
    allvecs_178107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 12), 'allvecs', False)
    # Obtaining the member 'append' of a type (line 599)
    append_178108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 12), allvecs_178107, 'append')
    # Calling append(args, kwargs) (line 599)
    append_call_result_178114 = invoke(stypy.reporting.localization.Localization(__file__, 599, 12), append_178108, *[subscript_call_result_178112], **kwargs_178113)
    
    # SSA join for if statement (line 598)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for while statement (line 541)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 601):
    
    # Assigning a Subscript to a Name (line 601):
    
    # Obtaining the type of the subscript
    int_178115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 601, 12), 'int')
    # Getting the type of 'sim' (line 601)
    sim_178116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 8), 'sim')
    # Obtaining the member '__getitem__' of a type (line 601)
    getitem___178117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 601, 8), sim_178116, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 601)
    subscript_call_result_178118 = invoke(stypy.reporting.localization.Localization(__file__, 601, 8), getitem___178117, int_178115)
    
    # Assigning a type to the variable 'x' (line 601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 601, 4), 'x', subscript_call_result_178118)
    
    # Assigning a Call to a Name (line 602):
    
    # Assigning a Call to a Name (line 602):
    
    # Call to min(...): (line 602)
    # Processing the call arguments (line 602)
    # Getting the type of 'fsim' (line 602)
    fsim_178121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 21), 'fsim', False)
    # Processing the call keyword arguments (line 602)
    kwargs_178122 = {}
    # Getting the type of 'numpy' (line 602)
    numpy_178119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 11), 'numpy', False)
    # Obtaining the member 'min' of a type (line 602)
    min_178120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 11), numpy_178119, 'min')
    # Calling min(args, kwargs) (line 602)
    min_call_result_178123 = invoke(stypy.reporting.localization.Localization(__file__, 602, 11), min_178120, *[fsim_178121], **kwargs_178122)
    
    # Assigning a type to the variable 'fval' (line 602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 4), 'fval', min_call_result_178123)
    
    # Assigning a Num to a Name (line 603):
    
    # Assigning a Num to a Name (line 603):
    int_178124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 15), 'int')
    # Assigning a type to the variable 'warnflag' (line 603)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 603, 4), 'warnflag', int_178124)
    
    
    
    # Obtaining the type of the subscript
    int_178125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 14), 'int')
    # Getting the type of 'fcalls' (line 605)
    fcalls_178126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 7), 'fcalls')
    # Obtaining the member '__getitem__' of a type (line 605)
    getitem___178127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 7), fcalls_178126, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 605)
    subscript_call_result_178128 = invoke(stypy.reporting.localization.Localization(__file__, 605, 7), getitem___178127, int_178125)
    
    # Getting the type of 'maxfun' (line 605)
    maxfun_178129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 20), 'maxfun')
    # Applying the binary operator '>=' (line 605)
    result_ge_178130 = python_operator(stypy.reporting.localization.Localization(__file__, 605, 7), '>=', subscript_call_result_178128, maxfun_178129)
    
    # Testing the type of an if condition (line 605)
    if_condition_178131 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 605, 4), result_ge_178130)
    # Assigning a type to the variable 'if_condition_178131' (line 605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 4), 'if_condition_178131', if_condition_178131)
    # SSA begins for if statement (line 605)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 606):
    
    # Assigning a Num to a Name (line 606):
    int_178132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 606, 19), 'int')
    # Assigning a type to the variable 'warnflag' (line 606)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 8), 'warnflag', int_178132)
    
    # Assigning a Subscript to a Name (line 607):
    
    # Assigning a Subscript to a Name (line 607):
    
    # Obtaining the type of the subscript
    str_178133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 607, 30), 'str', 'maxfev')
    # Getting the type of '_status_message' (line 607)
    _status_message_178134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 14), '_status_message')
    # Obtaining the member '__getitem__' of a type (line 607)
    getitem___178135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 14), _status_message_178134, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 607)
    subscript_call_result_178136 = invoke(stypy.reporting.localization.Localization(__file__, 607, 14), getitem___178135, str_178133)
    
    # Assigning a type to the variable 'msg' (line 607)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 8), 'msg', subscript_call_result_178136)
    
    # Getting the type of 'disp' (line 608)
    disp_178137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 11), 'disp')
    # Testing the type of an if condition (line 608)
    if_condition_178138 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 608, 8), disp_178137)
    # Assigning a type to the variable 'if_condition_178138' (line 608)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 608, 8), 'if_condition_178138', if_condition_178138)
    # SSA begins for if statement (line 608)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 609)
    # Processing the call arguments (line 609)
    str_178140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 609, 18), 'str', 'Warning: ')
    # Getting the type of 'msg' (line 609)
    msg_178141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 32), 'msg', False)
    # Applying the binary operator '+' (line 609)
    result_add_178142 = python_operator(stypy.reporting.localization.Localization(__file__, 609, 18), '+', str_178140, msg_178141)
    
    # Processing the call keyword arguments (line 609)
    kwargs_178143 = {}
    # Getting the type of 'print' (line 609)
    print_178139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 12), 'print', False)
    # Calling print(args, kwargs) (line 609)
    print_call_result_178144 = invoke(stypy.reporting.localization.Localization(__file__, 609, 12), print_178139, *[result_add_178142], **kwargs_178143)
    
    # SSA join for if statement (line 608)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 605)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'iterations' (line 610)
    iterations_178145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 9), 'iterations')
    # Getting the type of 'maxiter' (line 610)
    maxiter_178146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 23), 'maxiter')
    # Applying the binary operator '>=' (line 610)
    result_ge_178147 = python_operator(stypy.reporting.localization.Localization(__file__, 610, 9), '>=', iterations_178145, maxiter_178146)
    
    # Testing the type of an if condition (line 610)
    if_condition_178148 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 610, 9), result_ge_178147)
    # Assigning a type to the variable 'if_condition_178148' (line 610)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 610, 9), 'if_condition_178148', if_condition_178148)
    # SSA begins for if statement (line 610)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 611):
    
    # Assigning a Num to a Name (line 611):
    int_178149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 611, 19), 'int')
    # Assigning a type to the variable 'warnflag' (line 611)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 611, 8), 'warnflag', int_178149)
    
    # Assigning a Subscript to a Name (line 612):
    
    # Assigning a Subscript to a Name (line 612):
    
    # Obtaining the type of the subscript
    str_178150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 612, 30), 'str', 'maxiter')
    # Getting the type of '_status_message' (line 612)
    _status_message_178151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 14), '_status_message')
    # Obtaining the member '__getitem__' of a type (line 612)
    getitem___178152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 14), _status_message_178151, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 612)
    subscript_call_result_178153 = invoke(stypy.reporting.localization.Localization(__file__, 612, 14), getitem___178152, str_178150)
    
    # Assigning a type to the variable 'msg' (line 612)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 612, 8), 'msg', subscript_call_result_178153)
    
    # Getting the type of 'disp' (line 613)
    disp_178154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 11), 'disp')
    # Testing the type of an if condition (line 613)
    if_condition_178155 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 613, 8), disp_178154)
    # Assigning a type to the variable 'if_condition_178155' (line 613)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 613, 8), 'if_condition_178155', if_condition_178155)
    # SSA begins for if statement (line 613)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 614)
    # Processing the call arguments (line 614)
    str_178157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, 18), 'str', 'Warning: ')
    # Getting the type of 'msg' (line 614)
    msg_178158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 32), 'msg', False)
    # Applying the binary operator '+' (line 614)
    result_add_178159 = python_operator(stypy.reporting.localization.Localization(__file__, 614, 18), '+', str_178157, msg_178158)
    
    # Processing the call keyword arguments (line 614)
    kwargs_178160 = {}
    # Getting the type of 'print' (line 614)
    print_178156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 12), 'print', False)
    # Calling print(args, kwargs) (line 614)
    print_call_result_178161 = invoke(stypy.reporting.localization.Localization(__file__, 614, 12), print_178156, *[result_add_178159], **kwargs_178160)
    
    # SSA join for if statement (line 613)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 610)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Subscript to a Name (line 616):
    
    # Assigning a Subscript to a Name (line 616):
    
    # Obtaining the type of the subscript
    str_178162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 30), 'str', 'success')
    # Getting the type of '_status_message' (line 616)
    _status_message_178163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 14), '_status_message')
    # Obtaining the member '__getitem__' of a type (line 616)
    getitem___178164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 14), _status_message_178163, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 616)
    subscript_call_result_178165 = invoke(stypy.reporting.localization.Localization(__file__, 616, 14), getitem___178164, str_178162)
    
    # Assigning a type to the variable 'msg' (line 616)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 616, 8), 'msg', subscript_call_result_178165)
    
    # Getting the type of 'disp' (line 617)
    disp_178166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 11), 'disp')
    # Testing the type of an if condition (line 617)
    if_condition_178167 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 617, 8), disp_178166)
    # Assigning a type to the variable 'if_condition_178167' (line 617)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 617, 8), 'if_condition_178167', if_condition_178167)
    # SSA begins for if statement (line 617)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 618)
    # Processing the call arguments (line 618)
    # Getting the type of 'msg' (line 618)
    msg_178169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 18), 'msg', False)
    # Processing the call keyword arguments (line 618)
    kwargs_178170 = {}
    # Getting the type of 'print' (line 618)
    print_178168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 12), 'print', False)
    # Calling print(args, kwargs) (line 618)
    print_call_result_178171 = invoke(stypy.reporting.localization.Localization(__file__, 618, 12), print_178168, *[msg_178169], **kwargs_178170)
    
    
    # Call to print(...): (line 619)
    # Processing the call arguments (line 619)
    str_178173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 619, 18), 'str', '         Current function value: %f')
    # Getting the type of 'fval' (line 619)
    fval_178174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 58), 'fval', False)
    # Applying the binary operator '%' (line 619)
    result_mod_178175 = python_operator(stypy.reporting.localization.Localization(__file__, 619, 18), '%', str_178173, fval_178174)
    
    # Processing the call keyword arguments (line 619)
    kwargs_178176 = {}
    # Getting the type of 'print' (line 619)
    print_178172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 12), 'print', False)
    # Calling print(args, kwargs) (line 619)
    print_call_result_178177 = invoke(stypy.reporting.localization.Localization(__file__, 619, 12), print_178172, *[result_mod_178175], **kwargs_178176)
    
    
    # Call to print(...): (line 620)
    # Processing the call arguments (line 620)
    str_178179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 620, 18), 'str', '         Iterations: %d')
    # Getting the type of 'iterations' (line 620)
    iterations_178180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 46), 'iterations', False)
    # Applying the binary operator '%' (line 620)
    result_mod_178181 = python_operator(stypy.reporting.localization.Localization(__file__, 620, 18), '%', str_178179, iterations_178180)
    
    # Processing the call keyword arguments (line 620)
    kwargs_178182 = {}
    # Getting the type of 'print' (line 620)
    print_178178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 12), 'print', False)
    # Calling print(args, kwargs) (line 620)
    print_call_result_178183 = invoke(stypy.reporting.localization.Localization(__file__, 620, 12), print_178178, *[result_mod_178181], **kwargs_178182)
    
    
    # Call to print(...): (line 621)
    # Processing the call arguments (line 621)
    str_178185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 621, 18), 'str', '         Function evaluations: %d')
    
    # Obtaining the type of the subscript
    int_178186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 621, 63), 'int')
    # Getting the type of 'fcalls' (line 621)
    fcalls_178187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 56), 'fcalls', False)
    # Obtaining the member '__getitem__' of a type (line 621)
    getitem___178188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 56), fcalls_178187, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 621)
    subscript_call_result_178189 = invoke(stypy.reporting.localization.Localization(__file__, 621, 56), getitem___178188, int_178186)
    
    # Applying the binary operator '%' (line 621)
    result_mod_178190 = python_operator(stypy.reporting.localization.Localization(__file__, 621, 18), '%', str_178185, subscript_call_result_178189)
    
    # Processing the call keyword arguments (line 621)
    kwargs_178191 = {}
    # Getting the type of 'print' (line 621)
    print_178184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 12), 'print', False)
    # Calling print(args, kwargs) (line 621)
    print_call_result_178192 = invoke(stypy.reporting.localization.Localization(__file__, 621, 12), print_178184, *[result_mod_178190], **kwargs_178191)
    
    # SSA join for if statement (line 617)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 610)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 605)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 623):
    
    # Assigning a Call to a Name (line 623):
    
    # Call to OptimizeResult(...): (line 623)
    # Processing the call keyword arguments (line 623)
    # Getting the type of 'fval' (line 623)
    fval_178194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 32), 'fval', False)
    keyword_178195 = fval_178194
    # Getting the type of 'iterations' (line 623)
    iterations_178196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 42), 'iterations', False)
    keyword_178197 = iterations_178196
    
    # Obtaining the type of the subscript
    int_178198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 623, 66), 'int')
    # Getting the type of 'fcalls' (line 623)
    fcalls_178199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 59), 'fcalls', False)
    # Obtaining the member '__getitem__' of a type (line 623)
    getitem___178200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 623, 59), fcalls_178199, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 623)
    subscript_call_result_178201 = invoke(stypy.reporting.localization.Localization(__file__, 623, 59), getitem___178200, int_178198)
    
    keyword_178202 = subscript_call_result_178201
    # Getting the type of 'warnflag' (line 624)
    warnflag_178203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 35), 'warnflag', False)
    keyword_178204 = warnflag_178203
    
    # Getting the type of 'warnflag' (line 624)
    warnflag_178205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 54), 'warnflag', False)
    int_178206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 624, 66), 'int')
    # Applying the binary operator '==' (line 624)
    result_eq_178207 = python_operator(stypy.reporting.localization.Localization(__file__, 624, 54), '==', warnflag_178205, int_178206)
    
    keyword_178208 = result_eq_178207
    # Getting the type of 'msg' (line 625)
    msg_178209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 36), 'msg', False)
    keyword_178210 = msg_178209
    # Getting the type of 'x' (line 625)
    x_178211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 43), 'x', False)
    keyword_178212 = x_178211
    
    # Obtaining an instance of the builtin type 'tuple' (line 625)
    tuple_178213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 625, 61), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 625)
    # Adding element type (line 625)
    # Getting the type of 'sim' (line 625)
    sim_178214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 61), 'sim', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 625, 61), tuple_178213, sim_178214)
    # Adding element type (line 625)
    # Getting the type of 'fsim' (line 625)
    fsim_178215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 66), 'fsim', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 625, 61), tuple_178213, fsim_178215)
    
    keyword_178216 = tuple_178213
    kwargs_178217 = {'status': keyword_178204, 'success': keyword_178208, 'final_simplex': keyword_178216, 'nfev': keyword_178202, 'fun': keyword_178195, 'x': keyword_178212, 'message': keyword_178210, 'nit': keyword_178197}
    # Getting the type of 'OptimizeResult' (line 623)
    OptimizeResult_178193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 13), 'OptimizeResult', False)
    # Calling OptimizeResult(args, kwargs) (line 623)
    OptimizeResult_call_result_178218 = invoke(stypy.reporting.localization.Localization(__file__, 623, 13), OptimizeResult_178193, *[], **kwargs_178217)
    
    # Assigning a type to the variable 'result' (line 623)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 623, 4), 'result', OptimizeResult_call_result_178218)
    
    # Getting the type of 'retall' (line 626)
    retall_178219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 7), 'retall')
    # Testing the type of an if condition (line 626)
    if_condition_178220 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 626, 4), retall_178219)
    # Assigning a type to the variable 'if_condition_178220' (line 626)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 4), 'if_condition_178220', if_condition_178220)
    # SSA begins for if statement (line 626)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 627):
    
    # Assigning a Name to a Subscript (line 627):
    # Getting the type of 'allvecs' (line 627)
    allvecs_178221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 28), 'allvecs')
    # Getting the type of 'result' (line 627)
    result_178222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 8), 'result')
    str_178223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 627, 15), 'str', 'allvecs')
    # Storing an element on a container (line 627)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 627, 8), result_178222, (str_178223, allvecs_178221))
    # SSA join for if statement (line 626)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'result' (line 628)
    result_178224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 628)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 4), 'stypy_return_type', result_178224)
    
    # ################# End of '_minimize_neldermead(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_minimize_neldermead' in the type store
    # Getting the type of 'stypy_return_type' (line 421)
    stypy_return_type_178225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_178225)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_minimize_neldermead'
    return stypy_return_type_178225

# Assigning a type to the variable '_minimize_neldermead' (line 421)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 421, 0), '_minimize_neldermead', _minimize_neldermead)

@norecursion
def _approx_fprime_helper(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 631)
    tuple_178226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 631, 47), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 631)
    
    # Getting the type of 'None' (line 631)
    None_178227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 54), 'None')
    defaults = [tuple_178226, None_178227]
    # Create a new context for function '_approx_fprime_helper'
    module_type_store = module_type_store.open_function_context('_approx_fprime_helper', 631, 0, False)
    
    # Passed parameters checking function
    _approx_fprime_helper.stypy_localization = localization
    _approx_fprime_helper.stypy_type_of_self = None
    _approx_fprime_helper.stypy_type_store = module_type_store
    _approx_fprime_helper.stypy_function_name = '_approx_fprime_helper'
    _approx_fprime_helper.stypy_param_names_list = ['xk', 'f', 'epsilon', 'args', 'f0']
    _approx_fprime_helper.stypy_varargs_param_name = None
    _approx_fprime_helper.stypy_kwargs_param_name = None
    _approx_fprime_helper.stypy_call_defaults = defaults
    _approx_fprime_helper.stypy_call_varargs = varargs
    _approx_fprime_helper.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_approx_fprime_helper', ['xk', 'f', 'epsilon', 'args', 'f0'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_approx_fprime_helper', localization, ['xk', 'f', 'epsilon', 'args', 'f0'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_approx_fprime_helper(...)' code ##################

    str_178228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 635, (-1)), 'str', '\n    See ``approx_fprime``.  An optional initial function value arg is added.\n\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 636)
    # Getting the type of 'f0' (line 636)
    f0_178229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 7), 'f0')
    # Getting the type of 'None' (line 636)
    None_178230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 13), 'None')
    
    (may_be_178231, more_types_in_union_178232) = may_be_none(f0_178229, None_178230)

    if may_be_178231:

        if more_types_in_union_178232:
            # Runtime conditional SSA (line 636)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 637):
        
        # Assigning a Call to a Name (line 637):
        
        # Call to f(...): (line 637)
        
        # Obtaining an instance of the builtin type 'tuple' (line 637)
        tuple_178234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 637)
        # Adding element type (line 637)
        # Getting the type of 'xk' (line 637)
        xk_178235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 18), 'xk', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 637, 18), tuple_178234, xk_178235)
        
        # Getting the type of 'args' (line 637)
        args_178236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 25), 'args', False)
        # Applying the binary operator '+' (line 637)
        result_add_178237 = python_operator(stypy.reporting.localization.Localization(__file__, 637, 17), '+', tuple_178234, args_178236)
        
        # Processing the call keyword arguments (line 637)
        kwargs_178238 = {}
        # Getting the type of 'f' (line 637)
        f_178233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 13), 'f', False)
        # Calling f(args, kwargs) (line 637)
        f_call_result_178239 = invoke(stypy.reporting.localization.Localization(__file__, 637, 13), f_178233, *[result_add_178237], **kwargs_178238)
        
        # Assigning a type to the variable 'f0' (line 637)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 637, 8), 'f0', f_call_result_178239)

        if more_types_in_union_178232:
            # SSA join for if statement (line 636)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 638):
    
    # Assigning a Call to a Name (line 638):
    
    # Call to zeros(...): (line 638)
    # Processing the call arguments (line 638)
    
    # Obtaining an instance of the builtin type 'tuple' (line 638)
    tuple_178242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 638, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 638)
    # Adding element type (line 638)
    
    # Call to len(...): (line 638)
    # Processing the call arguments (line 638)
    # Getting the type of 'xk' (line 638)
    xk_178244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 28), 'xk', False)
    # Processing the call keyword arguments (line 638)
    kwargs_178245 = {}
    # Getting the type of 'len' (line 638)
    len_178243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 24), 'len', False)
    # Calling len(args, kwargs) (line 638)
    len_call_result_178246 = invoke(stypy.reporting.localization.Localization(__file__, 638, 24), len_178243, *[xk_178244], **kwargs_178245)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 638, 24), tuple_178242, len_call_result_178246)
    
    # Getting the type of 'float' (line 638)
    float_178247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 35), 'float', False)
    # Processing the call keyword arguments (line 638)
    kwargs_178248 = {}
    # Getting the type of 'numpy' (line 638)
    numpy_178240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 11), 'numpy', False)
    # Obtaining the member 'zeros' of a type (line 638)
    zeros_178241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 11), numpy_178240, 'zeros')
    # Calling zeros(args, kwargs) (line 638)
    zeros_call_result_178249 = invoke(stypy.reporting.localization.Localization(__file__, 638, 11), zeros_178241, *[tuple_178242, float_178247], **kwargs_178248)
    
    # Assigning a type to the variable 'grad' (line 638)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 638, 4), 'grad', zeros_call_result_178249)
    
    # Assigning a Call to a Name (line 639):
    
    # Assigning a Call to a Name (line 639):
    
    # Call to zeros(...): (line 639)
    # Processing the call arguments (line 639)
    
    # Obtaining an instance of the builtin type 'tuple' (line 639)
    tuple_178252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 639)
    # Adding element type (line 639)
    
    # Call to len(...): (line 639)
    # Processing the call arguments (line 639)
    # Getting the type of 'xk' (line 639)
    xk_178254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 26), 'xk', False)
    # Processing the call keyword arguments (line 639)
    kwargs_178255 = {}
    # Getting the type of 'len' (line 639)
    len_178253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 22), 'len', False)
    # Calling len(args, kwargs) (line 639)
    len_call_result_178256 = invoke(stypy.reporting.localization.Localization(__file__, 639, 22), len_178253, *[xk_178254], **kwargs_178255)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 22), tuple_178252, len_call_result_178256)
    
    # Getting the type of 'float' (line 639)
    float_178257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 33), 'float', False)
    # Processing the call keyword arguments (line 639)
    kwargs_178258 = {}
    # Getting the type of 'numpy' (line 639)
    numpy_178250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 9), 'numpy', False)
    # Obtaining the member 'zeros' of a type (line 639)
    zeros_178251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 639, 9), numpy_178250, 'zeros')
    # Calling zeros(args, kwargs) (line 639)
    zeros_call_result_178259 = invoke(stypy.reporting.localization.Localization(__file__, 639, 9), zeros_178251, *[tuple_178252, float_178257], **kwargs_178258)
    
    # Assigning a type to the variable 'ei' (line 639)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 639, 4), 'ei', zeros_call_result_178259)
    
    
    # Call to range(...): (line 640)
    # Processing the call arguments (line 640)
    
    # Call to len(...): (line 640)
    # Processing the call arguments (line 640)
    # Getting the type of 'xk' (line 640)
    xk_178262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 23), 'xk', False)
    # Processing the call keyword arguments (line 640)
    kwargs_178263 = {}
    # Getting the type of 'len' (line 640)
    len_178261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 19), 'len', False)
    # Calling len(args, kwargs) (line 640)
    len_call_result_178264 = invoke(stypy.reporting.localization.Localization(__file__, 640, 19), len_178261, *[xk_178262], **kwargs_178263)
    
    # Processing the call keyword arguments (line 640)
    kwargs_178265 = {}
    # Getting the type of 'range' (line 640)
    range_178260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 13), 'range', False)
    # Calling range(args, kwargs) (line 640)
    range_call_result_178266 = invoke(stypy.reporting.localization.Localization(__file__, 640, 13), range_178260, *[len_call_result_178264], **kwargs_178265)
    
    # Testing the type of a for loop iterable (line 640)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 640, 4), range_call_result_178266)
    # Getting the type of the for loop variable (line 640)
    for_loop_var_178267 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 640, 4), range_call_result_178266)
    # Assigning a type to the variable 'k' (line 640)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 640, 4), 'k', for_loop_var_178267)
    # SSA begins for a for statement (line 640)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Num to a Subscript (line 641):
    
    # Assigning a Num to a Subscript (line 641):
    float_178268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 641, 16), 'float')
    # Getting the type of 'ei' (line 641)
    ei_178269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 8), 'ei')
    # Getting the type of 'k' (line 641)
    k_178270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 11), 'k')
    # Storing an element on a container (line 641)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 641, 8), ei_178269, (k_178270, float_178268))
    
    # Assigning a BinOp to a Name (line 642):
    
    # Assigning a BinOp to a Name (line 642):
    # Getting the type of 'epsilon' (line 642)
    epsilon_178271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 12), 'epsilon')
    # Getting the type of 'ei' (line 642)
    ei_178272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 22), 'ei')
    # Applying the binary operator '*' (line 642)
    result_mul_178273 = python_operator(stypy.reporting.localization.Localization(__file__, 642, 12), '*', epsilon_178271, ei_178272)
    
    # Assigning a type to the variable 'd' (line 642)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 642, 8), 'd', result_mul_178273)
    
    # Assigning a BinOp to a Subscript (line 643):
    
    # Assigning a BinOp to a Subscript (line 643):
    
    # Call to f(...): (line 643)
    
    # Obtaining an instance of the builtin type 'tuple' (line 643)
    tuple_178275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 643, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 643)
    # Adding element type (line 643)
    # Getting the type of 'xk' (line 643)
    xk_178276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 24), 'xk', False)
    # Getting the type of 'd' (line 643)
    d_178277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 29), 'd', False)
    # Applying the binary operator '+' (line 643)
    result_add_178278 = python_operator(stypy.reporting.localization.Localization(__file__, 643, 24), '+', xk_178276, d_178277)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 643, 24), tuple_178275, result_add_178278)
    
    # Getting the type of 'args' (line 643)
    args_178279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 35), 'args', False)
    # Applying the binary operator '+' (line 643)
    result_add_178280 = python_operator(stypy.reporting.localization.Localization(__file__, 643, 23), '+', tuple_178275, args_178279)
    
    # Processing the call keyword arguments (line 643)
    kwargs_178281 = {}
    # Getting the type of 'f' (line 643)
    f_178274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 19), 'f', False)
    # Calling f(args, kwargs) (line 643)
    f_call_result_178282 = invoke(stypy.reporting.localization.Localization(__file__, 643, 19), f_178274, *[result_add_178280], **kwargs_178281)
    
    # Getting the type of 'f0' (line 643)
    f0_178283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 44), 'f0')
    # Applying the binary operator '-' (line 643)
    result_sub_178284 = python_operator(stypy.reporting.localization.Localization(__file__, 643, 19), '-', f_call_result_178282, f0_178283)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 643)
    k_178285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 52), 'k')
    # Getting the type of 'd' (line 643)
    d_178286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 50), 'd')
    # Obtaining the member '__getitem__' of a type (line 643)
    getitem___178287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 643, 50), d_178286, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 643)
    subscript_call_result_178288 = invoke(stypy.reporting.localization.Localization(__file__, 643, 50), getitem___178287, k_178285)
    
    # Applying the binary operator 'div' (line 643)
    result_div_178289 = python_operator(stypy.reporting.localization.Localization(__file__, 643, 18), 'div', result_sub_178284, subscript_call_result_178288)
    
    # Getting the type of 'grad' (line 643)
    grad_178290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 8), 'grad')
    # Getting the type of 'k' (line 643)
    k_178291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 13), 'k')
    # Storing an element on a container (line 643)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 643, 8), grad_178290, (k_178291, result_div_178289))
    
    # Assigning a Num to a Subscript (line 644):
    
    # Assigning a Num to a Subscript (line 644):
    float_178292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 644, 16), 'float')
    # Getting the type of 'ei' (line 644)
    ei_178293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 8), 'ei')
    # Getting the type of 'k' (line 644)
    k_178294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 11), 'k')
    # Storing an element on a container (line 644)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 644, 8), ei_178293, (k_178294, float_178292))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'grad' (line 645)
    grad_178295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 11), 'grad')
    # Assigning a type to the variable 'stypy_return_type' (line 645)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 645, 4), 'stypy_return_type', grad_178295)
    
    # ################# End of '_approx_fprime_helper(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_approx_fprime_helper' in the type store
    # Getting the type of 'stypy_return_type' (line 631)
    stypy_return_type_178296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_178296)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_approx_fprime_helper'
    return stypy_return_type_178296

# Assigning a type to the variable '_approx_fprime_helper' (line 631)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 631, 0), '_approx_fprime_helper', _approx_fprime_helper)

@norecursion
def approx_fprime(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'approx_fprime'
    module_type_store = module_type_store.open_function_context('approx_fprime', 648, 0, False)
    
    # Passed parameters checking function
    approx_fprime.stypy_localization = localization
    approx_fprime.stypy_type_of_self = None
    approx_fprime.stypy_type_store = module_type_store
    approx_fprime.stypy_function_name = 'approx_fprime'
    approx_fprime.stypy_param_names_list = ['xk', 'f', 'epsilon']
    approx_fprime.stypy_varargs_param_name = 'args'
    approx_fprime.stypy_kwargs_param_name = None
    approx_fprime.stypy_call_defaults = defaults
    approx_fprime.stypy_call_varargs = varargs
    approx_fprime.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'approx_fprime', ['xk', 'f', 'epsilon'], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'approx_fprime', localization, ['xk', 'f', 'epsilon'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'approx_fprime(...)' code ##################

    str_178297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 702, (-1)), 'str', 'Finite-difference approximation of the gradient of a scalar function.\n\n    Parameters\n    ----------\n    xk : array_like\n        The coordinate vector at which to determine the gradient of `f`.\n    f : callable\n        The function of which to determine the gradient (partial derivatives).\n        Should take `xk` as first argument, other arguments to `f` can be\n        supplied in ``*args``.  Should return a scalar, the value of the\n        function at `xk`.\n    epsilon : array_like\n        Increment to `xk` to use for determining the function gradient.\n        If a scalar, uses the same finite difference delta for all partial\n        derivatives.  If an array, should contain one value per element of\n        `xk`.\n    \\*args : args, optional\n        Any other arguments that are to be passed to `f`.\n\n    Returns\n    -------\n    grad : ndarray\n        The partial derivatives of `f` to `xk`.\n\n    See Also\n    --------\n    check_grad : Check correctness of gradient function against approx_fprime.\n\n    Notes\n    -----\n    The function gradient is determined by the forward finite difference\n    formula::\n\n                 f(xk[i] + epsilon[i]) - f(xk[i])\n        f\'[i] = ---------------------------------\n                            epsilon[i]\n\n    The main use of `approx_fprime` is in scalar function optimizers like\n    `fmin_bfgs`, to determine numerically the Jacobian of a function.\n\n    Examples\n    --------\n    >>> from scipy import optimize\n    >>> def func(x, c0, c1):\n    ...     "Coordinate vector `x` should be an array of size two."\n    ...     return c0 * x[0]**2 + c1*x[1]**2\n\n    >>> x = np.ones(2)\n    >>> c0, c1 = (1, 200)\n    >>> eps = np.sqrt(np.finfo(float).eps)\n    >>> optimize.approx_fprime(x, func, [eps, np.sqrt(200) * eps], c0, c1)\n    array([   2.        ,  400.00004198])\n\n    ')
    
    # Call to _approx_fprime_helper(...): (line 703)
    # Processing the call arguments (line 703)
    # Getting the type of 'xk' (line 703)
    xk_178299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 33), 'xk', False)
    # Getting the type of 'f' (line 703)
    f_178300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 37), 'f', False)
    # Getting the type of 'epsilon' (line 703)
    epsilon_178301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 40), 'epsilon', False)
    # Processing the call keyword arguments (line 703)
    # Getting the type of 'args' (line 703)
    args_178302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 54), 'args', False)
    keyword_178303 = args_178302
    kwargs_178304 = {'args': keyword_178303}
    # Getting the type of '_approx_fprime_helper' (line 703)
    _approx_fprime_helper_178298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 11), '_approx_fprime_helper', False)
    # Calling _approx_fprime_helper(args, kwargs) (line 703)
    _approx_fprime_helper_call_result_178305 = invoke(stypy.reporting.localization.Localization(__file__, 703, 11), _approx_fprime_helper_178298, *[xk_178299, f_178300, epsilon_178301], **kwargs_178304)
    
    # Assigning a type to the variable 'stypy_return_type' (line 703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 4), 'stypy_return_type', _approx_fprime_helper_call_result_178305)
    
    # ################# End of 'approx_fprime(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'approx_fprime' in the type store
    # Getting the type of 'stypy_return_type' (line 648)
    stypy_return_type_178306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_178306)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'approx_fprime'
    return stypy_return_type_178306

# Assigning a type to the variable 'approx_fprime' (line 648)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 0), 'approx_fprime', approx_fprime)

@norecursion
def check_grad(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'check_grad'
    module_type_store = module_type_store.open_function_context('check_grad', 706, 0, False)
    
    # Passed parameters checking function
    check_grad.stypy_localization = localization
    check_grad.stypy_type_of_self = None
    check_grad.stypy_type_store = module_type_store
    check_grad.stypy_function_name = 'check_grad'
    check_grad.stypy_param_names_list = ['func', 'grad', 'x0']
    check_grad.stypy_varargs_param_name = 'args'
    check_grad.stypy_kwargs_param_name = 'kwargs'
    check_grad.stypy_call_defaults = defaults
    check_grad.stypy_call_varargs = varargs
    check_grad.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'check_grad', ['func', 'grad', 'x0'], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'check_grad', localization, ['func', 'grad', 'x0'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'check_grad(...)' code ##################

    str_178307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 746, (-1)), 'str', 'Check the correctness of a gradient function by comparing it against a\n    (forward) finite-difference approximation of the gradient.\n\n    Parameters\n    ----------\n    func : callable ``func(x0, *args)``\n        Function whose derivative is to be checked.\n    grad : callable ``grad(x0, *args)``\n        Gradient of `func`.\n    x0 : ndarray\n        Points to check `grad` against forward difference approximation of grad\n        using `func`.\n    args : \\*args, optional\n        Extra arguments passed to `func` and `grad`.\n    epsilon : float, optional\n        Step size used for the finite difference approximation. It defaults to\n        ``sqrt(numpy.finfo(float).eps)``, which is approximately 1.49e-08.\n\n    Returns\n    -------\n    err : float\n        The square root of the sum of squares (i.e. the 2-norm) of the\n        difference between ``grad(x0, *args)`` and the finite difference\n        approximation of `grad` using func at the points `x0`.\n\n    See Also\n    --------\n    approx_fprime\n\n    Examples\n    --------\n    >>> def func(x):\n    ...     return x[0]**2 - 0.5 * x[1]**3\n    >>> def grad(x):\n    ...     return [2 * x[0], -1.5 * x[1]**2]\n    >>> from scipy.optimize import check_grad\n    >>> check_grad(func, grad, [1.5, -1.5])\n    2.9802322387695312e-08\n\n    ')
    
    # Assigning a Call to a Name (line 747):
    
    # Assigning a Call to a Name (line 747):
    
    # Call to pop(...): (line 747)
    # Processing the call arguments (line 747)
    str_178310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 747, 22), 'str', 'epsilon')
    # Getting the type of '_epsilon' (line 747)
    _epsilon_178311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 33), '_epsilon', False)
    # Processing the call keyword arguments (line 747)
    kwargs_178312 = {}
    # Getting the type of 'kwargs' (line 747)
    kwargs_178308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 11), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 747)
    pop_178309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 747, 11), kwargs_178308, 'pop')
    # Calling pop(args, kwargs) (line 747)
    pop_call_result_178313 = invoke(stypy.reporting.localization.Localization(__file__, 747, 11), pop_178309, *[str_178310, _epsilon_178311], **kwargs_178312)
    
    # Assigning a type to the variable 'step' (line 747)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 747, 4), 'step', pop_call_result_178313)
    
    # Getting the type of 'kwargs' (line 748)
    kwargs_178314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 7), 'kwargs')
    # Testing the type of an if condition (line 748)
    if_condition_178315 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 748, 4), kwargs_178314)
    # Assigning a type to the variable 'if_condition_178315' (line 748)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 748, 4), 'if_condition_178315', if_condition_178315)
    # SSA begins for if statement (line 748)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 749)
    # Processing the call arguments (line 749)
    str_178317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 749, 25), 'str', 'Unknown keyword arguments: %r')
    
    # Obtaining an instance of the builtin type 'tuple' (line 750)
    tuple_178318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 750, 26), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 750)
    # Adding element type (line 750)
    
    # Call to list(...): (line 750)
    # Processing the call arguments (line 750)
    
    # Call to keys(...): (line 750)
    # Processing the call keyword arguments (line 750)
    kwargs_178322 = {}
    # Getting the type of 'kwargs' (line 750)
    kwargs_178320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 31), 'kwargs', False)
    # Obtaining the member 'keys' of a type (line 750)
    keys_178321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 31), kwargs_178320, 'keys')
    # Calling keys(args, kwargs) (line 750)
    keys_call_result_178323 = invoke(stypy.reporting.localization.Localization(__file__, 750, 31), keys_178321, *[], **kwargs_178322)
    
    # Processing the call keyword arguments (line 750)
    kwargs_178324 = {}
    # Getting the type of 'list' (line 750)
    list_178319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 26), 'list', False)
    # Calling list(args, kwargs) (line 750)
    list_call_result_178325 = invoke(stypy.reporting.localization.Localization(__file__, 750, 26), list_178319, *[keys_call_result_178323], **kwargs_178324)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 750, 26), tuple_178318, list_call_result_178325)
    
    # Applying the binary operator '%' (line 749)
    result_mod_178326 = python_operator(stypy.reporting.localization.Localization(__file__, 749, 25), '%', str_178317, tuple_178318)
    
    # Processing the call keyword arguments (line 749)
    kwargs_178327 = {}
    # Getting the type of 'ValueError' (line 749)
    ValueError_178316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 749)
    ValueError_call_result_178328 = invoke(stypy.reporting.localization.Localization(__file__, 749, 14), ValueError_178316, *[result_mod_178326], **kwargs_178327)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 749, 8), ValueError_call_result_178328, 'raise parameter', BaseException)
    # SSA join for if statement (line 748)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to sqrt(...): (line 751)
    # Processing the call arguments (line 751)
    
    # Call to sum(...): (line 751)
    # Processing the call arguments (line 751)
    
    # Call to grad(...): (line 751)
    # Processing the call arguments (line 751)
    # Getting the type of 'x0' (line 751)
    x0_178332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 26), 'x0', False)
    # Getting the type of 'args' (line 751)
    args_178333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 31), 'args', False)
    # Processing the call keyword arguments (line 751)
    kwargs_178334 = {}
    # Getting the type of 'grad' (line 751)
    grad_178331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 21), 'grad', False)
    # Calling grad(args, kwargs) (line 751)
    grad_call_result_178335 = invoke(stypy.reporting.localization.Localization(__file__, 751, 21), grad_178331, *[x0_178332, args_178333], **kwargs_178334)
    
    
    # Call to approx_fprime(...): (line 752)
    # Processing the call arguments (line 752)
    # Getting the type of 'x0' (line 752)
    x0_178337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 35), 'x0', False)
    # Getting the type of 'func' (line 752)
    func_178338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 39), 'func', False)
    # Getting the type of 'step' (line 752)
    step_178339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 45), 'step', False)
    # Getting the type of 'args' (line 752)
    args_178340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 52), 'args', False)
    # Processing the call keyword arguments (line 752)
    kwargs_178341 = {}
    # Getting the type of 'approx_fprime' (line 752)
    approx_fprime_178336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 21), 'approx_fprime', False)
    # Calling approx_fprime(args, kwargs) (line 752)
    approx_fprime_call_result_178342 = invoke(stypy.reporting.localization.Localization(__file__, 752, 21), approx_fprime_178336, *[x0_178337, func_178338, step_178339, args_178340], **kwargs_178341)
    
    # Applying the binary operator '-' (line 751)
    result_sub_178343 = python_operator(stypy.reporting.localization.Localization(__file__, 751, 21), '-', grad_call_result_178335, approx_fprime_call_result_178342)
    
    int_178344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 752, 60), 'int')
    # Applying the binary operator '**' (line 751)
    result_pow_178345 = python_operator(stypy.reporting.localization.Localization(__file__, 751, 20), '**', result_sub_178343, int_178344)
    
    # Processing the call keyword arguments (line 751)
    kwargs_178346 = {}
    # Getting the type of 'sum' (line 751)
    sum_178330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 16), 'sum', False)
    # Calling sum(args, kwargs) (line 751)
    sum_call_result_178347 = invoke(stypy.reporting.localization.Localization(__file__, 751, 16), sum_178330, *[result_pow_178345], **kwargs_178346)
    
    # Processing the call keyword arguments (line 751)
    kwargs_178348 = {}
    # Getting the type of 'sqrt' (line 751)
    sqrt_178329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 11), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 751)
    sqrt_call_result_178349 = invoke(stypy.reporting.localization.Localization(__file__, 751, 11), sqrt_178329, *[sum_call_result_178347], **kwargs_178348)
    
    # Assigning a type to the variable 'stypy_return_type' (line 751)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 4), 'stypy_return_type', sqrt_call_result_178349)
    
    # ################# End of 'check_grad(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'check_grad' in the type store
    # Getting the type of 'stypy_return_type' (line 706)
    stypy_return_type_178350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_178350)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'check_grad'
    return stypy_return_type_178350

# Assigning a type to the variable 'check_grad' (line 706)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 706, 0), 'check_grad', check_grad)

@norecursion
def approx_fhess_p(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'approx_fhess_p'
    module_type_store = module_type_store.open_function_context('approx_fhess_p', 755, 0, False)
    
    # Passed parameters checking function
    approx_fhess_p.stypy_localization = localization
    approx_fhess_p.stypy_type_of_self = None
    approx_fhess_p.stypy_type_store = module_type_store
    approx_fhess_p.stypy_function_name = 'approx_fhess_p'
    approx_fhess_p.stypy_param_names_list = ['x0', 'p', 'fprime', 'epsilon']
    approx_fhess_p.stypy_varargs_param_name = 'args'
    approx_fhess_p.stypy_kwargs_param_name = None
    approx_fhess_p.stypy_call_defaults = defaults
    approx_fhess_p.stypy_call_varargs = varargs
    approx_fhess_p.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'approx_fhess_p', ['x0', 'p', 'fprime', 'epsilon'], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'approx_fhess_p', localization, ['x0', 'p', 'fprime', 'epsilon'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'approx_fhess_p(...)' code ##################

    
    # Assigning a Call to a Name (line 756):
    
    # Assigning a Call to a Name (line 756):
    
    # Call to fprime(...): (line 756)
    
    # Obtaining an instance of the builtin type 'tuple' (line 756)
    tuple_178352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 756)
    # Adding element type (line 756)
    # Getting the type of 'x0' (line 756)
    x0_178353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 19), 'x0', False)
    # Getting the type of 'epsilon' (line 756)
    epsilon_178354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 24), 'epsilon', False)
    # Getting the type of 'p' (line 756)
    p_178355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 32), 'p', False)
    # Applying the binary operator '*' (line 756)
    result_mul_178356 = python_operator(stypy.reporting.localization.Localization(__file__, 756, 24), '*', epsilon_178354, p_178355)
    
    # Applying the binary operator '+' (line 756)
    result_add_178357 = python_operator(stypy.reporting.localization.Localization(__file__, 756, 19), '+', x0_178353, result_mul_178356)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 756, 19), tuple_178352, result_add_178357)
    
    # Getting the type of 'args' (line 756)
    args_178358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 38), 'args', False)
    # Applying the binary operator '+' (line 756)
    result_add_178359 = python_operator(stypy.reporting.localization.Localization(__file__, 756, 18), '+', tuple_178352, args_178358)
    
    # Processing the call keyword arguments (line 756)
    kwargs_178360 = {}
    # Getting the type of 'fprime' (line 756)
    fprime_178351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 9), 'fprime', False)
    # Calling fprime(args, kwargs) (line 756)
    fprime_call_result_178361 = invoke(stypy.reporting.localization.Localization(__file__, 756, 9), fprime_178351, *[result_add_178359], **kwargs_178360)
    
    # Assigning a type to the variable 'f2' (line 756)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 4), 'f2', fprime_call_result_178361)
    
    # Assigning a Call to a Name (line 757):
    
    # Assigning a Call to a Name (line 757):
    
    # Call to fprime(...): (line 757)
    
    # Obtaining an instance of the builtin type 'tuple' (line 757)
    tuple_178363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 757, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 757)
    # Adding element type (line 757)
    # Getting the type of 'x0' (line 757)
    x0_178364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 19), 'x0', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 757, 19), tuple_178363, x0_178364)
    
    # Getting the type of 'args' (line 757)
    args_178365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 26), 'args', False)
    # Applying the binary operator '+' (line 757)
    result_add_178366 = python_operator(stypy.reporting.localization.Localization(__file__, 757, 18), '+', tuple_178363, args_178365)
    
    # Processing the call keyword arguments (line 757)
    kwargs_178367 = {}
    # Getting the type of 'fprime' (line 757)
    fprime_178362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 9), 'fprime', False)
    # Calling fprime(args, kwargs) (line 757)
    fprime_call_result_178368 = invoke(stypy.reporting.localization.Localization(__file__, 757, 9), fprime_178362, *[result_add_178366], **kwargs_178367)
    
    # Assigning a type to the variable 'f1' (line 757)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 4), 'f1', fprime_call_result_178368)
    # Getting the type of 'f2' (line 758)
    f2_178369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 12), 'f2')
    # Getting the type of 'f1' (line 758)
    f1_178370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 17), 'f1')
    # Applying the binary operator '-' (line 758)
    result_sub_178371 = python_operator(stypy.reporting.localization.Localization(__file__, 758, 12), '-', f2_178369, f1_178370)
    
    # Getting the type of 'epsilon' (line 758)
    epsilon_178372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 23), 'epsilon')
    # Applying the binary operator 'div' (line 758)
    result_div_178373 = python_operator(stypy.reporting.localization.Localization(__file__, 758, 11), 'div', result_sub_178371, epsilon_178372)
    
    # Assigning a type to the variable 'stypy_return_type' (line 758)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 758, 4), 'stypy_return_type', result_div_178373)
    
    # ################# End of 'approx_fhess_p(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'approx_fhess_p' in the type store
    # Getting the type of 'stypy_return_type' (line 755)
    stypy_return_type_178374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_178374)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'approx_fhess_p'
    return stypy_return_type_178374

# Assigning a type to the variable 'approx_fhess_p' (line 755)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 0), 'approx_fhess_p', approx_fhess_p)
# Declaration of the '_LineSearchError' class
# Getting the type of 'RuntimeError' (line 761)
RuntimeError_178375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 23), 'RuntimeError')

class _LineSearchError(RuntimeError_178375, ):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 761, 0, False)
        # Assigning a type to the variable 'self' (line 762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 762, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_LineSearchError.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable '_LineSearchError' (line 761)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 0), '_LineSearchError', _LineSearchError)

@norecursion
def _line_search_wolfe12(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_line_search_wolfe12'
    module_type_store = module_type_store.open_function_context('_line_search_wolfe12', 765, 0, False)
    
    # Passed parameters checking function
    _line_search_wolfe12.stypy_localization = localization
    _line_search_wolfe12.stypy_type_of_self = None
    _line_search_wolfe12.stypy_type_store = module_type_store
    _line_search_wolfe12.stypy_function_name = '_line_search_wolfe12'
    _line_search_wolfe12.stypy_param_names_list = ['f', 'fprime', 'xk', 'pk', 'gfk', 'old_fval', 'old_old_fval']
    _line_search_wolfe12.stypy_varargs_param_name = None
    _line_search_wolfe12.stypy_kwargs_param_name = 'kwargs'
    _line_search_wolfe12.stypy_call_defaults = defaults
    _line_search_wolfe12.stypy_call_varargs = varargs
    _line_search_wolfe12.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_line_search_wolfe12', ['f', 'fprime', 'xk', 'pk', 'gfk', 'old_fval', 'old_old_fval'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_line_search_wolfe12', localization, ['f', 'fprime', 'xk', 'pk', 'gfk', 'old_fval', 'old_old_fval'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_line_search_wolfe12(...)' code ##################

    str_178376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 777, (-1)), 'str', '\n    Same as line_search_wolfe1, but fall back to line_search_wolfe2 if\n    suitable step length is not found, and raise an exception if a\n    suitable step length is not found.\n\n    Raises\n    ------\n    _LineSearchError\n        If no suitable step size is found\n\n    ')
    
    # Assigning a Call to a Name (line 779):
    
    # Assigning a Call to a Name (line 779):
    
    # Call to pop(...): (line 779)
    # Processing the call arguments (line 779)
    str_178379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 779, 33), 'str', 'extra_condition')
    # Getting the type of 'None' (line 779)
    None_178380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 52), 'None', False)
    # Processing the call keyword arguments (line 779)
    kwargs_178381 = {}
    # Getting the type of 'kwargs' (line 779)
    kwargs_178377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 22), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 779)
    pop_178378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 779, 22), kwargs_178377, 'pop')
    # Calling pop(args, kwargs) (line 779)
    pop_call_result_178382 = invoke(stypy.reporting.localization.Localization(__file__, 779, 22), pop_178378, *[str_178379, None_178380], **kwargs_178381)
    
    # Assigning a type to the variable 'extra_condition' (line 779)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 779, 4), 'extra_condition', pop_call_result_178382)
    
    # Assigning a Call to a Name (line 781):
    
    # Assigning a Call to a Name (line 781):
    
    # Call to line_search_wolfe1(...): (line 781)
    # Processing the call arguments (line 781)
    # Getting the type of 'f' (line 781)
    f_178384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 29), 'f', False)
    # Getting the type of 'fprime' (line 781)
    fprime_178385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 32), 'fprime', False)
    # Getting the type of 'xk' (line 781)
    xk_178386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 40), 'xk', False)
    # Getting the type of 'pk' (line 781)
    pk_178387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 44), 'pk', False)
    # Getting the type of 'gfk' (line 781)
    gfk_178388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 48), 'gfk', False)
    # Getting the type of 'old_fval' (line 782)
    old_fval_178389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 29), 'old_fval', False)
    # Getting the type of 'old_old_fval' (line 782)
    old_old_fval_178390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 39), 'old_old_fval', False)
    # Processing the call keyword arguments (line 781)
    # Getting the type of 'kwargs' (line 783)
    kwargs_178391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 31), 'kwargs', False)
    kwargs_178392 = {'kwargs_178391': kwargs_178391}
    # Getting the type of 'line_search_wolfe1' (line 781)
    line_search_wolfe1_178383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 10), 'line_search_wolfe1', False)
    # Calling line_search_wolfe1(args, kwargs) (line 781)
    line_search_wolfe1_call_result_178393 = invoke(stypy.reporting.localization.Localization(__file__, 781, 10), line_search_wolfe1_178383, *[f_178384, fprime_178385, xk_178386, pk_178387, gfk_178388, old_fval_178389, old_old_fval_178390], **kwargs_178392)
    
    # Assigning a type to the variable 'ret' (line 781)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 781, 4), 'ret', line_search_wolfe1_call_result_178393)
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    int_178394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 785, 11), 'int')
    # Getting the type of 'ret' (line 785)
    ret_178395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 7), 'ret')
    # Obtaining the member '__getitem__' of a type (line 785)
    getitem___178396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 785, 7), ret_178395, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 785)
    subscript_call_result_178397 = invoke(stypy.reporting.localization.Localization(__file__, 785, 7), getitem___178396, int_178394)
    
    # Getting the type of 'None' (line 785)
    None_178398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 21), 'None')
    # Applying the binary operator 'isnot' (line 785)
    result_is_not_178399 = python_operator(stypy.reporting.localization.Localization(__file__, 785, 7), 'isnot', subscript_call_result_178397, None_178398)
    
    
    # Getting the type of 'extra_condition' (line 785)
    extra_condition_178400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 30), 'extra_condition')
    # Getting the type of 'None' (line 785)
    None_178401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 53), 'None')
    # Applying the binary operator 'isnot' (line 785)
    result_is_not_178402 = python_operator(stypy.reporting.localization.Localization(__file__, 785, 30), 'isnot', extra_condition_178400, None_178401)
    
    # Applying the binary operator 'and' (line 785)
    result_and_keyword_178403 = python_operator(stypy.reporting.localization.Localization(__file__, 785, 7), 'and', result_is_not_178399, result_is_not_178402)
    
    # Testing the type of an if condition (line 785)
    if_condition_178404 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 785, 4), result_and_keyword_178403)
    # Assigning a type to the variable 'if_condition_178404' (line 785)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 785, 4), 'if_condition_178404', if_condition_178404)
    # SSA begins for if statement (line 785)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 786):
    
    # Assigning a BinOp to a Name (line 786):
    # Getting the type of 'xk' (line 786)
    xk_178405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 14), 'xk')
    
    # Obtaining the type of the subscript
    int_178406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 786, 23), 'int')
    # Getting the type of 'ret' (line 786)
    ret_178407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 19), 'ret')
    # Obtaining the member '__getitem__' of a type (line 786)
    getitem___178408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 786, 19), ret_178407, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 786)
    subscript_call_result_178409 = invoke(stypy.reporting.localization.Localization(__file__, 786, 19), getitem___178408, int_178406)
    
    # Getting the type of 'pk' (line 786)
    pk_178410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 28), 'pk')
    # Applying the binary operator '*' (line 786)
    result_mul_178411 = python_operator(stypy.reporting.localization.Localization(__file__, 786, 19), '*', subscript_call_result_178409, pk_178410)
    
    # Applying the binary operator '+' (line 786)
    result_add_178412 = python_operator(stypy.reporting.localization.Localization(__file__, 786, 14), '+', xk_178405, result_mul_178411)
    
    # Assigning a type to the variable 'xp1' (line 786)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 786, 8), 'xp1', result_add_178412)
    
    
    
    # Call to extra_condition(...): (line 787)
    # Processing the call arguments (line 787)
    
    # Obtaining the type of the subscript
    int_178414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 787, 35), 'int')
    # Getting the type of 'ret' (line 787)
    ret_178415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 31), 'ret', False)
    # Obtaining the member '__getitem__' of a type (line 787)
    getitem___178416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 31), ret_178415, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 787)
    subscript_call_result_178417 = invoke(stypy.reporting.localization.Localization(__file__, 787, 31), getitem___178416, int_178414)
    
    # Getting the type of 'xp1' (line 787)
    xp1_178418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 39), 'xp1', False)
    
    # Obtaining the type of the subscript
    int_178419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 787, 48), 'int')
    # Getting the type of 'ret' (line 787)
    ret_178420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 44), 'ret', False)
    # Obtaining the member '__getitem__' of a type (line 787)
    getitem___178421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 44), ret_178420, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 787)
    subscript_call_result_178422 = invoke(stypy.reporting.localization.Localization(__file__, 787, 44), getitem___178421, int_178419)
    
    
    # Obtaining the type of the subscript
    int_178423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 787, 56), 'int')
    # Getting the type of 'ret' (line 787)
    ret_178424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 52), 'ret', False)
    # Obtaining the member '__getitem__' of a type (line 787)
    getitem___178425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 52), ret_178424, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 787)
    subscript_call_result_178426 = invoke(stypy.reporting.localization.Localization(__file__, 787, 52), getitem___178425, int_178423)
    
    # Processing the call keyword arguments (line 787)
    kwargs_178427 = {}
    # Getting the type of 'extra_condition' (line 787)
    extra_condition_178413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 15), 'extra_condition', False)
    # Calling extra_condition(args, kwargs) (line 787)
    extra_condition_call_result_178428 = invoke(stypy.reporting.localization.Localization(__file__, 787, 15), extra_condition_178413, *[subscript_call_result_178417, xp1_178418, subscript_call_result_178422, subscript_call_result_178426], **kwargs_178427)
    
    # Applying the 'not' unary operator (line 787)
    result_not__178429 = python_operator(stypy.reporting.localization.Localization(__file__, 787, 11), 'not', extra_condition_call_result_178428)
    
    # Testing the type of an if condition (line 787)
    if_condition_178430 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 787, 8), result_not__178429)
    # Assigning a type to the variable 'if_condition_178430' (line 787)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 787, 8), 'if_condition_178430', if_condition_178430)
    # SSA begins for if statement (line 787)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 789):
    
    # Assigning a Tuple to a Name (line 789):
    
    # Obtaining an instance of the builtin type 'tuple' (line 789)
    tuple_178431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 789, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 789)
    # Adding element type (line 789)
    # Getting the type of 'None' (line 789)
    None_178432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 19), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 789, 19), tuple_178431, None_178432)
    
    # Assigning a type to the variable 'ret' (line 789)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 789, 12), 'ret', tuple_178431)
    # SSA join for if statement (line 787)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 785)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 791)
    
    # Obtaining the type of the subscript
    int_178433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 791, 11), 'int')
    # Getting the type of 'ret' (line 791)
    ret_178434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 7), 'ret')
    # Obtaining the member '__getitem__' of a type (line 791)
    getitem___178435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 7), ret_178434, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 791)
    subscript_call_result_178436 = invoke(stypy.reporting.localization.Localization(__file__, 791, 7), getitem___178435, int_178433)
    
    # Getting the type of 'None' (line 791)
    None_178437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 17), 'None')
    
    (may_be_178438, more_types_in_union_178439) = may_be_none(subscript_call_result_178436, None_178437)

    if may_be_178438:

        if more_types_in_union_178439:
            # Runtime conditional SSA (line 791)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to catch_warnings(...): (line 793)
        # Processing the call keyword arguments (line 793)
        kwargs_178442 = {}
        # Getting the type of 'warnings' (line 793)
        warnings_178440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 13), 'warnings', False)
        # Obtaining the member 'catch_warnings' of a type (line 793)
        catch_warnings_178441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 13), warnings_178440, 'catch_warnings')
        # Calling catch_warnings(args, kwargs) (line 793)
        catch_warnings_call_result_178443 = invoke(stypy.reporting.localization.Localization(__file__, 793, 13), catch_warnings_178441, *[], **kwargs_178442)
        
        with_178444 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 793, 13), catch_warnings_call_result_178443, 'with parameter', '__enter__', '__exit__')

        if with_178444:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 793)
            enter___178445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 13), catch_warnings_call_result_178443, '__enter__')
            with_enter_178446 = invoke(stypy.reporting.localization.Localization(__file__, 793, 13), enter___178445)
            
            # Call to simplefilter(...): (line 794)
            # Processing the call arguments (line 794)
            str_178449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 794, 34), 'str', 'ignore')
            # Getting the type of 'LineSearchWarning' (line 794)
            LineSearchWarning_178450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 44), 'LineSearchWarning', False)
            # Processing the call keyword arguments (line 794)
            kwargs_178451 = {}
            # Getting the type of 'warnings' (line 794)
            warnings_178447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 12), 'warnings', False)
            # Obtaining the member 'simplefilter' of a type (line 794)
            simplefilter_178448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 794, 12), warnings_178447, 'simplefilter')
            # Calling simplefilter(args, kwargs) (line 794)
            simplefilter_call_result_178452 = invoke(stypy.reporting.localization.Localization(__file__, 794, 12), simplefilter_178448, *[str_178449, LineSearchWarning_178450], **kwargs_178451)
            
            
            # Assigning a Dict to a Name (line 795):
            
            # Assigning a Dict to a Name (line 795):
            
            # Obtaining an instance of the builtin type 'dict' (line 795)
            dict_178453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 795, 22), 'dict')
            # Adding type elements to the builtin type 'dict' instance (line 795)
            
            # Assigning a type to the variable 'kwargs2' (line 795)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 795, 12), 'kwargs2', dict_178453)
            
            
            # Obtaining an instance of the builtin type 'tuple' (line 796)
            tuple_178454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 796, 24), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 796)
            # Adding element type (line 796)
            str_178455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 796, 24), 'str', 'c1')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 796, 24), tuple_178454, str_178455)
            # Adding element type (line 796)
            str_178456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 796, 30), 'str', 'c2')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 796, 24), tuple_178454, str_178456)
            # Adding element type (line 796)
            str_178457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 796, 36), 'str', 'amax')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 796, 24), tuple_178454, str_178457)
            
            # Testing the type of a for loop iterable (line 796)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 796, 12), tuple_178454)
            # Getting the type of the for loop variable (line 796)
            for_loop_var_178458 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 796, 12), tuple_178454)
            # Assigning a type to the variable 'key' (line 796)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 12), 'key', for_loop_var_178458)
            # SSA begins for a for statement (line 796)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            
            # Getting the type of 'key' (line 797)
            key_178459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 19), 'key')
            # Getting the type of 'kwargs' (line 797)
            kwargs_178460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 26), 'kwargs')
            # Applying the binary operator 'in' (line 797)
            result_contains_178461 = python_operator(stypy.reporting.localization.Localization(__file__, 797, 19), 'in', key_178459, kwargs_178460)
            
            # Testing the type of an if condition (line 797)
            if_condition_178462 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 797, 16), result_contains_178461)
            # Assigning a type to the variable 'if_condition_178462' (line 797)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 16), 'if_condition_178462', if_condition_178462)
            # SSA begins for if statement (line 797)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Subscript (line 798):
            
            # Assigning a Subscript to a Subscript (line 798):
            
            # Obtaining the type of the subscript
            # Getting the type of 'key' (line 798)
            key_178463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 42), 'key')
            # Getting the type of 'kwargs' (line 798)
            kwargs_178464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 35), 'kwargs')
            # Obtaining the member '__getitem__' of a type (line 798)
            getitem___178465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 35), kwargs_178464, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 798)
            subscript_call_result_178466 = invoke(stypy.reporting.localization.Localization(__file__, 798, 35), getitem___178465, key_178463)
            
            # Getting the type of 'kwargs2' (line 798)
            kwargs2_178467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 20), 'kwargs2')
            # Getting the type of 'key' (line 798)
            key_178468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 28), 'key')
            # Storing an element on a container (line 798)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 798, 20), kwargs2_178467, (key_178468, subscript_call_result_178466))
            # SSA join for if statement (line 797)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Name (line 799):
            
            # Assigning a Call to a Name (line 799):
            
            # Call to line_search_wolfe2(...): (line 799)
            # Processing the call arguments (line 799)
            # Getting the type of 'f' (line 799)
            f_178470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 37), 'f', False)
            # Getting the type of 'fprime' (line 799)
            fprime_178471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 40), 'fprime', False)
            # Getting the type of 'xk' (line 799)
            xk_178472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 48), 'xk', False)
            # Getting the type of 'pk' (line 799)
            pk_178473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 52), 'pk', False)
            # Getting the type of 'gfk' (line 799)
            gfk_178474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 56), 'gfk', False)
            # Getting the type of 'old_fval' (line 800)
            old_fval_178475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 37), 'old_fval', False)
            # Getting the type of 'old_old_fval' (line 800)
            old_old_fval_178476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 47), 'old_old_fval', False)
            # Processing the call keyword arguments (line 799)
            # Getting the type of 'extra_condition' (line 801)
            extra_condition_178477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 53), 'extra_condition', False)
            keyword_178478 = extra_condition_178477
            # Getting the type of 'kwargs2' (line 802)
            kwargs2_178479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 39), 'kwargs2', False)
            kwargs_178480 = {'extra_condition': keyword_178478, 'kwargs2_178479': kwargs2_178479}
            # Getting the type of 'line_search_wolfe2' (line 799)
            line_search_wolfe2_178469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 18), 'line_search_wolfe2', False)
            # Calling line_search_wolfe2(args, kwargs) (line 799)
            line_search_wolfe2_call_result_178481 = invoke(stypy.reporting.localization.Localization(__file__, 799, 18), line_search_wolfe2_178469, *[f_178470, fprime_178471, xk_178472, pk_178473, gfk_178474, old_fval_178475, old_old_fval_178476], **kwargs_178480)
            
            # Assigning a type to the variable 'ret' (line 799)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 12), 'ret', line_search_wolfe2_call_result_178481)
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 793)
            exit___178482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 13), catch_warnings_call_result_178443, '__exit__')
            with_exit_178483 = invoke(stypy.reporting.localization.Localization(__file__, 793, 13), exit___178482, None, None, None)


        if more_types_in_union_178439:
            # SSA join for if statement (line 791)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 804)
    
    # Obtaining the type of the subscript
    int_178484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 804, 11), 'int')
    # Getting the type of 'ret' (line 804)
    ret_178485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 7), 'ret')
    # Obtaining the member '__getitem__' of a type (line 804)
    getitem___178486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 804, 7), ret_178485, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 804)
    subscript_call_result_178487 = invoke(stypy.reporting.localization.Localization(__file__, 804, 7), getitem___178486, int_178484)
    
    # Getting the type of 'None' (line 804)
    None_178488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 17), 'None')
    
    (may_be_178489, more_types_in_union_178490) = may_be_none(subscript_call_result_178487, None_178488)

    if may_be_178489:

        if more_types_in_union_178490:
            # Runtime conditional SSA (line 804)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to _LineSearchError(...): (line 805)
        # Processing the call keyword arguments (line 805)
        kwargs_178492 = {}
        # Getting the type of '_LineSearchError' (line 805)
        _LineSearchError_178491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 14), '_LineSearchError', False)
        # Calling _LineSearchError(args, kwargs) (line 805)
        _LineSearchError_call_result_178493 = invoke(stypy.reporting.localization.Localization(__file__, 805, 14), _LineSearchError_178491, *[], **kwargs_178492)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 805, 8), _LineSearchError_call_result_178493, 'raise parameter', BaseException)

        if more_types_in_union_178490:
            # SSA join for if statement (line 804)
            module_type_store = module_type_store.join_ssa_context()


    
    # Getting the type of 'ret' (line 807)
    ret_178494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 807)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 807, 4), 'stypy_return_type', ret_178494)
    
    # ################# End of '_line_search_wolfe12(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_line_search_wolfe12' in the type store
    # Getting the type of 'stypy_return_type' (line 765)
    stypy_return_type_178495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_178495)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_line_search_wolfe12'
    return stypy_return_type_178495

# Assigning a type to the variable '_line_search_wolfe12' (line 765)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 765, 0), '_line_search_wolfe12', _line_search_wolfe12)

@norecursion
def fmin_bfgs(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 810)
    None_178496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 28), 'None')
    
    # Obtaining an instance of the builtin type 'tuple' (line 810)
    tuple_178497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 810, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 810)
    
    float_178498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 810, 48), 'float')
    # Getting the type of 'Inf' (line 810)
    Inf_178499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 59), 'Inf')
    # Getting the type of '_epsilon' (line 811)
    _epsilon_178500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 22), '_epsilon')
    # Getting the type of 'None' (line 811)
    None_178501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 40), 'None')
    int_178502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 811, 58), 'int')
    int_178503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 811, 66), 'int')
    int_178504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 812, 21), 'int')
    # Getting the type of 'None' (line 812)
    None_178505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 33), 'None')
    defaults = [None_178496, tuple_178497, float_178498, Inf_178499, _epsilon_178500, None_178501, int_178502, int_178503, int_178504, None_178505]
    # Create a new context for function 'fmin_bfgs'
    module_type_store = module_type_store.open_function_context('fmin_bfgs', 810, 0, False)
    
    # Passed parameters checking function
    fmin_bfgs.stypy_localization = localization
    fmin_bfgs.stypy_type_of_self = None
    fmin_bfgs.stypy_type_store = module_type_store
    fmin_bfgs.stypy_function_name = 'fmin_bfgs'
    fmin_bfgs.stypy_param_names_list = ['f', 'x0', 'fprime', 'args', 'gtol', 'norm', 'epsilon', 'maxiter', 'full_output', 'disp', 'retall', 'callback']
    fmin_bfgs.stypy_varargs_param_name = None
    fmin_bfgs.stypy_kwargs_param_name = None
    fmin_bfgs.stypy_call_defaults = defaults
    fmin_bfgs.stypy_call_varargs = varargs
    fmin_bfgs.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fmin_bfgs', ['f', 'x0', 'fprime', 'args', 'gtol', 'norm', 'epsilon', 'maxiter', 'full_output', 'disp', 'retall', 'callback'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fmin_bfgs', localization, ['f', 'x0', 'fprime', 'args', 'gtol', 'norm', 'epsilon', 'maxiter', 'full_output', 'disp', 'retall', 'callback'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fmin_bfgs(...)' code ##################

    str_178506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 881, (-1)), 'str', "\n    Minimize a function using the BFGS algorithm.\n\n    Parameters\n    ----------\n    f : callable f(x,*args)\n        Objective function to be minimized.\n    x0 : ndarray\n        Initial guess.\n    fprime : callable f'(x,*args), optional\n        Gradient of f.\n    args : tuple, optional\n        Extra arguments passed to f and fprime.\n    gtol : float, optional\n        Gradient norm must be less than gtol before successful termination.\n    norm : float, optional\n        Order of norm (Inf is max, -Inf is min)\n    epsilon : int or ndarray, optional\n        If fprime is approximated, use this value for the step size.\n    callback : callable, optional\n        An optional user-supplied function to call after each\n        iteration.  Called as callback(xk), where xk is the\n        current parameter vector.\n    maxiter : int, optional\n        Maximum number of iterations to perform.\n    full_output : bool, optional\n        If True,return fopt, func_calls, grad_calls, and warnflag\n        in addition to xopt.\n    disp : bool, optional\n        Print convergence message if True.\n    retall : bool, optional\n        Return a list of results at each iteration if True.\n\n    Returns\n    -------\n    xopt : ndarray\n        Parameters which minimize f, i.e. f(xopt) == fopt.\n    fopt : float\n        Minimum value.\n    gopt : ndarray\n        Value of gradient at minimum, f'(xopt), which should be near 0.\n    Bopt : ndarray\n        Value of 1/f''(xopt), i.e. the inverse hessian matrix.\n    func_calls : int\n        Number of function_calls made.\n    grad_calls : int\n        Number of gradient calls made.\n    warnflag : integer\n        1 : Maximum number of iterations exceeded.\n        2 : Gradient and/or function calls not changing.\n    allvecs  :  list\n        `OptimizeResult` at each iteration.  Only returned if retall is True.\n\n    See also\n    --------\n    minimize: Interface to minimization algorithms for multivariate\n        functions. See the 'BFGS' `method` in particular.\n\n    Notes\n    -----\n    Optimize the function, f, whose gradient is given by fprime\n    using the quasi-Newton method of Broyden, Fletcher, Goldfarb,\n    and Shanno (BFGS)\n\n    References\n    ----------\n    Wright, and Nocedal 'Numerical Optimization', 1999, pg. 198.\n\n    ")
    
    # Assigning a Dict to a Name (line 882):
    
    # Assigning a Dict to a Name (line 882):
    
    # Obtaining an instance of the builtin type 'dict' (line 882)
    dict_178507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 882, 11), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 882)
    # Adding element type (key, value) (line 882)
    str_178508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 882, 12), 'str', 'gtol')
    # Getting the type of 'gtol' (line 882)
    gtol_178509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 20), 'gtol')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 882, 11), dict_178507, (str_178508, gtol_178509))
    # Adding element type (key, value) (line 882)
    str_178510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 883, 12), 'str', 'norm')
    # Getting the type of 'norm' (line 883)
    norm_178511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 20), 'norm')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 882, 11), dict_178507, (str_178510, norm_178511))
    # Adding element type (key, value) (line 882)
    str_178512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 884, 12), 'str', 'eps')
    # Getting the type of 'epsilon' (line 884)
    epsilon_178513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 19), 'epsilon')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 882, 11), dict_178507, (str_178512, epsilon_178513))
    # Adding element type (key, value) (line 882)
    str_178514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 885, 12), 'str', 'disp')
    # Getting the type of 'disp' (line 885)
    disp_178515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 20), 'disp')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 882, 11), dict_178507, (str_178514, disp_178515))
    # Adding element type (key, value) (line 882)
    str_178516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 886, 12), 'str', 'maxiter')
    # Getting the type of 'maxiter' (line 886)
    maxiter_178517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 23), 'maxiter')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 882, 11), dict_178507, (str_178516, maxiter_178517))
    # Adding element type (key, value) (line 882)
    str_178518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 887, 12), 'str', 'return_all')
    # Getting the type of 'retall' (line 887)
    retall_178519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 26), 'retall')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 882, 11), dict_178507, (str_178518, retall_178519))
    
    # Assigning a type to the variable 'opts' (line 882)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 882, 4), 'opts', dict_178507)
    
    # Assigning a Call to a Name (line 889):
    
    # Assigning a Call to a Name (line 889):
    
    # Call to _minimize_bfgs(...): (line 889)
    # Processing the call arguments (line 889)
    # Getting the type of 'f' (line 889)
    f_178521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 25), 'f', False)
    # Getting the type of 'x0' (line 889)
    x0_178522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 28), 'x0', False)
    # Getting the type of 'args' (line 889)
    args_178523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 32), 'args', False)
    # Getting the type of 'fprime' (line 889)
    fprime_178524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 38), 'fprime', False)
    # Processing the call keyword arguments (line 889)
    # Getting the type of 'callback' (line 889)
    callback_178525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 55), 'callback', False)
    keyword_178526 = callback_178525
    # Getting the type of 'opts' (line 889)
    opts_178527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 67), 'opts', False)
    kwargs_178528 = {'callback': keyword_178526, 'opts_178527': opts_178527}
    # Getting the type of '_minimize_bfgs' (line 889)
    _minimize_bfgs_178520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 10), '_minimize_bfgs', False)
    # Calling _minimize_bfgs(args, kwargs) (line 889)
    _minimize_bfgs_call_result_178529 = invoke(stypy.reporting.localization.Localization(__file__, 889, 10), _minimize_bfgs_178520, *[f_178521, x0_178522, args_178523, fprime_178524], **kwargs_178528)
    
    # Assigning a type to the variable 'res' (line 889)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 889, 4), 'res', _minimize_bfgs_call_result_178529)
    
    # Getting the type of 'full_output' (line 891)
    full_output_178530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 7), 'full_output')
    # Testing the type of an if condition (line 891)
    if_condition_178531 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 891, 4), full_output_178530)
    # Assigning a type to the variable 'if_condition_178531' (line 891)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 891, 4), 'if_condition_178531', if_condition_178531)
    # SSA begins for if statement (line 891)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 892):
    
    # Assigning a Tuple to a Name (line 892):
    
    # Obtaining an instance of the builtin type 'tuple' (line 892)
    tuple_178532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 892, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 892)
    # Adding element type (line 892)
    
    # Obtaining the type of the subscript
    str_178533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 892, 23), 'str', 'x')
    # Getting the type of 'res' (line 892)
    res_178534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 19), 'res')
    # Obtaining the member '__getitem__' of a type (line 892)
    getitem___178535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 19), res_178534, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 892)
    subscript_call_result_178536 = invoke(stypy.reporting.localization.Localization(__file__, 892, 19), getitem___178535, str_178533)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 892, 19), tuple_178532, subscript_call_result_178536)
    # Adding element type (line 892)
    
    # Obtaining the type of the subscript
    str_178537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 892, 33), 'str', 'fun')
    # Getting the type of 'res' (line 892)
    res_178538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 29), 'res')
    # Obtaining the member '__getitem__' of a type (line 892)
    getitem___178539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 29), res_178538, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 892)
    subscript_call_result_178540 = invoke(stypy.reporting.localization.Localization(__file__, 892, 29), getitem___178539, str_178537)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 892, 19), tuple_178532, subscript_call_result_178540)
    # Adding element type (line 892)
    
    # Obtaining the type of the subscript
    str_178541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 892, 45), 'str', 'jac')
    # Getting the type of 'res' (line 892)
    res_178542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 41), 'res')
    # Obtaining the member '__getitem__' of a type (line 892)
    getitem___178543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 41), res_178542, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 892)
    subscript_call_result_178544 = invoke(stypy.reporting.localization.Localization(__file__, 892, 41), getitem___178543, str_178541)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 892, 19), tuple_178532, subscript_call_result_178544)
    # Adding element type (line 892)
    
    # Obtaining the type of the subscript
    str_178545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 892, 57), 'str', 'hess_inv')
    # Getting the type of 'res' (line 892)
    res_178546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 53), 'res')
    # Obtaining the member '__getitem__' of a type (line 892)
    getitem___178547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 53), res_178546, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 892)
    subscript_call_result_178548 = invoke(stypy.reporting.localization.Localization(__file__, 892, 53), getitem___178547, str_178545)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 892, 19), tuple_178532, subscript_call_result_178548)
    # Adding element type (line 892)
    
    # Obtaining the type of the subscript
    str_178549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 893, 23), 'str', 'nfev')
    # Getting the type of 'res' (line 893)
    res_178550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 19), 'res')
    # Obtaining the member '__getitem__' of a type (line 893)
    getitem___178551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 893, 19), res_178550, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 893)
    subscript_call_result_178552 = invoke(stypy.reporting.localization.Localization(__file__, 893, 19), getitem___178551, str_178549)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 892, 19), tuple_178532, subscript_call_result_178552)
    # Adding element type (line 892)
    
    # Obtaining the type of the subscript
    str_178553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 893, 36), 'str', 'njev')
    # Getting the type of 'res' (line 893)
    res_178554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 32), 'res')
    # Obtaining the member '__getitem__' of a type (line 893)
    getitem___178555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 893, 32), res_178554, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 893)
    subscript_call_result_178556 = invoke(stypy.reporting.localization.Localization(__file__, 893, 32), getitem___178555, str_178553)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 892, 19), tuple_178532, subscript_call_result_178556)
    # Adding element type (line 892)
    
    # Obtaining the type of the subscript
    str_178557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 893, 49), 'str', 'status')
    # Getting the type of 'res' (line 893)
    res_178558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 45), 'res')
    # Obtaining the member '__getitem__' of a type (line 893)
    getitem___178559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 893, 45), res_178558, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 893)
    subscript_call_result_178560 = invoke(stypy.reporting.localization.Localization(__file__, 893, 45), getitem___178559, str_178557)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 892, 19), tuple_178532, subscript_call_result_178560)
    
    # Assigning a type to the variable 'retlist' (line 892)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 892, 8), 'retlist', tuple_178532)
    
    # Getting the type of 'retall' (line 894)
    retall_178561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 11), 'retall')
    # Testing the type of an if condition (line 894)
    if_condition_178562 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 894, 8), retall_178561)
    # Assigning a type to the variable 'if_condition_178562' (line 894)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 894, 8), 'if_condition_178562', if_condition_178562)
    # SSA begins for if statement (line 894)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'retlist' (line 895)
    retlist_178563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 12), 'retlist')
    
    # Obtaining an instance of the builtin type 'tuple' (line 895)
    tuple_178564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 895, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 895)
    # Adding element type (line 895)
    
    # Obtaining the type of the subscript
    str_178565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 895, 28), 'str', 'allvecs')
    # Getting the type of 'res' (line 895)
    res_178566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 24), 'res')
    # Obtaining the member '__getitem__' of a type (line 895)
    getitem___178567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 895, 24), res_178566, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 895)
    subscript_call_result_178568 = invoke(stypy.reporting.localization.Localization(__file__, 895, 24), getitem___178567, str_178565)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 895, 24), tuple_178564, subscript_call_result_178568)
    
    # Applying the binary operator '+=' (line 895)
    result_iadd_178569 = python_operator(stypy.reporting.localization.Localization(__file__, 895, 12), '+=', retlist_178563, tuple_178564)
    # Assigning a type to the variable 'retlist' (line 895)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 895, 12), 'retlist', result_iadd_178569)
    
    # SSA join for if statement (line 894)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'retlist' (line 896)
    retlist_178570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 15), 'retlist')
    # Assigning a type to the variable 'stypy_return_type' (line 896)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 8), 'stypy_return_type', retlist_178570)
    # SSA branch for the else part of an if statement (line 891)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'retall' (line 898)
    retall_178571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 11), 'retall')
    # Testing the type of an if condition (line 898)
    if_condition_178572 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 898, 8), retall_178571)
    # Assigning a type to the variable 'if_condition_178572' (line 898)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 898, 8), 'if_condition_178572', if_condition_178572)
    # SSA begins for if statement (line 898)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 899)
    tuple_178573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 899, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 899)
    # Adding element type (line 899)
    
    # Obtaining the type of the subscript
    str_178574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 899, 23), 'str', 'x')
    # Getting the type of 'res' (line 899)
    res_178575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 19), 'res')
    # Obtaining the member '__getitem__' of a type (line 899)
    getitem___178576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 899, 19), res_178575, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 899)
    subscript_call_result_178577 = invoke(stypy.reporting.localization.Localization(__file__, 899, 19), getitem___178576, str_178574)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 899, 19), tuple_178573, subscript_call_result_178577)
    # Adding element type (line 899)
    
    # Obtaining the type of the subscript
    str_178578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 899, 33), 'str', 'allvecs')
    # Getting the type of 'res' (line 899)
    res_178579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 29), 'res')
    # Obtaining the member '__getitem__' of a type (line 899)
    getitem___178580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 899, 29), res_178579, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 899)
    subscript_call_result_178581 = invoke(stypy.reporting.localization.Localization(__file__, 899, 29), getitem___178580, str_178578)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 899, 19), tuple_178573, subscript_call_result_178581)
    
    # Assigning a type to the variable 'stypy_return_type' (line 899)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 899, 12), 'stypy_return_type', tuple_178573)
    # SSA branch for the else part of an if statement (line 898)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining the type of the subscript
    str_178582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 901, 23), 'str', 'x')
    # Getting the type of 'res' (line 901)
    res_178583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 19), 'res')
    # Obtaining the member '__getitem__' of a type (line 901)
    getitem___178584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 901, 19), res_178583, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 901)
    subscript_call_result_178585 = invoke(stypy.reporting.localization.Localization(__file__, 901, 19), getitem___178584, str_178582)
    
    # Assigning a type to the variable 'stypy_return_type' (line 901)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 901, 12), 'stypy_return_type', subscript_call_result_178585)
    # SSA join for if statement (line 898)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 891)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'fmin_bfgs(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fmin_bfgs' in the type store
    # Getting the type of 'stypy_return_type' (line 810)
    stypy_return_type_178586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_178586)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fmin_bfgs'
    return stypy_return_type_178586

# Assigning a type to the variable 'fmin_bfgs' (line 810)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 810, 0), 'fmin_bfgs', fmin_bfgs)

@norecursion
def _minimize_bfgs(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 904)
    tuple_178587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 904, 33), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 904)
    
    # Getting the type of 'None' (line 904)
    None_178588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 41), 'None')
    # Getting the type of 'None' (line 904)
    None_178589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 56), 'None')
    float_178590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 905, 24), 'float')
    # Getting the type of 'Inf' (line 905)
    Inf_178591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 35), 'Inf')
    # Getting the type of '_epsilon' (line 905)
    _epsilon_178592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 44), '_epsilon')
    # Getting the type of 'None' (line 905)
    None_178593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 62), 'None')
    # Getting the type of 'False' (line 906)
    False_178594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 24), 'False')
    # Getting the type of 'False' (line 906)
    False_178595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 42), 'False')
    defaults = [tuple_178587, None_178588, None_178589, float_178590, Inf_178591, _epsilon_178592, None_178593, False_178594, False_178595]
    # Create a new context for function '_minimize_bfgs'
    module_type_store = module_type_store.open_function_context('_minimize_bfgs', 904, 0, False)
    
    # Passed parameters checking function
    _minimize_bfgs.stypy_localization = localization
    _minimize_bfgs.stypy_type_of_self = None
    _minimize_bfgs.stypy_type_store = module_type_store
    _minimize_bfgs.stypy_function_name = '_minimize_bfgs'
    _minimize_bfgs.stypy_param_names_list = ['fun', 'x0', 'args', 'jac', 'callback', 'gtol', 'norm', 'eps', 'maxiter', 'disp', 'return_all']
    _minimize_bfgs.stypy_varargs_param_name = None
    _minimize_bfgs.stypy_kwargs_param_name = 'unknown_options'
    _minimize_bfgs.stypy_call_defaults = defaults
    _minimize_bfgs.stypy_call_varargs = varargs
    _minimize_bfgs.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_minimize_bfgs', ['fun', 'x0', 'args', 'jac', 'callback', 'gtol', 'norm', 'eps', 'maxiter', 'disp', 'return_all'], None, 'unknown_options', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_minimize_bfgs', localization, ['fun', 'x0', 'args', 'jac', 'callback', 'gtol', 'norm', 'eps', 'maxiter', 'disp', 'return_all'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_minimize_bfgs(...)' code ##################

    str_178596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 926, (-1)), 'str', '\n    Minimization of scalar function of one or more variables using the\n    BFGS algorithm.\n\n    Options\n    -------\n    disp : bool\n        Set to True to print convergence messages.\n    maxiter : int\n        Maximum number of iterations to perform.\n    gtol : float\n        Gradient norm must be less than `gtol` before successful\n        termination.\n    norm : float\n        Order of norm (Inf is max, -Inf is min).\n    eps : float or ndarray\n        If `jac` is approximated, use this value for the step size.\n\n    ')
    
    # Call to _check_unknown_options(...): (line 927)
    # Processing the call arguments (line 927)
    # Getting the type of 'unknown_options' (line 927)
    unknown_options_178598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 27), 'unknown_options', False)
    # Processing the call keyword arguments (line 927)
    kwargs_178599 = {}
    # Getting the type of '_check_unknown_options' (line 927)
    _check_unknown_options_178597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 4), '_check_unknown_options', False)
    # Calling _check_unknown_options(args, kwargs) (line 927)
    _check_unknown_options_call_result_178600 = invoke(stypy.reporting.localization.Localization(__file__, 927, 4), _check_unknown_options_178597, *[unknown_options_178598], **kwargs_178599)
    
    
    # Assigning a Name to a Name (line 928):
    
    # Assigning a Name to a Name (line 928):
    # Getting the type of 'fun' (line 928)
    fun_178601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 8), 'fun')
    # Assigning a type to the variable 'f' (line 928)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 928, 4), 'f', fun_178601)
    
    # Assigning a Name to a Name (line 929):
    
    # Assigning a Name to a Name (line 929):
    # Getting the type of 'jac' (line 929)
    jac_178602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 13), 'jac')
    # Assigning a type to the variable 'fprime' (line 929)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 4), 'fprime', jac_178602)
    
    # Assigning a Name to a Name (line 930):
    
    # Assigning a Name to a Name (line 930):
    # Getting the type of 'eps' (line 930)
    eps_178603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 14), 'eps')
    # Assigning a type to the variable 'epsilon' (line 930)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 930, 4), 'epsilon', eps_178603)
    
    # Assigning a Name to a Name (line 931):
    
    # Assigning a Name to a Name (line 931):
    # Getting the type of 'return_all' (line 931)
    return_all_178604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 13), 'return_all')
    # Assigning a type to the variable 'retall' (line 931)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 931, 4), 'retall', return_all_178604)
    
    # Assigning a Call to a Name (line 933):
    
    # Assigning a Call to a Name (line 933):
    
    # Call to flatten(...): (line 933)
    # Processing the call keyword arguments (line 933)
    kwargs_178610 = {}
    
    # Call to asarray(...): (line 933)
    # Processing the call arguments (line 933)
    # Getting the type of 'x0' (line 933)
    x0_178606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 17), 'x0', False)
    # Processing the call keyword arguments (line 933)
    kwargs_178607 = {}
    # Getting the type of 'asarray' (line 933)
    asarray_178605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 9), 'asarray', False)
    # Calling asarray(args, kwargs) (line 933)
    asarray_call_result_178608 = invoke(stypy.reporting.localization.Localization(__file__, 933, 9), asarray_178605, *[x0_178606], **kwargs_178607)
    
    # Obtaining the member 'flatten' of a type (line 933)
    flatten_178609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 933, 9), asarray_call_result_178608, 'flatten')
    # Calling flatten(args, kwargs) (line 933)
    flatten_call_result_178611 = invoke(stypy.reporting.localization.Localization(__file__, 933, 9), flatten_178609, *[], **kwargs_178610)
    
    # Assigning a type to the variable 'x0' (line 933)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 4), 'x0', flatten_call_result_178611)
    
    
    # Getting the type of 'x0' (line 934)
    x0_178612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 7), 'x0')
    # Obtaining the member 'ndim' of a type (line 934)
    ndim_178613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 934, 7), x0_178612, 'ndim')
    int_178614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 934, 18), 'int')
    # Applying the binary operator '==' (line 934)
    result_eq_178615 = python_operator(stypy.reporting.localization.Localization(__file__, 934, 7), '==', ndim_178613, int_178614)
    
    # Testing the type of an if condition (line 934)
    if_condition_178616 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 934, 4), result_eq_178615)
    # Assigning a type to the variable 'if_condition_178616' (line 934)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 934, 4), 'if_condition_178616', if_condition_178616)
    # SSA begins for if statement (line 934)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Attribute (line 935):
    
    # Assigning a Tuple to a Attribute (line 935):
    
    # Obtaining an instance of the builtin type 'tuple' (line 935)
    tuple_178617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 935, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 935)
    # Adding element type (line 935)
    int_178618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 935, 20), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 935, 20), tuple_178617, int_178618)
    
    # Getting the type of 'x0' (line 935)
    x0_178619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 8), 'x0')
    # Setting the type of the member 'shape' of a type (line 935)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 935, 8), x0_178619, 'shape', tuple_178617)
    # SSA join for if statement (line 934)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 936)
    # Getting the type of 'maxiter' (line 936)
    maxiter_178620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 7), 'maxiter')
    # Getting the type of 'None' (line 936)
    None_178621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 18), 'None')
    
    (may_be_178622, more_types_in_union_178623) = may_be_none(maxiter_178620, None_178621)

    if may_be_178622:

        if more_types_in_union_178623:
            # Runtime conditional SSA (line 936)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BinOp to a Name (line 937):
        
        # Assigning a BinOp to a Name (line 937):
        
        # Call to len(...): (line 937)
        # Processing the call arguments (line 937)
        # Getting the type of 'x0' (line 937)
        x0_178625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 22), 'x0', False)
        # Processing the call keyword arguments (line 937)
        kwargs_178626 = {}
        # Getting the type of 'len' (line 937)
        len_178624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 18), 'len', False)
        # Calling len(args, kwargs) (line 937)
        len_call_result_178627 = invoke(stypy.reporting.localization.Localization(__file__, 937, 18), len_178624, *[x0_178625], **kwargs_178626)
        
        int_178628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 937, 28), 'int')
        # Applying the binary operator '*' (line 937)
        result_mul_178629 = python_operator(stypy.reporting.localization.Localization(__file__, 937, 18), '*', len_call_result_178627, int_178628)
        
        # Assigning a type to the variable 'maxiter' (line 937)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 8), 'maxiter', result_mul_178629)

        if more_types_in_union_178623:
            # SSA join for if statement (line 936)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Tuple (line 938):
    
    # Assigning a Subscript to a Name (line 938):
    
    # Obtaining the type of the subscript
    int_178630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 4), 'int')
    
    # Call to wrap_function(...): (line 938)
    # Processing the call arguments (line 938)
    # Getting the type of 'f' (line 938)
    f_178632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 34), 'f', False)
    # Getting the type of 'args' (line 938)
    args_178633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 37), 'args', False)
    # Processing the call keyword arguments (line 938)
    kwargs_178634 = {}
    # Getting the type of 'wrap_function' (line 938)
    wrap_function_178631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 20), 'wrap_function', False)
    # Calling wrap_function(args, kwargs) (line 938)
    wrap_function_call_result_178635 = invoke(stypy.reporting.localization.Localization(__file__, 938, 20), wrap_function_178631, *[f_178632, args_178633], **kwargs_178634)
    
    # Obtaining the member '__getitem__' of a type (line 938)
    getitem___178636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 4), wrap_function_call_result_178635, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 938)
    subscript_call_result_178637 = invoke(stypy.reporting.localization.Localization(__file__, 938, 4), getitem___178636, int_178630)
    
    # Assigning a type to the variable 'tuple_var_assignment_176616' (line 938)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 4), 'tuple_var_assignment_176616', subscript_call_result_178637)
    
    # Assigning a Subscript to a Name (line 938):
    
    # Obtaining the type of the subscript
    int_178638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 4), 'int')
    
    # Call to wrap_function(...): (line 938)
    # Processing the call arguments (line 938)
    # Getting the type of 'f' (line 938)
    f_178640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 34), 'f', False)
    # Getting the type of 'args' (line 938)
    args_178641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 37), 'args', False)
    # Processing the call keyword arguments (line 938)
    kwargs_178642 = {}
    # Getting the type of 'wrap_function' (line 938)
    wrap_function_178639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 20), 'wrap_function', False)
    # Calling wrap_function(args, kwargs) (line 938)
    wrap_function_call_result_178643 = invoke(stypy.reporting.localization.Localization(__file__, 938, 20), wrap_function_178639, *[f_178640, args_178641], **kwargs_178642)
    
    # Obtaining the member '__getitem__' of a type (line 938)
    getitem___178644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 4), wrap_function_call_result_178643, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 938)
    subscript_call_result_178645 = invoke(stypy.reporting.localization.Localization(__file__, 938, 4), getitem___178644, int_178638)
    
    # Assigning a type to the variable 'tuple_var_assignment_176617' (line 938)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 4), 'tuple_var_assignment_176617', subscript_call_result_178645)
    
    # Assigning a Name to a Name (line 938):
    # Getting the type of 'tuple_var_assignment_176616' (line 938)
    tuple_var_assignment_176616_178646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 4), 'tuple_var_assignment_176616')
    # Assigning a type to the variable 'func_calls' (line 938)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 4), 'func_calls', tuple_var_assignment_176616_178646)
    
    # Assigning a Name to a Name (line 938):
    # Getting the type of 'tuple_var_assignment_176617' (line 938)
    tuple_var_assignment_176617_178647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 4), 'tuple_var_assignment_176617')
    # Assigning a type to the variable 'f' (line 938)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 16), 'f', tuple_var_assignment_176617_178647)
    
    # Type idiom detected: calculating its left and rigth part (line 939)
    # Getting the type of 'fprime' (line 939)
    fprime_178648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 7), 'fprime')
    # Getting the type of 'None' (line 939)
    None_178649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 17), 'None')
    
    (may_be_178650, more_types_in_union_178651) = may_be_none(fprime_178648, None_178649)

    if may_be_178650:

        if more_types_in_union_178651:
            # Runtime conditional SSA (line 939)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Tuple (line 940):
        
        # Assigning a Subscript to a Name (line 940):
        
        # Obtaining the type of the subscript
        int_178652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 8), 'int')
        
        # Call to wrap_function(...): (line 940)
        # Processing the call arguments (line 940)
        # Getting the type of 'approx_fprime' (line 940)
        approx_fprime_178654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 45), 'approx_fprime', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 940)
        tuple_178655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 61), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 940)
        # Adding element type (line 940)
        # Getting the type of 'f' (line 940)
        f_178656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 61), 'f', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 940, 61), tuple_178655, f_178656)
        # Adding element type (line 940)
        # Getting the type of 'epsilon' (line 940)
        epsilon_178657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 64), 'epsilon', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 940, 61), tuple_178655, epsilon_178657)
        
        # Processing the call keyword arguments (line 940)
        kwargs_178658 = {}
        # Getting the type of 'wrap_function' (line 940)
        wrap_function_178653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 31), 'wrap_function', False)
        # Calling wrap_function(args, kwargs) (line 940)
        wrap_function_call_result_178659 = invoke(stypy.reporting.localization.Localization(__file__, 940, 31), wrap_function_178653, *[approx_fprime_178654, tuple_178655], **kwargs_178658)
        
        # Obtaining the member '__getitem__' of a type (line 940)
        getitem___178660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 940, 8), wrap_function_call_result_178659, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 940)
        subscript_call_result_178661 = invoke(stypy.reporting.localization.Localization(__file__, 940, 8), getitem___178660, int_178652)
        
        # Assigning a type to the variable 'tuple_var_assignment_176618' (line 940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 940, 8), 'tuple_var_assignment_176618', subscript_call_result_178661)
        
        # Assigning a Subscript to a Name (line 940):
        
        # Obtaining the type of the subscript
        int_178662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 8), 'int')
        
        # Call to wrap_function(...): (line 940)
        # Processing the call arguments (line 940)
        # Getting the type of 'approx_fprime' (line 940)
        approx_fprime_178664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 45), 'approx_fprime', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 940)
        tuple_178665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 61), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 940)
        # Adding element type (line 940)
        # Getting the type of 'f' (line 940)
        f_178666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 61), 'f', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 940, 61), tuple_178665, f_178666)
        # Adding element type (line 940)
        # Getting the type of 'epsilon' (line 940)
        epsilon_178667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 64), 'epsilon', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 940, 61), tuple_178665, epsilon_178667)
        
        # Processing the call keyword arguments (line 940)
        kwargs_178668 = {}
        # Getting the type of 'wrap_function' (line 940)
        wrap_function_178663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 31), 'wrap_function', False)
        # Calling wrap_function(args, kwargs) (line 940)
        wrap_function_call_result_178669 = invoke(stypy.reporting.localization.Localization(__file__, 940, 31), wrap_function_178663, *[approx_fprime_178664, tuple_178665], **kwargs_178668)
        
        # Obtaining the member '__getitem__' of a type (line 940)
        getitem___178670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 940, 8), wrap_function_call_result_178669, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 940)
        subscript_call_result_178671 = invoke(stypy.reporting.localization.Localization(__file__, 940, 8), getitem___178670, int_178662)
        
        # Assigning a type to the variable 'tuple_var_assignment_176619' (line 940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 940, 8), 'tuple_var_assignment_176619', subscript_call_result_178671)
        
        # Assigning a Name to a Name (line 940):
        # Getting the type of 'tuple_var_assignment_176618' (line 940)
        tuple_var_assignment_176618_178672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 8), 'tuple_var_assignment_176618')
        # Assigning a type to the variable 'grad_calls' (line 940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 940, 8), 'grad_calls', tuple_var_assignment_176618_178672)
        
        # Assigning a Name to a Name (line 940):
        # Getting the type of 'tuple_var_assignment_176619' (line 940)
        tuple_var_assignment_176619_178673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 8), 'tuple_var_assignment_176619')
        # Assigning a type to the variable 'myfprime' (line 940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 940, 20), 'myfprime', tuple_var_assignment_176619_178673)

        if more_types_in_union_178651:
            # Runtime conditional SSA for else branch (line 939)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_178650) or more_types_in_union_178651):
        
        # Assigning a Call to a Tuple (line 942):
        
        # Assigning a Subscript to a Name (line 942):
        
        # Obtaining the type of the subscript
        int_178674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 8), 'int')
        
        # Call to wrap_function(...): (line 942)
        # Processing the call arguments (line 942)
        # Getting the type of 'fprime' (line 942)
        fprime_178676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 45), 'fprime', False)
        # Getting the type of 'args' (line 942)
        args_178677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 53), 'args', False)
        # Processing the call keyword arguments (line 942)
        kwargs_178678 = {}
        # Getting the type of 'wrap_function' (line 942)
        wrap_function_178675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 31), 'wrap_function', False)
        # Calling wrap_function(args, kwargs) (line 942)
        wrap_function_call_result_178679 = invoke(stypy.reporting.localization.Localization(__file__, 942, 31), wrap_function_178675, *[fprime_178676, args_178677], **kwargs_178678)
        
        # Obtaining the member '__getitem__' of a type (line 942)
        getitem___178680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 8), wrap_function_call_result_178679, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 942)
        subscript_call_result_178681 = invoke(stypy.reporting.localization.Localization(__file__, 942, 8), getitem___178680, int_178674)
        
        # Assigning a type to the variable 'tuple_var_assignment_176620' (line 942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 8), 'tuple_var_assignment_176620', subscript_call_result_178681)
        
        # Assigning a Subscript to a Name (line 942):
        
        # Obtaining the type of the subscript
        int_178682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 8), 'int')
        
        # Call to wrap_function(...): (line 942)
        # Processing the call arguments (line 942)
        # Getting the type of 'fprime' (line 942)
        fprime_178684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 45), 'fprime', False)
        # Getting the type of 'args' (line 942)
        args_178685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 53), 'args', False)
        # Processing the call keyword arguments (line 942)
        kwargs_178686 = {}
        # Getting the type of 'wrap_function' (line 942)
        wrap_function_178683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 31), 'wrap_function', False)
        # Calling wrap_function(args, kwargs) (line 942)
        wrap_function_call_result_178687 = invoke(stypy.reporting.localization.Localization(__file__, 942, 31), wrap_function_178683, *[fprime_178684, args_178685], **kwargs_178686)
        
        # Obtaining the member '__getitem__' of a type (line 942)
        getitem___178688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 8), wrap_function_call_result_178687, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 942)
        subscript_call_result_178689 = invoke(stypy.reporting.localization.Localization(__file__, 942, 8), getitem___178688, int_178682)
        
        # Assigning a type to the variable 'tuple_var_assignment_176621' (line 942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 8), 'tuple_var_assignment_176621', subscript_call_result_178689)
        
        # Assigning a Name to a Name (line 942):
        # Getting the type of 'tuple_var_assignment_176620' (line 942)
        tuple_var_assignment_176620_178690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 8), 'tuple_var_assignment_176620')
        # Assigning a type to the variable 'grad_calls' (line 942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 8), 'grad_calls', tuple_var_assignment_176620_178690)
        
        # Assigning a Name to a Name (line 942):
        # Getting the type of 'tuple_var_assignment_176621' (line 942)
        tuple_var_assignment_176621_178691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 8), 'tuple_var_assignment_176621')
        # Assigning a type to the variable 'myfprime' (line 942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 20), 'myfprime', tuple_var_assignment_176621_178691)

        if (may_be_178650 and more_types_in_union_178651):
            # SSA join for if statement (line 939)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 943):
    
    # Assigning a Call to a Name (line 943):
    
    # Call to myfprime(...): (line 943)
    # Processing the call arguments (line 943)
    # Getting the type of 'x0' (line 943)
    x0_178693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 19), 'x0', False)
    # Processing the call keyword arguments (line 943)
    kwargs_178694 = {}
    # Getting the type of 'myfprime' (line 943)
    myfprime_178692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 10), 'myfprime', False)
    # Calling myfprime(args, kwargs) (line 943)
    myfprime_call_result_178695 = invoke(stypy.reporting.localization.Localization(__file__, 943, 10), myfprime_178692, *[x0_178693], **kwargs_178694)
    
    # Assigning a type to the variable 'gfk' (line 943)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 943, 4), 'gfk', myfprime_call_result_178695)
    
    # Assigning a Num to a Name (line 944):
    
    # Assigning a Num to a Name (line 944):
    int_178696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 944, 8), 'int')
    # Assigning a type to the variable 'k' (line 944)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 944, 4), 'k', int_178696)
    
    # Assigning a Call to a Name (line 945):
    
    # Assigning a Call to a Name (line 945):
    
    # Call to len(...): (line 945)
    # Processing the call arguments (line 945)
    # Getting the type of 'x0' (line 945)
    x0_178698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 12), 'x0', False)
    # Processing the call keyword arguments (line 945)
    kwargs_178699 = {}
    # Getting the type of 'len' (line 945)
    len_178697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 8), 'len', False)
    # Calling len(args, kwargs) (line 945)
    len_call_result_178700 = invoke(stypy.reporting.localization.Localization(__file__, 945, 8), len_178697, *[x0_178698], **kwargs_178699)
    
    # Assigning a type to the variable 'N' (line 945)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 945, 4), 'N', len_call_result_178700)
    
    # Assigning a Call to a Name (line 946):
    
    # Assigning a Call to a Name (line 946):
    
    # Call to eye(...): (line 946)
    # Processing the call arguments (line 946)
    # Getting the type of 'N' (line 946)
    N_178703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 18), 'N', False)
    # Processing the call keyword arguments (line 946)
    # Getting the type of 'int' (line 946)
    int_178704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 27), 'int', False)
    keyword_178705 = int_178704
    kwargs_178706 = {'dtype': keyword_178705}
    # Getting the type of 'numpy' (line 946)
    numpy_178701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 8), 'numpy', False)
    # Obtaining the member 'eye' of a type (line 946)
    eye_178702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 946, 8), numpy_178701, 'eye')
    # Calling eye(args, kwargs) (line 946)
    eye_call_result_178707 = invoke(stypy.reporting.localization.Localization(__file__, 946, 8), eye_178702, *[N_178703], **kwargs_178706)
    
    # Assigning a type to the variable 'I' (line 946)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 946, 4), 'I', eye_call_result_178707)
    
    # Assigning a Name to a Name (line 947):
    
    # Assigning a Name to a Name (line 947):
    # Getting the type of 'I' (line 947)
    I_178708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 9), 'I')
    # Assigning a type to the variable 'Hk' (line 947)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 947, 4), 'Hk', I_178708)
    
    # Assigning a Call to a Name (line 950):
    
    # Assigning a Call to a Name (line 950):
    
    # Call to f(...): (line 950)
    # Processing the call arguments (line 950)
    # Getting the type of 'x0' (line 950)
    x0_178710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 17), 'x0', False)
    # Processing the call keyword arguments (line 950)
    kwargs_178711 = {}
    # Getting the type of 'f' (line 950)
    f_178709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 15), 'f', False)
    # Calling f(args, kwargs) (line 950)
    f_call_result_178712 = invoke(stypy.reporting.localization.Localization(__file__, 950, 15), f_178709, *[x0_178710], **kwargs_178711)
    
    # Assigning a type to the variable 'old_fval' (line 950)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 4), 'old_fval', f_call_result_178712)
    
    # Assigning a BinOp to a Name (line 951):
    
    # Assigning a BinOp to a Name (line 951):
    # Getting the type of 'old_fval' (line 951)
    old_fval_178713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 19), 'old_fval')
    
    # Call to norm(...): (line 951)
    # Processing the call arguments (line 951)
    # Getting the type of 'gfk' (line 951)
    gfk_178717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 45), 'gfk', False)
    # Processing the call keyword arguments (line 951)
    kwargs_178718 = {}
    # Getting the type of 'np' (line 951)
    np_178714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 30), 'np', False)
    # Obtaining the member 'linalg' of a type (line 951)
    linalg_178715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 951, 30), np_178714, 'linalg')
    # Obtaining the member 'norm' of a type (line 951)
    norm_178716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 951, 30), linalg_178715, 'norm')
    # Calling norm(args, kwargs) (line 951)
    norm_call_result_178719 = invoke(stypy.reporting.localization.Localization(__file__, 951, 30), norm_178716, *[gfk_178717], **kwargs_178718)
    
    int_178720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 951, 52), 'int')
    # Applying the binary operator 'div' (line 951)
    result_div_178721 = python_operator(stypy.reporting.localization.Localization(__file__, 951, 30), 'div', norm_call_result_178719, int_178720)
    
    # Applying the binary operator '+' (line 951)
    result_add_178722 = python_operator(stypy.reporting.localization.Localization(__file__, 951, 19), '+', old_fval_178713, result_div_178721)
    
    # Assigning a type to the variable 'old_old_fval' (line 951)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 951, 4), 'old_old_fval', result_add_178722)
    
    # Assigning a Name to a Name (line 953):
    
    # Assigning a Name to a Name (line 953):
    # Getting the type of 'x0' (line 953)
    x0_178723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 9), 'x0')
    # Assigning a type to the variable 'xk' (line 953)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 953, 4), 'xk', x0_178723)
    
    # Getting the type of 'retall' (line 954)
    retall_178724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 7), 'retall')
    # Testing the type of an if condition (line 954)
    if_condition_178725 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 954, 4), retall_178724)
    # Assigning a type to the variable 'if_condition_178725' (line 954)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 954, 4), 'if_condition_178725', if_condition_178725)
    # SSA begins for if statement (line 954)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a List to a Name (line 955):
    
    # Assigning a List to a Name (line 955):
    
    # Obtaining an instance of the builtin type 'list' (line 955)
    list_178726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 955, 18), 'list')
    # Adding type elements to the builtin type 'list' instance (line 955)
    # Adding element type (line 955)
    # Getting the type of 'x0' (line 955)
    x0_178727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 19), 'x0')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 955, 18), list_178726, x0_178727)
    
    # Assigning a type to the variable 'allvecs' (line 955)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 955, 8), 'allvecs', list_178726)
    # SSA join for if statement (line 954)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 956):
    
    # Assigning a List to a Name (line 956):
    
    # Obtaining an instance of the builtin type 'list' (line 956)
    list_178728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 956, 9), 'list')
    # Adding type elements to the builtin type 'list' instance (line 956)
    # Adding element type (line 956)
    int_178729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 956, 10), 'int')
    # Getting the type of 'gtol' (line 956)
    gtol_178730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 14), 'gtol')
    # Applying the binary operator '*' (line 956)
    result_mul_178731 = python_operator(stypy.reporting.localization.Localization(__file__, 956, 10), '*', int_178729, gtol_178730)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 956, 9), list_178728, result_mul_178731)
    
    # Assigning a type to the variable 'sk' (line 956)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 956, 4), 'sk', list_178728)
    
    # Assigning a Num to a Name (line 957):
    
    # Assigning a Num to a Name (line 957):
    int_178732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 15), 'int')
    # Assigning a type to the variable 'warnflag' (line 957)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 4), 'warnflag', int_178732)
    
    # Assigning a Call to a Name (line 958):
    
    # Assigning a Call to a Name (line 958):
    
    # Call to vecnorm(...): (line 958)
    # Processing the call arguments (line 958)
    # Getting the type of 'gfk' (line 958)
    gfk_178734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 20), 'gfk', False)
    # Processing the call keyword arguments (line 958)
    # Getting the type of 'norm' (line 958)
    norm_178735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 29), 'norm', False)
    keyword_178736 = norm_178735
    kwargs_178737 = {'ord': keyword_178736}
    # Getting the type of 'vecnorm' (line 958)
    vecnorm_178733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 12), 'vecnorm', False)
    # Calling vecnorm(args, kwargs) (line 958)
    vecnorm_call_result_178738 = invoke(stypy.reporting.localization.Localization(__file__, 958, 12), vecnorm_178733, *[gfk_178734], **kwargs_178737)
    
    # Assigning a type to the variable 'gnorm' (line 958)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 4), 'gnorm', vecnorm_call_result_178738)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'gnorm' (line 959)
    gnorm_178739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 11), 'gnorm')
    # Getting the type of 'gtol' (line 959)
    gtol_178740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 19), 'gtol')
    # Applying the binary operator '>' (line 959)
    result_gt_178741 = python_operator(stypy.reporting.localization.Localization(__file__, 959, 11), '>', gnorm_178739, gtol_178740)
    
    
    # Getting the type of 'k' (line 959)
    k_178742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 30), 'k')
    # Getting the type of 'maxiter' (line 959)
    maxiter_178743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 34), 'maxiter')
    # Applying the binary operator '<' (line 959)
    result_lt_178744 = python_operator(stypy.reporting.localization.Localization(__file__, 959, 30), '<', k_178742, maxiter_178743)
    
    # Applying the binary operator 'and' (line 959)
    result_and_keyword_178745 = python_operator(stypy.reporting.localization.Localization(__file__, 959, 10), 'and', result_gt_178741, result_lt_178744)
    
    # Testing the type of an if condition (line 959)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 959, 4), result_and_keyword_178745)
    # SSA begins for while statement (line 959)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a UnaryOp to a Name (line 960):
    
    # Assigning a UnaryOp to a Name (line 960):
    
    
    # Call to dot(...): (line 960)
    # Processing the call arguments (line 960)
    # Getting the type of 'Hk' (line 960)
    Hk_178748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 24), 'Hk', False)
    # Getting the type of 'gfk' (line 960)
    gfk_178749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 28), 'gfk', False)
    # Processing the call keyword arguments (line 960)
    kwargs_178750 = {}
    # Getting the type of 'numpy' (line 960)
    numpy_178746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 14), 'numpy', False)
    # Obtaining the member 'dot' of a type (line 960)
    dot_178747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 14), numpy_178746, 'dot')
    # Calling dot(args, kwargs) (line 960)
    dot_call_result_178751 = invoke(stypy.reporting.localization.Localization(__file__, 960, 14), dot_178747, *[Hk_178748, gfk_178749], **kwargs_178750)
    
    # Applying the 'usub' unary operator (line 960)
    result___neg___178752 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 13), 'usub', dot_call_result_178751)
    
    # Assigning a type to the variable 'pk' (line 960)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 960, 8), 'pk', result___neg___178752)
    
    
    # SSA begins for try-except statement (line 961)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Tuple (line 962):
    
    # Assigning a Subscript to a Name (line 962):
    
    # Obtaining the type of the subscript
    int_178753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 962, 12), 'int')
    
    # Call to _line_search_wolfe12(...): (line 963)
    # Processing the call arguments (line 963)
    # Getting the type of 'f' (line 963)
    f_178755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 42), 'f', False)
    # Getting the type of 'myfprime' (line 963)
    myfprime_178756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 45), 'myfprime', False)
    # Getting the type of 'xk' (line 963)
    xk_178757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 55), 'xk', False)
    # Getting the type of 'pk' (line 963)
    pk_178758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 59), 'pk', False)
    # Getting the type of 'gfk' (line 963)
    gfk_178759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 63), 'gfk', False)
    # Getting the type of 'old_fval' (line 964)
    old_fval_178760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 42), 'old_fval', False)
    # Getting the type of 'old_old_fval' (line 964)
    old_old_fval_178761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 52), 'old_old_fval', False)
    # Processing the call keyword arguments (line 963)
    float_178762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 964, 71), 'float')
    keyword_178763 = float_178762
    float_178764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 964, 84), 'float')
    keyword_178765 = float_178764
    kwargs_178766 = {'amin': keyword_178763, 'amax': keyword_178765}
    # Getting the type of '_line_search_wolfe12' (line 963)
    _line_search_wolfe12_178754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 21), '_line_search_wolfe12', False)
    # Calling _line_search_wolfe12(args, kwargs) (line 963)
    _line_search_wolfe12_call_result_178767 = invoke(stypy.reporting.localization.Localization(__file__, 963, 21), _line_search_wolfe12_178754, *[f_178755, myfprime_178756, xk_178757, pk_178758, gfk_178759, old_fval_178760, old_old_fval_178761], **kwargs_178766)
    
    # Obtaining the member '__getitem__' of a type (line 962)
    getitem___178768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 12), _line_search_wolfe12_call_result_178767, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 962)
    subscript_call_result_178769 = invoke(stypy.reporting.localization.Localization(__file__, 962, 12), getitem___178768, int_178753)
    
    # Assigning a type to the variable 'tuple_var_assignment_176622' (line 962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'tuple_var_assignment_176622', subscript_call_result_178769)
    
    # Assigning a Subscript to a Name (line 962):
    
    # Obtaining the type of the subscript
    int_178770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 962, 12), 'int')
    
    # Call to _line_search_wolfe12(...): (line 963)
    # Processing the call arguments (line 963)
    # Getting the type of 'f' (line 963)
    f_178772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 42), 'f', False)
    # Getting the type of 'myfprime' (line 963)
    myfprime_178773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 45), 'myfprime', False)
    # Getting the type of 'xk' (line 963)
    xk_178774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 55), 'xk', False)
    # Getting the type of 'pk' (line 963)
    pk_178775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 59), 'pk', False)
    # Getting the type of 'gfk' (line 963)
    gfk_178776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 63), 'gfk', False)
    # Getting the type of 'old_fval' (line 964)
    old_fval_178777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 42), 'old_fval', False)
    # Getting the type of 'old_old_fval' (line 964)
    old_old_fval_178778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 52), 'old_old_fval', False)
    # Processing the call keyword arguments (line 963)
    float_178779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 964, 71), 'float')
    keyword_178780 = float_178779
    float_178781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 964, 84), 'float')
    keyword_178782 = float_178781
    kwargs_178783 = {'amin': keyword_178780, 'amax': keyword_178782}
    # Getting the type of '_line_search_wolfe12' (line 963)
    _line_search_wolfe12_178771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 21), '_line_search_wolfe12', False)
    # Calling _line_search_wolfe12(args, kwargs) (line 963)
    _line_search_wolfe12_call_result_178784 = invoke(stypy.reporting.localization.Localization(__file__, 963, 21), _line_search_wolfe12_178771, *[f_178772, myfprime_178773, xk_178774, pk_178775, gfk_178776, old_fval_178777, old_old_fval_178778], **kwargs_178783)
    
    # Obtaining the member '__getitem__' of a type (line 962)
    getitem___178785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 12), _line_search_wolfe12_call_result_178784, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 962)
    subscript_call_result_178786 = invoke(stypy.reporting.localization.Localization(__file__, 962, 12), getitem___178785, int_178770)
    
    # Assigning a type to the variable 'tuple_var_assignment_176623' (line 962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'tuple_var_assignment_176623', subscript_call_result_178786)
    
    # Assigning a Subscript to a Name (line 962):
    
    # Obtaining the type of the subscript
    int_178787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 962, 12), 'int')
    
    # Call to _line_search_wolfe12(...): (line 963)
    # Processing the call arguments (line 963)
    # Getting the type of 'f' (line 963)
    f_178789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 42), 'f', False)
    # Getting the type of 'myfprime' (line 963)
    myfprime_178790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 45), 'myfprime', False)
    # Getting the type of 'xk' (line 963)
    xk_178791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 55), 'xk', False)
    # Getting the type of 'pk' (line 963)
    pk_178792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 59), 'pk', False)
    # Getting the type of 'gfk' (line 963)
    gfk_178793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 63), 'gfk', False)
    # Getting the type of 'old_fval' (line 964)
    old_fval_178794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 42), 'old_fval', False)
    # Getting the type of 'old_old_fval' (line 964)
    old_old_fval_178795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 52), 'old_old_fval', False)
    # Processing the call keyword arguments (line 963)
    float_178796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 964, 71), 'float')
    keyword_178797 = float_178796
    float_178798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 964, 84), 'float')
    keyword_178799 = float_178798
    kwargs_178800 = {'amin': keyword_178797, 'amax': keyword_178799}
    # Getting the type of '_line_search_wolfe12' (line 963)
    _line_search_wolfe12_178788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 21), '_line_search_wolfe12', False)
    # Calling _line_search_wolfe12(args, kwargs) (line 963)
    _line_search_wolfe12_call_result_178801 = invoke(stypy.reporting.localization.Localization(__file__, 963, 21), _line_search_wolfe12_178788, *[f_178789, myfprime_178790, xk_178791, pk_178792, gfk_178793, old_fval_178794, old_old_fval_178795], **kwargs_178800)
    
    # Obtaining the member '__getitem__' of a type (line 962)
    getitem___178802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 12), _line_search_wolfe12_call_result_178801, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 962)
    subscript_call_result_178803 = invoke(stypy.reporting.localization.Localization(__file__, 962, 12), getitem___178802, int_178787)
    
    # Assigning a type to the variable 'tuple_var_assignment_176624' (line 962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'tuple_var_assignment_176624', subscript_call_result_178803)
    
    # Assigning a Subscript to a Name (line 962):
    
    # Obtaining the type of the subscript
    int_178804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 962, 12), 'int')
    
    # Call to _line_search_wolfe12(...): (line 963)
    # Processing the call arguments (line 963)
    # Getting the type of 'f' (line 963)
    f_178806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 42), 'f', False)
    # Getting the type of 'myfprime' (line 963)
    myfprime_178807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 45), 'myfprime', False)
    # Getting the type of 'xk' (line 963)
    xk_178808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 55), 'xk', False)
    # Getting the type of 'pk' (line 963)
    pk_178809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 59), 'pk', False)
    # Getting the type of 'gfk' (line 963)
    gfk_178810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 63), 'gfk', False)
    # Getting the type of 'old_fval' (line 964)
    old_fval_178811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 42), 'old_fval', False)
    # Getting the type of 'old_old_fval' (line 964)
    old_old_fval_178812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 52), 'old_old_fval', False)
    # Processing the call keyword arguments (line 963)
    float_178813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 964, 71), 'float')
    keyword_178814 = float_178813
    float_178815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 964, 84), 'float')
    keyword_178816 = float_178815
    kwargs_178817 = {'amin': keyword_178814, 'amax': keyword_178816}
    # Getting the type of '_line_search_wolfe12' (line 963)
    _line_search_wolfe12_178805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 21), '_line_search_wolfe12', False)
    # Calling _line_search_wolfe12(args, kwargs) (line 963)
    _line_search_wolfe12_call_result_178818 = invoke(stypy.reporting.localization.Localization(__file__, 963, 21), _line_search_wolfe12_178805, *[f_178806, myfprime_178807, xk_178808, pk_178809, gfk_178810, old_fval_178811, old_old_fval_178812], **kwargs_178817)
    
    # Obtaining the member '__getitem__' of a type (line 962)
    getitem___178819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 12), _line_search_wolfe12_call_result_178818, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 962)
    subscript_call_result_178820 = invoke(stypy.reporting.localization.Localization(__file__, 962, 12), getitem___178819, int_178804)
    
    # Assigning a type to the variable 'tuple_var_assignment_176625' (line 962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'tuple_var_assignment_176625', subscript_call_result_178820)
    
    # Assigning a Subscript to a Name (line 962):
    
    # Obtaining the type of the subscript
    int_178821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 962, 12), 'int')
    
    # Call to _line_search_wolfe12(...): (line 963)
    # Processing the call arguments (line 963)
    # Getting the type of 'f' (line 963)
    f_178823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 42), 'f', False)
    # Getting the type of 'myfprime' (line 963)
    myfprime_178824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 45), 'myfprime', False)
    # Getting the type of 'xk' (line 963)
    xk_178825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 55), 'xk', False)
    # Getting the type of 'pk' (line 963)
    pk_178826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 59), 'pk', False)
    # Getting the type of 'gfk' (line 963)
    gfk_178827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 63), 'gfk', False)
    # Getting the type of 'old_fval' (line 964)
    old_fval_178828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 42), 'old_fval', False)
    # Getting the type of 'old_old_fval' (line 964)
    old_old_fval_178829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 52), 'old_old_fval', False)
    # Processing the call keyword arguments (line 963)
    float_178830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 964, 71), 'float')
    keyword_178831 = float_178830
    float_178832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 964, 84), 'float')
    keyword_178833 = float_178832
    kwargs_178834 = {'amin': keyword_178831, 'amax': keyword_178833}
    # Getting the type of '_line_search_wolfe12' (line 963)
    _line_search_wolfe12_178822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 21), '_line_search_wolfe12', False)
    # Calling _line_search_wolfe12(args, kwargs) (line 963)
    _line_search_wolfe12_call_result_178835 = invoke(stypy.reporting.localization.Localization(__file__, 963, 21), _line_search_wolfe12_178822, *[f_178823, myfprime_178824, xk_178825, pk_178826, gfk_178827, old_fval_178828, old_old_fval_178829], **kwargs_178834)
    
    # Obtaining the member '__getitem__' of a type (line 962)
    getitem___178836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 12), _line_search_wolfe12_call_result_178835, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 962)
    subscript_call_result_178837 = invoke(stypy.reporting.localization.Localization(__file__, 962, 12), getitem___178836, int_178821)
    
    # Assigning a type to the variable 'tuple_var_assignment_176626' (line 962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'tuple_var_assignment_176626', subscript_call_result_178837)
    
    # Assigning a Subscript to a Name (line 962):
    
    # Obtaining the type of the subscript
    int_178838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 962, 12), 'int')
    
    # Call to _line_search_wolfe12(...): (line 963)
    # Processing the call arguments (line 963)
    # Getting the type of 'f' (line 963)
    f_178840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 42), 'f', False)
    # Getting the type of 'myfprime' (line 963)
    myfprime_178841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 45), 'myfprime', False)
    # Getting the type of 'xk' (line 963)
    xk_178842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 55), 'xk', False)
    # Getting the type of 'pk' (line 963)
    pk_178843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 59), 'pk', False)
    # Getting the type of 'gfk' (line 963)
    gfk_178844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 63), 'gfk', False)
    # Getting the type of 'old_fval' (line 964)
    old_fval_178845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 42), 'old_fval', False)
    # Getting the type of 'old_old_fval' (line 964)
    old_old_fval_178846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 52), 'old_old_fval', False)
    # Processing the call keyword arguments (line 963)
    float_178847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 964, 71), 'float')
    keyword_178848 = float_178847
    float_178849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 964, 84), 'float')
    keyword_178850 = float_178849
    kwargs_178851 = {'amin': keyword_178848, 'amax': keyword_178850}
    # Getting the type of '_line_search_wolfe12' (line 963)
    _line_search_wolfe12_178839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 21), '_line_search_wolfe12', False)
    # Calling _line_search_wolfe12(args, kwargs) (line 963)
    _line_search_wolfe12_call_result_178852 = invoke(stypy.reporting.localization.Localization(__file__, 963, 21), _line_search_wolfe12_178839, *[f_178840, myfprime_178841, xk_178842, pk_178843, gfk_178844, old_fval_178845, old_old_fval_178846], **kwargs_178851)
    
    # Obtaining the member '__getitem__' of a type (line 962)
    getitem___178853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 12), _line_search_wolfe12_call_result_178852, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 962)
    subscript_call_result_178854 = invoke(stypy.reporting.localization.Localization(__file__, 962, 12), getitem___178853, int_178838)
    
    # Assigning a type to the variable 'tuple_var_assignment_176627' (line 962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'tuple_var_assignment_176627', subscript_call_result_178854)
    
    # Assigning a Name to a Name (line 962):
    # Getting the type of 'tuple_var_assignment_176622' (line 962)
    tuple_var_assignment_176622_178855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'tuple_var_assignment_176622')
    # Assigning a type to the variable 'alpha_k' (line 962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'alpha_k', tuple_var_assignment_176622_178855)
    
    # Assigning a Name to a Name (line 962):
    # Getting the type of 'tuple_var_assignment_176623' (line 962)
    tuple_var_assignment_176623_178856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'tuple_var_assignment_176623')
    # Assigning a type to the variable 'fc' (line 962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 21), 'fc', tuple_var_assignment_176623_178856)
    
    # Assigning a Name to a Name (line 962):
    # Getting the type of 'tuple_var_assignment_176624' (line 962)
    tuple_var_assignment_176624_178857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'tuple_var_assignment_176624')
    # Assigning a type to the variable 'gc' (line 962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 25), 'gc', tuple_var_assignment_176624_178857)
    
    # Assigning a Name to a Name (line 962):
    # Getting the type of 'tuple_var_assignment_176625' (line 962)
    tuple_var_assignment_176625_178858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'tuple_var_assignment_176625')
    # Assigning a type to the variable 'old_fval' (line 962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 29), 'old_fval', tuple_var_assignment_176625_178858)
    
    # Assigning a Name to a Name (line 962):
    # Getting the type of 'tuple_var_assignment_176626' (line 962)
    tuple_var_assignment_176626_178859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'tuple_var_assignment_176626')
    # Assigning a type to the variable 'old_old_fval' (line 962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 39), 'old_old_fval', tuple_var_assignment_176626_178859)
    
    # Assigning a Name to a Name (line 962):
    # Getting the type of 'tuple_var_assignment_176627' (line 962)
    tuple_var_assignment_176627_178860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'tuple_var_assignment_176627')
    # Assigning a type to the variable 'gfkp1' (line 962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 53), 'gfkp1', tuple_var_assignment_176627_178860)
    # SSA branch for the except part of a try statement (line 961)
    # SSA branch for the except '_LineSearchError' branch of a try statement (line 961)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Num to a Name (line 967):
    
    # Assigning a Num to a Name (line 967):
    int_178861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 967, 23), 'int')
    # Assigning a type to the variable 'warnflag' (line 967)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 967, 12), 'warnflag', int_178861)
    # SSA join for try-except statement (line 961)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 970):
    
    # Assigning a BinOp to a Name (line 970):
    # Getting the type of 'xk' (line 970)
    xk_178862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 15), 'xk')
    # Getting the type of 'alpha_k' (line 970)
    alpha_k_178863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 20), 'alpha_k')
    # Getting the type of 'pk' (line 970)
    pk_178864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 30), 'pk')
    # Applying the binary operator '*' (line 970)
    result_mul_178865 = python_operator(stypy.reporting.localization.Localization(__file__, 970, 20), '*', alpha_k_178863, pk_178864)
    
    # Applying the binary operator '+' (line 970)
    result_add_178866 = python_operator(stypy.reporting.localization.Localization(__file__, 970, 15), '+', xk_178862, result_mul_178865)
    
    # Assigning a type to the variable 'xkp1' (line 970)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 8), 'xkp1', result_add_178866)
    
    # Getting the type of 'retall' (line 971)
    retall_178867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 11), 'retall')
    # Testing the type of an if condition (line 971)
    if_condition_178868 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 971, 8), retall_178867)
    # Assigning a type to the variable 'if_condition_178868' (line 971)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'if_condition_178868', if_condition_178868)
    # SSA begins for if statement (line 971)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 972)
    # Processing the call arguments (line 972)
    # Getting the type of 'xkp1' (line 972)
    xkp1_178871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 27), 'xkp1', False)
    # Processing the call keyword arguments (line 972)
    kwargs_178872 = {}
    # Getting the type of 'allvecs' (line 972)
    allvecs_178869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 12), 'allvecs', False)
    # Obtaining the member 'append' of a type (line 972)
    append_178870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 972, 12), allvecs_178869, 'append')
    # Calling append(args, kwargs) (line 972)
    append_call_result_178873 = invoke(stypy.reporting.localization.Localization(__file__, 972, 12), append_178870, *[xkp1_178871], **kwargs_178872)
    
    # SSA join for if statement (line 971)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 973):
    
    # Assigning a BinOp to a Name (line 973):
    # Getting the type of 'xkp1' (line 973)
    xkp1_178874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 13), 'xkp1')
    # Getting the type of 'xk' (line 973)
    xk_178875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 20), 'xk')
    # Applying the binary operator '-' (line 973)
    result_sub_178876 = python_operator(stypy.reporting.localization.Localization(__file__, 973, 13), '-', xkp1_178874, xk_178875)
    
    # Assigning a type to the variable 'sk' (line 973)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 973, 8), 'sk', result_sub_178876)
    
    # Assigning a Name to a Name (line 974):
    
    # Assigning a Name to a Name (line 974):
    # Getting the type of 'xkp1' (line 974)
    xkp1_178877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 13), 'xkp1')
    # Assigning a type to the variable 'xk' (line 974)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 974, 8), 'xk', xkp1_178877)
    
    # Type idiom detected: calculating its left and rigth part (line 975)
    # Getting the type of 'gfkp1' (line 975)
    gfkp1_178878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 11), 'gfkp1')
    # Getting the type of 'None' (line 975)
    None_178879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 20), 'None')
    
    (may_be_178880, more_types_in_union_178881) = may_be_none(gfkp1_178878, None_178879)

    if may_be_178880:

        if more_types_in_union_178881:
            # Runtime conditional SSA (line 975)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 976):
        
        # Assigning a Call to a Name (line 976):
        
        # Call to myfprime(...): (line 976)
        # Processing the call arguments (line 976)
        # Getting the type of 'xkp1' (line 976)
        xkp1_178883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 29), 'xkp1', False)
        # Processing the call keyword arguments (line 976)
        kwargs_178884 = {}
        # Getting the type of 'myfprime' (line 976)
        myfprime_178882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 20), 'myfprime', False)
        # Calling myfprime(args, kwargs) (line 976)
        myfprime_call_result_178885 = invoke(stypy.reporting.localization.Localization(__file__, 976, 20), myfprime_178882, *[xkp1_178883], **kwargs_178884)
        
        # Assigning a type to the variable 'gfkp1' (line 976)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 12), 'gfkp1', myfprime_call_result_178885)

        if more_types_in_union_178881:
            # SSA join for if statement (line 975)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a BinOp to a Name (line 978):
    
    # Assigning a BinOp to a Name (line 978):
    # Getting the type of 'gfkp1' (line 978)
    gfkp1_178886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 13), 'gfkp1')
    # Getting the type of 'gfk' (line 978)
    gfk_178887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 21), 'gfk')
    # Applying the binary operator '-' (line 978)
    result_sub_178888 = python_operator(stypy.reporting.localization.Localization(__file__, 978, 13), '-', gfkp1_178886, gfk_178887)
    
    # Assigning a type to the variable 'yk' (line 978)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 978, 8), 'yk', result_sub_178888)
    
    # Assigning a Name to a Name (line 979):
    
    # Assigning a Name to a Name (line 979):
    # Getting the type of 'gfkp1' (line 979)
    gfkp1_178889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 14), 'gfkp1')
    # Assigning a type to the variable 'gfk' (line 979)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 979, 8), 'gfk', gfkp1_178889)
    
    # Type idiom detected: calculating its left and rigth part (line 980)
    # Getting the type of 'callback' (line 980)
    callback_178890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 8), 'callback')
    # Getting the type of 'None' (line 980)
    None_178891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 27), 'None')
    
    (may_be_178892, more_types_in_union_178893) = may_not_be_none(callback_178890, None_178891)

    if may_be_178892:

        if more_types_in_union_178893:
            # Runtime conditional SSA (line 980)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to callback(...): (line 981)
        # Processing the call arguments (line 981)
        # Getting the type of 'xk' (line 981)
        xk_178895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 21), 'xk', False)
        # Processing the call keyword arguments (line 981)
        kwargs_178896 = {}
        # Getting the type of 'callback' (line 981)
        callback_178894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 12), 'callback', False)
        # Calling callback(args, kwargs) (line 981)
        callback_call_result_178897 = invoke(stypy.reporting.localization.Localization(__file__, 981, 12), callback_178894, *[xk_178895], **kwargs_178896)
        

        if more_types_in_union_178893:
            # SSA join for if statement (line 980)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Getting the type of 'k' (line 982)
    k_178898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 8), 'k')
    int_178899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 982, 13), 'int')
    # Applying the binary operator '+=' (line 982)
    result_iadd_178900 = python_operator(stypy.reporting.localization.Localization(__file__, 982, 8), '+=', k_178898, int_178899)
    # Assigning a type to the variable 'k' (line 982)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 8), 'k', result_iadd_178900)
    
    
    # Assigning a Call to a Name (line 983):
    
    # Assigning a Call to a Name (line 983):
    
    # Call to vecnorm(...): (line 983)
    # Processing the call arguments (line 983)
    # Getting the type of 'gfk' (line 983)
    gfk_178902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 24), 'gfk', False)
    # Processing the call keyword arguments (line 983)
    # Getting the type of 'norm' (line 983)
    norm_178903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 33), 'norm', False)
    keyword_178904 = norm_178903
    kwargs_178905 = {'ord': keyword_178904}
    # Getting the type of 'vecnorm' (line 983)
    vecnorm_178901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 16), 'vecnorm', False)
    # Calling vecnorm(args, kwargs) (line 983)
    vecnorm_call_result_178906 = invoke(stypy.reporting.localization.Localization(__file__, 983, 16), vecnorm_178901, *[gfk_178902], **kwargs_178905)
    
    # Assigning a type to the variable 'gnorm' (line 983)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 983, 8), 'gnorm', vecnorm_call_result_178906)
    
    
    # Getting the type of 'gnorm' (line 984)
    gnorm_178907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 12), 'gnorm')
    # Getting the type of 'gtol' (line 984)
    gtol_178908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 21), 'gtol')
    # Applying the binary operator '<=' (line 984)
    result_le_178909 = python_operator(stypy.reporting.localization.Localization(__file__, 984, 12), '<=', gnorm_178907, gtol_178908)
    
    # Testing the type of an if condition (line 984)
    if_condition_178910 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 984, 8), result_le_178909)
    # Assigning a type to the variable 'if_condition_178910' (line 984)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 984, 8), 'if_condition_178910', if_condition_178910)
    # SSA begins for if statement (line 984)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 984)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to isfinite(...): (line 987)
    # Processing the call arguments (line 987)
    # Getting the type of 'old_fval' (line 987)
    old_fval_178913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 30), 'old_fval', False)
    # Processing the call keyword arguments (line 987)
    kwargs_178914 = {}
    # Getting the type of 'numpy' (line 987)
    numpy_178911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 15), 'numpy', False)
    # Obtaining the member 'isfinite' of a type (line 987)
    isfinite_178912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 987, 15), numpy_178911, 'isfinite')
    # Calling isfinite(args, kwargs) (line 987)
    isfinite_call_result_178915 = invoke(stypy.reporting.localization.Localization(__file__, 987, 15), isfinite_178912, *[old_fval_178913], **kwargs_178914)
    
    # Applying the 'not' unary operator (line 987)
    result_not__178916 = python_operator(stypy.reporting.localization.Localization(__file__, 987, 11), 'not', isfinite_call_result_178915)
    
    # Testing the type of an if condition (line 987)
    if_condition_178917 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 987, 8), result_not__178916)
    # Assigning a type to the variable 'if_condition_178917' (line 987)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 987, 8), 'if_condition_178917', if_condition_178917)
    # SSA begins for if statement (line 987)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 990):
    
    # Assigning a Num to a Name (line 990):
    int_178918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 990, 23), 'int')
    # Assigning a type to the variable 'warnflag' (line 990)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 990, 12), 'warnflag', int_178918)
    # SSA join for if statement (line 987)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 993)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a BinOp to a Name (line 994):
    
    # Assigning a BinOp to a Name (line 994):
    float_178919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 994, 19), 'float')
    
    # Call to dot(...): (line 994)
    # Processing the call arguments (line 994)
    # Getting the type of 'yk' (line 994)
    yk_178922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 36), 'yk', False)
    # Getting the type of 'sk' (line 994)
    sk_178923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 40), 'sk', False)
    # Processing the call keyword arguments (line 994)
    kwargs_178924 = {}
    # Getting the type of 'numpy' (line 994)
    numpy_178920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 26), 'numpy', False)
    # Obtaining the member 'dot' of a type (line 994)
    dot_178921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 26), numpy_178920, 'dot')
    # Calling dot(args, kwargs) (line 994)
    dot_call_result_178925 = invoke(stypy.reporting.localization.Localization(__file__, 994, 26), dot_178921, *[yk_178922, sk_178923], **kwargs_178924)
    
    # Applying the binary operator 'div' (line 994)
    result_div_178926 = python_operator(stypy.reporting.localization.Localization(__file__, 994, 19), 'div', float_178919, dot_call_result_178925)
    
    # Assigning a type to the variable 'rhok' (line 994)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 12), 'rhok', result_div_178926)
    # SSA branch for the except part of a try statement (line 993)
    # SSA branch for the except 'ZeroDivisionError' branch of a try statement (line 993)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Num to a Name (line 996):
    
    # Assigning a Num to a Name (line 996):
    float_178927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 996, 19), 'float')
    # Assigning a type to the variable 'rhok' (line 996)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 996, 12), 'rhok', float_178927)
    
    # Getting the type of 'disp' (line 997)
    disp_178928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 15), 'disp')
    # Testing the type of an if condition (line 997)
    if_condition_178929 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 997, 12), disp_178928)
    # Assigning a type to the variable 'if_condition_178929' (line 997)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 997, 12), 'if_condition_178929', if_condition_178929)
    # SSA begins for if statement (line 997)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 998)
    # Processing the call arguments (line 998)
    str_178931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 998, 22), 'str', 'Divide-by-zero encountered: rhok assumed large')
    # Processing the call keyword arguments (line 998)
    kwargs_178932 = {}
    # Getting the type of 'print' (line 998)
    print_178930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 16), 'print', False)
    # Calling print(args, kwargs) (line 998)
    print_call_result_178933 = invoke(stypy.reporting.localization.Localization(__file__, 998, 16), print_178930, *[str_178931], **kwargs_178932)
    
    # SSA join for if statement (line 997)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for try-except statement (line 993)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to isinf(...): (line 999)
    # Processing the call arguments (line 999)
    # Getting the type of 'rhok' (line 999)
    rhok_178935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 17), 'rhok', False)
    # Processing the call keyword arguments (line 999)
    kwargs_178936 = {}
    # Getting the type of 'isinf' (line 999)
    isinf_178934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 11), 'isinf', False)
    # Calling isinf(args, kwargs) (line 999)
    isinf_call_result_178937 = invoke(stypy.reporting.localization.Localization(__file__, 999, 11), isinf_178934, *[rhok_178935], **kwargs_178936)
    
    # Testing the type of an if condition (line 999)
    if_condition_178938 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 999, 8), isinf_call_result_178937)
    # Assigning a type to the variable 'if_condition_178938' (line 999)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 999, 8), 'if_condition_178938', if_condition_178938)
    # SSA begins for if statement (line 999)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1000):
    
    # Assigning a Num to a Name (line 1000):
    float_178939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1000, 19), 'float')
    # Assigning a type to the variable 'rhok' (line 1000)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1000, 12), 'rhok', float_178939)
    
    # Getting the type of 'disp' (line 1001)
    disp_178940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 15), 'disp')
    # Testing the type of an if condition (line 1001)
    if_condition_178941 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1001, 12), disp_178940)
    # Assigning a type to the variable 'if_condition_178941' (line 1001)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1001, 12), 'if_condition_178941', if_condition_178941)
    # SSA begins for if statement (line 1001)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 1002)
    # Processing the call arguments (line 1002)
    str_178943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1002, 22), 'str', 'Divide-by-zero encountered: rhok assumed large')
    # Processing the call keyword arguments (line 1002)
    kwargs_178944 = {}
    # Getting the type of 'print' (line 1002)
    print_178942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 16), 'print', False)
    # Calling print(args, kwargs) (line 1002)
    print_call_result_178945 = invoke(stypy.reporting.localization.Localization(__file__, 1002, 16), print_178942, *[str_178943], **kwargs_178944)
    
    # SSA join for if statement (line 1001)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 999)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1003):
    
    # Assigning a BinOp to a Name (line 1003):
    # Getting the type of 'I' (line 1003)
    I_178946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 13), 'I')
    
    # Obtaining the type of the subscript
    slice_178947 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1003, 17), None, None, None)
    # Getting the type of 'numpy' (line 1003)
    numpy_178948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 23), 'numpy')
    # Obtaining the member 'newaxis' of a type (line 1003)
    newaxis_178949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 23), numpy_178948, 'newaxis')
    # Getting the type of 'sk' (line 1003)
    sk_178950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 17), 'sk')
    # Obtaining the member '__getitem__' of a type (line 1003)
    getitem___178951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 17), sk_178950, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1003)
    subscript_call_result_178952 = invoke(stypy.reporting.localization.Localization(__file__, 1003, 17), getitem___178951, (slice_178947, newaxis_178949))
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'numpy' (line 1003)
    numpy_178953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 43), 'numpy')
    # Obtaining the member 'newaxis' of a type (line 1003)
    newaxis_178954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 43), numpy_178953, 'newaxis')
    slice_178955 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1003, 40), None, None, None)
    # Getting the type of 'yk' (line 1003)
    yk_178956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 40), 'yk')
    # Obtaining the member '__getitem__' of a type (line 1003)
    getitem___178957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 40), yk_178956, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1003)
    subscript_call_result_178958 = invoke(stypy.reporting.localization.Localization(__file__, 1003, 40), getitem___178957, (newaxis_178954, slice_178955))
    
    # Applying the binary operator '*' (line 1003)
    result_mul_178959 = python_operator(stypy.reporting.localization.Localization(__file__, 1003, 17), '*', subscript_call_result_178952, subscript_call_result_178958)
    
    # Getting the type of 'rhok' (line 1003)
    rhok_178960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 63), 'rhok')
    # Applying the binary operator '*' (line 1003)
    result_mul_178961 = python_operator(stypy.reporting.localization.Localization(__file__, 1003, 61), '*', result_mul_178959, rhok_178960)
    
    # Applying the binary operator '-' (line 1003)
    result_sub_178962 = python_operator(stypy.reporting.localization.Localization(__file__, 1003, 13), '-', I_178946, result_mul_178961)
    
    # Assigning a type to the variable 'A1' (line 1003)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1003, 8), 'A1', result_sub_178962)
    
    # Assigning a BinOp to a Name (line 1004):
    
    # Assigning a BinOp to a Name (line 1004):
    # Getting the type of 'I' (line 1004)
    I_178963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 13), 'I')
    
    # Obtaining the type of the subscript
    slice_178964 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1004, 17), None, None, None)
    # Getting the type of 'numpy' (line 1004)
    numpy_178965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 23), 'numpy')
    # Obtaining the member 'newaxis' of a type (line 1004)
    newaxis_178966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1004, 23), numpy_178965, 'newaxis')
    # Getting the type of 'yk' (line 1004)
    yk_178967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 17), 'yk')
    # Obtaining the member '__getitem__' of a type (line 1004)
    getitem___178968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1004, 17), yk_178967, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1004)
    subscript_call_result_178969 = invoke(stypy.reporting.localization.Localization(__file__, 1004, 17), getitem___178968, (slice_178964, newaxis_178966))
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'numpy' (line 1004)
    numpy_178970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 43), 'numpy')
    # Obtaining the member 'newaxis' of a type (line 1004)
    newaxis_178971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1004, 43), numpy_178970, 'newaxis')
    slice_178972 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1004, 40), None, None, None)
    # Getting the type of 'sk' (line 1004)
    sk_178973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 40), 'sk')
    # Obtaining the member '__getitem__' of a type (line 1004)
    getitem___178974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1004, 40), sk_178973, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1004)
    subscript_call_result_178975 = invoke(stypy.reporting.localization.Localization(__file__, 1004, 40), getitem___178974, (newaxis_178971, slice_178972))
    
    # Applying the binary operator '*' (line 1004)
    result_mul_178976 = python_operator(stypy.reporting.localization.Localization(__file__, 1004, 17), '*', subscript_call_result_178969, subscript_call_result_178975)
    
    # Getting the type of 'rhok' (line 1004)
    rhok_178977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 63), 'rhok')
    # Applying the binary operator '*' (line 1004)
    result_mul_178978 = python_operator(stypy.reporting.localization.Localization(__file__, 1004, 61), '*', result_mul_178976, rhok_178977)
    
    # Applying the binary operator '-' (line 1004)
    result_sub_178979 = python_operator(stypy.reporting.localization.Localization(__file__, 1004, 13), '-', I_178963, result_mul_178978)
    
    # Assigning a type to the variable 'A2' (line 1004)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1004, 8), 'A2', result_sub_178979)
    
    # Assigning a BinOp to a Name (line 1005):
    
    # Assigning a BinOp to a Name (line 1005):
    
    # Call to dot(...): (line 1005)
    # Processing the call arguments (line 1005)
    # Getting the type of 'A1' (line 1005)
    A1_178982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 23), 'A1', False)
    
    # Call to dot(...): (line 1005)
    # Processing the call arguments (line 1005)
    # Getting the type of 'Hk' (line 1005)
    Hk_178985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 37), 'Hk', False)
    # Getting the type of 'A2' (line 1005)
    A2_178986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 41), 'A2', False)
    # Processing the call keyword arguments (line 1005)
    kwargs_178987 = {}
    # Getting the type of 'numpy' (line 1005)
    numpy_178983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 27), 'numpy', False)
    # Obtaining the member 'dot' of a type (line 1005)
    dot_178984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1005, 27), numpy_178983, 'dot')
    # Calling dot(args, kwargs) (line 1005)
    dot_call_result_178988 = invoke(stypy.reporting.localization.Localization(__file__, 1005, 27), dot_178984, *[Hk_178985, A2_178986], **kwargs_178987)
    
    # Processing the call keyword arguments (line 1005)
    kwargs_178989 = {}
    # Getting the type of 'numpy' (line 1005)
    numpy_178980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 13), 'numpy', False)
    # Obtaining the member 'dot' of a type (line 1005)
    dot_178981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1005, 13), numpy_178980, 'dot')
    # Calling dot(args, kwargs) (line 1005)
    dot_call_result_178990 = invoke(stypy.reporting.localization.Localization(__file__, 1005, 13), dot_178981, *[A1_178982, dot_call_result_178988], **kwargs_178989)
    
    # Getting the type of 'rhok' (line 1005)
    rhok_178991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 49), 'rhok')
    
    # Obtaining the type of the subscript
    slice_178992 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1005, 56), None, None, None)
    # Getting the type of 'numpy' (line 1005)
    numpy_178993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 62), 'numpy')
    # Obtaining the member 'newaxis' of a type (line 1005)
    newaxis_178994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1005, 62), numpy_178993, 'newaxis')
    # Getting the type of 'sk' (line 1005)
    sk_178995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 56), 'sk')
    # Obtaining the member '__getitem__' of a type (line 1005)
    getitem___178996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1005, 56), sk_178995, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1005)
    subscript_call_result_178997 = invoke(stypy.reporting.localization.Localization(__file__, 1005, 56), getitem___178996, (slice_178992, newaxis_178994))
    
    # Applying the binary operator '*' (line 1005)
    result_mul_178998 = python_operator(stypy.reporting.localization.Localization(__file__, 1005, 49), '*', rhok_178991, subscript_call_result_178997)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'numpy' (line 1006)
    numpy_178999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 52), 'numpy')
    # Obtaining the member 'newaxis' of a type (line 1006)
    newaxis_179000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1006, 52), numpy_178999, 'newaxis')
    slice_179001 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1006, 49), None, None, None)
    # Getting the type of 'sk' (line 1006)
    sk_179002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 49), 'sk')
    # Obtaining the member '__getitem__' of a type (line 1006)
    getitem___179003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1006, 49), sk_179002, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1006)
    subscript_call_result_179004 = invoke(stypy.reporting.localization.Localization(__file__, 1006, 49), getitem___179003, (newaxis_179000, slice_179001))
    
    # Applying the binary operator '*' (line 1005)
    result_mul_179005 = python_operator(stypy.reporting.localization.Localization(__file__, 1005, 77), '*', result_mul_178998, subscript_call_result_179004)
    
    # Applying the binary operator '+' (line 1005)
    result_add_179006 = python_operator(stypy.reporting.localization.Localization(__file__, 1005, 13), '+', dot_call_result_178990, result_mul_179005)
    
    # Assigning a type to the variable 'Hk' (line 1005)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 8), 'Hk', result_add_179006)
    # SSA join for while statement (line 959)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 1008):
    
    # Assigning a Name to a Name (line 1008):
    # Getting the type of 'old_fval' (line 1008)
    old_fval_179007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 11), 'old_fval')
    # Assigning a type to the variable 'fval' (line 1008)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1008, 4), 'fval', old_fval_179007)
    
    
    # Call to isnan(...): (line 1009)
    # Processing the call arguments (line 1009)
    # Getting the type of 'fval' (line 1009)
    fval_179010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 16), 'fval', False)
    # Processing the call keyword arguments (line 1009)
    kwargs_179011 = {}
    # Getting the type of 'np' (line 1009)
    np_179008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 7), 'np', False)
    # Obtaining the member 'isnan' of a type (line 1009)
    isnan_179009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 7), np_179008, 'isnan')
    # Calling isnan(args, kwargs) (line 1009)
    isnan_call_result_179012 = invoke(stypy.reporting.localization.Localization(__file__, 1009, 7), isnan_179009, *[fval_179010], **kwargs_179011)
    
    # Testing the type of an if condition (line 1009)
    if_condition_179013 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1009, 4), isnan_call_result_179012)
    # Assigning a type to the variable 'if_condition_179013' (line 1009)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1009, 4), 'if_condition_179013', if_condition_179013)
    # SSA begins for if statement (line 1009)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1012):
    
    # Assigning a Num to a Name (line 1012):
    int_179014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1012, 19), 'int')
    # Assigning a type to the variable 'warnflag' (line 1012)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1012, 8), 'warnflag', int_179014)
    # SSA join for if statement (line 1009)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'warnflag' (line 1014)
    warnflag_179015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 7), 'warnflag')
    int_179016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1014, 19), 'int')
    # Applying the binary operator '==' (line 1014)
    result_eq_179017 = python_operator(stypy.reporting.localization.Localization(__file__, 1014, 7), '==', warnflag_179015, int_179016)
    
    # Testing the type of an if condition (line 1014)
    if_condition_179018 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1014, 4), result_eq_179017)
    # Assigning a type to the variable 'if_condition_179018' (line 1014)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1014, 4), 'if_condition_179018', if_condition_179018)
    # SSA begins for if statement (line 1014)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 1015):
    
    # Assigning a Subscript to a Name (line 1015):
    
    # Obtaining the type of the subscript
    str_179019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1015, 30), 'str', 'pr_loss')
    # Getting the type of '_status_message' (line 1015)
    _status_message_179020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 14), '_status_message')
    # Obtaining the member '__getitem__' of a type (line 1015)
    getitem___179021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1015, 14), _status_message_179020, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1015)
    subscript_call_result_179022 = invoke(stypy.reporting.localization.Localization(__file__, 1015, 14), getitem___179021, str_179019)
    
    # Assigning a type to the variable 'msg' (line 1015)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1015, 8), 'msg', subscript_call_result_179022)
    
    # Getting the type of 'disp' (line 1016)
    disp_179023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 11), 'disp')
    # Testing the type of an if condition (line 1016)
    if_condition_179024 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1016, 8), disp_179023)
    # Assigning a type to the variable 'if_condition_179024' (line 1016)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1016, 8), 'if_condition_179024', if_condition_179024)
    # SSA begins for if statement (line 1016)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 1017)
    # Processing the call arguments (line 1017)
    str_179026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1017, 18), 'str', 'Warning: ')
    # Getting the type of 'msg' (line 1017)
    msg_179027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 32), 'msg', False)
    # Applying the binary operator '+' (line 1017)
    result_add_179028 = python_operator(stypy.reporting.localization.Localization(__file__, 1017, 18), '+', str_179026, msg_179027)
    
    # Processing the call keyword arguments (line 1017)
    kwargs_179029 = {}
    # Getting the type of 'print' (line 1017)
    print_179025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 12), 'print', False)
    # Calling print(args, kwargs) (line 1017)
    print_call_result_179030 = invoke(stypy.reporting.localization.Localization(__file__, 1017, 12), print_179025, *[result_add_179028], **kwargs_179029)
    
    
    # Call to print(...): (line 1018)
    # Processing the call arguments (line 1018)
    str_179032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1018, 18), 'str', '         Current function value: %f')
    # Getting the type of 'fval' (line 1018)
    fval_179033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 58), 'fval', False)
    # Applying the binary operator '%' (line 1018)
    result_mod_179034 = python_operator(stypy.reporting.localization.Localization(__file__, 1018, 18), '%', str_179032, fval_179033)
    
    # Processing the call keyword arguments (line 1018)
    kwargs_179035 = {}
    # Getting the type of 'print' (line 1018)
    print_179031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 12), 'print', False)
    # Calling print(args, kwargs) (line 1018)
    print_call_result_179036 = invoke(stypy.reporting.localization.Localization(__file__, 1018, 12), print_179031, *[result_mod_179034], **kwargs_179035)
    
    
    # Call to print(...): (line 1019)
    # Processing the call arguments (line 1019)
    str_179038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1019, 18), 'str', '         Iterations: %d')
    # Getting the type of 'k' (line 1019)
    k_179039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 46), 'k', False)
    # Applying the binary operator '%' (line 1019)
    result_mod_179040 = python_operator(stypy.reporting.localization.Localization(__file__, 1019, 18), '%', str_179038, k_179039)
    
    # Processing the call keyword arguments (line 1019)
    kwargs_179041 = {}
    # Getting the type of 'print' (line 1019)
    print_179037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 12), 'print', False)
    # Calling print(args, kwargs) (line 1019)
    print_call_result_179042 = invoke(stypy.reporting.localization.Localization(__file__, 1019, 12), print_179037, *[result_mod_179040], **kwargs_179041)
    
    
    # Call to print(...): (line 1020)
    # Processing the call arguments (line 1020)
    str_179044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 18), 'str', '         Function evaluations: %d')
    
    # Obtaining the type of the subscript
    int_179045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 67), 'int')
    # Getting the type of 'func_calls' (line 1020)
    func_calls_179046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 56), 'func_calls', False)
    # Obtaining the member '__getitem__' of a type (line 1020)
    getitem___179047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 56), func_calls_179046, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1020)
    subscript_call_result_179048 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 56), getitem___179047, int_179045)
    
    # Applying the binary operator '%' (line 1020)
    result_mod_179049 = python_operator(stypy.reporting.localization.Localization(__file__, 1020, 18), '%', str_179044, subscript_call_result_179048)
    
    # Processing the call keyword arguments (line 1020)
    kwargs_179050 = {}
    # Getting the type of 'print' (line 1020)
    print_179043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 12), 'print', False)
    # Calling print(args, kwargs) (line 1020)
    print_call_result_179051 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 12), print_179043, *[result_mod_179049], **kwargs_179050)
    
    
    # Call to print(...): (line 1021)
    # Processing the call arguments (line 1021)
    str_179053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1021, 18), 'str', '         Gradient evaluations: %d')
    
    # Obtaining the type of the subscript
    int_179054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1021, 67), 'int')
    # Getting the type of 'grad_calls' (line 1021)
    grad_calls_179055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 56), 'grad_calls', False)
    # Obtaining the member '__getitem__' of a type (line 1021)
    getitem___179056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1021, 56), grad_calls_179055, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1021)
    subscript_call_result_179057 = invoke(stypy.reporting.localization.Localization(__file__, 1021, 56), getitem___179056, int_179054)
    
    # Applying the binary operator '%' (line 1021)
    result_mod_179058 = python_operator(stypy.reporting.localization.Localization(__file__, 1021, 18), '%', str_179053, subscript_call_result_179057)
    
    # Processing the call keyword arguments (line 1021)
    kwargs_179059 = {}
    # Getting the type of 'print' (line 1021)
    print_179052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 12), 'print', False)
    # Calling print(args, kwargs) (line 1021)
    print_call_result_179060 = invoke(stypy.reporting.localization.Localization(__file__, 1021, 12), print_179052, *[result_mod_179058], **kwargs_179059)
    
    # SSA join for if statement (line 1016)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1014)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'k' (line 1023)
    k_179061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 9), 'k')
    # Getting the type of 'maxiter' (line 1023)
    maxiter_179062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 14), 'maxiter')
    # Applying the binary operator '>=' (line 1023)
    result_ge_179063 = python_operator(stypy.reporting.localization.Localization(__file__, 1023, 9), '>=', k_179061, maxiter_179062)
    
    # Testing the type of an if condition (line 1023)
    if_condition_179064 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1023, 9), result_ge_179063)
    # Assigning a type to the variable 'if_condition_179064' (line 1023)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1023, 9), 'if_condition_179064', if_condition_179064)
    # SSA begins for if statement (line 1023)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1024):
    
    # Assigning a Num to a Name (line 1024):
    int_179065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1024, 19), 'int')
    # Assigning a type to the variable 'warnflag' (line 1024)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1024, 8), 'warnflag', int_179065)
    
    # Assigning a Subscript to a Name (line 1025):
    
    # Assigning a Subscript to a Name (line 1025):
    
    # Obtaining the type of the subscript
    str_179066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1025, 30), 'str', 'maxiter')
    # Getting the type of '_status_message' (line 1025)
    _status_message_179067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 14), '_status_message')
    # Obtaining the member '__getitem__' of a type (line 1025)
    getitem___179068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1025, 14), _status_message_179067, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1025)
    subscript_call_result_179069 = invoke(stypy.reporting.localization.Localization(__file__, 1025, 14), getitem___179068, str_179066)
    
    # Assigning a type to the variable 'msg' (line 1025)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1025, 8), 'msg', subscript_call_result_179069)
    
    # Getting the type of 'disp' (line 1026)
    disp_179070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 11), 'disp')
    # Testing the type of an if condition (line 1026)
    if_condition_179071 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1026, 8), disp_179070)
    # Assigning a type to the variable 'if_condition_179071' (line 1026)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1026, 8), 'if_condition_179071', if_condition_179071)
    # SSA begins for if statement (line 1026)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 1027)
    # Processing the call arguments (line 1027)
    str_179073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1027, 18), 'str', 'Warning: ')
    # Getting the type of 'msg' (line 1027)
    msg_179074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 32), 'msg', False)
    # Applying the binary operator '+' (line 1027)
    result_add_179075 = python_operator(stypy.reporting.localization.Localization(__file__, 1027, 18), '+', str_179073, msg_179074)
    
    # Processing the call keyword arguments (line 1027)
    kwargs_179076 = {}
    # Getting the type of 'print' (line 1027)
    print_179072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 12), 'print', False)
    # Calling print(args, kwargs) (line 1027)
    print_call_result_179077 = invoke(stypy.reporting.localization.Localization(__file__, 1027, 12), print_179072, *[result_add_179075], **kwargs_179076)
    
    
    # Call to print(...): (line 1028)
    # Processing the call arguments (line 1028)
    str_179079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1028, 18), 'str', '         Current function value: %f')
    # Getting the type of 'fval' (line 1028)
    fval_179080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 58), 'fval', False)
    # Applying the binary operator '%' (line 1028)
    result_mod_179081 = python_operator(stypy.reporting.localization.Localization(__file__, 1028, 18), '%', str_179079, fval_179080)
    
    # Processing the call keyword arguments (line 1028)
    kwargs_179082 = {}
    # Getting the type of 'print' (line 1028)
    print_179078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 12), 'print', False)
    # Calling print(args, kwargs) (line 1028)
    print_call_result_179083 = invoke(stypy.reporting.localization.Localization(__file__, 1028, 12), print_179078, *[result_mod_179081], **kwargs_179082)
    
    
    # Call to print(...): (line 1029)
    # Processing the call arguments (line 1029)
    str_179085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1029, 18), 'str', '         Iterations: %d')
    # Getting the type of 'k' (line 1029)
    k_179086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 46), 'k', False)
    # Applying the binary operator '%' (line 1029)
    result_mod_179087 = python_operator(stypy.reporting.localization.Localization(__file__, 1029, 18), '%', str_179085, k_179086)
    
    # Processing the call keyword arguments (line 1029)
    kwargs_179088 = {}
    # Getting the type of 'print' (line 1029)
    print_179084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 12), 'print', False)
    # Calling print(args, kwargs) (line 1029)
    print_call_result_179089 = invoke(stypy.reporting.localization.Localization(__file__, 1029, 12), print_179084, *[result_mod_179087], **kwargs_179088)
    
    
    # Call to print(...): (line 1030)
    # Processing the call arguments (line 1030)
    str_179091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1030, 18), 'str', '         Function evaluations: %d')
    
    # Obtaining the type of the subscript
    int_179092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1030, 67), 'int')
    # Getting the type of 'func_calls' (line 1030)
    func_calls_179093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 56), 'func_calls', False)
    # Obtaining the member '__getitem__' of a type (line 1030)
    getitem___179094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1030, 56), func_calls_179093, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1030)
    subscript_call_result_179095 = invoke(stypy.reporting.localization.Localization(__file__, 1030, 56), getitem___179094, int_179092)
    
    # Applying the binary operator '%' (line 1030)
    result_mod_179096 = python_operator(stypy.reporting.localization.Localization(__file__, 1030, 18), '%', str_179091, subscript_call_result_179095)
    
    # Processing the call keyword arguments (line 1030)
    kwargs_179097 = {}
    # Getting the type of 'print' (line 1030)
    print_179090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 12), 'print', False)
    # Calling print(args, kwargs) (line 1030)
    print_call_result_179098 = invoke(stypy.reporting.localization.Localization(__file__, 1030, 12), print_179090, *[result_mod_179096], **kwargs_179097)
    
    
    # Call to print(...): (line 1031)
    # Processing the call arguments (line 1031)
    str_179100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1031, 18), 'str', '         Gradient evaluations: %d')
    
    # Obtaining the type of the subscript
    int_179101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1031, 67), 'int')
    # Getting the type of 'grad_calls' (line 1031)
    grad_calls_179102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 56), 'grad_calls', False)
    # Obtaining the member '__getitem__' of a type (line 1031)
    getitem___179103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1031, 56), grad_calls_179102, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1031)
    subscript_call_result_179104 = invoke(stypy.reporting.localization.Localization(__file__, 1031, 56), getitem___179103, int_179101)
    
    # Applying the binary operator '%' (line 1031)
    result_mod_179105 = python_operator(stypy.reporting.localization.Localization(__file__, 1031, 18), '%', str_179100, subscript_call_result_179104)
    
    # Processing the call keyword arguments (line 1031)
    kwargs_179106 = {}
    # Getting the type of 'print' (line 1031)
    print_179099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 12), 'print', False)
    # Calling print(args, kwargs) (line 1031)
    print_call_result_179107 = invoke(stypy.reporting.localization.Localization(__file__, 1031, 12), print_179099, *[result_mod_179105], **kwargs_179106)
    
    # SSA join for if statement (line 1026)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1023)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Subscript to a Name (line 1033):
    
    # Assigning a Subscript to a Name (line 1033):
    
    # Obtaining the type of the subscript
    str_179108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1033, 30), 'str', 'success')
    # Getting the type of '_status_message' (line 1033)
    _status_message_179109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 14), '_status_message')
    # Obtaining the member '__getitem__' of a type (line 1033)
    getitem___179110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1033, 14), _status_message_179109, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1033)
    subscript_call_result_179111 = invoke(stypy.reporting.localization.Localization(__file__, 1033, 14), getitem___179110, str_179108)
    
    # Assigning a type to the variable 'msg' (line 1033)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1033, 8), 'msg', subscript_call_result_179111)
    
    # Getting the type of 'disp' (line 1034)
    disp_179112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 11), 'disp')
    # Testing the type of an if condition (line 1034)
    if_condition_179113 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1034, 8), disp_179112)
    # Assigning a type to the variable 'if_condition_179113' (line 1034)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1034, 8), 'if_condition_179113', if_condition_179113)
    # SSA begins for if statement (line 1034)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 1035)
    # Processing the call arguments (line 1035)
    # Getting the type of 'msg' (line 1035)
    msg_179115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 18), 'msg', False)
    # Processing the call keyword arguments (line 1035)
    kwargs_179116 = {}
    # Getting the type of 'print' (line 1035)
    print_179114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 12), 'print', False)
    # Calling print(args, kwargs) (line 1035)
    print_call_result_179117 = invoke(stypy.reporting.localization.Localization(__file__, 1035, 12), print_179114, *[msg_179115], **kwargs_179116)
    
    
    # Call to print(...): (line 1036)
    # Processing the call arguments (line 1036)
    str_179119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1036, 18), 'str', '         Current function value: %f')
    # Getting the type of 'fval' (line 1036)
    fval_179120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 58), 'fval', False)
    # Applying the binary operator '%' (line 1036)
    result_mod_179121 = python_operator(stypy.reporting.localization.Localization(__file__, 1036, 18), '%', str_179119, fval_179120)
    
    # Processing the call keyword arguments (line 1036)
    kwargs_179122 = {}
    # Getting the type of 'print' (line 1036)
    print_179118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 12), 'print', False)
    # Calling print(args, kwargs) (line 1036)
    print_call_result_179123 = invoke(stypy.reporting.localization.Localization(__file__, 1036, 12), print_179118, *[result_mod_179121], **kwargs_179122)
    
    
    # Call to print(...): (line 1037)
    # Processing the call arguments (line 1037)
    str_179125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 18), 'str', '         Iterations: %d')
    # Getting the type of 'k' (line 1037)
    k_179126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 46), 'k', False)
    # Applying the binary operator '%' (line 1037)
    result_mod_179127 = python_operator(stypy.reporting.localization.Localization(__file__, 1037, 18), '%', str_179125, k_179126)
    
    # Processing the call keyword arguments (line 1037)
    kwargs_179128 = {}
    # Getting the type of 'print' (line 1037)
    print_179124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 12), 'print', False)
    # Calling print(args, kwargs) (line 1037)
    print_call_result_179129 = invoke(stypy.reporting.localization.Localization(__file__, 1037, 12), print_179124, *[result_mod_179127], **kwargs_179128)
    
    
    # Call to print(...): (line 1038)
    # Processing the call arguments (line 1038)
    str_179131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1038, 18), 'str', '         Function evaluations: %d')
    
    # Obtaining the type of the subscript
    int_179132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1038, 67), 'int')
    # Getting the type of 'func_calls' (line 1038)
    func_calls_179133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 56), 'func_calls', False)
    # Obtaining the member '__getitem__' of a type (line 1038)
    getitem___179134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 56), func_calls_179133, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1038)
    subscript_call_result_179135 = invoke(stypy.reporting.localization.Localization(__file__, 1038, 56), getitem___179134, int_179132)
    
    # Applying the binary operator '%' (line 1038)
    result_mod_179136 = python_operator(stypy.reporting.localization.Localization(__file__, 1038, 18), '%', str_179131, subscript_call_result_179135)
    
    # Processing the call keyword arguments (line 1038)
    kwargs_179137 = {}
    # Getting the type of 'print' (line 1038)
    print_179130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 12), 'print', False)
    # Calling print(args, kwargs) (line 1038)
    print_call_result_179138 = invoke(stypy.reporting.localization.Localization(__file__, 1038, 12), print_179130, *[result_mod_179136], **kwargs_179137)
    
    
    # Call to print(...): (line 1039)
    # Processing the call arguments (line 1039)
    str_179140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, 18), 'str', '         Gradient evaluations: %d')
    
    # Obtaining the type of the subscript
    int_179141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, 67), 'int')
    # Getting the type of 'grad_calls' (line 1039)
    grad_calls_179142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 56), 'grad_calls', False)
    # Obtaining the member '__getitem__' of a type (line 1039)
    getitem___179143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 56), grad_calls_179142, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1039)
    subscript_call_result_179144 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 56), getitem___179143, int_179141)
    
    # Applying the binary operator '%' (line 1039)
    result_mod_179145 = python_operator(stypy.reporting.localization.Localization(__file__, 1039, 18), '%', str_179140, subscript_call_result_179144)
    
    # Processing the call keyword arguments (line 1039)
    kwargs_179146 = {}
    # Getting the type of 'print' (line 1039)
    print_179139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 12), 'print', False)
    # Calling print(args, kwargs) (line 1039)
    print_call_result_179147 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 12), print_179139, *[result_mod_179145], **kwargs_179146)
    
    # SSA join for if statement (line 1034)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1023)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1014)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1041):
    
    # Assigning a Call to a Name (line 1041):
    
    # Call to OptimizeResult(...): (line 1041)
    # Processing the call keyword arguments (line 1041)
    # Getting the type of 'fval' (line 1041)
    fval_179149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 32), 'fval', False)
    keyword_179150 = fval_179149
    # Getting the type of 'gfk' (line 1041)
    gfk_179151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 42), 'gfk', False)
    keyword_179152 = gfk_179151
    # Getting the type of 'Hk' (line 1041)
    Hk_179153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 56), 'Hk', False)
    keyword_179154 = Hk_179153
    
    # Obtaining the type of the subscript
    int_179155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1041, 76), 'int')
    # Getting the type of 'func_calls' (line 1041)
    func_calls_179156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 65), 'func_calls', False)
    # Obtaining the member '__getitem__' of a type (line 1041)
    getitem___179157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 65), func_calls_179156, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1041)
    subscript_call_result_179158 = invoke(stypy.reporting.localization.Localization(__file__, 1041, 65), getitem___179157, int_179155)
    
    keyword_179159 = subscript_call_result_179158
    
    # Obtaining the type of the subscript
    int_179160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, 44), 'int')
    # Getting the type of 'grad_calls' (line 1042)
    grad_calls_179161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 33), 'grad_calls', False)
    # Obtaining the member '__getitem__' of a type (line 1042)
    getitem___179162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 33), grad_calls_179161, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1042)
    subscript_call_result_179163 = invoke(stypy.reporting.localization.Localization(__file__, 1042, 33), getitem___179162, int_179160)
    
    keyword_179164 = subscript_call_result_179163
    # Getting the type of 'warnflag' (line 1042)
    warnflag_179165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 55), 'warnflag', False)
    keyword_179166 = warnflag_179165
    
    # Getting the type of 'warnflag' (line 1043)
    warnflag_179167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 37), 'warnflag', False)
    int_179168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 49), 'int')
    # Applying the binary operator '==' (line 1043)
    result_eq_179169 = python_operator(stypy.reporting.localization.Localization(__file__, 1043, 37), '==', warnflag_179167, int_179168)
    
    keyword_179170 = result_eq_179169
    # Getting the type of 'msg' (line 1043)
    msg_179171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 61), 'msg', False)
    keyword_179172 = msg_179171
    # Getting the type of 'xk' (line 1043)
    xk_179173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 68), 'xk', False)
    keyword_179174 = xk_179173
    # Getting the type of 'k' (line 1044)
    k_179175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 32), 'k', False)
    keyword_179176 = k_179175
    kwargs_179177 = {'status': keyword_179166, 'success': keyword_179170, 'njev': keyword_179164, 'nfev': keyword_179159, 'hess_inv': keyword_179154, 'fun': keyword_179150, 'x': keyword_179174, 'message': keyword_179172, 'jac': keyword_179152, 'nit': keyword_179176}
    # Getting the type of 'OptimizeResult' (line 1041)
    OptimizeResult_179148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 13), 'OptimizeResult', False)
    # Calling OptimizeResult(args, kwargs) (line 1041)
    OptimizeResult_call_result_179178 = invoke(stypy.reporting.localization.Localization(__file__, 1041, 13), OptimizeResult_179148, *[], **kwargs_179177)
    
    # Assigning a type to the variable 'result' (line 1041)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1041, 4), 'result', OptimizeResult_call_result_179178)
    
    # Getting the type of 'retall' (line 1045)
    retall_179179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 7), 'retall')
    # Testing the type of an if condition (line 1045)
    if_condition_179180 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1045, 4), retall_179179)
    # Assigning a type to the variable 'if_condition_179180' (line 1045)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1045, 4), 'if_condition_179180', if_condition_179180)
    # SSA begins for if statement (line 1045)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 1046):
    
    # Assigning a Name to a Subscript (line 1046):
    # Getting the type of 'allvecs' (line 1046)
    allvecs_179181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 28), 'allvecs')
    # Getting the type of 'result' (line 1046)
    result_179182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 8), 'result')
    str_179183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 15), 'str', 'allvecs')
    # Storing an element on a container (line 1046)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1046, 8), result_179182, (str_179183, allvecs_179181))
    # SSA join for if statement (line 1045)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'result' (line 1047)
    result_179184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 1047)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 4), 'stypy_return_type', result_179184)
    
    # ################# End of '_minimize_bfgs(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_minimize_bfgs' in the type store
    # Getting the type of 'stypy_return_type' (line 904)
    stypy_return_type_179185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_179185)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_minimize_bfgs'
    return stypy_return_type_179185

# Assigning a type to the variable '_minimize_bfgs' (line 904)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 904, 0), '_minimize_bfgs', _minimize_bfgs)

@norecursion
def fmin_cg(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1050)
    None_179186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 26), 'None')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1050)
    tuple_179187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1050, 37), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1050)
    
    float_179188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1050, 46), 'float')
    # Getting the type of 'Inf' (line 1050)
    Inf_179189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 57), 'Inf')
    # Getting the type of '_epsilon' (line 1050)
    _epsilon_179190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 70), '_epsilon')
    # Getting the type of 'None' (line 1051)
    None_179191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 20), 'None')
    int_179192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1051, 38), 'int')
    int_179193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1051, 46), 'int')
    int_179194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1051, 56), 'int')
    # Getting the type of 'None' (line 1051)
    None_179195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 68), 'None')
    defaults = [None_179186, tuple_179187, float_179188, Inf_179189, _epsilon_179190, None_179191, int_179192, int_179193, int_179194, None_179195]
    # Create a new context for function 'fmin_cg'
    module_type_store = module_type_store.open_function_context('fmin_cg', 1050, 0, False)
    
    # Passed parameters checking function
    fmin_cg.stypy_localization = localization
    fmin_cg.stypy_type_of_self = None
    fmin_cg.stypy_type_store = module_type_store
    fmin_cg.stypy_function_name = 'fmin_cg'
    fmin_cg.stypy_param_names_list = ['f', 'x0', 'fprime', 'args', 'gtol', 'norm', 'epsilon', 'maxiter', 'full_output', 'disp', 'retall', 'callback']
    fmin_cg.stypy_varargs_param_name = None
    fmin_cg.stypy_kwargs_param_name = None
    fmin_cg.stypy_call_defaults = defaults
    fmin_cg.stypy_call_varargs = varargs
    fmin_cg.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fmin_cg', ['f', 'x0', 'fprime', 'args', 'gtol', 'norm', 'epsilon', 'maxiter', 'full_output', 'disp', 'retall', 'callback'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fmin_cg', localization, ['f', 'x0', 'fprime', 'args', 'gtol', 'norm', 'epsilon', 'maxiter', 'full_output', 'disp', 'retall', 'callback'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fmin_cg(...)' code ##################

    str_179196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1199, (-1)), 'str', '\n    Minimize a function using a nonlinear conjugate gradient algorithm.\n\n    Parameters\n    ----------\n    f : callable, ``f(x, *args)``\n        Objective function to be minimized.  Here `x` must be a 1-D array of\n        the variables that are to be changed in the search for a minimum, and\n        `args` are the other (fixed) parameters of `f`.\n    x0 : ndarray\n        A user-supplied initial estimate of `xopt`, the optimal value of `x`.\n        It must be a 1-D array of values.\n    fprime : callable, ``fprime(x, *args)``, optional\n        A function that returns the gradient of `f` at `x`. Here `x` and `args`\n        are as described above for `f`. The returned value must be a 1-D array.\n        Defaults to None, in which case the gradient is approximated\n        numerically (see `epsilon`, below).\n    args : tuple, optional\n        Parameter values passed to `f` and `fprime`. Must be supplied whenever\n        additional fixed parameters are needed to completely specify the\n        functions `f` and `fprime`.\n    gtol : float, optional\n        Stop when the norm of the gradient is less than `gtol`.\n    norm : float, optional\n        Order to use for the norm of the gradient\n        (``-np.Inf`` is min, ``np.Inf`` is max).\n    epsilon : float or ndarray, optional\n        Step size(s) to use when `fprime` is approximated numerically. Can be a\n        scalar or a 1-D array.  Defaults to ``sqrt(eps)``, with eps the\n        floating point machine precision.  Usually ``sqrt(eps)`` is about\n        1.5e-8.\n    maxiter : int, optional\n        Maximum number of iterations to perform. Default is ``200 * len(x0)``.\n    full_output : bool, optional\n        If True, return `fopt`, `func_calls`, `grad_calls`, and `warnflag` in\n        addition to `xopt`.  See the Returns section below for additional\n        information on optional return values.\n    disp : bool, optional\n        If True, return a convergence message, followed by `xopt`.\n    retall : bool, optional\n        If True, add to the returned values the results of each iteration.\n    callback : callable, optional\n        An optional user-supplied function, called after each iteration.\n        Called as ``callback(xk)``, where ``xk`` is the current value of `x0`.\n\n    Returns\n    -------\n    xopt : ndarray\n        Parameters which minimize f, i.e. ``f(xopt) == fopt``.\n    fopt : float, optional\n        Minimum value found, f(xopt).  Only returned if `full_output` is True.\n    func_calls : int, optional\n        The number of function_calls made.  Only returned if `full_output`\n        is True.\n    grad_calls : int, optional\n        The number of gradient calls made. Only returned if `full_output` is\n        True.\n    warnflag : int, optional\n        Integer value with warning status, only returned if `full_output` is\n        True.\n\n        0 : Success.\n\n        1 : The maximum number of iterations was exceeded.\n\n        2 : Gradient and/or function calls were not changing.  May indicate\n            that precision was lost, i.e., the routine did not converge.\n\n    allvecs : list of ndarray, optional\n        List of arrays, containing the results at each iteration.\n        Only returned if `retall` is True.\n\n    See Also\n    --------\n    minimize : common interface to all `scipy.optimize` algorithms for\n               unconstrained and constrained minimization of multivariate\n               functions.  It provides an alternative way to call\n               ``fmin_cg``, by specifying ``method=\'CG\'``.\n\n    Notes\n    -----\n    This conjugate gradient algorithm is based on that of Polak and Ribiere\n    [1]_.\n\n    Conjugate gradient methods tend to work better when:\n\n    1. `f` has a unique global minimizing point, and no local minima or\n       other stationary points,\n    2. `f` is, at least locally, reasonably well approximated by a\n       quadratic function of the variables,\n    3. `f` is continuous and has a continuous gradient,\n    4. `fprime` is not too large, e.g., has a norm less than 1000,\n    5. The initial guess, `x0`, is reasonably close to `f` \'s global\n       minimizing point, `xopt`.\n\n    References\n    ----------\n    .. [1] Wright & Nocedal, "Numerical Optimization", 1999, pp. 120-122.\n\n    Examples\n    --------\n    Example 1: seek the minimum value of the expression\n    ``a*u**2 + b*u*v + c*v**2 + d*u + e*v + f`` for given values\n    of the parameters and an initial guess ``(u, v) = (0, 0)``.\n\n    >>> args = (2, 3, 7, 8, 9, 10)  # parameter values\n    >>> def f(x, *args):\n    ...     u, v = x\n    ...     a, b, c, d, e, f = args\n    ...     return a*u**2 + b*u*v + c*v**2 + d*u + e*v + f\n    >>> def gradf(x, *args):\n    ...     u, v = x\n    ...     a, b, c, d, e, f = args\n    ...     gu = 2*a*u + b*v + d     # u-component of the gradient\n    ...     gv = b*u + 2*c*v + e     # v-component of the gradient\n    ...     return np.asarray((gu, gv))\n    >>> x0 = np.asarray((0, 0))  # Initial guess.\n    >>> from scipy import optimize\n    >>> res1 = optimize.fmin_cg(f, x0, fprime=gradf, args=args)\n    Optimization terminated successfully.\n             Current function value: 1.617021\n             Iterations: 4\n             Function evaluations: 8\n             Gradient evaluations: 8\n    >>> res1\n    array([-1.80851064, -0.25531915])\n\n    Example 2: solve the same problem using the `minimize` function.\n    (This `myopts` dictionary shows all of the available options,\n    although in practice only non-default values would be needed.\n    The returned value will be a dictionary.)\n\n    >>> opts = {\'maxiter\' : None,    # default value.\n    ...         \'disp\' : True,    # non-default value.\n    ...         \'gtol\' : 1e-5,    # default value.\n    ...         \'norm\' : np.inf,  # default value.\n    ...         \'eps\' : 1.4901161193847656e-08}  # default value.\n    >>> res2 = optimize.minimize(f, x0, jac=gradf, args=args,\n    ...                          method=\'CG\', options=opts)\n    Optimization terminated successfully.\n            Current function value: 1.617021\n            Iterations: 4\n            Function evaluations: 8\n            Gradient evaluations: 8\n    >>> res2.x  # minimum found\n    array([-1.80851064, -0.25531915])\n\n    ')
    
    # Assigning a Dict to a Name (line 1200):
    
    # Assigning a Dict to a Name (line 1200):
    
    # Obtaining an instance of the builtin type 'dict' (line 1200)
    dict_179197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1200, 11), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 1200)
    # Adding element type (key, value) (line 1200)
    str_179198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1200, 12), 'str', 'gtol')
    # Getting the type of 'gtol' (line 1200)
    gtol_179199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 20), 'gtol')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1200, 11), dict_179197, (str_179198, gtol_179199))
    # Adding element type (key, value) (line 1200)
    str_179200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1201, 12), 'str', 'norm')
    # Getting the type of 'norm' (line 1201)
    norm_179201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 20), 'norm')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1200, 11), dict_179197, (str_179200, norm_179201))
    # Adding element type (key, value) (line 1200)
    str_179202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 12), 'str', 'eps')
    # Getting the type of 'epsilon' (line 1202)
    epsilon_179203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 19), 'epsilon')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1200, 11), dict_179197, (str_179202, epsilon_179203))
    # Adding element type (key, value) (line 1200)
    str_179204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1203, 12), 'str', 'disp')
    # Getting the type of 'disp' (line 1203)
    disp_179205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 20), 'disp')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1200, 11), dict_179197, (str_179204, disp_179205))
    # Adding element type (key, value) (line 1200)
    str_179206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1204, 12), 'str', 'maxiter')
    # Getting the type of 'maxiter' (line 1204)
    maxiter_179207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 23), 'maxiter')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1200, 11), dict_179197, (str_179206, maxiter_179207))
    # Adding element type (key, value) (line 1200)
    str_179208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1205, 12), 'str', 'return_all')
    # Getting the type of 'retall' (line 1205)
    retall_179209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 26), 'retall')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1200, 11), dict_179197, (str_179208, retall_179209))
    
    # Assigning a type to the variable 'opts' (line 1200)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1200, 4), 'opts', dict_179197)
    
    # Assigning a Call to a Name (line 1207):
    
    # Assigning a Call to a Name (line 1207):
    
    # Call to _minimize_cg(...): (line 1207)
    # Processing the call arguments (line 1207)
    # Getting the type of 'f' (line 1207)
    f_179211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 23), 'f', False)
    # Getting the type of 'x0' (line 1207)
    x0_179212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 26), 'x0', False)
    # Getting the type of 'args' (line 1207)
    args_179213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 30), 'args', False)
    # Getting the type of 'fprime' (line 1207)
    fprime_179214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 36), 'fprime', False)
    # Processing the call keyword arguments (line 1207)
    # Getting the type of 'callback' (line 1207)
    callback_179215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 53), 'callback', False)
    keyword_179216 = callback_179215
    # Getting the type of 'opts' (line 1207)
    opts_179217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 65), 'opts', False)
    kwargs_179218 = {'callback': keyword_179216, 'opts_179217': opts_179217}
    # Getting the type of '_minimize_cg' (line 1207)
    _minimize_cg_179210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 10), '_minimize_cg', False)
    # Calling _minimize_cg(args, kwargs) (line 1207)
    _minimize_cg_call_result_179219 = invoke(stypy.reporting.localization.Localization(__file__, 1207, 10), _minimize_cg_179210, *[f_179211, x0_179212, args_179213, fprime_179214], **kwargs_179218)
    
    # Assigning a type to the variable 'res' (line 1207)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1207, 4), 'res', _minimize_cg_call_result_179219)
    
    # Getting the type of 'full_output' (line 1209)
    full_output_179220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 7), 'full_output')
    # Testing the type of an if condition (line 1209)
    if_condition_179221 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1209, 4), full_output_179220)
    # Assigning a type to the variable 'if_condition_179221' (line 1209)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1209, 4), 'if_condition_179221', if_condition_179221)
    # SSA begins for if statement (line 1209)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 1210):
    
    # Assigning a Tuple to a Name (line 1210):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1210)
    tuple_179222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1210, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1210)
    # Adding element type (line 1210)
    
    # Obtaining the type of the subscript
    str_179223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1210, 22), 'str', 'x')
    # Getting the type of 'res' (line 1210)
    res_179224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 18), 'res')
    # Obtaining the member '__getitem__' of a type (line 1210)
    getitem___179225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1210, 18), res_179224, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1210)
    subscript_call_result_179226 = invoke(stypy.reporting.localization.Localization(__file__, 1210, 18), getitem___179225, str_179223)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1210, 18), tuple_179222, subscript_call_result_179226)
    # Adding element type (line 1210)
    
    # Obtaining the type of the subscript
    str_179227 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1210, 32), 'str', 'fun')
    # Getting the type of 'res' (line 1210)
    res_179228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 28), 'res')
    # Obtaining the member '__getitem__' of a type (line 1210)
    getitem___179229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1210, 28), res_179228, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1210)
    subscript_call_result_179230 = invoke(stypy.reporting.localization.Localization(__file__, 1210, 28), getitem___179229, str_179227)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1210, 18), tuple_179222, subscript_call_result_179230)
    # Adding element type (line 1210)
    
    # Obtaining the type of the subscript
    str_179231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1210, 44), 'str', 'nfev')
    # Getting the type of 'res' (line 1210)
    res_179232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 40), 'res')
    # Obtaining the member '__getitem__' of a type (line 1210)
    getitem___179233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1210, 40), res_179232, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1210)
    subscript_call_result_179234 = invoke(stypy.reporting.localization.Localization(__file__, 1210, 40), getitem___179233, str_179231)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1210, 18), tuple_179222, subscript_call_result_179234)
    # Adding element type (line 1210)
    
    # Obtaining the type of the subscript
    str_179235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1210, 57), 'str', 'njev')
    # Getting the type of 'res' (line 1210)
    res_179236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 53), 'res')
    # Obtaining the member '__getitem__' of a type (line 1210)
    getitem___179237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1210, 53), res_179236, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1210)
    subscript_call_result_179238 = invoke(stypy.reporting.localization.Localization(__file__, 1210, 53), getitem___179237, str_179235)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1210, 18), tuple_179222, subscript_call_result_179238)
    # Adding element type (line 1210)
    
    # Obtaining the type of the subscript
    str_179239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1210, 70), 'str', 'status')
    # Getting the type of 'res' (line 1210)
    res_179240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 66), 'res')
    # Obtaining the member '__getitem__' of a type (line 1210)
    getitem___179241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1210, 66), res_179240, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1210)
    subscript_call_result_179242 = invoke(stypy.reporting.localization.Localization(__file__, 1210, 66), getitem___179241, str_179239)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1210, 18), tuple_179222, subscript_call_result_179242)
    
    # Assigning a type to the variable 'retlist' (line 1210)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1210, 8), 'retlist', tuple_179222)
    
    # Getting the type of 'retall' (line 1211)
    retall_179243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 11), 'retall')
    # Testing the type of an if condition (line 1211)
    if_condition_179244 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1211, 8), retall_179243)
    # Assigning a type to the variable 'if_condition_179244' (line 1211)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1211, 8), 'if_condition_179244', if_condition_179244)
    # SSA begins for if statement (line 1211)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'retlist' (line 1212)
    retlist_179245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 12), 'retlist')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1212)
    tuple_179246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1212, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1212)
    # Adding element type (line 1212)
    
    # Obtaining the type of the subscript
    str_179247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1212, 28), 'str', 'allvecs')
    # Getting the type of 'res' (line 1212)
    res_179248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 24), 'res')
    # Obtaining the member '__getitem__' of a type (line 1212)
    getitem___179249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1212, 24), res_179248, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1212)
    subscript_call_result_179250 = invoke(stypy.reporting.localization.Localization(__file__, 1212, 24), getitem___179249, str_179247)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1212, 24), tuple_179246, subscript_call_result_179250)
    
    # Applying the binary operator '+=' (line 1212)
    result_iadd_179251 = python_operator(stypy.reporting.localization.Localization(__file__, 1212, 12), '+=', retlist_179245, tuple_179246)
    # Assigning a type to the variable 'retlist' (line 1212)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1212, 12), 'retlist', result_iadd_179251)
    
    # SSA join for if statement (line 1211)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'retlist' (line 1213)
    retlist_179252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 15), 'retlist')
    # Assigning a type to the variable 'stypy_return_type' (line 1213)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1213, 8), 'stypy_return_type', retlist_179252)
    # SSA branch for the else part of an if statement (line 1209)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'retall' (line 1215)
    retall_179253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 11), 'retall')
    # Testing the type of an if condition (line 1215)
    if_condition_179254 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1215, 8), retall_179253)
    # Assigning a type to the variable 'if_condition_179254' (line 1215)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1215, 8), 'if_condition_179254', if_condition_179254)
    # SSA begins for if statement (line 1215)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1216)
    tuple_179255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1216, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1216)
    # Adding element type (line 1216)
    
    # Obtaining the type of the subscript
    str_179256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1216, 23), 'str', 'x')
    # Getting the type of 'res' (line 1216)
    res_179257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 19), 'res')
    # Obtaining the member '__getitem__' of a type (line 1216)
    getitem___179258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1216, 19), res_179257, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1216)
    subscript_call_result_179259 = invoke(stypy.reporting.localization.Localization(__file__, 1216, 19), getitem___179258, str_179256)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1216, 19), tuple_179255, subscript_call_result_179259)
    # Adding element type (line 1216)
    
    # Obtaining the type of the subscript
    str_179260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1216, 33), 'str', 'allvecs')
    # Getting the type of 'res' (line 1216)
    res_179261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 29), 'res')
    # Obtaining the member '__getitem__' of a type (line 1216)
    getitem___179262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1216, 29), res_179261, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1216)
    subscript_call_result_179263 = invoke(stypy.reporting.localization.Localization(__file__, 1216, 29), getitem___179262, str_179260)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1216, 19), tuple_179255, subscript_call_result_179263)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1216)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1216, 12), 'stypy_return_type', tuple_179255)
    # SSA branch for the else part of an if statement (line 1215)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining the type of the subscript
    str_179264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1218, 23), 'str', 'x')
    # Getting the type of 'res' (line 1218)
    res_179265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 19), 'res')
    # Obtaining the member '__getitem__' of a type (line 1218)
    getitem___179266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1218, 19), res_179265, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1218)
    subscript_call_result_179267 = invoke(stypy.reporting.localization.Localization(__file__, 1218, 19), getitem___179266, str_179264)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1218)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1218, 12), 'stypy_return_type', subscript_call_result_179267)
    # SSA join for if statement (line 1215)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1209)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'fmin_cg(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fmin_cg' in the type store
    # Getting the type of 'stypy_return_type' (line 1050)
    stypy_return_type_179268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_179268)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fmin_cg'
    return stypy_return_type_179268

# Assigning a type to the variable 'fmin_cg' (line 1050)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1050, 0), 'fmin_cg', fmin_cg)

@norecursion
def _minimize_cg(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 1221)
    tuple_179269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1221, 31), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1221)
    
    # Getting the type of 'None' (line 1221)
    None_179270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 39), 'None')
    # Getting the type of 'None' (line 1221)
    None_179271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 54), 'None')
    float_179272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1222, 22), 'float')
    # Getting the type of 'Inf' (line 1222)
    Inf_179273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 33), 'Inf')
    # Getting the type of '_epsilon' (line 1222)
    _epsilon_179274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 42), '_epsilon')
    # Getting the type of 'None' (line 1222)
    None_179275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 60), 'None')
    # Getting the type of 'False' (line 1223)
    False_179276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 22), 'False')
    # Getting the type of 'False' (line 1223)
    False_179277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 40), 'False')
    defaults = [tuple_179269, None_179270, None_179271, float_179272, Inf_179273, _epsilon_179274, None_179275, False_179276, False_179277]
    # Create a new context for function '_minimize_cg'
    module_type_store = module_type_store.open_function_context('_minimize_cg', 1221, 0, False)
    
    # Passed parameters checking function
    _minimize_cg.stypy_localization = localization
    _minimize_cg.stypy_type_of_self = None
    _minimize_cg.stypy_type_store = module_type_store
    _minimize_cg.stypy_function_name = '_minimize_cg'
    _minimize_cg.stypy_param_names_list = ['fun', 'x0', 'args', 'jac', 'callback', 'gtol', 'norm', 'eps', 'maxiter', 'disp', 'return_all']
    _minimize_cg.stypy_varargs_param_name = None
    _minimize_cg.stypy_kwargs_param_name = 'unknown_options'
    _minimize_cg.stypy_call_defaults = defaults
    _minimize_cg.stypy_call_varargs = varargs
    _minimize_cg.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_minimize_cg', ['fun', 'x0', 'args', 'jac', 'callback', 'gtol', 'norm', 'eps', 'maxiter', 'disp', 'return_all'], None, 'unknown_options', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_minimize_cg', localization, ['fun', 'x0', 'args', 'jac', 'callback', 'gtol', 'norm', 'eps', 'maxiter', 'disp', 'return_all'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_minimize_cg(...)' code ##################

    str_179278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1243, (-1)), 'str', '\n    Minimization of scalar function of one or more variables using the\n    conjugate gradient algorithm.\n\n    Options\n    -------\n    disp : bool\n        Set to True to print convergence messages.\n    maxiter : int\n        Maximum number of iterations to perform.\n    gtol : float\n        Gradient norm must be less than `gtol` before successful\n        termination.\n    norm : float\n        Order of norm (Inf is max, -Inf is min).\n    eps : float or ndarray\n        If `jac` is approximated, use this value for the step size.\n\n    ')
    
    # Call to _check_unknown_options(...): (line 1244)
    # Processing the call arguments (line 1244)
    # Getting the type of 'unknown_options' (line 1244)
    unknown_options_179280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 27), 'unknown_options', False)
    # Processing the call keyword arguments (line 1244)
    kwargs_179281 = {}
    # Getting the type of '_check_unknown_options' (line 1244)
    _check_unknown_options_179279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 4), '_check_unknown_options', False)
    # Calling _check_unknown_options(args, kwargs) (line 1244)
    _check_unknown_options_call_result_179282 = invoke(stypy.reporting.localization.Localization(__file__, 1244, 4), _check_unknown_options_179279, *[unknown_options_179280], **kwargs_179281)
    
    
    # Assigning a Name to a Name (line 1245):
    
    # Assigning a Name to a Name (line 1245):
    # Getting the type of 'fun' (line 1245)
    fun_179283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 8), 'fun')
    # Assigning a type to the variable 'f' (line 1245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1245, 4), 'f', fun_179283)
    
    # Assigning a Name to a Name (line 1246):
    
    # Assigning a Name to a Name (line 1246):
    # Getting the type of 'jac' (line 1246)
    jac_179284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 13), 'jac')
    # Assigning a type to the variable 'fprime' (line 1246)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1246, 4), 'fprime', jac_179284)
    
    # Assigning a Name to a Name (line 1247):
    
    # Assigning a Name to a Name (line 1247):
    # Getting the type of 'eps' (line 1247)
    eps_179285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 14), 'eps')
    # Assigning a type to the variable 'epsilon' (line 1247)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1247, 4), 'epsilon', eps_179285)
    
    # Assigning a Name to a Name (line 1248):
    
    # Assigning a Name to a Name (line 1248):
    # Getting the type of 'return_all' (line 1248)
    return_all_179286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 13), 'return_all')
    # Assigning a type to the variable 'retall' (line 1248)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1248, 4), 'retall', return_all_179286)
    
    # Assigning a Call to a Name (line 1250):
    
    # Assigning a Call to a Name (line 1250):
    
    # Call to flatten(...): (line 1250)
    # Processing the call keyword arguments (line 1250)
    kwargs_179292 = {}
    
    # Call to asarray(...): (line 1250)
    # Processing the call arguments (line 1250)
    # Getting the type of 'x0' (line 1250)
    x0_179288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 17), 'x0', False)
    # Processing the call keyword arguments (line 1250)
    kwargs_179289 = {}
    # Getting the type of 'asarray' (line 1250)
    asarray_179287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 9), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1250)
    asarray_call_result_179290 = invoke(stypy.reporting.localization.Localization(__file__, 1250, 9), asarray_179287, *[x0_179288], **kwargs_179289)
    
    # Obtaining the member 'flatten' of a type (line 1250)
    flatten_179291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1250, 9), asarray_call_result_179290, 'flatten')
    # Calling flatten(args, kwargs) (line 1250)
    flatten_call_result_179293 = invoke(stypy.reporting.localization.Localization(__file__, 1250, 9), flatten_179291, *[], **kwargs_179292)
    
    # Assigning a type to the variable 'x0' (line 1250)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1250, 4), 'x0', flatten_call_result_179293)
    
    # Type idiom detected: calculating its left and rigth part (line 1251)
    # Getting the type of 'maxiter' (line 1251)
    maxiter_179294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 7), 'maxiter')
    # Getting the type of 'None' (line 1251)
    None_179295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 18), 'None')
    
    (may_be_179296, more_types_in_union_179297) = may_be_none(maxiter_179294, None_179295)

    if may_be_179296:

        if more_types_in_union_179297:
            # Runtime conditional SSA (line 1251)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BinOp to a Name (line 1252):
        
        # Assigning a BinOp to a Name (line 1252):
        
        # Call to len(...): (line 1252)
        # Processing the call arguments (line 1252)
        # Getting the type of 'x0' (line 1252)
        x0_179299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 22), 'x0', False)
        # Processing the call keyword arguments (line 1252)
        kwargs_179300 = {}
        # Getting the type of 'len' (line 1252)
        len_179298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 18), 'len', False)
        # Calling len(args, kwargs) (line 1252)
        len_call_result_179301 = invoke(stypy.reporting.localization.Localization(__file__, 1252, 18), len_179298, *[x0_179299], **kwargs_179300)
        
        int_179302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1252, 28), 'int')
        # Applying the binary operator '*' (line 1252)
        result_mul_179303 = python_operator(stypy.reporting.localization.Localization(__file__, 1252, 18), '*', len_call_result_179301, int_179302)
        
        # Assigning a type to the variable 'maxiter' (line 1252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1252, 8), 'maxiter', result_mul_179303)

        if more_types_in_union_179297:
            # SSA join for if statement (line 1251)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Tuple (line 1253):
    
    # Assigning a Subscript to a Name (line 1253):
    
    # Obtaining the type of the subscript
    int_179304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1253, 4), 'int')
    
    # Call to wrap_function(...): (line 1253)
    # Processing the call arguments (line 1253)
    # Getting the type of 'f' (line 1253)
    f_179306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 34), 'f', False)
    # Getting the type of 'args' (line 1253)
    args_179307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 37), 'args', False)
    # Processing the call keyword arguments (line 1253)
    kwargs_179308 = {}
    # Getting the type of 'wrap_function' (line 1253)
    wrap_function_179305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 20), 'wrap_function', False)
    # Calling wrap_function(args, kwargs) (line 1253)
    wrap_function_call_result_179309 = invoke(stypy.reporting.localization.Localization(__file__, 1253, 20), wrap_function_179305, *[f_179306, args_179307], **kwargs_179308)
    
    # Obtaining the member '__getitem__' of a type (line 1253)
    getitem___179310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1253, 4), wrap_function_call_result_179309, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1253)
    subscript_call_result_179311 = invoke(stypy.reporting.localization.Localization(__file__, 1253, 4), getitem___179310, int_179304)
    
    # Assigning a type to the variable 'tuple_var_assignment_176628' (line 1253)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1253, 4), 'tuple_var_assignment_176628', subscript_call_result_179311)
    
    # Assigning a Subscript to a Name (line 1253):
    
    # Obtaining the type of the subscript
    int_179312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1253, 4), 'int')
    
    # Call to wrap_function(...): (line 1253)
    # Processing the call arguments (line 1253)
    # Getting the type of 'f' (line 1253)
    f_179314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 34), 'f', False)
    # Getting the type of 'args' (line 1253)
    args_179315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 37), 'args', False)
    # Processing the call keyword arguments (line 1253)
    kwargs_179316 = {}
    # Getting the type of 'wrap_function' (line 1253)
    wrap_function_179313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 20), 'wrap_function', False)
    # Calling wrap_function(args, kwargs) (line 1253)
    wrap_function_call_result_179317 = invoke(stypy.reporting.localization.Localization(__file__, 1253, 20), wrap_function_179313, *[f_179314, args_179315], **kwargs_179316)
    
    # Obtaining the member '__getitem__' of a type (line 1253)
    getitem___179318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1253, 4), wrap_function_call_result_179317, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1253)
    subscript_call_result_179319 = invoke(stypy.reporting.localization.Localization(__file__, 1253, 4), getitem___179318, int_179312)
    
    # Assigning a type to the variable 'tuple_var_assignment_176629' (line 1253)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1253, 4), 'tuple_var_assignment_176629', subscript_call_result_179319)
    
    # Assigning a Name to a Name (line 1253):
    # Getting the type of 'tuple_var_assignment_176628' (line 1253)
    tuple_var_assignment_176628_179320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 4), 'tuple_var_assignment_176628')
    # Assigning a type to the variable 'func_calls' (line 1253)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1253, 4), 'func_calls', tuple_var_assignment_176628_179320)
    
    # Assigning a Name to a Name (line 1253):
    # Getting the type of 'tuple_var_assignment_176629' (line 1253)
    tuple_var_assignment_176629_179321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 4), 'tuple_var_assignment_176629')
    # Assigning a type to the variable 'f' (line 1253)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1253, 16), 'f', tuple_var_assignment_176629_179321)
    
    # Type idiom detected: calculating its left and rigth part (line 1254)
    # Getting the type of 'fprime' (line 1254)
    fprime_179322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 7), 'fprime')
    # Getting the type of 'None' (line 1254)
    None_179323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 17), 'None')
    
    (may_be_179324, more_types_in_union_179325) = may_be_none(fprime_179322, None_179323)

    if may_be_179324:

        if more_types_in_union_179325:
            # Runtime conditional SSA (line 1254)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Tuple (line 1255):
        
        # Assigning a Subscript to a Name (line 1255):
        
        # Obtaining the type of the subscript
        int_179326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1255, 8), 'int')
        
        # Call to wrap_function(...): (line 1255)
        # Processing the call arguments (line 1255)
        # Getting the type of 'approx_fprime' (line 1255)
        approx_fprime_179328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 45), 'approx_fprime', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1255)
        tuple_179329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1255, 61), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1255)
        # Adding element type (line 1255)
        # Getting the type of 'f' (line 1255)
        f_179330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 61), 'f', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1255, 61), tuple_179329, f_179330)
        # Adding element type (line 1255)
        # Getting the type of 'epsilon' (line 1255)
        epsilon_179331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 64), 'epsilon', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1255, 61), tuple_179329, epsilon_179331)
        
        # Processing the call keyword arguments (line 1255)
        kwargs_179332 = {}
        # Getting the type of 'wrap_function' (line 1255)
        wrap_function_179327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 31), 'wrap_function', False)
        # Calling wrap_function(args, kwargs) (line 1255)
        wrap_function_call_result_179333 = invoke(stypy.reporting.localization.Localization(__file__, 1255, 31), wrap_function_179327, *[approx_fprime_179328, tuple_179329], **kwargs_179332)
        
        # Obtaining the member '__getitem__' of a type (line 1255)
        getitem___179334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1255, 8), wrap_function_call_result_179333, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1255)
        subscript_call_result_179335 = invoke(stypy.reporting.localization.Localization(__file__, 1255, 8), getitem___179334, int_179326)
        
        # Assigning a type to the variable 'tuple_var_assignment_176630' (line 1255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1255, 8), 'tuple_var_assignment_176630', subscript_call_result_179335)
        
        # Assigning a Subscript to a Name (line 1255):
        
        # Obtaining the type of the subscript
        int_179336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1255, 8), 'int')
        
        # Call to wrap_function(...): (line 1255)
        # Processing the call arguments (line 1255)
        # Getting the type of 'approx_fprime' (line 1255)
        approx_fprime_179338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 45), 'approx_fprime', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1255)
        tuple_179339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1255, 61), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1255)
        # Adding element type (line 1255)
        # Getting the type of 'f' (line 1255)
        f_179340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 61), 'f', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1255, 61), tuple_179339, f_179340)
        # Adding element type (line 1255)
        # Getting the type of 'epsilon' (line 1255)
        epsilon_179341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 64), 'epsilon', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1255, 61), tuple_179339, epsilon_179341)
        
        # Processing the call keyword arguments (line 1255)
        kwargs_179342 = {}
        # Getting the type of 'wrap_function' (line 1255)
        wrap_function_179337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 31), 'wrap_function', False)
        # Calling wrap_function(args, kwargs) (line 1255)
        wrap_function_call_result_179343 = invoke(stypy.reporting.localization.Localization(__file__, 1255, 31), wrap_function_179337, *[approx_fprime_179338, tuple_179339], **kwargs_179342)
        
        # Obtaining the member '__getitem__' of a type (line 1255)
        getitem___179344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1255, 8), wrap_function_call_result_179343, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1255)
        subscript_call_result_179345 = invoke(stypy.reporting.localization.Localization(__file__, 1255, 8), getitem___179344, int_179336)
        
        # Assigning a type to the variable 'tuple_var_assignment_176631' (line 1255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1255, 8), 'tuple_var_assignment_176631', subscript_call_result_179345)
        
        # Assigning a Name to a Name (line 1255):
        # Getting the type of 'tuple_var_assignment_176630' (line 1255)
        tuple_var_assignment_176630_179346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 8), 'tuple_var_assignment_176630')
        # Assigning a type to the variable 'grad_calls' (line 1255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1255, 8), 'grad_calls', tuple_var_assignment_176630_179346)
        
        # Assigning a Name to a Name (line 1255):
        # Getting the type of 'tuple_var_assignment_176631' (line 1255)
        tuple_var_assignment_176631_179347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 8), 'tuple_var_assignment_176631')
        # Assigning a type to the variable 'myfprime' (line 1255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1255, 20), 'myfprime', tuple_var_assignment_176631_179347)

        if more_types_in_union_179325:
            # Runtime conditional SSA for else branch (line 1254)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_179324) or more_types_in_union_179325):
        
        # Assigning a Call to a Tuple (line 1257):
        
        # Assigning a Subscript to a Name (line 1257):
        
        # Obtaining the type of the subscript
        int_179348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1257, 8), 'int')
        
        # Call to wrap_function(...): (line 1257)
        # Processing the call arguments (line 1257)
        # Getting the type of 'fprime' (line 1257)
        fprime_179350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 45), 'fprime', False)
        # Getting the type of 'args' (line 1257)
        args_179351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 53), 'args', False)
        # Processing the call keyword arguments (line 1257)
        kwargs_179352 = {}
        # Getting the type of 'wrap_function' (line 1257)
        wrap_function_179349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 31), 'wrap_function', False)
        # Calling wrap_function(args, kwargs) (line 1257)
        wrap_function_call_result_179353 = invoke(stypy.reporting.localization.Localization(__file__, 1257, 31), wrap_function_179349, *[fprime_179350, args_179351], **kwargs_179352)
        
        # Obtaining the member '__getitem__' of a type (line 1257)
        getitem___179354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1257, 8), wrap_function_call_result_179353, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1257)
        subscript_call_result_179355 = invoke(stypy.reporting.localization.Localization(__file__, 1257, 8), getitem___179354, int_179348)
        
        # Assigning a type to the variable 'tuple_var_assignment_176632' (line 1257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1257, 8), 'tuple_var_assignment_176632', subscript_call_result_179355)
        
        # Assigning a Subscript to a Name (line 1257):
        
        # Obtaining the type of the subscript
        int_179356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1257, 8), 'int')
        
        # Call to wrap_function(...): (line 1257)
        # Processing the call arguments (line 1257)
        # Getting the type of 'fprime' (line 1257)
        fprime_179358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 45), 'fprime', False)
        # Getting the type of 'args' (line 1257)
        args_179359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 53), 'args', False)
        # Processing the call keyword arguments (line 1257)
        kwargs_179360 = {}
        # Getting the type of 'wrap_function' (line 1257)
        wrap_function_179357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 31), 'wrap_function', False)
        # Calling wrap_function(args, kwargs) (line 1257)
        wrap_function_call_result_179361 = invoke(stypy.reporting.localization.Localization(__file__, 1257, 31), wrap_function_179357, *[fprime_179358, args_179359], **kwargs_179360)
        
        # Obtaining the member '__getitem__' of a type (line 1257)
        getitem___179362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1257, 8), wrap_function_call_result_179361, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1257)
        subscript_call_result_179363 = invoke(stypy.reporting.localization.Localization(__file__, 1257, 8), getitem___179362, int_179356)
        
        # Assigning a type to the variable 'tuple_var_assignment_176633' (line 1257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1257, 8), 'tuple_var_assignment_176633', subscript_call_result_179363)
        
        # Assigning a Name to a Name (line 1257):
        # Getting the type of 'tuple_var_assignment_176632' (line 1257)
        tuple_var_assignment_176632_179364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 8), 'tuple_var_assignment_176632')
        # Assigning a type to the variable 'grad_calls' (line 1257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1257, 8), 'grad_calls', tuple_var_assignment_176632_179364)
        
        # Assigning a Name to a Name (line 1257):
        # Getting the type of 'tuple_var_assignment_176633' (line 1257)
        tuple_var_assignment_176633_179365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 8), 'tuple_var_assignment_176633')
        # Assigning a type to the variable 'myfprime' (line 1257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1257, 20), 'myfprime', tuple_var_assignment_176633_179365)

        if (may_be_179324 and more_types_in_union_179325):
            # SSA join for if statement (line 1254)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1258):
    
    # Assigning a Call to a Name (line 1258):
    
    # Call to myfprime(...): (line 1258)
    # Processing the call arguments (line 1258)
    # Getting the type of 'x0' (line 1258)
    x0_179367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 19), 'x0', False)
    # Processing the call keyword arguments (line 1258)
    kwargs_179368 = {}
    # Getting the type of 'myfprime' (line 1258)
    myfprime_179366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 10), 'myfprime', False)
    # Calling myfprime(args, kwargs) (line 1258)
    myfprime_call_result_179369 = invoke(stypy.reporting.localization.Localization(__file__, 1258, 10), myfprime_179366, *[x0_179367], **kwargs_179368)
    
    # Assigning a type to the variable 'gfk' (line 1258)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1258, 4), 'gfk', myfprime_call_result_179369)
    
    # Assigning a Num to a Name (line 1259):
    
    # Assigning a Num to a Name (line 1259):
    int_179370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1259, 8), 'int')
    # Assigning a type to the variable 'k' (line 1259)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1259, 4), 'k', int_179370)
    
    # Assigning a Name to a Name (line 1260):
    
    # Assigning a Name to a Name (line 1260):
    # Getting the type of 'x0' (line 1260)
    x0_179371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 9), 'x0')
    # Assigning a type to the variable 'xk' (line 1260)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1260, 4), 'xk', x0_179371)
    
    # Assigning a Call to a Name (line 1263):
    
    # Assigning a Call to a Name (line 1263):
    
    # Call to f(...): (line 1263)
    # Processing the call arguments (line 1263)
    # Getting the type of 'xk' (line 1263)
    xk_179373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 17), 'xk', False)
    # Processing the call keyword arguments (line 1263)
    kwargs_179374 = {}
    # Getting the type of 'f' (line 1263)
    f_179372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 15), 'f', False)
    # Calling f(args, kwargs) (line 1263)
    f_call_result_179375 = invoke(stypy.reporting.localization.Localization(__file__, 1263, 15), f_179372, *[xk_179373], **kwargs_179374)
    
    # Assigning a type to the variable 'old_fval' (line 1263)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1263, 4), 'old_fval', f_call_result_179375)
    
    # Assigning a BinOp to a Name (line 1264):
    
    # Assigning a BinOp to a Name (line 1264):
    # Getting the type of 'old_fval' (line 1264)
    old_fval_179376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 19), 'old_fval')
    
    # Call to norm(...): (line 1264)
    # Processing the call arguments (line 1264)
    # Getting the type of 'gfk' (line 1264)
    gfk_179380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 45), 'gfk', False)
    # Processing the call keyword arguments (line 1264)
    kwargs_179381 = {}
    # Getting the type of 'np' (line 1264)
    np_179377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 30), 'np', False)
    # Obtaining the member 'linalg' of a type (line 1264)
    linalg_179378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1264, 30), np_179377, 'linalg')
    # Obtaining the member 'norm' of a type (line 1264)
    norm_179379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1264, 30), linalg_179378, 'norm')
    # Calling norm(args, kwargs) (line 1264)
    norm_call_result_179382 = invoke(stypy.reporting.localization.Localization(__file__, 1264, 30), norm_179379, *[gfk_179380], **kwargs_179381)
    
    int_179383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1264, 52), 'int')
    # Applying the binary operator 'div' (line 1264)
    result_div_179384 = python_operator(stypy.reporting.localization.Localization(__file__, 1264, 30), 'div', norm_call_result_179382, int_179383)
    
    # Applying the binary operator '+' (line 1264)
    result_add_179385 = python_operator(stypy.reporting.localization.Localization(__file__, 1264, 19), '+', old_fval_179376, result_div_179384)
    
    # Assigning a type to the variable 'old_old_fval' (line 1264)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1264, 4), 'old_old_fval', result_add_179385)
    
    # Getting the type of 'retall' (line 1266)
    retall_179386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 7), 'retall')
    # Testing the type of an if condition (line 1266)
    if_condition_179387 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1266, 4), retall_179386)
    # Assigning a type to the variable 'if_condition_179387' (line 1266)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1266, 4), 'if_condition_179387', if_condition_179387)
    # SSA begins for if statement (line 1266)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a List to a Name (line 1267):
    
    # Assigning a List to a Name (line 1267):
    
    # Obtaining an instance of the builtin type 'list' (line 1267)
    list_179388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1267, 18), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1267)
    # Adding element type (line 1267)
    # Getting the type of 'xk' (line 1267)
    xk_179389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 19), 'xk')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1267, 18), list_179388, xk_179389)
    
    # Assigning a type to the variable 'allvecs' (line 1267)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1267, 8), 'allvecs', list_179388)
    # SSA join for if statement (line 1266)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 1268):
    
    # Assigning a Num to a Name (line 1268):
    int_179390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1268, 15), 'int')
    # Assigning a type to the variable 'warnflag' (line 1268)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1268, 4), 'warnflag', int_179390)
    
    # Assigning a UnaryOp to a Name (line 1269):
    
    # Assigning a UnaryOp to a Name (line 1269):
    
    # Getting the type of 'gfk' (line 1269)
    gfk_179391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 10), 'gfk')
    # Applying the 'usub' unary operator (line 1269)
    result___neg___179392 = python_operator(stypy.reporting.localization.Localization(__file__, 1269, 9), 'usub', gfk_179391)
    
    # Assigning a type to the variable 'pk' (line 1269)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 4), 'pk', result___neg___179392)
    
    # Assigning a Call to a Name (line 1270):
    
    # Assigning a Call to a Name (line 1270):
    
    # Call to vecnorm(...): (line 1270)
    # Processing the call arguments (line 1270)
    # Getting the type of 'gfk' (line 1270)
    gfk_179394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 20), 'gfk', False)
    # Processing the call keyword arguments (line 1270)
    # Getting the type of 'norm' (line 1270)
    norm_179395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 29), 'norm', False)
    keyword_179396 = norm_179395
    kwargs_179397 = {'ord': keyword_179396}
    # Getting the type of 'vecnorm' (line 1270)
    vecnorm_179393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 12), 'vecnorm', False)
    # Calling vecnorm(args, kwargs) (line 1270)
    vecnorm_call_result_179398 = invoke(stypy.reporting.localization.Localization(__file__, 1270, 12), vecnorm_179393, *[gfk_179394], **kwargs_179397)
    
    # Assigning a type to the variable 'gnorm' (line 1270)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1270, 4), 'gnorm', vecnorm_call_result_179398)
    
    # Assigning a Num to a Name (line 1272):
    
    # Assigning a Num to a Name (line 1272):
    float_179399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1272, 14), 'float')
    # Assigning a type to the variable 'sigma_3' (line 1272)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1272, 4), 'sigma_3', float_179399)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'gnorm' (line 1274)
    gnorm_179400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1274, 11), 'gnorm')
    # Getting the type of 'gtol' (line 1274)
    gtol_179401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1274, 19), 'gtol')
    # Applying the binary operator '>' (line 1274)
    result_gt_179402 = python_operator(stypy.reporting.localization.Localization(__file__, 1274, 11), '>', gnorm_179400, gtol_179401)
    
    
    # Getting the type of 'k' (line 1274)
    k_179403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1274, 30), 'k')
    # Getting the type of 'maxiter' (line 1274)
    maxiter_179404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1274, 34), 'maxiter')
    # Applying the binary operator '<' (line 1274)
    result_lt_179405 = python_operator(stypy.reporting.localization.Localization(__file__, 1274, 30), '<', k_179403, maxiter_179404)
    
    # Applying the binary operator 'and' (line 1274)
    result_and_keyword_179406 = python_operator(stypy.reporting.localization.Localization(__file__, 1274, 10), 'and', result_gt_179402, result_lt_179405)
    
    # Testing the type of an if condition (line 1274)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1274, 4), result_and_keyword_179406)
    # SSA begins for while statement (line 1274)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a Call to a Name (line 1275):
    
    # Assigning a Call to a Name (line 1275):
    
    # Call to dot(...): (line 1275)
    # Processing the call arguments (line 1275)
    # Getting the type of 'gfk' (line 1275)
    gfk_179409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 27), 'gfk', False)
    # Getting the type of 'gfk' (line 1275)
    gfk_179410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 32), 'gfk', False)
    # Processing the call keyword arguments (line 1275)
    kwargs_179411 = {}
    # Getting the type of 'numpy' (line 1275)
    numpy_179407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 17), 'numpy', False)
    # Obtaining the member 'dot' of a type (line 1275)
    dot_179408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1275, 17), numpy_179407, 'dot')
    # Calling dot(args, kwargs) (line 1275)
    dot_call_result_179412 = invoke(stypy.reporting.localization.Localization(__file__, 1275, 17), dot_179408, *[gfk_179409, gfk_179410], **kwargs_179411)
    
    # Assigning a type to the variable 'deltak' (line 1275)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1275, 8), 'deltak', dot_call_result_179412)
    
    # Assigning a List to a Name (line 1277):
    
    # Assigning a List to a Name (line 1277):
    
    # Obtaining an instance of the builtin type 'list' (line 1277)
    list_179413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1277, 22), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1277)
    # Adding element type (line 1277)
    # Getting the type of 'None' (line 1277)
    None_179414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 23), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1277, 22), list_179413, None_179414)
    
    # Assigning a type to the variable 'cached_step' (line 1277)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1277, 8), 'cached_step', list_179413)

    @norecursion
    def polak_ribiere_powell_step(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1279)
        None_179415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1279, 51), 'None')
        defaults = [None_179415]
        # Create a new context for function 'polak_ribiere_powell_step'
        module_type_store = module_type_store.open_function_context('polak_ribiere_powell_step', 1279, 8, False)
        
        # Passed parameters checking function
        polak_ribiere_powell_step.stypy_localization = localization
        polak_ribiere_powell_step.stypy_type_of_self = None
        polak_ribiere_powell_step.stypy_type_store = module_type_store
        polak_ribiere_powell_step.stypy_function_name = 'polak_ribiere_powell_step'
        polak_ribiere_powell_step.stypy_param_names_list = ['alpha', 'gfkp1']
        polak_ribiere_powell_step.stypy_varargs_param_name = None
        polak_ribiere_powell_step.stypy_kwargs_param_name = None
        polak_ribiere_powell_step.stypy_call_defaults = defaults
        polak_ribiere_powell_step.stypy_call_varargs = varargs
        polak_ribiere_powell_step.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'polak_ribiere_powell_step', ['alpha', 'gfkp1'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'polak_ribiere_powell_step', localization, ['alpha', 'gfkp1'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'polak_ribiere_powell_step(...)' code ##################

        
        # Assigning a BinOp to a Name (line 1280):
        
        # Assigning a BinOp to a Name (line 1280):
        # Getting the type of 'xk' (line 1280)
        xk_179416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 19), 'xk')
        # Getting the type of 'alpha' (line 1280)
        alpha_179417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 24), 'alpha')
        # Getting the type of 'pk' (line 1280)
        pk_179418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 32), 'pk')
        # Applying the binary operator '*' (line 1280)
        result_mul_179419 = python_operator(stypy.reporting.localization.Localization(__file__, 1280, 24), '*', alpha_179417, pk_179418)
        
        # Applying the binary operator '+' (line 1280)
        result_add_179420 = python_operator(stypy.reporting.localization.Localization(__file__, 1280, 19), '+', xk_179416, result_mul_179419)
        
        # Assigning a type to the variable 'xkp1' (line 1280)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1280, 12), 'xkp1', result_add_179420)
        
        # Type idiom detected: calculating its left and rigth part (line 1281)
        # Getting the type of 'gfkp1' (line 1281)
        gfkp1_179421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 15), 'gfkp1')
        # Getting the type of 'None' (line 1281)
        None_179422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 24), 'None')
        
        (may_be_179423, more_types_in_union_179424) = may_be_none(gfkp1_179421, None_179422)

        if may_be_179423:

            if more_types_in_union_179424:
                # Runtime conditional SSA (line 1281)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1282):
            
            # Assigning a Call to a Name (line 1282):
            
            # Call to myfprime(...): (line 1282)
            # Processing the call arguments (line 1282)
            # Getting the type of 'xkp1' (line 1282)
            xkp1_179426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 33), 'xkp1', False)
            # Processing the call keyword arguments (line 1282)
            kwargs_179427 = {}
            # Getting the type of 'myfprime' (line 1282)
            myfprime_179425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 24), 'myfprime', False)
            # Calling myfprime(args, kwargs) (line 1282)
            myfprime_call_result_179428 = invoke(stypy.reporting.localization.Localization(__file__, 1282, 24), myfprime_179425, *[xkp1_179426], **kwargs_179427)
            
            # Assigning a type to the variable 'gfkp1' (line 1282)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1282, 16), 'gfkp1', myfprime_call_result_179428)

            if more_types_in_union_179424:
                # SSA join for if statement (line 1281)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a BinOp to a Name (line 1283):
        
        # Assigning a BinOp to a Name (line 1283):
        # Getting the type of 'gfkp1' (line 1283)
        gfkp1_179429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 17), 'gfkp1')
        # Getting the type of 'gfk' (line 1283)
        gfk_179430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 25), 'gfk')
        # Applying the binary operator '-' (line 1283)
        result_sub_179431 = python_operator(stypy.reporting.localization.Localization(__file__, 1283, 17), '-', gfkp1_179429, gfk_179430)
        
        # Assigning a type to the variable 'yk' (line 1283)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1283, 12), 'yk', result_sub_179431)
        
        # Assigning a Call to a Name (line 1284):
        
        # Assigning a Call to a Name (line 1284):
        
        # Call to max(...): (line 1284)
        # Processing the call arguments (line 1284)
        int_179433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1284, 25), 'int')
        
        # Call to dot(...): (line 1284)
        # Processing the call arguments (line 1284)
        # Getting the type of 'yk' (line 1284)
        yk_179436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 38), 'yk', False)
        # Getting the type of 'gfkp1' (line 1284)
        gfkp1_179437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 42), 'gfkp1', False)
        # Processing the call keyword arguments (line 1284)
        kwargs_179438 = {}
        # Getting the type of 'numpy' (line 1284)
        numpy_179434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 28), 'numpy', False)
        # Obtaining the member 'dot' of a type (line 1284)
        dot_179435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1284, 28), numpy_179434, 'dot')
        # Calling dot(args, kwargs) (line 1284)
        dot_call_result_179439 = invoke(stypy.reporting.localization.Localization(__file__, 1284, 28), dot_179435, *[yk_179436, gfkp1_179437], **kwargs_179438)
        
        # Getting the type of 'deltak' (line 1284)
        deltak_179440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 51), 'deltak', False)
        # Applying the binary operator 'div' (line 1284)
        result_div_179441 = python_operator(stypy.reporting.localization.Localization(__file__, 1284, 28), 'div', dot_call_result_179439, deltak_179440)
        
        # Processing the call keyword arguments (line 1284)
        kwargs_179442 = {}
        # Getting the type of 'max' (line 1284)
        max_179432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 21), 'max', False)
        # Calling max(args, kwargs) (line 1284)
        max_call_result_179443 = invoke(stypy.reporting.localization.Localization(__file__, 1284, 21), max_179432, *[int_179433, result_div_179441], **kwargs_179442)
        
        # Assigning a type to the variable 'beta_k' (line 1284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1284, 12), 'beta_k', max_call_result_179443)
        
        # Assigning a BinOp to a Name (line 1285):
        
        # Assigning a BinOp to a Name (line 1285):
        
        # Getting the type of 'gfkp1' (line 1285)
        gfkp1_179444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 20), 'gfkp1')
        # Applying the 'usub' unary operator (line 1285)
        result___neg___179445 = python_operator(stypy.reporting.localization.Localization(__file__, 1285, 19), 'usub', gfkp1_179444)
        
        # Getting the type of 'beta_k' (line 1285)
        beta_k_179446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 28), 'beta_k')
        # Getting the type of 'pk' (line 1285)
        pk_179447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 37), 'pk')
        # Applying the binary operator '*' (line 1285)
        result_mul_179448 = python_operator(stypy.reporting.localization.Localization(__file__, 1285, 28), '*', beta_k_179446, pk_179447)
        
        # Applying the binary operator '+' (line 1285)
        result_add_179449 = python_operator(stypy.reporting.localization.Localization(__file__, 1285, 19), '+', result___neg___179445, result_mul_179448)
        
        # Assigning a type to the variable 'pkp1' (line 1285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1285, 12), 'pkp1', result_add_179449)
        
        # Assigning a Call to a Name (line 1286):
        
        # Assigning a Call to a Name (line 1286):
        
        # Call to vecnorm(...): (line 1286)
        # Processing the call arguments (line 1286)
        # Getting the type of 'gfkp1' (line 1286)
        gfkp1_179451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 28), 'gfkp1', False)
        # Processing the call keyword arguments (line 1286)
        # Getting the type of 'norm' (line 1286)
        norm_179452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 39), 'norm', False)
        keyword_179453 = norm_179452
        kwargs_179454 = {'ord': keyword_179453}
        # Getting the type of 'vecnorm' (line 1286)
        vecnorm_179450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 20), 'vecnorm', False)
        # Calling vecnorm(args, kwargs) (line 1286)
        vecnorm_call_result_179455 = invoke(stypy.reporting.localization.Localization(__file__, 1286, 20), vecnorm_179450, *[gfkp1_179451], **kwargs_179454)
        
        # Assigning a type to the variable 'gnorm' (line 1286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1286, 12), 'gnorm', vecnorm_call_result_179455)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1287)
        tuple_179456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1287, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1287)
        # Adding element type (line 1287)
        # Getting the type of 'alpha' (line 1287)
        alpha_179457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 20), 'alpha')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1287, 20), tuple_179456, alpha_179457)
        # Adding element type (line 1287)
        # Getting the type of 'xkp1' (line 1287)
        xkp1_179458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 27), 'xkp1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1287, 20), tuple_179456, xkp1_179458)
        # Adding element type (line 1287)
        # Getting the type of 'pkp1' (line 1287)
        pkp1_179459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 33), 'pkp1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1287, 20), tuple_179456, pkp1_179459)
        # Adding element type (line 1287)
        # Getting the type of 'gfkp1' (line 1287)
        gfkp1_179460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 39), 'gfkp1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1287, 20), tuple_179456, gfkp1_179460)
        # Adding element type (line 1287)
        # Getting the type of 'gnorm' (line 1287)
        gnorm_179461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 46), 'gnorm')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1287, 20), tuple_179456, gnorm_179461)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1287)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1287, 12), 'stypy_return_type', tuple_179456)
        
        # ################# End of 'polak_ribiere_powell_step(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'polak_ribiere_powell_step' in the type store
        # Getting the type of 'stypy_return_type' (line 1279)
        stypy_return_type_179462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1279, 8), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_179462)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'polak_ribiere_powell_step'
        return stypy_return_type_179462

    # Assigning a type to the variable 'polak_ribiere_powell_step' (line 1279)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1279, 8), 'polak_ribiere_powell_step', polak_ribiere_powell_step)

    @norecursion
    def descent_condition(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'descent_condition'
        module_type_store = module_type_store.open_function_context('descent_condition', 1289, 8, False)
        
        # Passed parameters checking function
        descent_condition.stypy_localization = localization
        descent_condition.stypy_type_of_self = None
        descent_condition.stypy_type_store = module_type_store
        descent_condition.stypy_function_name = 'descent_condition'
        descent_condition.stypy_param_names_list = ['alpha', 'xkp1', 'fp1', 'gfkp1']
        descent_condition.stypy_varargs_param_name = None
        descent_condition.stypy_kwargs_param_name = None
        descent_condition.stypy_call_defaults = defaults
        descent_condition.stypy_call_varargs = varargs
        descent_condition.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'descent_condition', ['alpha', 'xkp1', 'fp1', 'gfkp1'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'descent_condition', localization, ['alpha', 'xkp1', 'fp1', 'gfkp1'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'descent_condition(...)' code ##################

        
        # Assigning a Call to a Subscript (line 1296):
        
        # Assigning a Call to a Subscript (line 1296):
        
        # Call to polak_ribiere_powell_step(...): (line 1296)
        # Processing the call arguments (line 1296)
        # Getting the type of 'alpha' (line 1296)
        alpha_179464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 55), 'alpha', False)
        # Getting the type of 'gfkp1' (line 1296)
        gfkp1_179465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 62), 'gfkp1', False)
        # Processing the call keyword arguments (line 1296)
        kwargs_179466 = {}
        # Getting the type of 'polak_ribiere_powell_step' (line 1296)
        polak_ribiere_powell_step_179463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 29), 'polak_ribiere_powell_step', False)
        # Calling polak_ribiere_powell_step(args, kwargs) (line 1296)
        polak_ribiere_powell_step_call_result_179467 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 29), polak_ribiere_powell_step_179463, *[alpha_179464, gfkp1_179465], **kwargs_179466)
        
        # Getting the type of 'cached_step' (line 1296)
        cached_step_179468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 12), 'cached_step')
        slice_179469 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1296, 12), None, None, None)
        # Storing an element on a container (line 1296)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1296, 12), cached_step_179468, (slice_179469, polak_ribiere_powell_step_call_result_179467))
        
        # Assigning a Name to a Tuple (line 1297):
        
        # Assigning a Subscript to a Name (line 1297):
        
        # Obtaining the type of the subscript
        int_179470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, 12), 'int')
        # Getting the type of 'cached_step' (line 1297)
        cached_step_179471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 40), 'cached_step')
        # Obtaining the member '__getitem__' of a type (line 1297)
        getitem___179472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1297, 12), cached_step_179471, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1297)
        subscript_call_result_179473 = invoke(stypy.reporting.localization.Localization(__file__, 1297, 12), getitem___179472, int_179470)
        
        # Assigning a type to the variable 'tuple_var_assignment_176634' (line 1297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 12), 'tuple_var_assignment_176634', subscript_call_result_179473)
        
        # Assigning a Subscript to a Name (line 1297):
        
        # Obtaining the type of the subscript
        int_179474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, 12), 'int')
        # Getting the type of 'cached_step' (line 1297)
        cached_step_179475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 40), 'cached_step')
        # Obtaining the member '__getitem__' of a type (line 1297)
        getitem___179476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1297, 12), cached_step_179475, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1297)
        subscript_call_result_179477 = invoke(stypy.reporting.localization.Localization(__file__, 1297, 12), getitem___179476, int_179474)
        
        # Assigning a type to the variable 'tuple_var_assignment_176635' (line 1297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 12), 'tuple_var_assignment_176635', subscript_call_result_179477)
        
        # Assigning a Subscript to a Name (line 1297):
        
        # Obtaining the type of the subscript
        int_179478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, 12), 'int')
        # Getting the type of 'cached_step' (line 1297)
        cached_step_179479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 40), 'cached_step')
        # Obtaining the member '__getitem__' of a type (line 1297)
        getitem___179480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1297, 12), cached_step_179479, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1297)
        subscript_call_result_179481 = invoke(stypy.reporting.localization.Localization(__file__, 1297, 12), getitem___179480, int_179478)
        
        # Assigning a type to the variable 'tuple_var_assignment_176636' (line 1297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 12), 'tuple_var_assignment_176636', subscript_call_result_179481)
        
        # Assigning a Subscript to a Name (line 1297):
        
        # Obtaining the type of the subscript
        int_179482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, 12), 'int')
        # Getting the type of 'cached_step' (line 1297)
        cached_step_179483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 40), 'cached_step')
        # Obtaining the member '__getitem__' of a type (line 1297)
        getitem___179484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1297, 12), cached_step_179483, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1297)
        subscript_call_result_179485 = invoke(stypy.reporting.localization.Localization(__file__, 1297, 12), getitem___179484, int_179482)
        
        # Assigning a type to the variable 'tuple_var_assignment_176637' (line 1297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 12), 'tuple_var_assignment_176637', subscript_call_result_179485)
        
        # Assigning a Subscript to a Name (line 1297):
        
        # Obtaining the type of the subscript
        int_179486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, 12), 'int')
        # Getting the type of 'cached_step' (line 1297)
        cached_step_179487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 40), 'cached_step')
        # Obtaining the member '__getitem__' of a type (line 1297)
        getitem___179488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1297, 12), cached_step_179487, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1297)
        subscript_call_result_179489 = invoke(stypy.reporting.localization.Localization(__file__, 1297, 12), getitem___179488, int_179486)
        
        # Assigning a type to the variable 'tuple_var_assignment_176638' (line 1297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 12), 'tuple_var_assignment_176638', subscript_call_result_179489)
        
        # Assigning a Name to a Name (line 1297):
        # Getting the type of 'tuple_var_assignment_176634' (line 1297)
        tuple_var_assignment_176634_179490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 12), 'tuple_var_assignment_176634')
        # Assigning a type to the variable 'alpha' (line 1297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 12), 'alpha', tuple_var_assignment_176634_179490)
        
        # Assigning a Name to a Name (line 1297):
        # Getting the type of 'tuple_var_assignment_176635' (line 1297)
        tuple_var_assignment_176635_179491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 12), 'tuple_var_assignment_176635')
        # Assigning a type to the variable 'xk' (line 1297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 19), 'xk', tuple_var_assignment_176635_179491)
        
        # Assigning a Name to a Name (line 1297):
        # Getting the type of 'tuple_var_assignment_176636' (line 1297)
        tuple_var_assignment_176636_179492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 12), 'tuple_var_assignment_176636')
        # Assigning a type to the variable 'pk' (line 1297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 23), 'pk', tuple_var_assignment_176636_179492)
        
        # Assigning a Name to a Name (line 1297):
        # Getting the type of 'tuple_var_assignment_176637' (line 1297)
        tuple_var_assignment_176637_179493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 12), 'tuple_var_assignment_176637')
        # Assigning a type to the variable 'gfk' (line 1297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 27), 'gfk', tuple_var_assignment_176637_179493)
        
        # Assigning a Name to a Name (line 1297):
        # Getting the type of 'tuple_var_assignment_176638' (line 1297)
        tuple_var_assignment_176638_179494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 12), 'tuple_var_assignment_176638')
        # Assigning a type to the variable 'gnorm' (line 1297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 32), 'gnorm', tuple_var_assignment_176638_179494)
        
        
        # Getting the type of 'gnorm' (line 1300)
        gnorm_179495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 15), 'gnorm')
        # Getting the type of 'gtol' (line 1300)
        gtol_179496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 24), 'gtol')
        # Applying the binary operator '<=' (line 1300)
        result_le_179497 = python_operator(stypy.reporting.localization.Localization(__file__, 1300, 15), '<=', gnorm_179495, gtol_179496)
        
        # Testing the type of an if condition (line 1300)
        if_condition_179498 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1300, 12), result_le_179497)
        # Assigning a type to the variable 'if_condition_179498' (line 1300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1300, 12), 'if_condition_179498', if_condition_179498)
        # SSA begins for if statement (line 1300)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'True' (line 1301)
        True_179499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 23), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 1301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1301, 16), 'stypy_return_type', True_179499)
        # SSA join for if statement (line 1300)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to dot(...): (line 1304)
        # Processing the call arguments (line 1304)
        # Getting the type of 'pk' (line 1304)
        pk_179502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 29), 'pk', False)
        # Getting the type of 'gfk' (line 1304)
        gfk_179503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 33), 'gfk', False)
        # Processing the call keyword arguments (line 1304)
        kwargs_179504 = {}
        # Getting the type of 'numpy' (line 1304)
        numpy_179500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 19), 'numpy', False)
        # Obtaining the member 'dot' of a type (line 1304)
        dot_179501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1304, 19), numpy_179500, 'dot')
        # Calling dot(args, kwargs) (line 1304)
        dot_call_result_179505 = invoke(stypy.reporting.localization.Localization(__file__, 1304, 19), dot_179501, *[pk_179502, gfk_179503], **kwargs_179504)
        
        
        # Getting the type of 'sigma_3' (line 1304)
        sigma_3_179506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 42), 'sigma_3')
        # Applying the 'usub' unary operator (line 1304)
        result___neg___179507 = python_operator(stypy.reporting.localization.Localization(__file__, 1304, 41), 'usub', sigma_3_179506)
        
        
        # Call to dot(...): (line 1304)
        # Processing the call arguments (line 1304)
        # Getting the type of 'gfk' (line 1304)
        gfk_179510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 62), 'gfk', False)
        # Getting the type of 'gfk' (line 1304)
        gfk_179511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 67), 'gfk', False)
        # Processing the call keyword arguments (line 1304)
        kwargs_179512 = {}
        # Getting the type of 'numpy' (line 1304)
        numpy_179508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 52), 'numpy', False)
        # Obtaining the member 'dot' of a type (line 1304)
        dot_179509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1304, 52), numpy_179508, 'dot')
        # Calling dot(args, kwargs) (line 1304)
        dot_call_result_179513 = invoke(stypy.reporting.localization.Localization(__file__, 1304, 52), dot_179509, *[gfk_179510, gfk_179511], **kwargs_179512)
        
        # Applying the binary operator '*' (line 1304)
        result_mul_179514 = python_operator(stypy.reporting.localization.Localization(__file__, 1304, 41), '*', result___neg___179507, dot_call_result_179513)
        
        # Applying the binary operator '<=' (line 1304)
        result_le_179515 = python_operator(stypy.reporting.localization.Localization(__file__, 1304, 19), '<=', dot_call_result_179505, result_mul_179514)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 12), 'stypy_return_type', result_le_179515)
        
        # ################# End of 'descent_condition(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'descent_condition' in the type store
        # Getting the type of 'stypy_return_type' (line 1289)
        stypy_return_type_179516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 8), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_179516)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'descent_condition'
        return stypy_return_type_179516

    # Assigning a type to the variable 'descent_condition' (line 1289)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1289, 8), 'descent_condition', descent_condition)
    
    
    # SSA begins for try-except statement (line 1306)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Tuple (line 1307):
    
    # Assigning a Subscript to a Name (line 1307):
    
    # Obtaining the type of the subscript
    int_179517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1307, 12), 'int')
    
    # Call to _line_search_wolfe12(...): (line 1308)
    # Processing the call arguments (line 1308)
    # Getting the type of 'f' (line 1308)
    f_179519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 42), 'f', False)
    # Getting the type of 'myfprime' (line 1308)
    myfprime_179520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 45), 'myfprime', False)
    # Getting the type of 'xk' (line 1308)
    xk_179521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 55), 'xk', False)
    # Getting the type of 'pk' (line 1308)
    pk_179522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 59), 'pk', False)
    # Getting the type of 'gfk' (line 1308)
    gfk_179523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 63), 'gfk', False)
    # Getting the type of 'old_fval' (line 1308)
    old_fval_179524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 68), 'old_fval', False)
    # Getting the type of 'old_old_fval' (line 1309)
    old_old_fval_179525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 42), 'old_old_fval', False)
    # Processing the call keyword arguments (line 1308)
    float_179526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 59), 'float')
    keyword_179527 = float_179526
    float_179528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 69), 'float')
    keyword_179529 = float_179528
    float_179530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 82), 'float')
    keyword_179531 = float_179530
    # Getting the type of 'descent_condition' (line 1310)
    descent_condition_179532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 58), 'descent_condition', False)
    keyword_179533 = descent_condition_179532
    kwargs_179534 = {'c2': keyword_179527, 'extra_condition': keyword_179533, 'amin': keyword_179529, 'amax': keyword_179531}
    # Getting the type of '_line_search_wolfe12' (line 1308)
    _line_search_wolfe12_179518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 21), '_line_search_wolfe12', False)
    # Calling _line_search_wolfe12(args, kwargs) (line 1308)
    _line_search_wolfe12_call_result_179535 = invoke(stypy.reporting.localization.Localization(__file__, 1308, 21), _line_search_wolfe12_179518, *[f_179519, myfprime_179520, xk_179521, pk_179522, gfk_179523, old_fval_179524, old_old_fval_179525], **kwargs_179534)
    
    # Obtaining the member '__getitem__' of a type (line 1307)
    getitem___179536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1307, 12), _line_search_wolfe12_call_result_179535, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1307)
    subscript_call_result_179537 = invoke(stypy.reporting.localization.Localization(__file__, 1307, 12), getitem___179536, int_179517)
    
    # Assigning a type to the variable 'tuple_var_assignment_176639' (line 1307)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 12), 'tuple_var_assignment_176639', subscript_call_result_179537)
    
    # Assigning a Subscript to a Name (line 1307):
    
    # Obtaining the type of the subscript
    int_179538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1307, 12), 'int')
    
    # Call to _line_search_wolfe12(...): (line 1308)
    # Processing the call arguments (line 1308)
    # Getting the type of 'f' (line 1308)
    f_179540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 42), 'f', False)
    # Getting the type of 'myfprime' (line 1308)
    myfprime_179541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 45), 'myfprime', False)
    # Getting the type of 'xk' (line 1308)
    xk_179542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 55), 'xk', False)
    # Getting the type of 'pk' (line 1308)
    pk_179543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 59), 'pk', False)
    # Getting the type of 'gfk' (line 1308)
    gfk_179544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 63), 'gfk', False)
    # Getting the type of 'old_fval' (line 1308)
    old_fval_179545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 68), 'old_fval', False)
    # Getting the type of 'old_old_fval' (line 1309)
    old_old_fval_179546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 42), 'old_old_fval', False)
    # Processing the call keyword arguments (line 1308)
    float_179547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 59), 'float')
    keyword_179548 = float_179547
    float_179549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 69), 'float')
    keyword_179550 = float_179549
    float_179551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 82), 'float')
    keyword_179552 = float_179551
    # Getting the type of 'descent_condition' (line 1310)
    descent_condition_179553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 58), 'descent_condition', False)
    keyword_179554 = descent_condition_179553
    kwargs_179555 = {'c2': keyword_179548, 'extra_condition': keyword_179554, 'amin': keyword_179550, 'amax': keyword_179552}
    # Getting the type of '_line_search_wolfe12' (line 1308)
    _line_search_wolfe12_179539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 21), '_line_search_wolfe12', False)
    # Calling _line_search_wolfe12(args, kwargs) (line 1308)
    _line_search_wolfe12_call_result_179556 = invoke(stypy.reporting.localization.Localization(__file__, 1308, 21), _line_search_wolfe12_179539, *[f_179540, myfprime_179541, xk_179542, pk_179543, gfk_179544, old_fval_179545, old_old_fval_179546], **kwargs_179555)
    
    # Obtaining the member '__getitem__' of a type (line 1307)
    getitem___179557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1307, 12), _line_search_wolfe12_call_result_179556, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1307)
    subscript_call_result_179558 = invoke(stypy.reporting.localization.Localization(__file__, 1307, 12), getitem___179557, int_179538)
    
    # Assigning a type to the variable 'tuple_var_assignment_176640' (line 1307)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 12), 'tuple_var_assignment_176640', subscript_call_result_179558)
    
    # Assigning a Subscript to a Name (line 1307):
    
    # Obtaining the type of the subscript
    int_179559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1307, 12), 'int')
    
    # Call to _line_search_wolfe12(...): (line 1308)
    # Processing the call arguments (line 1308)
    # Getting the type of 'f' (line 1308)
    f_179561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 42), 'f', False)
    # Getting the type of 'myfprime' (line 1308)
    myfprime_179562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 45), 'myfprime', False)
    # Getting the type of 'xk' (line 1308)
    xk_179563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 55), 'xk', False)
    # Getting the type of 'pk' (line 1308)
    pk_179564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 59), 'pk', False)
    # Getting the type of 'gfk' (line 1308)
    gfk_179565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 63), 'gfk', False)
    # Getting the type of 'old_fval' (line 1308)
    old_fval_179566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 68), 'old_fval', False)
    # Getting the type of 'old_old_fval' (line 1309)
    old_old_fval_179567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 42), 'old_old_fval', False)
    # Processing the call keyword arguments (line 1308)
    float_179568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 59), 'float')
    keyword_179569 = float_179568
    float_179570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 69), 'float')
    keyword_179571 = float_179570
    float_179572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 82), 'float')
    keyword_179573 = float_179572
    # Getting the type of 'descent_condition' (line 1310)
    descent_condition_179574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 58), 'descent_condition', False)
    keyword_179575 = descent_condition_179574
    kwargs_179576 = {'c2': keyword_179569, 'extra_condition': keyword_179575, 'amin': keyword_179571, 'amax': keyword_179573}
    # Getting the type of '_line_search_wolfe12' (line 1308)
    _line_search_wolfe12_179560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 21), '_line_search_wolfe12', False)
    # Calling _line_search_wolfe12(args, kwargs) (line 1308)
    _line_search_wolfe12_call_result_179577 = invoke(stypy.reporting.localization.Localization(__file__, 1308, 21), _line_search_wolfe12_179560, *[f_179561, myfprime_179562, xk_179563, pk_179564, gfk_179565, old_fval_179566, old_old_fval_179567], **kwargs_179576)
    
    # Obtaining the member '__getitem__' of a type (line 1307)
    getitem___179578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1307, 12), _line_search_wolfe12_call_result_179577, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1307)
    subscript_call_result_179579 = invoke(stypy.reporting.localization.Localization(__file__, 1307, 12), getitem___179578, int_179559)
    
    # Assigning a type to the variable 'tuple_var_assignment_176641' (line 1307)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 12), 'tuple_var_assignment_176641', subscript_call_result_179579)
    
    # Assigning a Subscript to a Name (line 1307):
    
    # Obtaining the type of the subscript
    int_179580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1307, 12), 'int')
    
    # Call to _line_search_wolfe12(...): (line 1308)
    # Processing the call arguments (line 1308)
    # Getting the type of 'f' (line 1308)
    f_179582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 42), 'f', False)
    # Getting the type of 'myfprime' (line 1308)
    myfprime_179583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 45), 'myfprime', False)
    # Getting the type of 'xk' (line 1308)
    xk_179584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 55), 'xk', False)
    # Getting the type of 'pk' (line 1308)
    pk_179585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 59), 'pk', False)
    # Getting the type of 'gfk' (line 1308)
    gfk_179586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 63), 'gfk', False)
    # Getting the type of 'old_fval' (line 1308)
    old_fval_179587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 68), 'old_fval', False)
    # Getting the type of 'old_old_fval' (line 1309)
    old_old_fval_179588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 42), 'old_old_fval', False)
    # Processing the call keyword arguments (line 1308)
    float_179589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 59), 'float')
    keyword_179590 = float_179589
    float_179591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 69), 'float')
    keyword_179592 = float_179591
    float_179593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 82), 'float')
    keyword_179594 = float_179593
    # Getting the type of 'descent_condition' (line 1310)
    descent_condition_179595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 58), 'descent_condition', False)
    keyword_179596 = descent_condition_179595
    kwargs_179597 = {'c2': keyword_179590, 'extra_condition': keyword_179596, 'amin': keyword_179592, 'amax': keyword_179594}
    # Getting the type of '_line_search_wolfe12' (line 1308)
    _line_search_wolfe12_179581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 21), '_line_search_wolfe12', False)
    # Calling _line_search_wolfe12(args, kwargs) (line 1308)
    _line_search_wolfe12_call_result_179598 = invoke(stypy.reporting.localization.Localization(__file__, 1308, 21), _line_search_wolfe12_179581, *[f_179582, myfprime_179583, xk_179584, pk_179585, gfk_179586, old_fval_179587, old_old_fval_179588], **kwargs_179597)
    
    # Obtaining the member '__getitem__' of a type (line 1307)
    getitem___179599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1307, 12), _line_search_wolfe12_call_result_179598, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1307)
    subscript_call_result_179600 = invoke(stypy.reporting.localization.Localization(__file__, 1307, 12), getitem___179599, int_179580)
    
    # Assigning a type to the variable 'tuple_var_assignment_176642' (line 1307)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 12), 'tuple_var_assignment_176642', subscript_call_result_179600)
    
    # Assigning a Subscript to a Name (line 1307):
    
    # Obtaining the type of the subscript
    int_179601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1307, 12), 'int')
    
    # Call to _line_search_wolfe12(...): (line 1308)
    # Processing the call arguments (line 1308)
    # Getting the type of 'f' (line 1308)
    f_179603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 42), 'f', False)
    # Getting the type of 'myfprime' (line 1308)
    myfprime_179604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 45), 'myfprime', False)
    # Getting the type of 'xk' (line 1308)
    xk_179605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 55), 'xk', False)
    # Getting the type of 'pk' (line 1308)
    pk_179606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 59), 'pk', False)
    # Getting the type of 'gfk' (line 1308)
    gfk_179607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 63), 'gfk', False)
    # Getting the type of 'old_fval' (line 1308)
    old_fval_179608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 68), 'old_fval', False)
    # Getting the type of 'old_old_fval' (line 1309)
    old_old_fval_179609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 42), 'old_old_fval', False)
    # Processing the call keyword arguments (line 1308)
    float_179610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 59), 'float')
    keyword_179611 = float_179610
    float_179612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 69), 'float')
    keyword_179613 = float_179612
    float_179614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 82), 'float')
    keyword_179615 = float_179614
    # Getting the type of 'descent_condition' (line 1310)
    descent_condition_179616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 58), 'descent_condition', False)
    keyword_179617 = descent_condition_179616
    kwargs_179618 = {'c2': keyword_179611, 'extra_condition': keyword_179617, 'amin': keyword_179613, 'amax': keyword_179615}
    # Getting the type of '_line_search_wolfe12' (line 1308)
    _line_search_wolfe12_179602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 21), '_line_search_wolfe12', False)
    # Calling _line_search_wolfe12(args, kwargs) (line 1308)
    _line_search_wolfe12_call_result_179619 = invoke(stypy.reporting.localization.Localization(__file__, 1308, 21), _line_search_wolfe12_179602, *[f_179603, myfprime_179604, xk_179605, pk_179606, gfk_179607, old_fval_179608, old_old_fval_179609], **kwargs_179618)
    
    # Obtaining the member '__getitem__' of a type (line 1307)
    getitem___179620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1307, 12), _line_search_wolfe12_call_result_179619, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1307)
    subscript_call_result_179621 = invoke(stypy.reporting.localization.Localization(__file__, 1307, 12), getitem___179620, int_179601)
    
    # Assigning a type to the variable 'tuple_var_assignment_176643' (line 1307)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 12), 'tuple_var_assignment_176643', subscript_call_result_179621)
    
    # Assigning a Subscript to a Name (line 1307):
    
    # Obtaining the type of the subscript
    int_179622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1307, 12), 'int')
    
    # Call to _line_search_wolfe12(...): (line 1308)
    # Processing the call arguments (line 1308)
    # Getting the type of 'f' (line 1308)
    f_179624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 42), 'f', False)
    # Getting the type of 'myfprime' (line 1308)
    myfprime_179625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 45), 'myfprime', False)
    # Getting the type of 'xk' (line 1308)
    xk_179626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 55), 'xk', False)
    # Getting the type of 'pk' (line 1308)
    pk_179627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 59), 'pk', False)
    # Getting the type of 'gfk' (line 1308)
    gfk_179628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 63), 'gfk', False)
    # Getting the type of 'old_fval' (line 1308)
    old_fval_179629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 68), 'old_fval', False)
    # Getting the type of 'old_old_fval' (line 1309)
    old_old_fval_179630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 42), 'old_old_fval', False)
    # Processing the call keyword arguments (line 1308)
    float_179631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 59), 'float')
    keyword_179632 = float_179631
    float_179633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 69), 'float')
    keyword_179634 = float_179633
    float_179635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 82), 'float')
    keyword_179636 = float_179635
    # Getting the type of 'descent_condition' (line 1310)
    descent_condition_179637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 58), 'descent_condition', False)
    keyword_179638 = descent_condition_179637
    kwargs_179639 = {'c2': keyword_179632, 'extra_condition': keyword_179638, 'amin': keyword_179634, 'amax': keyword_179636}
    # Getting the type of '_line_search_wolfe12' (line 1308)
    _line_search_wolfe12_179623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 21), '_line_search_wolfe12', False)
    # Calling _line_search_wolfe12(args, kwargs) (line 1308)
    _line_search_wolfe12_call_result_179640 = invoke(stypy.reporting.localization.Localization(__file__, 1308, 21), _line_search_wolfe12_179623, *[f_179624, myfprime_179625, xk_179626, pk_179627, gfk_179628, old_fval_179629, old_old_fval_179630], **kwargs_179639)
    
    # Obtaining the member '__getitem__' of a type (line 1307)
    getitem___179641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1307, 12), _line_search_wolfe12_call_result_179640, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1307)
    subscript_call_result_179642 = invoke(stypy.reporting.localization.Localization(__file__, 1307, 12), getitem___179641, int_179622)
    
    # Assigning a type to the variable 'tuple_var_assignment_176644' (line 1307)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 12), 'tuple_var_assignment_176644', subscript_call_result_179642)
    
    # Assigning a Name to a Name (line 1307):
    # Getting the type of 'tuple_var_assignment_176639' (line 1307)
    tuple_var_assignment_176639_179643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 12), 'tuple_var_assignment_176639')
    # Assigning a type to the variable 'alpha_k' (line 1307)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 12), 'alpha_k', tuple_var_assignment_176639_179643)
    
    # Assigning a Name to a Name (line 1307):
    # Getting the type of 'tuple_var_assignment_176640' (line 1307)
    tuple_var_assignment_176640_179644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 12), 'tuple_var_assignment_176640')
    # Assigning a type to the variable 'fc' (line 1307)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 21), 'fc', tuple_var_assignment_176640_179644)
    
    # Assigning a Name to a Name (line 1307):
    # Getting the type of 'tuple_var_assignment_176641' (line 1307)
    tuple_var_assignment_176641_179645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 12), 'tuple_var_assignment_176641')
    # Assigning a type to the variable 'gc' (line 1307)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 25), 'gc', tuple_var_assignment_176641_179645)
    
    # Assigning a Name to a Name (line 1307):
    # Getting the type of 'tuple_var_assignment_176642' (line 1307)
    tuple_var_assignment_176642_179646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 12), 'tuple_var_assignment_176642')
    # Assigning a type to the variable 'old_fval' (line 1307)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 29), 'old_fval', tuple_var_assignment_176642_179646)
    
    # Assigning a Name to a Name (line 1307):
    # Getting the type of 'tuple_var_assignment_176643' (line 1307)
    tuple_var_assignment_176643_179647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 12), 'tuple_var_assignment_176643')
    # Assigning a type to the variable 'old_old_fval' (line 1307)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 39), 'old_old_fval', tuple_var_assignment_176643_179647)
    
    # Assigning a Name to a Name (line 1307):
    # Getting the type of 'tuple_var_assignment_176644' (line 1307)
    tuple_var_assignment_176644_179648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 12), 'tuple_var_assignment_176644')
    # Assigning a type to the variable 'gfkp1' (line 1307)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 53), 'gfkp1', tuple_var_assignment_176644_179648)
    # SSA branch for the except part of a try statement (line 1306)
    # SSA branch for the except '_LineSearchError' branch of a try statement (line 1306)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Num to a Name (line 1313):
    
    # Assigning a Num to a Name (line 1313):
    int_179649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1313, 23), 'int')
    # Assigning a type to the variable 'warnflag' (line 1313)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1313, 12), 'warnflag', int_179649)
    # SSA join for try-except statement (line 1306)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'alpha_k' (line 1317)
    alpha_k_179650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 11), 'alpha_k')
    
    # Obtaining the type of the subscript
    int_179651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1317, 34), 'int')
    # Getting the type of 'cached_step' (line 1317)
    cached_step_179652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 22), 'cached_step')
    # Obtaining the member '__getitem__' of a type (line 1317)
    getitem___179653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1317, 22), cached_step_179652, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1317)
    subscript_call_result_179654 = invoke(stypy.reporting.localization.Localization(__file__, 1317, 22), getitem___179653, int_179651)
    
    # Applying the binary operator '==' (line 1317)
    result_eq_179655 = python_operator(stypy.reporting.localization.Localization(__file__, 1317, 11), '==', alpha_k_179650, subscript_call_result_179654)
    
    # Testing the type of an if condition (line 1317)
    if_condition_179656 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1317, 8), result_eq_179655)
    # Assigning a type to the variable 'if_condition_179656' (line 1317)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1317, 8), 'if_condition_179656', if_condition_179656)
    # SSA begins for if statement (line 1317)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Tuple (line 1318):
    
    # Assigning a Subscript to a Name (line 1318):
    
    # Obtaining the type of the subscript
    int_179657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 12), 'int')
    # Getting the type of 'cached_step' (line 1318)
    cached_step_179658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 42), 'cached_step')
    # Obtaining the member '__getitem__' of a type (line 1318)
    getitem___179659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 12), cached_step_179658, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1318)
    subscript_call_result_179660 = invoke(stypy.reporting.localization.Localization(__file__, 1318, 12), getitem___179659, int_179657)
    
    # Assigning a type to the variable 'tuple_var_assignment_176645' (line 1318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1318, 12), 'tuple_var_assignment_176645', subscript_call_result_179660)
    
    # Assigning a Subscript to a Name (line 1318):
    
    # Obtaining the type of the subscript
    int_179661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 12), 'int')
    # Getting the type of 'cached_step' (line 1318)
    cached_step_179662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 42), 'cached_step')
    # Obtaining the member '__getitem__' of a type (line 1318)
    getitem___179663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 12), cached_step_179662, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1318)
    subscript_call_result_179664 = invoke(stypy.reporting.localization.Localization(__file__, 1318, 12), getitem___179663, int_179661)
    
    # Assigning a type to the variable 'tuple_var_assignment_176646' (line 1318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1318, 12), 'tuple_var_assignment_176646', subscript_call_result_179664)
    
    # Assigning a Subscript to a Name (line 1318):
    
    # Obtaining the type of the subscript
    int_179665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 12), 'int')
    # Getting the type of 'cached_step' (line 1318)
    cached_step_179666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 42), 'cached_step')
    # Obtaining the member '__getitem__' of a type (line 1318)
    getitem___179667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 12), cached_step_179666, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1318)
    subscript_call_result_179668 = invoke(stypy.reporting.localization.Localization(__file__, 1318, 12), getitem___179667, int_179665)
    
    # Assigning a type to the variable 'tuple_var_assignment_176647' (line 1318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1318, 12), 'tuple_var_assignment_176647', subscript_call_result_179668)
    
    # Assigning a Subscript to a Name (line 1318):
    
    # Obtaining the type of the subscript
    int_179669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 12), 'int')
    # Getting the type of 'cached_step' (line 1318)
    cached_step_179670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 42), 'cached_step')
    # Obtaining the member '__getitem__' of a type (line 1318)
    getitem___179671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 12), cached_step_179670, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1318)
    subscript_call_result_179672 = invoke(stypy.reporting.localization.Localization(__file__, 1318, 12), getitem___179671, int_179669)
    
    # Assigning a type to the variable 'tuple_var_assignment_176648' (line 1318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1318, 12), 'tuple_var_assignment_176648', subscript_call_result_179672)
    
    # Assigning a Subscript to a Name (line 1318):
    
    # Obtaining the type of the subscript
    int_179673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 12), 'int')
    # Getting the type of 'cached_step' (line 1318)
    cached_step_179674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 42), 'cached_step')
    # Obtaining the member '__getitem__' of a type (line 1318)
    getitem___179675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 12), cached_step_179674, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1318)
    subscript_call_result_179676 = invoke(stypy.reporting.localization.Localization(__file__, 1318, 12), getitem___179675, int_179673)
    
    # Assigning a type to the variable 'tuple_var_assignment_176649' (line 1318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1318, 12), 'tuple_var_assignment_176649', subscript_call_result_179676)
    
    # Assigning a Name to a Name (line 1318):
    # Getting the type of 'tuple_var_assignment_176645' (line 1318)
    tuple_var_assignment_176645_179677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 12), 'tuple_var_assignment_176645')
    # Assigning a type to the variable 'alpha_k' (line 1318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1318, 12), 'alpha_k', tuple_var_assignment_176645_179677)
    
    # Assigning a Name to a Name (line 1318):
    # Getting the type of 'tuple_var_assignment_176646' (line 1318)
    tuple_var_assignment_176646_179678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 12), 'tuple_var_assignment_176646')
    # Assigning a type to the variable 'xk' (line 1318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1318, 21), 'xk', tuple_var_assignment_176646_179678)
    
    # Assigning a Name to a Name (line 1318):
    # Getting the type of 'tuple_var_assignment_176647' (line 1318)
    tuple_var_assignment_176647_179679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 12), 'tuple_var_assignment_176647')
    # Assigning a type to the variable 'pk' (line 1318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1318, 25), 'pk', tuple_var_assignment_176647_179679)
    
    # Assigning a Name to a Name (line 1318):
    # Getting the type of 'tuple_var_assignment_176648' (line 1318)
    tuple_var_assignment_176648_179680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 12), 'tuple_var_assignment_176648')
    # Assigning a type to the variable 'gfk' (line 1318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1318, 29), 'gfk', tuple_var_assignment_176648_179680)
    
    # Assigning a Name to a Name (line 1318):
    # Getting the type of 'tuple_var_assignment_176649' (line 1318)
    tuple_var_assignment_176649_179681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 12), 'tuple_var_assignment_176649')
    # Assigning a type to the variable 'gnorm' (line 1318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1318, 34), 'gnorm', tuple_var_assignment_176649_179681)
    # SSA branch for the else part of an if statement (line 1317)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Tuple (line 1320):
    
    # Assigning a Subscript to a Name (line 1320):
    
    # Obtaining the type of the subscript
    int_179682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1320, 12), 'int')
    
    # Call to polak_ribiere_powell_step(...): (line 1320)
    # Processing the call arguments (line 1320)
    # Getting the type of 'alpha_k' (line 1320)
    alpha_k_179684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 68), 'alpha_k', False)
    # Getting the type of 'gfkp1' (line 1320)
    gfkp1_179685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 77), 'gfkp1', False)
    # Processing the call keyword arguments (line 1320)
    kwargs_179686 = {}
    # Getting the type of 'polak_ribiere_powell_step' (line 1320)
    polak_ribiere_powell_step_179683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 42), 'polak_ribiere_powell_step', False)
    # Calling polak_ribiere_powell_step(args, kwargs) (line 1320)
    polak_ribiere_powell_step_call_result_179687 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 42), polak_ribiere_powell_step_179683, *[alpha_k_179684, gfkp1_179685], **kwargs_179686)
    
    # Obtaining the member '__getitem__' of a type (line 1320)
    getitem___179688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 12), polak_ribiere_powell_step_call_result_179687, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1320)
    subscript_call_result_179689 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 12), getitem___179688, int_179682)
    
    # Assigning a type to the variable 'tuple_var_assignment_176650' (line 1320)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 12), 'tuple_var_assignment_176650', subscript_call_result_179689)
    
    # Assigning a Subscript to a Name (line 1320):
    
    # Obtaining the type of the subscript
    int_179690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1320, 12), 'int')
    
    # Call to polak_ribiere_powell_step(...): (line 1320)
    # Processing the call arguments (line 1320)
    # Getting the type of 'alpha_k' (line 1320)
    alpha_k_179692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 68), 'alpha_k', False)
    # Getting the type of 'gfkp1' (line 1320)
    gfkp1_179693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 77), 'gfkp1', False)
    # Processing the call keyword arguments (line 1320)
    kwargs_179694 = {}
    # Getting the type of 'polak_ribiere_powell_step' (line 1320)
    polak_ribiere_powell_step_179691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 42), 'polak_ribiere_powell_step', False)
    # Calling polak_ribiere_powell_step(args, kwargs) (line 1320)
    polak_ribiere_powell_step_call_result_179695 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 42), polak_ribiere_powell_step_179691, *[alpha_k_179692, gfkp1_179693], **kwargs_179694)
    
    # Obtaining the member '__getitem__' of a type (line 1320)
    getitem___179696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 12), polak_ribiere_powell_step_call_result_179695, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1320)
    subscript_call_result_179697 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 12), getitem___179696, int_179690)
    
    # Assigning a type to the variable 'tuple_var_assignment_176651' (line 1320)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 12), 'tuple_var_assignment_176651', subscript_call_result_179697)
    
    # Assigning a Subscript to a Name (line 1320):
    
    # Obtaining the type of the subscript
    int_179698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1320, 12), 'int')
    
    # Call to polak_ribiere_powell_step(...): (line 1320)
    # Processing the call arguments (line 1320)
    # Getting the type of 'alpha_k' (line 1320)
    alpha_k_179700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 68), 'alpha_k', False)
    # Getting the type of 'gfkp1' (line 1320)
    gfkp1_179701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 77), 'gfkp1', False)
    # Processing the call keyword arguments (line 1320)
    kwargs_179702 = {}
    # Getting the type of 'polak_ribiere_powell_step' (line 1320)
    polak_ribiere_powell_step_179699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 42), 'polak_ribiere_powell_step', False)
    # Calling polak_ribiere_powell_step(args, kwargs) (line 1320)
    polak_ribiere_powell_step_call_result_179703 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 42), polak_ribiere_powell_step_179699, *[alpha_k_179700, gfkp1_179701], **kwargs_179702)
    
    # Obtaining the member '__getitem__' of a type (line 1320)
    getitem___179704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 12), polak_ribiere_powell_step_call_result_179703, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1320)
    subscript_call_result_179705 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 12), getitem___179704, int_179698)
    
    # Assigning a type to the variable 'tuple_var_assignment_176652' (line 1320)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 12), 'tuple_var_assignment_176652', subscript_call_result_179705)
    
    # Assigning a Subscript to a Name (line 1320):
    
    # Obtaining the type of the subscript
    int_179706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1320, 12), 'int')
    
    # Call to polak_ribiere_powell_step(...): (line 1320)
    # Processing the call arguments (line 1320)
    # Getting the type of 'alpha_k' (line 1320)
    alpha_k_179708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 68), 'alpha_k', False)
    # Getting the type of 'gfkp1' (line 1320)
    gfkp1_179709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 77), 'gfkp1', False)
    # Processing the call keyword arguments (line 1320)
    kwargs_179710 = {}
    # Getting the type of 'polak_ribiere_powell_step' (line 1320)
    polak_ribiere_powell_step_179707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 42), 'polak_ribiere_powell_step', False)
    # Calling polak_ribiere_powell_step(args, kwargs) (line 1320)
    polak_ribiere_powell_step_call_result_179711 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 42), polak_ribiere_powell_step_179707, *[alpha_k_179708, gfkp1_179709], **kwargs_179710)
    
    # Obtaining the member '__getitem__' of a type (line 1320)
    getitem___179712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 12), polak_ribiere_powell_step_call_result_179711, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1320)
    subscript_call_result_179713 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 12), getitem___179712, int_179706)
    
    # Assigning a type to the variable 'tuple_var_assignment_176653' (line 1320)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 12), 'tuple_var_assignment_176653', subscript_call_result_179713)
    
    # Assigning a Subscript to a Name (line 1320):
    
    # Obtaining the type of the subscript
    int_179714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1320, 12), 'int')
    
    # Call to polak_ribiere_powell_step(...): (line 1320)
    # Processing the call arguments (line 1320)
    # Getting the type of 'alpha_k' (line 1320)
    alpha_k_179716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 68), 'alpha_k', False)
    # Getting the type of 'gfkp1' (line 1320)
    gfkp1_179717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 77), 'gfkp1', False)
    # Processing the call keyword arguments (line 1320)
    kwargs_179718 = {}
    # Getting the type of 'polak_ribiere_powell_step' (line 1320)
    polak_ribiere_powell_step_179715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 42), 'polak_ribiere_powell_step', False)
    # Calling polak_ribiere_powell_step(args, kwargs) (line 1320)
    polak_ribiere_powell_step_call_result_179719 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 42), polak_ribiere_powell_step_179715, *[alpha_k_179716, gfkp1_179717], **kwargs_179718)
    
    # Obtaining the member '__getitem__' of a type (line 1320)
    getitem___179720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 12), polak_ribiere_powell_step_call_result_179719, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1320)
    subscript_call_result_179721 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 12), getitem___179720, int_179714)
    
    # Assigning a type to the variable 'tuple_var_assignment_176654' (line 1320)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 12), 'tuple_var_assignment_176654', subscript_call_result_179721)
    
    # Assigning a Name to a Name (line 1320):
    # Getting the type of 'tuple_var_assignment_176650' (line 1320)
    tuple_var_assignment_176650_179722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 12), 'tuple_var_assignment_176650')
    # Assigning a type to the variable 'alpha_k' (line 1320)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 12), 'alpha_k', tuple_var_assignment_176650_179722)
    
    # Assigning a Name to a Name (line 1320):
    # Getting the type of 'tuple_var_assignment_176651' (line 1320)
    tuple_var_assignment_176651_179723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 12), 'tuple_var_assignment_176651')
    # Assigning a type to the variable 'xk' (line 1320)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 21), 'xk', tuple_var_assignment_176651_179723)
    
    # Assigning a Name to a Name (line 1320):
    # Getting the type of 'tuple_var_assignment_176652' (line 1320)
    tuple_var_assignment_176652_179724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 12), 'tuple_var_assignment_176652')
    # Assigning a type to the variable 'pk' (line 1320)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 25), 'pk', tuple_var_assignment_176652_179724)
    
    # Assigning a Name to a Name (line 1320):
    # Getting the type of 'tuple_var_assignment_176653' (line 1320)
    tuple_var_assignment_176653_179725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 12), 'tuple_var_assignment_176653')
    # Assigning a type to the variable 'gfk' (line 1320)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 29), 'gfk', tuple_var_assignment_176653_179725)
    
    # Assigning a Name to a Name (line 1320):
    # Getting the type of 'tuple_var_assignment_176654' (line 1320)
    tuple_var_assignment_176654_179726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 12), 'tuple_var_assignment_176654')
    # Assigning a type to the variable 'gnorm' (line 1320)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 34), 'gnorm', tuple_var_assignment_176654_179726)
    # SSA join for if statement (line 1317)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'retall' (line 1322)
    retall_179727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 11), 'retall')
    # Testing the type of an if condition (line 1322)
    if_condition_179728 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1322, 8), retall_179727)
    # Assigning a type to the variable 'if_condition_179728' (line 1322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1322, 8), 'if_condition_179728', if_condition_179728)
    # SSA begins for if statement (line 1322)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 1323)
    # Processing the call arguments (line 1323)
    # Getting the type of 'xk' (line 1323)
    xk_179731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 27), 'xk', False)
    # Processing the call keyword arguments (line 1323)
    kwargs_179732 = {}
    # Getting the type of 'allvecs' (line 1323)
    allvecs_179729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 12), 'allvecs', False)
    # Obtaining the member 'append' of a type (line 1323)
    append_179730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1323, 12), allvecs_179729, 'append')
    # Calling append(args, kwargs) (line 1323)
    append_call_result_179733 = invoke(stypy.reporting.localization.Localization(__file__, 1323, 12), append_179730, *[xk_179731], **kwargs_179732)
    
    # SSA join for if statement (line 1322)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1324)
    # Getting the type of 'callback' (line 1324)
    callback_179734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 8), 'callback')
    # Getting the type of 'None' (line 1324)
    None_179735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 27), 'None')
    
    (may_be_179736, more_types_in_union_179737) = may_not_be_none(callback_179734, None_179735)

    if may_be_179736:

        if more_types_in_union_179737:
            # Runtime conditional SSA (line 1324)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to callback(...): (line 1325)
        # Processing the call arguments (line 1325)
        # Getting the type of 'xk' (line 1325)
        xk_179739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 21), 'xk', False)
        # Processing the call keyword arguments (line 1325)
        kwargs_179740 = {}
        # Getting the type of 'callback' (line 1325)
        callback_179738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 12), 'callback', False)
        # Calling callback(args, kwargs) (line 1325)
        callback_call_result_179741 = invoke(stypy.reporting.localization.Localization(__file__, 1325, 12), callback_179738, *[xk_179739], **kwargs_179740)
        

        if more_types_in_union_179737:
            # SSA join for if statement (line 1324)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Getting the type of 'k' (line 1326)
    k_179742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1326, 8), 'k')
    int_179743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1326, 13), 'int')
    # Applying the binary operator '+=' (line 1326)
    result_iadd_179744 = python_operator(stypy.reporting.localization.Localization(__file__, 1326, 8), '+=', k_179742, int_179743)
    # Assigning a type to the variable 'k' (line 1326)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1326, 8), 'k', result_iadd_179744)
    
    # SSA join for while statement (line 1274)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 1328):
    
    # Assigning a Name to a Name (line 1328):
    # Getting the type of 'old_fval' (line 1328)
    old_fval_179745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 11), 'old_fval')
    # Assigning a type to the variable 'fval' (line 1328)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1328, 4), 'fval', old_fval_179745)
    
    
    # Getting the type of 'warnflag' (line 1329)
    warnflag_179746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 7), 'warnflag')
    int_179747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1329, 19), 'int')
    # Applying the binary operator '==' (line 1329)
    result_eq_179748 = python_operator(stypy.reporting.localization.Localization(__file__, 1329, 7), '==', warnflag_179746, int_179747)
    
    # Testing the type of an if condition (line 1329)
    if_condition_179749 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1329, 4), result_eq_179748)
    # Assigning a type to the variable 'if_condition_179749' (line 1329)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1329, 4), 'if_condition_179749', if_condition_179749)
    # SSA begins for if statement (line 1329)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 1330):
    
    # Assigning a Subscript to a Name (line 1330):
    
    # Obtaining the type of the subscript
    str_179750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1330, 30), 'str', 'pr_loss')
    # Getting the type of '_status_message' (line 1330)
    _status_message_179751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 14), '_status_message')
    # Obtaining the member '__getitem__' of a type (line 1330)
    getitem___179752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1330, 14), _status_message_179751, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1330)
    subscript_call_result_179753 = invoke(stypy.reporting.localization.Localization(__file__, 1330, 14), getitem___179752, str_179750)
    
    # Assigning a type to the variable 'msg' (line 1330)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1330, 8), 'msg', subscript_call_result_179753)
    
    # Getting the type of 'disp' (line 1331)
    disp_179754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 11), 'disp')
    # Testing the type of an if condition (line 1331)
    if_condition_179755 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1331, 8), disp_179754)
    # Assigning a type to the variable 'if_condition_179755' (line 1331)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1331, 8), 'if_condition_179755', if_condition_179755)
    # SSA begins for if statement (line 1331)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 1332)
    # Processing the call arguments (line 1332)
    str_179757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1332, 18), 'str', 'Warning: ')
    # Getting the type of 'msg' (line 1332)
    msg_179758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 32), 'msg', False)
    # Applying the binary operator '+' (line 1332)
    result_add_179759 = python_operator(stypy.reporting.localization.Localization(__file__, 1332, 18), '+', str_179757, msg_179758)
    
    # Processing the call keyword arguments (line 1332)
    kwargs_179760 = {}
    # Getting the type of 'print' (line 1332)
    print_179756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 12), 'print', False)
    # Calling print(args, kwargs) (line 1332)
    print_call_result_179761 = invoke(stypy.reporting.localization.Localization(__file__, 1332, 12), print_179756, *[result_add_179759], **kwargs_179760)
    
    
    # Call to print(...): (line 1333)
    # Processing the call arguments (line 1333)
    str_179763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1333, 18), 'str', '         Current function value: %f')
    # Getting the type of 'fval' (line 1333)
    fval_179764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 58), 'fval', False)
    # Applying the binary operator '%' (line 1333)
    result_mod_179765 = python_operator(stypy.reporting.localization.Localization(__file__, 1333, 18), '%', str_179763, fval_179764)
    
    # Processing the call keyword arguments (line 1333)
    kwargs_179766 = {}
    # Getting the type of 'print' (line 1333)
    print_179762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 12), 'print', False)
    # Calling print(args, kwargs) (line 1333)
    print_call_result_179767 = invoke(stypy.reporting.localization.Localization(__file__, 1333, 12), print_179762, *[result_mod_179765], **kwargs_179766)
    
    
    # Call to print(...): (line 1334)
    # Processing the call arguments (line 1334)
    str_179769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1334, 18), 'str', '         Iterations: %d')
    # Getting the type of 'k' (line 1334)
    k_179770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 46), 'k', False)
    # Applying the binary operator '%' (line 1334)
    result_mod_179771 = python_operator(stypy.reporting.localization.Localization(__file__, 1334, 18), '%', str_179769, k_179770)
    
    # Processing the call keyword arguments (line 1334)
    kwargs_179772 = {}
    # Getting the type of 'print' (line 1334)
    print_179768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 12), 'print', False)
    # Calling print(args, kwargs) (line 1334)
    print_call_result_179773 = invoke(stypy.reporting.localization.Localization(__file__, 1334, 12), print_179768, *[result_mod_179771], **kwargs_179772)
    
    
    # Call to print(...): (line 1335)
    # Processing the call arguments (line 1335)
    str_179775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1335, 18), 'str', '         Function evaluations: %d')
    
    # Obtaining the type of the subscript
    int_179776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1335, 67), 'int')
    # Getting the type of 'func_calls' (line 1335)
    func_calls_179777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 56), 'func_calls', False)
    # Obtaining the member '__getitem__' of a type (line 1335)
    getitem___179778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1335, 56), func_calls_179777, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1335)
    subscript_call_result_179779 = invoke(stypy.reporting.localization.Localization(__file__, 1335, 56), getitem___179778, int_179776)
    
    # Applying the binary operator '%' (line 1335)
    result_mod_179780 = python_operator(stypy.reporting.localization.Localization(__file__, 1335, 18), '%', str_179775, subscript_call_result_179779)
    
    # Processing the call keyword arguments (line 1335)
    kwargs_179781 = {}
    # Getting the type of 'print' (line 1335)
    print_179774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 12), 'print', False)
    # Calling print(args, kwargs) (line 1335)
    print_call_result_179782 = invoke(stypy.reporting.localization.Localization(__file__, 1335, 12), print_179774, *[result_mod_179780], **kwargs_179781)
    
    
    # Call to print(...): (line 1336)
    # Processing the call arguments (line 1336)
    str_179784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1336, 18), 'str', '         Gradient evaluations: %d')
    
    # Obtaining the type of the subscript
    int_179785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1336, 67), 'int')
    # Getting the type of 'grad_calls' (line 1336)
    grad_calls_179786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 56), 'grad_calls', False)
    # Obtaining the member '__getitem__' of a type (line 1336)
    getitem___179787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1336, 56), grad_calls_179786, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1336)
    subscript_call_result_179788 = invoke(stypy.reporting.localization.Localization(__file__, 1336, 56), getitem___179787, int_179785)
    
    # Applying the binary operator '%' (line 1336)
    result_mod_179789 = python_operator(stypy.reporting.localization.Localization(__file__, 1336, 18), '%', str_179784, subscript_call_result_179788)
    
    # Processing the call keyword arguments (line 1336)
    kwargs_179790 = {}
    # Getting the type of 'print' (line 1336)
    print_179783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 12), 'print', False)
    # Calling print(args, kwargs) (line 1336)
    print_call_result_179791 = invoke(stypy.reporting.localization.Localization(__file__, 1336, 12), print_179783, *[result_mod_179789], **kwargs_179790)
    
    # SSA join for if statement (line 1331)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1329)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'k' (line 1338)
    k_179792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 9), 'k')
    # Getting the type of 'maxiter' (line 1338)
    maxiter_179793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 14), 'maxiter')
    # Applying the binary operator '>=' (line 1338)
    result_ge_179794 = python_operator(stypy.reporting.localization.Localization(__file__, 1338, 9), '>=', k_179792, maxiter_179793)
    
    # Testing the type of an if condition (line 1338)
    if_condition_179795 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1338, 9), result_ge_179794)
    # Assigning a type to the variable 'if_condition_179795' (line 1338)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1338, 9), 'if_condition_179795', if_condition_179795)
    # SSA begins for if statement (line 1338)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1339):
    
    # Assigning a Num to a Name (line 1339):
    int_179796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1339, 19), 'int')
    # Assigning a type to the variable 'warnflag' (line 1339)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1339, 8), 'warnflag', int_179796)
    
    # Assigning a Subscript to a Name (line 1340):
    
    # Assigning a Subscript to a Name (line 1340):
    
    # Obtaining the type of the subscript
    str_179797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1340, 30), 'str', 'maxiter')
    # Getting the type of '_status_message' (line 1340)
    _status_message_179798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 14), '_status_message')
    # Obtaining the member '__getitem__' of a type (line 1340)
    getitem___179799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1340, 14), _status_message_179798, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1340)
    subscript_call_result_179800 = invoke(stypy.reporting.localization.Localization(__file__, 1340, 14), getitem___179799, str_179797)
    
    # Assigning a type to the variable 'msg' (line 1340)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1340, 8), 'msg', subscript_call_result_179800)
    
    # Getting the type of 'disp' (line 1341)
    disp_179801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 11), 'disp')
    # Testing the type of an if condition (line 1341)
    if_condition_179802 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1341, 8), disp_179801)
    # Assigning a type to the variable 'if_condition_179802' (line 1341)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1341, 8), 'if_condition_179802', if_condition_179802)
    # SSA begins for if statement (line 1341)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 1342)
    # Processing the call arguments (line 1342)
    str_179804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1342, 18), 'str', 'Warning: ')
    # Getting the type of 'msg' (line 1342)
    msg_179805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 32), 'msg', False)
    # Applying the binary operator '+' (line 1342)
    result_add_179806 = python_operator(stypy.reporting.localization.Localization(__file__, 1342, 18), '+', str_179804, msg_179805)
    
    # Processing the call keyword arguments (line 1342)
    kwargs_179807 = {}
    # Getting the type of 'print' (line 1342)
    print_179803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 12), 'print', False)
    # Calling print(args, kwargs) (line 1342)
    print_call_result_179808 = invoke(stypy.reporting.localization.Localization(__file__, 1342, 12), print_179803, *[result_add_179806], **kwargs_179807)
    
    
    # Call to print(...): (line 1343)
    # Processing the call arguments (line 1343)
    str_179810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1343, 18), 'str', '         Current function value: %f')
    # Getting the type of 'fval' (line 1343)
    fval_179811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 58), 'fval', False)
    # Applying the binary operator '%' (line 1343)
    result_mod_179812 = python_operator(stypy.reporting.localization.Localization(__file__, 1343, 18), '%', str_179810, fval_179811)
    
    # Processing the call keyword arguments (line 1343)
    kwargs_179813 = {}
    # Getting the type of 'print' (line 1343)
    print_179809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 12), 'print', False)
    # Calling print(args, kwargs) (line 1343)
    print_call_result_179814 = invoke(stypy.reporting.localization.Localization(__file__, 1343, 12), print_179809, *[result_mod_179812], **kwargs_179813)
    
    
    # Call to print(...): (line 1344)
    # Processing the call arguments (line 1344)
    str_179816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1344, 18), 'str', '         Iterations: %d')
    # Getting the type of 'k' (line 1344)
    k_179817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 46), 'k', False)
    # Applying the binary operator '%' (line 1344)
    result_mod_179818 = python_operator(stypy.reporting.localization.Localization(__file__, 1344, 18), '%', str_179816, k_179817)
    
    # Processing the call keyword arguments (line 1344)
    kwargs_179819 = {}
    # Getting the type of 'print' (line 1344)
    print_179815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 12), 'print', False)
    # Calling print(args, kwargs) (line 1344)
    print_call_result_179820 = invoke(stypy.reporting.localization.Localization(__file__, 1344, 12), print_179815, *[result_mod_179818], **kwargs_179819)
    
    
    # Call to print(...): (line 1345)
    # Processing the call arguments (line 1345)
    str_179822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1345, 18), 'str', '         Function evaluations: %d')
    
    # Obtaining the type of the subscript
    int_179823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1345, 67), 'int')
    # Getting the type of 'func_calls' (line 1345)
    func_calls_179824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 56), 'func_calls', False)
    # Obtaining the member '__getitem__' of a type (line 1345)
    getitem___179825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1345, 56), func_calls_179824, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1345)
    subscript_call_result_179826 = invoke(stypy.reporting.localization.Localization(__file__, 1345, 56), getitem___179825, int_179823)
    
    # Applying the binary operator '%' (line 1345)
    result_mod_179827 = python_operator(stypy.reporting.localization.Localization(__file__, 1345, 18), '%', str_179822, subscript_call_result_179826)
    
    # Processing the call keyword arguments (line 1345)
    kwargs_179828 = {}
    # Getting the type of 'print' (line 1345)
    print_179821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 12), 'print', False)
    # Calling print(args, kwargs) (line 1345)
    print_call_result_179829 = invoke(stypy.reporting.localization.Localization(__file__, 1345, 12), print_179821, *[result_mod_179827], **kwargs_179828)
    
    
    # Call to print(...): (line 1346)
    # Processing the call arguments (line 1346)
    str_179831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1346, 18), 'str', '         Gradient evaluations: %d')
    
    # Obtaining the type of the subscript
    int_179832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1346, 67), 'int')
    # Getting the type of 'grad_calls' (line 1346)
    grad_calls_179833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 56), 'grad_calls', False)
    # Obtaining the member '__getitem__' of a type (line 1346)
    getitem___179834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1346, 56), grad_calls_179833, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1346)
    subscript_call_result_179835 = invoke(stypy.reporting.localization.Localization(__file__, 1346, 56), getitem___179834, int_179832)
    
    # Applying the binary operator '%' (line 1346)
    result_mod_179836 = python_operator(stypy.reporting.localization.Localization(__file__, 1346, 18), '%', str_179831, subscript_call_result_179835)
    
    # Processing the call keyword arguments (line 1346)
    kwargs_179837 = {}
    # Getting the type of 'print' (line 1346)
    print_179830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 12), 'print', False)
    # Calling print(args, kwargs) (line 1346)
    print_call_result_179838 = invoke(stypy.reporting.localization.Localization(__file__, 1346, 12), print_179830, *[result_mod_179836], **kwargs_179837)
    
    # SSA join for if statement (line 1341)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1338)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Subscript to a Name (line 1348):
    
    # Assigning a Subscript to a Name (line 1348):
    
    # Obtaining the type of the subscript
    str_179839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1348, 30), 'str', 'success')
    # Getting the type of '_status_message' (line 1348)
    _status_message_179840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 14), '_status_message')
    # Obtaining the member '__getitem__' of a type (line 1348)
    getitem___179841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1348, 14), _status_message_179840, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1348)
    subscript_call_result_179842 = invoke(stypy.reporting.localization.Localization(__file__, 1348, 14), getitem___179841, str_179839)
    
    # Assigning a type to the variable 'msg' (line 1348)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1348, 8), 'msg', subscript_call_result_179842)
    
    # Getting the type of 'disp' (line 1349)
    disp_179843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 11), 'disp')
    # Testing the type of an if condition (line 1349)
    if_condition_179844 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1349, 8), disp_179843)
    # Assigning a type to the variable 'if_condition_179844' (line 1349)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1349, 8), 'if_condition_179844', if_condition_179844)
    # SSA begins for if statement (line 1349)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 1350)
    # Processing the call arguments (line 1350)
    # Getting the type of 'msg' (line 1350)
    msg_179846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 18), 'msg', False)
    # Processing the call keyword arguments (line 1350)
    kwargs_179847 = {}
    # Getting the type of 'print' (line 1350)
    print_179845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 12), 'print', False)
    # Calling print(args, kwargs) (line 1350)
    print_call_result_179848 = invoke(stypy.reporting.localization.Localization(__file__, 1350, 12), print_179845, *[msg_179846], **kwargs_179847)
    
    
    # Call to print(...): (line 1351)
    # Processing the call arguments (line 1351)
    str_179850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1351, 18), 'str', '         Current function value: %f')
    # Getting the type of 'fval' (line 1351)
    fval_179851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 58), 'fval', False)
    # Applying the binary operator '%' (line 1351)
    result_mod_179852 = python_operator(stypy.reporting.localization.Localization(__file__, 1351, 18), '%', str_179850, fval_179851)
    
    # Processing the call keyword arguments (line 1351)
    kwargs_179853 = {}
    # Getting the type of 'print' (line 1351)
    print_179849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 12), 'print', False)
    # Calling print(args, kwargs) (line 1351)
    print_call_result_179854 = invoke(stypy.reporting.localization.Localization(__file__, 1351, 12), print_179849, *[result_mod_179852], **kwargs_179853)
    
    
    # Call to print(...): (line 1352)
    # Processing the call arguments (line 1352)
    str_179856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1352, 18), 'str', '         Iterations: %d')
    # Getting the type of 'k' (line 1352)
    k_179857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 46), 'k', False)
    # Applying the binary operator '%' (line 1352)
    result_mod_179858 = python_operator(stypy.reporting.localization.Localization(__file__, 1352, 18), '%', str_179856, k_179857)
    
    # Processing the call keyword arguments (line 1352)
    kwargs_179859 = {}
    # Getting the type of 'print' (line 1352)
    print_179855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 12), 'print', False)
    # Calling print(args, kwargs) (line 1352)
    print_call_result_179860 = invoke(stypy.reporting.localization.Localization(__file__, 1352, 12), print_179855, *[result_mod_179858], **kwargs_179859)
    
    
    # Call to print(...): (line 1353)
    # Processing the call arguments (line 1353)
    str_179862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1353, 18), 'str', '         Function evaluations: %d')
    
    # Obtaining the type of the subscript
    int_179863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1353, 67), 'int')
    # Getting the type of 'func_calls' (line 1353)
    func_calls_179864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 56), 'func_calls', False)
    # Obtaining the member '__getitem__' of a type (line 1353)
    getitem___179865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1353, 56), func_calls_179864, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1353)
    subscript_call_result_179866 = invoke(stypy.reporting.localization.Localization(__file__, 1353, 56), getitem___179865, int_179863)
    
    # Applying the binary operator '%' (line 1353)
    result_mod_179867 = python_operator(stypy.reporting.localization.Localization(__file__, 1353, 18), '%', str_179862, subscript_call_result_179866)
    
    # Processing the call keyword arguments (line 1353)
    kwargs_179868 = {}
    # Getting the type of 'print' (line 1353)
    print_179861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 12), 'print', False)
    # Calling print(args, kwargs) (line 1353)
    print_call_result_179869 = invoke(stypy.reporting.localization.Localization(__file__, 1353, 12), print_179861, *[result_mod_179867], **kwargs_179868)
    
    
    # Call to print(...): (line 1354)
    # Processing the call arguments (line 1354)
    str_179871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1354, 18), 'str', '         Gradient evaluations: %d')
    
    # Obtaining the type of the subscript
    int_179872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1354, 67), 'int')
    # Getting the type of 'grad_calls' (line 1354)
    grad_calls_179873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 56), 'grad_calls', False)
    # Obtaining the member '__getitem__' of a type (line 1354)
    getitem___179874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1354, 56), grad_calls_179873, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1354)
    subscript_call_result_179875 = invoke(stypy.reporting.localization.Localization(__file__, 1354, 56), getitem___179874, int_179872)
    
    # Applying the binary operator '%' (line 1354)
    result_mod_179876 = python_operator(stypy.reporting.localization.Localization(__file__, 1354, 18), '%', str_179871, subscript_call_result_179875)
    
    # Processing the call keyword arguments (line 1354)
    kwargs_179877 = {}
    # Getting the type of 'print' (line 1354)
    print_179870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 12), 'print', False)
    # Calling print(args, kwargs) (line 1354)
    print_call_result_179878 = invoke(stypy.reporting.localization.Localization(__file__, 1354, 12), print_179870, *[result_mod_179876], **kwargs_179877)
    
    # SSA join for if statement (line 1349)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1338)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1329)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1356):
    
    # Assigning a Call to a Name (line 1356):
    
    # Call to OptimizeResult(...): (line 1356)
    # Processing the call keyword arguments (line 1356)
    # Getting the type of 'fval' (line 1356)
    fval_179880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 32), 'fval', False)
    keyword_179881 = fval_179880
    # Getting the type of 'gfk' (line 1356)
    gfk_179882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 42), 'gfk', False)
    keyword_179883 = gfk_179882
    
    # Obtaining the type of the subscript
    int_179884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1356, 63), 'int')
    # Getting the type of 'func_calls' (line 1356)
    func_calls_179885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 52), 'func_calls', False)
    # Obtaining the member '__getitem__' of a type (line 1356)
    getitem___179886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1356, 52), func_calls_179885, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1356)
    subscript_call_result_179887 = invoke(stypy.reporting.localization.Localization(__file__, 1356, 52), getitem___179886, int_179884)
    
    keyword_179888 = subscript_call_result_179887
    
    # Obtaining the type of the subscript
    int_179889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1357, 44), 'int')
    # Getting the type of 'grad_calls' (line 1357)
    grad_calls_179890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 33), 'grad_calls', False)
    # Obtaining the member '__getitem__' of a type (line 1357)
    getitem___179891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1357, 33), grad_calls_179890, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1357)
    subscript_call_result_179892 = invoke(stypy.reporting.localization.Localization(__file__, 1357, 33), getitem___179891, int_179889)
    
    keyword_179893 = subscript_call_result_179892
    # Getting the type of 'warnflag' (line 1357)
    warnflag_179894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 55), 'warnflag', False)
    keyword_179895 = warnflag_179894
    
    # Getting the type of 'warnflag' (line 1358)
    warnflag_179896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 37), 'warnflag', False)
    int_179897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1358, 49), 'int')
    # Applying the binary operator '==' (line 1358)
    result_eq_179898 = python_operator(stypy.reporting.localization.Localization(__file__, 1358, 37), '==', warnflag_179896, int_179897)
    
    keyword_179899 = result_eq_179898
    # Getting the type of 'msg' (line 1358)
    msg_179900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 61), 'msg', False)
    keyword_179901 = msg_179900
    # Getting the type of 'xk' (line 1358)
    xk_179902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 68), 'xk', False)
    keyword_179903 = xk_179902
    # Getting the type of 'k' (line 1359)
    k_179904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 32), 'k', False)
    keyword_179905 = k_179904
    kwargs_179906 = {'status': keyword_179895, 'success': keyword_179899, 'njev': keyword_179893, 'nfev': keyword_179888, 'fun': keyword_179881, 'x': keyword_179903, 'message': keyword_179901, 'jac': keyword_179883, 'nit': keyword_179905}
    # Getting the type of 'OptimizeResult' (line 1356)
    OptimizeResult_179879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 13), 'OptimizeResult', False)
    # Calling OptimizeResult(args, kwargs) (line 1356)
    OptimizeResult_call_result_179907 = invoke(stypy.reporting.localization.Localization(__file__, 1356, 13), OptimizeResult_179879, *[], **kwargs_179906)
    
    # Assigning a type to the variable 'result' (line 1356)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1356, 4), 'result', OptimizeResult_call_result_179907)
    
    # Getting the type of 'retall' (line 1360)
    retall_179908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 7), 'retall')
    # Testing the type of an if condition (line 1360)
    if_condition_179909 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1360, 4), retall_179908)
    # Assigning a type to the variable 'if_condition_179909' (line 1360)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1360, 4), 'if_condition_179909', if_condition_179909)
    # SSA begins for if statement (line 1360)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 1361):
    
    # Assigning a Name to a Subscript (line 1361):
    # Getting the type of 'allvecs' (line 1361)
    allvecs_179910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 28), 'allvecs')
    # Getting the type of 'result' (line 1361)
    result_179911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 8), 'result')
    str_179912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1361, 15), 'str', 'allvecs')
    # Storing an element on a container (line 1361)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1361, 8), result_179911, (str_179912, allvecs_179910))
    # SSA join for if statement (line 1360)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'result' (line 1362)
    result_179913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 1362)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1362, 4), 'stypy_return_type', result_179913)
    
    # ################# End of '_minimize_cg(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_minimize_cg' in the type store
    # Getting the type of 'stypy_return_type' (line 1221)
    stypy_return_type_179914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_179914)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_minimize_cg'
    return stypy_return_type_179914

# Assigning a type to the variable '_minimize_cg' (line 1221)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1221, 0), '_minimize_cg', _minimize_cg)

@norecursion
def fmin_ncg(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1365)
    None_179915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 36), 'None')
    # Getting the type of 'None' (line 1365)
    None_179916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 48), 'None')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1365)
    tuple_179917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1365, 59), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1365)
    
    float_179918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1365, 71), 'float')
    # Getting the type of '_epsilon' (line 1366)
    _epsilon_179919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 21), '_epsilon')
    # Getting the type of 'None' (line 1366)
    None_179920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 39), 'None')
    int_179921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1366, 57), 'int')
    int_179922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1366, 65), 'int')
    int_179923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1366, 75), 'int')
    # Getting the type of 'None' (line 1367)
    None_179924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 22), 'None')
    defaults = [None_179915, None_179916, tuple_179917, float_179918, _epsilon_179919, None_179920, int_179921, int_179922, int_179923, None_179924]
    # Create a new context for function 'fmin_ncg'
    module_type_store = module_type_store.open_function_context('fmin_ncg', 1365, 0, False)
    
    # Passed parameters checking function
    fmin_ncg.stypy_localization = localization
    fmin_ncg.stypy_type_of_self = None
    fmin_ncg.stypy_type_store = module_type_store
    fmin_ncg.stypy_function_name = 'fmin_ncg'
    fmin_ncg.stypy_param_names_list = ['f', 'x0', 'fprime', 'fhess_p', 'fhess', 'args', 'avextol', 'epsilon', 'maxiter', 'full_output', 'disp', 'retall', 'callback']
    fmin_ncg.stypy_varargs_param_name = None
    fmin_ncg.stypy_kwargs_param_name = None
    fmin_ncg.stypy_call_defaults = defaults
    fmin_ncg.stypy_call_varargs = varargs
    fmin_ncg.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fmin_ncg', ['f', 'x0', 'fprime', 'fhess_p', 'fhess', 'args', 'avextol', 'epsilon', 'maxiter', 'full_output', 'disp', 'retall', 'callback'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fmin_ncg', localization, ['f', 'x0', 'fprime', 'fhess_p', 'fhess', 'args', 'avextol', 'epsilon', 'maxiter', 'full_output', 'disp', 'retall', 'callback'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fmin_ncg(...)' code ##################

    str_179925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1453, (-1)), 'str', "\n    Unconstrained minimization of a function using the Newton-CG method.\n\n    Parameters\n    ----------\n    f : callable ``f(x, *args)``\n        Objective function to be minimized.\n    x0 : ndarray\n        Initial guess.\n    fprime : callable ``f'(x, *args)``\n        Gradient of f.\n    fhess_p : callable ``fhess_p(x, p, *args)``, optional\n        Function which computes the Hessian of f times an\n        arbitrary vector, p.\n    fhess : callable ``fhess(x, *args)``, optional\n        Function to compute the Hessian matrix of f.\n    args : tuple, optional\n        Extra arguments passed to f, fprime, fhess_p, and fhess\n        (the same set of extra arguments is supplied to all of\n        these functions).\n    epsilon : float or ndarray, optional\n        If fhess is approximated, use this value for the step size.\n    callback : callable, optional\n        An optional user-supplied function which is called after\n        each iteration.  Called as callback(xk), where xk is the\n        current parameter vector.\n    avextol : float, optional\n        Convergence is assumed when the average relative error in\n        the minimizer falls below this amount.\n    maxiter : int, optional\n        Maximum number of iterations to perform.\n    full_output : bool, optional\n        If True, return the optional outputs.\n    disp : bool, optional\n        If True, print convergence message.\n    retall : bool, optional\n        If True, return a list of results at each iteration.\n\n    Returns\n    -------\n    xopt : ndarray\n        Parameters which minimize f, i.e. ``f(xopt) == fopt``.\n    fopt : float\n        Value of the function at xopt, i.e. ``fopt = f(xopt)``.\n    fcalls : int\n        Number of function calls made.\n    gcalls : int\n        Number of gradient calls made.\n    hcalls : int\n        Number of hessian calls made.\n    warnflag : int\n        Warnings generated by the algorithm.\n        1 : Maximum number of iterations exceeded.\n    allvecs : list\n        The result at each iteration, if retall is True (see below).\n\n    See also\n    --------\n    minimize: Interface to minimization algorithms for multivariate\n        functions. See the 'Newton-CG' `method` in particular.\n\n    Notes\n    -----\n    Only one of `fhess_p` or `fhess` need to be given.  If `fhess`\n    is provided, then `fhess_p` will be ignored.  If neither `fhess`\n    nor `fhess_p` is provided, then the hessian product will be\n    approximated using finite differences on `fprime`. `fhess_p`\n    must compute the hessian times an arbitrary vector. If it is not\n    given, finite-differences on `fprime` are used to compute\n    it.\n\n    Newton-CG methods are also called truncated Newton methods. This\n    function differs from scipy.optimize.fmin_tnc because\n\n    1. scipy.optimize.fmin_ncg is written purely in python using numpy\n        and scipy while scipy.optimize.fmin_tnc calls a C function.\n    2. scipy.optimize.fmin_ncg is only for unconstrained minimization\n        while scipy.optimize.fmin_tnc is for unconstrained minimization\n        or box constrained minimization. (Box constraints give\n        lower and upper bounds for each variable separately.)\n\n    References\n    ----------\n    Wright & Nocedal, 'Numerical Optimization', 1999, pg. 140.\n\n    ")
    
    # Assigning a Dict to a Name (line 1454):
    
    # Assigning a Dict to a Name (line 1454):
    
    # Obtaining an instance of the builtin type 'dict' (line 1454)
    dict_179926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1454, 11), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 1454)
    # Adding element type (key, value) (line 1454)
    str_179927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1454, 12), 'str', 'xtol')
    # Getting the type of 'avextol' (line 1454)
    avextol_179928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 20), 'avextol')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1454, 11), dict_179926, (str_179927, avextol_179928))
    # Adding element type (key, value) (line 1454)
    str_179929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1455, 12), 'str', 'eps')
    # Getting the type of 'epsilon' (line 1455)
    epsilon_179930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 19), 'epsilon')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1454, 11), dict_179926, (str_179929, epsilon_179930))
    # Adding element type (key, value) (line 1454)
    str_179931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1456, 12), 'str', 'maxiter')
    # Getting the type of 'maxiter' (line 1456)
    maxiter_179932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 23), 'maxiter')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1454, 11), dict_179926, (str_179931, maxiter_179932))
    # Adding element type (key, value) (line 1454)
    str_179933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1457, 12), 'str', 'disp')
    # Getting the type of 'disp' (line 1457)
    disp_179934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 20), 'disp')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1454, 11), dict_179926, (str_179933, disp_179934))
    # Adding element type (key, value) (line 1454)
    str_179935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1458, 12), 'str', 'return_all')
    # Getting the type of 'retall' (line 1458)
    retall_179936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 26), 'retall')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1454, 11), dict_179926, (str_179935, retall_179936))
    
    # Assigning a type to the variable 'opts' (line 1454)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1454, 4), 'opts', dict_179926)
    
    # Assigning a Call to a Name (line 1460):
    
    # Assigning a Call to a Name (line 1460):
    
    # Call to _minimize_newtoncg(...): (line 1460)
    # Processing the call arguments (line 1460)
    # Getting the type of 'f' (line 1460)
    f_179938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 29), 'f', False)
    # Getting the type of 'x0' (line 1460)
    x0_179939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 32), 'x0', False)
    # Getting the type of 'args' (line 1460)
    args_179940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 36), 'args', False)
    # Getting the type of 'fprime' (line 1460)
    fprime_179941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 42), 'fprime', False)
    # Getting the type of 'fhess' (line 1460)
    fhess_179942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 50), 'fhess', False)
    # Getting the type of 'fhess_p' (line 1460)
    fhess_p_179943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 57), 'fhess_p', False)
    # Processing the call keyword arguments (line 1460)
    # Getting the type of 'callback' (line 1461)
    callback_179944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 38), 'callback', False)
    keyword_179945 = callback_179944
    # Getting the type of 'opts' (line 1461)
    opts_179946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 50), 'opts', False)
    kwargs_179947 = {'callback': keyword_179945, 'opts_179946': opts_179946}
    # Getting the type of '_minimize_newtoncg' (line 1460)
    _minimize_newtoncg_179937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 10), '_minimize_newtoncg', False)
    # Calling _minimize_newtoncg(args, kwargs) (line 1460)
    _minimize_newtoncg_call_result_179948 = invoke(stypy.reporting.localization.Localization(__file__, 1460, 10), _minimize_newtoncg_179937, *[f_179938, x0_179939, args_179940, fprime_179941, fhess_179942, fhess_p_179943], **kwargs_179947)
    
    # Assigning a type to the variable 'res' (line 1460)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1460, 4), 'res', _minimize_newtoncg_call_result_179948)
    
    # Getting the type of 'full_output' (line 1463)
    full_output_179949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 7), 'full_output')
    # Testing the type of an if condition (line 1463)
    if_condition_179950 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1463, 4), full_output_179949)
    # Assigning a type to the variable 'if_condition_179950' (line 1463)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1463, 4), 'if_condition_179950', if_condition_179950)
    # SSA begins for if statement (line 1463)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 1464):
    
    # Assigning a Tuple to a Name (line 1464):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1464)
    tuple_179951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1464, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1464)
    # Adding element type (line 1464)
    
    # Obtaining the type of the subscript
    str_179952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1464, 23), 'str', 'x')
    # Getting the type of 'res' (line 1464)
    res_179953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 19), 'res')
    # Obtaining the member '__getitem__' of a type (line 1464)
    getitem___179954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1464, 19), res_179953, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1464)
    subscript_call_result_179955 = invoke(stypy.reporting.localization.Localization(__file__, 1464, 19), getitem___179954, str_179952)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1464, 19), tuple_179951, subscript_call_result_179955)
    # Adding element type (line 1464)
    
    # Obtaining the type of the subscript
    str_179956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1464, 33), 'str', 'fun')
    # Getting the type of 'res' (line 1464)
    res_179957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 29), 'res')
    # Obtaining the member '__getitem__' of a type (line 1464)
    getitem___179958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1464, 29), res_179957, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1464)
    subscript_call_result_179959 = invoke(stypy.reporting.localization.Localization(__file__, 1464, 29), getitem___179958, str_179956)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1464, 19), tuple_179951, subscript_call_result_179959)
    # Adding element type (line 1464)
    
    # Obtaining the type of the subscript
    str_179960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1464, 45), 'str', 'nfev')
    # Getting the type of 'res' (line 1464)
    res_179961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 41), 'res')
    # Obtaining the member '__getitem__' of a type (line 1464)
    getitem___179962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1464, 41), res_179961, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1464)
    subscript_call_result_179963 = invoke(stypy.reporting.localization.Localization(__file__, 1464, 41), getitem___179962, str_179960)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1464, 19), tuple_179951, subscript_call_result_179963)
    # Adding element type (line 1464)
    
    # Obtaining the type of the subscript
    str_179964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1464, 58), 'str', 'njev')
    # Getting the type of 'res' (line 1464)
    res_179965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 54), 'res')
    # Obtaining the member '__getitem__' of a type (line 1464)
    getitem___179966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1464, 54), res_179965, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1464)
    subscript_call_result_179967 = invoke(stypy.reporting.localization.Localization(__file__, 1464, 54), getitem___179966, str_179964)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1464, 19), tuple_179951, subscript_call_result_179967)
    # Adding element type (line 1464)
    
    # Obtaining the type of the subscript
    str_179968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1465, 23), 'str', 'nhev')
    # Getting the type of 'res' (line 1465)
    res_179969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 19), 'res')
    # Obtaining the member '__getitem__' of a type (line 1465)
    getitem___179970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1465, 19), res_179969, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1465)
    subscript_call_result_179971 = invoke(stypy.reporting.localization.Localization(__file__, 1465, 19), getitem___179970, str_179968)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1464, 19), tuple_179951, subscript_call_result_179971)
    # Adding element type (line 1464)
    
    # Obtaining the type of the subscript
    str_179972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1465, 36), 'str', 'status')
    # Getting the type of 'res' (line 1465)
    res_179973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 32), 'res')
    # Obtaining the member '__getitem__' of a type (line 1465)
    getitem___179974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1465, 32), res_179973, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1465)
    subscript_call_result_179975 = invoke(stypy.reporting.localization.Localization(__file__, 1465, 32), getitem___179974, str_179972)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1464, 19), tuple_179951, subscript_call_result_179975)
    
    # Assigning a type to the variable 'retlist' (line 1464)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1464, 8), 'retlist', tuple_179951)
    
    # Getting the type of 'retall' (line 1466)
    retall_179976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 11), 'retall')
    # Testing the type of an if condition (line 1466)
    if_condition_179977 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1466, 8), retall_179976)
    # Assigning a type to the variable 'if_condition_179977' (line 1466)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1466, 8), 'if_condition_179977', if_condition_179977)
    # SSA begins for if statement (line 1466)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'retlist' (line 1467)
    retlist_179978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 12), 'retlist')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1467)
    tuple_179979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1467, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1467)
    # Adding element type (line 1467)
    
    # Obtaining the type of the subscript
    str_179980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1467, 28), 'str', 'allvecs')
    # Getting the type of 'res' (line 1467)
    res_179981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 24), 'res')
    # Obtaining the member '__getitem__' of a type (line 1467)
    getitem___179982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1467, 24), res_179981, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1467)
    subscript_call_result_179983 = invoke(stypy.reporting.localization.Localization(__file__, 1467, 24), getitem___179982, str_179980)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1467, 24), tuple_179979, subscript_call_result_179983)
    
    # Applying the binary operator '+=' (line 1467)
    result_iadd_179984 = python_operator(stypy.reporting.localization.Localization(__file__, 1467, 12), '+=', retlist_179978, tuple_179979)
    # Assigning a type to the variable 'retlist' (line 1467)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1467, 12), 'retlist', result_iadd_179984)
    
    # SSA join for if statement (line 1466)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'retlist' (line 1468)
    retlist_179985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 15), 'retlist')
    # Assigning a type to the variable 'stypy_return_type' (line 1468)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1468, 8), 'stypy_return_type', retlist_179985)
    # SSA branch for the else part of an if statement (line 1463)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'retall' (line 1470)
    retall_179986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 11), 'retall')
    # Testing the type of an if condition (line 1470)
    if_condition_179987 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1470, 8), retall_179986)
    # Assigning a type to the variable 'if_condition_179987' (line 1470)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1470, 8), 'if_condition_179987', if_condition_179987)
    # SSA begins for if statement (line 1470)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1471)
    tuple_179988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1471)
    # Adding element type (line 1471)
    
    # Obtaining the type of the subscript
    str_179989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 23), 'str', 'x')
    # Getting the type of 'res' (line 1471)
    res_179990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 19), 'res')
    # Obtaining the member '__getitem__' of a type (line 1471)
    getitem___179991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 19), res_179990, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1471)
    subscript_call_result_179992 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 19), getitem___179991, str_179989)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1471, 19), tuple_179988, subscript_call_result_179992)
    # Adding element type (line 1471)
    
    # Obtaining the type of the subscript
    str_179993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 33), 'str', 'allvecs')
    # Getting the type of 'res' (line 1471)
    res_179994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 29), 'res')
    # Obtaining the member '__getitem__' of a type (line 1471)
    getitem___179995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 29), res_179994, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1471)
    subscript_call_result_179996 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 29), getitem___179995, str_179993)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1471, 19), tuple_179988, subscript_call_result_179996)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1471)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 12), 'stypy_return_type', tuple_179988)
    # SSA branch for the else part of an if statement (line 1470)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining the type of the subscript
    str_179997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1473, 23), 'str', 'x')
    # Getting the type of 'res' (line 1473)
    res_179998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 19), 'res')
    # Obtaining the member '__getitem__' of a type (line 1473)
    getitem___179999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 19), res_179998, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1473)
    subscript_call_result_180000 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 19), getitem___179999, str_179997)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1473)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1473, 12), 'stypy_return_type', subscript_call_result_180000)
    # SSA join for if statement (line 1470)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1463)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'fmin_ncg(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fmin_ncg' in the type store
    # Getting the type of 'stypy_return_type' (line 1365)
    stypy_return_type_180001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_180001)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fmin_ncg'
    return stypy_return_type_180001

# Assigning a type to the variable 'fmin_ncg' (line 1365)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1365, 0), 'fmin_ncg', fmin_ncg)

@norecursion
def _minimize_newtoncg(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 1476)
    tuple_180002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1476, 37), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1476)
    
    # Getting the type of 'None' (line 1476)
    None_180003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 45), 'None')
    # Getting the type of 'None' (line 1476)
    None_180004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 56), 'None')
    # Getting the type of 'None' (line 1476)
    None_180005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 68), 'None')
    # Getting the type of 'None' (line 1477)
    None_180006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 32), 'None')
    float_180007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1477, 43), 'float')
    # Getting the type of '_epsilon' (line 1477)
    _epsilon_180008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 53), '_epsilon')
    # Getting the type of 'None' (line 1477)
    None_180009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 71), 'None')
    # Getting the type of 'False' (line 1478)
    False_180010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 28), 'False')
    # Getting the type of 'False' (line 1478)
    False_180011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 46), 'False')
    defaults = [tuple_180002, None_180003, None_180004, None_180005, None_180006, float_180007, _epsilon_180008, None_180009, False_180010, False_180011]
    # Create a new context for function '_minimize_newtoncg'
    module_type_store = module_type_store.open_function_context('_minimize_newtoncg', 1476, 0, False)
    
    # Passed parameters checking function
    _minimize_newtoncg.stypy_localization = localization
    _minimize_newtoncg.stypy_type_of_self = None
    _minimize_newtoncg.stypy_type_store = module_type_store
    _minimize_newtoncg.stypy_function_name = '_minimize_newtoncg'
    _minimize_newtoncg.stypy_param_names_list = ['fun', 'x0', 'args', 'jac', 'hess', 'hessp', 'callback', 'xtol', 'eps', 'maxiter', 'disp', 'return_all']
    _minimize_newtoncg.stypy_varargs_param_name = None
    _minimize_newtoncg.stypy_kwargs_param_name = 'unknown_options'
    _minimize_newtoncg.stypy_call_defaults = defaults
    _minimize_newtoncg.stypy_call_varargs = varargs
    _minimize_newtoncg.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_minimize_newtoncg', ['fun', 'x0', 'args', 'jac', 'hess', 'hessp', 'callback', 'xtol', 'eps', 'maxiter', 'disp', 'return_all'], None, 'unknown_options', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_minimize_newtoncg', localization, ['fun', 'x0', 'args', 'jac', 'hess', 'hessp', 'callback', 'xtol', 'eps', 'maxiter', 'disp', 'return_all'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_minimize_newtoncg(...)' code ##################

    str_180012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1498, (-1)), 'str', '\n    Minimization of scalar function of one or more variables using the\n    Newton-CG algorithm.\n\n    Note that the `jac` parameter (Jacobian) is required.\n\n    Options\n    -------\n    disp : bool\n        Set to True to print convergence messages.\n    xtol : float\n        Average relative error in solution `xopt` acceptable for\n        convergence.\n    maxiter : int\n        Maximum number of iterations to perform.\n    eps : float or ndarray\n        If `jac` is approximated, use this value for the step size.\n\n    ')
    
    # Call to _check_unknown_options(...): (line 1499)
    # Processing the call arguments (line 1499)
    # Getting the type of 'unknown_options' (line 1499)
    unknown_options_180014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 27), 'unknown_options', False)
    # Processing the call keyword arguments (line 1499)
    kwargs_180015 = {}
    # Getting the type of '_check_unknown_options' (line 1499)
    _check_unknown_options_180013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 4), '_check_unknown_options', False)
    # Calling _check_unknown_options(args, kwargs) (line 1499)
    _check_unknown_options_call_result_180016 = invoke(stypy.reporting.localization.Localization(__file__, 1499, 4), _check_unknown_options_180013, *[unknown_options_180014], **kwargs_180015)
    
    
    # Type idiom detected: calculating its left and rigth part (line 1500)
    # Getting the type of 'jac' (line 1500)
    jac_180017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 7), 'jac')
    # Getting the type of 'None' (line 1500)
    None_180018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 14), 'None')
    
    (may_be_180019, more_types_in_union_180020) = may_be_none(jac_180017, None_180018)

    if may_be_180019:

        if more_types_in_union_180020:
            # Runtime conditional SSA (line 1500)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to ValueError(...): (line 1501)
        # Processing the call arguments (line 1501)
        str_180022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1501, 25), 'str', 'Jacobian is required for Newton-CG method')
        # Processing the call keyword arguments (line 1501)
        kwargs_180023 = {}
        # Getting the type of 'ValueError' (line 1501)
        ValueError_180021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 14), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1501)
        ValueError_call_result_180024 = invoke(stypy.reporting.localization.Localization(__file__, 1501, 14), ValueError_180021, *[str_180022], **kwargs_180023)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1501, 8), ValueError_call_result_180024, 'raise parameter', BaseException)

        if more_types_in_union_180020:
            # SSA join for if statement (line 1500)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Name (line 1502):
    
    # Assigning a Name to a Name (line 1502):
    # Getting the type of 'fun' (line 1502)
    fun_180025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 8), 'fun')
    # Assigning a type to the variable 'f' (line 1502)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1502, 4), 'f', fun_180025)
    
    # Assigning a Name to a Name (line 1503):
    
    # Assigning a Name to a Name (line 1503):
    # Getting the type of 'jac' (line 1503)
    jac_180026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 13), 'jac')
    # Assigning a type to the variable 'fprime' (line 1503)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1503, 4), 'fprime', jac_180026)
    
    # Assigning a Name to a Name (line 1504):
    
    # Assigning a Name to a Name (line 1504):
    # Getting the type of 'hessp' (line 1504)
    hessp_180027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 14), 'hessp')
    # Assigning a type to the variable 'fhess_p' (line 1504)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1504, 4), 'fhess_p', hessp_180027)
    
    # Assigning a Name to a Name (line 1505):
    
    # Assigning a Name to a Name (line 1505):
    # Getting the type of 'hess' (line 1505)
    hess_180028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 12), 'hess')
    # Assigning a type to the variable 'fhess' (line 1505)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1505, 4), 'fhess', hess_180028)
    
    # Assigning a Name to a Name (line 1506):
    
    # Assigning a Name to a Name (line 1506):
    # Getting the type of 'xtol' (line 1506)
    xtol_180029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 14), 'xtol')
    # Assigning a type to the variable 'avextol' (line 1506)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1506, 4), 'avextol', xtol_180029)
    
    # Assigning a Name to a Name (line 1507):
    
    # Assigning a Name to a Name (line 1507):
    # Getting the type of 'eps' (line 1507)
    eps_180030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 14), 'eps')
    # Assigning a type to the variable 'epsilon' (line 1507)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1507, 4), 'epsilon', eps_180030)
    
    # Assigning a Name to a Name (line 1508):
    
    # Assigning a Name to a Name (line 1508):
    # Getting the type of 'return_all' (line 1508)
    return_all_180031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 13), 'return_all')
    # Assigning a type to the variable 'retall' (line 1508)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1508, 4), 'retall', return_all_180031)

    @norecursion
    def terminate(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'terminate'
        module_type_store = module_type_store.open_function_context('terminate', 1510, 4, False)
        
        # Passed parameters checking function
        terminate.stypy_localization = localization
        terminate.stypy_type_of_self = None
        terminate.stypy_type_store = module_type_store
        terminate.stypy_function_name = 'terminate'
        terminate.stypy_param_names_list = ['warnflag', 'msg']
        terminate.stypy_varargs_param_name = None
        terminate.stypy_kwargs_param_name = None
        terminate.stypy_call_defaults = defaults
        terminate.stypy_call_varargs = varargs
        terminate.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'terminate', ['warnflag', 'msg'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'terminate', localization, ['warnflag', 'msg'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'terminate(...)' code ##################

        
        # Getting the type of 'disp' (line 1511)
        disp_180032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1511, 11), 'disp')
        # Testing the type of an if condition (line 1511)
        if_condition_180033 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1511, 8), disp_180032)
        # Assigning a type to the variable 'if_condition_180033' (line 1511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1511, 8), 'if_condition_180033', if_condition_180033)
        # SSA begins for if statement (line 1511)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to print(...): (line 1512)
        # Processing the call arguments (line 1512)
        # Getting the type of 'msg' (line 1512)
        msg_180035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 18), 'msg', False)
        # Processing the call keyword arguments (line 1512)
        kwargs_180036 = {}
        # Getting the type of 'print' (line 1512)
        print_180034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 12), 'print', False)
        # Calling print(args, kwargs) (line 1512)
        print_call_result_180037 = invoke(stypy.reporting.localization.Localization(__file__, 1512, 12), print_180034, *[msg_180035], **kwargs_180036)
        
        
        # Call to print(...): (line 1513)
        # Processing the call arguments (line 1513)
        str_180039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1513, 18), 'str', '         Current function value: %f')
        # Getting the type of 'old_fval' (line 1513)
        old_fval_180040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 58), 'old_fval', False)
        # Applying the binary operator '%' (line 1513)
        result_mod_180041 = python_operator(stypy.reporting.localization.Localization(__file__, 1513, 18), '%', str_180039, old_fval_180040)
        
        # Processing the call keyword arguments (line 1513)
        kwargs_180042 = {}
        # Getting the type of 'print' (line 1513)
        print_180038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 12), 'print', False)
        # Calling print(args, kwargs) (line 1513)
        print_call_result_180043 = invoke(stypy.reporting.localization.Localization(__file__, 1513, 12), print_180038, *[result_mod_180041], **kwargs_180042)
        
        
        # Call to print(...): (line 1514)
        # Processing the call arguments (line 1514)
        str_180045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1514, 18), 'str', '         Iterations: %d')
        # Getting the type of 'k' (line 1514)
        k_180046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 46), 'k', False)
        # Applying the binary operator '%' (line 1514)
        result_mod_180047 = python_operator(stypy.reporting.localization.Localization(__file__, 1514, 18), '%', str_180045, k_180046)
        
        # Processing the call keyword arguments (line 1514)
        kwargs_180048 = {}
        # Getting the type of 'print' (line 1514)
        print_180044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 12), 'print', False)
        # Calling print(args, kwargs) (line 1514)
        print_call_result_180049 = invoke(stypy.reporting.localization.Localization(__file__, 1514, 12), print_180044, *[result_mod_180047], **kwargs_180048)
        
        
        # Call to print(...): (line 1515)
        # Processing the call arguments (line 1515)
        str_180051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1515, 18), 'str', '         Function evaluations: %d')
        
        # Obtaining the type of the subscript
        int_180052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1515, 63), 'int')
        # Getting the type of 'fcalls' (line 1515)
        fcalls_180053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1515, 56), 'fcalls', False)
        # Obtaining the member '__getitem__' of a type (line 1515)
        getitem___180054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1515, 56), fcalls_180053, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1515)
        subscript_call_result_180055 = invoke(stypy.reporting.localization.Localization(__file__, 1515, 56), getitem___180054, int_180052)
        
        # Applying the binary operator '%' (line 1515)
        result_mod_180056 = python_operator(stypy.reporting.localization.Localization(__file__, 1515, 18), '%', str_180051, subscript_call_result_180055)
        
        # Processing the call keyword arguments (line 1515)
        kwargs_180057 = {}
        # Getting the type of 'print' (line 1515)
        print_180050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1515, 12), 'print', False)
        # Calling print(args, kwargs) (line 1515)
        print_call_result_180058 = invoke(stypy.reporting.localization.Localization(__file__, 1515, 12), print_180050, *[result_mod_180056], **kwargs_180057)
        
        
        # Call to print(...): (line 1516)
        # Processing the call arguments (line 1516)
        str_180060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1516, 18), 'str', '         Gradient evaluations: %d')
        
        # Obtaining the type of the subscript
        int_180061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1516, 63), 'int')
        # Getting the type of 'gcalls' (line 1516)
        gcalls_180062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 56), 'gcalls', False)
        # Obtaining the member '__getitem__' of a type (line 1516)
        getitem___180063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1516, 56), gcalls_180062, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1516)
        subscript_call_result_180064 = invoke(stypy.reporting.localization.Localization(__file__, 1516, 56), getitem___180063, int_180061)
        
        # Applying the binary operator '%' (line 1516)
        result_mod_180065 = python_operator(stypy.reporting.localization.Localization(__file__, 1516, 18), '%', str_180060, subscript_call_result_180064)
        
        # Processing the call keyword arguments (line 1516)
        kwargs_180066 = {}
        # Getting the type of 'print' (line 1516)
        print_180059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 12), 'print', False)
        # Calling print(args, kwargs) (line 1516)
        print_call_result_180067 = invoke(stypy.reporting.localization.Localization(__file__, 1516, 12), print_180059, *[result_mod_180065], **kwargs_180066)
        
        
        # Call to print(...): (line 1517)
        # Processing the call arguments (line 1517)
        str_180069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1517, 18), 'str', '         Hessian evaluations: %d')
        # Getting the type of 'hcalls' (line 1517)
        hcalls_180070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 55), 'hcalls', False)
        # Applying the binary operator '%' (line 1517)
        result_mod_180071 = python_operator(stypy.reporting.localization.Localization(__file__, 1517, 18), '%', str_180069, hcalls_180070)
        
        # Processing the call keyword arguments (line 1517)
        kwargs_180072 = {}
        # Getting the type of 'print' (line 1517)
        print_180068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 12), 'print', False)
        # Calling print(args, kwargs) (line 1517)
        print_call_result_180073 = invoke(stypy.reporting.localization.Localization(__file__, 1517, 12), print_180068, *[result_mod_180071], **kwargs_180072)
        
        # SSA join for if statement (line 1511)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 1518):
        
        # Assigning a Name to a Name (line 1518):
        # Getting the type of 'old_fval' (line 1518)
        old_fval_180074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1518, 15), 'old_fval')
        # Assigning a type to the variable 'fval' (line 1518)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1518, 8), 'fval', old_fval_180074)
        
        # Assigning a Call to a Name (line 1519):
        
        # Assigning a Call to a Name (line 1519):
        
        # Call to OptimizeResult(...): (line 1519)
        # Processing the call keyword arguments (line 1519)
        # Getting the type of 'fval' (line 1519)
        fval_180076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1519, 36), 'fval', False)
        keyword_180077 = fval_180076
        # Getting the type of 'gfk' (line 1519)
        gfk_180078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1519, 46), 'gfk', False)
        keyword_180079 = gfk_180078
        
        # Obtaining the type of the subscript
        int_180080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1519, 63), 'int')
        # Getting the type of 'fcalls' (line 1519)
        fcalls_180081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1519, 56), 'fcalls', False)
        # Obtaining the member '__getitem__' of a type (line 1519)
        getitem___180082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1519, 56), fcalls_180081, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1519)
        subscript_call_result_180083 = invoke(stypy.reporting.localization.Localization(__file__, 1519, 56), getitem___180082, int_180080)
        
        keyword_180084 = subscript_call_result_180083
        
        # Obtaining the type of the subscript
        int_180085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1520, 44), 'int')
        # Getting the type of 'gcalls' (line 1520)
        gcalls_180086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 37), 'gcalls', False)
        # Obtaining the member '__getitem__' of a type (line 1520)
        getitem___180087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1520, 37), gcalls_180086, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1520)
        subscript_call_result_180088 = invoke(stypy.reporting.localization.Localization(__file__, 1520, 37), getitem___180087, int_180085)
        
        keyword_180089 = subscript_call_result_180088
        # Getting the type of 'hcalls' (line 1520)
        hcalls_180090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 53), 'hcalls', False)
        keyword_180091 = hcalls_180090
        # Getting the type of 'warnflag' (line 1520)
        warnflag_180092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 68), 'warnflag', False)
        keyword_180093 = warnflag_180092
        
        # Getting the type of 'warnflag' (line 1521)
        warnflag_180094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 41), 'warnflag', False)
        int_180095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1521, 53), 'int')
        # Applying the binary operator '==' (line 1521)
        result_eq_180096 = python_operator(stypy.reporting.localization.Localization(__file__, 1521, 41), '==', warnflag_180094, int_180095)
        
        keyword_180097 = result_eq_180096
        # Getting the type of 'msg' (line 1521)
        msg_180098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 65), 'msg', False)
        keyword_180099 = msg_180098
        # Getting the type of 'xk' (line 1521)
        xk_180100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 72), 'xk', False)
        keyword_180101 = xk_180100
        # Getting the type of 'k' (line 1522)
        k_180102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 36), 'k', False)
        keyword_180103 = k_180102
        kwargs_180104 = {'status': keyword_180093, 'success': keyword_180097, 'njev': keyword_180089, 'nfev': keyword_180084, 'fun': keyword_180077, 'x': keyword_180101, 'message': keyword_180099, 'nhev': keyword_180091, 'jac': keyword_180079, 'nit': keyword_180103}
        # Getting the type of 'OptimizeResult' (line 1519)
        OptimizeResult_180075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1519, 17), 'OptimizeResult', False)
        # Calling OptimizeResult(args, kwargs) (line 1519)
        OptimizeResult_call_result_180105 = invoke(stypy.reporting.localization.Localization(__file__, 1519, 17), OptimizeResult_180075, *[], **kwargs_180104)
        
        # Assigning a type to the variable 'result' (line 1519)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1519, 8), 'result', OptimizeResult_call_result_180105)
        
        # Getting the type of 'retall' (line 1523)
        retall_180106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 11), 'retall')
        # Testing the type of an if condition (line 1523)
        if_condition_180107 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1523, 8), retall_180106)
        # Assigning a type to the variable 'if_condition_180107' (line 1523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1523, 8), 'if_condition_180107', if_condition_180107)
        # SSA begins for if statement (line 1523)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Subscript (line 1524):
        
        # Assigning a Name to a Subscript (line 1524):
        # Getting the type of 'allvecs' (line 1524)
        allvecs_180108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 32), 'allvecs')
        # Getting the type of 'result' (line 1524)
        result_180109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 12), 'result')
        str_180110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1524, 19), 'str', 'allvecs')
        # Storing an element on a container (line 1524)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1524, 12), result_180109, (str_180110, allvecs_180108))
        # SSA join for if statement (line 1523)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'result' (line 1525)
        result_180111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 1525)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1525, 8), 'stypy_return_type', result_180111)
        
        # ################# End of 'terminate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'terminate' in the type store
        # Getting the type of 'stypy_return_type' (line 1510)
        stypy_return_type_180112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_180112)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'terminate'
        return stypy_return_type_180112

    # Assigning a type to the variable 'terminate' (line 1510)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1510, 4), 'terminate', terminate)
    
    # Assigning a Call to a Name (line 1527):
    
    # Assigning a Call to a Name (line 1527):
    
    # Call to flatten(...): (line 1527)
    # Processing the call keyword arguments (line 1527)
    kwargs_180118 = {}
    
    # Call to asarray(...): (line 1527)
    # Processing the call arguments (line 1527)
    # Getting the type of 'x0' (line 1527)
    x0_180114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 17), 'x0', False)
    # Processing the call keyword arguments (line 1527)
    kwargs_180115 = {}
    # Getting the type of 'asarray' (line 1527)
    asarray_180113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 9), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1527)
    asarray_call_result_180116 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 9), asarray_180113, *[x0_180114], **kwargs_180115)
    
    # Obtaining the member 'flatten' of a type (line 1527)
    flatten_180117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 9), asarray_call_result_180116, 'flatten')
    # Calling flatten(args, kwargs) (line 1527)
    flatten_call_result_180119 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 9), flatten_180117, *[], **kwargs_180118)
    
    # Assigning a type to the variable 'x0' (line 1527)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1527, 4), 'x0', flatten_call_result_180119)
    
    # Assigning a Call to a Tuple (line 1528):
    
    # Assigning a Subscript to a Name (line 1528):
    
    # Obtaining the type of the subscript
    int_180120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1528, 4), 'int')
    
    # Call to wrap_function(...): (line 1528)
    # Processing the call arguments (line 1528)
    # Getting the type of 'f' (line 1528)
    f_180122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 30), 'f', False)
    # Getting the type of 'args' (line 1528)
    args_180123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 33), 'args', False)
    # Processing the call keyword arguments (line 1528)
    kwargs_180124 = {}
    # Getting the type of 'wrap_function' (line 1528)
    wrap_function_180121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 16), 'wrap_function', False)
    # Calling wrap_function(args, kwargs) (line 1528)
    wrap_function_call_result_180125 = invoke(stypy.reporting.localization.Localization(__file__, 1528, 16), wrap_function_180121, *[f_180122, args_180123], **kwargs_180124)
    
    # Obtaining the member '__getitem__' of a type (line 1528)
    getitem___180126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1528, 4), wrap_function_call_result_180125, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1528)
    subscript_call_result_180127 = invoke(stypy.reporting.localization.Localization(__file__, 1528, 4), getitem___180126, int_180120)
    
    # Assigning a type to the variable 'tuple_var_assignment_176655' (line 1528)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1528, 4), 'tuple_var_assignment_176655', subscript_call_result_180127)
    
    # Assigning a Subscript to a Name (line 1528):
    
    # Obtaining the type of the subscript
    int_180128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1528, 4), 'int')
    
    # Call to wrap_function(...): (line 1528)
    # Processing the call arguments (line 1528)
    # Getting the type of 'f' (line 1528)
    f_180130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 30), 'f', False)
    # Getting the type of 'args' (line 1528)
    args_180131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 33), 'args', False)
    # Processing the call keyword arguments (line 1528)
    kwargs_180132 = {}
    # Getting the type of 'wrap_function' (line 1528)
    wrap_function_180129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 16), 'wrap_function', False)
    # Calling wrap_function(args, kwargs) (line 1528)
    wrap_function_call_result_180133 = invoke(stypy.reporting.localization.Localization(__file__, 1528, 16), wrap_function_180129, *[f_180130, args_180131], **kwargs_180132)
    
    # Obtaining the member '__getitem__' of a type (line 1528)
    getitem___180134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1528, 4), wrap_function_call_result_180133, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1528)
    subscript_call_result_180135 = invoke(stypy.reporting.localization.Localization(__file__, 1528, 4), getitem___180134, int_180128)
    
    # Assigning a type to the variable 'tuple_var_assignment_176656' (line 1528)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1528, 4), 'tuple_var_assignment_176656', subscript_call_result_180135)
    
    # Assigning a Name to a Name (line 1528):
    # Getting the type of 'tuple_var_assignment_176655' (line 1528)
    tuple_var_assignment_176655_180136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 4), 'tuple_var_assignment_176655')
    # Assigning a type to the variable 'fcalls' (line 1528)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1528, 4), 'fcalls', tuple_var_assignment_176655_180136)
    
    # Assigning a Name to a Name (line 1528):
    # Getting the type of 'tuple_var_assignment_176656' (line 1528)
    tuple_var_assignment_176656_180137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 4), 'tuple_var_assignment_176656')
    # Assigning a type to the variable 'f' (line 1528)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1528, 12), 'f', tuple_var_assignment_176656_180137)
    
    # Assigning a Call to a Tuple (line 1529):
    
    # Assigning a Subscript to a Name (line 1529):
    
    # Obtaining the type of the subscript
    int_180138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1529, 4), 'int')
    
    # Call to wrap_function(...): (line 1529)
    # Processing the call arguments (line 1529)
    # Getting the type of 'fprime' (line 1529)
    fprime_180140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 35), 'fprime', False)
    # Getting the type of 'args' (line 1529)
    args_180141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 43), 'args', False)
    # Processing the call keyword arguments (line 1529)
    kwargs_180142 = {}
    # Getting the type of 'wrap_function' (line 1529)
    wrap_function_180139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 21), 'wrap_function', False)
    # Calling wrap_function(args, kwargs) (line 1529)
    wrap_function_call_result_180143 = invoke(stypy.reporting.localization.Localization(__file__, 1529, 21), wrap_function_180139, *[fprime_180140, args_180141], **kwargs_180142)
    
    # Obtaining the member '__getitem__' of a type (line 1529)
    getitem___180144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1529, 4), wrap_function_call_result_180143, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1529)
    subscript_call_result_180145 = invoke(stypy.reporting.localization.Localization(__file__, 1529, 4), getitem___180144, int_180138)
    
    # Assigning a type to the variable 'tuple_var_assignment_176657' (line 1529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'tuple_var_assignment_176657', subscript_call_result_180145)
    
    # Assigning a Subscript to a Name (line 1529):
    
    # Obtaining the type of the subscript
    int_180146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1529, 4), 'int')
    
    # Call to wrap_function(...): (line 1529)
    # Processing the call arguments (line 1529)
    # Getting the type of 'fprime' (line 1529)
    fprime_180148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 35), 'fprime', False)
    # Getting the type of 'args' (line 1529)
    args_180149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 43), 'args', False)
    # Processing the call keyword arguments (line 1529)
    kwargs_180150 = {}
    # Getting the type of 'wrap_function' (line 1529)
    wrap_function_180147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 21), 'wrap_function', False)
    # Calling wrap_function(args, kwargs) (line 1529)
    wrap_function_call_result_180151 = invoke(stypy.reporting.localization.Localization(__file__, 1529, 21), wrap_function_180147, *[fprime_180148, args_180149], **kwargs_180150)
    
    # Obtaining the member '__getitem__' of a type (line 1529)
    getitem___180152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1529, 4), wrap_function_call_result_180151, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1529)
    subscript_call_result_180153 = invoke(stypy.reporting.localization.Localization(__file__, 1529, 4), getitem___180152, int_180146)
    
    # Assigning a type to the variable 'tuple_var_assignment_176658' (line 1529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'tuple_var_assignment_176658', subscript_call_result_180153)
    
    # Assigning a Name to a Name (line 1529):
    # Getting the type of 'tuple_var_assignment_176657' (line 1529)
    tuple_var_assignment_176657_180154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'tuple_var_assignment_176657')
    # Assigning a type to the variable 'gcalls' (line 1529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'gcalls', tuple_var_assignment_176657_180154)
    
    # Assigning a Name to a Name (line 1529):
    # Getting the type of 'tuple_var_assignment_176658' (line 1529)
    tuple_var_assignment_176658_180155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'tuple_var_assignment_176658')
    # Assigning a type to the variable 'fprime' (line 1529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 12), 'fprime', tuple_var_assignment_176658_180155)
    
    # Assigning a Num to a Name (line 1530):
    
    # Assigning a Num to a Name (line 1530):
    int_180156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1530, 13), 'int')
    # Assigning a type to the variable 'hcalls' (line 1530)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1530, 4), 'hcalls', int_180156)
    
    # Type idiom detected: calculating its left and rigth part (line 1531)
    # Getting the type of 'maxiter' (line 1531)
    maxiter_180157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 7), 'maxiter')
    # Getting the type of 'None' (line 1531)
    None_180158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 18), 'None')
    
    (may_be_180159, more_types_in_union_180160) = may_be_none(maxiter_180157, None_180158)

    if may_be_180159:

        if more_types_in_union_180160:
            # Runtime conditional SSA (line 1531)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BinOp to a Name (line 1532):
        
        # Assigning a BinOp to a Name (line 1532):
        
        # Call to len(...): (line 1532)
        # Processing the call arguments (line 1532)
        # Getting the type of 'x0' (line 1532)
        x0_180162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 22), 'x0', False)
        # Processing the call keyword arguments (line 1532)
        kwargs_180163 = {}
        # Getting the type of 'len' (line 1532)
        len_180161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 18), 'len', False)
        # Calling len(args, kwargs) (line 1532)
        len_call_result_180164 = invoke(stypy.reporting.localization.Localization(__file__, 1532, 18), len_180161, *[x0_180162], **kwargs_180163)
        
        int_180165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1532, 26), 'int')
        # Applying the binary operator '*' (line 1532)
        result_mul_180166 = python_operator(stypy.reporting.localization.Localization(__file__, 1532, 18), '*', len_call_result_180164, int_180165)
        
        # Assigning a type to the variable 'maxiter' (line 1532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 8), 'maxiter', result_mul_180166)

        if more_types_in_union_180160:
            # SSA join for if statement (line 1531)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a BinOp to a Name (line 1533):
    
    # Assigning a BinOp to a Name (line 1533):
    int_180167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1533, 17), 'int')
    
    # Call to len(...): (line 1533)
    # Processing the call arguments (line 1533)
    # Getting the type of 'x0' (line 1533)
    x0_180169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 24), 'x0', False)
    # Processing the call keyword arguments (line 1533)
    kwargs_180170 = {}
    # Getting the type of 'len' (line 1533)
    len_180168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 20), 'len', False)
    # Calling len(args, kwargs) (line 1533)
    len_call_result_180171 = invoke(stypy.reporting.localization.Localization(__file__, 1533, 20), len_180168, *[x0_180169], **kwargs_180170)
    
    # Applying the binary operator '*' (line 1533)
    result_mul_180172 = python_operator(stypy.reporting.localization.Localization(__file__, 1533, 17), '*', int_180167, len_call_result_180171)
    
    # Assigning a type to the variable 'cg_maxiter' (line 1533)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1533, 4), 'cg_maxiter', result_mul_180172)
    
    # Assigning a BinOp to a Name (line 1535):
    
    # Assigning a BinOp to a Name (line 1535):
    
    # Call to len(...): (line 1535)
    # Processing the call arguments (line 1535)
    # Getting the type of 'x0' (line 1535)
    x0_180174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 15), 'x0', False)
    # Processing the call keyword arguments (line 1535)
    kwargs_180175 = {}
    # Getting the type of 'len' (line 1535)
    len_180173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 11), 'len', False)
    # Calling len(args, kwargs) (line 1535)
    len_call_result_180176 = invoke(stypy.reporting.localization.Localization(__file__, 1535, 11), len_180173, *[x0_180174], **kwargs_180175)
    
    # Getting the type of 'avextol' (line 1535)
    avextol_180177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 21), 'avextol')
    # Applying the binary operator '*' (line 1535)
    result_mul_180178 = python_operator(stypy.reporting.localization.Localization(__file__, 1535, 11), '*', len_call_result_180176, avextol_180177)
    
    # Assigning a type to the variable 'xtol' (line 1535)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1535, 4), 'xtol', result_mul_180178)
    
    # Assigning a List to a Name (line 1536):
    
    # Assigning a List to a Name (line 1536):
    
    # Obtaining an instance of the builtin type 'list' (line 1536)
    list_180179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1536, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1536)
    # Adding element type (line 1536)
    int_180180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1536, 14), 'int')
    # Getting the type of 'xtol' (line 1536)
    xtol_180181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 18), 'xtol')
    # Applying the binary operator '*' (line 1536)
    result_mul_180182 = python_operator(stypy.reporting.localization.Localization(__file__, 1536, 14), '*', int_180180, xtol_180181)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1536, 13), list_180179, result_mul_180182)
    
    # Assigning a type to the variable 'update' (line 1536)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1536, 4), 'update', list_180179)
    
    # Assigning a Name to a Name (line 1537):
    
    # Assigning a Name to a Name (line 1537):
    # Getting the type of 'x0' (line 1537)
    x0_180183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 9), 'x0')
    # Assigning a type to the variable 'xk' (line 1537)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1537, 4), 'xk', x0_180183)
    
    # Getting the type of 'retall' (line 1538)
    retall_180184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 7), 'retall')
    # Testing the type of an if condition (line 1538)
    if_condition_180185 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1538, 4), retall_180184)
    # Assigning a type to the variable 'if_condition_180185' (line 1538)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 4), 'if_condition_180185', if_condition_180185)
    # SSA begins for if statement (line 1538)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a List to a Name (line 1539):
    
    # Assigning a List to a Name (line 1539):
    
    # Obtaining an instance of the builtin type 'list' (line 1539)
    list_180186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1539, 18), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1539)
    # Adding element type (line 1539)
    # Getting the type of 'xk' (line 1539)
    xk_180187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 19), 'xk')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1539, 18), list_180186, xk_180187)
    
    # Assigning a type to the variable 'allvecs' (line 1539)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 8), 'allvecs', list_180186)
    # SSA join for if statement (line 1538)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 1540):
    
    # Assigning a Num to a Name (line 1540):
    int_180188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1540, 8), 'int')
    # Assigning a type to the variable 'k' (line 1540)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1540, 4), 'k', int_180188)
    
    # Assigning a Call to a Name (line 1541):
    
    # Assigning a Call to a Name (line 1541):
    
    # Call to f(...): (line 1541)
    # Processing the call arguments (line 1541)
    # Getting the type of 'x0' (line 1541)
    x0_180190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 17), 'x0', False)
    # Processing the call keyword arguments (line 1541)
    kwargs_180191 = {}
    # Getting the type of 'f' (line 1541)
    f_180189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 15), 'f', False)
    # Calling f(args, kwargs) (line 1541)
    f_call_result_180192 = invoke(stypy.reporting.localization.Localization(__file__, 1541, 15), f_180189, *[x0_180190], **kwargs_180191)
    
    # Assigning a type to the variable 'old_fval' (line 1541)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1541, 4), 'old_fval', f_call_result_180192)
    
    # Assigning a Name to a Name (line 1542):
    
    # Assigning a Name to a Name (line 1542):
    # Getting the type of 'None' (line 1542)
    None_180193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 19), 'None')
    # Assigning a type to the variable 'old_old_fval' (line 1542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1542, 4), 'old_old_fval', None_180193)
    
    # Assigning a Attribute to a Name (line 1543):
    
    # Assigning a Attribute to a Name (line 1543):
    
    # Call to finfo(...): (line 1543)
    # Processing the call arguments (line 1543)
    # Getting the type of 'numpy' (line 1543)
    numpy_180196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 29), 'numpy', False)
    # Obtaining the member 'float64' of a type (line 1543)
    float64_180197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 29), numpy_180196, 'float64')
    # Processing the call keyword arguments (line 1543)
    kwargs_180198 = {}
    # Getting the type of 'numpy' (line 1543)
    numpy_180194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 17), 'numpy', False)
    # Obtaining the member 'finfo' of a type (line 1543)
    finfo_180195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 17), numpy_180194, 'finfo')
    # Calling finfo(args, kwargs) (line 1543)
    finfo_call_result_180199 = invoke(stypy.reporting.localization.Localization(__file__, 1543, 17), finfo_180195, *[float64_180197], **kwargs_180198)
    
    # Obtaining the member 'eps' of a type (line 1543)
    eps_180200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 17), finfo_call_result_180199, 'eps')
    # Assigning a type to the variable 'float64eps' (line 1543)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1543, 4), 'float64eps', eps_180200)
    
    
    
    # Call to reduce(...): (line 1544)
    # Processing the call arguments (line 1544)
    
    # Call to abs(...): (line 1544)
    # Processing the call arguments (line 1544)
    # Getting the type of 'update' (line 1544)
    update_180206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 37), 'update', False)
    # Processing the call keyword arguments (line 1544)
    kwargs_180207 = {}
    # Getting the type of 'numpy' (line 1544)
    numpy_180204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 27), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 1544)
    abs_180205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1544, 27), numpy_180204, 'abs')
    # Calling abs(args, kwargs) (line 1544)
    abs_call_result_180208 = invoke(stypy.reporting.localization.Localization(__file__, 1544, 27), abs_180205, *[update_180206], **kwargs_180207)
    
    # Processing the call keyword arguments (line 1544)
    kwargs_180209 = {}
    # Getting the type of 'numpy' (line 1544)
    numpy_180201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 10), 'numpy', False)
    # Obtaining the member 'add' of a type (line 1544)
    add_180202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1544, 10), numpy_180201, 'add')
    # Obtaining the member 'reduce' of a type (line 1544)
    reduce_180203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1544, 10), add_180202, 'reduce')
    # Calling reduce(args, kwargs) (line 1544)
    reduce_call_result_180210 = invoke(stypy.reporting.localization.Localization(__file__, 1544, 10), reduce_180203, *[abs_call_result_180208], **kwargs_180209)
    
    # Getting the type of 'xtol' (line 1544)
    xtol_180211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 48), 'xtol')
    # Applying the binary operator '>' (line 1544)
    result_gt_180212 = python_operator(stypy.reporting.localization.Localization(__file__, 1544, 10), '>', reduce_call_result_180210, xtol_180211)
    
    # Testing the type of an if condition (line 1544)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1544, 4), result_gt_180212)
    # SSA begins for while statement (line 1544)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    
    # Getting the type of 'k' (line 1545)
    k_180213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 11), 'k')
    # Getting the type of 'maxiter' (line 1545)
    maxiter_180214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 16), 'maxiter')
    # Applying the binary operator '>=' (line 1545)
    result_ge_180215 = python_operator(stypy.reporting.localization.Localization(__file__, 1545, 11), '>=', k_180213, maxiter_180214)
    
    # Testing the type of an if condition (line 1545)
    if_condition_180216 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1545, 8), result_ge_180215)
    # Assigning a type to the variable 'if_condition_180216' (line 1545)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1545, 8), 'if_condition_180216', if_condition_180216)
    # SSA begins for if statement (line 1545)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1546):
    
    # Assigning a BinOp to a Name (line 1546):
    str_180217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1546, 18), 'str', 'Warning: ')
    
    # Obtaining the type of the subscript
    str_180218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1546, 48), 'str', 'maxiter')
    # Getting the type of '_status_message' (line 1546)
    _status_message_180219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 32), '_status_message')
    # Obtaining the member '__getitem__' of a type (line 1546)
    getitem___180220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1546, 32), _status_message_180219, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1546)
    subscript_call_result_180221 = invoke(stypy.reporting.localization.Localization(__file__, 1546, 32), getitem___180220, str_180218)
    
    # Applying the binary operator '+' (line 1546)
    result_add_180222 = python_operator(stypy.reporting.localization.Localization(__file__, 1546, 18), '+', str_180217, subscript_call_result_180221)
    
    # Assigning a type to the variable 'msg' (line 1546)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1546, 12), 'msg', result_add_180222)
    
    # Call to terminate(...): (line 1547)
    # Processing the call arguments (line 1547)
    int_180224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1547, 29), 'int')
    # Getting the type of 'msg' (line 1547)
    msg_180225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 32), 'msg', False)
    # Processing the call keyword arguments (line 1547)
    kwargs_180226 = {}
    # Getting the type of 'terminate' (line 1547)
    terminate_180223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 19), 'terminate', False)
    # Calling terminate(args, kwargs) (line 1547)
    terminate_call_result_180227 = invoke(stypy.reporting.localization.Localization(__file__, 1547, 19), terminate_180223, *[int_180224, msg_180225], **kwargs_180226)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1547)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1547, 12), 'stypy_return_type', terminate_call_result_180227)
    # SSA join for if statement (line 1545)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a UnaryOp to a Name (line 1550):
    
    # Assigning a UnaryOp to a Name (line 1550):
    
    
    # Call to fprime(...): (line 1550)
    # Processing the call arguments (line 1550)
    # Getting the type of 'xk' (line 1550)
    xk_180229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 20), 'xk', False)
    # Processing the call keyword arguments (line 1550)
    kwargs_180230 = {}
    # Getting the type of 'fprime' (line 1550)
    fprime_180228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 13), 'fprime', False)
    # Calling fprime(args, kwargs) (line 1550)
    fprime_call_result_180231 = invoke(stypy.reporting.localization.Localization(__file__, 1550, 13), fprime_180228, *[xk_180229], **kwargs_180230)
    
    # Applying the 'usub' unary operator (line 1550)
    result___neg___180232 = python_operator(stypy.reporting.localization.Localization(__file__, 1550, 12), 'usub', fprime_call_result_180231)
    
    # Assigning a type to the variable 'b' (line 1550)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1550, 8), 'b', result___neg___180232)
    
    # Assigning a Call to a Name (line 1551):
    
    # Assigning a Call to a Name (line 1551):
    
    # Call to reduce(...): (line 1551)
    # Processing the call arguments (line 1551)
    
    # Call to abs(...): (line 1551)
    # Processing the call arguments (line 1551)
    # Getting the type of 'b' (line 1551)
    b_180238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 45), 'b', False)
    # Processing the call keyword arguments (line 1551)
    kwargs_180239 = {}
    # Getting the type of 'numpy' (line 1551)
    numpy_180236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 35), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 1551)
    abs_180237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1551, 35), numpy_180236, 'abs')
    # Calling abs(args, kwargs) (line 1551)
    abs_call_result_180240 = invoke(stypy.reporting.localization.Localization(__file__, 1551, 35), abs_180237, *[b_180238], **kwargs_180239)
    
    # Processing the call keyword arguments (line 1551)
    kwargs_180241 = {}
    # Getting the type of 'numpy' (line 1551)
    numpy_180233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 18), 'numpy', False)
    # Obtaining the member 'add' of a type (line 1551)
    add_180234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1551, 18), numpy_180233, 'add')
    # Obtaining the member 'reduce' of a type (line 1551)
    reduce_180235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1551, 18), add_180234, 'reduce')
    # Calling reduce(args, kwargs) (line 1551)
    reduce_call_result_180242 = invoke(stypy.reporting.localization.Localization(__file__, 1551, 18), reduce_180235, *[abs_call_result_180240], **kwargs_180241)
    
    # Assigning a type to the variable 'maggrad' (line 1551)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1551, 8), 'maggrad', reduce_call_result_180242)
    
    # Assigning a Call to a Name (line 1552):
    
    # Assigning a Call to a Name (line 1552):
    
    # Call to min(...): (line 1552)
    # Processing the call arguments (line 1552)
    
    # Obtaining an instance of the builtin type 'list' (line 1552)
    list_180245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1552, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1552)
    # Adding element type (line 1552)
    float_180246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1552, 25), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1552, 24), list_180245, float_180246)
    # Adding element type (line 1552)
    
    # Call to sqrt(...): (line 1552)
    # Processing the call arguments (line 1552)
    # Getting the type of 'maggrad' (line 1552)
    maggrad_180249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 41), 'maggrad', False)
    # Processing the call keyword arguments (line 1552)
    kwargs_180250 = {}
    # Getting the type of 'numpy' (line 1552)
    numpy_180247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 30), 'numpy', False)
    # Obtaining the member 'sqrt' of a type (line 1552)
    sqrt_180248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1552, 30), numpy_180247, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1552)
    sqrt_call_result_180251 = invoke(stypy.reporting.localization.Localization(__file__, 1552, 30), sqrt_180248, *[maggrad_180249], **kwargs_180250)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1552, 24), list_180245, sqrt_call_result_180251)
    
    # Processing the call keyword arguments (line 1552)
    kwargs_180252 = {}
    # Getting the type of 'numpy' (line 1552)
    numpy_180243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 14), 'numpy', False)
    # Obtaining the member 'min' of a type (line 1552)
    min_180244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1552, 14), numpy_180243, 'min')
    # Calling min(args, kwargs) (line 1552)
    min_call_result_180253 = invoke(stypy.reporting.localization.Localization(__file__, 1552, 14), min_180244, *[list_180245], **kwargs_180252)
    
    # Assigning a type to the variable 'eta' (line 1552)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1552, 8), 'eta', min_call_result_180253)
    
    # Assigning a BinOp to a Name (line 1553):
    
    # Assigning a BinOp to a Name (line 1553):
    # Getting the type of 'eta' (line 1553)
    eta_180254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 19), 'eta')
    # Getting the type of 'maggrad' (line 1553)
    maggrad_180255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 25), 'maggrad')
    # Applying the binary operator '*' (line 1553)
    result_mul_180256 = python_operator(stypy.reporting.localization.Localization(__file__, 1553, 19), '*', eta_180254, maggrad_180255)
    
    # Assigning a type to the variable 'termcond' (line 1553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1553, 8), 'termcond', result_mul_180256)
    
    # Assigning a Call to a Name (line 1554):
    
    # Assigning a Call to a Name (line 1554):
    
    # Call to zeros(...): (line 1554)
    # Processing the call arguments (line 1554)
    
    # Call to len(...): (line 1554)
    # Processing the call arguments (line 1554)
    # Getting the type of 'x0' (line 1554)
    x0_180259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1554, 26), 'x0', False)
    # Processing the call keyword arguments (line 1554)
    kwargs_180260 = {}
    # Getting the type of 'len' (line 1554)
    len_180258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1554, 22), 'len', False)
    # Calling len(args, kwargs) (line 1554)
    len_call_result_180261 = invoke(stypy.reporting.localization.Localization(__file__, 1554, 22), len_180258, *[x0_180259], **kwargs_180260)
    
    # Processing the call keyword arguments (line 1554)
    # Getting the type of 'x0' (line 1554)
    x0_180262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1554, 37), 'x0', False)
    # Obtaining the member 'dtype' of a type (line 1554)
    dtype_180263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1554, 37), x0_180262, 'dtype')
    keyword_180264 = dtype_180263
    kwargs_180265 = {'dtype': keyword_180264}
    # Getting the type of 'zeros' (line 1554)
    zeros_180257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1554, 16), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1554)
    zeros_call_result_180266 = invoke(stypy.reporting.localization.Localization(__file__, 1554, 16), zeros_180257, *[len_call_result_180261], **kwargs_180265)
    
    # Assigning a type to the variable 'xsupi' (line 1554)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1554, 8), 'xsupi', zeros_call_result_180266)
    
    # Assigning a UnaryOp to a Name (line 1555):
    
    # Assigning a UnaryOp to a Name (line 1555):
    
    # Getting the type of 'b' (line 1555)
    b_180267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1555, 14), 'b')
    # Applying the 'usub' unary operator (line 1555)
    result___neg___180268 = python_operator(stypy.reporting.localization.Localization(__file__, 1555, 13), 'usub', b_180267)
    
    # Assigning a type to the variable 'ri' (line 1555)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1555, 8), 'ri', result___neg___180268)
    
    # Assigning a UnaryOp to a Name (line 1556):
    
    # Assigning a UnaryOp to a Name (line 1556):
    
    # Getting the type of 'ri' (line 1556)
    ri_180269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 17), 'ri')
    # Applying the 'usub' unary operator (line 1556)
    result___neg___180270 = python_operator(stypy.reporting.localization.Localization(__file__, 1556, 16), 'usub', ri_180269)
    
    # Assigning a type to the variable 'psupi' (line 1556)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1556, 8), 'psupi', result___neg___180270)
    
    # Assigning a Num to a Name (line 1557):
    
    # Assigning a Num to a Name (line 1557):
    int_180271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1557, 12), 'int')
    # Assigning a type to the variable 'i' (line 1557)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1557, 8), 'i', int_180271)
    
    # Assigning a Call to a Name (line 1558):
    
    # Assigning a Call to a Name (line 1558):
    
    # Call to dot(...): (line 1558)
    # Processing the call arguments (line 1558)
    # Getting the type of 'ri' (line 1558)
    ri_180274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 25), 'ri', False)
    # Getting the type of 'ri' (line 1558)
    ri_180275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 29), 'ri', False)
    # Processing the call keyword arguments (line 1558)
    kwargs_180276 = {}
    # Getting the type of 'numpy' (line 1558)
    numpy_180272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 15), 'numpy', False)
    # Obtaining the member 'dot' of a type (line 1558)
    dot_180273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1558, 15), numpy_180272, 'dot')
    # Calling dot(args, kwargs) (line 1558)
    dot_call_result_180277 = invoke(stypy.reporting.localization.Localization(__file__, 1558, 15), dot_180273, *[ri_180274, ri_180275], **kwargs_180276)
    
    # Assigning a type to the variable 'dri0' (line 1558)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1558, 8), 'dri0', dot_call_result_180277)
    
    # Type idiom detected: calculating its left and rigth part (line 1560)
    # Getting the type of 'fhess' (line 1560)
    fhess_180278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 8), 'fhess')
    # Getting the type of 'None' (line 1560)
    None_180279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 24), 'None')
    
    (may_be_180280, more_types_in_union_180281) = may_not_be_none(fhess_180278, None_180279)

    if may_be_180280:

        if more_types_in_union_180281:
            # Runtime conditional SSA (line 1560)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1561):
        
        # Assigning a Call to a Name (line 1561):
        
        # Call to fhess(...): (line 1561)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1561)
        tuple_180283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1561, 24), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1561)
        # Adding element type (line 1561)
        # Getting the type of 'xk' (line 1561)
        xk_180284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 24), 'xk', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1561, 24), tuple_180283, xk_180284)
        
        # Getting the type of 'args' (line 1561)
        args_180285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 31), 'args', False)
        # Applying the binary operator '+' (line 1561)
        result_add_180286 = python_operator(stypy.reporting.localization.Localization(__file__, 1561, 23), '+', tuple_180283, args_180285)
        
        # Processing the call keyword arguments (line 1561)
        kwargs_180287 = {}
        # Getting the type of 'fhess' (line 1561)
        fhess_180282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 16), 'fhess', False)
        # Calling fhess(args, kwargs) (line 1561)
        fhess_call_result_180288 = invoke(stypy.reporting.localization.Localization(__file__, 1561, 16), fhess_180282, *[result_add_180286], **kwargs_180287)
        
        # Assigning a type to the variable 'A' (line 1561)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1561, 12), 'A', fhess_call_result_180288)
        
        # Assigning a BinOp to a Name (line 1562):
        
        # Assigning a BinOp to a Name (line 1562):
        # Getting the type of 'hcalls' (line 1562)
        hcalls_180289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 21), 'hcalls')
        int_180290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1562, 30), 'int')
        # Applying the binary operator '+' (line 1562)
        result_add_180291 = python_operator(stypy.reporting.localization.Localization(__file__, 1562, 21), '+', hcalls_180289, int_180290)
        
        # Assigning a type to the variable 'hcalls' (line 1562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1562, 12), 'hcalls', result_add_180291)

        if more_types_in_union_180281:
            # SSA join for if statement (line 1560)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Call to xrange(...): (line 1564)
    # Processing the call arguments (line 1564)
    # Getting the type of 'cg_maxiter' (line 1564)
    cg_maxiter_180293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 25), 'cg_maxiter', False)
    # Processing the call keyword arguments (line 1564)
    kwargs_180294 = {}
    # Getting the type of 'xrange' (line 1564)
    xrange_180292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 18), 'xrange', False)
    # Calling xrange(args, kwargs) (line 1564)
    xrange_call_result_180295 = invoke(stypy.reporting.localization.Localization(__file__, 1564, 18), xrange_180292, *[cg_maxiter_180293], **kwargs_180294)
    
    # Testing the type of a for loop iterable (line 1564)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1564, 8), xrange_call_result_180295)
    # Getting the type of the for loop variable (line 1564)
    for_loop_var_180296 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1564, 8), xrange_call_result_180295)
    # Assigning a type to the variable 'k2' (line 1564)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1564, 8), 'k2', for_loop_var_180296)
    # SSA begins for a for statement (line 1564)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to reduce(...): (line 1565)
    # Processing the call arguments (line 1565)
    
    # Call to abs(...): (line 1565)
    # Processing the call arguments (line 1565)
    # Getting the type of 'ri' (line 1565)
    ri_180302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 42), 'ri', False)
    # Processing the call keyword arguments (line 1565)
    kwargs_180303 = {}
    # Getting the type of 'numpy' (line 1565)
    numpy_180300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 32), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 1565)
    abs_180301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 32), numpy_180300, 'abs')
    # Calling abs(args, kwargs) (line 1565)
    abs_call_result_180304 = invoke(stypy.reporting.localization.Localization(__file__, 1565, 32), abs_180301, *[ri_180302], **kwargs_180303)
    
    # Processing the call keyword arguments (line 1565)
    kwargs_180305 = {}
    # Getting the type of 'numpy' (line 1565)
    numpy_180297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 15), 'numpy', False)
    # Obtaining the member 'add' of a type (line 1565)
    add_180298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 15), numpy_180297, 'add')
    # Obtaining the member 'reduce' of a type (line 1565)
    reduce_180299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 15), add_180298, 'reduce')
    # Calling reduce(args, kwargs) (line 1565)
    reduce_call_result_180306 = invoke(stypy.reporting.localization.Localization(__file__, 1565, 15), reduce_180299, *[abs_call_result_180304], **kwargs_180305)
    
    # Getting the type of 'termcond' (line 1565)
    termcond_180307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 50), 'termcond')
    # Applying the binary operator '<=' (line 1565)
    result_le_180308 = python_operator(stypy.reporting.localization.Localization(__file__, 1565, 15), '<=', reduce_call_result_180306, termcond_180307)
    
    # Testing the type of an if condition (line 1565)
    if_condition_180309 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1565, 12), result_le_180308)
    # Assigning a type to the variable 'if_condition_180309' (line 1565)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 12), 'if_condition_180309', if_condition_180309)
    # SSA begins for if statement (line 1565)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 1565)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1567)
    # Getting the type of 'fhess' (line 1567)
    fhess_180310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 15), 'fhess')
    # Getting the type of 'None' (line 1567)
    None_180311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 24), 'None')
    
    (may_be_180312, more_types_in_union_180313) = may_be_none(fhess_180310, None_180311)

    if may_be_180312:

        if more_types_in_union_180313:
            # Runtime conditional SSA (line 1567)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Type idiom detected: calculating its left and rigth part (line 1568)
        # Getting the type of 'fhess_p' (line 1568)
        fhess_p_180314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 19), 'fhess_p')
        # Getting the type of 'None' (line 1568)
        None_180315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 30), 'None')
        
        (may_be_180316, more_types_in_union_180317) = may_be_none(fhess_p_180314, None_180315)

        if may_be_180316:

            if more_types_in_union_180317:
                # Runtime conditional SSA (line 1568)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1569):
            
            # Assigning a Call to a Name (line 1569):
            
            # Call to approx_fhess_p(...): (line 1569)
            # Processing the call arguments (line 1569)
            # Getting the type of 'xk' (line 1569)
            xk_180319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1569, 40), 'xk', False)
            # Getting the type of 'psupi' (line 1569)
            psupi_180320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1569, 44), 'psupi', False)
            # Getting the type of 'fprime' (line 1569)
            fprime_180321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1569, 51), 'fprime', False)
            # Getting the type of 'epsilon' (line 1569)
            epsilon_180322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1569, 59), 'epsilon', False)
            # Processing the call keyword arguments (line 1569)
            kwargs_180323 = {}
            # Getting the type of 'approx_fhess_p' (line 1569)
            approx_fhess_p_180318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1569, 25), 'approx_fhess_p', False)
            # Calling approx_fhess_p(args, kwargs) (line 1569)
            approx_fhess_p_call_result_180324 = invoke(stypy.reporting.localization.Localization(__file__, 1569, 25), approx_fhess_p_180318, *[xk_180319, psupi_180320, fprime_180321, epsilon_180322], **kwargs_180323)
            
            # Assigning a type to the variable 'Ap' (line 1569)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1569, 20), 'Ap', approx_fhess_p_call_result_180324)

            if more_types_in_union_180317:
                # Runtime conditional SSA for else branch (line 1568)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_180316) or more_types_in_union_180317):
            
            # Assigning a Call to a Name (line 1571):
            
            # Assigning a Call to a Name (line 1571):
            
            # Call to fhess_p(...): (line 1571)
            # Processing the call arguments (line 1571)
            # Getting the type of 'xk' (line 1571)
            xk_180326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 33), 'xk', False)
            # Getting the type of 'psupi' (line 1571)
            psupi_180327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 37), 'psupi', False)
            # Getting the type of 'args' (line 1571)
            args_180328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 45), 'args', False)
            # Processing the call keyword arguments (line 1571)
            kwargs_180329 = {}
            # Getting the type of 'fhess_p' (line 1571)
            fhess_p_180325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 25), 'fhess_p', False)
            # Calling fhess_p(args, kwargs) (line 1571)
            fhess_p_call_result_180330 = invoke(stypy.reporting.localization.Localization(__file__, 1571, 25), fhess_p_180325, *[xk_180326, psupi_180327, args_180328], **kwargs_180329)
            
            # Assigning a type to the variable 'Ap' (line 1571)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1571, 20), 'Ap', fhess_p_call_result_180330)
            
            # Assigning a BinOp to a Name (line 1572):
            
            # Assigning a BinOp to a Name (line 1572):
            # Getting the type of 'hcalls' (line 1572)
            hcalls_180331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1572, 29), 'hcalls')
            int_180332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1572, 38), 'int')
            # Applying the binary operator '+' (line 1572)
            result_add_180333 = python_operator(stypy.reporting.localization.Localization(__file__, 1572, 29), '+', hcalls_180331, int_180332)
            
            # Assigning a type to the variable 'hcalls' (line 1572)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1572, 20), 'hcalls', result_add_180333)

            if (may_be_180316 and more_types_in_union_180317):
                # SSA join for if statement (line 1568)
                module_type_store = module_type_store.join_ssa_context()


        

        if more_types_in_union_180313:
            # Runtime conditional SSA for else branch (line 1567)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_180312) or more_types_in_union_180313):
        
        # Assigning a Call to a Name (line 1574):
        
        # Assigning a Call to a Name (line 1574):
        
        # Call to dot(...): (line 1574)
        # Processing the call arguments (line 1574)
        # Getting the type of 'A' (line 1574)
        A_180336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 31), 'A', False)
        # Getting the type of 'psupi' (line 1574)
        psupi_180337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 34), 'psupi', False)
        # Processing the call keyword arguments (line 1574)
        kwargs_180338 = {}
        # Getting the type of 'numpy' (line 1574)
        numpy_180334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 21), 'numpy', False)
        # Obtaining the member 'dot' of a type (line 1574)
        dot_180335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1574, 21), numpy_180334, 'dot')
        # Calling dot(args, kwargs) (line 1574)
        dot_call_result_180339 = invoke(stypy.reporting.localization.Localization(__file__, 1574, 21), dot_180335, *[A_180336, psupi_180337], **kwargs_180338)
        
        # Assigning a type to the variable 'Ap' (line 1574)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1574, 16), 'Ap', dot_call_result_180339)

        if (may_be_180312 and more_types_in_union_180313):
            # SSA join for if statement (line 1567)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1576):
    
    # Assigning a Call to a Name (line 1576):
    
    # Call to squeeze(...): (line 1576)
    # Processing the call keyword arguments (line 1576)
    kwargs_180345 = {}
    
    # Call to asarray(...): (line 1576)
    # Processing the call arguments (line 1576)
    # Getting the type of 'Ap' (line 1576)
    Ap_180341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 25), 'Ap', False)
    # Processing the call keyword arguments (line 1576)
    kwargs_180342 = {}
    # Getting the type of 'asarray' (line 1576)
    asarray_180340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 17), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1576)
    asarray_call_result_180343 = invoke(stypy.reporting.localization.Localization(__file__, 1576, 17), asarray_180340, *[Ap_180341], **kwargs_180342)
    
    # Obtaining the member 'squeeze' of a type (line 1576)
    squeeze_180344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1576, 17), asarray_call_result_180343, 'squeeze')
    # Calling squeeze(args, kwargs) (line 1576)
    squeeze_call_result_180346 = invoke(stypy.reporting.localization.Localization(__file__, 1576, 17), squeeze_180344, *[], **kwargs_180345)
    
    # Assigning a type to the variable 'Ap' (line 1576)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1576, 12), 'Ap', squeeze_call_result_180346)
    
    # Assigning a Call to a Name (line 1577):
    
    # Assigning a Call to a Name (line 1577):
    
    # Call to dot(...): (line 1577)
    # Processing the call arguments (line 1577)
    # Getting the type of 'psupi' (line 1577)
    psupi_180349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 29), 'psupi', False)
    # Getting the type of 'Ap' (line 1577)
    Ap_180350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 36), 'Ap', False)
    # Processing the call keyword arguments (line 1577)
    kwargs_180351 = {}
    # Getting the type of 'numpy' (line 1577)
    numpy_180347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 19), 'numpy', False)
    # Obtaining the member 'dot' of a type (line 1577)
    dot_180348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1577, 19), numpy_180347, 'dot')
    # Calling dot(args, kwargs) (line 1577)
    dot_call_result_180352 = invoke(stypy.reporting.localization.Localization(__file__, 1577, 19), dot_180348, *[psupi_180349, Ap_180350], **kwargs_180351)
    
    # Assigning a type to the variable 'curv' (line 1577)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1577, 12), 'curv', dot_call_result_180352)
    
    
    int_180353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1578, 15), 'int')
    # Getting the type of 'curv' (line 1578)
    curv_180354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 20), 'curv')
    # Applying the binary operator '<=' (line 1578)
    result_le_180355 = python_operator(stypy.reporting.localization.Localization(__file__, 1578, 15), '<=', int_180353, curv_180354)
    int_180356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1578, 28), 'int')
    # Getting the type of 'float64eps' (line 1578)
    float64eps_180357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 32), 'float64eps')
    # Applying the binary operator '*' (line 1578)
    result_mul_180358 = python_operator(stypy.reporting.localization.Localization(__file__, 1578, 28), '*', int_180356, float64eps_180357)
    
    # Applying the binary operator '<=' (line 1578)
    result_le_180359 = python_operator(stypy.reporting.localization.Localization(__file__, 1578, 15), '<=', curv_180354, result_mul_180358)
    # Applying the binary operator '&' (line 1578)
    result_and__180360 = python_operator(stypy.reporting.localization.Localization(__file__, 1578, 15), '&', result_le_180355, result_le_180359)
    
    # Testing the type of an if condition (line 1578)
    if_condition_180361 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1578, 12), result_and__180360)
    # Assigning a type to the variable 'if_condition_180361' (line 1578)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1578, 12), 'if_condition_180361', if_condition_180361)
    # SSA begins for if statement (line 1578)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA branch for the else part of an if statement (line 1578)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'curv' (line 1580)
    curv_180362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 17), 'curv')
    int_180363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1580, 24), 'int')
    # Applying the binary operator '<' (line 1580)
    result_lt_180364 = python_operator(stypy.reporting.localization.Localization(__file__, 1580, 17), '<', curv_180362, int_180363)
    
    # Testing the type of an if condition (line 1580)
    if_condition_180365 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1580, 17), result_lt_180364)
    # Assigning a type to the variable 'if_condition_180365' (line 1580)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1580, 17), 'if_condition_180365', if_condition_180365)
    # SSA begins for if statement (line 1580)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'i' (line 1581)
    i_180366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 20), 'i')
    int_180367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1581, 24), 'int')
    # Applying the binary operator '>' (line 1581)
    result_gt_180368 = python_operator(stypy.reporting.localization.Localization(__file__, 1581, 20), '>', i_180366, int_180367)
    
    # Testing the type of an if condition (line 1581)
    if_condition_180369 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1581, 16), result_gt_180368)
    # Assigning a type to the variable 'if_condition_180369' (line 1581)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1581, 16), 'if_condition_180369', if_condition_180369)
    # SSA begins for if statement (line 1581)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA branch for the else part of an if statement (line 1581)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 1585):
    
    # Assigning a BinOp to a Name (line 1585):
    # Getting the type of 'dri0' (line 1585)
    dri0_180370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 28), 'dri0')
    
    # Getting the type of 'curv' (line 1585)
    curv_180371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 37), 'curv')
    # Applying the 'usub' unary operator (line 1585)
    result___neg___180372 = python_operator(stypy.reporting.localization.Localization(__file__, 1585, 36), 'usub', curv_180371)
    
    # Applying the binary operator 'div' (line 1585)
    result_div_180373 = python_operator(stypy.reporting.localization.Localization(__file__, 1585, 28), 'div', dri0_180370, result___neg___180372)
    
    # Getting the type of 'b' (line 1585)
    b_180374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 45), 'b')
    # Applying the binary operator '*' (line 1585)
    result_mul_180375 = python_operator(stypy.reporting.localization.Localization(__file__, 1585, 43), '*', result_div_180373, b_180374)
    
    # Assigning a type to the variable 'xsupi' (line 1585)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1585, 20), 'xsupi', result_mul_180375)
    # SSA join for if statement (line 1581)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1580)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1578)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1587):
    
    # Assigning a BinOp to a Name (line 1587):
    # Getting the type of 'dri0' (line 1587)
    dri0_180376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 21), 'dri0')
    # Getting the type of 'curv' (line 1587)
    curv_180377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 28), 'curv')
    # Applying the binary operator 'div' (line 1587)
    result_div_180378 = python_operator(stypy.reporting.localization.Localization(__file__, 1587, 21), 'div', dri0_180376, curv_180377)
    
    # Assigning a type to the variable 'alphai' (line 1587)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1587, 12), 'alphai', result_div_180378)
    
    # Assigning a BinOp to a Name (line 1588):
    
    # Assigning a BinOp to a Name (line 1588):
    # Getting the type of 'xsupi' (line 1588)
    xsupi_180379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1588, 20), 'xsupi')
    # Getting the type of 'alphai' (line 1588)
    alphai_180380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1588, 28), 'alphai')
    # Getting the type of 'psupi' (line 1588)
    psupi_180381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1588, 37), 'psupi')
    # Applying the binary operator '*' (line 1588)
    result_mul_180382 = python_operator(stypy.reporting.localization.Localization(__file__, 1588, 28), '*', alphai_180380, psupi_180381)
    
    # Applying the binary operator '+' (line 1588)
    result_add_180383 = python_operator(stypy.reporting.localization.Localization(__file__, 1588, 20), '+', xsupi_180379, result_mul_180382)
    
    # Assigning a type to the variable 'xsupi' (line 1588)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1588, 12), 'xsupi', result_add_180383)
    
    # Assigning a BinOp to a Name (line 1589):
    
    # Assigning a BinOp to a Name (line 1589):
    # Getting the type of 'ri' (line 1589)
    ri_180384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 17), 'ri')
    # Getting the type of 'alphai' (line 1589)
    alphai_180385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 22), 'alphai')
    # Getting the type of 'Ap' (line 1589)
    Ap_180386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 31), 'Ap')
    # Applying the binary operator '*' (line 1589)
    result_mul_180387 = python_operator(stypy.reporting.localization.Localization(__file__, 1589, 22), '*', alphai_180385, Ap_180386)
    
    # Applying the binary operator '+' (line 1589)
    result_add_180388 = python_operator(stypy.reporting.localization.Localization(__file__, 1589, 17), '+', ri_180384, result_mul_180387)
    
    # Assigning a type to the variable 'ri' (line 1589)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1589, 12), 'ri', result_add_180388)
    
    # Assigning a Call to a Name (line 1590):
    
    # Assigning a Call to a Name (line 1590):
    
    # Call to dot(...): (line 1590)
    # Processing the call arguments (line 1590)
    # Getting the type of 'ri' (line 1590)
    ri_180391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1590, 29), 'ri', False)
    # Getting the type of 'ri' (line 1590)
    ri_180392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1590, 33), 'ri', False)
    # Processing the call keyword arguments (line 1590)
    kwargs_180393 = {}
    # Getting the type of 'numpy' (line 1590)
    numpy_180389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1590, 19), 'numpy', False)
    # Obtaining the member 'dot' of a type (line 1590)
    dot_180390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1590, 19), numpy_180389, 'dot')
    # Calling dot(args, kwargs) (line 1590)
    dot_call_result_180394 = invoke(stypy.reporting.localization.Localization(__file__, 1590, 19), dot_180390, *[ri_180391, ri_180392], **kwargs_180393)
    
    # Assigning a type to the variable 'dri1' (line 1590)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1590, 12), 'dri1', dot_call_result_180394)
    
    # Assigning a BinOp to a Name (line 1591):
    
    # Assigning a BinOp to a Name (line 1591):
    # Getting the type of 'dri1' (line 1591)
    dri1_180395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 20), 'dri1')
    # Getting the type of 'dri0' (line 1591)
    dri0_180396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 27), 'dri0')
    # Applying the binary operator 'div' (line 1591)
    result_div_180397 = python_operator(stypy.reporting.localization.Localization(__file__, 1591, 20), 'div', dri1_180395, dri0_180396)
    
    # Assigning a type to the variable 'betai' (line 1591)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1591, 12), 'betai', result_div_180397)
    
    # Assigning a BinOp to a Name (line 1592):
    
    # Assigning a BinOp to a Name (line 1592):
    
    # Getting the type of 'ri' (line 1592)
    ri_180398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1592, 21), 'ri')
    # Applying the 'usub' unary operator (line 1592)
    result___neg___180399 = python_operator(stypy.reporting.localization.Localization(__file__, 1592, 20), 'usub', ri_180398)
    
    # Getting the type of 'betai' (line 1592)
    betai_180400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1592, 26), 'betai')
    # Getting the type of 'psupi' (line 1592)
    psupi_180401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1592, 34), 'psupi')
    # Applying the binary operator '*' (line 1592)
    result_mul_180402 = python_operator(stypy.reporting.localization.Localization(__file__, 1592, 26), '*', betai_180400, psupi_180401)
    
    # Applying the binary operator '+' (line 1592)
    result_add_180403 = python_operator(stypy.reporting.localization.Localization(__file__, 1592, 20), '+', result___neg___180399, result_mul_180402)
    
    # Assigning a type to the variable 'psupi' (line 1592)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1592, 12), 'psupi', result_add_180403)
    
    # Assigning a BinOp to a Name (line 1593):
    
    # Assigning a BinOp to a Name (line 1593):
    # Getting the type of 'i' (line 1593)
    i_180404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 16), 'i')
    int_180405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1593, 20), 'int')
    # Applying the binary operator '+' (line 1593)
    result_add_180406 = python_operator(stypy.reporting.localization.Localization(__file__, 1593, 16), '+', i_180404, int_180405)
    
    # Assigning a type to the variable 'i' (line 1593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 12), 'i', result_add_180406)
    
    # Assigning a Name to a Name (line 1594):
    
    # Assigning a Name to a Name (line 1594):
    # Getting the type of 'dri1' (line 1594)
    dri1_180407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 19), 'dri1')
    # Assigning a type to the variable 'dri0' (line 1594)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1594, 12), 'dri0', dri1_180407)
    # SSA branch for the else part of a for statement (line 1564)
    module_type_store.open_ssa_branch('for loop else')
    
    # Assigning a Str to a Name (line 1597):
    
    # Assigning a Str to a Name (line 1597):
    str_180408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1597, 19), 'str', "Warning: CG iterations didn't converge.  The Hessian is not positive definite.")
    # Assigning a type to the variable 'msg' (line 1597)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1597, 12), 'msg', str_180408)
    
    # Call to terminate(...): (line 1599)
    # Processing the call arguments (line 1599)
    int_180410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1599, 29), 'int')
    # Getting the type of 'msg' (line 1599)
    msg_180411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 32), 'msg', False)
    # Processing the call keyword arguments (line 1599)
    kwargs_180412 = {}
    # Getting the type of 'terminate' (line 1599)
    terminate_180409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 19), 'terminate', False)
    # Calling terminate(args, kwargs) (line 1599)
    terminate_call_result_180413 = invoke(stypy.reporting.localization.Localization(__file__, 1599, 19), terminate_180409, *[int_180410, msg_180411], **kwargs_180412)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1599, 12), 'stypy_return_type', terminate_call_result_180413)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 1601):
    
    # Assigning a Name to a Name (line 1601):
    # Getting the type of 'xsupi' (line 1601)
    xsupi_180414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 13), 'xsupi')
    # Assigning a type to the variable 'pk' (line 1601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1601, 8), 'pk', xsupi_180414)
    
    # Assigning a UnaryOp to a Name (line 1602):
    
    # Assigning a UnaryOp to a Name (line 1602):
    
    # Getting the type of 'b' (line 1602)
    b_180415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1602, 15), 'b')
    # Applying the 'usub' unary operator (line 1602)
    result___neg___180416 = python_operator(stypy.reporting.localization.Localization(__file__, 1602, 14), 'usub', b_180415)
    
    # Assigning a type to the variable 'gfk' (line 1602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1602, 8), 'gfk', result___neg___180416)
    
    
    # SSA begins for try-except statement (line 1604)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Tuple (line 1605):
    
    # Assigning a Subscript to a Name (line 1605):
    
    # Obtaining the type of the subscript
    int_180417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1605, 12), 'int')
    
    # Call to _line_search_wolfe12(...): (line 1606)
    # Processing the call arguments (line 1606)
    # Getting the type of 'f' (line 1606)
    f_180419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 42), 'f', False)
    # Getting the type of 'fprime' (line 1606)
    fprime_180420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 45), 'fprime', False)
    # Getting the type of 'xk' (line 1606)
    xk_180421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 53), 'xk', False)
    # Getting the type of 'pk' (line 1606)
    pk_180422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 57), 'pk', False)
    # Getting the type of 'gfk' (line 1606)
    gfk_180423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 61), 'gfk', False)
    # Getting the type of 'old_fval' (line 1607)
    old_fval_180424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 42), 'old_fval', False)
    # Getting the type of 'old_old_fval' (line 1607)
    old_old_fval_180425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 52), 'old_old_fval', False)
    # Processing the call keyword arguments (line 1606)
    kwargs_180426 = {}
    # Getting the type of '_line_search_wolfe12' (line 1606)
    _line_search_wolfe12_180418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 21), '_line_search_wolfe12', False)
    # Calling _line_search_wolfe12(args, kwargs) (line 1606)
    _line_search_wolfe12_call_result_180427 = invoke(stypy.reporting.localization.Localization(__file__, 1606, 21), _line_search_wolfe12_180418, *[f_180419, fprime_180420, xk_180421, pk_180422, gfk_180423, old_fval_180424, old_old_fval_180425], **kwargs_180426)
    
    # Obtaining the member '__getitem__' of a type (line 1605)
    getitem___180428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1605, 12), _line_search_wolfe12_call_result_180427, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1605)
    subscript_call_result_180429 = invoke(stypy.reporting.localization.Localization(__file__, 1605, 12), getitem___180428, int_180417)
    
    # Assigning a type to the variable 'tuple_var_assignment_176659' (line 1605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1605, 12), 'tuple_var_assignment_176659', subscript_call_result_180429)
    
    # Assigning a Subscript to a Name (line 1605):
    
    # Obtaining the type of the subscript
    int_180430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1605, 12), 'int')
    
    # Call to _line_search_wolfe12(...): (line 1606)
    # Processing the call arguments (line 1606)
    # Getting the type of 'f' (line 1606)
    f_180432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 42), 'f', False)
    # Getting the type of 'fprime' (line 1606)
    fprime_180433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 45), 'fprime', False)
    # Getting the type of 'xk' (line 1606)
    xk_180434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 53), 'xk', False)
    # Getting the type of 'pk' (line 1606)
    pk_180435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 57), 'pk', False)
    # Getting the type of 'gfk' (line 1606)
    gfk_180436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 61), 'gfk', False)
    # Getting the type of 'old_fval' (line 1607)
    old_fval_180437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 42), 'old_fval', False)
    # Getting the type of 'old_old_fval' (line 1607)
    old_old_fval_180438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 52), 'old_old_fval', False)
    # Processing the call keyword arguments (line 1606)
    kwargs_180439 = {}
    # Getting the type of '_line_search_wolfe12' (line 1606)
    _line_search_wolfe12_180431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 21), '_line_search_wolfe12', False)
    # Calling _line_search_wolfe12(args, kwargs) (line 1606)
    _line_search_wolfe12_call_result_180440 = invoke(stypy.reporting.localization.Localization(__file__, 1606, 21), _line_search_wolfe12_180431, *[f_180432, fprime_180433, xk_180434, pk_180435, gfk_180436, old_fval_180437, old_old_fval_180438], **kwargs_180439)
    
    # Obtaining the member '__getitem__' of a type (line 1605)
    getitem___180441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1605, 12), _line_search_wolfe12_call_result_180440, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1605)
    subscript_call_result_180442 = invoke(stypy.reporting.localization.Localization(__file__, 1605, 12), getitem___180441, int_180430)
    
    # Assigning a type to the variable 'tuple_var_assignment_176660' (line 1605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1605, 12), 'tuple_var_assignment_176660', subscript_call_result_180442)
    
    # Assigning a Subscript to a Name (line 1605):
    
    # Obtaining the type of the subscript
    int_180443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1605, 12), 'int')
    
    # Call to _line_search_wolfe12(...): (line 1606)
    # Processing the call arguments (line 1606)
    # Getting the type of 'f' (line 1606)
    f_180445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 42), 'f', False)
    # Getting the type of 'fprime' (line 1606)
    fprime_180446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 45), 'fprime', False)
    # Getting the type of 'xk' (line 1606)
    xk_180447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 53), 'xk', False)
    # Getting the type of 'pk' (line 1606)
    pk_180448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 57), 'pk', False)
    # Getting the type of 'gfk' (line 1606)
    gfk_180449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 61), 'gfk', False)
    # Getting the type of 'old_fval' (line 1607)
    old_fval_180450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 42), 'old_fval', False)
    # Getting the type of 'old_old_fval' (line 1607)
    old_old_fval_180451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 52), 'old_old_fval', False)
    # Processing the call keyword arguments (line 1606)
    kwargs_180452 = {}
    # Getting the type of '_line_search_wolfe12' (line 1606)
    _line_search_wolfe12_180444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 21), '_line_search_wolfe12', False)
    # Calling _line_search_wolfe12(args, kwargs) (line 1606)
    _line_search_wolfe12_call_result_180453 = invoke(stypy.reporting.localization.Localization(__file__, 1606, 21), _line_search_wolfe12_180444, *[f_180445, fprime_180446, xk_180447, pk_180448, gfk_180449, old_fval_180450, old_old_fval_180451], **kwargs_180452)
    
    # Obtaining the member '__getitem__' of a type (line 1605)
    getitem___180454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1605, 12), _line_search_wolfe12_call_result_180453, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1605)
    subscript_call_result_180455 = invoke(stypy.reporting.localization.Localization(__file__, 1605, 12), getitem___180454, int_180443)
    
    # Assigning a type to the variable 'tuple_var_assignment_176661' (line 1605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1605, 12), 'tuple_var_assignment_176661', subscript_call_result_180455)
    
    # Assigning a Subscript to a Name (line 1605):
    
    # Obtaining the type of the subscript
    int_180456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1605, 12), 'int')
    
    # Call to _line_search_wolfe12(...): (line 1606)
    # Processing the call arguments (line 1606)
    # Getting the type of 'f' (line 1606)
    f_180458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 42), 'f', False)
    # Getting the type of 'fprime' (line 1606)
    fprime_180459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 45), 'fprime', False)
    # Getting the type of 'xk' (line 1606)
    xk_180460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 53), 'xk', False)
    # Getting the type of 'pk' (line 1606)
    pk_180461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 57), 'pk', False)
    # Getting the type of 'gfk' (line 1606)
    gfk_180462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 61), 'gfk', False)
    # Getting the type of 'old_fval' (line 1607)
    old_fval_180463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 42), 'old_fval', False)
    # Getting the type of 'old_old_fval' (line 1607)
    old_old_fval_180464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 52), 'old_old_fval', False)
    # Processing the call keyword arguments (line 1606)
    kwargs_180465 = {}
    # Getting the type of '_line_search_wolfe12' (line 1606)
    _line_search_wolfe12_180457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 21), '_line_search_wolfe12', False)
    # Calling _line_search_wolfe12(args, kwargs) (line 1606)
    _line_search_wolfe12_call_result_180466 = invoke(stypy.reporting.localization.Localization(__file__, 1606, 21), _line_search_wolfe12_180457, *[f_180458, fprime_180459, xk_180460, pk_180461, gfk_180462, old_fval_180463, old_old_fval_180464], **kwargs_180465)
    
    # Obtaining the member '__getitem__' of a type (line 1605)
    getitem___180467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1605, 12), _line_search_wolfe12_call_result_180466, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1605)
    subscript_call_result_180468 = invoke(stypy.reporting.localization.Localization(__file__, 1605, 12), getitem___180467, int_180456)
    
    # Assigning a type to the variable 'tuple_var_assignment_176662' (line 1605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1605, 12), 'tuple_var_assignment_176662', subscript_call_result_180468)
    
    # Assigning a Subscript to a Name (line 1605):
    
    # Obtaining the type of the subscript
    int_180469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1605, 12), 'int')
    
    # Call to _line_search_wolfe12(...): (line 1606)
    # Processing the call arguments (line 1606)
    # Getting the type of 'f' (line 1606)
    f_180471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 42), 'f', False)
    # Getting the type of 'fprime' (line 1606)
    fprime_180472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 45), 'fprime', False)
    # Getting the type of 'xk' (line 1606)
    xk_180473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 53), 'xk', False)
    # Getting the type of 'pk' (line 1606)
    pk_180474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 57), 'pk', False)
    # Getting the type of 'gfk' (line 1606)
    gfk_180475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 61), 'gfk', False)
    # Getting the type of 'old_fval' (line 1607)
    old_fval_180476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 42), 'old_fval', False)
    # Getting the type of 'old_old_fval' (line 1607)
    old_old_fval_180477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 52), 'old_old_fval', False)
    # Processing the call keyword arguments (line 1606)
    kwargs_180478 = {}
    # Getting the type of '_line_search_wolfe12' (line 1606)
    _line_search_wolfe12_180470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 21), '_line_search_wolfe12', False)
    # Calling _line_search_wolfe12(args, kwargs) (line 1606)
    _line_search_wolfe12_call_result_180479 = invoke(stypy.reporting.localization.Localization(__file__, 1606, 21), _line_search_wolfe12_180470, *[f_180471, fprime_180472, xk_180473, pk_180474, gfk_180475, old_fval_180476, old_old_fval_180477], **kwargs_180478)
    
    # Obtaining the member '__getitem__' of a type (line 1605)
    getitem___180480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1605, 12), _line_search_wolfe12_call_result_180479, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1605)
    subscript_call_result_180481 = invoke(stypy.reporting.localization.Localization(__file__, 1605, 12), getitem___180480, int_180469)
    
    # Assigning a type to the variable 'tuple_var_assignment_176663' (line 1605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1605, 12), 'tuple_var_assignment_176663', subscript_call_result_180481)
    
    # Assigning a Subscript to a Name (line 1605):
    
    # Obtaining the type of the subscript
    int_180482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1605, 12), 'int')
    
    # Call to _line_search_wolfe12(...): (line 1606)
    # Processing the call arguments (line 1606)
    # Getting the type of 'f' (line 1606)
    f_180484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 42), 'f', False)
    # Getting the type of 'fprime' (line 1606)
    fprime_180485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 45), 'fprime', False)
    # Getting the type of 'xk' (line 1606)
    xk_180486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 53), 'xk', False)
    # Getting the type of 'pk' (line 1606)
    pk_180487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 57), 'pk', False)
    # Getting the type of 'gfk' (line 1606)
    gfk_180488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 61), 'gfk', False)
    # Getting the type of 'old_fval' (line 1607)
    old_fval_180489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 42), 'old_fval', False)
    # Getting the type of 'old_old_fval' (line 1607)
    old_old_fval_180490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 52), 'old_old_fval', False)
    # Processing the call keyword arguments (line 1606)
    kwargs_180491 = {}
    # Getting the type of '_line_search_wolfe12' (line 1606)
    _line_search_wolfe12_180483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 21), '_line_search_wolfe12', False)
    # Calling _line_search_wolfe12(args, kwargs) (line 1606)
    _line_search_wolfe12_call_result_180492 = invoke(stypy.reporting.localization.Localization(__file__, 1606, 21), _line_search_wolfe12_180483, *[f_180484, fprime_180485, xk_180486, pk_180487, gfk_180488, old_fval_180489, old_old_fval_180490], **kwargs_180491)
    
    # Obtaining the member '__getitem__' of a type (line 1605)
    getitem___180493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1605, 12), _line_search_wolfe12_call_result_180492, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1605)
    subscript_call_result_180494 = invoke(stypy.reporting.localization.Localization(__file__, 1605, 12), getitem___180493, int_180482)
    
    # Assigning a type to the variable 'tuple_var_assignment_176664' (line 1605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1605, 12), 'tuple_var_assignment_176664', subscript_call_result_180494)
    
    # Assigning a Name to a Name (line 1605):
    # Getting the type of 'tuple_var_assignment_176659' (line 1605)
    tuple_var_assignment_176659_180495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 12), 'tuple_var_assignment_176659')
    # Assigning a type to the variable 'alphak' (line 1605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1605, 12), 'alphak', tuple_var_assignment_176659_180495)
    
    # Assigning a Name to a Name (line 1605):
    # Getting the type of 'tuple_var_assignment_176660' (line 1605)
    tuple_var_assignment_176660_180496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 12), 'tuple_var_assignment_176660')
    # Assigning a type to the variable 'fc' (line 1605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1605, 20), 'fc', tuple_var_assignment_176660_180496)
    
    # Assigning a Name to a Name (line 1605):
    # Getting the type of 'tuple_var_assignment_176661' (line 1605)
    tuple_var_assignment_176661_180497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 12), 'tuple_var_assignment_176661')
    # Assigning a type to the variable 'gc' (line 1605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1605, 24), 'gc', tuple_var_assignment_176661_180497)
    
    # Assigning a Name to a Name (line 1605):
    # Getting the type of 'tuple_var_assignment_176662' (line 1605)
    tuple_var_assignment_176662_180498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 12), 'tuple_var_assignment_176662')
    # Assigning a type to the variable 'old_fval' (line 1605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1605, 28), 'old_fval', tuple_var_assignment_176662_180498)
    
    # Assigning a Name to a Name (line 1605):
    # Getting the type of 'tuple_var_assignment_176663' (line 1605)
    tuple_var_assignment_176663_180499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 12), 'tuple_var_assignment_176663')
    # Assigning a type to the variable 'old_old_fval' (line 1605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1605, 38), 'old_old_fval', tuple_var_assignment_176663_180499)
    
    # Assigning a Name to a Name (line 1605):
    # Getting the type of 'tuple_var_assignment_176664' (line 1605)
    tuple_var_assignment_176664_180500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 12), 'tuple_var_assignment_176664')
    # Assigning a type to the variable 'gfkp1' (line 1605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1605, 52), 'gfkp1', tuple_var_assignment_176664_180500)
    # SSA branch for the except part of a try statement (line 1604)
    # SSA branch for the except '_LineSearchError' branch of a try statement (line 1604)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a BinOp to a Name (line 1610):
    
    # Assigning a BinOp to a Name (line 1610):
    str_180501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1610, 18), 'str', 'Warning: ')
    
    # Obtaining the type of the subscript
    str_180502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1610, 48), 'str', 'pr_loss')
    # Getting the type of '_status_message' (line 1610)
    _status_message_180503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1610, 32), '_status_message')
    # Obtaining the member '__getitem__' of a type (line 1610)
    getitem___180504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1610, 32), _status_message_180503, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1610)
    subscript_call_result_180505 = invoke(stypy.reporting.localization.Localization(__file__, 1610, 32), getitem___180504, str_180502)
    
    # Applying the binary operator '+' (line 1610)
    result_add_180506 = python_operator(stypy.reporting.localization.Localization(__file__, 1610, 18), '+', str_180501, subscript_call_result_180505)
    
    # Assigning a type to the variable 'msg' (line 1610)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1610, 12), 'msg', result_add_180506)
    
    # Call to terminate(...): (line 1611)
    # Processing the call arguments (line 1611)
    int_180508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1611, 29), 'int')
    # Getting the type of 'msg' (line 1611)
    msg_180509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 32), 'msg', False)
    # Processing the call keyword arguments (line 1611)
    kwargs_180510 = {}
    # Getting the type of 'terminate' (line 1611)
    terminate_180507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 19), 'terminate', False)
    # Calling terminate(args, kwargs) (line 1611)
    terminate_call_result_180511 = invoke(stypy.reporting.localization.Localization(__file__, 1611, 19), terminate_180507, *[int_180508, msg_180509], **kwargs_180510)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1611)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1611, 12), 'stypy_return_type', terminate_call_result_180511)
    # SSA join for try-except statement (line 1604)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1613):
    
    # Assigning a BinOp to a Name (line 1613):
    # Getting the type of 'alphak' (line 1613)
    alphak_180512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 17), 'alphak')
    # Getting the type of 'pk' (line 1613)
    pk_180513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 26), 'pk')
    # Applying the binary operator '*' (line 1613)
    result_mul_180514 = python_operator(stypy.reporting.localization.Localization(__file__, 1613, 17), '*', alphak_180512, pk_180513)
    
    # Assigning a type to the variable 'update' (line 1613)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1613, 8), 'update', result_mul_180514)
    
    # Assigning a BinOp to a Name (line 1614):
    
    # Assigning a BinOp to a Name (line 1614):
    # Getting the type of 'xk' (line 1614)
    xk_180515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 13), 'xk')
    # Getting the type of 'update' (line 1614)
    update_180516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 18), 'update')
    # Applying the binary operator '+' (line 1614)
    result_add_180517 = python_operator(stypy.reporting.localization.Localization(__file__, 1614, 13), '+', xk_180515, update_180516)
    
    # Assigning a type to the variable 'xk' (line 1614)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1614, 8), 'xk', result_add_180517)
    
    # Type idiom detected: calculating its left and rigth part (line 1615)
    # Getting the type of 'callback' (line 1615)
    callback_180518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 8), 'callback')
    # Getting the type of 'None' (line 1615)
    None_180519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 27), 'None')
    
    (may_be_180520, more_types_in_union_180521) = may_not_be_none(callback_180518, None_180519)

    if may_be_180520:

        if more_types_in_union_180521:
            # Runtime conditional SSA (line 1615)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to callback(...): (line 1616)
        # Processing the call arguments (line 1616)
        # Getting the type of 'xk' (line 1616)
        xk_180523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 21), 'xk', False)
        # Processing the call keyword arguments (line 1616)
        kwargs_180524 = {}
        # Getting the type of 'callback' (line 1616)
        callback_180522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 12), 'callback', False)
        # Calling callback(args, kwargs) (line 1616)
        callback_call_result_180525 = invoke(stypy.reporting.localization.Localization(__file__, 1616, 12), callback_180522, *[xk_180523], **kwargs_180524)
        

        if more_types_in_union_180521:
            # SSA join for if statement (line 1615)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Getting the type of 'retall' (line 1617)
    retall_180526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 11), 'retall')
    # Testing the type of an if condition (line 1617)
    if_condition_180527 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1617, 8), retall_180526)
    # Assigning a type to the variable 'if_condition_180527' (line 1617)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1617, 8), 'if_condition_180527', if_condition_180527)
    # SSA begins for if statement (line 1617)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 1618)
    # Processing the call arguments (line 1618)
    # Getting the type of 'xk' (line 1618)
    xk_180530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 27), 'xk', False)
    # Processing the call keyword arguments (line 1618)
    kwargs_180531 = {}
    # Getting the type of 'allvecs' (line 1618)
    allvecs_180528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 12), 'allvecs', False)
    # Obtaining the member 'append' of a type (line 1618)
    append_180529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1618, 12), allvecs_180528, 'append')
    # Calling append(args, kwargs) (line 1618)
    append_call_result_180532 = invoke(stypy.reporting.localization.Localization(__file__, 1618, 12), append_180529, *[xk_180530], **kwargs_180531)
    
    # SSA join for if statement (line 1617)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'k' (line 1619)
    k_180533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 8), 'k')
    int_180534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1619, 13), 'int')
    # Applying the binary operator '+=' (line 1619)
    result_iadd_180535 = python_operator(stypy.reporting.localization.Localization(__file__, 1619, 8), '+=', k_180533, int_180534)
    # Assigning a type to the variable 'k' (line 1619)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1619, 8), 'k', result_iadd_180535)
    
    # SSA branch for the else part of a while statement (line 1544)
    module_type_store.open_ssa_branch('while loop else')
    
    # Assigning a Subscript to a Name (line 1621):
    
    # Assigning a Subscript to a Name (line 1621):
    
    # Obtaining the type of the subscript
    str_180536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1621, 30), 'str', 'success')
    # Getting the type of '_status_message' (line 1621)
    _status_message_180537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 14), '_status_message')
    # Obtaining the member '__getitem__' of a type (line 1621)
    getitem___180538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1621, 14), _status_message_180537, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1621)
    subscript_call_result_180539 = invoke(stypy.reporting.localization.Localization(__file__, 1621, 14), getitem___180538, str_180536)
    
    # Assigning a type to the variable 'msg' (line 1621)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1621, 8), 'msg', subscript_call_result_180539)
    
    # Call to terminate(...): (line 1622)
    # Processing the call arguments (line 1622)
    int_180541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1622, 25), 'int')
    # Getting the type of 'msg' (line 1622)
    msg_180542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 28), 'msg', False)
    # Processing the call keyword arguments (line 1622)
    kwargs_180543 = {}
    # Getting the type of 'terminate' (line 1622)
    terminate_180540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 15), 'terminate', False)
    # Calling terminate(args, kwargs) (line 1622)
    terminate_call_result_180544 = invoke(stypy.reporting.localization.Localization(__file__, 1622, 15), terminate_180540, *[int_180541, msg_180542], **kwargs_180543)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1622)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1622, 8), 'stypy_return_type', terminate_call_result_180544)
    # SSA join for while statement (line 1544)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_minimize_newtoncg(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_minimize_newtoncg' in the type store
    # Getting the type of 'stypy_return_type' (line 1476)
    stypy_return_type_180545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_180545)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_minimize_newtoncg'
    return stypy_return_type_180545

# Assigning a type to the variable '_minimize_newtoncg' (line 1476)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1476, 0), '_minimize_newtoncg', _minimize_newtoncg)

@norecursion
def fminbound(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 1625)
    tuple_180546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1625, 33), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1625)
    
    float_180547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1625, 42), 'float')
    int_180548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1625, 55), 'int')
    int_180549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1626, 26), 'int')
    int_180550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1626, 34), 'int')
    defaults = [tuple_180546, float_180547, int_180548, int_180549, int_180550]
    # Create a new context for function 'fminbound'
    module_type_store = module_type_store.open_function_context('fminbound', 1625, 0, False)
    
    # Passed parameters checking function
    fminbound.stypy_localization = localization
    fminbound.stypy_type_of_self = None
    fminbound.stypy_type_store = module_type_store
    fminbound.stypy_function_name = 'fminbound'
    fminbound.stypy_param_names_list = ['func', 'x1', 'x2', 'args', 'xtol', 'maxfun', 'full_output', 'disp']
    fminbound.stypy_varargs_param_name = None
    fminbound.stypy_kwargs_param_name = None
    fminbound.stypy_call_defaults = defaults
    fminbound.stypy_call_varargs = varargs
    fminbound.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fminbound', ['func', 'x1', 'x2', 'args', 'xtol', 'maxfun', 'full_output', 'disp'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fminbound', localization, ['func', 'x1', 'x2', 'args', 'xtol', 'maxfun', 'full_output', 'disp'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fminbound(...)' code ##################

    str_180551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1691, (-1)), 'str', "Bounded minimization for scalar functions.\n\n    Parameters\n    ----------\n    func : callable f(x,*args)\n        Objective function to be minimized (must accept and return scalars).\n    x1, x2 : float or array scalar\n        The optimization bounds.\n    args : tuple, optional\n        Extra arguments passed to function.\n    xtol : float, optional\n        The convergence tolerance.\n    maxfun : int, optional\n        Maximum number of function evaluations allowed.\n    full_output : bool, optional\n        If True, return optional outputs.\n    disp : int, optional\n        If non-zero, print messages.\n            0 : no message printing.\n            1 : non-convergence notification messages only.\n            2 : print a message on convergence too.\n            3 : print iteration results.\n\n\n    Returns\n    -------\n    xopt : ndarray\n        Parameters (over given interval) which minimize the\n        objective function.\n    fval : number\n        The function value at the minimum point.\n    ierr : int\n        An error flag (0 if converged, 1 if maximum number of\n        function calls reached).\n    numfunc : int\n      The number of function calls made.\n\n    See also\n    --------\n    minimize_scalar: Interface to minimization algorithms for scalar\n        univariate functions. See the 'Bounded' `method` in particular.\n\n    Notes\n    -----\n    Finds a local minimizer of the scalar function `func` in the\n    interval x1 < xopt < x2 using Brent's method.  (See `brent`\n    for auto-bracketing).\n\n    Examples\n    --------\n    `fminbound` finds the minimum of the function in the given range.\n    The following examples illustrate the same\n\n    >>> def f(x):\n    ...     return x**2\n\n    >>> from scipy import optimize\n\n    >>> minimum = optimize.fminbound(f, -1, 2)\n    >>> minimum\n    0.0\n    >>> minimum = optimize.fminbound(f, 1, 2)\n    >>> minimum\n    1.0000059608609866\n    ")
    
    # Assigning a Dict to a Name (line 1692):
    
    # Assigning a Dict to a Name (line 1692):
    
    # Obtaining an instance of the builtin type 'dict' (line 1692)
    dict_180552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1692, 14), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 1692)
    # Adding element type (key, value) (line 1692)
    str_180553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1692, 15), 'str', 'xatol')
    # Getting the type of 'xtol' (line 1692)
    xtol_180554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 24), 'xtol')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1692, 14), dict_180552, (str_180553, xtol_180554))
    # Adding element type (key, value) (line 1692)
    str_180555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1693, 15), 'str', 'maxiter')
    # Getting the type of 'maxfun' (line 1693)
    maxfun_180556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 26), 'maxfun')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1692, 14), dict_180552, (str_180555, maxfun_180556))
    # Adding element type (key, value) (line 1692)
    str_180557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1694, 15), 'str', 'disp')
    # Getting the type of 'disp' (line 1694)
    disp_180558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 23), 'disp')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1692, 14), dict_180552, (str_180557, disp_180558))
    
    # Assigning a type to the variable 'options' (line 1692)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1692, 4), 'options', dict_180552)
    
    # Assigning a Call to a Name (line 1696):
    
    # Assigning a Call to a Name (line 1696):
    
    # Call to _minimize_scalar_bounded(...): (line 1696)
    # Processing the call arguments (line 1696)
    # Getting the type of 'func' (line 1696)
    func_180560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 35), 'func', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1696)
    tuple_180561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1696, 42), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1696)
    # Adding element type (line 1696)
    # Getting the type of 'x1' (line 1696)
    x1_180562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 42), 'x1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1696, 42), tuple_180561, x1_180562)
    # Adding element type (line 1696)
    # Getting the type of 'x2' (line 1696)
    x2_180563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 46), 'x2', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1696, 42), tuple_180561, x2_180563)
    
    # Getting the type of 'args' (line 1696)
    args_180564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 51), 'args', False)
    # Processing the call keyword arguments (line 1696)
    # Getting the type of 'options' (line 1696)
    options_180565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 59), 'options', False)
    kwargs_180566 = {'options_180565': options_180565}
    # Getting the type of '_minimize_scalar_bounded' (line 1696)
    _minimize_scalar_bounded_180559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 10), '_minimize_scalar_bounded', False)
    # Calling _minimize_scalar_bounded(args, kwargs) (line 1696)
    _minimize_scalar_bounded_call_result_180567 = invoke(stypy.reporting.localization.Localization(__file__, 1696, 10), _minimize_scalar_bounded_180559, *[func_180560, tuple_180561, args_180564], **kwargs_180566)
    
    # Assigning a type to the variable 'res' (line 1696)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1696, 4), 'res', _minimize_scalar_bounded_call_result_180567)
    
    # Getting the type of 'full_output' (line 1697)
    full_output_180568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 7), 'full_output')
    # Testing the type of an if condition (line 1697)
    if_condition_180569 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1697, 4), full_output_180568)
    # Assigning a type to the variable 'if_condition_180569' (line 1697)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1697, 4), 'if_condition_180569', if_condition_180569)
    # SSA begins for if statement (line 1697)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1698)
    tuple_180570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1698, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1698)
    # Adding element type (line 1698)
    
    # Obtaining the type of the subscript
    str_180571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1698, 19), 'str', 'x')
    # Getting the type of 'res' (line 1698)
    res_180572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 15), 'res')
    # Obtaining the member '__getitem__' of a type (line 1698)
    getitem___180573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1698, 15), res_180572, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1698)
    subscript_call_result_180574 = invoke(stypy.reporting.localization.Localization(__file__, 1698, 15), getitem___180573, str_180571)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1698, 15), tuple_180570, subscript_call_result_180574)
    # Adding element type (line 1698)
    
    # Obtaining the type of the subscript
    str_180575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1698, 29), 'str', 'fun')
    # Getting the type of 'res' (line 1698)
    res_180576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 25), 'res')
    # Obtaining the member '__getitem__' of a type (line 1698)
    getitem___180577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1698, 25), res_180576, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1698)
    subscript_call_result_180578 = invoke(stypy.reporting.localization.Localization(__file__, 1698, 25), getitem___180577, str_180575)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1698, 15), tuple_180570, subscript_call_result_180578)
    # Adding element type (line 1698)
    
    # Obtaining the type of the subscript
    str_180579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1698, 41), 'str', 'status')
    # Getting the type of 'res' (line 1698)
    res_180580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 37), 'res')
    # Obtaining the member '__getitem__' of a type (line 1698)
    getitem___180581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1698, 37), res_180580, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1698)
    subscript_call_result_180582 = invoke(stypy.reporting.localization.Localization(__file__, 1698, 37), getitem___180581, str_180579)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1698, 15), tuple_180570, subscript_call_result_180582)
    # Adding element type (line 1698)
    
    # Obtaining the type of the subscript
    str_180583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1698, 56), 'str', 'nfev')
    # Getting the type of 'res' (line 1698)
    res_180584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 52), 'res')
    # Obtaining the member '__getitem__' of a type (line 1698)
    getitem___180585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1698, 52), res_180584, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1698)
    subscript_call_result_180586 = invoke(stypy.reporting.localization.Localization(__file__, 1698, 52), getitem___180585, str_180583)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1698, 15), tuple_180570, subscript_call_result_180586)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1698)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1698, 8), 'stypy_return_type', tuple_180570)
    # SSA branch for the else part of an if statement (line 1697)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining the type of the subscript
    str_180587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1700, 19), 'str', 'x')
    # Getting the type of 'res' (line 1700)
    res_180588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 15), 'res')
    # Obtaining the member '__getitem__' of a type (line 1700)
    getitem___180589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1700, 15), res_180588, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1700)
    subscript_call_result_180590 = invoke(stypy.reporting.localization.Localization(__file__, 1700, 15), getitem___180589, str_180587)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1700)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1700, 8), 'stypy_return_type', subscript_call_result_180590)
    # SSA join for if statement (line 1697)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'fminbound(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fminbound' in the type store
    # Getting the type of 'stypy_return_type' (line 1625)
    stypy_return_type_180591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_180591)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fminbound'
    return stypy_return_type_180591

# Assigning a type to the variable 'fminbound' (line 1625)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1625, 0), 'fminbound', fminbound)

@norecursion
def _minimize_scalar_bounded(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 1703)
    tuple_180592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1703, 48), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1703)
    
    float_180593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1704, 35), 'float')
    int_180594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1704, 49), 'int')
    int_180595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1704, 59), 'int')
    defaults = [tuple_180592, float_180593, int_180594, int_180595]
    # Create a new context for function '_minimize_scalar_bounded'
    module_type_store = module_type_store.open_function_context('_minimize_scalar_bounded', 1703, 0, False)
    
    # Passed parameters checking function
    _minimize_scalar_bounded.stypy_localization = localization
    _minimize_scalar_bounded.stypy_type_of_self = None
    _minimize_scalar_bounded.stypy_type_store = module_type_store
    _minimize_scalar_bounded.stypy_function_name = '_minimize_scalar_bounded'
    _minimize_scalar_bounded.stypy_param_names_list = ['func', 'bounds', 'args', 'xatol', 'maxiter', 'disp']
    _minimize_scalar_bounded.stypy_varargs_param_name = None
    _minimize_scalar_bounded.stypy_kwargs_param_name = 'unknown_options'
    _minimize_scalar_bounded.stypy_call_defaults = defaults
    _minimize_scalar_bounded.stypy_call_varargs = varargs
    _minimize_scalar_bounded.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_minimize_scalar_bounded', ['func', 'bounds', 'args', 'xatol', 'maxiter', 'disp'], None, 'unknown_options', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_minimize_scalar_bounded', localization, ['func', 'bounds', 'args', 'xatol', 'maxiter', 'disp'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_minimize_scalar_bounded(...)' code ##################

    str_180596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1716, (-1)), 'str', '\n    Options\n    -------\n    maxiter : int\n        Maximum number of iterations to perform.\n    disp : bool\n        Set to True to print convergence messages.\n    xatol : float\n        Absolute error in solution `xopt` acceptable for convergence.\n\n    ')
    
    # Call to _check_unknown_options(...): (line 1717)
    # Processing the call arguments (line 1717)
    # Getting the type of 'unknown_options' (line 1717)
    unknown_options_180598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 27), 'unknown_options', False)
    # Processing the call keyword arguments (line 1717)
    kwargs_180599 = {}
    # Getting the type of '_check_unknown_options' (line 1717)
    _check_unknown_options_180597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 4), '_check_unknown_options', False)
    # Calling _check_unknown_options(args, kwargs) (line 1717)
    _check_unknown_options_call_result_180600 = invoke(stypy.reporting.localization.Localization(__file__, 1717, 4), _check_unknown_options_180597, *[unknown_options_180598], **kwargs_180599)
    
    
    # Assigning a Name to a Name (line 1718):
    
    # Assigning a Name to a Name (line 1718):
    # Getting the type of 'maxiter' (line 1718)
    maxiter_180601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 13), 'maxiter')
    # Assigning a type to the variable 'maxfun' (line 1718)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1718, 4), 'maxfun', maxiter_180601)
    
    
    
    # Call to len(...): (line 1720)
    # Processing the call arguments (line 1720)
    # Getting the type of 'bounds' (line 1720)
    bounds_180603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 11), 'bounds', False)
    # Processing the call keyword arguments (line 1720)
    kwargs_180604 = {}
    # Getting the type of 'len' (line 1720)
    len_180602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 7), 'len', False)
    # Calling len(args, kwargs) (line 1720)
    len_call_result_180605 = invoke(stypy.reporting.localization.Localization(__file__, 1720, 7), len_180602, *[bounds_180603], **kwargs_180604)
    
    int_180606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1720, 22), 'int')
    # Applying the binary operator '!=' (line 1720)
    result_ne_180607 = python_operator(stypy.reporting.localization.Localization(__file__, 1720, 7), '!=', len_call_result_180605, int_180606)
    
    # Testing the type of an if condition (line 1720)
    if_condition_180608 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1720, 4), result_ne_180607)
    # Assigning a type to the variable 'if_condition_180608' (line 1720)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1720, 4), 'if_condition_180608', if_condition_180608)
    # SSA begins for if statement (line 1720)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1721)
    # Processing the call arguments (line 1721)
    str_180610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1721, 25), 'str', 'bounds must have two elements.')
    # Processing the call keyword arguments (line 1721)
    kwargs_180611 = {}
    # Getting the type of 'ValueError' (line 1721)
    ValueError_180609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1721)
    ValueError_call_result_180612 = invoke(stypy.reporting.localization.Localization(__file__, 1721, 14), ValueError_180609, *[str_180610], **kwargs_180611)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1721, 8), ValueError_call_result_180612, 'raise parameter', BaseException)
    # SSA join for if statement (line 1720)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Tuple (line 1722):
    
    # Assigning a Subscript to a Name (line 1722):
    
    # Obtaining the type of the subscript
    int_180613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1722, 4), 'int')
    # Getting the type of 'bounds' (line 1722)
    bounds_180614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 13), 'bounds')
    # Obtaining the member '__getitem__' of a type (line 1722)
    getitem___180615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1722, 4), bounds_180614, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1722)
    subscript_call_result_180616 = invoke(stypy.reporting.localization.Localization(__file__, 1722, 4), getitem___180615, int_180613)
    
    # Assigning a type to the variable 'tuple_var_assignment_176665' (line 1722)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1722, 4), 'tuple_var_assignment_176665', subscript_call_result_180616)
    
    # Assigning a Subscript to a Name (line 1722):
    
    # Obtaining the type of the subscript
    int_180617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1722, 4), 'int')
    # Getting the type of 'bounds' (line 1722)
    bounds_180618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 13), 'bounds')
    # Obtaining the member '__getitem__' of a type (line 1722)
    getitem___180619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1722, 4), bounds_180618, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1722)
    subscript_call_result_180620 = invoke(stypy.reporting.localization.Localization(__file__, 1722, 4), getitem___180619, int_180617)
    
    # Assigning a type to the variable 'tuple_var_assignment_176666' (line 1722)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1722, 4), 'tuple_var_assignment_176666', subscript_call_result_180620)
    
    # Assigning a Name to a Name (line 1722):
    # Getting the type of 'tuple_var_assignment_176665' (line 1722)
    tuple_var_assignment_176665_180621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 4), 'tuple_var_assignment_176665')
    # Assigning a type to the variable 'x1' (line 1722)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1722, 4), 'x1', tuple_var_assignment_176665_180621)
    
    # Assigning a Name to a Name (line 1722):
    # Getting the type of 'tuple_var_assignment_176666' (line 1722)
    tuple_var_assignment_176666_180622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 4), 'tuple_var_assignment_176666')
    # Assigning a type to the variable 'x2' (line 1722)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1722, 8), 'x2', tuple_var_assignment_176666_180622)
    
    
    
    # Evaluating a boolean operation
    
    # Call to is_array_scalar(...): (line 1724)
    # Processing the call arguments (line 1724)
    # Getting the type of 'x1' (line 1724)
    x1_180624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 28), 'x1', False)
    # Processing the call keyword arguments (line 1724)
    kwargs_180625 = {}
    # Getting the type of 'is_array_scalar' (line 1724)
    is_array_scalar_180623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 12), 'is_array_scalar', False)
    # Calling is_array_scalar(args, kwargs) (line 1724)
    is_array_scalar_call_result_180626 = invoke(stypy.reporting.localization.Localization(__file__, 1724, 12), is_array_scalar_180623, *[x1_180624], **kwargs_180625)
    
    
    # Call to is_array_scalar(...): (line 1724)
    # Processing the call arguments (line 1724)
    # Getting the type of 'x2' (line 1724)
    x2_180628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 52), 'x2', False)
    # Processing the call keyword arguments (line 1724)
    kwargs_180629 = {}
    # Getting the type of 'is_array_scalar' (line 1724)
    is_array_scalar_180627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 36), 'is_array_scalar', False)
    # Calling is_array_scalar(args, kwargs) (line 1724)
    is_array_scalar_call_result_180630 = invoke(stypy.reporting.localization.Localization(__file__, 1724, 36), is_array_scalar_180627, *[x2_180628], **kwargs_180629)
    
    # Applying the binary operator 'and' (line 1724)
    result_and_keyword_180631 = python_operator(stypy.reporting.localization.Localization(__file__, 1724, 12), 'and', is_array_scalar_call_result_180626, is_array_scalar_call_result_180630)
    
    # Applying the 'not' unary operator (line 1724)
    result_not__180632 = python_operator(stypy.reporting.localization.Localization(__file__, 1724, 7), 'not', result_and_keyword_180631)
    
    # Testing the type of an if condition (line 1724)
    if_condition_180633 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1724, 4), result_not__180632)
    # Assigning a type to the variable 'if_condition_180633' (line 1724)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1724, 4), 'if_condition_180633', if_condition_180633)
    # SSA begins for if statement (line 1724)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1725)
    # Processing the call arguments (line 1725)
    str_180635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1725, 25), 'str', 'Optimisation bounds must be scalars or array scalars.')
    # Processing the call keyword arguments (line 1725)
    kwargs_180636 = {}
    # Getting the type of 'ValueError' (line 1725)
    ValueError_180634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1725)
    ValueError_call_result_180637 = invoke(stypy.reporting.localization.Localization(__file__, 1725, 14), ValueError_180634, *[str_180635], **kwargs_180636)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1725, 8), ValueError_call_result_180637, 'raise parameter', BaseException)
    # SSA join for if statement (line 1724)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'x1' (line 1727)
    x1_180638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 7), 'x1')
    # Getting the type of 'x2' (line 1727)
    x2_180639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 12), 'x2')
    # Applying the binary operator '>' (line 1727)
    result_gt_180640 = python_operator(stypy.reporting.localization.Localization(__file__, 1727, 7), '>', x1_180638, x2_180639)
    
    # Testing the type of an if condition (line 1727)
    if_condition_180641 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1727, 4), result_gt_180640)
    # Assigning a type to the variable 'if_condition_180641' (line 1727)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1727, 4), 'if_condition_180641', if_condition_180641)
    # SSA begins for if statement (line 1727)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1728)
    # Processing the call arguments (line 1728)
    str_180643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1728, 25), 'str', 'The lower bound exceeds the upper bound.')
    # Processing the call keyword arguments (line 1728)
    kwargs_180644 = {}
    # Getting the type of 'ValueError' (line 1728)
    ValueError_180642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1728)
    ValueError_call_result_180645 = invoke(stypy.reporting.localization.Localization(__file__, 1728, 14), ValueError_180642, *[str_180643], **kwargs_180644)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1728, 8), ValueError_call_result_180645, 'raise parameter', BaseException)
    # SSA join for if statement (line 1727)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 1730):
    
    # Assigning a Num to a Name (line 1730):
    int_180646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1730, 11), 'int')
    # Assigning a type to the variable 'flag' (line 1730)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1730, 4), 'flag', int_180646)
    
    # Assigning a Str to a Name (line 1731):
    
    # Assigning a Str to a Name (line 1731):
    str_180647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1731, 13), 'str', ' Func-count     x          f(x)          Procedure')
    # Assigning a type to the variable 'header' (line 1731)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1731, 4), 'header', str_180647)
    
    # Assigning a Str to a Name (line 1732):
    
    # Assigning a Str to a Name (line 1732):
    str_180648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1732, 11), 'str', '       initial')
    # Assigning a type to the variable 'step' (line 1732)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1732, 4), 'step', str_180648)
    
    # Assigning a Call to a Name (line 1734):
    
    # Assigning a Call to a Name (line 1734):
    
    # Call to sqrt(...): (line 1734)
    # Processing the call arguments (line 1734)
    float_180650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1734, 20), 'float')
    # Processing the call keyword arguments (line 1734)
    kwargs_180651 = {}
    # Getting the type of 'sqrt' (line 1734)
    sqrt_180649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 15), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 1734)
    sqrt_call_result_180652 = invoke(stypy.reporting.localization.Localization(__file__, 1734, 15), sqrt_180649, *[float_180650], **kwargs_180651)
    
    # Assigning a type to the variable 'sqrt_eps' (line 1734)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1734, 4), 'sqrt_eps', sqrt_call_result_180652)
    
    # Assigning a BinOp to a Name (line 1735):
    
    # Assigning a BinOp to a Name (line 1735):
    float_180653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1735, 18), 'float')
    float_180654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1735, 25), 'float')
    
    # Call to sqrt(...): (line 1735)
    # Processing the call arguments (line 1735)
    float_180656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1735, 36), 'float')
    # Processing the call keyword arguments (line 1735)
    kwargs_180657 = {}
    # Getting the type of 'sqrt' (line 1735)
    sqrt_180655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 31), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 1735)
    sqrt_call_result_180658 = invoke(stypy.reporting.localization.Localization(__file__, 1735, 31), sqrt_180655, *[float_180656], **kwargs_180657)
    
    # Applying the binary operator '-' (line 1735)
    result_sub_180659 = python_operator(stypy.reporting.localization.Localization(__file__, 1735, 25), '-', float_180654, sqrt_call_result_180658)
    
    # Applying the binary operator '*' (line 1735)
    result_mul_180660 = python_operator(stypy.reporting.localization.Localization(__file__, 1735, 18), '*', float_180653, result_sub_180659)
    
    # Assigning a type to the variable 'golden_mean' (line 1735)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1735, 4), 'golden_mean', result_mul_180660)
    
    # Assigning a Tuple to a Tuple (line 1736):
    
    # Assigning a Name to a Name (line 1736):
    # Getting the type of 'x1' (line 1736)
    x1_180661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 11), 'x1')
    # Assigning a type to the variable 'tuple_assignment_176667' (line 1736)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 4), 'tuple_assignment_176667', x1_180661)
    
    # Assigning a Name to a Name (line 1736):
    # Getting the type of 'x2' (line 1736)
    x2_180662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 15), 'x2')
    # Assigning a type to the variable 'tuple_assignment_176668' (line 1736)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 4), 'tuple_assignment_176668', x2_180662)
    
    # Assigning a Name to a Name (line 1736):
    # Getting the type of 'tuple_assignment_176667' (line 1736)
    tuple_assignment_176667_180663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 4), 'tuple_assignment_176667')
    # Assigning a type to the variable 'a' (line 1736)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 4), 'a', tuple_assignment_176667_180663)
    
    # Assigning a Name to a Name (line 1736):
    # Getting the type of 'tuple_assignment_176668' (line 1736)
    tuple_assignment_176668_180664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 4), 'tuple_assignment_176668')
    # Assigning a type to the variable 'b' (line 1736)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 7), 'b', tuple_assignment_176668_180664)
    
    # Assigning a BinOp to a Name (line 1737):
    
    # Assigning a BinOp to a Name (line 1737):
    # Getting the type of 'a' (line 1737)
    a_180665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 11), 'a')
    # Getting the type of 'golden_mean' (line 1737)
    golden_mean_180666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 15), 'golden_mean')
    # Getting the type of 'b' (line 1737)
    b_180667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 30), 'b')
    # Getting the type of 'a' (line 1737)
    a_180668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 34), 'a')
    # Applying the binary operator '-' (line 1737)
    result_sub_180669 = python_operator(stypy.reporting.localization.Localization(__file__, 1737, 30), '-', b_180667, a_180668)
    
    # Applying the binary operator '*' (line 1737)
    result_mul_180670 = python_operator(stypy.reporting.localization.Localization(__file__, 1737, 15), '*', golden_mean_180666, result_sub_180669)
    
    # Applying the binary operator '+' (line 1737)
    result_add_180671 = python_operator(stypy.reporting.localization.Localization(__file__, 1737, 11), '+', a_180665, result_mul_180670)
    
    # Assigning a type to the variable 'fulc' (line 1737)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1737, 4), 'fulc', result_add_180671)
    
    # Assigning a Tuple to a Tuple (line 1738):
    
    # Assigning a Name to a Name (line 1738):
    # Getting the type of 'fulc' (line 1738)
    fulc_180672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 14), 'fulc')
    # Assigning a type to the variable 'tuple_assignment_176669' (line 1738)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1738, 4), 'tuple_assignment_176669', fulc_180672)
    
    # Assigning a Name to a Name (line 1738):
    # Getting the type of 'fulc' (line 1738)
    fulc_180673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 20), 'fulc')
    # Assigning a type to the variable 'tuple_assignment_176670' (line 1738)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1738, 4), 'tuple_assignment_176670', fulc_180673)
    
    # Assigning a Name to a Name (line 1738):
    # Getting the type of 'tuple_assignment_176669' (line 1738)
    tuple_assignment_176669_180674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 4), 'tuple_assignment_176669')
    # Assigning a type to the variable 'nfc' (line 1738)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1738, 4), 'nfc', tuple_assignment_176669_180674)
    
    # Assigning a Name to a Name (line 1738):
    # Getting the type of 'tuple_assignment_176670' (line 1738)
    tuple_assignment_176670_180675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 4), 'tuple_assignment_176670')
    # Assigning a type to the variable 'xf' (line 1738)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1738, 9), 'xf', tuple_assignment_176670_180675)
    
    # Multiple assignment of 2 elements.
    
    # Assigning a Num to a Name (line 1739):
    float_180676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1739, 14), 'float')
    # Assigning a type to the variable 'e' (line 1739)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1739, 10), 'e', float_180676)
    
    # Assigning a Name to a Name (line 1739):
    # Getting the type of 'e' (line 1739)
    e_180677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 10), 'e')
    # Assigning a type to the variable 'rat' (line 1739)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1739, 4), 'rat', e_180677)
    
    # Assigning a Name to a Name (line 1740):
    
    # Assigning a Name to a Name (line 1740):
    # Getting the type of 'xf' (line 1740)
    xf_180678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 8), 'xf')
    # Assigning a type to the variable 'x' (line 1740)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1740, 4), 'x', xf_180678)
    
    # Assigning a Call to a Name (line 1741):
    
    # Assigning a Call to a Name (line 1741):
    
    # Call to func(...): (line 1741)
    # Processing the call arguments (line 1741)
    # Getting the type of 'x' (line 1741)
    x_180680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 14), 'x', False)
    # Getting the type of 'args' (line 1741)
    args_180681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 18), 'args', False)
    # Processing the call keyword arguments (line 1741)
    kwargs_180682 = {}
    # Getting the type of 'func' (line 1741)
    func_180679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 9), 'func', False)
    # Calling func(args, kwargs) (line 1741)
    func_call_result_180683 = invoke(stypy.reporting.localization.Localization(__file__, 1741, 9), func_180679, *[x_180680, args_180681], **kwargs_180682)
    
    # Assigning a type to the variable 'fx' (line 1741)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1741, 4), 'fx', func_call_result_180683)
    
    # Assigning a Num to a Name (line 1742):
    
    # Assigning a Num to a Name (line 1742):
    int_180684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1742, 10), 'int')
    # Assigning a type to the variable 'num' (line 1742)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1742, 4), 'num', int_180684)
    
    # Assigning a Tuple to a Name (line 1743):
    
    # Assigning a Tuple to a Name (line 1743):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1743)
    tuple_180685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1743, 17), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1743)
    # Adding element type (line 1743)
    int_180686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1743, 17), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1743, 17), tuple_180685, int_180686)
    # Adding element type (line 1743)
    # Getting the type of 'xf' (line 1743)
    xf_180687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 20), 'xf')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1743, 17), tuple_180685, xf_180687)
    # Adding element type (line 1743)
    # Getting the type of 'fx' (line 1743)
    fx_180688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 24), 'fx')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1743, 17), tuple_180685, fx_180688)
    
    # Assigning a type to the variable 'fmin_data' (line 1743)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1743, 4), 'fmin_data', tuple_180685)
    
    # Multiple assignment of 2 elements.
    
    # Assigning a Name to a Name (line 1745):
    # Getting the type of 'fx' (line 1745)
    fx_180689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 19), 'fx')
    # Assigning a type to the variable 'fnfc' (line 1745)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1745, 12), 'fnfc', fx_180689)
    
    # Assigning a Name to a Name (line 1745):
    # Getting the type of 'fnfc' (line 1745)
    fnfc_180690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 12), 'fnfc')
    # Assigning a type to the variable 'ffulc' (line 1745)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1745, 4), 'ffulc', fnfc_180690)
    
    # Assigning a BinOp to a Name (line 1746):
    
    # Assigning a BinOp to a Name (line 1746):
    float_180691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1746, 9), 'float')
    # Getting the type of 'a' (line 1746)
    a_180692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 16), 'a')
    # Getting the type of 'b' (line 1746)
    b_180693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 20), 'b')
    # Applying the binary operator '+' (line 1746)
    result_add_180694 = python_operator(stypy.reporting.localization.Localization(__file__, 1746, 16), '+', a_180692, b_180693)
    
    # Applying the binary operator '*' (line 1746)
    result_mul_180695 = python_operator(stypy.reporting.localization.Localization(__file__, 1746, 9), '*', float_180691, result_add_180694)
    
    # Assigning a type to the variable 'xm' (line 1746)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1746, 4), 'xm', result_mul_180695)
    
    # Assigning a BinOp to a Name (line 1747):
    
    # Assigning a BinOp to a Name (line 1747):
    # Getting the type of 'sqrt_eps' (line 1747)
    sqrt_eps_180696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 11), 'sqrt_eps')
    
    # Call to abs(...): (line 1747)
    # Processing the call arguments (line 1747)
    # Getting the type of 'xf' (line 1747)
    xf_180699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 32), 'xf', False)
    # Processing the call keyword arguments (line 1747)
    kwargs_180700 = {}
    # Getting the type of 'numpy' (line 1747)
    numpy_180697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 22), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 1747)
    abs_180698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1747, 22), numpy_180697, 'abs')
    # Calling abs(args, kwargs) (line 1747)
    abs_call_result_180701 = invoke(stypy.reporting.localization.Localization(__file__, 1747, 22), abs_180698, *[xf_180699], **kwargs_180700)
    
    # Applying the binary operator '*' (line 1747)
    result_mul_180702 = python_operator(stypy.reporting.localization.Localization(__file__, 1747, 11), '*', sqrt_eps_180696, abs_call_result_180701)
    
    # Getting the type of 'xatol' (line 1747)
    xatol_180703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 38), 'xatol')
    float_180704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1747, 46), 'float')
    # Applying the binary operator 'div' (line 1747)
    result_div_180705 = python_operator(stypy.reporting.localization.Localization(__file__, 1747, 38), 'div', xatol_180703, float_180704)
    
    # Applying the binary operator '+' (line 1747)
    result_add_180706 = python_operator(stypy.reporting.localization.Localization(__file__, 1747, 11), '+', result_mul_180702, result_div_180705)
    
    # Assigning a type to the variable 'tol1' (line 1747)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1747, 4), 'tol1', result_add_180706)
    
    # Assigning a BinOp to a Name (line 1748):
    
    # Assigning a BinOp to a Name (line 1748):
    float_180707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1748, 11), 'float')
    # Getting the type of 'tol1' (line 1748)
    tol1_180708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 17), 'tol1')
    # Applying the binary operator '*' (line 1748)
    result_mul_180709 = python_operator(stypy.reporting.localization.Localization(__file__, 1748, 11), '*', float_180707, tol1_180708)
    
    # Assigning a type to the variable 'tol2' (line 1748)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1748, 4), 'tol2', result_mul_180709)
    
    
    # Getting the type of 'disp' (line 1750)
    disp_180710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1750, 7), 'disp')
    int_180711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1750, 14), 'int')
    # Applying the binary operator '>' (line 1750)
    result_gt_180712 = python_operator(stypy.reporting.localization.Localization(__file__, 1750, 7), '>', disp_180710, int_180711)
    
    # Testing the type of an if condition (line 1750)
    if_condition_180713 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1750, 4), result_gt_180712)
    # Assigning a type to the variable 'if_condition_180713' (line 1750)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1750, 4), 'if_condition_180713', if_condition_180713)
    # SSA begins for if statement (line 1750)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 1751)
    # Processing the call arguments (line 1751)
    str_180715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1751, 14), 'str', ' ')
    # Processing the call keyword arguments (line 1751)
    kwargs_180716 = {}
    # Getting the type of 'print' (line 1751)
    print_180714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1751, 8), 'print', False)
    # Calling print(args, kwargs) (line 1751)
    print_call_result_180717 = invoke(stypy.reporting.localization.Localization(__file__, 1751, 8), print_180714, *[str_180715], **kwargs_180716)
    
    
    # Call to print(...): (line 1752)
    # Processing the call arguments (line 1752)
    # Getting the type of 'header' (line 1752)
    header_180719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1752, 14), 'header', False)
    # Processing the call keyword arguments (line 1752)
    kwargs_180720 = {}
    # Getting the type of 'print' (line 1752)
    print_180718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1752, 8), 'print', False)
    # Calling print(args, kwargs) (line 1752)
    print_call_result_180721 = invoke(stypy.reporting.localization.Localization(__file__, 1752, 8), print_180718, *[header_180719], **kwargs_180720)
    
    
    # Call to print(...): (line 1753)
    # Processing the call arguments (line 1753)
    str_180723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1753, 14), 'str', '%5.0f   %12.6g %12.6g %s')
    # Getting the type of 'fmin_data' (line 1753)
    fmin_data_180724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1753, 44), 'fmin_data', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1753)
    tuple_180725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1753, 57), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1753)
    # Adding element type (line 1753)
    # Getting the type of 'step' (line 1753)
    step_180726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1753, 57), 'step', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1753, 57), tuple_180725, step_180726)
    
    # Applying the binary operator '+' (line 1753)
    result_add_180727 = python_operator(stypy.reporting.localization.Localization(__file__, 1753, 44), '+', fmin_data_180724, tuple_180725)
    
    # Applying the binary operator '%' (line 1753)
    result_mod_180728 = python_operator(stypy.reporting.localization.Localization(__file__, 1753, 14), '%', str_180723, result_add_180727)
    
    # Processing the call keyword arguments (line 1753)
    kwargs_180729 = {}
    # Getting the type of 'print' (line 1753)
    print_180722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1753, 8), 'print', False)
    # Calling print(args, kwargs) (line 1753)
    print_call_result_180730 = invoke(stypy.reporting.localization.Localization(__file__, 1753, 8), print_180722, *[result_mod_180728], **kwargs_180729)
    
    # SSA join for if statement (line 1750)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to abs(...): (line 1755)
    # Processing the call arguments (line 1755)
    # Getting the type of 'xf' (line 1755)
    xf_180733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 21), 'xf', False)
    # Getting the type of 'xm' (line 1755)
    xm_180734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 26), 'xm', False)
    # Applying the binary operator '-' (line 1755)
    result_sub_180735 = python_operator(stypy.reporting.localization.Localization(__file__, 1755, 21), '-', xf_180733, xm_180734)
    
    # Processing the call keyword arguments (line 1755)
    kwargs_180736 = {}
    # Getting the type of 'numpy' (line 1755)
    numpy_180731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 11), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 1755)
    abs_180732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1755, 11), numpy_180731, 'abs')
    # Calling abs(args, kwargs) (line 1755)
    abs_call_result_180737 = invoke(stypy.reporting.localization.Localization(__file__, 1755, 11), abs_180732, *[result_sub_180735], **kwargs_180736)
    
    # Getting the type of 'tol2' (line 1755)
    tol2_180738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 33), 'tol2')
    float_180739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1755, 40), 'float')
    # Getting the type of 'b' (line 1755)
    b_180740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 47), 'b')
    # Getting the type of 'a' (line 1755)
    a_180741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 51), 'a')
    # Applying the binary operator '-' (line 1755)
    result_sub_180742 = python_operator(stypy.reporting.localization.Localization(__file__, 1755, 47), '-', b_180740, a_180741)
    
    # Applying the binary operator '*' (line 1755)
    result_mul_180743 = python_operator(stypy.reporting.localization.Localization(__file__, 1755, 40), '*', float_180739, result_sub_180742)
    
    # Applying the binary operator '-' (line 1755)
    result_sub_180744 = python_operator(stypy.reporting.localization.Localization(__file__, 1755, 33), '-', tol2_180738, result_mul_180743)
    
    # Applying the binary operator '>' (line 1755)
    result_gt_180745 = python_operator(stypy.reporting.localization.Localization(__file__, 1755, 11), '>', abs_call_result_180737, result_sub_180744)
    
    # Testing the type of an if condition (line 1755)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1755, 4), result_gt_180745)
    # SSA begins for while statement (line 1755)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a Num to a Name (line 1756):
    
    # Assigning a Num to a Name (line 1756):
    int_180746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1756, 17), 'int')
    # Assigning a type to the variable 'golden' (line 1756)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1756, 8), 'golden', int_180746)
    
    
    
    # Call to abs(...): (line 1758)
    # Processing the call arguments (line 1758)
    # Getting the type of 'e' (line 1758)
    e_180749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 21), 'e', False)
    # Processing the call keyword arguments (line 1758)
    kwargs_180750 = {}
    # Getting the type of 'numpy' (line 1758)
    numpy_180747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 11), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 1758)
    abs_180748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1758, 11), numpy_180747, 'abs')
    # Calling abs(args, kwargs) (line 1758)
    abs_call_result_180751 = invoke(stypy.reporting.localization.Localization(__file__, 1758, 11), abs_180748, *[e_180749], **kwargs_180750)
    
    # Getting the type of 'tol1' (line 1758)
    tol1_180752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 26), 'tol1')
    # Applying the binary operator '>' (line 1758)
    result_gt_180753 = python_operator(stypy.reporting.localization.Localization(__file__, 1758, 11), '>', abs_call_result_180751, tol1_180752)
    
    # Testing the type of an if condition (line 1758)
    if_condition_180754 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1758, 8), result_gt_180753)
    # Assigning a type to the variable 'if_condition_180754' (line 1758)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1758, 8), 'if_condition_180754', if_condition_180754)
    # SSA begins for if statement (line 1758)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1759):
    
    # Assigning a Num to a Name (line 1759):
    int_180755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1759, 21), 'int')
    # Assigning a type to the variable 'golden' (line 1759)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1759, 12), 'golden', int_180755)
    
    # Assigning a BinOp to a Name (line 1760):
    
    # Assigning a BinOp to a Name (line 1760):
    # Getting the type of 'xf' (line 1760)
    xf_180756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1760, 17), 'xf')
    # Getting the type of 'nfc' (line 1760)
    nfc_180757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1760, 22), 'nfc')
    # Applying the binary operator '-' (line 1760)
    result_sub_180758 = python_operator(stypy.reporting.localization.Localization(__file__, 1760, 17), '-', xf_180756, nfc_180757)
    
    # Getting the type of 'fx' (line 1760)
    fx_180759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1760, 30), 'fx')
    # Getting the type of 'ffulc' (line 1760)
    ffulc_180760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1760, 35), 'ffulc')
    # Applying the binary operator '-' (line 1760)
    result_sub_180761 = python_operator(stypy.reporting.localization.Localization(__file__, 1760, 30), '-', fx_180759, ffulc_180760)
    
    # Applying the binary operator '*' (line 1760)
    result_mul_180762 = python_operator(stypy.reporting.localization.Localization(__file__, 1760, 16), '*', result_sub_180758, result_sub_180761)
    
    # Assigning a type to the variable 'r' (line 1760)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1760, 12), 'r', result_mul_180762)
    
    # Assigning a BinOp to a Name (line 1761):
    
    # Assigning a BinOp to a Name (line 1761):
    # Getting the type of 'xf' (line 1761)
    xf_180763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 17), 'xf')
    # Getting the type of 'fulc' (line 1761)
    fulc_180764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 22), 'fulc')
    # Applying the binary operator '-' (line 1761)
    result_sub_180765 = python_operator(stypy.reporting.localization.Localization(__file__, 1761, 17), '-', xf_180763, fulc_180764)
    
    # Getting the type of 'fx' (line 1761)
    fx_180766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 31), 'fx')
    # Getting the type of 'fnfc' (line 1761)
    fnfc_180767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 36), 'fnfc')
    # Applying the binary operator '-' (line 1761)
    result_sub_180768 = python_operator(stypy.reporting.localization.Localization(__file__, 1761, 31), '-', fx_180766, fnfc_180767)
    
    # Applying the binary operator '*' (line 1761)
    result_mul_180769 = python_operator(stypy.reporting.localization.Localization(__file__, 1761, 16), '*', result_sub_180765, result_sub_180768)
    
    # Assigning a type to the variable 'q' (line 1761)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1761, 12), 'q', result_mul_180769)
    
    # Assigning a BinOp to a Name (line 1762):
    
    # Assigning a BinOp to a Name (line 1762):
    # Getting the type of 'xf' (line 1762)
    xf_180770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 17), 'xf')
    # Getting the type of 'fulc' (line 1762)
    fulc_180771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 22), 'fulc')
    # Applying the binary operator '-' (line 1762)
    result_sub_180772 = python_operator(stypy.reporting.localization.Localization(__file__, 1762, 17), '-', xf_180770, fulc_180771)
    
    # Getting the type of 'q' (line 1762)
    q_180773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 30), 'q')
    # Applying the binary operator '*' (line 1762)
    result_mul_180774 = python_operator(stypy.reporting.localization.Localization(__file__, 1762, 16), '*', result_sub_180772, q_180773)
    
    # Getting the type of 'xf' (line 1762)
    xf_180775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 35), 'xf')
    # Getting the type of 'nfc' (line 1762)
    nfc_180776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 40), 'nfc')
    # Applying the binary operator '-' (line 1762)
    result_sub_180777 = python_operator(stypy.reporting.localization.Localization(__file__, 1762, 35), '-', xf_180775, nfc_180776)
    
    # Getting the type of 'r' (line 1762)
    r_180778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 47), 'r')
    # Applying the binary operator '*' (line 1762)
    result_mul_180779 = python_operator(stypy.reporting.localization.Localization(__file__, 1762, 34), '*', result_sub_180777, r_180778)
    
    # Applying the binary operator '-' (line 1762)
    result_sub_180780 = python_operator(stypy.reporting.localization.Localization(__file__, 1762, 16), '-', result_mul_180774, result_mul_180779)
    
    # Assigning a type to the variable 'p' (line 1762)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1762, 12), 'p', result_sub_180780)
    
    # Assigning a BinOp to a Name (line 1763):
    
    # Assigning a BinOp to a Name (line 1763):
    float_180781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1763, 16), 'float')
    # Getting the type of 'q' (line 1763)
    q_180782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 23), 'q')
    # Getting the type of 'r' (line 1763)
    r_180783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 27), 'r')
    # Applying the binary operator '-' (line 1763)
    result_sub_180784 = python_operator(stypy.reporting.localization.Localization(__file__, 1763, 23), '-', q_180782, r_180783)
    
    # Applying the binary operator '*' (line 1763)
    result_mul_180785 = python_operator(stypy.reporting.localization.Localization(__file__, 1763, 16), '*', float_180781, result_sub_180784)
    
    # Assigning a type to the variable 'q' (line 1763)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1763, 12), 'q', result_mul_180785)
    
    
    # Getting the type of 'q' (line 1764)
    q_180786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 15), 'q')
    float_180787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1764, 19), 'float')
    # Applying the binary operator '>' (line 1764)
    result_gt_180788 = python_operator(stypy.reporting.localization.Localization(__file__, 1764, 15), '>', q_180786, float_180787)
    
    # Testing the type of an if condition (line 1764)
    if_condition_180789 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1764, 12), result_gt_180788)
    # Assigning a type to the variable 'if_condition_180789' (line 1764)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1764, 12), 'if_condition_180789', if_condition_180789)
    # SSA begins for if statement (line 1764)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a UnaryOp to a Name (line 1765):
    
    # Assigning a UnaryOp to a Name (line 1765):
    
    # Getting the type of 'p' (line 1765)
    p_180790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1765, 21), 'p')
    # Applying the 'usub' unary operator (line 1765)
    result___neg___180791 = python_operator(stypy.reporting.localization.Localization(__file__, 1765, 20), 'usub', p_180790)
    
    # Assigning a type to the variable 'p' (line 1765)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1765, 16), 'p', result___neg___180791)
    # SSA join for if statement (line 1764)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1766):
    
    # Assigning a Call to a Name (line 1766):
    
    # Call to abs(...): (line 1766)
    # Processing the call arguments (line 1766)
    # Getting the type of 'q' (line 1766)
    q_180794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 26), 'q', False)
    # Processing the call keyword arguments (line 1766)
    kwargs_180795 = {}
    # Getting the type of 'numpy' (line 1766)
    numpy_180792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 16), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 1766)
    abs_180793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1766, 16), numpy_180792, 'abs')
    # Calling abs(args, kwargs) (line 1766)
    abs_call_result_180796 = invoke(stypy.reporting.localization.Localization(__file__, 1766, 16), abs_180793, *[q_180794], **kwargs_180795)
    
    # Assigning a type to the variable 'q' (line 1766)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1766, 12), 'q', abs_call_result_180796)
    
    # Assigning a Name to a Name (line 1767):
    
    # Assigning a Name to a Name (line 1767):
    # Getting the type of 'e' (line 1767)
    e_180797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 16), 'e')
    # Assigning a type to the variable 'r' (line 1767)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1767, 12), 'r', e_180797)
    
    # Assigning a Name to a Name (line 1768):
    
    # Assigning a Name to a Name (line 1768):
    # Getting the type of 'rat' (line 1768)
    rat_180798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 16), 'rat')
    # Assigning a type to the variable 'e' (line 1768)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1768, 12), 'e', rat_180798)
    
    
    # Evaluating a boolean operation
    
    
    # Call to abs(...): (line 1771)
    # Processing the call arguments (line 1771)
    # Getting the type of 'p' (line 1771)
    p_180801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 27), 'p', False)
    # Processing the call keyword arguments (line 1771)
    kwargs_180802 = {}
    # Getting the type of 'numpy' (line 1771)
    numpy_180799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 17), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 1771)
    abs_180800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1771, 17), numpy_180799, 'abs')
    # Calling abs(args, kwargs) (line 1771)
    abs_call_result_180803 = invoke(stypy.reporting.localization.Localization(__file__, 1771, 17), abs_180800, *[p_180801], **kwargs_180802)
    
    
    # Call to abs(...): (line 1771)
    # Processing the call arguments (line 1771)
    float_180806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1771, 42), 'float')
    # Getting the type of 'q' (line 1771)
    q_180807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 46), 'q', False)
    # Applying the binary operator '*' (line 1771)
    result_mul_180808 = python_operator(stypy.reporting.localization.Localization(__file__, 1771, 42), '*', float_180806, q_180807)
    
    # Getting the type of 'r' (line 1771)
    r_180809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 48), 'r', False)
    # Applying the binary operator '*' (line 1771)
    result_mul_180810 = python_operator(stypy.reporting.localization.Localization(__file__, 1771, 47), '*', result_mul_180808, r_180809)
    
    # Processing the call keyword arguments (line 1771)
    kwargs_180811 = {}
    # Getting the type of 'numpy' (line 1771)
    numpy_180804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 32), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 1771)
    abs_180805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1771, 32), numpy_180804, 'abs')
    # Calling abs(args, kwargs) (line 1771)
    abs_call_result_180812 = invoke(stypy.reporting.localization.Localization(__file__, 1771, 32), abs_180805, *[result_mul_180810], **kwargs_180811)
    
    # Applying the binary operator '<' (line 1771)
    result_lt_180813 = python_operator(stypy.reporting.localization.Localization(__file__, 1771, 17), '<', abs_call_result_180803, abs_call_result_180812)
    
    
    # Getting the type of 'p' (line 1771)
    p_180814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 57), 'p')
    # Getting the type of 'q' (line 1771)
    q_180815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 61), 'q')
    # Getting the type of 'a' (line 1771)
    a_180816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 64), 'a')
    # Getting the type of 'xf' (line 1771)
    xf_180817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 68), 'xf')
    # Applying the binary operator '-' (line 1771)
    result_sub_180818 = python_operator(stypy.reporting.localization.Localization(__file__, 1771, 64), '-', a_180816, xf_180817)
    
    # Applying the binary operator '*' (line 1771)
    result_mul_180819 = python_operator(stypy.reporting.localization.Localization(__file__, 1771, 61), '*', q_180815, result_sub_180818)
    
    # Applying the binary operator '>' (line 1771)
    result_gt_180820 = python_operator(stypy.reporting.localization.Localization(__file__, 1771, 57), '>', p_180814, result_mul_180819)
    
    # Applying the binary operator 'and' (line 1771)
    result_and_keyword_180821 = python_operator(stypy.reporting.localization.Localization(__file__, 1771, 16), 'and', result_lt_180813, result_gt_180820)
    
    # Getting the type of 'p' (line 1772)
    p_180822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 21), 'p')
    # Getting the type of 'q' (line 1772)
    q_180823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 25), 'q')
    # Getting the type of 'b' (line 1772)
    b_180824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 30), 'b')
    # Getting the type of 'xf' (line 1772)
    xf_180825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 34), 'xf')
    # Applying the binary operator '-' (line 1772)
    result_sub_180826 = python_operator(stypy.reporting.localization.Localization(__file__, 1772, 30), '-', b_180824, xf_180825)
    
    # Applying the binary operator '*' (line 1772)
    result_mul_180827 = python_operator(stypy.reporting.localization.Localization(__file__, 1772, 25), '*', q_180823, result_sub_180826)
    
    # Applying the binary operator '<' (line 1772)
    result_lt_180828 = python_operator(stypy.reporting.localization.Localization(__file__, 1772, 21), '<', p_180822, result_mul_180827)
    
    # Applying the binary operator 'and' (line 1771)
    result_and_keyword_180829 = python_operator(stypy.reporting.localization.Localization(__file__, 1771, 16), 'and', result_and_keyword_180821, result_lt_180828)
    
    # Testing the type of an if condition (line 1771)
    if_condition_180830 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1771, 12), result_and_keyword_180829)
    # Assigning a type to the variable 'if_condition_180830' (line 1771)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1771, 12), 'if_condition_180830', if_condition_180830)
    # SSA begins for if statement (line 1771)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1773):
    
    # Assigning a BinOp to a Name (line 1773):
    # Getting the type of 'p' (line 1773)
    p_180831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 23), 'p')
    float_180832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1773, 27), 'float')
    # Applying the binary operator '+' (line 1773)
    result_add_180833 = python_operator(stypy.reporting.localization.Localization(__file__, 1773, 23), '+', p_180831, float_180832)
    
    # Getting the type of 'q' (line 1773)
    q_180834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 34), 'q')
    # Applying the binary operator 'div' (line 1773)
    result_div_180835 = python_operator(stypy.reporting.localization.Localization(__file__, 1773, 22), 'div', result_add_180833, q_180834)
    
    # Assigning a type to the variable 'rat' (line 1773)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1773, 16), 'rat', result_div_180835)
    
    # Assigning a BinOp to a Name (line 1774):
    
    # Assigning a BinOp to a Name (line 1774):
    # Getting the type of 'xf' (line 1774)
    xf_180836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 20), 'xf')
    # Getting the type of 'rat' (line 1774)
    rat_180837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 25), 'rat')
    # Applying the binary operator '+' (line 1774)
    result_add_180838 = python_operator(stypy.reporting.localization.Localization(__file__, 1774, 20), '+', xf_180836, rat_180837)
    
    # Assigning a type to the variable 'x' (line 1774)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1774, 16), 'x', result_add_180838)
    
    # Assigning a Str to a Name (line 1775):
    
    # Assigning a Str to a Name (line 1775):
    str_180839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1775, 23), 'str', '       parabolic')
    # Assigning a type to the variable 'step' (line 1775)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1775, 16), 'step', str_180839)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'x' (line 1777)
    x_180840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 21), 'x')
    # Getting the type of 'a' (line 1777)
    a_180841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 25), 'a')
    # Applying the binary operator '-' (line 1777)
    result_sub_180842 = python_operator(stypy.reporting.localization.Localization(__file__, 1777, 21), '-', x_180840, a_180841)
    
    # Getting the type of 'tol2' (line 1777)
    tol2_180843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 30), 'tol2')
    # Applying the binary operator '<' (line 1777)
    result_lt_180844 = python_operator(stypy.reporting.localization.Localization(__file__, 1777, 20), '<', result_sub_180842, tol2_180843)
    
    
    # Getting the type of 'b' (line 1777)
    b_180845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 41), 'b')
    # Getting the type of 'x' (line 1777)
    x_180846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 45), 'x')
    # Applying the binary operator '-' (line 1777)
    result_sub_180847 = python_operator(stypy.reporting.localization.Localization(__file__, 1777, 41), '-', b_180845, x_180846)
    
    # Getting the type of 'tol2' (line 1777)
    tol2_180848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 50), 'tol2')
    # Applying the binary operator '<' (line 1777)
    result_lt_180849 = python_operator(stypy.reporting.localization.Localization(__file__, 1777, 40), '<', result_sub_180847, tol2_180848)
    
    # Applying the binary operator 'or' (line 1777)
    result_or_keyword_180850 = python_operator(stypy.reporting.localization.Localization(__file__, 1777, 19), 'or', result_lt_180844, result_lt_180849)
    
    # Testing the type of an if condition (line 1777)
    if_condition_180851 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1777, 16), result_or_keyword_180850)
    # Assigning a type to the variable 'if_condition_180851' (line 1777)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1777, 16), 'if_condition_180851', if_condition_180851)
    # SSA begins for if statement (line 1777)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1778):
    
    # Assigning a BinOp to a Name (line 1778):
    
    # Call to sign(...): (line 1778)
    # Processing the call arguments (line 1778)
    # Getting the type of 'xm' (line 1778)
    xm_180854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 36), 'xm', False)
    # Getting the type of 'xf' (line 1778)
    xf_180855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 41), 'xf', False)
    # Applying the binary operator '-' (line 1778)
    result_sub_180856 = python_operator(stypy.reporting.localization.Localization(__file__, 1778, 36), '-', xm_180854, xf_180855)
    
    # Processing the call keyword arguments (line 1778)
    kwargs_180857 = {}
    # Getting the type of 'numpy' (line 1778)
    numpy_180852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 25), 'numpy', False)
    # Obtaining the member 'sign' of a type (line 1778)
    sign_180853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1778, 25), numpy_180852, 'sign')
    # Calling sign(args, kwargs) (line 1778)
    sign_call_result_180858 = invoke(stypy.reporting.localization.Localization(__file__, 1778, 25), sign_180853, *[result_sub_180856], **kwargs_180857)
    
    
    # Getting the type of 'xm' (line 1778)
    xm_180859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 49), 'xm')
    # Getting the type of 'xf' (line 1778)
    xf_180860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 54), 'xf')
    # Applying the binary operator '-' (line 1778)
    result_sub_180861 = python_operator(stypy.reporting.localization.Localization(__file__, 1778, 49), '-', xm_180859, xf_180860)
    
    int_180862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1778, 61), 'int')
    # Applying the binary operator '==' (line 1778)
    result_eq_180863 = python_operator(stypy.reporting.localization.Localization(__file__, 1778, 48), '==', result_sub_180861, int_180862)
    
    # Applying the binary operator '+' (line 1778)
    result_add_180864 = python_operator(stypy.reporting.localization.Localization(__file__, 1778, 25), '+', sign_call_result_180858, result_eq_180863)
    
    # Assigning a type to the variable 'si' (line 1778)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1778, 20), 'si', result_add_180864)
    
    # Assigning a BinOp to a Name (line 1779):
    
    # Assigning a BinOp to a Name (line 1779):
    # Getting the type of 'tol1' (line 1779)
    tol1_180865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 26), 'tol1')
    # Getting the type of 'si' (line 1779)
    si_180866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 33), 'si')
    # Applying the binary operator '*' (line 1779)
    result_mul_180867 = python_operator(stypy.reporting.localization.Localization(__file__, 1779, 26), '*', tol1_180865, si_180866)
    
    # Assigning a type to the variable 'rat' (line 1779)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1779, 20), 'rat', result_mul_180867)
    # SSA join for if statement (line 1777)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1771)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Name (line 1781):
    
    # Assigning a Num to a Name (line 1781):
    int_180868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1781, 25), 'int')
    # Assigning a type to the variable 'golden' (line 1781)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1781, 16), 'golden', int_180868)
    # SSA join for if statement (line 1771)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1758)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'golden' (line 1783)
    golden_180869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1783, 11), 'golden')
    # Testing the type of an if condition (line 1783)
    if_condition_180870 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1783, 8), golden_180869)
    # Assigning a type to the variable 'if_condition_180870' (line 1783)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1783, 8), 'if_condition_180870', if_condition_180870)
    # SSA begins for if statement (line 1783)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'xf' (line 1784)
    xf_180871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 15), 'xf')
    # Getting the type of 'xm' (line 1784)
    xm_180872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 21), 'xm')
    # Applying the binary operator '>=' (line 1784)
    result_ge_180873 = python_operator(stypy.reporting.localization.Localization(__file__, 1784, 15), '>=', xf_180871, xm_180872)
    
    # Testing the type of an if condition (line 1784)
    if_condition_180874 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1784, 12), result_ge_180873)
    # Assigning a type to the variable 'if_condition_180874' (line 1784)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1784, 12), 'if_condition_180874', if_condition_180874)
    # SSA begins for if statement (line 1784)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1785):
    
    # Assigning a BinOp to a Name (line 1785):
    # Getting the type of 'a' (line 1785)
    a_180875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 20), 'a')
    # Getting the type of 'xf' (line 1785)
    xf_180876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 24), 'xf')
    # Applying the binary operator '-' (line 1785)
    result_sub_180877 = python_operator(stypy.reporting.localization.Localization(__file__, 1785, 20), '-', a_180875, xf_180876)
    
    # Assigning a type to the variable 'e' (line 1785)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1785, 16), 'e', result_sub_180877)
    # SSA branch for the else part of an if statement (line 1784)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 1787):
    
    # Assigning a BinOp to a Name (line 1787):
    # Getting the type of 'b' (line 1787)
    b_180878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 20), 'b')
    # Getting the type of 'xf' (line 1787)
    xf_180879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 24), 'xf')
    # Applying the binary operator '-' (line 1787)
    result_sub_180880 = python_operator(stypy.reporting.localization.Localization(__file__, 1787, 20), '-', b_180878, xf_180879)
    
    # Assigning a type to the variable 'e' (line 1787)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1787, 16), 'e', result_sub_180880)
    # SSA join for if statement (line 1784)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1788):
    
    # Assigning a BinOp to a Name (line 1788):
    # Getting the type of 'golden_mean' (line 1788)
    golden_mean_180881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 18), 'golden_mean')
    # Getting the type of 'e' (line 1788)
    e_180882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 30), 'e')
    # Applying the binary operator '*' (line 1788)
    result_mul_180883 = python_operator(stypy.reporting.localization.Localization(__file__, 1788, 18), '*', golden_mean_180881, e_180882)
    
    # Assigning a type to the variable 'rat' (line 1788)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1788, 12), 'rat', result_mul_180883)
    
    # Assigning a Str to a Name (line 1789):
    
    # Assigning a Str to a Name (line 1789):
    str_180884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1789, 19), 'str', '       golden')
    # Assigning a type to the variable 'step' (line 1789)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1789, 12), 'step', str_180884)
    # SSA join for if statement (line 1783)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1791):
    
    # Assigning a BinOp to a Name (line 1791):
    
    # Call to sign(...): (line 1791)
    # Processing the call arguments (line 1791)
    # Getting the type of 'rat' (line 1791)
    rat_180887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 24), 'rat', False)
    # Processing the call keyword arguments (line 1791)
    kwargs_180888 = {}
    # Getting the type of 'numpy' (line 1791)
    numpy_180885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 13), 'numpy', False)
    # Obtaining the member 'sign' of a type (line 1791)
    sign_180886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1791, 13), numpy_180885, 'sign')
    # Calling sign(args, kwargs) (line 1791)
    sign_call_result_180889 = invoke(stypy.reporting.localization.Localization(__file__, 1791, 13), sign_180886, *[rat_180887], **kwargs_180888)
    
    
    # Getting the type of 'rat' (line 1791)
    rat_180890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 32), 'rat')
    int_180891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1791, 39), 'int')
    # Applying the binary operator '==' (line 1791)
    result_eq_180892 = python_operator(stypy.reporting.localization.Localization(__file__, 1791, 32), '==', rat_180890, int_180891)
    
    # Applying the binary operator '+' (line 1791)
    result_add_180893 = python_operator(stypy.reporting.localization.Localization(__file__, 1791, 13), '+', sign_call_result_180889, result_eq_180892)
    
    # Assigning a type to the variable 'si' (line 1791)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1791, 8), 'si', result_add_180893)
    
    # Assigning a BinOp to a Name (line 1792):
    
    # Assigning a BinOp to a Name (line 1792):
    # Getting the type of 'xf' (line 1792)
    xf_180894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 12), 'xf')
    # Getting the type of 'si' (line 1792)
    si_180895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 17), 'si')
    
    # Call to max(...): (line 1792)
    # Processing the call arguments (line 1792)
    
    # Obtaining an instance of the builtin type 'list' (line 1792)
    list_180898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1792, 32), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1792)
    # Adding element type (line 1792)
    
    # Call to abs(...): (line 1792)
    # Processing the call arguments (line 1792)
    # Getting the type of 'rat' (line 1792)
    rat_180901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 43), 'rat', False)
    # Processing the call keyword arguments (line 1792)
    kwargs_180902 = {}
    # Getting the type of 'numpy' (line 1792)
    numpy_180899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 33), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 1792)
    abs_180900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1792, 33), numpy_180899, 'abs')
    # Calling abs(args, kwargs) (line 1792)
    abs_call_result_180903 = invoke(stypy.reporting.localization.Localization(__file__, 1792, 33), abs_180900, *[rat_180901], **kwargs_180902)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1792, 32), list_180898, abs_call_result_180903)
    # Adding element type (line 1792)
    # Getting the type of 'tol1' (line 1792)
    tol1_180904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 49), 'tol1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1792, 32), list_180898, tol1_180904)
    
    # Processing the call keyword arguments (line 1792)
    kwargs_180905 = {}
    # Getting the type of 'numpy' (line 1792)
    numpy_180896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 22), 'numpy', False)
    # Obtaining the member 'max' of a type (line 1792)
    max_180897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1792, 22), numpy_180896, 'max')
    # Calling max(args, kwargs) (line 1792)
    max_call_result_180906 = invoke(stypy.reporting.localization.Localization(__file__, 1792, 22), max_180897, *[list_180898], **kwargs_180905)
    
    # Applying the binary operator '*' (line 1792)
    result_mul_180907 = python_operator(stypy.reporting.localization.Localization(__file__, 1792, 17), '*', si_180895, max_call_result_180906)
    
    # Applying the binary operator '+' (line 1792)
    result_add_180908 = python_operator(stypy.reporting.localization.Localization(__file__, 1792, 12), '+', xf_180894, result_mul_180907)
    
    # Assigning a type to the variable 'x' (line 1792)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1792, 8), 'x', result_add_180908)
    
    # Assigning a Call to a Name (line 1793):
    
    # Assigning a Call to a Name (line 1793):
    
    # Call to func(...): (line 1793)
    # Processing the call arguments (line 1793)
    # Getting the type of 'x' (line 1793)
    x_180910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 18), 'x', False)
    # Getting the type of 'args' (line 1793)
    args_180911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 22), 'args', False)
    # Processing the call keyword arguments (line 1793)
    kwargs_180912 = {}
    # Getting the type of 'func' (line 1793)
    func_180909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 13), 'func', False)
    # Calling func(args, kwargs) (line 1793)
    func_call_result_180913 = invoke(stypy.reporting.localization.Localization(__file__, 1793, 13), func_180909, *[x_180910, args_180911], **kwargs_180912)
    
    # Assigning a type to the variable 'fu' (line 1793)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1793, 8), 'fu', func_call_result_180913)
    
    # Getting the type of 'num' (line 1794)
    num_180914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 8), 'num')
    int_180915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1794, 15), 'int')
    # Applying the binary operator '+=' (line 1794)
    result_iadd_180916 = python_operator(stypy.reporting.localization.Localization(__file__, 1794, 8), '+=', num_180914, int_180915)
    # Assigning a type to the variable 'num' (line 1794)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1794, 8), 'num', result_iadd_180916)
    
    
    # Assigning a Tuple to a Name (line 1795):
    
    # Assigning a Tuple to a Name (line 1795):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1795)
    tuple_180917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1795, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1795)
    # Adding element type (line 1795)
    # Getting the type of 'num' (line 1795)
    num_180918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 21), 'num')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1795, 21), tuple_180917, num_180918)
    # Adding element type (line 1795)
    # Getting the type of 'x' (line 1795)
    x_180919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 26), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1795, 21), tuple_180917, x_180919)
    # Adding element type (line 1795)
    # Getting the type of 'fu' (line 1795)
    fu_180920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 29), 'fu')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1795, 21), tuple_180917, fu_180920)
    
    # Assigning a type to the variable 'fmin_data' (line 1795)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1795, 8), 'fmin_data', tuple_180917)
    
    
    # Getting the type of 'disp' (line 1796)
    disp_180921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 11), 'disp')
    int_180922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1796, 18), 'int')
    # Applying the binary operator '>' (line 1796)
    result_gt_180923 = python_operator(stypy.reporting.localization.Localization(__file__, 1796, 11), '>', disp_180921, int_180922)
    
    # Testing the type of an if condition (line 1796)
    if_condition_180924 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1796, 8), result_gt_180923)
    # Assigning a type to the variable 'if_condition_180924' (line 1796)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1796, 8), 'if_condition_180924', if_condition_180924)
    # SSA begins for if statement (line 1796)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 1797)
    # Processing the call arguments (line 1797)
    str_180926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1797, 18), 'str', '%5.0f   %12.6g %12.6g %s')
    # Getting the type of 'fmin_data' (line 1797)
    fmin_data_180927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 48), 'fmin_data', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1797)
    tuple_180928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1797, 61), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1797)
    # Adding element type (line 1797)
    # Getting the type of 'step' (line 1797)
    step_180929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 61), 'step', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1797, 61), tuple_180928, step_180929)
    
    # Applying the binary operator '+' (line 1797)
    result_add_180930 = python_operator(stypy.reporting.localization.Localization(__file__, 1797, 48), '+', fmin_data_180927, tuple_180928)
    
    # Applying the binary operator '%' (line 1797)
    result_mod_180931 = python_operator(stypy.reporting.localization.Localization(__file__, 1797, 18), '%', str_180926, result_add_180930)
    
    # Processing the call keyword arguments (line 1797)
    kwargs_180932 = {}
    # Getting the type of 'print' (line 1797)
    print_180925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 12), 'print', False)
    # Calling print(args, kwargs) (line 1797)
    print_call_result_180933 = invoke(stypy.reporting.localization.Localization(__file__, 1797, 12), print_180925, *[result_mod_180931], **kwargs_180932)
    
    # SSA join for if statement (line 1796)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'fu' (line 1799)
    fu_180934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 11), 'fu')
    # Getting the type of 'fx' (line 1799)
    fx_180935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 17), 'fx')
    # Applying the binary operator '<=' (line 1799)
    result_le_180936 = python_operator(stypy.reporting.localization.Localization(__file__, 1799, 11), '<=', fu_180934, fx_180935)
    
    # Testing the type of an if condition (line 1799)
    if_condition_180937 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1799, 8), result_le_180936)
    # Assigning a type to the variable 'if_condition_180937' (line 1799)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1799, 8), 'if_condition_180937', if_condition_180937)
    # SSA begins for if statement (line 1799)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'x' (line 1800)
    x_180938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 15), 'x')
    # Getting the type of 'xf' (line 1800)
    xf_180939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 20), 'xf')
    # Applying the binary operator '>=' (line 1800)
    result_ge_180940 = python_operator(stypy.reporting.localization.Localization(__file__, 1800, 15), '>=', x_180938, xf_180939)
    
    # Testing the type of an if condition (line 1800)
    if_condition_180941 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1800, 12), result_ge_180940)
    # Assigning a type to the variable 'if_condition_180941' (line 1800)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1800, 12), 'if_condition_180941', if_condition_180941)
    # SSA begins for if statement (line 1800)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 1801):
    
    # Assigning a Name to a Name (line 1801):
    # Getting the type of 'xf' (line 1801)
    xf_180942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 20), 'xf')
    # Assigning a type to the variable 'a' (line 1801)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1801, 16), 'a', xf_180942)
    # SSA branch for the else part of an if statement (line 1800)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1803):
    
    # Assigning a Name to a Name (line 1803):
    # Getting the type of 'xf' (line 1803)
    xf_180943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1803, 20), 'xf')
    # Assigning a type to the variable 'b' (line 1803)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1803, 16), 'b', xf_180943)
    # SSA join for if statement (line 1800)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Tuple to a Tuple (line 1804):
    
    # Assigning a Name to a Name (line 1804):
    # Getting the type of 'nfc' (line 1804)
    nfc_180944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 26), 'nfc')
    # Assigning a type to the variable 'tuple_assignment_176671' (line 1804)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1804, 12), 'tuple_assignment_176671', nfc_180944)
    
    # Assigning a Name to a Name (line 1804):
    # Getting the type of 'fnfc' (line 1804)
    fnfc_180945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 31), 'fnfc')
    # Assigning a type to the variable 'tuple_assignment_176672' (line 1804)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1804, 12), 'tuple_assignment_176672', fnfc_180945)
    
    # Assigning a Name to a Name (line 1804):
    # Getting the type of 'tuple_assignment_176671' (line 1804)
    tuple_assignment_176671_180946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 12), 'tuple_assignment_176671')
    # Assigning a type to the variable 'fulc' (line 1804)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1804, 12), 'fulc', tuple_assignment_176671_180946)
    
    # Assigning a Name to a Name (line 1804):
    # Getting the type of 'tuple_assignment_176672' (line 1804)
    tuple_assignment_176672_180947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 12), 'tuple_assignment_176672')
    # Assigning a type to the variable 'ffulc' (line 1804)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1804, 18), 'ffulc', tuple_assignment_176672_180947)
    
    # Assigning a Tuple to a Tuple (line 1805):
    
    # Assigning a Name to a Name (line 1805):
    # Getting the type of 'xf' (line 1805)
    xf_180948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 24), 'xf')
    # Assigning a type to the variable 'tuple_assignment_176673' (line 1805)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1805, 12), 'tuple_assignment_176673', xf_180948)
    
    # Assigning a Name to a Name (line 1805):
    # Getting the type of 'fx' (line 1805)
    fx_180949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 28), 'fx')
    # Assigning a type to the variable 'tuple_assignment_176674' (line 1805)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1805, 12), 'tuple_assignment_176674', fx_180949)
    
    # Assigning a Name to a Name (line 1805):
    # Getting the type of 'tuple_assignment_176673' (line 1805)
    tuple_assignment_176673_180950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 12), 'tuple_assignment_176673')
    # Assigning a type to the variable 'nfc' (line 1805)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1805, 12), 'nfc', tuple_assignment_176673_180950)
    
    # Assigning a Name to a Name (line 1805):
    # Getting the type of 'tuple_assignment_176674' (line 1805)
    tuple_assignment_176674_180951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 12), 'tuple_assignment_176674')
    # Assigning a type to the variable 'fnfc' (line 1805)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1805, 17), 'fnfc', tuple_assignment_176674_180951)
    
    # Assigning a Tuple to a Tuple (line 1806):
    
    # Assigning a Name to a Name (line 1806):
    # Getting the type of 'x' (line 1806)
    x_180952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 21), 'x')
    # Assigning a type to the variable 'tuple_assignment_176675' (line 1806)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1806, 12), 'tuple_assignment_176675', x_180952)
    
    # Assigning a Name to a Name (line 1806):
    # Getting the type of 'fu' (line 1806)
    fu_180953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 24), 'fu')
    # Assigning a type to the variable 'tuple_assignment_176676' (line 1806)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1806, 12), 'tuple_assignment_176676', fu_180953)
    
    # Assigning a Name to a Name (line 1806):
    # Getting the type of 'tuple_assignment_176675' (line 1806)
    tuple_assignment_176675_180954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 12), 'tuple_assignment_176675')
    # Assigning a type to the variable 'xf' (line 1806)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1806, 12), 'xf', tuple_assignment_176675_180954)
    
    # Assigning a Name to a Name (line 1806):
    # Getting the type of 'tuple_assignment_176676' (line 1806)
    tuple_assignment_176676_180955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 12), 'tuple_assignment_176676')
    # Assigning a type to the variable 'fx' (line 1806)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1806, 16), 'fx', tuple_assignment_176676_180955)
    # SSA branch for the else part of an if statement (line 1799)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'x' (line 1808)
    x_180956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 15), 'x')
    # Getting the type of 'xf' (line 1808)
    xf_180957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 19), 'xf')
    # Applying the binary operator '<' (line 1808)
    result_lt_180958 = python_operator(stypy.reporting.localization.Localization(__file__, 1808, 15), '<', x_180956, xf_180957)
    
    # Testing the type of an if condition (line 1808)
    if_condition_180959 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1808, 12), result_lt_180958)
    # Assigning a type to the variable 'if_condition_180959' (line 1808)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1808, 12), 'if_condition_180959', if_condition_180959)
    # SSA begins for if statement (line 1808)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 1809):
    
    # Assigning a Name to a Name (line 1809):
    # Getting the type of 'x' (line 1809)
    x_180960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 20), 'x')
    # Assigning a type to the variable 'a' (line 1809)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1809, 16), 'a', x_180960)
    # SSA branch for the else part of an if statement (line 1808)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1811):
    
    # Assigning a Name to a Name (line 1811):
    # Getting the type of 'x' (line 1811)
    x_180961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 20), 'x')
    # Assigning a type to the variable 'b' (line 1811)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1811, 16), 'b', x_180961)
    # SSA join for if statement (line 1808)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'fu' (line 1812)
    fu_180962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 16), 'fu')
    # Getting the type of 'fnfc' (line 1812)
    fnfc_180963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 22), 'fnfc')
    # Applying the binary operator '<=' (line 1812)
    result_le_180964 = python_operator(stypy.reporting.localization.Localization(__file__, 1812, 16), '<=', fu_180962, fnfc_180963)
    
    
    # Getting the type of 'nfc' (line 1812)
    nfc_180965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 32), 'nfc')
    # Getting the type of 'xf' (line 1812)
    xf_180966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 39), 'xf')
    # Applying the binary operator '==' (line 1812)
    result_eq_180967 = python_operator(stypy.reporting.localization.Localization(__file__, 1812, 32), '==', nfc_180965, xf_180966)
    
    # Applying the binary operator 'or' (line 1812)
    result_or_keyword_180968 = python_operator(stypy.reporting.localization.Localization(__file__, 1812, 15), 'or', result_le_180964, result_eq_180967)
    
    # Testing the type of an if condition (line 1812)
    if_condition_180969 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1812, 12), result_or_keyword_180968)
    # Assigning a type to the variable 'if_condition_180969' (line 1812)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1812, 12), 'if_condition_180969', if_condition_180969)
    # SSA begins for if statement (line 1812)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 1813):
    
    # Assigning a Name to a Name (line 1813):
    # Getting the type of 'nfc' (line 1813)
    nfc_180970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 30), 'nfc')
    # Assigning a type to the variable 'tuple_assignment_176677' (line 1813)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1813, 16), 'tuple_assignment_176677', nfc_180970)
    
    # Assigning a Name to a Name (line 1813):
    # Getting the type of 'fnfc' (line 1813)
    fnfc_180971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 35), 'fnfc')
    # Assigning a type to the variable 'tuple_assignment_176678' (line 1813)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1813, 16), 'tuple_assignment_176678', fnfc_180971)
    
    # Assigning a Name to a Name (line 1813):
    # Getting the type of 'tuple_assignment_176677' (line 1813)
    tuple_assignment_176677_180972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 16), 'tuple_assignment_176677')
    # Assigning a type to the variable 'fulc' (line 1813)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1813, 16), 'fulc', tuple_assignment_176677_180972)
    
    # Assigning a Name to a Name (line 1813):
    # Getting the type of 'tuple_assignment_176678' (line 1813)
    tuple_assignment_176678_180973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 16), 'tuple_assignment_176678')
    # Assigning a type to the variable 'ffulc' (line 1813)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1813, 22), 'ffulc', tuple_assignment_176678_180973)
    
    # Assigning a Tuple to a Tuple (line 1814):
    
    # Assigning a Name to a Name (line 1814):
    # Getting the type of 'x' (line 1814)
    x_180974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 28), 'x')
    # Assigning a type to the variable 'tuple_assignment_176679' (line 1814)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1814, 16), 'tuple_assignment_176679', x_180974)
    
    # Assigning a Name to a Name (line 1814):
    # Getting the type of 'fu' (line 1814)
    fu_180975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 31), 'fu')
    # Assigning a type to the variable 'tuple_assignment_176680' (line 1814)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1814, 16), 'tuple_assignment_176680', fu_180975)
    
    # Assigning a Name to a Name (line 1814):
    # Getting the type of 'tuple_assignment_176679' (line 1814)
    tuple_assignment_176679_180976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 16), 'tuple_assignment_176679')
    # Assigning a type to the variable 'nfc' (line 1814)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1814, 16), 'nfc', tuple_assignment_176679_180976)
    
    # Assigning a Name to a Name (line 1814):
    # Getting the type of 'tuple_assignment_176680' (line 1814)
    tuple_assignment_176680_180977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 16), 'tuple_assignment_176680')
    # Assigning a type to the variable 'fnfc' (line 1814)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1814, 21), 'fnfc', tuple_assignment_176680_180977)
    # SSA branch for the else part of an if statement (line 1812)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'fu' (line 1815)
    fu_180978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 18), 'fu')
    # Getting the type of 'ffulc' (line 1815)
    ffulc_180979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 24), 'ffulc')
    # Applying the binary operator '<=' (line 1815)
    result_le_180980 = python_operator(stypy.reporting.localization.Localization(__file__, 1815, 18), '<=', fu_180978, ffulc_180979)
    
    
    # Getting the type of 'fulc' (line 1815)
    fulc_180981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 35), 'fulc')
    # Getting the type of 'xf' (line 1815)
    xf_180982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 43), 'xf')
    # Applying the binary operator '==' (line 1815)
    result_eq_180983 = python_operator(stypy.reporting.localization.Localization(__file__, 1815, 35), '==', fulc_180981, xf_180982)
    
    # Applying the binary operator 'or' (line 1815)
    result_or_keyword_180984 = python_operator(stypy.reporting.localization.Localization(__file__, 1815, 17), 'or', result_le_180980, result_eq_180983)
    
    # Getting the type of 'fulc' (line 1815)
    fulc_180985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 51), 'fulc')
    # Getting the type of 'nfc' (line 1815)
    nfc_180986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 59), 'nfc')
    # Applying the binary operator '==' (line 1815)
    result_eq_180987 = python_operator(stypy.reporting.localization.Localization(__file__, 1815, 51), '==', fulc_180985, nfc_180986)
    
    # Applying the binary operator 'or' (line 1815)
    result_or_keyword_180988 = python_operator(stypy.reporting.localization.Localization(__file__, 1815, 17), 'or', result_or_keyword_180984, result_eq_180987)
    
    # Testing the type of an if condition (line 1815)
    if_condition_180989 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1815, 17), result_or_keyword_180988)
    # Assigning a type to the variable 'if_condition_180989' (line 1815)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1815, 17), 'if_condition_180989', if_condition_180989)
    # SSA begins for if statement (line 1815)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 1816):
    
    # Assigning a Name to a Name (line 1816):
    # Getting the type of 'x' (line 1816)
    x_180990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 30), 'x')
    # Assigning a type to the variable 'tuple_assignment_176681' (line 1816)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1816, 16), 'tuple_assignment_176681', x_180990)
    
    # Assigning a Name to a Name (line 1816):
    # Getting the type of 'fu' (line 1816)
    fu_180991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 33), 'fu')
    # Assigning a type to the variable 'tuple_assignment_176682' (line 1816)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1816, 16), 'tuple_assignment_176682', fu_180991)
    
    # Assigning a Name to a Name (line 1816):
    # Getting the type of 'tuple_assignment_176681' (line 1816)
    tuple_assignment_176681_180992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 16), 'tuple_assignment_176681')
    # Assigning a type to the variable 'fulc' (line 1816)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1816, 16), 'fulc', tuple_assignment_176681_180992)
    
    # Assigning a Name to a Name (line 1816):
    # Getting the type of 'tuple_assignment_176682' (line 1816)
    tuple_assignment_176682_180993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 16), 'tuple_assignment_176682')
    # Assigning a type to the variable 'ffulc' (line 1816)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1816, 22), 'ffulc', tuple_assignment_176682_180993)
    # SSA join for if statement (line 1815)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1812)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1799)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1818):
    
    # Assigning a BinOp to a Name (line 1818):
    float_180994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1818, 13), 'float')
    # Getting the type of 'a' (line 1818)
    a_180995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 20), 'a')
    # Getting the type of 'b' (line 1818)
    b_180996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 24), 'b')
    # Applying the binary operator '+' (line 1818)
    result_add_180997 = python_operator(stypy.reporting.localization.Localization(__file__, 1818, 20), '+', a_180995, b_180996)
    
    # Applying the binary operator '*' (line 1818)
    result_mul_180998 = python_operator(stypy.reporting.localization.Localization(__file__, 1818, 13), '*', float_180994, result_add_180997)
    
    # Assigning a type to the variable 'xm' (line 1818)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1818, 8), 'xm', result_mul_180998)
    
    # Assigning a BinOp to a Name (line 1819):
    
    # Assigning a BinOp to a Name (line 1819):
    # Getting the type of 'sqrt_eps' (line 1819)
    sqrt_eps_180999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 15), 'sqrt_eps')
    
    # Call to abs(...): (line 1819)
    # Processing the call arguments (line 1819)
    # Getting the type of 'xf' (line 1819)
    xf_181002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 36), 'xf', False)
    # Processing the call keyword arguments (line 1819)
    kwargs_181003 = {}
    # Getting the type of 'numpy' (line 1819)
    numpy_181000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 26), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 1819)
    abs_181001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1819, 26), numpy_181000, 'abs')
    # Calling abs(args, kwargs) (line 1819)
    abs_call_result_181004 = invoke(stypy.reporting.localization.Localization(__file__, 1819, 26), abs_181001, *[xf_181002], **kwargs_181003)
    
    # Applying the binary operator '*' (line 1819)
    result_mul_181005 = python_operator(stypy.reporting.localization.Localization(__file__, 1819, 15), '*', sqrt_eps_180999, abs_call_result_181004)
    
    # Getting the type of 'xatol' (line 1819)
    xatol_181006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 42), 'xatol')
    float_181007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1819, 50), 'float')
    # Applying the binary operator 'div' (line 1819)
    result_div_181008 = python_operator(stypy.reporting.localization.Localization(__file__, 1819, 42), 'div', xatol_181006, float_181007)
    
    # Applying the binary operator '+' (line 1819)
    result_add_181009 = python_operator(stypy.reporting.localization.Localization(__file__, 1819, 15), '+', result_mul_181005, result_div_181008)
    
    # Assigning a type to the variable 'tol1' (line 1819)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1819, 8), 'tol1', result_add_181009)
    
    # Assigning a BinOp to a Name (line 1820):
    
    # Assigning a BinOp to a Name (line 1820):
    float_181010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1820, 15), 'float')
    # Getting the type of 'tol1' (line 1820)
    tol1_181011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 21), 'tol1')
    # Applying the binary operator '*' (line 1820)
    result_mul_181012 = python_operator(stypy.reporting.localization.Localization(__file__, 1820, 15), '*', float_181010, tol1_181011)
    
    # Assigning a type to the variable 'tol2' (line 1820)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1820, 8), 'tol2', result_mul_181012)
    
    
    # Getting the type of 'num' (line 1822)
    num_181013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 11), 'num')
    # Getting the type of 'maxfun' (line 1822)
    maxfun_181014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 18), 'maxfun')
    # Applying the binary operator '>=' (line 1822)
    result_ge_181015 = python_operator(stypy.reporting.localization.Localization(__file__, 1822, 11), '>=', num_181013, maxfun_181014)
    
    # Testing the type of an if condition (line 1822)
    if_condition_181016 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1822, 8), result_ge_181015)
    # Assigning a type to the variable 'if_condition_181016' (line 1822)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1822, 8), 'if_condition_181016', if_condition_181016)
    # SSA begins for if statement (line 1822)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1823):
    
    # Assigning a Num to a Name (line 1823):
    int_181017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1823, 19), 'int')
    # Assigning a type to the variable 'flag' (line 1823)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1823, 12), 'flag', int_181017)
    # SSA join for if statement (line 1822)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for while statement (line 1755)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 1826):
    
    # Assigning a Name to a Name (line 1826):
    # Getting the type of 'fx' (line 1826)
    fx_181018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1826, 11), 'fx')
    # Assigning a type to the variable 'fval' (line 1826)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1826, 4), 'fval', fx_181018)
    
    
    # Getting the type of 'disp' (line 1827)
    disp_181019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1827, 7), 'disp')
    int_181020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1827, 14), 'int')
    # Applying the binary operator '>' (line 1827)
    result_gt_181021 = python_operator(stypy.reporting.localization.Localization(__file__, 1827, 7), '>', disp_181019, int_181020)
    
    # Testing the type of an if condition (line 1827)
    if_condition_181022 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1827, 4), result_gt_181021)
    # Assigning a type to the variable 'if_condition_181022' (line 1827)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1827, 4), 'if_condition_181022', if_condition_181022)
    # SSA begins for if statement (line 1827)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _endprint(...): (line 1828)
    # Processing the call arguments (line 1828)
    # Getting the type of 'x' (line 1828)
    x_181024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 18), 'x', False)
    # Getting the type of 'flag' (line 1828)
    flag_181025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 21), 'flag', False)
    # Getting the type of 'fval' (line 1828)
    fval_181026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 27), 'fval', False)
    # Getting the type of 'maxfun' (line 1828)
    maxfun_181027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 33), 'maxfun', False)
    # Getting the type of 'xatol' (line 1828)
    xatol_181028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 41), 'xatol', False)
    # Getting the type of 'disp' (line 1828)
    disp_181029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 48), 'disp', False)
    # Processing the call keyword arguments (line 1828)
    kwargs_181030 = {}
    # Getting the type of '_endprint' (line 1828)
    _endprint_181023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 8), '_endprint', False)
    # Calling _endprint(args, kwargs) (line 1828)
    _endprint_call_result_181031 = invoke(stypy.reporting.localization.Localization(__file__, 1828, 8), _endprint_181023, *[x_181024, flag_181025, fval_181026, maxfun_181027, xatol_181028, disp_181029], **kwargs_181030)
    
    # SSA join for if statement (line 1827)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1830):
    
    # Assigning a Call to a Name (line 1830):
    
    # Call to OptimizeResult(...): (line 1830)
    # Processing the call keyword arguments (line 1830)
    # Getting the type of 'fval' (line 1830)
    fval_181033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 32), 'fval', False)
    keyword_181034 = fval_181033
    # Getting the type of 'flag' (line 1830)
    flag_181035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 45), 'flag', False)
    keyword_181036 = flag_181035
    
    # Getting the type of 'flag' (line 1830)
    flag_181037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 60), 'flag', False)
    int_181038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1830, 68), 'int')
    # Applying the binary operator '==' (line 1830)
    result_eq_181039 = python_operator(stypy.reporting.localization.Localization(__file__, 1830, 60), '==', flag_181037, int_181038)
    
    keyword_181040 = result_eq_181039
    
    # Call to get(...): (line 1831)
    # Processing the call arguments (line 1831)
    # Getting the type of 'flag' (line 1833)
    flag_181047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 56), 'flag', False)
    str_181048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1833, 62), 'str', '')
    # Processing the call keyword arguments (line 1831)
    kwargs_181049 = {}
    
    # Obtaining an instance of the builtin type 'dict' (line 1831)
    dict_181041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1831, 36), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 1831)
    # Adding element type (key, value) (line 1831)
    int_181042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1831, 37), 'int')
    str_181043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1831, 40), 'str', 'Solution found.')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1831, 36), dict_181041, (int_181042, str_181043))
    # Adding element type (key, value) (line 1831)
    int_181044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 37), 'int')
    str_181045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 40), 'str', 'Maximum number of function calls reached.')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1831, 36), dict_181041, (int_181044, str_181045))
    
    # Obtaining the member 'get' of a type (line 1831)
    get_181046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1831, 36), dict_181041, 'get')
    # Calling get(args, kwargs) (line 1831)
    get_call_result_181050 = invoke(stypy.reporting.localization.Localization(__file__, 1831, 36), get_181046, *[flag_181047, str_181048], **kwargs_181049)
    
    keyword_181051 = get_call_result_181050
    # Getting the type of 'xf' (line 1834)
    xf_181052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 30), 'xf', False)
    keyword_181053 = xf_181052
    # Getting the type of 'num' (line 1834)
    num_181054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 39), 'num', False)
    keyword_181055 = num_181054
    kwargs_181056 = {'status': keyword_181036, 'success': keyword_181040, 'nfev': keyword_181055, 'fun': keyword_181034, 'x': keyword_181053, 'message': keyword_181051}
    # Getting the type of 'OptimizeResult' (line 1830)
    OptimizeResult_181032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 13), 'OptimizeResult', False)
    # Calling OptimizeResult(args, kwargs) (line 1830)
    OptimizeResult_call_result_181057 = invoke(stypy.reporting.localization.Localization(__file__, 1830, 13), OptimizeResult_181032, *[], **kwargs_181056)
    
    # Assigning a type to the variable 'result' (line 1830)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1830, 4), 'result', OptimizeResult_call_result_181057)
    # Getting the type of 'result' (line 1836)
    result_181058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 1836)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1836, 4), 'stypy_return_type', result_181058)
    
    # ################# End of '_minimize_scalar_bounded(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_minimize_scalar_bounded' in the type store
    # Getting the type of 'stypy_return_type' (line 1703)
    stypy_return_type_181059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_181059)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_minimize_scalar_bounded'
    return stypy_return_type_181059

# Assigning a type to the variable '_minimize_scalar_bounded' (line 1703)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1703, 0), '_minimize_scalar_bounded', _minimize_scalar_bounded)
# Declaration of the 'Brent' class

class Brent:

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        
        # Obtaining an instance of the builtin type 'tuple' (line 1841)
        tuple_181060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1841, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1841)
        
        float_181061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1841, 42), 'float')
        int_181062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1841, 59), 'int')
        int_181063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1842, 29), 'int')
        defaults = [tuple_181060, float_181061, int_181062, int_181063]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1841, 4, False)
        # Assigning a type to the variable 'self' (line 1842)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1842, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Brent.__init__', ['func', 'args', 'tol', 'maxiter', 'full_output'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['func', 'args', 'tol', 'maxiter', 'full_output'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1843):
        
        # Assigning a Name to a Attribute (line 1843):
        # Getting the type of 'func' (line 1843)
        func_181064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 20), 'func')
        # Getting the type of 'self' (line 1843)
        self_181065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 8), 'self')
        # Setting the type of the member 'func' of a type (line 1843)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1843, 8), self_181065, 'func', func_181064)
        
        # Assigning a Name to a Attribute (line 1844):
        
        # Assigning a Name to a Attribute (line 1844):
        # Getting the type of 'args' (line 1844)
        args_181066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 20), 'args')
        # Getting the type of 'self' (line 1844)
        self_181067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 8), 'self')
        # Setting the type of the member 'args' of a type (line 1844)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1844, 8), self_181067, 'args', args_181066)
        
        # Assigning a Name to a Attribute (line 1845):
        
        # Assigning a Name to a Attribute (line 1845):
        # Getting the type of 'tol' (line 1845)
        tol_181068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1845, 19), 'tol')
        # Getting the type of 'self' (line 1845)
        self_181069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1845, 8), 'self')
        # Setting the type of the member 'tol' of a type (line 1845)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1845, 8), self_181069, 'tol', tol_181068)
        
        # Assigning a Name to a Attribute (line 1846):
        
        # Assigning a Name to a Attribute (line 1846):
        # Getting the type of 'maxiter' (line 1846)
        maxiter_181070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 23), 'maxiter')
        # Getting the type of 'self' (line 1846)
        self_181071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 8), 'self')
        # Setting the type of the member 'maxiter' of a type (line 1846)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1846, 8), self_181071, 'maxiter', maxiter_181070)
        
        # Assigning a Num to a Attribute (line 1847):
        
        # Assigning a Num to a Attribute (line 1847):
        float_181072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1847, 23), 'float')
        # Getting the type of 'self' (line 1847)
        self_181073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 8), 'self')
        # Setting the type of the member '_mintol' of a type (line 1847)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1847, 8), self_181073, '_mintol', float_181072)
        
        # Assigning a Num to a Attribute (line 1848):
        
        # Assigning a Num to a Attribute (line 1848):
        float_181074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1848, 19), 'float')
        # Getting the type of 'self' (line 1848)
        self_181075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1848, 8), 'self')
        # Setting the type of the member '_cg' of a type (line 1848)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1848, 8), self_181075, '_cg', float_181074)
        
        # Assigning a Name to a Attribute (line 1849):
        
        # Assigning a Name to a Attribute (line 1849):
        # Getting the type of 'None' (line 1849)
        None_181076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 20), 'None')
        # Getting the type of 'self' (line 1849)
        self_181077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 8), 'self')
        # Setting the type of the member 'xmin' of a type (line 1849)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1849, 8), self_181077, 'xmin', None_181076)
        
        # Assigning a Name to a Attribute (line 1850):
        
        # Assigning a Name to a Attribute (line 1850):
        # Getting the type of 'None' (line 1850)
        None_181078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 20), 'None')
        # Getting the type of 'self' (line 1850)
        self_181079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 8), 'self')
        # Setting the type of the member 'fval' of a type (line 1850)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1850, 8), self_181079, 'fval', None_181078)
        
        # Assigning a Num to a Attribute (line 1851):
        
        # Assigning a Num to a Attribute (line 1851):
        int_181080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1851, 20), 'int')
        # Getting the type of 'self' (line 1851)
        self_181081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 8), 'self')
        # Setting the type of the member 'iter' of a type (line 1851)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1851, 8), self_181081, 'iter', int_181080)
        
        # Assigning a Num to a Attribute (line 1852):
        
        # Assigning a Num to a Attribute (line 1852):
        int_181082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1852, 24), 'int')
        # Getting the type of 'self' (line 1852)
        self_181083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 8), 'self')
        # Setting the type of the member 'funcalls' of a type (line 1852)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1852, 8), self_181083, 'funcalls', int_181082)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_bracket(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1855)
        None_181084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 32), 'None')
        defaults = [None_181084]
        # Create a new context for function 'set_bracket'
        module_type_store = module_type_store.open_function_context('set_bracket', 1855, 4, False)
        # Assigning a type to the variable 'self' (line 1856)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1856, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Brent.set_bracket.__dict__.__setitem__('stypy_localization', localization)
        Brent.set_bracket.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Brent.set_bracket.__dict__.__setitem__('stypy_type_store', module_type_store)
        Brent.set_bracket.__dict__.__setitem__('stypy_function_name', 'Brent.set_bracket')
        Brent.set_bracket.__dict__.__setitem__('stypy_param_names_list', ['brack'])
        Brent.set_bracket.__dict__.__setitem__('stypy_varargs_param_name', None)
        Brent.set_bracket.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Brent.set_bracket.__dict__.__setitem__('stypy_call_defaults', defaults)
        Brent.set_bracket.__dict__.__setitem__('stypy_call_varargs', varargs)
        Brent.set_bracket.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Brent.set_bracket.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Brent.set_bracket', ['brack'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_bracket', localization, ['brack'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_bracket(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1856):
        
        # Assigning a Name to a Attribute (line 1856):
        # Getting the type of 'brack' (line 1856)
        brack_181085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 21), 'brack')
        # Getting the type of 'self' (line 1856)
        self_181086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 8), 'self')
        # Setting the type of the member 'brack' of a type (line 1856)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1856, 8), self_181086, 'brack', brack_181085)
        
        # ################# End of 'set_bracket(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_bracket' in the type store
        # Getting the type of 'stypy_return_type' (line 1855)
        stypy_return_type_181087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_181087)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_bracket'
        return stypy_return_type_181087


    @norecursion
    def get_bracket_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_bracket_info'
        module_type_store = module_type_store.open_function_context('get_bracket_info', 1858, 4, False)
        # Assigning a type to the variable 'self' (line 1859)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1859, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Brent.get_bracket_info.__dict__.__setitem__('stypy_localization', localization)
        Brent.get_bracket_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Brent.get_bracket_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        Brent.get_bracket_info.__dict__.__setitem__('stypy_function_name', 'Brent.get_bracket_info')
        Brent.get_bracket_info.__dict__.__setitem__('stypy_param_names_list', [])
        Brent.get_bracket_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        Brent.get_bracket_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Brent.get_bracket_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        Brent.get_bracket_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        Brent.get_bracket_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Brent.get_bracket_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Brent.get_bracket_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_bracket_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_bracket_info(...)' code ##################

        
        # Assigning a Attribute to a Name (line 1860):
        
        # Assigning a Attribute to a Name (line 1860):
        # Getting the type of 'self' (line 1860)
        self_181088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1860, 15), 'self')
        # Obtaining the member 'func' of a type (line 1860)
        func_181089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1860, 15), self_181088, 'func')
        # Assigning a type to the variable 'func' (line 1860)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1860, 8), 'func', func_181089)
        
        # Assigning a Attribute to a Name (line 1861):
        
        # Assigning a Attribute to a Name (line 1861):
        # Getting the type of 'self' (line 1861)
        self_181090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 15), 'self')
        # Obtaining the member 'args' of a type (line 1861)
        args_181091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1861, 15), self_181090, 'args')
        # Assigning a type to the variable 'args' (line 1861)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1861, 8), 'args', args_181091)
        
        # Assigning a Attribute to a Name (line 1862):
        
        # Assigning a Attribute to a Name (line 1862):
        # Getting the type of 'self' (line 1862)
        self_181092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 16), 'self')
        # Obtaining the member 'brack' of a type (line 1862)
        brack_181093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1862, 16), self_181092, 'brack')
        # Assigning a type to the variable 'brack' (line 1862)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1862, 8), 'brack', brack_181093)
        
        # Type idiom detected: calculating its left and rigth part (line 1865)
        # Getting the type of 'brack' (line 1865)
        brack_181094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 11), 'brack')
        # Getting the type of 'None' (line 1865)
        None_181095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 20), 'None')
        
        (may_be_181096, more_types_in_union_181097) = may_be_none(brack_181094, None_181095)

        if may_be_181096:

            if more_types_in_union_181097:
                # Runtime conditional SSA (line 1865)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Tuple (line 1866):
            
            # Assigning a Subscript to a Name (line 1866):
            
            # Obtaining the type of the subscript
            int_181098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1866, 12), 'int')
            
            # Call to bracket(...): (line 1866)
            # Processing the call arguments (line 1866)
            # Getting the type of 'func' (line 1866)
            func_181100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 55), 'func', False)
            # Processing the call keyword arguments (line 1866)
            # Getting the type of 'args' (line 1866)
            args_181101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 66), 'args', False)
            keyword_181102 = args_181101
            kwargs_181103 = {'args': keyword_181102}
            # Getting the type of 'bracket' (line 1866)
            bracket_181099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 47), 'bracket', False)
            # Calling bracket(args, kwargs) (line 1866)
            bracket_call_result_181104 = invoke(stypy.reporting.localization.Localization(__file__, 1866, 47), bracket_181099, *[func_181100], **kwargs_181103)
            
            # Obtaining the member '__getitem__' of a type (line 1866)
            getitem___181105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1866, 12), bracket_call_result_181104, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1866)
            subscript_call_result_181106 = invoke(stypy.reporting.localization.Localization(__file__, 1866, 12), getitem___181105, int_181098)
            
            # Assigning a type to the variable 'tuple_var_assignment_176683' (line 1866)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 12), 'tuple_var_assignment_176683', subscript_call_result_181106)
            
            # Assigning a Subscript to a Name (line 1866):
            
            # Obtaining the type of the subscript
            int_181107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1866, 12), 'int')
            
            # Call to bracket(...): (line 1866)
            # Processing the call arguments (line 1866)
            # Getting the type of 'func' (line 1866)
            func_181109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 55), 'func', False)
            # Processing the call keyword arguments (line 1866)
            # Getting the type of 'args' (line 1866)
            args_181110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 66), 'args', False)
            keyword_181111 = args_181110
            kwargs_181112 = {'args': keyword_181111}
            # Getting the type of 'bracket' (line 1866)
            bracket_181108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 47), 'bracket', False)
            # Calling bracket(args, kwargs) (line 1866)
            bracket_call_result_181113 = invoke(stypy.reporting.localization.Localization(__file__, 1866, 47), bracket_181108, *[func_181109], **kwargs_181112)
            
            # Obtaining the member '__getitem__' of a type (line 1866)
            getitem___181114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1866, 12), bracket_call_result_181113, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1866)
            subscript_call_result_181115 = invoke(stypy.reporting.localization.Localization(__file__, 1866, 12), getitem___181114, int_181107)
            
            # Assigning a type to the variable 'tuple_var_assignment_176684' (line 1866)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 12), 'tuple_var_assignment_176684', subscript_call_result_181115)
            
            # Assigning a Subscript to a Name (line 1866):
            
            # Obtaining the type of the subscript
            int_181116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1866, 12), 'int')
            
            # Call to bracket(...): (line 1866)
            # Processing the call arguments (line 1866)
            # Getting the type of 'func' (line 1866)
            func_181118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 55), 'func', False)
            # Processing the call keyword arguments (line 1866)
            # Getting the type of 'args' (line 1866)
            args_181119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 66), 'args', False)
            keyword_181120 = args_181119
            kwargs_181121 = {'args': keyword_181120}
            # Getting the type of 'bracket' (line 1866)
            bracket_181117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 47), 'bracket', False)
            # Calling bracket(args, kwargs) (line 1866)
            bracket_call_result_181122 = invoke(stypy.reporting.localization.Localization(__file__, 1866, 47), bracket_181117, *[func_181118], **kwargs_181121)
            
            # Obtaining the member '__getitem__' of a type (line 1866)
            getitem___181123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1866, 12), bracket_call_result_181122, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1866)
            subscript_call_result_181124 = invoke(stypy.reporting.localization.Localization(__file__, 1866, 12), getitem___181123, int_181116)
            
            # Assigning a type to the variable 'tuple_var_assignment_176685' (line 1866)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 12), 'tuple_var_assignment_176685', subscript_call_result_181124)
            
            # Assigning a Subscript to a Name (line 1866):
            
            # Obtaining the type of the subscript
            int_181125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1866, 12), 'int')
            
            # Call to bracket(...): (line 1866)
            # Processing the call arguments (line 1866)
            # Getting the type of 'func' (line 1866)
            func_181127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 55), 'func', False)
            # Processing the call keyword arguments (line 1866)
            # Getting the type of 'args' (line 1866)
            args_181128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 66), 'args', False)
            keyword_181129 = args_181128
            kwargs_181130 = {'args': keyword_181129}
            # Getting the type of 'bracket' (line 1866)
            bracket_181126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 47), 'bracket', False)
            # Calling bracket(args, kwargs) (line 1866)
            bracket_call_result_181131 = invoke(stypy.reporting.localization.Localization(__file__, 1866, 47), bracket_181126, *[func_181127], **kwargs_181130)
            
            # Obtaining the member '__getitem__' of a type (line 1866)
            getitem___181132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1866, 12), bracket_call_result_181131, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1866)
            subscript_call_result_181133 = invoke(stypy.reporting.localization.Localization(__file__, 1866, 12), getitem___181132, int_181125)
            
            # Assigning a type to the variable 'tuple_var_assignment_176686' (line 1866)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 12), 'tuple_var_assignment_176686', subscript_call_result_181133)
            
            # Assigning a Subscript to a Name (line 1866):
            
            # Obtaining the type of the subscript
            int_181134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1866, 12), 'int')
            
            # Call to bracket(...): (line 1866)
            # Processing the call arguments (line 1866)
            # Getting the type of 'func' (line 1866)
            func_181136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 55), 'func', False)
            # Processing the call keyword arguments (line 1866)
            # Getting the type of 'args' (line 1866)
            args_181137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 66), 'args', False)
            keyword_181138 = args_181137
            kwargs_181139 = {'args': keyword_181138}
            # Getting the type of 'bracket' (line 1866)
            bracket_181135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 47), 'bracket', False)
            # Calling bracket(args, kwargs) (line 1866)
            bracket_call_result_181140 = invoke(stypy.reporting.localization.Localization(__file__, 1866, 47), bracket_181135, *[func_181136], **kwargs_181139)
            
            # Obtaining the member '__getitem__' of a type (line 1866)
            getitem___181141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1866, 12), bracket_call_result_181140, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1866)
            subscript_call_result_181142 = invoke(stypy.reporting.localization.Localization(__file__, 1866, 12), getitem___181141, int_181134)
            
            # Assigning a type to the variable 'tuple_var_assignment_176687' (line 1866)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 12), 'tuple_var_assignment_176687', subscript_call_result_181142)
            
            # Assigning a Subscript to a Name (line 1866):
            
            # Obtaining the type of the subscript
            int_181143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1866, 12), 'int')
            
            # Call to bracket(...): (line 1866)
            # Processing the call arguments (line 1866)
            # Getting the type of 'func' (line 1866)
            func_181145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 55), 'func', False)
            # Processing the call keyword arguments (line 1866)
            # Getting the type of 'args' (line 1866)
            args_181146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 66), 'args', False)
            keyword_181147 = args_181146
            kwargs_181148 = {'args': keyword_181147}
            # Getting the type of 'bracket' (line 1866)
            bracket_181144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 47), 'bracket', False)
            # Calling bracket(args, kwargs) (line 1866)
            bracket_call_result_181149 = invoke(stypy.reporting.localization.Localization(__file__, 1866, 47), bracket_181144, *[func_181145], **kwargs_181148)
            
            # Obtaining the member '__getitem__' of a type (line 1866)
            getitem___181150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1866, 12), bracket_call_result_181149, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1866)
            subscript_call_result_181151 = invoke(stypy.reporting.localization.Localization(__file__, 1866, 12), getitem___181150, int_181143)
            
            # Assigning a type to the variable 'tuple_var_assignment_176688' (line 1866)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 12), 'tuple_var_assignment_176688', subscript_call_result_181151)
            
            # Assigning a Subscript to a Name (line 1866):
            
            # Obtaining the type of the subscript
            int_181152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1866, 12), 'int')
            
            # Call to bracket(...): (line 1866)
            # Processing the call arguments (line 1866)
            # Getting the type of 'func' (line 1866)
            func_181154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 55), 'func', False)
            # Processing the call keyword arguments (line 1866)
            # Getting the type of 'args' (line 1866)
            args_181155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 66), 'args', False)
            keyword_181156 = args_181155
            kwargs_181157 = {'args': keyword_181156}
            # Getting the type of 'bracket' (line 1866)
            bracket_181153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 47), 'bracket', False)
            # Calling bracket(args, kwargs) (line 1866)
            bracket_call_result_181158 = invoke(stypy.reporting.localization.Localization(__file__, 1866, 47), bracket_181153, *[func_181154], **kwargs_181157)
            
            # Obtaining the member '__getitem__' of a type (line 1866)
            getitem___181159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1866, 12), bracket_call_result_181158, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1866)
            subscript_call_result_181160 = invoke(stypy.reporting.localization.Localization(__file__, 1866, 12), getitem___181159, int_181152)
            
            # Assigning a type to the variable 'tuple_var_assignment_176689' (line 1866)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 12), 'tuple_var_assignment_176689', subscript_call_result_181160)
            
            # Assigning a Name to a Name (line 1866):
            # Getting the type of 'tuple_var_assignment_176683' (line 1866)
            tuple_var_assignment_176683_181161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 12), 'tuple_var_assignment_176683')
            # Assigning a type to the variable 'xa' (line 1866)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 12), 'xa', tuple_var_assignment_176683_181161)
            
            # Assigning a Name to a Name (line 1866):
            # Getting the type of 'tuple_var_assignment_176684' (line 1866)
            tuple_var_assignment_176684_181162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 12), 'tuple_var_assignment_176684')
            # Assigning a type to the variable 'xb' (line 1866)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 16), 'xb', tuple_var_assignment_176684_181162)
            
            # Assigning a Name to a Name (line 1866):
            # Getting the type of 'tuple_var_assignment_176685' (line 1866)
            tuple_var_assignment_176685_181163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 12), 'tuple_var_assignment_176685')
            # Assigning a type to the variable 'xc' (line 1866)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 20), 'xc', tuple_var_assignment_176685_181163)
            
            # Assigning a Name to a Name (line 1866):
            # Getting the type of 'tuple_var_assignment_176686' (line 1866)
            tuple_var_assignment_176686_181164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 12), 'tuple_var_assignment_176686')
            # Assigning a type to the variable 'fa' (line 1866)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 24), 'fa', tuple_var_assignment_176686_181164)
            
            # Assigning a Name to a Name (line 1866):
            # Getting the type of 'tuple_var_assignment_176687' (line 1866)
            tuple_var_assignment_176687_181165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 12), 'tuple_var_assignment_176687')
            # Assigning a type to the variable 'fb' (line 1866)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 28), 'fb', tuple_var_assignment_176687_181165)
            
            # Assigning a Name to a Name (line 1866):
            # Getting the type of 'tuple_var_assignment_176688' (line 1866)
            tuple_var_assignment_176688_181166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 12), 'tuple_var_assignment_176688')
            # Assigning a type to the variable 'fc' (line 1866)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 32), 'fc', tuple_var_assignment_176688_181166)
            
            # Assigning a Name to a Name (line 1866):
            # Getting the type of 'tuple_var_assignment_176689' (line 1866)
            tuple_var_assignment_176689_181167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 12), 'tuple_var_assignment_176689')
            # Assigning a type to the variable 'funcalls' (line 1866)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 36), 'funcalls', tuple_var_assignment_176689_181167)

            if more_types_in_union_181097:
                # Runtime conditional SSA for else branch (line 1865)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_181096) or more_types_in_union_181097):
            
            
            
            # Call to len(...): (line 1867)
            # Processing the call arguments (line 1867)
            # Getting the type of 'brack' (line 1867)
            brack_181169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 17), 'brack', False)
            # Processing the call keyword arguments (line 1867)
            kwargs_181170 = {}
            # Getting the type of 'len' (line 1867)
            len_181168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 13), 'len', False)
            # Calling len(args, kwargs) (line 1867)
            len_call_result_181171 = invoke(stypy.reporting.localization.Localization(__file__, 1867, 13), len_181168, *[brack_181169], **kwargs_181170)
            
            int_181172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1867, 27), 'int')
            # Applying the binary operator '==' (line 1867)
            result_eq_181173 = python_operator(stypy.reporting.localization.Localization(__file__, 1867, 13), '==', len_call_result_181171, int_181172)
            
            # Testing the type of an if condition (line 1867)
            if_condition_181174 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1867, 13), result_eq_181173)
            # Assigning a type to the variable 'if_condition_181174' (line 1867)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1867, 13), 'if_condition_181174', if_condition_181174)
            # SSA begins for if statement (line 1867)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Tuple (line 1868):
            
            # Assigning a Subscript to a Name (line 1868):
            
            # Obtaining the type of the subscript
            int_181175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1868, 12), 'int')
            
            # Call to bracket(...): (line 1868)
            # Processing the call arguments (line 1868)
            # Getting the type of 'func' (line 1868)
            func_181177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 55), 'func', False)
            # Processing the call keyword arguments (line 1868)
            
            # Obtaining the type of the subscript
            int_181178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1868, 70), 'int')
            # Getting the type of 'brack' (line 1868)
            brack_181179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 64), 'brack', False)
            # Obtaining the member '__getitem__' of a type (line 1868)
            getitem___181180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 64), brack_181179, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1868)
            subscript_call_result_181181 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 64), getitem___181180, int_181178)
            
            keyword_181182 = subscript_call_result_181181
            
            # Obtaining the type of the subscript
            int_181183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1869, 64), 'int')
            # Getting the type of 'brack' (line 1869)
            brack_181184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 58), 'brack', False)
            # Obtaining the member '__getitem__' of a type (line 1869)
            getitem___181185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1869, 58), brack_181184, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1869)
            subscript_call_result_181186 = invoke(stypy.reporting.localization.Localization(__file__, 1869, 58), getitem___181185, int_181183)
            
            keyword_181187 = subscript_call_result_181186
            # Getting the type of 'args' (line 1869)
            args_181188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 73), 'args', False)
            keyword_181189 = args_181188
            kwargs_181190 = {'xb': keyword_181187, 'xa': keyword_181182, 'args': keyword_181189}
            # Getting the type of 'bracket' (line 1868)
            bracket_181176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 47), 'bracket', False)
            # Calling bracket(args, kwargs) (line 1868)
            bracket_call_result_181191 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 47), bracket_181176, *[func_181177], **kwargs_181190)
            
            # Obtaining the member '__getitem__' of a type (line 1868)
            getitem___181192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 12), bracket_call_result_181191, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1868)
            subscript_call_result_181193 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 12), getitem___181192, int_181175)
            
            # Assigning a type to the variable 'tuple_var_assignment_176690' (line 1868)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 12), 'tuple_var_assignment_176690', subscript_call_result_181193)
            
            # Assigning a Subscript to a Name (line 1868):
            
            # Obtaining the type of the subscript
            int_181194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1868, 12), 'int')
            
            # Call to bracket(...): (line 1868)
            # Processing the call arguments (line 1868)
            # Getting the type of 'func' (line 1868)
            func_181196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 55), 'func', False)
            # Processing the call keyword arguments (line 1868)
            
            # Obtaining the type of the subscript
            int_181197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1868, 70), 'int')
            # Getting the type of 'brack' (line 1868)
            brack_181198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 64), 'brack', False)
            # Obtaining the member '__getitem__' of a type (line 1868)
            getitem___181199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 64), brack_181198, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1868)
            subscript_call_result_181200 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 64), getitem___181199, int_181197)
            
            keyword_181201 = subscript_call_result_181200
            
            # Obtaining the type of the subscript
            int_181202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1869, 64), 'int')
            # Getting the type of 'brack' (line 1869)
            brack_181203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 58), 'brack', False)
            # Obtaining the member '__getitem__' of a type (line 1869)
            getitem___181204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1869, 58), brack_181203, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1869)
            subscript_call_result_181205 = invoke(stypy.reporting.localization.Localization(__file__, 1869, 58), getitem___181204, int_181202)
            
            keyword_181206 = subscript_call_result_181205
            # Getting the type of 'args' (line 1869)
            args_181207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 73), 'args', False)
            keyword_181208 = args_181207
            kwargs_181209 = {'xb': keyword_181206, 'xa': keyword_181201, 'args': keyword_181208}
            # Getting the type of 'bracket' (line 1868)
            bracket_181195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 47), 'bracket', False)
            # Calling bracket(args, kwargs) (line 1868)
            bracket_call_result_181210 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 47), bracket_181195, *[func_181196], **kwargs_181209)
            
            # Obtaining the member '__getitem__' of a type (line 1868)
            getitem___181211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 12), bracket_call_result_181210, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1868)
            subscript_call_result_181212 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 12), getitem___181211, int_181194)
            
            # Assigning a type to the variable 'tuple_var_assignment_176691' (line 1868)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 12), 'tuple_var_assignment_176691', subscript_call_result_181212)
            
            # Assigning a Subscript to a Name (line 1868):
            
            # Obtaining the type of the subscript
            int_181213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1868, 12), 'int')
            
            # Call to bracket(...): (line 1868)
            # Processing the call arguments (line 1868)
            # Getting the type of 'func' (line 1868)
            func_181215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 55), 'func', False)
            # Processing the call keyword arguments (line 1868)
            
            # Obtaining the type of the subscript
            int_181216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1868, 70), 'int')
            # Getting the type of 'brack' (line 1868)
            brack_181217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 64), 'brack', False)
            # Obtaining the member '__getitem__' of a type (line 1868)
            getitem___181218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 64), brack_181217, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1868)
            subscript_call_result_181219 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 64), getitem___181218, int_181216)
            
            keyword_181220 = subscript_call_result_181219
            
            # Obtaining the type of the subscript
            int_181221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1869, 64), 'int')
            # Getting the type of 'brack' (line 1869)
            brack_181222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 58), 'brack', False)
            # Obtaining the member '__getitem__' of a type (line 1869)
            getitem___181223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1869, 58), brack_181222, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1869)
            subscript_call_result_181224 = invoke(stypy.reporting.localization.Localization(__file__, 1869, 58), getitem___181223, int_181221)
            
            keyword_181225 = subscript_call_result_181224
            # Getting the type of 'args' (line 1869)
            args_181226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 73), 'args', False)
            keyword_181227 = args_181226
            kwargs_181228 = {'xb': keyword_181225, 'xa': keyword_181220, 'args': keyword_181227}
            # Getting the type of 'bracket' (line 1868)
            bracket_181214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 47), 'bracket', False)
            # Calling bracket(args, kwargs) (line 1868)
            bracket_call_result_181229 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 47), bracket_181214, *[func_181215], **kwargs_181228)
            
            # Obtaining the member '__getitem__' of a type (line 1868)
            getitem___181230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 12), bracket_call_result_181229, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1868)
            subscript_call_result_181231 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 12), getitem___181230, int_181213)
            
            # Assigning a type to the variable 'tuple_var_assignment_176692' (line 1868)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 12), 'tuple_var_assignment_176692', subscript_call_result_181231)
            
            # Assigning a Subscript to a Name (line 1868):
            
            # Obtaining the type of the subscript
            int_181232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1868, 12), 'int')
            
            # Call to bracket(...): (line 1868)
            # Processing the call arguments (line 1868)
            # Getting the type of 'func' (line 1868)
            func_181234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 55), 'func', False)
            # Processing the call keyword arguments (line 1868)
            
            # Obtaining the type of the subscript
            int_181235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1868, 70), 'int')
            # Getting the type of 'brack' (line 1868)
            brack_181236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 64), 'brack', False)
            # Obtaining the member '__getitem__' of a type (line 1868)
            getitem___181237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 64), brack_181236, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1868)
            subscript_call_result_181238 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 64), getitem___181237, int_181235)
            
            keyword_181239 = subscript_call_result_181238
            
            # Obtaining the type of the subscript
            int_181240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1869, 64), 'int')
            # Getting the type of 'brack' (line 1869)
            brack_181241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 58), 'brack', False)
            # Obtaining the member '__getitem__' of a type (line 1869)
            getitem___181242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1869, 58), brack_181241, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1869)
            subscript_call_result_181243 = invoke(stypy.reporting.localization.Localization(__file__, 1869, 58), getitem___181242, int_181240)
            
            keyword_181244 = subscript_call_result_181243
            # Getting the type of 'args' (line 1869)
            args_181245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 73), 'args', False)
            keyword_181246 = args_181245
            kwargs_181247 = {'xb': keyword_181244, 'xa': keyword_181239, 'args': keyword_181246}
            # Getting the type of 'bracket' (line 1868)
            bracket_181233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 47), 'bracket', False)
            # Calling bracket(args, kwargs) (line 1868)
            bracket_call_result_181248 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 47), bracket_181233, *[func_181234], **kwargs_181247)
            
            # Obtaining the member '__getitem__' of a type (line 1868)
            getitem___181249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 12), bracket_call_result_181248, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1868)
            subscript_call_result_181250 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 12), getitem___181249, int_181232)
            
            # Assigning a type to the variable 'tuple_var_assignment_176693' (line 1868)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 12), 'tuple_var_assignment_176693', subscript_call_result_181250)
            
            # Assigning a Subscript to a Name (line 1868):
            
            # Obtaining the type of the subscript
            int_181251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1868, 12), 'int')
            
            # Call to bracket(...): (line 1868)
            # Processing the call arguments (line 1868)
            # Getting the type of 'func' (line 1868)
            func_181253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 55), 'func', False)
            # Processing the call keyword arguments (line 1868)
            
            # Obtaining the type of the subscript
            int_181254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1868, 70), 'int')
            # Getting the type of 'brack' (line 1868)
            brack_181255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 64), 'brack', False)
            # Obtaining the member '__getitem__' of a type (line 1868)
            getitem___181256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 64), brack_181255, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1868)
            subscript_call_result_181257 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 64), getitem___181256, int_181254)
            
            keyword_181258 = subscript_call_result_181257
            
            # Obtaining the type of the subscript
            int_181259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1869, 64), 'int')
            # Getting the type of 'brack' (line 1869)
            brack_181260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 58), 'brack', False)
            # Obtaining the member '__getitem__' of a type (line 1869)
            getitem___181261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1869, 58), brack_181260, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1869)
            subscript_call_result_181262 = invoke(stypy.reporting.localization.Localization(__file__, 1869, 58), getitem___181261, int_181259)
            
            keyword_181263 = subscript_call_result_181262
            # Getting the type of 'args' (line 1869)
            args_181264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 73), 'args', False)
            keyword_181265 = args_181264
            kwargs_181266 = {'xb': keyword_181263, 'xa': keyword_181258, 'args': keyword_181265}
            # Getting the type of 'bracket' (line 1868)
            bracket_181252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 47), 'bracket', False)
            # Calling bracket(args, kwargs) (line 1868)
            bracket_call_result_181267 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 47), bracket_181252, *[func_181253], **kwargs_181266)
            
            # Obtaining the member '__getitem__' of a type (line 1868)
            getitem___181268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 12), bracket_call_result_181267, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1868)
            subscript_call_result_181269 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 12), getitem___181268, int_181251)
            
            # Assigning a type to the variable 'tuple_var_assignment_176694' (line 1868)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 12), 'tuple_var_assignment_176694', subscript_call_result_181269)
            
            # Assigning a Subscript to a Name (line 1868):
            
            # Obtaining the type of the subscript
            int_181270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1868, 12), 'int')
            
            # Call to bracket(...): (line 1868)
            # Processing the call arguments (line 1868)
            # Getting the type of 'func' (line 1868)
            func_181272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 55), 'func', False)
            # Processing the call keyword arguments (line 1868)
            
            # Obtaining the type of the subscript
            int_181273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1868, 70), 'int')
            # Getting the type of 'brack' (line 1868)
            brack_181274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 64), 'brack', False)
            # Obtaining the member '__getitem__' of a type (line 1868)
            getitem___181275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 64), brack_181274, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1868)
            subscript_call_result_181276 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 64), getitem___181275, int_181273)
            
            keyword_181277 = subscript_call_result_181276
            
            # Obtaining the type of the subscript
            int_181278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1869, 64), 'int')
            # Getting the type of 'brack' (line 1869)
            brack_181279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 58), 'brack', False)
            # Obtaining the member '__getitem__' of a type (line 1869)
            getitem___181280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1869, 58), brack_181279, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1869)
            subscript_call_result_181281 = invoke(stypy.reporting.localization.Localization(__file__, 1869, 58), getitem___181280, int_181278)
            
            keyword_181282 = subscript_call_result_181281
            # Getting the type of 'args' (line 1869)
            args_181283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 73), 'args', False)
            keyword_181284 = args_181283
            kwargs_181285 = {'xb': keyword_181282, 'xa': keyword_181277, 'args': keyword_181284}
            # Getting the type of 'bracket' (line 1868)
            bracket_181271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 47), 'bracket', False)
            # Calling bracket(args, kwargs) (line 1868)
            bracket_call_result_181286 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 47), bracket_181271, *[func_181272], **kwargs_181285)
            
            # Obtaining the member '__getitem__' of a type (line 1868)
            getitem___181287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 12), bracket_call_result_181286, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1868)
            subscript_call_result_181288 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 12), getitem___181287, int_181270)
            
            # Assigning a type to the variable 'tuple_var_assignment_176695' (line 1868)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 12), 'tuple_var_assignment_176695', subscript_call_result_181288)
            
            # Assigning a Subscript to a Name (line 1868):
            
            # Obtaining the type of the subscript
            int_181289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1868, 12), 'int')
            
            # Call to bracket(...): (line 1868)
            # Processing the call arguments (line 1868)
            # Getting the type of 'func' (line 1868)
            func_181291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 55), 'func', False)
            # Processing the call keyword arguments (line 1868)
            
            # Obtaining the type of the subscript
            int_181292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1868, 70), 'int')
            # Getting the type of 'brack' (line 1868)
            brack_181293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 64), 'brack', False)
            # Obtaining the member '__getitem__' of a type (line 1868)
            getitem___181294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 64), brack_181293, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1868)
            subscript_call_result_181295 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 64), getitem___181294, int_181292)
            
            keyword_181296 = subscript_call_result_181295
            
            # Obtaining the type of the subscript
            int_181297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1869, 64), 'int')
            # Getting the type of 'brack' (line 1869)
            brack_181298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 58), 'brack', False)
            # Obtaining the member '__getitem__' of a type (line 1869)
            getitem___181299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1869, 58), brack_181298, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1869)
            subscript_call_result_181300 = invoke(stypy.reporting.localization.Localization(__file__, 1869, 58), getitem___181299, int_181297)
            
            keyword_181301 = subscript_call_result_181300
            # Getting the type of 'args' (line 1869)
            args_181302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 73), 'args', False)
            keyword_181303 = args_181302
            kwargs_181304 = {'xb': keyword_181301, 'xa': keyword_181296, 'args': keyword_181303}
            # Getting the type of 'bracket' (line 1868)
            bracket_181290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 47), 'bracket', False)
            # Calling bracket(args, kwargs) (line 1868)
            bracket_call_result_181305 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 47), bracket_181290, *[func_181291], **kwargs_181304)
            
            # Obtaining the member '__getitem__' of a type (line 1868)
            getitem___181306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 12), bracket_call_result_181305, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1868)
            subscript_call_result_181307 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 12), getitem___181306, int_181289)
            
            # Assigning a type to the variable 'tuple_var_assignment_176696' (line 1868)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 12), 'tuple_var_assignment_176696', subscript_call_result_181307)
            
            # Assigning a Name to a Name (line 1868):
            # Getting the type of 'tuple_var_assignment_176690' (line 1868)
            tuple_var_assignment_176690_181308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 12), 'tuple_var_assignment_176690')
            # Assigning a type to the variable 'xa' (line 1868)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 12), 'xa', tuple_var_assignment_176690_181308)
            
            # Assigning a Name to a Name (line 1868):
            # Getting the type of 'tuple_var_assignment_176691' (line 1868)
            tuple_var_assignment_176691_181309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 12), 'tuple_var_assignment_176691')
            # Assigning a type to the variable 'xb' (line 1868)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 16), 'xb', tuple_var_assignment_176691_181309)
            
            # Assigning a Name to a Name (line 1868):
            # Getting the type of 'tuple_var_assignment_176692' (line 1868)
            tuple_var_assignment_176692_181310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 12), 'tuple_var_assignment_176692')
            # Assigning a type to the variable 'xc' (line 1868)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 20), 'xc', tuple_var_assignment_176692_181310)
            
            # Assigning a Name to a Name (line 1868):
            # Getting the type of 'tuple_var_assignment_176693' (line 1868)
            tuple_var_assignment_176693_181311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 12), 'tuple_var_assignment_176693')
            # Assigning a type to the variable 'fa' (line 1868)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 24), 'fa', tuple_var_assignment_176693_181311)
            
            # Assigning a Name to a Name (line 1868):
            # Getting the type of 'tuple_var_assignment_176694' (line 1868)
            tuple_var_assignment_176694_181312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 12), 'tuple_var_assignment_176694')
            # Assigning a type to the variable 'fb' (line 1868)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 28), 'fb', tuple_var_assignment_176694_181312)
            
            # Assigning a Name to a Name (line 1868):
            # Getting the type of 'tuple_var_assignment_176695' (line 1868)
            tuple_var_assignment_176695_181313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 12), 'tuple_var_assignment_176695')
            # Assigning a type to the variable 'fc' (line 1868)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 32), 'fc', tuple_var_assignment_176695_181313)
            
            # Assigning a Name to a Name (line 1868):
            # Getting the type of 'tuple_var_assignment_176696' (line 1868)
            tuple_var_assignment_176696_181314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 12), 'tuple_var_assignment_176696')
            # Assigning a type to the variable 'funcalls' (line 1868)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 36), 'funcalls', tuple_var_assignment_176696_181314)
            # SSA branch for the else part of an if statement (line 1867)
            module_type_store.open_ssa_branch('else')
            
            
            
            # Call to len(...): (line 1870)
            # Processing the call arguments (line 1870)
            # Getting the type of 'brack' (line 1870)
            brack_181316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 17), 'brack', False)
            # Processing the call keyword arguments (line 1870)
            kwargs_181317 = {}
            # Getting the type of 'len' (line 1870)
            len_181315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 13), 'len', False)
            # Calling len(args, kwargs) (line 1870)
            len_call_result_181318 = invoke(stypy.reporting.localization.Localization(__file__, 1870, 13), len_181315, *[brack_181316], **kwargs_181317)
            
            int_181319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1870, 27), 'int')
            # Applying the binary operator '==' (line 1870)
            result_eq_181320 = python_operator(stypy.reporting.localization.Localization(__file__, 1870, 13), '==', len_call_result_181318, int_181319)
            
            # Testing the type of an if condition (line 1870)
            if_condition_181321 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1870, 13), result_eq_181320)
            # Assigning a type to the variable 'if_condition_181321' (line 1870)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1870, 13), 'if_condition_181321', if_condition_181321)
            # SSA begins for if statement (line 1870)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Tuple (line 1871):
            
            # Assigning a Subscript to a Name (line 1871):
            
            # Obtaining the type of the subscript
            int_181322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1871, 12), 'int')
            # Getting the type of 'brack' (line 1871)
            brack_181323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 25), 'brack')
            # Obtaining the member '__getitem__' of a type (line 1871)
            getitem___181324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1871, 12), brack_181323, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1871)
            subscript_call_result_181325 = invoke(stypy.reporting.localization.Localization(__file__, 1871, 12), getitem___181324, int_181322)
            
            # Assigning a type to the variable 'tuple_var_assignment_176697' (line 1871)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 12), 'tuple_var_assignment_176697', subscript_call_result_181325)
            
            # Assigning a Subscript to a Name (line 1871):
            
            # Obtaining the type of the subscript
            int_181326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1871, 12), 'int')
            # Getting the type of 'brack' (line 1871)
            brack_181327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 25), 'brack')
            # Obtaining the member '__getitem__' of a type (line 1871)
            getitem___181328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1871, 12), brack_181327, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1871)
            subscript_call_result_181329 = invoke(stypy.reporting.localization.Localization(__file__, 1871, 12), getitem___181328, int_181326)
            
            # Assigning a type to the variable 'tuple_var_assignment_176698' (line 1871)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 12), 'tuple_var_assignment_176698', subscript_call_result_181329)
            
            # Assigning a Subscript to a Name (line 1871):
            
            # Obtaining the type of the subscript
            int_181330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1871, 12), 'int')
            # Getting the type of 'brack' (line 1871)
            brack_181331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 25), 'brack')
            # Obtaining the member '__getitem__' of a type (line 1871)
            getitem___181332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1871, 12), brack_181331, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1871)
            subscript_call_result_181333 = invoke(stypy.reporting.localization.Localization(__file__, 1871, 12), getitem___181332, int_181330)
            
            # Assigning a type to the variable 'tuple_var_assignment_176699' (line 1871)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 12), 'tuple_var_assignment_176699', subscript_call_result_181333)
            
            # Assigning a Name to a Name (line 1871):
            # Getting the type of 'tuple_var_assignment_176697' (line 1871)
            tuple_var_assignment_176697_181334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 12), 'tuple_var_assignment_176697')
            # Assigning a type to the variable 'xa' (line 1871)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 12), 'xa', tuple_var_assignment_176697_181334)
            
            # Assigning a Name to a Name (line 1871):
            # Getting the type of 'tuple_var_assignment_176698' (line 1871)
            tuple_var_assignment_176698_181335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 12), 'tuple_var_assignment_176698')
            # Assigning a type to the variable 'xb' (line 1871)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 16), 'xb', tuple_var_assignment_176698_181335)
            
            # Assigning a Name to a Name (line 1871):
            # Getting the type of 'tuple_var_assignment_176699' (line 1871)
            tuple_var_assignment_176699_181336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 12), 'tuple_var_assignment_176699')
            # Assigning a type to the variable 'xc' (line 1871)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 20), 'xc', tuple_var_assignment_176699_181336)
            
            
            # Getting the type of 'xa' (line 1872)
            xa_181337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 16), 'xa')
            # Getting the type of 'xc' (line 1872)
            xc_181338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 21), 'xc')
            # Applying the binary operator '>' (line 1872)
            result_gt_181339 = python_operator(stypy.reporting.localization.Localization(__file__, 1872, 16), '>', xa_181337, xc_181338)
            
            # Testing the type of an if condition (line 1872)
            if_condition_181340 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1872, 12), result_gt_181339)
            # Assigning a type to the variable 'if_condition_181340' (line 1872)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1872, 12), 'if_condition_181340', if_condition_181340)
            # SSA begins for if statement (line 1872)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Tuple to a Tuple (line 1873):
            
            # Assigning a Name to a Name (line 1873):
            # Getting the type of 'xa' (line 1873)
            xa_181341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 25), 'xa')
            # Assigning a type to the variable 'tuple_assignment_176700' (line 1873)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1873, 16), 'tuple_assignment_176700', xa_181341)
            
            # Assigning a Name to a Name (line 1873):
            # Getting the type of 'xc' (line 1873)
            xc_181342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 29), 'xc')
            # Assigning a type to the variable 'tuple_assignment_176701' (line 1873)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1873, 16), 'tuple_assignment_176701', xc_181342)
            
            # Assigning a Name to a Name (line 1873):
            # Getting the type of 'tuple_assignment_176700' (line 1873)
            tuple_assignment_176700_181343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 16), 'tuple_assignment_176700')
            # Assigning a type to the variable 'xc' (line 1873)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1873, 16), 'xc', tuple_assignment_176700_181343)
            
            # Assigning a Name to a Name (line 1873):
            # Getting the type of 'tuple_assignment_176701' (line 1873)
            tuple_assignment_176701_181344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 16), 'tuple_assignment_176701')
            # Assigning a type to the variable 'xa' (line 1873)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1873, 20), 'xa', tuple_assignment_176701_181344)
            # SSA join for if statement (line 1872)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'xa' (line 1874)
            xa_181345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 21), 'xa')
            # Getting the type of 'xb' (line 1874)
            xb_181346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 26), 'xb')
            # Applying the binary operator '<' (line 1874)
            result_lt_181347 = python_operator(stypy.reporting.localization.Localization(__file__, 1874, 21), '<', xa_181345, xb_181346)
            
            
            # Getting the type of 'xb' (line 1874)
            xb_181348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 35), 'xb')
            # Getting the type of 'xc' (line 1874)
            xc_181349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 40), 'xc')
            # Applying the binary operator '<' (line 1874)
            result_lt_181350 = python_operator(stypy.reporting.localization.Localization(__file__, 1874, 35), '<', xb_181348, xc_181349)
            
            # Applying the binary operator 'and' (line 1874)
            result_and_keyword_181351 = python_operator(stypy.reporting.localization.Localization(__file__, 1874, 20), 'and', result_lt_181347, result_lt_181350)
            
            # Applying the 'not' unary operator (line 1874)
            result_not__181352 = python_operator(stypy.reporting.localization.Localization(__file__, 1874, 15), 'not', result_and_keyword_181351)
            
            # Testing the type of an if condition (line 1874)
            if_condition_181353 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1874, 12), result_not__181352)
            # Assigning a type to the variable 'if_condition_181353' (line 1874)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1874, 12), 'if_condition_181353', if_condition_181353)
            # SSA begins for if statement (line 1874)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 1875)
            # Processing the call arguments (line 1875)
            str_181355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1875, 33), 'str', 'Not a bracketing interval.')
            # Processing the call keyword arguments (line 1875)
            kwargs_181356 = {}
            # Getting the type of 'ValueError' (line 1875)
            ValueError_181354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1875, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1875)
            ValueError_call_result_181357 = invoke(stypy.reporting.localization.Localization(__file__, 1875, 22), ValueError_181354, *[str_181355], **kwargs_181356)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1875, 16), ValueError_call_result_181357, 'raise parameter', BaseException)
            # SSA join for if statement (line 1874)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Name (line 1876):
            
            # Assigning a Call to a Name (line 1876):
            
            # Call to func(...): (line 1876)
            
            # Obtaining an instance of the builtin type 'tuple' (line 1876)
            tuple_181359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1876, 25), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1876)
            # Adding element type (line 1876)
            # Getting the type of 'xa' (line 1876)
            xa_181360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 25), 'xa', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1876, 25), tuple_181359, xa_181360)
            
            # Getting the type of 'args' (line 1876)
            args_181361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 32), 'args', False)
            # Applying the binary operator '+' (line 1876)
            result_add_181362 = python_operator(stypy.reporting.localization.Localization(__file__, 1876, 24), '+', tuple_181359, args_181361)
            
            # Processing the call keyword arguments (line 1876)
            kwargs_181363 = {}
            # Getting the type of 'func' (line 1876)
            func_181358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 17), 'func', False)
            # Calling func(args, kwargs) (line 1876)
            func_call_result_181364 = invoke(stypy.reporting.localization.Localization(__file__, 1876, 17), func_181358, *[result_add_181362], **kwargs_181363)
            
            # Assigning a type to the variable 'fa' (line 1876)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1876, 12), 'fa', func_call_result_181364)
            
            # Assigning a Call to a Name (line 1877):
            
            # Assigning a Call to a Name (line 1877):
            
            # Call to func(...): (line 1877)
            
            # Obtaining an instance of the builtin type 'tuple' (line 1877)
            tuple_181366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1877, 25), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1877)
            # Adding element type (line 1877)
            # Getting the type of 'xb' (line 1877)
            xb_181367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 25), 'xb', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1877, 25), tuple_181366, xb_181367)
            
            # Getting the type of 'args' (line 1877)
            args_181368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 32), 'args', False)
            # Applying the binary operator '+' (line 1877)
            result_add_181369 = python_operator(stypy.reporting.localization.Localization(__file__, 1877, 24), '+', tuple_181366, args_181368)
            
            # Processing the call keyword arguments (line 1877)
            kwargs_181370 = {}
            # Getting the type of 'func' (line 1877)
            func_181365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 17), 'func', False)
            # Calling func(args, kwargs) (line 1877)
            func_call_result_181371 = invoke(stypy.reporting.localization.Localization(__file__, 1877, 17), func_181365, *[result_add_181369], **kwargs_181370)
            
            # Assigning a type to the variable 'fb' (line 1877)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1877, 12), 'fb', func_call_result_181371)
            
            # Assigning a Call to a Name (line 1878):
            
            # Assigning a Call to a Name (line 1878):
            
            # Call to func(...): (line 1878)
            
            # Obtaining an instance of the builtin type 'tuple' (line 1878)
            tuple_181373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1878, 25), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1878)
            # Adding element type (line 1878)
            # Getting the type of 'xc' (line 1878)
            xc_181374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 25), 'xc', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1878, 25), tuple_181373, xc_181374)
            
            # Getting the type of 'args' (line 1878)
            args_181375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 32), 'args', False)
            # Applying the binary operator '+' (line 1878)
            result_add_181376 = python_operator(stypy.reporting.localization.Localization(__file__, 1878, 24), '+', tuple_181373, args_181375)
            
            # Processing the call keyword arguments (line 1878)
            kwargs_181377 = {}
            # Getting the type of 'func' (line 1878)
            func_181372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 17), 'func', False)
            # Calling func(args, kwargs) (line 1878)
            func_call_result_181378 = invoke(stypy.reporting.localization.Localization(__file__, 1878, 17), func_181372, *[result_add_181376], **kwargs_181377)
            
            # Assigning a type to the variable 'fc' (line 1878)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1878, 12), 'fc', func_call_result_181378)
            
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'fb' (line 1879)
            fb_181379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 21), 'fb')
            # Getting the type of 'fa' (line 1879)
            fa_181380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 26), 'fa')
            # Applying the binary operator '<' (line 1879)
            result_lt_181381 = python_operator(stypy.reporting.localization.Localization(__file__, 1879, 21), '<', fb_181379, fa_181380)
            
            
            # Getting the type of 'fb' (line 1879)
            fb_181382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 35), 'fb')
            # Getting the type of 'fc' (line 1879)
            fc_181383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 40), 'fc')
            # Applying the binary operator '<' (line 1879)
            result_lt_181384 = python_operator(stypy.reporting.localization.Localization(__file__, 1879, 35), '<', fb_181382, fc_181383)
            
            # Applying the binary operator 'and' (line 1879)
            result_and_keyword_181385 = python_operator(stypy.reporting.localization.Localization(__file__, 1879, 20), 'and', result_lt_181381, result_lt_181384)
            
            # Applying the 'not' unary operator (line 1879)
            result_not__181386 = python_operator(stypy.reporting.localization.Localization(__file__, 1879, 15), 'not', result_and_keyword_181385)
            
            # Testing the type of an if condition (line 1879)
            if_condition_181387 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1879, 12), result_not__181386)
            # Assigning a type to the variable 'if_condition_181387' (line 1879)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1879, 12), 'if_condition_181387', if_condition_181387)
            # SSA begins for if statement (line 1879)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 1880)
            # Processing the call arguments (line 1880)
            str_181389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1880, 33), 'str', 'Not a bracketing interval.')
            # Processing the call keyword arguments (line 1880)
            kwargs_181390 = {}
            # Getting the type of 'ValueError' (line 1880)
            ValueError_181388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1880)
            ValueError_call_result_181391 = invoke(stypy.reporting.localization.Localization(__file__, 1880, 22), ValueError_181388, *[str_181389], **kwargs_181390)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1880, 16), ValueError_call_result_181391, 'raise parameter', BaseException)
            # SSA join for if statement (line 1879)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Num to a Name (line 1881):
            
            # Assigning a Num to a Name (line 1881):
            int_181392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1881, 23), 'int')
            # Assigning a type to the variable 'funcalls' (line 1881)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1881, 12), 'funcalls', int_181392)
            # SSA branch for the else part of an if statement (line 1870)
            module_type_store.open_ssa_branch('else')
            
            # Call to ValueError(...): (line 1883)
            # Processing the call arguments (line 1883)
            str_181394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1883, 29), 'str', 'Bracketing interval must be length 2 or 3 sequence.')
            # Processing the call keyword arguments (line 1883)
            kwargs_181395 = {}
            # Getting the type of 'ValueError' (line 1883)
            ValueError_181393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1883, 18), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1883)
            ValueError_call_result_181396 = invoke(stypy.reporting.localization.Localization(__file__, 1883, 18), ValueError_181393, *[str_181394], **kwargs_181395)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1883, 12), ValueError_call_result_181396, 'raise parameter', BaseException)
            # SSA join for if statement (line 1870)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1867)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_181096 and more_types_in_union_181097):
                # SSA join for if statement (line 1865)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1887)
        tuple_181397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1887, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1887)
        # Adding element type (line 1887)
        # Getting the type of 'xa' (line 1887)
        xa_181398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 15), 'xa')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1887, 15), tuple_181397, xa_181398)
        # Adding element type (line 1887)
        # Getting the type of 'xb' (line 1887)
        xb_181399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 19), 'xb')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1887, 15), tuple_181397, xb_181399)
        # Adding element type (line 1887)
        # Getting the type of 'xc' (line 1887)
        xc_181400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 23), 'xc')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1887, 15), tuple_181397, xc_181400)
        # Adding element type (line 1887)
        # Getting the type of 'fa' (line 1887)
        fa_181401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 27), 'fa')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1887, 15), tuple_181397, fa_181401)
        # Adding element type (line 1887)
        # Getting the type of 'fb' (line 1887)
        fb_181402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 31), 'fb')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1887, 15), tuple_181397, fb_181402)
        # Adding element type (line 1887)
        # Getting the type of 'fc' (line 1887)
        fc_181403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 35), 'fc')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1887, 15), tuple_181397, fc_181403)
        # Adding element type (line 1887)
        # Getting the type of 'funcalls' (line 1887)
        funcalls_181404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 39), 'funcalls')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1887, 15), tuple_181397, funcalls_181404)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1887)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1887, 8), 'stypy_return_type', tuple_181397)
        
        # ################# End of 'get_bracket_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_bracket_info' in the type store
        # Getting the type of 'stypy_return_type' (line 1858)
        stypy_return_type_181405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_181405)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_bracket_info'
        return stypy_return_type_181405


    @norecursion
    def optimize(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'optimize'
        module_type_store = module_type_store.open_function_context('optimize', 1889, 4, False)
        # Assigning a type to the variable 'self' (line 1890)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1890, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Brent.optimize.__dict__.__setitem__('stypy_localization', localization)
        Brent.optimize.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Brent.optimize.__dict__.__setitem__('stypy_type_store', module_type_store)
        Brent.optimize.__dict__.__setitem__('stypy_function_name', 'Brent.optimize')
        Brent.optimize.__dict__.__setitem__('stypy_param_names_list', [])
        Brent.optimize.__dict__.__setitem__('stypy_varargs_param_name', None)
        Brent.optimize.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Brent.optimize.__dict__.__setitem__('stypy_call_defaults', defaults)
        Brent.optimize.__dict__.__setitem__('stypy_call_varargs', varargs)
        Brent.optimize.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Brent.optimize.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Brent.optimize', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'optimize', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'optimize(...)' code ##################

        
        # Assigning a Attribute to a Name (line 1891):
        
        # Assigning a Attribute to a Name (line 1891):
        # Getting the type of 'self' (line 1891)
        self_181406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1891, 15), 'self')
        # Obtaining the member 'func' of a type (line 1891)
        func_181407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1891, 15), self_181406, 'func')
        # Assigning a type to the variable 'func' (line 1891)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1891, 8), 'func', func_181407)
        
        # Assigning a Call to a Tuple (line 1892):
        
        # Assigning a Subscript to a Name (line 1892):
        
        # Obtaining the type of the subscript
        int_181408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1892, 8), 'int')
        
        # Call to get_bracket_info(...): (line 1892)
        # Processing the call keyword arguments (line 1892)
        kwargs_181411 = {}
        # Getting the type of 'self' (line 1892)
        self_181409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 43), 'self', False)
        # Obtaining the member 'get_bracket_info' of a type (line 1892)
        get_bracket_info_181410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1892, 43), self_181409, 'get_bracket_info')
        # Calling get_bracket_info(args, kwargs) (line 1892)
        get_bracket_info_call_result_181412 = invoke(stypy.reporting.localization.Localization(__file__, 1892, 43), get_bracket_info_181410, *[], **kwargs_181411)
        
        # Obtaining the member '__getitem__' of a type (line 1892)
        getitem___181413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1892, 8), get_bracket_info_call_result_181412, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1892)
        subscript_call_result_181414 = invoke(stypy.reporting.localization.Localization(__file__, 1892, 8), getitem___181413, int_181408)
        
        # Assigning a type to the variable 'tuple_var_assignment_176702' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'tuple_var_assignment_176702', subscript_call_result_181414)
        
        # Assigning a Subscript to a Name (line 1892):
        
        # Obtaining the type of the subscript
        int_181415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1892, 8), 'int')
        
        # Call to get_bracket_info(...): (line 1892)
        # Processing the call keyword arguments (line 1892)
        kwargs_181418 = {}
        # Getting the type of 'self' (line 1892)
        self_181416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 43), 'self', False)
        # Obtaining the member 'get_bracket_info' of a type (line 1892)
        get_bracket_info_181417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1892, 43), self_181416, 'get_bracket_info')
        # Calling get_bracket_info(args, kwargs) (line 1892)
        get_bracket_info_call_result_181419 = invoke(stypy.reporting.localization.Localization(__file__, 1892, 43), get_bracket_info_181417, *[], **kwargs_181418)
        
        # Obtaining the member '__getitem__' of a type (line 1892)
        getitem___181420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1892, 8), get_bracket_info_call_result_181419, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1892)
        subscript_call_result_181421 = invoke(stypy.reporting.localization.Localization(__file__, 1892, 8), getitem___181420, int_181415)
        
        # Assigning a type to the variable 'tuple_var_assignment_176703' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'tuple_var_assignment_176703', subscript_call_result_181421)
        
        # Assigning a Subscript to a Name (line 1892):
        
        # Obtaining the type of the subscript
        int_181422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1892, 8), 'int')
        
        # Call to get_bracket_info(...): (line 1892)
        # Processing the call keyword arguments (line 1892)
        kwargs_181425 = {}
        # Getting the type of 'self' (line 1892)
        self_181423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 43), 'self', False)
        # Obtaining the member 'get_bracket_info' of a type (line 1892)
        get_bracket_info_181424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1892, 43), self_181423, 'get_bracket_info')
        # Calling get_bracket_info(args, kwargs) (line 1892)
        get_bracket_info_call_result_181426 = invoke(stypy.reporting.localization.Localization(__file__, 1892, 43), get_bracket_info_181424, *[], **kwargs_181425)
        
        # Obtaining the member '__getitem__' of a type (line 1892)
        getitem___181427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1892, 8), get_bracket_info_call_result_181426, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1892)
        subscript_call_result_181428 = invoke(stypy.reporting.localization.Localization(__file__, 1892, 8), getitem___181427, int_181422)
        
        # Assigning a type to the variable 'tuple_var_assignment_176704' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'tuple_var_assignment_176704', subscript_call_result_181428)
        
        # Assigning a Subscript to a Name (line 1892):
        
        # Obtaining the type of the subscript
        int_181429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1892, 8), 'int')
        
        # Call to get_bracket_info(...): (line 1892)
        # Processing the call keyword arguments (line 1892)
        kwargs_181432 = {}
        # Getting the type of 'self' (line 1892)
        self_181430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 43), 'self', False)
        # Obtaining the member 'get_bracket_info' of a type (line 1892)
        get_bracket_info_181431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1892, 43), self_181430, 'get_bracket_info')
        # Calling get_bracket_info(args, kwargs) (line 1892)
        get_bracket_info_call_result_181433 = invoke(stypy.reporting.localization.Localization(__file__, 1892, 43), get_bracket_info_181431, *[], **kwargs_181432)
        
        # Obtaining the member '__getitem__' of a type (line 1892)
        getitem___181434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1892, 8), get_bracket_info_call_result_181433, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1892)
        subscript_call_result_181435 = invoke(stypy.reporting.localization.Localization(__file__, 1892, 8), getitem___181434, int_181429)
        
        # Assigning a type to the variable 'tuple_var_assignment_176705' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'tuple_var_assignment_176705', subscript_call_result_181435)
        
        # Assigning a Subscript to a Name (line 1892):
        
        # Obtaining the type of the subscript
        int_181436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1892, 8), 'int')
        
        # Call to get_bracket_info(...): (line 1892)
        # Processing the call keyword arguments (line 1892)
        kwargs_181439 = {}
        # Getting the type of 'self' (line 1892)
        self_181437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 43), 'self', False)
        # Obtaining the member 'get_bracket_info' of a type (line 1892)
        get_bracket_info_181438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1892, 43), self_181437, 'get_bracket_info')
        # Calling get_bracket_info(args, kwargs) (line 1892)
        get_bracket_info_call_result_181440 = invoke(stypy.reporting.localization.Localization(__file__, 1892, 43), get_bracket_info_181438, *[], **kwargs_181439)
        
        # Obtaining the member '__getitem__' of a type (line 1892)
        getitem___181441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1892, 8), get_bracket_info_call_result_181440, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1892)
        subscript_call_result_181442 = invoke(stypy.reporting.localization.Localization(__file__, 1892, 8), getitem___181441, int_181436)
        
        # Assigning a type to the variable 'tuple_var_assignment_176706' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'tuple_var_assignment_176706', subscript_call_result_181442)
        
        # Assigning a Subscript to a Name (line 1892):
        
        # Obtaining the type of the subscript
        int_181443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1892, 8), 'int')
        
        # Call to get_bracket_info(...): (line 1892)
        # Processing the call keyword arguments (line 1892)
        kwargs_181446 = {}
        # Getting the type of 'self' (line 1892)
        self_181444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 43), 'self', False)
        # Obtaining the member 'get_bracket_info' of a type (line 1892)
        get_bracket_info_181445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1892, 43), self_181444, 'get_bracket_info')
        # Calling get_bracket_info(args, kwargs) (line 1892)
        get_bracket_info_call_result_181447 = invoke(stypy.reporting.localization.Localization(__file__, 1892, 43), get_bracket_info_181445, *[], **kwargs_181446)
        
        # Obtaining the member '__getitem__' of a type (line 1892)
        getitem___181448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1892, 8), get_bracket_info_call_result_181447, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1892)
        subscript_call_result_181449 = invoke(stypy.reporting.localization.Localization(__file__, 1892, 8), getitem___181448, int_181443)
        
        # Assigning a type to the variable 'tuple_var_assignment_176707' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'tuple_var_assignment_176707', subscript_call_result_181449)
        
        # Assigning a Subscript to a Name (line 1892):
        
        # Obtaining the type of the subscript
        int_181450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1892, 8), 'int')
        
        # Call to get_bracket_info(...): (line 1892)
        # Processing the call keyword arguments (line 1892)
        kwargs_181453 = {}
        # Getting the type of 'self' (line 1892)
        self_181451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 43), 'self', False)
        # Obtaining the member 'get_bracket_info' of a type (line 1892)
        get_bracket_info_181452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1892, 43), self_181451, 'get_bracket_info')
        # Calling get_bracket_info(args, kwargs) (line 1892)
        get_bracket_info_call_result_181454 = invoke(stypy.reporting.localization.Localization(__file__, 1892, 43), get_bracket_info_181452, *[], **kwargs_181453)
        
        # Obtaining the member '__getitem__' of a type (line 1892)
        getitem___181455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1892, 8), get_bracket_info_call_result_181454, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1892)
        subscript_call_result_181456 = invoke(stypy.reporting.localization.Localization(__file__, 1892, 8), getitem___181455, int_181450)
        
        # Assigning a type to the variable 'tuple_var_assignment_176708' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'tuple_var_assignment_176708', subscript_call_result_181456)
        
        # Assigning a Name to a Name (line 1892):
        # Getting the type of 'tuple_var_assignment_176702' (line 1892)
        tuple_var_assignment_176702_181457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'tuple_var_assignment_176702')
        # Assigning a type to the variable 'xa' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'xa', tuple_var_assignment_176702_181457)
        
        # Assigning a Name to a Name (line 1892):
        # Getting the type of 'tuple_var_assignment_176703' (line 1892)
        tuple_var_assignment_176703_181458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'tuple_var_assignment_176703')
        # Assigning a type to the variable 'xb' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 12), 'xb', tuple_var_assignment_176703_181458)
        
        # Assigning a Name to a Name (line 1892):
        # Getting the type of 'tuple_var_assignment_176704' (line 1892)
        tuple_var_assignment_176704_181459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'tuple_var_assignment_176704')
        # Assigning a type to the variable 'xc' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 16), 'xc', tuple_var_assignment_176704_181459)
        
        # Assigning a Name to a Name (line 1892):
        # Getting the type of 'tuple_var_assignment_176705' (line 1892)
        tuple_var_assignment_176705_181460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'tuple_var_assignment_176705')
        # Assigning a type to the variable 'fa' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 20), 'fa', tuple_var_assignment_176705_181460)
        
        # Assigning a Name to a Name (line 1892):
        # Getting the type of 'tuple_var_assignment_176706' (line 1892)
        tuple_var_assignment_176706_181461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'tuple_var_assignment_176706')
        # Assigning a type to the variable 'fb' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 24), 'fb', tuple_var_assignment_176706_181461)
        
        # Assigning a Name to a Name (line 1892):
        # Getting the type of 'tuple_var_assignment_176707' (line 1892)
        tuple_var_assignment_176707_181462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'tuple_var_assignment_176707')
        # Assigning a type to the variable 'fc' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 28), 'fc', tuple_var_assignment_176707_181462)
        
        # Assigning a Name to a Name (line 1892):
        # Getting the type of 'tuple_var_assignment_176708' (line 1892)
        tuple_var_assignment_176708_181463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'tuple_var_assignment_176708')
        # Assigning a type to the variable 'funcalls' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 32), 'funcalls', tuple_var_assignment_176708_181463)
        
        # Assigning a Attribute to a Name (line 1893):
        
        # Assigning a Attribute to a Name (line 1893):
        # Getting the type of 'self' (line 1893)
        self_181464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1893, 18), 'self')
        # Obtaining the member '_mintol' of a type (line 1893)
        _mintol_181465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1893, 18), self_181464, '_mintol')
        # Assigning a type to the variable '_mintol' (line 1893)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1893, 8), '_mintol', _mintol_181465)
        
        # Assigning a Attribute to a Name (line 1894):
        
        # Assigning a Attribute to a Name (line 1894):
        # Getting the type of 'self' (line 1894)
        self_181466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 14), 'self')
        # Obtaining the member '_cg' of a type (line 1894)
        _cg_181467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1894, 14), self_181466, '_cg')
        # Assigning a type to the variable '_cg' (line 1894)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1894, 8), '_cg', _cg_181467)
        
        # Multiple assignment of 3 elements.
        
        # Assigning a Name to a Name (line 1898):
        # Getting the type of 'xb' (line 1898)
        xb_181468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 20), 'xb')
        # Assigning a type to the variable 'v' (line 1898)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1898, 16), 'v', xb_181468)
        
        # Assigning a Name to a Name (line 1898):
        # Getting the type of 'v' (line 1898)
        v_181469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 16), 'v')
        # Assigning a type to the variable 'w' (line 1898)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1898, 12), 'w', v_181469)
        
        # Assigning a Name to a Name (line 1898):
        # Getting the type of 'w' (line 1898)
        w_181470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 12), 'w')
        # Assigning a type to the variable 'x' (line 1898)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1898, 8), 'x', w_181470)
        
        # Multiple assignment of 3 elements.
        
        # Assigning a Call to a Name (line 1899):
        
        # Call to func(...): (line 1899)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1899)
        tuple_181472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1899, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1899)
        # Adding element type (line 1899)
        # Getting the type of 'x' (line 1899)
        x_181473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 31), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1899, 31), tuple_181472, x_181473)
        
        # Getting the type of 'self' (line 1899)
        self_181474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 37), 'self', False)
        # Obtaining the member 'args' of a type (line 1899)
        args_181475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1899, 37), self_181474, 'args')
        # Applying the binary operator '+' (line 1899)
        result_add_181476 = python_operator(stypy.reporting.localization.Localization(__file__, 1899, 30), '+', tuple_181472, args_181475)
        
        # Processing the call keyword arguments (line 1899)
        kwargs_181477 = {}
        # Getting the type of 'func' (line 1899)
        func_181471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 23), 'func', False)
        # Calling func(args, kwargs) (line 1899)
        func_call_result_181478 = invoke(stypy.reporting.localization.Localization(__file__, 1899, 23), func_181471, *[result_add_181476], **kwargs_181477)
        
        # Assigning a type to the variable 'fx' (line 1899)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1899, 18), 'fx', func_call_result_181478)
        
        # Assigning a Name to a Name (line 1899):
        # Getting the type of 'fx' (line 1899)
        fx_181479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 18), 'fx')
        # Assigning a type to the variable 'fv' (line 1899)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1899, 13), 'fv', fx_181479)
        
        # Assigning a Name to a Name (line 1899):
        # Getting the type of 'fv' (line 1899)
        fv_181480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 13), 'fv')
        # Assigning a type to the variable 'fw' (line 1899)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1899, 8), 'fw', fv_181480)
        
        
        # Getting the type of 'xa' (line 1900)
        xa_181481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1900, 12), 'xa')
        # Getting the type of 'xc' (line 1900)
        xc_181482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1900, 17), 'xc')
        # Applying the binary operator '<' (line 1900)
        result_lt_181483 = python_operator(stypy.reporting.localization.Localization(__file__, 1900, 12), '<', xa_181481, xc_181482)
        
        # Testing the type of an if condition (line 1900)
        if_condition_181484 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1900, 8), result_lt_181483)
        # Assigning a type to the variable 'if_condition_181484' (line 1900)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1900, 8), 'if_condition_181484', if_condition_181484)
        # SSA begins for if statement (line 1900)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1901):
        
        # Assigning a Name to a Name (line 1901):
        # Getting the type of 'xa' (line 1901)
        xa_181485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1901, 16), 'xa')
        # Assigning a type to the variable 'a' (line 1901)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1901, 12), 'a', xa_181485)
        
        # Assigning a Name to a Name (line 1902):
        
        # Assigning a Name to a Name (line 1902):
        # Getting the type of 'xc' (line 1902)
        xc_181486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1902, 16), 'xc')
        # Assigning a type to the variable 'b' (line 1902)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1902, 12), 'b', xc_181486)
        # SSA branch for the else part of an if statement (line 1900)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 1904):
        
        # Assigning a Name to a Name (line 1904):
        # Getting the type of 'xc' (line 1904)
        xc_181487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 16), 'xc')
        # Assigning a type to the variable 'a' (line 1904)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1904, 12), 'a', xc_181487)
        
        # Assigning a Name to a Name (line 1905):
        
        # Assigning a Name to a Name (line 1905):
        # Getting the type of 'xa' (line 1905)
        xa_181488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1905, 16), 'xa')
        # Assigning a type to the variable 'b' (line 1905)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1905, 12), 'b', xa_181488)
        # SSA join for if statement (line 1900)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Num to a Name (line 1906):
        
        # Assigning a Num to a Name (line 1906):
        float_181489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1906, 17), 'float')
        # Assigning a type to the variable 'deltax' (line 1906)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1906, 8), 'deltax', float_181489)
        
        # Assigning a Num to a Name (line 1907):
        
        # Assigning a Num to a Name (line 1907):
        int_181490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1907, 19), 'int')
        # Assigning a type to the variable 'funcalls' (line 1907)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1907, 8), 'funcalls', int_181490)
        
        # Assigning a Num to a Name (line 1908):
        
        # Assigning a Num to a Name (line 1908):
        int_181491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1908, 15), 'int')
        # Assigning a type to the variable 'iter' (line 1908)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1908, 8), 'iter', int_181491)
        
        
        # Getting the type of 'iter' (line 1909)
        iter_181492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 15), 'iter')
        # Getting the type of 'self' (line 1909)
        self_181493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 22), 'self')
        # Obtaining the member 'maxiter' of a type (line 1909)
        maxiter_181494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1909, 22), self_181493, 'maxiter')
        # Applying the binary operator '<' (line 1909)
        result_lt_181495 = python_operator(stypy.reporting.localization.Localization(__file__, 1909, 15), '<', iter_181492, maxiter_181494)
        
        # Testing the type of an if condition (line 1909)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1909, 8), result_lt_181495)
        # SSA begins for while statement (line 1909)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Assigning a BinOp to a Name (line 1910):
        
        # Assigning a BinOp to a Name (line 1910):
        # Getting the type of 'self' (line 1910)
        self_181496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1910, 19), 'self')
        # Obtaining the member 'tol' of a type (line 1910)
        tol_181497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1910, 19), self_181496, 'tol')
        
        # Call to abs(...): (line 1910)
        # Processing the call arguments (line 1910)
        # Getting the type of 'x' (line 1910)
        x_181500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1910, 40), 'x', False)
        # Processing the call keyword arguments (line 1910)
        kwargs_181501 = {}
        # Getting the type of 'numpy' (line 1910)
        numpy_181498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1910, 30), 'numpy', False)
        # Obtaining the member 'abs' of a type (line 1910)
        abs_181499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1910, 30), numpy_181498, 'abs')
        # Calling abs(args, kwargs) (line 1910)
        abs_call_result_181502 = invoke(stypy.reporting.localization.Localization(__file__, 1910, 30), abs_181499, *[x_181500], **kwargs_181501)
        
        # Applying the binary operator '*' (line 1910)
        result_mul_181503 = python_operator(stypy.reporting.localization.Localization(__file__, 1910, 19), '*', tol_181497, abs_call_result_181502)
        
        # Getting the type of '_mintol' (line 1910)
        _mintol_181504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1910, 45), '_mintol')
        # Applying the binary operator '+' (line 1910)
        result_add_181505 = python_operator(stypy.reporting.localization.Localization(__file__, 1910, 19), '+', result_mul_181503, _mintol_181504)
        
        # Assigning a type to the variable 'tol1' (line 1910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1910, 12), 'tol1', result_add_181505)
        
        # Assigning a BinOp to a Name (line 1911):
        
        # Assigning a BinOp to a Name (line 1911):
        float_181506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1911, 19), 'float')
        # Getting the type of 'tol1' (line 1911)
        tol1_181507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1911, 25), 'tol1')
        # Applying the binary operator '*' (line 1911)
        result_mul_181508 = python_operator(stypy.reporting.localization.Localization(__file__, 1911, 19), '*', float_181506, tol1_181507)
        
        # Assigning a type to the variable 'tol2' (line 1911)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1911, 12), 'tol2', result_mul_181508)
        
        # Assigning a BinOp to a Name (line 1912):
        
        # Assigning a BinOp to a Name (line 1912):
        float_181509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1912, 19), 'float')
        # Getting the type of 'a' (line 1912)
        a_181510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 26), 'a')
        # Getting the type of 'b' (line 1912)
        b_181511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 30), 'b')
        # Applying the binary operator '+' (line 1912)
        result_add_181512 = python_operator(stypy.reporting.localization.Localization(__file__, 1912, 26), '+', a_181510, b_181511)
        
        # Applying the binary operator '*' (line 1912)
        result_mul_181513 = python_operator(stypy.reporting.localization.Localization(__file__, 1912, 19), '*', float_181509, result_add_181512)
        
        # Assigning a type to the variable 'xmid' (line 1912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1912, 12), 'xmid', result_mul_181513)
        
        
        
        # Call to abs(...): (line 1914)
        # Processing the call arguments (line 1914)
        # Getting the type of 'x' (line 1914)
        x_181516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 25), 'x', False)
        # Getting the type of 'xmid' (line 1914)
        xmid_181517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 29), 'xmid', False)
        # Applying the binary operator '-' (line 1914)
        result_sub_181518 = python_operator(stypy.reporting.localization.Localization(__file__, 1914, 25), '-', x_181516, xmid_181517)
        
        # Processing the call keyword arguments (line 1914)
        kwargs_181519 = {}
        # Getting the type of 'numpy' (line 1914)
        numpy_181514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 15), 'numpy', False)
        # Obtaining the member 'abs' of a type (line 1914)
        abs_181515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1914, 15), numpy_181514, 'abs')
        # Calling abs(args, kwargs) (line 1914)
        abs_call_result_181520 = invoke(stypy.reporting.localization.Localization(__file__, 1914, 15), abs_181515, *[result_sub_181518], **kwargs_181519)
        
        # Getting the type of 'tol2' (line 1914)
        tol2_181521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 38), 'tol2')
        float_181522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1914, 45), 'float')
        # Getting the type of 'b' (line 1914)
        b_181523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 52), 'b')
        # Getting the type of 'a' (line 1914)
        a_181524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 56), 'a')
        # Applying the binary operator '-' (line 1914)
        result_sub_181525 = python_operator(stypy.reporting.localization.Localization(__file__, 1914, 52), '-', b_181523, a_181524)
        
        # Applying the binary operator '*' (line 1914)
        result_mul_181526 = python_operator(stypy.reporting.localization.Localization(__file__, 1914, 45), '*', float_181522, result_sub_181525)
        
        # Applying the binary operator '-' (line 1914)
        result_sub_181527 = python_operator(stypy.reporting.localization.Localization(__file__, 1914, 38), '-', tol2_181521, result_mul_181526)
        
        # Applying the binary operator '<' (line 1914)
        result_lt_181528 = python_operator(stypy.reporting.localization.Localization(__file__, 1914, 15), '<', abs_call_result_181520, result_sub_181527)
        
        # Testing the type of an if condition (line 1914)
        if_condition_181529 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1914, 12), result_lt_181528)
        # Assigning a type to the variable 'if_condition_181529' (line 1914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1914, 12), 'if_condition_181529', if_condition_181529)
        # SSA begins for if statement (line 1914)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 1914)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to abs(...): (line 1919)
        # Processing the call arguments (line 1919)
        # Getting the type of 'deltax' (line 1919)
        deltax_181532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 26), 'deltax', False)
        # Processing the call keyword arguments (line 1919)
        kwargs_181533 = {}
        # Getting the type of 'numpy' (line 1919)
        numpy_181530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 16), 'numpy', False)
        # Obtaining the member 'abs' of a type (line 1919)
        abs_181531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1919, 16), numpy_181530, 'abs')
        # Calling abs(args, kwargs) (line 1919)
        abs_call_result_181534 = invoke(stypy.reporting.localization.Localization(__file__, 1919, 16), abs_181531, *[deltax_181532], **kwargs_181533)
        
        # Getting the type of 'tol1' (line 1919)
        tol1_181535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 37), 'tol1')
        # Applying the binary operator '<=' (line 1919)
        result_le_181536 = python_operator(stypy.reporting.localization.Localization(__file__, 1919, 16), '<=', abs_call_result_181534, tol1_181535)
        
        # Testing the type of an if condition (line 1919)
        if_condition_181537 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1919, 12), result_le_181536)
        # Assigning a type to the variable 'if_condition_181537' (line 1919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1919, 12), 'if_condition_181537', if_condition_181537)
        # SSA begins for if statement (line 1919)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'x' (line 1920)
        x_181538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 20), 'x')
        # Getting the type of 'xmid' (line 1920)
        xmid_181539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 25), 'xmid')
        # Applying the binary operator '>=' (line 1920)
        result_ge_181540 = python_operator(stypy.reporting.localization.Localization(__file__, 1920, 20), '>=', x_181538, xmid_181539)
        
        # Testing the type of an if condition (line 1920)
        if_condition_181541 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1920, 16), result_ge_181540)
        # Assigning a type to the variable 'if_condition_181541' (line 1920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1920, 16), 'if_condition_181541', if_condition_181541)
        # SSA begins for if statement (line 1920)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1921):
        
        # Assigning a BinOp to a Name (line 1921):
        # Getting the type of 'a' (line 1921)
        a_181542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 29), 'a')
        # Getting the type of 'x' (line 1921)
        x_181543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 33), 'x')
        # Applying the binary operator '-' (line 1921)
        result_sub_181544 = python_operator(stypy.reporting.localization.Localization(__file__, 1921, 29), '-', a_181542, x_181543)
        
        # Assigning a type to the variable 'deltax' (line 1921)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1921, 20), 'deltax', result_sub_181544)
        # SSA branch for the else part of an if statement (line 1920)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 1923):
        
        # Assigning a BinOp to a Name (line 1923):
        # Getting the type of 'b' (line 1923)
        b_181545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 29), 'b')
        # Getting the type of 'x' (line 1923)
        x_181546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 33), 'x')
        # Applying the binary operator '-' (line 1923)
        result_sub_181547 = python_operator(stypy.reporting.localization.Localization(__file__, 1923, 29), '-', b_181545, x_181546)
        
        # Assigning a type to the variable 'deltax' (line 1923)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1923, 20), 'deltax', result_sub_181547)
        # SSA join for if statement (line 1920)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 1924):
        
        # Assigning a BinOp to a Name (line 1924):
        # Getting the type of '_cg' (line 1924)
        _cg_181548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 22), '_cg')
        # Getting the type of 'deltax' (line 1924)
        deltax_181549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 28), 'deltax')
        # Applying the binary operator '*' (line 1924)
        result_mul_181550 = python_operator(stypy.reporting.localization.Localization(__file__, 1924, 22), '*', _cg_181548, deltax_181549)
        
        # Assigning a type to the variable 'rat' (line 1924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1924, 16), 'rat', result_mul_181550)
        # SSA branch for the else part of an if statement (line 1919)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 1926):
        
        # Assigning a BinOp to a Name (line 1926):
        # Getting the type of 'x' (line 1926)
        x_181551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 24), 'x')
        # Getting the type of 'w' (line 1926)
        w_181552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 28), 'w')
        # Applying the binary operator '-' (line 1926)
        result_sub_181553 = python_operator(stypy.reporting.localization.Localization(__file__, 1926, 24), '-', x_181551, w_181552)
        
        # Getting the type of 'fx' (line 1926)
        fx_181554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 34), 'fx')
        # Getting the type of 'fv' (line 1926)
        fv_181555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 39), 'fv')
        # Applying the binary operator '-' (line 1926)
        result_sub_181556 = python_operator(stypy.reporting.localization.Localization(__file__, 1926, 34), '-', fx_181554, fv_181555)
        
        # Applying the binary operator '*' (line 1926)
        result_mul_181557 = python_operator(stypy.reporting.localization.Localization(__file__, 1926, 23), '*', result_sub_181553, result_sub_181556)
        
        # Assigning a type to the variable 'tmp1' (line 1926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1926, 16), 'tmp1', result_mul_181557)
        
        # Assigning a BinOp to a Name (line 1927):
        
        # Assigning a BinOp to a Name (line 1927):
        # Getting the type of 'x' (line 1927)
        x_181558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 24), 'x')
        # Getting the type of 'v' (line 1927)
        v_181559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 28), 'v')
        # Applying the binary operator '-' (line 1927)
        result_sub_181560 = python_operator(stypy.reporting.localization.Localization(__file__, 1927, 24), '-', x_181558, v_181559)
        
        # Getting the type of 'fx' (line 1927)
        fx_181561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 34), 'fx')
        # Getting the type of 'fw' (line 1927)
        fw_181562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 39), 'fw')
        # Applying the binary operator '-' (line 1927)
        result_sub_181563 = python_operator(stypy.reporting.localization.Localization(__file__, 1927, 34), '-', fx_181561, fw_181562)
        
        # Applying the binary operator '*' (line 1927)
        result_mul_181564 = python_operator(stypy.reporting.localization.Localization(__file__, 1927, 23), '*', result_sub_181560, result_sub_181563)
        
        # Assigning a type to the variable 'tmp2' (line 1927)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1927, 16), 'tmp2', result_mul_181564)
        
        # Assigning a BinOp to a Name (line 1928):
        
        # Assigning a BinOp to a Name (line 1928):
        # Getting the type of 'x' (line 1928)
        x_181565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 21), 'x')
        # Getting the type of 'v' (line 1928)
        v_181566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 25), 'v')
        # Applying the binary operator '-' (line 1928)
        result_sub_181567 = python_operator(stypy.reporting.localization.Localization(__file__, 1928, 21), '-', x_181565, v_181566)
        
        # Getting the type of 'tmp2' (line 1928)
        tmp2_181568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 30), 'tmp2')
        # Applying the binary operator '*' (line 1928)
        result_mul_181569 = python_operator(stypy.reporting.localization.Localization(__file__, 1928, 20), '*', result_sub_181567, tmp2_181568)
        
        # Getting the type of 'x' (line 1928)
        x_181570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 38), 'x')
        # Getting the type of 'w' (line 1928)
        w_181571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 42), 'w')
        # Applying the binary operator '-' (line 1928)
        result_sub_181572 = python_operator(stypy.reporting.localization.Localization(__file__, 1928, 38), '-', x_181570, w_181571)
        
        # Getting the type of 'tmp1' (line 1928)
        tmp1_181573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 47), 'tmp1')
        # Applying the binary operator '*' (line 1928)
        result_mul_181574 = python_operator(stypy.reporting.localization.Localization(__file__, 1928, 37), '*', result_sub_181572, tmp1_181573)
        
        # Applying the binary operator '-' (line 1928)
        result_sub_181575 = python_operator(stypy.reporting.localization.Localization(__file__, 1928, 20), '-', result_mul_181569, result_mul_181574)
        
        # Assigning a type to the variable 'p' (line 1928)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1928, 16), 'p', result_sub_181575)
        
        # Assigning a BinOp to a Name (line 1929):
        
        # Assigning a BinOp to a Name (line 1929):
        float_181576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1929, 23), 'float')
        # Getting the type of 'tmp2' (line 1929)
        tmp2_181577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1929, 30), 'tmp2')
        # Getting the type of 'tmp1' (line 1929)
        tmp1_181578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1929, 37), 'tmp1')
        # Applying the binary operator '-' (line 1929)
        result_sub_181579 = python_operator(stypy.reporting.localization.Localization(__file__, 1929, 30), '-', tmp2_181577, tmp1_181578)
        
        # Applying the binary operator '*' (line 1929)
        result_mul_181580 = python_operator(stypy.reporting.localization.Localization(__file__, 1929, 23), '*', float_181576, result_sub_181579)
        
        # Assigning a type to the variable 'tmp2' (line 1929)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1929, 16), 'tmp2', result_mul_181580)
        
        
        # Getting the type of 'tmp2' (line 1930)
        tmp2_181581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 20), 'tmp2')
        float_181582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1930, 27), 'float')
        # Applying the binary operator '>' (line 1930)
        result_gt_181583 = python_operator(stypy.reporting.localization.Localization(__file__, 1930, 20), '>', tmp2_181581, float_181582)
        
        # Testing the type of an if condition (line 1930)
        if_condition_181584 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1930, 16), result_gt_181583)
        # Assigning a type to the variable 'if_condition_181584' (line 1930)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1930, 16), 'if_condition_181584', if_condition_181584)
        # SSA begins for if statement (line 1930)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a UnaryOp to a Name (line 1931):
        
        # Assigning a UnaryOp to a Name (line 1931):
        
        # Getting the type of 'p' (line 1931)
        p_181585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 25), 'p')
        # Applying the 'usub' unary operator (line 1931)
        result___neg___181586 = python_operator(stypy.reporting.localization.Localization(__file__, 1931, 24), 'usub', p_181585)
        
        # Assigning a type to the variable 'p' (line 1931)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1931, 20), 'p', result___neg___181586)
        # SSA join for if statement (line 1930)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1932):
        
        # Assigning a Call to a Name (line 1932):
        
        # Call to abs(...): (line 1932)
        # Processing the call arguments (line 1932)
        # Getting the type of 'tmp2' (line 1932)
        tmp2_181589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1932, 33), 'tmp2', False)
        # Processing the call keyword arguments (line 1932)
        kwargs_181590 = {}
        # Getting the type of 'numpy' (line 1932)
        numpy_181587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1932, 23), 'numpy', False)
        # Obtaining the member 'abs' of a type (line 1932)
        abs_181588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1932, 23), numpy_181587, 'abs')
        # Calling abs(args, kwargs) (line 1932)
        abs_call_result_181591 = invoke(stypy.reporting.localization.Localization(__file__, 1932, 23), abs_181588, *[tmp2_181589], **kwargs_181590)
        
        # Assigning a type to the variable 'tmp2' (line 1932)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1932, 16), 'tmp2', abs_call_result_181591)
        
        # Assigning a Name to a Name (line 1933):
        
        # Assigning a Name to a Name (line 1933):
        # Getting the type of 'deltax' (line 1933)
        deltax_181592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 26), 'deltax')
        # Assigning a type to the variable 'dx_temp' (line 1933)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1933, 16), 'dx_temp', deltax_181592)
        
        # Assigning a Name to a Name (line 1934):
        
        # Assigning a Name to a Name (line 1934):
        # Getting the type of 'rat' (line 1934)
        rat_181593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 25), 'rat')
        # Assigning a type to the variable 'deltax' (line 1934)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1934, 16), 'deltax', rat_181593)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'p' (line 1936)
        p_181594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 21), 'p')
        # Getting the type of 'tmp2' (line 1936)
        tmp2_181595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 25), 'tmp2')
        # Getting the type of 'a' (line 1936)
        a_181596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 33), 'a')
        # Getting the type of 'x' (line 1936)
        x_181597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 37), 'x')
        # Applying the binary operator '-' (line 1936)
        result_sub_181598 = python_operator(stypy.reporting.localization.Localization(__file__, 1936, 33), '-', a_181596, x_181597)
        
        # Applying the binary operator '*' (line 1936)
        result_mul_181599 = python_operator(stypy.reporting.localization.Localization(__file__, 1936, 25), '*', tmp2_181595, result_sub_181598)
        
        # Applying the binary operator '>' (line 1936)
        result_gt_181600 = python_operator(stypy.reporting.localization.Localization(__file__, 1936, 21), '>', p_181594, result_mul_181599)
        
        
        # Getting the type of 'p' (line 1936)
        p_181601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 46), 'p')
        # Getting the type of 'tmp2' (line 1936)
        tmp2_181602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 50), 'tmp2')
        # Getting the type of 'b' (line 1936)
        b_181603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 58), 'b')
        # Getting the type of 'x' (line 1936)
        x_181604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 62), 'x')
        # Applying the binary operator '-' (line 1936)
        result_sub_181605 = python_operator(stypy.reporting.localization.Localization(__file__, 1936, 58), '-', b_181603, x_181604)
        
        # Applying the binary operator '*' (line 1936)
        result_mul_181606 = python_operator(stypy.reporting.localization.Localization(__file__, 1936, 50), '*', tmp2_181602, result_sub_181605)
        
        # Applying the binary operator '<' (line 1936)
        result_lt_181607 = python_operator(stypy.reporting.localization.Localization(__file__, 1936, 46), '<', p_181601, result_mul_181606)
        
        # Applying the binary operator 'and' (line 1936)
        result_and_keyword_181608 = python_operator(stypy.reporting.localization.Localization(__file__, 1936, 20), 'and', result_gt_181600, result_lt_181607)
        
        
        # Call to abs(...): (line 1937)
        # Processing the call arguments (line 1937)
        # Getting the type of 'p' (line 1937)
        p_181611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 35), 'p', False)
        # Processing the call keyword arguments (line 1937)
        kwargs_181612 = {}
        # Getting the type of 'numpy' (line 1937)
        numpy_181609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 25), 'numpy', False)
        # Obtaining the member 'abs' of a type (line 1937)
        abs_181610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1937, 25), numpy_181609, 'abs')
        # Calling abs(args, kwargs) (line 1937)
        abs_call_result_181613 = invoke(stypy.reporting.localization.Localization(__file__, 1937, 25), abs_181610, *[p_181611], **kwargs_181612)
        
        
        # Call to abs(...): (line 1937)
        # Processing the call arguments (line 1937)
        float_181616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1937, 50), 'float')
        # Getting the type of 'tmp2' (line 1937)
        tmp2_181617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 56), 'tmp2', False)
        # Applying the binary operator '*' (line 1937)
        result_mul_181618 = python_operator(stypy.reporting.localization.Localization(__file__, 1937, 50), '*', float_181616, tmp2_181617)
        
        # Getting the type of 'dx_temp' (line 1937)
        dx_temp_181619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 63), 'dx_temp', False)
        # Applying the binary operator '*' (line 1937)
        result_mul_181620 = python_operator(stypy.reporting.localization.Localization(__file__, 1937, 61), '*', result_mul_181618, dx_temp_181619)
        
        # Processing the call keyword arguments (line 1937)
        kwargs_181621 = {}
        # Getting the type of 'numpy' (line 1937)
        numpy_181614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 40), 'numpy', False)
        # Obtaining the member 'abs' of a type (line 1937)
        abs_181615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1937, 40), numpy_181614, 'abs')
        # Calling abs(args, kwargs) (line 1937)
        abs_call_result_181622 = invoke(stypy.reporting.localization.Localization(__file__, 1937, 40), abs_181615, *[result_mul_181620], **kwargs_181621)
        
        # Applying the binary operator '<' (line 1937)
        result_lt_181623 = python_operator(stypy.reporting.localization.Localization(__file__, 1937, 25), '<', abs_call_result_181613, abs_call_result_181622)
        
        # Applying the binary operator 'and' (line 1936)
        result_and_keyword_181624 = python_operator(stypy.reporting.localization.Localization(__file__, 1936, 20), 'and', result_and_keyword_181608, result_lt_181623)
        
        # Testing the type of an if condition (line 1936)
        if_condition_181625 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1936, 16), result_and_keyword_181624)
        # Assigning a type to the variable 'if_condition_181625' (line 1936)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1936, 16), 'if_condition_181625', if_condition_181625)
        # SSA begins for if statement (line 1936)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1938):
        
        # Assigning a BinOp to a Name (line 1938):
        # Getting the type of 'p' (line 1938)
        p_181626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1938, 26), 'p')
        float_181627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1938, 30), 'float')
        # Applying the binary operator '*' (line 1938)
        result_mul_181628 = python_operator(stypy.reporting.localization.Localization(__file__, 1938, 26), '*', p_181626, float_181627)
        
        # Getting the type of 'tmp2' (line 1938)
        tmp2_181629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1938, 36), 'tmp2')
        # Applying the binary operator 'div' (line 1938)
        result_div_181630 = python_operator(stypy.reporting.localization.Localization(__file__, 1938, 34), 'div', result_mul_181628, tmp2_181629)
        
        # Assigning a type to the variable 'rat' (line 1938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1938, 20), 'rat', result_div_181630)
        
        # Assigning a BinOp to a Name (line 1939):
        
        # Assigning a BinOp to a Name (line 1939):
        # Getting the type of 'x' (line 1939)
        x_181631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 24), 'x')
        # Getting the type of 'rat' (line 1939)
        rat_181632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 28), 'rat')
        # Applying the binary operator '+' (line 1939)
        result_add_181633 = python_operator(stypy.reporting.localization.Localization(__file__, 1939, 24), '+', x_181631, rat_181632)
        
        # Assigning a type to the variable 'u' (line 1939)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1939, 20), 'u', result_add_181633)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'u' (line 1940)
        u_181634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 25), 'u')
        # Getting the type of 'a' (line 1940)
        a_181635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 29), 'a')
        # Applying the binary operator '-' (line 1940)
        result_sub_181636 = python_operator(stypy.reporting.localization.Localization(__file__, 1940, 25), '-', u_181634, a_181635)
        
        # Getting the type of 'tol2' (line 1940)
        tol2_181637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 34), 'tol2')
        # Applying the binary operator '<' (line 1940)
        result_lt_181638 = python_operator(stypy.reporting.localization.Localization(__file__, 1940, 24), '<', result_sub_181636, tol2_181637)
        
        
        # Getting the type of 'b' (line 1940)
        b_181639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 43), 'b')
        # Getting the type of 'u' (line 1940)
        u_181640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 47), 'u')
        # Applying the binary operator '-' (line 1940)
        result_sub_181641 = python_operator(stypy.reporting.localization.Localization(__file__, 1940, 43), '-', b_181639, u_181640)
        
        # Getting the type of 'tol2' (line 1940)
        tol2_181642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 52), 'tol2')
        # Applying the binary operator '<' (line 1940)
        result_lt_181643 = python_operator(stypy.reporting.localization.Localization(__file__, 1940, 42), '<', result_sub_181641, tol2_181642)
        
        # Applying the binary operator 'or' (line 1940)
        result_or_keyword_181644 = python_operator(stypy.reporting.localization.Localization(__file__, 1940, 24), 'or', result_lt_181638, result_lt_181643)
        
        # Testing the type of an if condition (line 1940)
        if_condition_181645 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1940, 20), result_or_keyword_181644)
        # Assigning a type to the variable 'if_condition_181645' (line 1940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1940, 20), 'if_condition_181645', if_condition_181645)
        # SSA begins for if statement (line 1940)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'xmid' (line 1941)
        xmid_181646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1941, 27), 'xmid')
        # Getting the type of 'x' (line 1941)
        x_181647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1941, 34), 'x')
        # Applying the binary operator '-' (line 1941)
        result_sub_181648 = python_operator(stypy.reporting.localization.Localization(__file__, 1941, 27), '-', xmid_181646, x_181647)
        
        int_181649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1941, 39), 'int')
        # Applying the binary operator '>=' (line 1941)
        result_ge_181650 = python_operator(stypy.reporting.localization.Localization(__file__, 1941, 27), '>=', result_sub_181648, int_181649)
        
        # Testing the type of an if condition (line 1941)
        if_condition_181651 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1941, 24), result_ge_181650)
        # Assigning a type to the variable 'if_condition_181651' (line 1941)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1941, 24), 'if_condition_181651', if_condition_181651)
        # SSA begins for if statement (line 1941)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1942):
        
        # Assigning a Name to a Name (line 1942):
        # Getting the type of 'tol1' (line 1942)
        tol1_181652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 34), 'tol1')
        # Assigning a type to the variable 'rat' (line 1942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1942, 28), 'rat', tol1_181652)
        # SSA branch for the else part of an if statement (line 1941)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a UnaryOp to a Name (line 1944):
        
        # Assigning a UnaryOp to a Name (line 1944):
        
        # Getting the type of 'tol1' (line 1944)
        tol1_181653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1944, 35), 'tol1')
        # Applying the 'usub' unary operator (line 1944)
        result___neg___181654 = python_operator(stypy.reporting.localization.Localization(__file__, 1944, 34), 'usub', tol1_181653)
        
        # Assigning a type to the variable 'rat' (line 1944)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1944, 28), 'rat', result___neg___181654)
        # SSA join for if statement (line 1941)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1940)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1936)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'x' (line 1946)
        x_181655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 24), 'x')
        # Getting the type of 'xmid' (line 1946)
        xmid_181656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 29), 'xmid')
        # Applying the binary operator '>=' (line 1946)
        result_ge_181657 = python_operator(stypy.reporting.localization.Localization(__file__, 1946, 24), '>=', x_181655, xmid_181656)
        
        # Testing the type of an if condition (line 1946)
        if_condition_181658 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1946, 20), result_ge_181657)
        # Assigning a type to the variable 'if_condition_181658' (line 1946)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1946, 20), 'if_condition_181658', if_condition_181658)
        # SSA begins for if statement (line 1946)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1947):
        
        # Assigning a BinOp to a Name (line 1947):
        # Getting the type of 'a' (line 1947)
        a_181659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 33), 'a')
        # Getting the type of 'x' (line 1947)
        x_181660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 37), 'x')
        # Applying the binary operator '-' (line 1947)
        result_sub_181661 = python_operator(stypy.reporting.localization.Localization(__file__, 1947, 33), '-', a_181659, x_181660)
        
        # Assigning a type to the variable 'deltax' (line 1947)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1947, 24), 'deltax', result_sub_181661)
        # SSA branch for the else part of an if statement (line 1946)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 1949):
        
        # Assigning a BinOp to a Name (line 1949):
        # Getting the type of 'b' (line 1949)
        b_181662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 33), 'b')
        # Getting the type of 'x' (line 1949)
        x_181663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 37), 'x')
        # Applying the binary operator '-' (line 1949)
        result_sub_181664 = python_operator(stypy.reporting.localization.Localization(__file__, 1949, 33), '-', b_181662, x_181663)
        
        # Assigning a type to the variable 'deltax' (line 1949)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1949, 24), 'deltax', result_sub_181664)
        # SSA join for if statement (line 1946)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 1950):
        
        # Assigning a BinOp to a Name (line 1950):
        # Getting the type of '_cg' (line 1950)
        _cg_181665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1950, 26), '_cg')
        # Getting the type of 'deltax' (line 1950)
        deltax_181666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1950, 32), 'deltax')
        # Applying the binary operator '*' (line 1950)
        result_mul_181667 = python_operator(stypy.reporting.localization.Localization(__file__, 1950, 26), '*', _cg_181665, deltax_181666)
        
        # Assigning a type to the variable 'rat' (line 1950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1950, 20), 'rat', result_mul_181667)
        # SSA join for if statement (line 1936)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1919)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to abs(...): (line 1952)
        # Processing the call arguments (line 1952)
        # Getting the type of 'rat' (line 1952)
        rat_181670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 26), 'rat', False)
        # Processing the call keyword arguments (line 1952)
        kwargs_181671 = {}
        # Getting the type of 'numpy' (line 1952)
        numpy_181668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 16), 'numpy', False)
        # Obtaining the member 'abs' of a type (line 1952)
        abs_181669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1952, 16), numpy_181668, 'abs')
        # Calling abs(args, kwargs) (line 1952)
        abs_call_result_181672 = invoke(stypy.reporting.localization.Localization(__file__, 1952, 16), abs_181669, *[rat_181670], **kwargs_181671)
        
        # Getting the type of 'tol1' (line 1952)
        tol1_181673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 33), 'tol1')
        # Applying the binary operator '<' (line 1952)
        result_lt_181674 = python_operator(stypy.reporting.localization.Localization(__file__, 1952, 16), '<', abs_call_result_181672, tol1_181673)
        
        # Testing the type of an if condition (line 1952)
        if_condition_181675 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1952, 12), result_lt_181674)
        # Assigning a type to the variable 'if_condition_181675' (line 1952)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1952, 12), 'if_condition_181675', if_condition_181675)
        # SSA begins for if statement (line 1952)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'rat' (line 1953)
        rat_181676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1953, 19), 'rat')
        int_181677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1953, 26), 'int')
        # Applying the binary operator '>=' (line 1953)
        result_ge_181678 = python_operator(stypy.reporting.localization.Localization(__file__, 1953, 19), '>=', rat_181676, int_181677)
        
        # Testing the type of an if condition (line 1953)
        if_condition_181679 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1953, 16), result_ge_181678)
        # Assigning a type to the variable 'if_condition_181679' (line 1953)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1953, 16), 'if_condition_181679', if_condition_181679)
        # SSA begins for if statement (line 1953)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1954):
        
        # Assigning a BinOp to a Name (line 1954):
        # Getting the type of 'x' (line 1954)
        x_181680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1954, 24), 'x')
        # Getting the type of 'tol1' (line 1954)
        tol1_181681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1954, 28), 'tol1')
        # Applying the binary operator '+' (line 1954)
        result_add_181682 = python_operator(stypy.reporting.localization.Localization(__file__, 1954, 24), '+', x_181680, tol1_181681)
        
        # Assigning a type to the variable 'u' (line 1954)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1954, 20), 'u', result_add_181682)
        # SSA branch for the else part of an if statement (line 1953)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 1956):
        
        # Assigning a BinOp to a Name (line 1956):
        # Getting the type of 'x' (line 1956)
        x_181683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 24), 'x')
        # Getting the type of 'tol1' (line 1956)
        tol1_181684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 28), 'tol1')
        # Applying the binary operator '-' (line 1956)
        result_sub_181685 = python_operator(stypy.reporting.localization.Localization(__file__, 1956, 24), '-', x_181683, tol1_181684)
        
        # Assigning a type to the variable 'u' (line 1956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1956, 20), 'u', result_sub_181685)
        # SSA join for if statement (line 1953)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1952)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 1958):
        
        # Assigning a BinOp to a Name (line 1958):
        # Getting the type of 'x' (line 1958)
        x_181686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 20), 'x')
        # Getting the type of 'rat' (line 1958)
        rat_181687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 24), 'rat')
        # Applying the binary operator '+' (line 1958)
        result_add_181688 = python_operator(stypy.reporting.localization.Localization(__file__, 1958, 20), '+', x_181686, rat_181687)
        
        # Assigning a type to the variable 'u' (line 1958)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1958, 16), 'u', result_add_181688)
        # SSA join for if statement (line 1952)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1959):
        
        # Assigning a Call to a Name (line 1959):
        
        # Call to func(...): (line 1959)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1959)
        tuple_181690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1959, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1959)
        # Adding element type (line 1959)
        # Getting the type of 'u' (line 1959)
        u_181691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1959, 25), 'u', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1959, 25), tuple_181690, u_181691)
        
        # Getting the type of 'self' (line 1959)
        self_181692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1959, 31), 'self', False)
        # Obtaining the member 'args' of a type (line 1959)
        args_181693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1959, 31), self_181692, 'args')
        # Applying the binary operator '+' (line 1959)
        result_add_181694 = python_operator(stypy.reporting.localization.Localization(__file__, 1959, 24), '+', tuple_181690, args_181693)
        
        # Processing the call keyword arguments (line 1959)
        kwargs_181695 = {}
        # Getting the type of 'func' (line 1959)
        func_181689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1959, 17), 'func', False)
        # Calling func(args, kwargs) (line 1959)
        func_call_result_181696 = invoke(stypy.reporting.localization.Localization(__file__, 1959, 17), func_181689, *[result_add_181694], **kwargs_181695)
        
        # Assigning a type to the variable 'fu' (line 1959)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1959, 12), 'fu', func_call_result_181696)
        
        # Getting the type of 'funcalls' (line 1960)
        funcalls_181697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1960, 12), 'funcalls')
        int_181698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1960, 24), 'int')
        # Applying the binary operator '+=' (line 1960)
        result_iadd_181699 = python_operator(stypy.reporting.localization.Localization(__file__, 1960, 12), '+=', funcalls_181697, int_181698)
        # Assigning a type to the variable 'funcalls' (line 1960)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1960, 12), 'funcalls', result_iadd_181699)
        
        
        
        # Getting the type of 'fu' (line 1962)
        fu_181700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 16), 'fu')
        # Getting the type of 'fx' (line 1962)
        fx_181701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 21), 'fx')
        # Applying the binary operator '>' (line 1962)
        result_gt_181702 = python_operator(stypy.reporting.localization.Localization(__file__, 1962, 16), '>', fu_181700, fx_181701)
        
        # Testing the type of an if condition (line 1962)
        if_condition_181703 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1962, 12), result_gt_181702)
        # Assigning a type to the variable 'if_condition_181703' (line 1962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1962, 12), 'if_condition_181703', if_condition_181703)
        # SSA begins for if statement (line 1962)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'u' (line 1963)
        u_181704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 20), 'u')
        # Getting the type of 'x' (line 1963)
        x_181705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 24), 'x')
        # Applying the binary operator '<' (line 1963)
        result_lt_181706 = python_operator(stypy.reporting.localization.Localization(__file__, 1963, 20), '<', u_181704, x_181705)
        
        # Testing the type of an if condition (line 1963)
        if_condition_181707 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1963, 16), result_lt_181706)
        # Assigning a type to the variable 'if_condition_181707' (line 1963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1963, 16), 'if_condition_181707', if_condition_181707)
        # SSA begins for if statement (line 1963)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1964):
        
        # Assigning a Name to a Name (line 1964):
        # Getting the type of 'u' (line 1964)
        u_181708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 24), 'u')
        # Assigning a type to the variable 'a' (line 1964)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1964, 20), 'a', u_181708)
        # SSA branch for the else part of an if statement (line 1963)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 1966):
        
        # Assigning a Name to a Name (line 1966):
        # Getting the type of 'u' (line 1966)
        u_181709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1966, 24), 'u')
        # Assigning a type to the variable 'b' (line 1966)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1966, 20), 'b', u_181709)
        # SSA join for if statement (line 1963)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'fu' (line 1967)
        fu_181710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1967, 20), 'fu')
        # Getting the type of 'fw' (line 1967)
        fw_181711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1967, 26), 'fw')
        # Applying the binary operator '<=' (line 1967)
        result_le_181712 = python_operator(stypy.reporting.localization.Localization(__file__, 1967, 20), '<=', fu_181710, fw_181711)
        
        
        # Getting the type of 'w' (line 1967)
        w_181713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1967, 34), 'w')
        # Getting the type of 'x' (line 1967)
        x_181714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1967, 39), 'x')
        # Applying the binary operator '==' (line 1967)
        result_eq_181715 = python_operator(stypy.reporting.localization.Localization(__file__, 1967, 34), '==', w_181713, x_181714)
        
        # Applying the binary operator 'or' (line 1967)
        result_or_keyword_181716 = python_operator(stypy.reporting.localization.Localization(__file__, 1967, 19), 'or', result_le_181712, result_eq_181715)
        
        # Testing the type of an if condition (line 1967)
        if_condition_181717 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1967, 16), result_or_keyword_181716)
        # Assigning a type to the variable 'if_condition_181717' (line 1967)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1967, 16), 'if_condition_181717', if_condition_181717)
        # SSA begins for if statement (line 1967)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1968):
        
        # Assigning a Name to a Name (line 1968):
        # Getting the type of 'w' (line 1968)
        w_181718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1968, 24), 'w')
        # Assigning a type to the variable 'v' (line 1968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1968, 20), 'v', w_181718)
        
        # Assigning a Name to a Name (line 1969):
        
        # Assigning a Name to a Name (line 1969):
        # Getting the type of 'u' (line 1969)
        u_181719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1969, 24), 'u')
        # Assigning a type to the variable 'w' (line 1969)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1969, 20), 'w', u_181719)
        
        # Assigning a Name to a Name (line 1970):
        
        # Assigning a Name to a Name (line 1970):
        # Getting the type of 'fw' (line 1970)
        fw_181720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 25), 'fw')
        # Assigning a type to the variable 'fv' (line 1970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1970, 20), 'fv', fw_181720)
        
        # Assigning a Name to a Name (line 1971):
        
        # Assigning a Name to a Name (line 1971):
        # Getting the type of 'fu' (line 1971)
        fu_181721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 25), 'fu')
        # Assigning a type to the variable 'fw' (line 1971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1971, 20), 'fw', fu_181721)
        # SSA branch for the else part of an if statement (line 1967)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'fu' (line 1972)
        fu_181722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 22), 'fu')
        # Getting the type of 'fv' (line 1972)
        fv_181723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 28), 'fv')
        # Applying the binary operator '<=' (line 1972)
        result_le_181724 = python_operator(stypy.reporting.localization.Localization(__file__, 1972, 22), '<=', fu_181722, fv_181723)
        
        
        # Getting the type of 'v' (line 1972)
        v_181725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 36), 'v')
        # Getting the type of 'x' (line 1972)
        x_181726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 41), 'x')
        # Applying the binary operator '==' (line 1972)
        result_eq_181727 = python_operator(stypy.reporting.localization.Localization(__file__, 1972, 36), '==', v_181725, x_181726)
        
        # Applying the binary operator 'or' (line 1972)
        result_or_keyword_181728 = python_operator(stypy.reporting.localization.Localization(__file__, 1972, 21), 'or', result_le_181724, result_eq_181727)
        
        # Getting the type of 'v' (line 1972)
        v_181729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 48), 'v')
        # Getting the type of 'w' (line 1972)
        w_181730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 53), 'w')
        # Applying the binary operator '==' (line 1972)
        result_eq_181731 = python_operator(stypy.reporting.localization.Localization(__file__, 1972, 48), '==', v_181729, w_181730)
        
        # Applying the binary operator 'or' (line 1972)
        result_or_keyword_181732 = python_operator(stypy.reporting.localization.Localization(__file__, 1972, 21), 'or', result_or_keyword_181728, result_eq_181731)
        
        # Testing the type of an if condition (line 1972)
        if_condition_181733 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1972, 21), result_or_keyword_181732)
        # Assigning a type to the variable 'if_condition_181733' (line 1972)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1972, 21), 'if_condition_181733', if_condition_181733)
        # SSA begins for if statement (line 1972)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1973):
        
        # Assigning a Name to a Name (line 1973):
        # Getting the type of 'u' (line 1973)
        u_181734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 24), 'u')
        # Assigning a type to the variable 'v' (line 1973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 20), 'v', u_181734)
        
        # Assigning a Name to a Name (line 1974):
        
        # Assigning a Name to a Name (line 1974):
        # Getting the type of 'fu' (line 1974)
        fu_181735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 25), 'fu')
        # Assigning a type to the variable 'fv' (line 1974)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1974, 20), 'fv', fu_181735)
        # SSA join for if statement (line 1972)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1967)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1962)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'u' (line 1976)
        u_181736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1976, 20), 'u')
        # Getting the type of 'x' (line 1976)
        x_181737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1976, 25), 'x')
        # Applying the binary operator '>=' (line 1976)
        result_ge_181738 = python_operator(stypy.reporting.localization.Localization(__file__, 1976, 20), '>=', u_181736, x_181737)
        
        # Testing the type of an if condition (line 1976)
        if_condition_181739 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1976, 16), result_ge_181738)
        # Assigning a type to the variable 'if_condition_181739' (line 1976)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1976, 16), 'if_condition_181739', if_condition_181739)
        # SSA begins for if statement (line 1976)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1977):
        
        # Assigning a Name to a Name (line 1977):
        # Getting the type of 'x' (line 1977)
        x_181740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1977, 24), 'x')
        # Assigning a type to the variable 'a' (line 1977)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1977, 20), 'a', x_181740)
        # SSA branch for the else part of an if statement (line 1976)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 1979):
        
        # Assigning a Name to a Name (line 1979):
        # Getting the type of 'x' (line 1979)
        x_181741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1979, 24), 'x')
        # Assigning a type to the variable 'b' (line 1979)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1979, 20), 'b', x_181741)
        # SSA join for if statement (line 1976)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 1980):
        
        # Assigning a Name to a Name (line 1980):
        # Getting the type of 'w' (line 1980)
        w_181742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 20), 'w')
        # Assigning a type to the variable 'v' (line 1980)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1980, 16), 'v', w_181742)
        
        # Assigning a Name to a Name (line 1981):
        
        # Assigning a Name to a Name (line 1981):
        # Getting the type of 'x' (line 1981)
        x_181743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 20), 'x')
        # Assigning a type to the variable 'w' (line 1981)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1981, 16), 'w', x_181743)
        
        # Assigning a Name to a Name (line 1982):
        
        # Assigning a Name to a Name (line 1982):
        # Getting the type of 'u' (line 1982)
        u_181744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1982, 20), 'u')
        # Assigning a type to the variable 'x' (line 1982)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1982, 16), 'x', u_181744)
        
        # Assigning a Name to a Name (line 1983):
        
        # Assigning a Name to a Name (line 1983):
        # Getting the type of 'fw' (line 1983)
        fw_181745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 21), 'fw')
        # Assigning a type to the variable 'fv' (line 1983)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1983, 16), 'fv', fw_181745)
        
        # Assigning a Name to a Name (line 1984):
        
        # Assigning a Name to a Name (line 1984):
        # Getting the type of 'fx' (line 1984)
        fx_181746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1984, 21), 'fx')
        # Assigning a type to the variable 'fw' (line 1984)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1984, 16), 'fw', fx_181746)
        
        # Assigning a Name to a Name (line 1985):
        
        # Assigning a Name to a Name (line 1985):
        # Getting the type of 'fu' (line 1985)
        fu_181747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 21), 'fu')
        # Assigning a type to the variable 'fx' (line 1985)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1985, 16), 'fx', fu_181747)
        # SSA join for if statement (line 1962)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'iter' (line 1987)
        iter_181748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1987, 12), 'iter')
        int_181749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1987, 20), 'int')
        # Applying the binary operator '+=' (line 1987)
        result_iadd_181750 = python_operator(stypy.reporting.localization.Localization(__file__, 1987, 12), '+=', iter_181748, int_181749)
        # Assigning a type to the variable 'iter' (line 1987)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1987, 12), 'iter', result_iadd_181750)
        
        # SSA join for while statement (line 1909)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1992):
        
        # Assigning a Name to a Attribute (line 1992):
        # Getting the type of 'x' (line 1992)
        x_181751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1992, 20), 'x')
        # Getting the type of 'self' (line 1992)
        self_181752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1992, 8), 'self')
        # Setting the type of the member 'xmin' of a type (line 1992)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1992, 8), self_181752, 'xmin', x_181751)
        
        # Assigning a Name to a Attribute (line 1993):
        
        # Assigning a Name to a Attribute (line 1993):
        # Getting the type of 'fx' (line 1993)
        fx_181753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1993, 20), 'fx')
        # Getting the type of 'self' (line 1993)
        self_181754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1993, 8), 'self')
        # Setting the type of the member 'fval' of a type (line 1993)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1993, 8), self_181754, 'fval', fx_181753)
        
        # Assigning a Name to a Attribute (line 1994):
        
        # Assigning a Name to a Attribute (line 1994):
        # Getting the type of 'iter' (line 1994)
        iter_181755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 20), 'iter')
        # Getting the type of 'self' (line 1994)
        self_181756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 8), 'self')
        # Setting the type of the member 'iter' of a type (line 1994)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1994, 8), self_181756, 'iter', iter_181755)
        
        # Assigning a Name to a Attribute (line 1995):
        
        # Assigning a Name to a Attribute (line 1995):
        # Getting the type of 'funcalls' (line 1995)
        funcalls_181757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 24), 'funcalls')
        # Getting the type of 'self' (line 1995)
        self_181758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 8), 'self')
        # Setting the type of the member 'funcalls' of a type (line 1995)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1995, 8), self_181758, 'funcalls', funcalls_181757)
        
        # ################# End of 'optimize(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'optimize' in the type store
        # Getting the type of 'stypy_return_type' (line 1889)
        stypy_return_type_181759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_181759)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'optimize'
        return stypy_return_type_181759


    @norecursion
    def get_result(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1997)
        False_181760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 37), 'False')
        defaults = [False_181760]
        # Create a new context for function 'get_result'
        module_type_store = module_type_store.open_function_context('get_result', 1997, 4, False)
        # Assigning a type to the variable 'self' (line 1998)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1998, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Brent.get_result.__dict__.__setitem__('stypy_localization', localization)
        Brent.get_result.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Brent.get_result.__dict__.__setitem__('stypy_type_store', module_type_store)
        Brent.get_result.__dict__.__setitem__('stypy_function_name', 'Brent.get_result')
        Brent.get_result.__dict__.__setitem__('stypy_param_names_list', ['full_output'])
        Brent.get_result.__dict__.__setitem__('stypy_varargs_param_name', None)
        Brent.get_result.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Brent.get_result.__dict__.__setitem__('stypy_call_defaults', defaults)
        Brent.get_result.__dict__.__setitem__('stypy_call_varargs', varargs)
        Brent.get_result.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Brent.get_result.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Brent.get_result', ['full_output'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_result', localization, ['full_output'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_result(...)' code ##################

        
        # Getting the type of 'full_output' (line 1998)
        full_output_181761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1998, 11), 'full_output')
        # Testing the type of an if condition (line 1998)
        if_condition_181762 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1998, 8), full_output_181761)
        # Assigning a type to the variable 'if_condition_181762' (line 1998)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1998, 8), 'if_condition_181762', if_condition_181762)
        # SSA begins for if statement (line 1998)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1999)
        tuple_181763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1999, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1999)
        # Adding element type (line 1999)
        # Getting the type of 'self' (line 1999)
        self_181764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1999, 19), 'self')
        # Obtaining the member 'xmin' of a type (line 1999)
        xmin_181765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1999, 19), self_181764, 'xmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1999, 19), tuple_181763, xmin_181765)
        # Adding element type (line 1999)
        # Getting the type of 'self' (line 1999)
        self_181766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1999, 30), 'self')
        # Obtaining the member 'fval' of a type (line 1999)
        fval_181767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1999, 30), self_181766, 'fval')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1999, 19), tuple_181763, fval_181767)
        # Adding element type (line 1999)
        # Getting the type of 'self' (line 1999)
        self_181768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1999, 41), 'self')
        # Obtaining the member 'iter' of a type (line 1999)
        iter_181769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1999, 41), self_181768, 'iter')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1999, 19), tuple_181763, iter_181769)
        # Adding element type (line 1999)
        # Getting the type of 'self' (line 1999)
        self_181770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1999, 52), 'self')
        # Obtaining the member 'funcalls' of a type (line 1999)
        funcalls_181771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1999, 52), self_181770, 'funcalls')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1999, 19), tuple_181763, funcalls_181771)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1999)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1999, 12), 'stypy_return_type', tuple_181763)
        # SSA branch for the else part of an if statement (line 1998)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'self' (line 2001)
        self_181772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2001, 19), 'self')
        # Obtaining the member 'xmin' of a type (line 2001)
        xmin_181773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2001, 19), self_181772, 'xmin')
        # Assigning a type to the variable 'stypy_return_type' (line 2001)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2001, 12), 'stypy_return_type', xmin_181773)
        # SSA join for if statement (line 1998)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_result(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_result' in the type store
        # Getting the type of 'stypy_return_type' (line 1997)
        stypy_return_type_181774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_181774)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_result'
        return stypy_return_type_181774


# Assigning a type to the variable 'Brent' (line 1839)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1839, 0), 'Brent', Brent)

@norecursion
def brent(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 2004)
    tuple_181775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2004, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2004)
    
    # Getting the type of 'None' (line 2004)
    None_181776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 31), 'None')
    float_181777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2004, 41), 'float')
    int_181778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2004, 62), 'int')
    int_181779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2004, 73), 'int')
    defaults = [tuple_181775, None_181776, float_181777, int_181778, int_181779]
    # Create a new context for function 'brent'
    module_type_store = module_type_store.open_function_context('brent', 2004, 0, False)
    
    # Passed parameters checking function
    brent.stypy_localization = localization
    brent.stypy_type_of_self = None
    brent.stypy_type_store = module_type_store
    brent.stypy_function_name = 'brent'
    brent.stypy_param_names_list = ['func', 'args', 'brack', 'tol', 'full_output', 'maxiter']
    brent.stypy_varargs_param_name = None
    brent.stypy_kwargs_param_name = None
    brent.stypy_call_defaults = defaults
    brent.stypy_call_varargs = varargs
    brent.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'brent', ['func', 'args', 'brack', 'tol', 'full_output', 'maxiter'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'brent', localization, ['func', 'args', 'brack', 'tol', 'full_output', 'maxiter'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'brent(...)' code ##################

    str_181780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2073, (-1)), 'str', "\n    Given a function of one-variable and a possible bracket, return\n    the local minimum of the function isolated to a fractional precision\n    of tol.\n\n    Parameters\n    ----------\n    func : callable f(x,*args)\n        Objective function.\n    args : tuple, optional\n        Additional arguments (if present).\n    brack : tuple, optional\n        Either a triple (xa,xb,xc) where xa<xb<xc and func(xb) <\n        func(xa), func(xc) or a pair (xa,xb) which are used as a\n        starting interval for a downhill bracket search (see\n        `bracket`). Providing the pair (xa,xb) does not always mean\n        the obtained solution will satisfy xa<=x<=xb.\n    tol : float, optional\n        Stop if between iteration change is less than `tol`.\n    full_output : bool, optional\n        If True, return all output args (xmin, fval, iter,\n        funcalls).\n    maxiter : int, optional\n        Maximum number of iterations in solution.\n\n    Returns\n    -------\n    xmin : ndarray\n        Optimum point.\n    fval : float\n        Optimum value.\n    iter : int\n        Number of iterations.\n    funcalls : int\n        Number of objective function evaluations made.\n\n    See also\n    --------\n    minimize_scalar: Interface to minimization algorithms for scalar\n        univariate functions. See the 'Brent' `method` in particular.\n\n    Notes\n    -----\n    Uses inverse parabolic interpolation when possible to speed up\n    convergence of golden section method.\n\n    Does not ensure that the minimum lies in the range specified by\n    `brack`. See `fminbound`.\n    \n    Examples\n    --------\n    We illustrate the behaviour of the function when `brack` is of\n    size 2 and 3 respectively. In the case where `brack` is of the\n    form (xa,xb), we can see for the given values, the output need\n    not necessarily lie in the range (xa,xb).\n\n    >>> def f(x):\n    ...     return x**2\n    \n    >>> from scipy import optimize\n\n    >>> minimum = optimize.brent(f,brack=(1,2))\n    >>> minimum\n    0.0\n    >>> minimum = optimize.brent(f,brack=(-1,0.5,2))\n    >>> minimum\n    -2.7755575615628914e-17\n\n    ")
    
    # Assigning a Dict to a Name (line 2074):
    
    # Assigning a Dict to a Name (line 2074):
    
    # Obtaining an instance of the builtin type 'dict' (line 2074)
    dict_181781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2074, 14), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 2074)
    # Adding element type (key, value) (line 2074)
    str_181782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2074, 15), 'str', 'xtol')
    # Getting the type of 'tol' (line 2074)
    tol_181783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2074, 23), 'tol')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2074, 14), dict_181781, (str_181782, tol_181783))
    # Adding element type (key, value) (line 2074)
    str_181784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2075, 15), 'str', 'maxiter')
    # Getting the type of 'maxiter' (line 2075)
    maxiter_181785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 26), 'maxiter')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2074, 14), dict_181781, (str_181784, maxiter_181785))
    
    # Assigning a type to the variable 'options' (line 2074)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2074, 4), 'options', dict_181781)
    
    # Assigning a Call to a Name (line 2076):
    
    # Assigning a Call to a Name (line 2076):
    
    # Call to _minimize_scalar_brent(...): (line 2076)
    # Processing the call arguments (line 2076)
    # Getting the type of 'func' (line 2076)
    func_181787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 33), 'func', False)
    # Getting the type of 'brack' (line 2076)
    brack_181788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 39), 'brack', False)
    # Getting the type of 'args' (line 2076)
    args_181789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 46), 'args', False)
    # Processing the call keyword arguments (line 2076)
    # Getting the type of 'options' (line 2076)
    options_181790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 54), 'options', False)
    kwargs_181791 = {'options_181790': options_181790}
    # Getting the type of '_minimize_scalar_brent' (line 2076)
    _minimize_scalar_brent_181786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 10), '_minimize_scalar_brent', False)
    # Calling _minimize_scalar_brent(args, kwargs) (line 2076)
    _minimize_scalar_brent_call_result_181792 = invoke(stypy.reporting.localization.Localization(__file__, 2076, 10), _minimize_scalar_brent_181786, *[func_181787, brack_181788, args_181789], **kwargs_181791)
    
    # Assigning a type to the variable 'res' (line 2076)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2076, 4), 'res', _minimize_scalar_brent_call_result_181792)
    
    # Getting the type of 'full_output' (line 2077)
    full_output_181793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2077, 7), 'full_output')
    # Testing the type of an if condition (line 2077)
    if_condition_181794 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2077, 4), full_output_181793)
    # Assigning a type to the variable 'if_condition_181794' (line 2077)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2077, 4), 'if_condition_181794', if_condition_181794)
    # SSA begins for if statement (line 2077)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2078)
    tuple_181795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2078, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2078)
    # Adding element type (line 2078)
    
    # Obtaining the type of the subscript
    str_181796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2078, 19), 'str', 'x')
    # Getting the type of 'res' (line 2078)
    res_181797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 15), 'res')
    # Obtaining the member '__getitem__' of a type (line 2078)
    getitem___181798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2078, 15), res_181797, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2078)
    subscript_call_result_181799 = invoke(stypy.reporting.localization.Localization(__file__, 2078, 15), getitem___181798, str_181796)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2078, 15), tuple_181795, subscript_call_result_181799)
    # Adding element type (line 2078)
    
    # Obtaining the type of the subscript
    str_181800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2078, 29), 'str', 'fun')
    # Getting the type of 'res' (line 2078)
    res_181801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 25), 'res')
    # Obtaining the member '__getitem__' of a type (line 2078)
    getitem___181802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2078, 25), res_181801, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2078)
    subscript_call_result_181803 = invoke(stypy.reporting.localization.Localization(__file__, 2078, 25), getitem___181802, str_181800)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2078, 15), tuple_181795, subscript_call_result_181803)
    # Adding element type (line 2078)
    
    # Obtaining the type of the subscript
    str_181804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2078, 41), 'str', 'nit')
    # Getting the type of 'res' (line 2078)
    res_181805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 37), 'res')
    # Obtaining the member '__getitem__' of a type (line 2078)
    getitem___181806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2078, 37), res_181805, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2078)
    subscript_call_result_181807 = invoke(stypy.reporting.localization.Localization(__file__, 2078, 37), getitem___181806, str_181804)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2078, 15), tuple_181795, subscript_call_result_181807)
    # Adding element type (line 2078)
    
    # Obtaining the type of the subscript
    str_181808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2078, 53), 'str', 'nfev')
    # Getting the type of 'res' (line 2078)
    res_181809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 49), 'res')
    # Obtaining the member '__getitem__' of a type (line 2078)
    getitem___181810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2078, 49), res_181809, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2078)
    subscript_call_result_181811 = invoke(stypy.reporting.localization.Localization(__file__, 2078, 49), getitem___181810, str_181808)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2078, 15), tuple_181795, subscript_call_result_181811)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2078)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2078, 8), 'stypy_return_type', tuple_181795)
    # SSA branch for the else part of an if statement (line 2077)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining the type of the subscript
    str_181812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2080, 19), 'str', 'x')
    # Getting the type of 'res' (line 2080)
    res_181813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 15), 'res')
    # Obtaining the member '__getitem__' of a type (line 2080)
    getitem___181814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2080, 15), res_181813, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2080)
    subscript_call_result_181815 = invoke(stypy.reporting.localization.Localization(__file__, 2080, 15), getitem___181814, str_181812)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2080)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2080, 8), 'stypy_return_type', subscript_call_result_181815)
    # SSA join for if statement (line 2077)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'brent(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'brent' in the type store
    # Getting the type of 'stypy_return_type' (line 2004)
    stypy_return_type_181816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_181816)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'brent'
    return stypy_return_type_181816

# Assigning a type to the variable 'brent' (line 2004)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2004, 0), 'brent', brent)

@norecursion
def _minimize_scalar_brent(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2083)
    None_181817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 39), 'None')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2083)
    tuple_181818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2083, 50), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2083)
    
    float_181819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2084, 32), 'float')
    int_181820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2084, 49), 'int')
    defaults = [None_181817, tuple_181818, float_181819, int_181820]
    # Create a new context for function '_minimize_scalar_brent'
    module_type_store = module_type_store.open_function_context('_minimize_scalar_brent', 2083, 0, False)
    
    # Passed parameters checking function
    _minimize_scalar_brent.stypy_localization = localization
    _minimize_scalar_brent.stypy_type_of_self = None
    _minimize_scalar_brent.stypy_type_store = module_type_store
    _minimize_scalar_brent.stypy_function_name = '_minimize_scalar_brent'
    _minimize_scalar_brent.stypy_param_names_list = ['func', 'brack', 'args', 'xtol', 'maxiter']
    _minimize_scalar_brent.stypy_varargs_param_name = None
    _minimize_scalar_brent.stypy_kwargs_param_name = 'unknown_options'
    _minimize_scalar_brent.stypy_call_defaults = defaults
    _minimize_scalar_brent.stypy_call_varargs = varargs
    _minimize_scalar_brent.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_minimize_scalar_brent', ['func', 'brack', 'args', 'xtol', 'maxiter'], None, 'unknown_options', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_minimize_scalar_brent', localization, ['func', 'brack', 'args', 'xtol', 'maxiter'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_minimize_scalar_brent(...)' code ##################

    str_181821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2099, (-1)), 'str', '\n    Options\n    -------\n    maxiter : int\n        Maximum number of iterations to perform.\n    xtol : float\n        Relative error in solution `xopt` acceptable for convergence.\n\n    Notes\n    -----\n    Uses inverse parabolic interpolation when possible to speed up\n    convergence of golden section method.\n\n    ')
    
    # Call to _check_unknown_options(...): (line 2100)
    # Processing the call arguments (line 2100)
    # Getting the type of 'unknown_options' (line 2100)
    unknown_options_181823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 27), 'unknown_options', False)
    # Processing the call keyword arguments (line 2100)
    kwargs_181824 = {}
    # Getting the type of '_check_unknown_options' (line 2100)
    _check_unknown_options_181822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 4), '_check_unknown_options', False)
    # Calling _check_unknown_options(args, kwargs) (line 2100)
    _check_unknown_options_call_result_181825 = invoke(stypy.reporting.localization.Localization(__file__, 2100, 4), _check_unknown_options_181822, *[unknown_options_181823], **kwargs_181824)
    
    
    # Assigning a Name to a Name (line 2101):
    
    # Assigning a Name to a Name (line 2101):
    # Getting the type of 'xtol' (line 2101)
    xtol_181826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2101, 10), 'xtol')
    # Assigning a type to the variable 'tol' (line 2101)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2101, 4), 'tol', xtol_181826)
    
    
    # Getting the type of 'tol' (line 2102)
    tol_181827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 7), 'tol')
    int_181828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2102, 13), 'int')
    # Applying the binary operator '<' (line 2102)
    result_lt_181829 = python_operator(stypy.reporting.localization.Localization(__file__, 2102, 7), '<', tol_181827, int_181828)
    
    # Testing the type of an if condition (line 2102)
    if_condition_181830 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2102, 4), result_lt_181829)
    # Assigning a type to the variable 'if_condition_181830' (line 2102)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2102, 4), 'if_condition_181830', if_condition_181830)
    # SSA begins for if statement (line 2102)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2103)
    # Processing the call arguments (line 2103)
    str_181832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2103, 25), 'str', 'tolerance should be >= 0, got %r')
    # Getting the type of 'tol' (line 2103)
    tol_181833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 62), 'tol', False)
    # Applying the binary operator '%' (line 2103)
    result_mod_181834 = python_operator(stypy.reporting.localization.Localization(__file__, 2103, 25), '%', str_181832, tol_181833)
    
    # Processing the call keyword arguments (line 2103)
    kwargs_181835 = {}
    # Getting the type of 'ValueError' (line 2103)
    ValueError_181831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2103)
    ValueError_call_result_181836 = invoke(stypy.reporting.localization.Localization(__file__, 2103, 14), ValueError_181831, *[result_mod_181834], **kwargs_181835)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2103, 8), ValueError_call_result_181836, 'raise parameter', BaseException)
    # SSA join for if statement (line 2102)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2105):
    
    # Assigning a Call to a Name (line 2105):
    
    # Call to Brent(...): (line 2105)
    # Processing the call keyword arguments (line 2105)
    # Getting the type of 'func' (line 2105)
    func_181838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 23), 'func', False)
    keyword_181839 = func_181838
    # Getting the type of 'args' (line 2105)
    args_181840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 34), 'args', False)
    keyword_181841 = args_181840
    # Getting the type of 'tol' (line 2105)
    tol_181842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 44), 'tol', False)
    keyword_181843 = tol_181842
    # Getting the type of 'True' (line 2106)
    True_181844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2106, 30), 'True', False)
    keyword_181845 = True_181844
    # Getting the type of 'maxiter' (line 2106)
    maxiter_181846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2106, 44), 'maxiter', False)
    keyword_181847 = maxiter_181846
    kwargs_181848 = {'full_output': keyword_181845, 'args': keyword_181841, 'tol': keyword_181843, 'func': keyword_181839, 'maxiter': keyword_181847}
    # Getting the type of 'Brent' (line 2105)
    Brent_181837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 12), 'Brent', False)
    # Calling Brent(args, kwargs) (line 2105)
    Brent_call_result_181849 = invoke(stypy.reporting.localization.Localization(__file__, 2105, 12), Brent_181837, *[], **kwargs_181848)
    
    # Assigning a type to the variable 'brent' (line 2105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2105, 4), 'brent', Brent_call_result_181849)
    
    # Call to set_bracket(...): (line 2107)
    # Processing the call arguments (line 2107)
    # Getting the type of 'brack' (line 2107)
    brack_181852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2107, 22), 'brack', False)
    # Processing the call keyword arguments (line 2107)
    kwargs_181853 = {}
    # Getting the type of 'brent' (line 2107)
    brent_181850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2107, 4), 'brent', False)
    # Obtaining the member 'set_bracket' of a type (line 2107)
    set_bracket_181851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2107, 4), brent_181850, 'set_bracket')
    # Calling set_bracket(args, kwargs) (line 2107)
    set_bracket_call_result_181854 = invoke(stypy.reporting.localization.Localization(__file__, 2107, 4), set_bracket_181851, *[brack_181852], **kwargs_181853)
    
    
    # Call to optimize(...): (line 2108)
    # Processing the call keyword arguments (line 2108)
    kwargs_181857 = {}
    # Getting the type of 'brent' (line 2108)
    brent_181855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2108, 4), 'brent', False)
    # Obtaining the member 'optimize' of a type (line 2108)
    optimize_181856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2108, 4), brent_181855, 'optimize')
    # Calling optimize(args, kwargs) (line 2108)
    optimize_call_result_181858 = invoke(stypy.reporting.localization.Localization(__file__, 2108, 4), optimize_181856, *[], **kwargs_181857)
    
    
    # Assigning a Call to a Tuple (line 2109):
    
    # Assigning a Subscript to a Name (line 2109):
    
    # Obtaining the type of the subscript
    int_181859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2109, 4), 'int')
    
    # Call to get_result(...): (line 2109)
    # Processing the call keyword arguments (line 2109)
    # Getting the type of 'True' (line 2109)
    True_181862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 54), 'True', False)
    keyword_181863 = True_181862
    kwargs_181864 = {'full_output': keyword_181863}
    # Getting the type of 'brent' (line 2109)
    brent_181860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 25), 'brent', False)
    # Obtaining the member 'get_result' of a type (line 2109)
    get_result_181861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2109, 25), brent_181860, 'get_result')
    # Calling get_result(args, kwargs) (line 2109)
    get_result_call_result_181865 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 25), get_result_181861, *[], **kwargs_181864)
    
    # Obtaining the member '__getitem__' of a type (line 2109)
    getitem___181866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2109, 4), get_result_call_result_181865, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2109)
    subscript_call_result_181867 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 4), getitem___181866, int_181859)
    
    # Assigning a type to the variable 'tuple_var_assignment_176709' (line 2109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 4), 'tuple_var_assignment_176709', subscript_call_result_181867)
    
    # Assigning a Subscript to a Name (line 2109):
    
    # Obtaining the type of the subscript
    int_181868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2109, 4), 'int')
    
    # Call to get_result(...): (line 2109)
    # Processing the call keyword arguments (line 2109)
    # Getting the type of 'True' (line 2109)
    True_181871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 54), 'True', False)
    keyword_181872 = True_181871
    kwargs_181873 = {'full_output': keyword_181872}
    # Getting the type of 'brent' (line 2109)
    brent_181869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 25), 'brent', False)
    # Obtaining the member 'get_result' of a type (line 2109)
    get_result_181870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2109, 25), brent_181869, 'get_result')
    # Calling get_result(args, kwargs) (line 2109)
    get_result_call_result_181874 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 25), get_result_181870, *[], **kwargs_181873)
    
    # Obtaining the member '__getitem__' of a type (line 2109)
    getitem___181875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2109, 4), get_result_call_result_181874, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2109)
    subscript_call_result_181876 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 4), getitem___181875, int_181868)
    
    # Assigning a type to the variable 'tuple_var_assignment_176710' (line 2109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 4), 'tuple_var_assignment_176710', subscript_call_result_181876)
    
    # Assigning a Subscript to a Name (line 2109):
    
    # Obtaining the type of the subscript
    int_181877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2109, 4), 'int')
    
    # Call to get_result(...): (line 2109)
    # Processing the call keyword arguments (line 2109)
    # Getting the type of 'True' (line 2109)
    True_181880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 54), 'True', False)
    keyword_181881 = True_181880
    kwargs_181882 = {'full_output': keyword_181881}
    # Getting the type of 'brent' (line 2109)
    brent_181878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 25), 'brent', False)
    # Obtaining the member 'get_result' of a type (line 2109)
    get_result_181879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2109, 25), brent_181878, 'get_result')
    # Calling get_result(args, kwargs) (line 2109)
    get_result_call_result_181883 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 25), get_result_181879, *[], **kwargs_181882)
    
    # Obtaining the member '__getitem__' of a type (line 2109)
    getitem___181884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2109, 4), get_result_call_result_181883, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2109)
    subscript_call_result_181885 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 4), getitem___181884, int_181877)
    
    # Assigning a type to the variable 'tuple_var_assignment_176711' (line 2109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 4), 'tuple_var_assignment_176711', subscript_call_result_181885)
    
    # Assigning a Subscript to a Name (line 2109):
    
    # Obtaining the type of the subscript
    int_181886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2109, 4), 'int')
    
    # Call to get_result(...): (line 2109)
    # Processing the call keyword arguments (line 2109)
    # Getting the type of 'True' (line 2109)
    True_181889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 54), 'True', False)
    keyword_181890 = True_181889
    kwargs_181891 = {'full_output': keyword_181890}
    # Getting the type of 'brent' (line 2109)
    brent_181887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 25), 'brent', False)
    # Obtaining the member 'get_result' of a type (line 2109)
    get_result_181888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2109, 25), brent_181887, 'get_result')
    # Calling get_result(args, kwargs) (line 2109)
    get_result_call_result_181892 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 25), get_result_181888, *[], **kwargs_181891)
    
    # Obtaining the member '__getitem__' of a type (line 2109)
    getitem___181893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2109, 4), get_result_call_result_181892, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2109)
    subscript_call_result_181894 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 4), getitem___181893, int_181886)
    
    # Assigning a type to the variable 'tuple_var_assignment_176712' (line 2109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 4), 'tuple_var_assignment_176712', subscript_call_result_181894)
    
    # Assigning a Name to a Name (line 2109):
    # Getting the type of 'tuple_var_assignment_176709' (line 2109)
    tuple_var_assignment_176709_181895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 4), 'tuple_var_assignment_176709')
    # Assigning a type to the variable 'x' (line 2109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 4), 'x', tuple_var_assignment_176709_181895)
    
    # Assigning a Name to a Name (line 2109):
    # Getting the type of 'tuple_var_assignment_176710' (line 2109)
    tuple_var_assignment_176710_181896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 4), 'tuple_var_assignment_176710')
    # Assigning a type to the variable 'fval' (line 2109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 7), 'fval', tuple_var_assignment_176710_181896)
    
    # Assigning a Name to a Name (line 2109):
    # Getting the type of 'tuple_var_assignment_176711' (line 2109)
    tuple_var_assignment_176711_181897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 4), 'tuple_var_assignment_176711')
    # Assigning a type to the variable 'nit' (line 2109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 13), 'nit', tuple_var_assignment_176711_181897)
    
    # Assigning a Name to a Name (line 2109):
    # Getting the type of 'tuple_var_assignment_176712' (line 2109)
    tuple_var_assignment_176712_181898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 4), 'tuple_var_assignment_176712')
    # Assigning a type to the variable 'nfev' (line 2109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 18), 'nfev', tuple_var_assignment_176712_181898)
    
    # Call to OptimizeResult(...): (line 2110)
    # Processing the call keyword arguments (line 2110)
    # Getting the type of 'fval' (line 2110)
    fval_181900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 30), 'fval', False)
    keyword_181901 = fval_181900
    # Getting the type of 'x' (line 2110)
    x_181902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 38), 'x', False)
    keyword_181903 = x_181902
    # Getting the type of 'nit' (line 2110)
    nit_181904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 45), 'nit', False)
    keyword_181905 = nit_181904
    # Getting the type of 'nfev' (line 2110)
    nfev_181906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 55), 'nfev', False)
    keyword_181907 = nfev_181906
    
    # Getting the type of 'nit' (line 2111)
    nit_181908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 34), 'nit', False)
    # Getting the type of 'maxiter' (line 2111)
    maxiter_181909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 40), 'maxiter', False)
    # Applying the binary operator '<' (line 2111)
    result_lt_181910 = python_operator(stypy.reporting.localization.Localization(__file__, 2111, 34), '<', nit_181908, maxiter_181909)
    
    keyword_181911 = result_lt_181910
    kwargs_181912 = {'fun': keyword_181901, 'x': keyword_181903, 'success': keyword_181911, 'nit': keyword_181905, 'nfev': keyword_181907}
    # Getting the type of 'OptimizeResult' (line 2110)
    OptimizeResult_181899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 11), 'OptimizeResult', False)
    # Calling OptimizeResult(args, kwargs) (line 2110)
    OptimizeResult_call_result_181913 = invoke(stypy.reporting.localization.Localization(__file__, 2110, 11), OptimizeResult_181899, *[], **kwargs_181912)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2110)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2110, 4), 'stypy_return_type', OptimizeResult_call_result_181913)
    
    # ################# End of '_minimize_scalar_brent(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_minimize_scalar_brent' in the type store
    # Getting the type of 'stypy_return_type' (line 2083)
    stypy_return_type_181914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_181914)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_minimize_scalar_brent'
    return stypy_return_type_181914

# Assigning a type to the variable '_minimize_scalar_brent' (line 2083)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 0), '_minimize_scalar_brent', _minimize_scalar_brent)

@norecursion
def golden(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 2114)
    tuple_181915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2114, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2114)
    
    # Getting the type of 'None' (line 2114)
    None_181916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 32), 'None')
    # Getting the type of '_epsilon' (line 2114)
    _epsilon_181917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 42), '_epsilon')
    int_181918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2115, 23), 'int')
    int_181919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2115, 34), 'int')
    defaults = [tuple_181915, None_181916, _epsilon_181917, int_181918, int_181919]
    # Create a new context for function 'golden'
    module_type_store = module_type_store.open_function_context('golden', 2114, 0, False)
    
    # Passed parameters checking function
    golden.stypy_localization = localization
    golden.stypy_type_of_self = None
    golden.stypy_type_store = module_type_store
    golden.stypy_function_name = 'golden'
    golden.stypy_param_names_list = ['func', 'args', 'brack', 'tol', 'full_output', 'maxiter']
    golden.stypy_varargs_param_name = None
    golden.stypy_kwargs_param_name = None
    golden.stypy_call_defaults = defaults
    golden.stypy_call_varargs = varargs
    golden.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'golden', ['func', 'args', 'brack', 'tol', 'full_output', 'maxiter'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'golden', localization, ['func', 'args', 'brack', 'tol', 'full_output', 'maxiter'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'golden(...)' code ##################

    str_181920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2172, (-1)), 'str', "\n    Return the minimum of a function of one variable using golden section\n    method.\n\n    Given a function of one variable and a possible bracketing interval,\n    return the minimum of the function isolated to a fractional precision of\n    tol.\n\n    Parameters\n    ----------\n    func : callable func(x,*args)\n        Objective function to minimize.\n    args : tuple, optional\n        Additional arguments (if present), passed to func.\n    brack : tuple, optional\n        Triple (a,b,c), where (a<b<c) and func(b) <\n        func(a),func(c).  If bracket consists of two numbers (a,\n        c), then they are assumed to be a starting interval for a\n        downhill bracket search (see `bracket`); it doesn't always\n        mean that obtained solution will satisfy a<=x<=c.\n    tol : float, optional\n        x tolerance stop criterion\n    full_output : bool, optional\n        If True, return optional outputs.\n    maxiter : int\n        Maximum number of iterations to perform.\n\n    See also\n    --------\n    minimize_scalar: Interface to minimization algorithms for scalar\n        univariate functions. See the 'Golden' `method` in particular.\n\n    Notes\n    -----\n    Uses analog of bisection method to decrease the bracketed\n    interval.\n\n    Examples\n    --------\n    We illustrate the behaviour of the function when `brack` is of\n    size 2 and 3 respectively. In the case where `brack` is of the\n    form (xa,xb), we can see for the given values, the output need\n    not necessarily lie in the range ``(xa, xb)``.\n\n    >>> def f(x):\n    ...     return x**2\n    \n    >>> from scipy import optimize\n\n    >>> minimum = optimize.golden(f, brack=(1, 2))\n    >>> minimum\n    1.5717277788484873e-162\n    >>> minimum = optimize.golden(f, brack=(-1, 0.5, 2))\n    >>> minimum\n    -1.5717277788484873e-162\n\n    ")
    
    # Assigning a Dict to a Name (line 2173):
    
    # Assigning a Dict to a Name (line 2173):
    
    # Obtaining an instance of the builtin type 'dict' (line 2173)
    dict_181921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2173, 14), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 2173)
    # Adding element type (key, value) (line 2173)
    str_181922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2173, 15), 'str', 'xtol')
    # Getting the type of 'tol' (line 2173)
    tol_181923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 23), 'tol')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2173, 14), dict_181921, (str_181922, tol_181923))
    # Adding element type (key, value) (line 2173)
    str_181924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2173, 28), 'str', 'maxiter')
    # Getting the type of 'maxiter' (line 2173)
    maxiter_181925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 39), 'maxiter')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2173, 14), dict_181921, (str_181924, maxiter_181925))
    
    # Assigning a type to the variable 'options' (line 2173)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2173, 4), 'options', dict_181921)
    
    # Assigning a Call to a Name (line 2174):
    
    # Assigning a Call to a Name (line 2174):
    
    # Call to _minimize_scalar_golden(...): (line 2174)
    # Processing the call arguments (line 2174)
    # Getting the type of 'func' (line 2174)
    func_181927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2174, 34), 'func', False)
    # Getting the type of 'brack' (line 2174)
    brack_181928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2174, 40), 'brack', False)
    # Getting the type of 'args' (line 2174)
    args_181929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2174, 47), 'args', False)
    # Processing the call keyword arguments (line 2174)
    # Getting the type of 'options' (line 2174)
    options_181930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2174, 55), 'options', False)
    kwargs_181931 = {'options_181930': options_181930}
    # Getting the type of '_minimize_scalar_golden' (line 2174)
    _minimize_scalar_golden_181926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2174, 10), '_minimize_scalar_golden', False)
    # Calling _minimize_scalar_golden(args, kwargs) (line 2174)
    _minimize_scalar_golden_call_result_181932 = invoke(stypy.reporting.localization.Localization(__file__, 2174, 10), _minimize_scalar_golden_181926, *[func_181927, brack_181928, args_181929], **kwargs_181931)
    
    # Assigning a type to the variable 'res' (line 2174)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2174, 4), 'res', _minimize_scalar_golden_call_result_181932)
    
    # Getting the type of 'full_output' (line 2175)
    full_output_181933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 7), 'full_output')
    # Testing the type of an if condition (line 2175)
    if_condition_181934 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2175, 4), full_output_181933)
    # Assigning a type to the variable 'if_condition_181934' (line 2175)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2175, 4), 'if_condition_181934', if_condition_181934)
    # SSA begins for if statement (line 2175)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2176)
    tuple_181935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2176, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2176)
    # Adding element type (line 2176)
    
    # Obtaining the type of the subscript
    str_181936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2176, 19), 'str', 'x')
    # Getting the type of 'res' (line 2176)
    res_181937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 15), 'res')
    # Obtaining the member '__getitem__' of a type (line 2176)
    getitem___181938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2176, 15), res_181937, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2176)
    subscript_call_result_181939 = invoke(stypy.reporting.localization.Localization(__file__, 2176, 15), getitem___181938, str_181936)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2176, 15), tuple_181935, subscript_call_result_181939)
    # Adding element type (line 2176)
    
    # Obtaining the type of the subscript
    str_181940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2176, 29), 'str', 'fun')
    # Getting the type of 'res' (line 2176)
    res_181941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 25), 'res')
    # Obtaining the member '__getitem__' of a type (line 2176)
    getitem___181942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2176, 25), res_181941, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2176)
    subscript_call_result_181943 = invoke(stypy.reporting.localization.Localization(__file__, 2176, 25), getitem___181942, str_181940)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2176, 15), tuple_181935, subscript_call_result_181943)
    # Adding element type (line 2176)
    
    # Obtaining the type of the subscript
    str_181944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2176, 41), 'str', 'nfev')
    # Getting the type of 'res' (line 2176)
    res_181945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 37), 'res')
    # Obtaining the member '__getitem__' of a type (line 2176)
    getitem___181946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2176, 37), res_181945, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2176)
    subscript_call_result_181947 = invoke(stypy.reporting.localization.Localization(__file__, 2176, 37), getitem___181946, str_181944)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2176, 15), tuple_181935, subscript_call_result_181947)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2176)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2176, 8), 'stypy_return_type', tuple_181935)
    # SSA branch for the else part of an if statement (line 2175)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining the type of the subscript
    str_181948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2178, 19), 'str', 'x')
    # Getting the type of 'res' (line 2178)
    res_181949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 15), 'res')
    # Obtaining the member '__getitem__' of a type (line 2178)
    getitem___181950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2178, 15), res_181949, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2178)
    subscript_call_result_181951 = invoke(stypy.reporting.localization.Localization(__file__, 2178, 15), getitem___181950, str_181948)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2178)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2178, 8), 'stypy_return_type', subscript_call_result_181951)
    # SSA join for if statement (line 2175)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'golden(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'golden' in the type store
    # Getting the type of 'stypy_return_type' (line 2114)
    stypy_return_type_181952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_181952)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'golden'
    return stypy_return_type_181952

# Assigning a type to the variable 'golden' (line 2114)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2114, 0), 'golden', golden)

@norecursion
def _minimize_scalar_golden(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2181)
    None_181953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 40), 'None')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2181)
    tuple_181954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2181, 51), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2181)
    
    # Getting the type of '_epsilon' (line 2182)
    _epsilon_181955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 33), '_epsilon')
    int_181956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2182, 51), 'int')
    defaults = [None_181953, tuple_181954, _epsilon_181955, int_181956]
    # Create a new context for function '_minimize_scalar_golden'
    module_type_store = module_type_store.open_function_context('_minimize_scalar_golden', 2181, 0, False)
    
    # Passed parameters checking function
    _minimize_scalar_golden.stypy_localization = localization
    _minimize_scalar_golden.stypy_type_of_self = None
    _minimize_scalar_golden.stypy_type_store = module_type_store
    _minimize_scalar_golden.stypy_function_name = '_minimize_scalar_golden'
    _minimize_scalar_golden.stypy_param_names_list = ['func', 'brack', 'args', 'xtol', 'maxiter']
    _minimize_scalar_golden.stypy_varargs_param_name = None
    _minimize_scalar_golden.stypy_kwargs_param_name = 'unknown_options'
    _minimize_scalar_golden.stypy_call_defaults = defaults
    _minimize_scalar_golden.stypy_call_varargs = varargs
    _minimize_scalar_golden.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_minimize_scalar_golden', ['func', 'brack', 'args', 'xtol', 'maxiter'], None, 'unknown_options', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_minimize_scalar_golden', localization, ['func', 'brack', 'args', 'xtol', 'maxiter'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_minimize_scalar_golden(...)' code ##################

    str_181957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2191, (-1)), 'str', '\n    Options\n    -------\n    maxiter : int\n        Maximum number of iterations to perform.\n    xtol : float\n        Relative error in solution `xopt` acceptable for convergence.\n\n    ')
    
    # Call to _check_unknown_options(...): (line 2192)
    # Processing the call arguments (line 2192)
    # Getting the type of 'unknown_options' (line 2192)
    unknown_options_181959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 27), 'unknown_options', False)
    # Processing the call keyword arguments (line 2192)
    kwargs_181960 = {}
    # Getting the type of '_check_unknown_options' (line 2192)
    _check_unknown_options_181958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 4), '_check_unknown_options', False)
    # Calling _check_unknown_options(args, kwargs) (line 2192)
    _check_unknown_options_call_result_181961 = invoke(stypy.reporting.localization.Localization(__file__, 2192, 4), _check_unknown_options_181958, *[unknown_options_181959], **kwargs_181960)
    
    
    # Assigning a Name to a Name (line 2193):
    
    # Assigning a Name to a Name (line 2193):
    # Getting the type of 'xtol' (line 2193)
    xtol_181962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2193, 10), 'xtol')
    # Assigning a type to the variable 'tol' (line 2193)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2193, 4), 'tol', xtol_181962)
    
    # Type idiom detected: calculating its left and rigth part (line 2194)
    # Getting the type of 'brack' (line 2194)
    brack_181963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 7), 'brack')
    # Getting the type of 'None' (line 2194)
    None_181964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 16), 'None')
    
    (may_be_181965, more_types_in_union_181966) = may_be_none(brack_181963, None_181964)

    if may_be_181965:

        if more_types_in_union_181966:
            # Runtime conditional SSA (line 2194)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Tuple (line 2195):
        
        # Assigning a Subscript to a Name (line 2195):
        
        # Obtaining the type of the subscript
        int_181967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2195, 8), 'int')
        
        # Call to bracket(...): (line 2195)
        # Processing the call arguments (line 2195)
        # Getting the type of 'func' (line 2195)
        func_181969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 51), 'func', False)
        # Processing the call keyword arguments (line 2195)
        # Getting the type of 'args' (line 2195)
        args_181970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 62), 'args', False)
        keyword_181971 = args_181970
        kwargs_181972 = {'args': keyword_181971}
        # Getting the type of 'bracket' (line 2195)
        bracket_181968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 43), 'bracket', False)
        # Calling bracket(args, kwargs) (line 2195)
        bracket_call_result_181973 = invoke(stypy.reporting.localization.Localization(__file__, 2195, 43), bracket_181968, *[func_181969], **kwargs_181972)
        
        # Obtaining the member '__getitem__' of a type (line 2195)
        getitem___181974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2195, 8), bracket_call_result_181973, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2195)
        subscript_call_result_181975 = invoke(stypy.reporting.localization.Localization(__file__, 2195, 8), getitem___181974, int_181967)
        
        # Assigning a type to the variable 'tuple_var_assignment_176713' (line 2195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2195, 8), 'tuple_var_assignment_176713', subscript_call_result_181975)
        
        # Assigning a Subscript to a Name (line 2195):
        
        # Obtaining the type of the subscript
        int_181976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2195, 8), 'int')
        
        # Call to bracket(...): (line 2195)
        # Processing the call arguments (line 2195)
        # Getting the type of 'func' (line 2195)
        func_181978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 51), 'func', False)
        # Processing the call keyword arguments (line 2195)
        # Getting the type of 'args' (line 2195)
        args_181979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 62), 'args', False)
        keyword_181980 = args_181979
        kwargs_181981 = {'args': keyword_181980}
        # Getting the type of 'bracket' (line 2195)
        bracket_181977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 43), 'bracket', False)
        # Calling bracket(args, kwargs) (line 2195)
        bracket_call_result_181982 = invoke(stypy.reporting.localization.Localization(__file__, 2195, 43), bracket_181977, *[func_181978], **kwargs_181981)
        
        # Obtaining the member '__getitem__' of a type (line 2195)
        getitem___181983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2195, 8), bracket_call_result_181982, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2195)
        subscript_call_result_181984 = invoke(stypy.reporting.localization.Localization(__file__, 2195, 8), getitem___181983, int_181976)
        
        # Assigning a type to the variable 'tuple_var_assignment_176714' (line 2195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2195, 8), 'tuple_var_assignment_176714', subscript_call_result_181984)
        
        # Assigning a Subscript to a Name (line 2195):
        
        # Obtaining the type of the subscript
        int_181985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2195, 8), 'int')
        
        # Call to bracket(...): (line 2195)
        # Processing the call arguments (line 2195)
        # Getting the type of 'func' (line 2195)
        func_181987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 51), 'func', False)
        # Processing the call keyword arguments (line 2195)
        # Getting the type of 'args' (line 2195)
        args_181988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 62), 'args', False)
        keyword_181989 = args_181988
        kwargs_181990 = {'args': keyword_181989}
        # Getting the type of 'bracket' (line 2195)
        bracket_181986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 43), 'bracket', False)
        # Calling bracket(args, kwargs) (line 2195)
        bracket_call_result_181991 = invoke(stypy.reporting.localization.Localization(__file__, 2195, 43), bracket_181986, *[func_181987], **kwargs_181990)
        
        # Obtaining the member '__getitem__' of a type (line 2195)
        getitem___181992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2195, 8), bracket_call_result_181991, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2195)
        subscript_call_result_181993 = invoke(stypy.reporting.localization.Localization(__file__, 2195, 8), getitem___181992, int_181985)
        
        # Assigning a type to the variable 'tuple_var_assignment_176715' (line 2195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2195, 8), 'tuple_var_assignment_176715', subscript_call_result_181993)
        
        # Assigning a Subscript to a Name (line 2195):
        
        # Obtaining the type of the subscript
        int_181994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2195, 8), 'int')
        
        # Call to bracket(...): (line 2195)
        # Processing the call arguments (line 2195)
        # Getting the type of 'func' (line 2195)
        func_181996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 51), 'func', False)
        # Processing the call keyword arguments (line 2195)
        # Getting the type of 'args' (line 2195)
        args_181997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 62), 'args', False)
        keyword_181998 = args_181997
        kwargs_181999 = {'args': keyword_181998}
        # Getting the type of 'bracket' (line 2195)
        bracket_181995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 43), 'bracket', False)
        # Calling bracket(args, kwargs) (line 2195)
        bracket_call_result_182000 = invoke(stypy.reporting.localization.Localization(__file__, 2195, 43), bracket_181995, *[func_181996], **kwargs_181999)
        
        # Obtaining the member '__getitem__' of a type (line 2195)
        getitem___182001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2195, 8), bracket_call_result_182000, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2195)
        subscript_call_result_182002 = invoke(stypy.reporting.localization.Localization(__file__, 2195, 8), getitem___182001, int_181994)
        
        # Assigning a type to the variable 'tuple_var_assignment_176716' (line 2195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2195, 8), 'tuple_var_assignment_176716', subscript_call_result_182002)
        
        # Assigning a Subscript to a Name (line 2195):
        
        # Obtaining the type of the subscript
        int_182003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2195, 8), 'int')
        
        # Call to bracket(...): (line 2195)
        # Processing the call arguments (line 2195)
        # Getting the type of 'func' (line 2195)
        func_182005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 51), 'func', False)
        # Processing the call keyword arguments (line 2195)
        # Getting the type of 'args' (line 2195)
        args_182006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 62), 'args', False)
        keyword_182007 = args_182006
        kwargs_182008 = {'args': keyword_182007}
        # Getting the type of 'bracket' (line 2195)
        bracket_182004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 43), 'bracket', False)
        # Calling bracket(args, kwargs) (line 2195)
        bracket_call_result_182009 = invoke(stypy.reporting.localization.Localization(__file__, 2195, 43), bracket_182004, *[func_182005], **kwargs_182008)
        
        # Obtaining the member '__getitem__' of a type (line 2195)
        getitem___182010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2195, 8), bracket_call_result_182009, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2195)
        subscript_call_result_182011 = invoke(stypy.reporting.localization.Localization(__file__, 2195, 8), getitem___182010, int_182003)
        
        # Assigning a type to the variable 'tuple_var_assignment_176717' (line 2195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2195, 8), 'tuple_var_assignment_176717', subscript_call_result_182011)
        
        # Assigning a Subscript to a Name (line 2195):
        
        # Obtaining the type of the subscript
        int_182012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2195, 8), 'int')
        
        # Call to bracket(...): (line 2195)
        # Processing the call arguments (line 2195)
        # Getting the type of 'func' (line 2195)
        func_182014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 51), 'func', False)
        # Processing the call keyword arguments (line 2195)
        # Getting the type of 'args' (line 2195)
        args_182015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 62), 'args', False)
        keyword_182016 = args_182015
        kwargs_182017 = {'args': keyword_182016}
        # Getting the type of 'bracket' (line 2195)
        bracket_182013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 43), 'bracket', False)
        # Calling bracket(args, kwargs) (line 2195)
        bracket_call_result_182018 = invoke(stypy.reporting.localization.Localization(__file__, 2195, 43), bracket_182013, *[func_182014], **kwargs_182017)
        
        # Obtaining the member '__getitem__' of a type (line 2195)
        getitem___182019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2195, 8), bracket_call_result_182018, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2195)
        subscript_call_result_182020 = invoke(stypy.reporting.localization.Localization(__file__, 2195, 8), getitem___182019, int_182012)
        
        # Assigning a type to the variable 'tuple_var_assignment_176718' (line 2195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2195, 8), 'tuple_var_assignment_176718', subscript_call_result_182020)
        
        # Assigning a Subscript to a Name (line 2195):
        
        # Obtaining the type of the subscript
        int_182021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2195, 8), 'int')
        
        # Call to bracket(...): (line 2195)
        # Processing the call arguments (line 2195)
        # Getting the type of 'func' (line 2195)
        func_182023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 51), 'func', False)
        # Processing the call keyword arguments (line 2195)
        # Getting the type of 'args' (line 2195)
        args_182024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 62), 'args', False)
        keyword_182025 = args_182024
        kwargs_182026 = {'args': keyword_182025}
        # Getting the type of 'bracket' (line 2195)
        bracket_182022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 43), 'bracket', False)
        # Calling bracket(args, kwargs) (line 2195)
        bracket_call_result_182027 = invoke(stypy.reporting.localization.Localization(__file__, 2195, 43), bracket_182022, *[func_182023], **kwargs_182026)
        
        # Obtaining the member '__getitem__' of a type (line 2195)
        getitem___182028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2195, 8), bracket_call_result_182027, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2195)
        subscript_call_result_182029 = invoke(stypy.reporting.localization.Localization(__file__, 2195, 8), getitem___182028, int_182021)
        
        # Assigning a type to the variable 'tuple_var_assignment_176719' (line 2195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2195, 8), 'tuple_var_assignment_176719', subscript_call_result_182029)
        
        # Assigning a Name to a Name (line 2195):
        # Getting the type of 'tuple_var_assignment_176713' (line 2195)
        tuple_var_assignment_176713_182030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 8), 'tuple_var_assignment_176713')
        # Assigning a type to the variable 'xa' (line 2195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2195, 8), 'xa', tuple_var_assignment_176713_182030)
        
        # Assigning a Name to a Name (line 2195):
        # Getting the type of 'tuple_var_assignment_176714' (line 2195)
        tuple_var_assignment_176714_182031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 8), 'tuple_var_assignment_176714')
        # Assigning a type to the variable 'xb' (line 2195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2195, 12), 'xb', tuple_var_assignment_176714_182031)
        
        # Assigning a Name to a Name (line 2195):
        # Getting the type of 'tuple_var_assignment_176715' (line 2195)
        tuple_var_assignment_176715_182032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 8), 'tuple_var_assignment_176715')
        # Assigning a type to the variable 'xc' (line 2195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2195, 16), 'xc', tuple_var_assignment_176715_182032)
        
        # Assigning a Name to a Name (line 2195):
        # Getting the type of 'tuple_var_assignment_176716' (line 2195)
        tuple_var_assignment_176716_182033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 8), 'tuple_var_assignment_176716')
        # Assigning a type to the variable 'fa' (line 2195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2195, 20), 'fa', tuple_var_assignment_176716_182033)
        
        # Assigning a Name to a Name (line 2195):
        # Getting the type of 'tuple_var_assignment_176717' (line 2195)
        tuple_var_assignment_176717_182034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 8), 'tuple_var_assignment_176717')
        # Assigning a type to the variable 'fb' (line 2195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2195, 24), 'fb', tuple_var_assignment_176717_182034)
        
        # Assigning a Name to a Name (line 2195):
        # Getting the type of 'tuple_var_assignment_176718' (line 2195)
        tuple_var_assignment_176718_182035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 8), 'tuple_var_assignment_176718')
        # Assigning a type to the variable 'fc' (line 2195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2195, 28), 'fc', tuple_var_assignment_176718_182035)
        
        # Assigning a Name to a Name (line 2195):
        # Getting the type of 'tuple_var_assignment_176719' (line 2195)
        tuple_var_assignment_176719_182036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 8), 'tuple_var_assignment_176719')
        # Assigning a type to the variable 'funcalls' (line 2195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2195, 32), 'funcalls', tuple_var_assignment_176719_182036)

        if more_types_in_union_181966:
            # Runtime conditional SSA for else branch (line 2194)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_181965) or more_types_in_union_181966):
        
        
        
        # Call to len(...): (line 2196)
        # Processing the call arguments (line 2196)
        # Getting the type of 'brack' (line 2196)
        brack_182038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2196, 13), 'brack', False)
        # Processing the call keyword arguments (line 2196)
        kwargs_182039 = {}
        # Getting the type of 'len' (line 2196)
        len_182037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2196, 9), 'len', False)
        # Calling len(args, kwargs) (line 2196)
        len_call_result_182040 = invoke(stypy.reporting.localization.Localization(__file__, 2196, 9), len_182037, *[brack_182038], **kwargs_182039)
        
        int_182041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2196, 23), 'int')
        # Applying the binary operator '==' (line 2196)
        result_eq_182042 = python_operator(stypy.reporting.localization.Localization(__file__, 2196, 9), '==', len_call_result_182040, int_182041)
        
        # Testing the type of an if condition (line 2196)
        if_condition_182043 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2196, 9), result_eq_182042)
        # Assigning a type to the variable 'if_condition_182043' (line 2196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2196, 9), 'if_condition_182043', if_condition_182043)
        # SSA begins for if statement (line 2196)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 2197):
        
        # Assigning a Subscript to a Name (line 2197):
        
        # Obtaining the type of the subscript
        int_182044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 8), 'int')
        
        # Call to bracket(...): (line 2197)
        # Processing the call arguments (line 2197)
        # Getting the type of 'func' (line 2197)
        func_182046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 51), 'func', False)
        # Processing the call keyword arguments (line 2197)
        
        # Obtaining the type of the subscript
        int_182047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 66), 'int')
        # Getting the type of 'brack' (line 2197)
        brack_182048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 60), 'brack', False)
        # Obtaining the member '__getitem__' of a type (line 2197)
        getitem___182049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2197, 60), brack_182048, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2197)
        subscript_call_result_182050 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 60), getitem___182049, int_182047)
        
        keyword_182051 = subscript_call_result_182050
        
        # Obtaining the type of the subscript
        int_182052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2198, 60), 'int')
        # Getting the type of 'brack' (line 2198)
        brack_182053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 54), 'brack', False)
        # Obtaining the member '__getitem__' of a type (line 2198)
        getitem___182054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2198, 54), brack_182053, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2198)
        subscript_call_result_182055 = invoke(stypy.reporting.localization.Localization(__file__, 2198, 54), getitem___182054, int_182052)
        
        keyword_182056 = subscript_call_result_182055
        # Getting the type of 'args' (line 2198)
        args_182057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 69), 'args', False)
        keyword_182058 = args_182057
        kwargs_182059 = {'xb': keyword_182056, 'xa': keyword_182051, 'args': keyword_182058}
        # Getting the type of 'bracket' (line 2197)
        bracket_182045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 43), 'bracket', False)
        # Calling bracket(args, kwargs) (line 2197)
        bracket_call_result_182060 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 43), bracket_182045, *[func_182046], **kwargs_182059)
        
        # Obtaining the member '__getitem__' of a type (line 2197)
        getitem___182061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2197, 8), bracket_call_result_182060, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2197)
        subscript_call_result_182062 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 8), getitem___182061, int_182044)
        
        # Assigning a type to the variable 'tuple_var_assignment_176720' (line 2197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2197, 8), 'tuple_var_assignment_176720', subscript_call_result_182062)
        
        # Assigning a Subscript to a Name (line 2197):
        
        # Obtaining the type of the subscript
        int_182063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 8), 'int')
        
        # Call to bracket(...): (line 2197)
        # Processing the call arguments (line 2197)
        # Getting the type of 'func' (line 2197)
        func_182065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 51), 'func', False)
        # Processing the call keyword arguments (line 2197)
        
        # Obtaining the type of the subscript
        int_182066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 66), 'int')
        # Getting the type of 'brack' (line 2197)
        brack_182067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 60), 'brack', False)
        # Obtaining the member '__getitem__' of a type (line 2197)
        getitem___182068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2197, 60), brack_182067, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2197)
        subscript_call_result_182069 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 60), getitem___182068, int_182066)
        
        keyword_182070 = subscript_call_result_182069
        
        # Obtaining the type of the subscript
        int_182071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2198, 60), 'int')
        # Getting the type of 'brack' (line 2198)
        brack_182072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 54), 'brack', False)
        # Obtaining the member '__getitem__' of a type (line 2198)
        getitem___182073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2198, 54), brack_182072, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2198)
        subscript_call_result_182074 = invoke(stypy.reporting.localization.Localization(__file__, 2198, 54), getitem___182073, int_182071)
        
        keyword_182075 = subscript_call_result_182074
        # Getting the type of 'args' (line 2198)
        args_182076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 69), 'args', False)
        keyword_182077 = args_182076
        kwargs_182078 = {'xb': keyword_182075, 'xa': keyword_182070, 'args': keyword_182077}
        # Getting the type of 'bracket' (line 2197)
        bracket_182064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 43), 'bracket', False)
        # Calling bracket(args, kwargs) (line 2197)
        bracket_call_result_182079 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 43), bracket_182064, *[func_182065], **kwargs_182078)
        
        # Obtaining the member '__getitem__' of a type (line 2197)
        getitem___182080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2197, 8), bracket_call_result_182079, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2197)
        subscript_call_result_182081 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 8), getitem___182080, int_182063)
        
        # Assigning a type to the variable 'tuple_var_assignment_176721' (line 2197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2197, 8), 'tuple_var_assignment_176721', subscript_call_result_182081)
        
        # Assigning a Subscript to a Name (line 2197):
        
        # Obtaining the type of the subscript
        int_182082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 8), 'int')
        
        # Call to bracket(...): (line 2197)
        # Processing the call arguments (line 2197)
        # Getting the type of 'func' (line 2197)
        func_182084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 51), 'func', False)
        # Processing the call keyword arguments (line 2197)
        
        # Obtaining the type of the subscript
        int_182085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 66), 'int')
        # Getting the type of 'brack' (line 2197)
        brack_182086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 60), 'brack', False)
        # Obtaining the member '__getitem__' of a type (line 2197)
        getitem___182087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2197, 60), brack_182086, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2197)
        subscript_call_result_182088 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 60), getitem___182087, int_182085)
        
        keyword_182089 = subscript_call_result_182088
        
        # Obtaining the type of the subscript
        int_182090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2198, 60), 'int')
        # Getting the type of 'brack' (line 2198)
        brack_182091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 54), 'brack', False)
        # Obtaining the member '__getitem__' of a type (line 2198)
        getitem___182092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2198, 54), brack_182091, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2198)
        subscript_call_result_182093 = invoke(stypy.reporting.localization.Localization(__file__, 2198, 54), getitem___182092, int_182090)
        
        keyword_182094 = subscript_call_result_182093
        # Getting the type of 'args' (line 2198)
        args_182095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 69), 'args', False)
        keyword_182096 = args_182095
        kwargs_182097 = {'xb': keyword_182094, 'xa': keyword_182089, 'args': keyword_182096}
        # Getting the type of 'bracket' (line 2197)
        bracket_182083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 43), 'bracket', False)
        # Calling bracket(args, kwargs) (line 2197)
        bracket_call_result_182098 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 43), bracket_182083, *[func_182084], **kwargs_182097)
        
        # Obtaining the member '__getitem__' of a type (line 2197)
        getitem___182099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2197, 8), bracket_call_result_182098, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2197)
        subscript_call_result_182100 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 8), getitem___182099, int_182082)
        
        # Assigning a type to the variable 'tuple_var_assignment_176722' (line 2197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2197, 8), 'tuple_var_assignment_176722', subscript_call_result_182100)
        
        # Assigning a Subscript to a Name (line 2197):
        
        # Obtaining the type of the subscript
        int_182101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 8), 'int')
        
        # Call to bracket(...): (line 2197)
        # Processing the call arguments (line 2197)
        # Getting the type of 'func' (line 2197)
        func_182103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 51), 'func', False)
        # Processing the call keyword arguments (line 2197)
        
        # Obtaining the type of the subscript
        int_182104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 66), 'int')
        # Getting the type of 'brack' (line 2197)
        brack_182105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 60), 'brack', False)
        # Obtaining the member '__getitem__' of a type (line 2197)
        getitem___182106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2197, 60), brack_182105, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2197)
        subscript_call_result_182107 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 60), getitem___182106, int_182104)
        
        keyword_182108 = subscript_call_result_182107
        
        # Obtaining the type of the subscript
        int_182109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2198, 60), 'int')
        # Getting the type of 'brack' (line 2198)
        brack_182110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 54), 'brack', False)
        # Obtaining the member '__getitem__' of a type (line 2198)
        getitem___182111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2198, 54), brack_182110, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2198)
        subscript_call_result_182112 = invoke(stypy.reporting.localization.Localization(__file__, 2198, 54), getitem___182111, int_182109)
        
        keyword_182113 = subscript_call_result_182112
        # Getting the type of 'args' (line 2198)
        args_182114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 69), 'args', False)
        keyword_182115 = args_182114
        kwargs_182116 = {'xb': keyword_182113, 'xa': keyword_182108, 'args': keyword_182115}
        # Getting the type of 'bracket' (line 2197)
        bracket_182102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 43), 'bracket', False)
        # Calling bracket(args, kwargs) (line 2197)
        bracket_call_result_182117 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 43), bracket_182102, *[func_182103], **kwargs_182116)
        
        # Obtaining the member '__getitem__' of a type (line 2197)
        getitem___182118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2197, 8), bracket_call_result_182117, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2197)
        subscript_call_result_182119 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 8), getitem___182118, int_182101)
        
        # Assigning a type to the variable 'tuple_var_assignment_176723' (line 2197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2197, 8), 'tuple_var_assignment_176723', subscript_call_result_182119)
        
        # Assigning a Subscript to a Name (line 2197):
        
        # Obtaining the type of the subscript
        int_182120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 8), 'int')
        
        # Call to bracket(...): (line 2197)
        # Processing the call arguments (line 2197)
        # Getting the type of 'func' (line 2197)
        func_182122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 51), 'func', False)
        # Processing the call keyword arguments (line 2197)
        
        # Obtaining the type of the subscript
        int_182123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 66), 'int')
        # Getting the type of 'brack' (line 2197)
        brack_182124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 60), 'brack', False)
        # Obtaining the member '__getitem__' of a type (line 2197)
        getitem___182125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2197, 60), brack_182124, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2197)
        subscript_call_result_182126 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 60), getitem___182125, int_182123)
        
        keyword_182127 = subscript_call_result_182126
        
        # Obtaining the type of the subscript
        int_182128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2198, 60), 'int')
        # Getting the type of 'brack' (line 2198)
        brack_182129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 54), 'brack', False)
        # Obtaining the member '__getitem__' of a type (line 2198)
        getitem___182130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2198, 54), brack_182129, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2198)
        subscript_call_result_182131 = invoke(stypy.reporting.localization.Localization(__file__, 2198, 54), getitem___182130, int_182128)
        
        keyword_182132 = subscript_call_result_182131
        # Getting the type of 'args' (line 2198)
        args_182133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 69), 'args', False)
        keyword_182134 = args_182133
        kwargs_182135 = {'xb': keyword_182132, 'xa': keyword_182127, 'args': keyword_182134}
        # Getting the type of 'bracket' (line 2197)
        bracket_182121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 43), 'bracket', False)
        # Calling bracket(args, kwargs) (line 2197)
        bracket_call_result_182136 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 43), bracket_182121, *[func_182122], **kwargs_182135)
        
        # Obtaining the member '__getitem__' of a type (line 2197)
        getitem___182137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2197, 8), bracket_call_result_182136, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2197)
        subscript_call_result_182138 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 8), getitem___182137, int_182120)
        
        # Assigning a type to the variable 'tuple_var_assignment_176724' (line 2197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2197, 8), 'tuple_var_assignment_176724', subscript_call_result_182138)
        
        # Assigning a Subscript to a Name (line 2197):
        
        # Obtaining the type of the subscript
        int_182139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 8), 'int')
        
        # Call to bracket(...): (line 2197)
        # Processing the call arguments (line 2197)
        # Getting the type of 'func' (line 2197)
        func_182141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 51), 'func', False)
        # Processing the call keyword arguments (line 2197)
        
        # Obtaining the type of the subscript
        int_182142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 66), 'int')
        # Getting the type of 'brack' (line 2197)
        brack_182143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 60), 'brack', False)
        # Obtaining the member '__getitem__' of a type (line 2197)
        getitem___182144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2197, 60), brack_182143, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2197)
        subscript_call_result_182145 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 60), getitem___182144, int_182142)
        
        keyword_182146 = subscript_call_result_182145
        
        # Obtaining the type of the subscript
        int_182147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2198, 60), 'int')
        # Getting the type of 'brack' (line 2198)
        brack_182148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 54), 'brack', False)
        # Obtaining the member '__getitem__' of a type (line 2198)
        getitem___182149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2198, 54), brack_182148, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2198)
        subscript_call_result_182150 = invoke(stypy.reporting.localization.Localization(__file__, 2198, 54), getitem___182149, int_182147)
        
        keyword_182151 = subscript_call_result_182150
        # Getting the type of 'args' (line 2198)
        args_182152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 69), 'args', False)
        keyword_182153 = args_182152
        kwargs_182154 = {'xb': keyword_182151, 'xa': keyword_182146, 'args': keyword_182153}
        # Getting the type of 'bracket' (line 2197)
        bracket_182140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 43), 'bracket', False)
        # Calling bracket(args, kwargs) (line 2197)
        bracket_call_result_182155 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 43), bracket_182140, *[func_182141], **kwargs_182154)
        
        # Obtaining the member '__getitem__' of a type (line 2197)
        getitem___182156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2197, 8), bracket_call_result_182155, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2197)
        subscript_call_result_182157 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 8), getitem___182156, int_182139)
        
        # Assigning a type to the variable 'tuple_var_assignment_176725' (line 2197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2197, 8), 'tuple_var_assignment_176725', subscript_call_result_182157)
        
        # Assigning a Subscript to a Name (line 2197):
        
        # Obtaining the type of the subscript
        int_182158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 8), 'int')
        
        # Call to bracket(...): (line 2197)
        # Processing the call arguments (line 2197)
        # Getting the type of 'func' (line 2197)
        func_182160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 51), 'func', False)
        # Processing the call keyword arguments (line 2197)
        
        # Obtaining the type of the subscript
        int_182161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 66), 'int')
        # Getting the type of 'brack' (line 2197)
        brack_182162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 60), 'brack', False)
        # Obtaining the member '__getitem__' of a type (line 2197)
        getitem___182163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2197, 60), brack_182162, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2197)
        subscript_call_result_182164 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 60), getitem___182163, int_182161)
        
        keyword_182165 = subscript_call_result_182164
        
        # Obtaining the type of the subscript
        int_182166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2198, 60), 'int')
        # Getting the type of 'brack' (line 2198)
        brack_182167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 54), 'brack', False)
        # Obtaining the member '__getitem__' of a type (line 2198)
        getitem___182168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2198, 54), brack_182167, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2198)
        subscript_call_result_182169 = invoke(stypy.reporting.localization.Localization(__file__, 2198, 54), getitem___182168, int_182166)
        
        keyword_182170 = subscript_call_result_182169
        # Getting the type of 'args' (line 2198)
        args_182171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 69), 'args', False)
        keyword_182172 = args_182171
        kwargs_182173 = {'xb': keyword_182170, 'xa': keyword_182165, 'args': keyword_182172}
        # Getting the type of 'bracket' (line 2197)
        bracket_182159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 43), 'bracket', False)
        # Calling bracket(args, kwargs) (line 2197)
        bracket_call_result_182174 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 43), bracket_182159, *[func_182160], **kwargs_182173)
        
        # Obtaining the member '__getitem__' of a type (line 2197)
        getitem___182175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2197, 8), bracket_call_result_182174, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2197)
        subscript_call_result_182176 = invoke(stypy.reporting.localization.Localization(__file__, 2197, 8), getitem___182175, int_182158)
        
        # Assigning a type to the variable 'tuple_var_assignment_176726' (line 2197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2197, 8), 'tuple_var_assignment_176726', subscript_call_result_182176)
        
        # Assigning a Name to a Name (line 2197):
        # Getting the type of 'tuple_var_assignment_176720' (line 2197)
        tuple_var_assignment_176720_182177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 8), 'tuple_var_assignment_176720')
        # Assigning a type to the variable 'xa' (line 2197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2197, 8), 'xa', tuple_var_assignment_176720_182177)
        
        # Assigning a Name to a Name (line 2197):
        # Getting the type of 'tuple_var_assignment_176721' (line 2197)
        tuple_var_assignment_176721_182178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 8), 'tuple_var_assignment_176721')
        # Assigning a type to the variable 'xb' (line 2197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2197, 12), 'xb', tuple_var_assignment_176721_182178)
        
        # Assigning a Name to a Name (line 2197):
        # Getting the type of 'tuple_var_assignment_176722' (line 2197)
        tuple_var_assignment_176722_182179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 8), 'tuple_var_assignment_176722')
        # Assigning a type to the variable 'xc' (line 2197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2197, 16), 'xc', tuple_var_assignment_176722_182179)
        
        # Assigning a Name to a Name (line 2197):
        # Getting the type of 'tuple_var_assignment_176723' (line 2197)
        tuple_var_assignment_176723_182180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 8), 'tuple_var_assignment_176723')
        # Assigning a type to the variable 'fa' (line 2197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2197, 20), 'fa', tuple_var_assignment_176723_182180)
        
        # Assigning a Name to a Name (line 2197):
        # Getting the type of 'tuple_var_assignment_176724' (line 2197)
        tuple_var_assignment_176724_182181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 8), 'tuple_var_assignment_176724')
        # Assigning a type to the variable 'fb' (line 2197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2197, 24), 'fb', tuple_var_assignment_176724_182181)
        
        # Assigning a Name to a Name (line 2197):
        # Getting the type of 'tuple_var_assignment_176725' (line 2197)
        tuple_var_assignment_176725_182182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 8), 'tuple_var_assignment_176725')
        # Assigning a type to the variable 'fc' (line 2197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2197, 28), 'fc', tuple_var_assignment_176725_182182)
        
        # Assigning a Name to a Name (line 2197):
        # Getting the type of 'tuple_var_assignment_176726' (line 2197)
        tuple_var_assignment_176726_182183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 8), 'tuple_var_assignment_176726')
        # Assigning a type to the variable 'funcalls' (line 2197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2197, 32), 'funcalls', tuple_var_assignment_176726_182183)
        # SSA branch for the else part of an if statement (line 2196)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to len(...): (line 2199)
        # Processing the call arguments (line 2199)
        # Getting the type of 'brack' (line 2199)
        brack_182185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2199, 13), 'brack', False)
        # Processing the call keyword arguments (line 2199)
        kwargs_182186 = {}
        # Getting the type of 'len' (line 2199)
        len_182184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2199, 9), 'len', False)
        # Calling len(args, kwargs) (line 2199)
        len_call_result_182187 = invoke(stypy.reporting.localization.Localization(__file__, 2199, 9), len_182184, *[brack_182185], **kwargs_182186)
        
        int_182188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2199, 23), 'int')
        # Applying the binary operator '==' (line 2199)
        result_eq_182189 = python_operator(stypy.reporting.localization.Localization(__file__, 2199, 9), '==', len_call_result_182187, int_182188)
        
        # Testing the type of an if condition (line 2199)
        if_condition_182190 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2199, 9), result_eq_182189)
        # Assigning a type to the variable 'if_condition_182190' (line 2199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2199, 9), 'if_condition_182190', if_condition_182190)
        # SSA begins for if statement (line 2199)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 2200):
        
        # Assigning a Subscript to a Name (line 2200):
        
        # Obtaining the type of the subscript
        int_182191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2200, 8), 'int')
        # Getting the type of 'brack' (line 2200)
        brack_182192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 21), 'brack')
        # Obtaining the member '__getitem__' of a type (line 2200)
        getitem___182193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2200, 8), brack_182192, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2200)
        subscript_call_result_182194 = invoke(stypy.reporting.localization.Localization(__file__, 2200, 8), getitem___182193, int_182191)
        
        # Assigning a type to the variable 'tuple_var_assignment_176727' (line 2200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2200, 8), 'tuple_var_assignment_176727', subscript_call_result_182194)
        
        # Assigning a Subscript to a Name (line 2200):
        
        # Obtaining the type of the subscript
        int_182195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2200, 8), 'int')
        # Getting the type of 'brack' (line 2200)
        brack_182196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 21), 'brack')
        # Obtaining the member '__getitem__' of a type (line 2200)
        getitem___182197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2200, 8), brack_182196, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2200)
        subscript_call_result_182198 = invoke(stypy.reporting.localization.Localization(__file__, 2200, 8), getitem___182197, int_182195)
        
        # Assigning a type to the variable 'tuple_var_assignment_176728' (line 2200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2200, 8), 'tuple_var_assignment_176728', subscript_call_result_182198)
        
        # Assigning a Subscript to a Name (line 2200):
        
        # Obtaining the type of the subscript
        int_182199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2200, 8), 'int')
        # Getting the type of 'brack' (line 2200)
        brack_182200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 21), 'brack')
        # Obtaining the member '__getitem__' of a type (line 2200)
        getitem___182201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2200, 8), brack_182200, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2200)
        subscript_call_result_182202 = invoke(stypy.reporting.localization.Localization(__file__, 2200, 8), getitem___182201, int_182199)
        
        # Assigning a type to the variable 'tuple_var_assignment_176729' (line 2200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2200, 8), 'tuple_var_assignment_176729', subscript_call_result_182202)
        
        # Assigning a Name to a Name (line 2200):
        # Getting the type of 'tuple_var_assignment_176727' (line 2200)
        tuple_var_assignment_176727_182203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 8), 'tuple_var_assignment_176727')
        # Assigning a type to the variable 'xa' (line 2200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2200, 8), 'xa', tuple_var_assignment_176727_182203)
        
        # Assigning a Name to a Name (line 2200):
        # Getting the type of 'tuple_var_assignment_176728' (line 2200)
        tuple_var_assignment_176728_182204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 8), 'tuple_var_assignment_176728')
        # Assigning a type to the variable 'xb' (line 2200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2200, 12), 'xb', tuple_var_assignment_176728_182204)
        
        # Assigning a Name to a Name (line 2200):
        # Getting the type of 'tuple_var_assignment_176729' (line 2200)
        tuple_var_assignment_176729_182205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 8), 'tuple_var_assignment_176729')
        # Assigning a type to the variable 'xc' (line 2200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2200, 16), 'xc', tuple_var_assignment_176729_182205)
        
        
        # Getting the type of 'xa' (line 2201)
        xa_182206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 12), 'xa')
        # Getting the type of 'xc' (line 2201)
        xc_182207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 17), 'xc')
        # Applying the binary operator '>' (line 2201)
        result_gt_182208 = python_operator(stypy.reporting.localization.Localization(__file__, 2201, 12), '>', xa_182206, xc_182207)
        
        # Testing the type of an if condition (line 2201)
        if_condition_182209 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2201, 8), result_gt_182208)
        # Assigning a type to the variable 'if_condition_182209' (line 2201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2201, 8), 'if_condition_182209', if_condition_182209)
        # SSA begins for if statement (line 2201)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 2202):
        
        # Assigning a Name to a Name (line 2202):
        # Getting the type of 'xa' (line 2202)
        xa_182210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 21), 'xa')
        # Assigning a type to the variable 'tuple_assignment_176730' (line 2202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2202, 12), 'tuple_assignment_176730', xa_182210)
        
        # Assigning a Name to a Name (line 2202):
        # Getting the type of 'xc' (line 2202)
        xc_182211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 25), 'xc')
        # Assigning a type to the variable 'tuple_assignment_176731' (line 2202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2202, 12), 'tuple_assignment_176731', xc_182211)
        
        # Assigning a Name to a Name (line 2202):
        # Getting the type of 'tuple_assignment_176730' (line 2202)
        tuple_assignment_176730_182212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 12), 'tuple_assignment_176730')
        # Assigning a type to the variable 'xc' (line 2202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2202, 12), 'xc', tuple_assignment_176730_182212)
        
        # Assigning a Name to a Name (line 2202):
        # Getting the type of 'tuple_assignment_176731' (line 2202)
        tuple_assignment_176731_182213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 12), 'tuple_assignment_176731')
        # Assigning a type to the variable 'xa' (line 2202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2202, 16), 'xa', tuple_assignment_176731_182213)
        # SSA join for if statement (line 2201)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'xa' (line 2203)
        xa_182214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2203, 17), 'xa')
        # Getting the type of 'xb' (line 2203)
        xb_182215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2203, 22), 'xb')
        # Applying the binary operator '<' (line 2203)
        result_lt_182216 = python_operator(stypy.reporting.localization.Localization(__file__, 2203, 17), '<', xa_182214, xb_182215)
        
        
        # Getting the type of 'xb' (line 2203)
        xb_182217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2203, 31), 'xb')
        # Getting the type of 'xc' (line 2203)
        xc_182218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2203, 36), 'xc')
        # Applying the binary operator '<' (line 2203)
        result_lt_182219 = python_operator(stypy.reporting.localization.Localization(__file__, 2203, 31), '<', xb_182217, xc_182218)
        
        # Applying the binary operator 'and' (line 2203)
        result_and_keyword_182220 = python_operator(stypy.reporting.localization.Localization(__file__, 2203, 16), 'and', result_lt_182216, result_lt_182219)
        
        # Applying the 'not' unary operator (line 2203)
        result_not__182221 = python_operator(stypy.reporting.localization.Localization(__file__, 2203, 11), 'not', result_and_keyword_182220)
        
        # Testing the type of an if condition (line 2203)
        if_condition_182222 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2203, 8), result_not__182221)
        # Assigning a type to the variable 'if_condition_182222' (line 2203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2203, 8), 'if_condition_182222', if_condition_182222)
        # SSA begins for if statement (line 2203)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2204)
        # Processing the call arguments (line 2204)
        str_182224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2204, 29), 'str', 'Not a bracketing interval.')
        # Processing the call keyword arguments (line 2204)
        kwargs_182225 = {}
        # Getting the type of 'ValueError' (line 2204)
        ValueError_182223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2204)
        ValueError_call_result_182226 = invoke(stypy.reporting.localization.Localization(__file__, 2204, 18), ValueError_182223, *[str_182224], **kwargs_182225)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2204, 12), ValueError_call_result_182226, 'raise parameter', BaseException)
        # SSA join for if statement (line 2203)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2205):
        
        # Assigning a Call to a Name (line 2205):
        
        # Call to func(...): (line 2205)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2205)
        tuple_182228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2205, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2205)
        # Adding element type (line 2205)
        # Getting the type of 'xa' (line 2205)
        xa_182229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 21), 'xa', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2205, 21), tuple_182228, xa_182229)
        
        # Getting the type of 'args' (line 2205)
        args_182230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 28), 'args', False)
        # Applying the binary operator '+' (line 2205)
        result_add_182231 = python_operator(stypy.reporting.localization.Localization(__file__, 2205, 20), '+', tuple_182228, args_182230)
        
        # Processing the call keyword arguments (line 2205)
        kwargs_182232 = {}
        # Getting the type of 'func' (line 2205)
        func_182227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 13), 'func', False)
        # Calling func(args, kwargs) (line 2205)
        func_call_result_182233 = invoke(stypy.reporting.localization.Localization(__file__, 2205, 13), func_182227, *[result_add_182231], **kwargs_182232)
        
        # Assigning a type to the variable 'fa' (line 2205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2205, 8), 'fa', func_call_result_182233)
        
        # Assigning a Call to a Name (line 2206):
        
        # Assigning a Call to a Name (line 2206):
        
        # Call to func(...): (line 2206)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2206)
        tuple_182235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2206, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2206)
        # Adding element type (line 2206)
        # Getting the type of 'xb' (line 2206)
        xb_182236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 21), 'xb', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2206, 21), tuple_182235, xb_182236)
        
        # Getting the type of 'args' (line 2206)
        args_182237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 28), 'args', False)
        # Applying the binary operator '+' (line 2206)
        result_add_182238 = python_operator(stypy.reporting.localization.Localization(__file__, 2206, 20), '+', tuple_182235, args_182237)
        
        # Processing the call keyword arguments (line 2206)
        kwargs_182239 = {}
        # Getting the type of 'func' (line 2206)
        func_182234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 13), 'func', False)
        # Calling func(args, kwargs) (line 2206)
        func_call_result_182240 = invoke(stypy.reporting.localization.Localization(__file__, 2206, 13), func_182234, *[result_add_182238], **kwargs_182239)
        
        # Assigning a type to the variable 'fb' (line 2206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2206, 8), 'fb', func_call_result_182240)
        
        # Assigning a Call to a Name (line 2207):
        
        # Assigning a Call to a Name (line 2207):
        
        # Call to func(...): (line 2207)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2207)
        tuple_182242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2207, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2207)
        # Adding element type (line 2207)
        # Getting the type of 'xc' (line 2207)
        xc_182243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 21), 'xc', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2207, 21), tuple_182242, xc_182243)
        
        # Getting the type of 'args' (line 2207)
        args_182244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 28), 'args', False)
        # Applying the binary operator '+' (line 2207)
        result_add_182245 = python_operator(stypy.reporting.localization.Localization(__file__, 2207, 20), '+', tuple_182242, args_182244)
        
        # Processing the call keyword arguments (line 2207)
        kwargs_182246 = {}
        # Getting the type of 'func' (line 2207)
        func_182241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 13), 'func', False)
        # Calling func(args, kwargs) (line 2207)
        func_call_result_182247 = invoke(stypy.reporting.localization.Localization(__file__, 2207, 13), func_182241, *[result_add_182245], **kwargs_182246)
        
        # Assigning a type to the variable 'fc' (line 2207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2207, 8), 'fc', func_call_result_182247)
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'fb' (line 2208)
        fb_182248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 17), 'fb')
        # Getting the type of 'fa' (line 2208)
        fa_182249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 22), 'fa')
        # Applying the binary operator '<' (line 2208)
        result_lt_182250 = python_operator(stypy.reporting.localization.Localization(__file__, 2208, 17), '<', fb_182248, fa_182249)
        
        
        # Getting the type of 'fb' (line 2208)
        fb_182251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 31), 'fb')
        # Getting the type of 'fc' (line 2208)
        fc_182252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 36), 'fc')
        # Applying the binary operator '<' (line 2208)
        result_lt_182253 = python_operator(stypy.reporting.localization.Localization(__file__, 2208, 31), '<', fb_182251, fc_182252)
        
        # Applying the binary operator 'and' (line 2208)
        result_and_keyword_182254 = python_operator(stypy.reporting.localization.Localization(__file__, 2208, 16), 'and', result_lt_182250, result_lt_182253)
        
        # Applying the 'not' unary operator (line 2208)
        result_not__182255 = python_operator(stypy.reporting.localization.Localization(__file__, 2208, 11), 'not', result_and_keyword_182254)
        
        # Testing the type of an if condition (line 2208)
        if_condition_182256 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2208, 8), result_not__182255)
        # Assigning a type to the variable 'if_condition_182256' (line 2208)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2208, 8), 'if_condition_182256', if_condition_182256)
        # SSA begins for if statement (line 2208)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2209)
        # Processing the call arguments (line 2209)
        str_182258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2209, 29), 'str', 'Not a bracketing interval.')
        # Processing the call keyword arguments (line 2209)
        kwargs_182259 = {}
        # Getting the type of 'ValueError' (line 2209)
        ValueError_182257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2209)
        ValueError_call_result_182260 = invoke(stypy.reporting.localization.Localization(__file__, 2209, 18), ValueError_182257, *[str_182258], **kwargs_182259)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2209, 12), ValueError_call_result_182260, 'raise parameter', BaseException)
        # SSA join for if statement (line 2208)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Num to a Name (line 2210):
        
        # Assigning a Num to a Name (line 2210):
        int_182261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2210, 19), 'int')
        # Assigning a type to the variable 'funcalls' (line 2210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2210, 8), 'funcalls', int_182261)
        # SSA branch for the else part of an if statement (line 2199)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 2212)
        # Processing the call arguments (line 2212)
        str_182263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2212, 25), 'str', 'Bracketing interval must be length 2 or 3 sequence.')
        # Processing the call keyword arguments (line 2212)
        kwargs_182264 = {}
        # Getting the type of 'ValueError' (line 2212)
        ValueError_182262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 14), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2212)
        ValueError_call_result_182265 = invoke(stypy.reporting.localization.Localization(__file__, 2212, 14), ValueError_182262, *[str_182263], **kwargs_182264)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2212, 8), ValueError_call_result_182265, 'raise parameter', BaseException)
        # SSA join for if statement (line 2199)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2196)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_181965 and more_types_in_union_181966):
            # SSA join for if statement (line 2194)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Num to a Name (line 2214):
    
    # Assigning a Num to a Name (line 2214):
    float_182266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2214, 10), 'float')
    # Assigning a type to the variable '_gR' (line 2214)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2214, 4), '_gR', float_182266)
    
    # Assigning a BinOp to a Name (line 2215):
    
    # Assigning a BinOp to a Name (line 2215):
    float_182267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2215, 10), 'float')
    # Getting the type of '_gR' (line 2215)
    _gR_182268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2215, 16), '_gR')
    # Applying the binary operator '-' (line 2215)
    result_sub_182269 = python_operator(stypy.reporting.localization.Localization(__file__, 2215, 10), '-', float_182267, _gR_182268)
    
    # Assigning a type to the variable '_gC' (line 2215)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2215, 4), '_gC', result_sub_182269)
    
    # Assigning a Name to a Name (line 2216):
    
    # Assigning a Name to a Name (line 2216):
    # Getting the type of 'xc' (line 2216)
    xc_182270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2216, 9), 'xc')
    # Assigning a type to the variable 'x3' (line 2216)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2216, 4), 'x3', xc_182270)
    
    # Assigning a Name to a Name (line 2217):
    
    # Assigning a Name to a Name (line 2217):
    # Getting the type of 'xa' (line 2217)
    xa_182271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 9), 'xa')
    # Assigning a type to the variable 'x0' (line 2217)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2217, 4), 'x0', xa_182271)
    
    
    
    # Call to abs(...): (line 2218)
    # Processing the call arguments (line 2218)
    # Getting the type of 'xc' (line 2218)
    xc_182274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 18), 'xc', False)
    # Getting the type of 'xb' (line 2218)
    xb_182275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 23), 'xb', False)
    # Applying the binary operator '-' (line 2218)
    result_sub_182276 = python_operator(stypy.reporting.localization.Localization(__file__, 2218, 18), '-', xc_182274, xb_182275)
    
    # Processing the call keyword arguments (line 2218)
    kwargs_182277 = {}
    # Getting the type of 'numpy' (line 2218)
    numpy_182272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 8), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 2218)
    abs_182273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2218, 8), numpy_182272, 'abs')
    # Calling abs(args, kwargs) (line 2218)
    abs_call_result_182278 = invoke(stypy.reporting.localization.Localization(__file__, 2218, 8), abs_182273, *[result_sub_182276], **kwargs_182277)
    
    
    # Call to abs(...): (line 2218)
    # Processing the call arguments (line 2218)
    # Getting the type of 'xb' (line 2218)
    xb_182281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 39), 'xb', False)
    # Getting the type of 'xa' (line 2218)
    xa_182282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 44), 'xa', False)
    # Applying the binary operator '-' (line 2218)
    result_sub_182283 = python_operator(stypy.reporting.localization.Localization(__file__, 2218, 39), '-', xb_182281, xa_182282)
    
    # Processing the call keyword arguments (line 2218)
    kwargs_182284 = {}
    # Getting the type of 'numpy' (line 2218)
    numpy_182279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 29), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 2218)
    abs_182280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2218, 29), numpy_182279, 'abs')
    # Calling abs(args, kwargs) (line 2218)
    abs_call_result_182285 = invoke(stypy.reporting.localization.Localization(__file__, 2218, 29), abs_182280, *[result_sub_182283], **kwargs_182284)
    
    # Applying the binary operator '>' (line 2218)
    result_gt_182286 = python_operator(stypy.reporting.localization.Localization(__file__, 2218, 8), '>', abs_call_result_182278, abs_call_result_182285)
    
    # Testing the type of an if condition (line 2218)
    if_condition_182287 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2218, 4), result_gt_182286)
    # Assigning a type to the variable 'if_condition_182287' (line 2218)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2218, 4), 'if_condition_182287', if_condition_182287)
    # SSA begins for if statement (line 2218)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2219):
    
    # Assigning a Name to a Name (line 2219):
    # Getting the type of 'xb' (line 2219)
    xb_182288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 13), 'xb')
    # Assigning a type to the variable 'x1' (line 2219)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2219, 8), 'x1', xb_182288)
    
    # Assigning a BinOp to a Name (line 2220):
    
    # Assigning a BinOp to a Name (line 2220):
    # Getting the type of 'xb' (line 2220)
    xb_182289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 13), 'xb')
    # Getting the type of '_gC' (line 2220)
    _gC_182290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 18), '_gC')
    # Getting the type of 'xc' (line 2220)
    xc_182291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 25), 'xc')
    # Getting the type of 'xb' (line 2220)
    xb_182292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 30), 'xb')
    # Applying the binary operator '-' (line 2220)
    result_sub_182293 = python_operator(stypy.reporting.localization.Localization(__file__, 2220, 25), '-', xc_182291, xb_182292)
    
    # Applying the binary operator '*' (line 2220)
    result_mul_182294 = python_operator(stypy.reporting.localization.Localization(__file__, 2220, 18), '*', _gC_182290, result_sub_182293)
    
    # Applying the binary operator '+' (line 2220)
    result_add_182295 = python_operator(stypy.reporting.localization.Localization(__file__, 2220, 13), '+', xb_182289, result_mul_182294)
    
    # Assigning a type to the variable 'x2' (line 2220)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2220, 8), 'x2', result_add_182295)
    # SSA branch for the else part of an if statement (line 2218)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 2222):
    
    # Assigning a Name to a Name (line 2222):
    # Getting the type of 'xb' (line 2222)
    xb_182296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 13), 'xb')
    # Assigning a type to the variable 'x2' (line 2222)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2222, 8), 'x2', xb_182296)
    
    # Assigning a BinOp to a Name (line 2223):
    
    # Assigning a BinOp to a Name (line 2223):
    # Getting the type of 'xb' (line 2223)
    xb_182297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2223, 13), 'xb')
    # Getting the type of '_gC' (line 2223)
    _gC_182298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2223, 18), '_gC')
    # Getting the type of 'xb' (line 2223)
    xb_182299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2223, 25), 'xb')
    # Getting the type of 'xa' (line 2223)
    xa_182300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2223, 30), 'xa')
    # Applying the binary operator '-' (line 2223)
    result_sub_182301 = python_operator(stypy.reporting.localization.Localization(__file__, 2223, 25), '-', xb_182299, xa_182300)
    
    # Applying the binary operator '*' (line 2223)
    result_mul_182302 = python_operator(stypy.reporting.localization.Localization(__file__, 2223, 18), '*', _gC_182298, result_sub_182301)
    
    # Applying the binary operator '-' (line 2223)
    result_sub_182303 = python_operator(stypy.reporting.localization.Localization(__file__, 2223, 13), '-', xb_182297, result_mul_182302)
    
    # Assigning a type to the variable 'x1' (line 2223)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2223, 8), 'x1', result_sub_182303)
    # SSA join for if statement (line 2218)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2224):
    
    # Assigning a Call to a Name (line 2224):
    
    # Call to func(...): (line 2224)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2224)
    tuple_182305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2224, 17), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2224)
    # Adding element type (line 2224)
    # Getting the type of 'x1' (line 2224)
    x1_182306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 17), 'x1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2224, 17), tuple_182305, x1_182306)
    
    # Getting the type of 'args' (line 2224)
    args_182307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 24), 'args', False)
    # Applying the binary operator '+' (line 2224)
    result_add_182308 = python_operator(stypy.reporting.localization.Localization(__file__, 2224, 16), '+', tuple_182305, args_182307)
    
    # Processing the call keyword arguments (line 2224)
    kwargs_182309 = {}
    # Getting the type of 'func' (line 2224)
    func_182304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 9), 'func', False)
    # Calling func(args, kwargs) (line 2224)
    func_call_result_182310 = invoke(stypy.reporting.localization.Localization(__file__, 2224, 9), func_182304, *[result_add_182308], **kwargs_182309)
    
    # Assigning a type to the variable 'f1' (line 2224)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2224, 4), 'f1', func_call_result_182310)
    
    # Assigning a Call to a Name (line 2225):
    
    # Assigning a Call to a Name (line 2225):
    
    # Call to func(...): (line 2225)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2225)
    tuple_182312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2225, 17), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2225)
    # Adding element type (line 2225)
    # Getting the type of 'x2' (line 2225)
    x2_182313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 17), 'x2', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2225, 17), tuple_182312, x2_182313)
    
    # Getting the type of 'args' (line 2225)
    args_182314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 24), 'args', False)
    # Applying the binary operator '+' (line 2225)
    result_add_182315 = python_operator(stypy.reporting.localization.Localization(__file__, 2225, 16), '+', tuple_182312, args_182314)
    
    # Processing the call keyword arguments (line 2225)
    kwargs_182316 = {}
    # Getting the type of 'func' (line 2225)
    func_182311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 9), 'func', False)
    # Calling func(args, kwargs) (line 2225)
    func_call_result_182317 = invoke(stypy.reporting.localization.Localization(__file__, 2225, 9), func_182311, *[result_add_182315], **kwargs_182316)
    
    # Assigning a type to the variable 'f2' (line 2225)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2225, 4), 'f2', func_call_result_182317)
    
    # Getting the type of 'funcalls' (line 2226)
    funcalls_182318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 4), 'funcalls')
    int_182319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2226, 16), 'int')
    # Applying the binary operator '+=' (line 2226)
    result_iadd_182320 = python_operator(stypy.reporting.localization.Localization(__file__, 2226, 4), '+=', funcalls_182318, int_182319)
    # Assigning a type to the variable 'funcalls' (line 2226)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2226, 4), 'funcalls', result_iadd_182320)
    
    
    # Assigning a Num to a Name (line 2227):
    
    # Assigning a Num to a Name (line 2227):
    int_182321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2227, 10), 'int')
    # Assigning a type to the variable 'nit' (line 2227)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2227, 4), 'nit', int_182321)
    
    
    # Call to xrange(...): (line 2228)
    # Processing the call arguments (line 2228)
    # Getting the type of 'maxiter' (line 2228)
    maxiter_182323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 20), 'maxiter', False)
    # Processing the call keyword arguments (line 2228)
    kwargs_182324 = {}
    # Getting the type of 'xrange' (line 2228)
    xrange_182322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 13), 'xrange', False)
    # Calling xrange(args, kwargs) (line 2228)
    xrange_call_result_182325 = invoke(stypy.reporting.localization.Localization(__file__, 2228, 13), xrange_182322, *[maxiter_182323], **kwargs_182324)
    
    # Testing the type of a for loop iterable (line 2228)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2228, 4), xrange_call_result_182325)
    # Getting the type of the for loop variable (line 2228)
    for_loop_var_182326 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2228, 4), xrange_call_result_182325)
    # Assigning a type to the variable 'i' (line 2228)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2228, 4), 'i', for_loop_var_182326)
    # SSA begins for a for statement (line 2228)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to abs(...): (line 2229)
    # Processing the call arguments (line 2229)
    # Getting the type of 'x3' (line 2229)
    x3_182329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 21), 'x3', False)
    # Getting the type of 'x0' (line 2229)
    x0_182330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 26), 'x0', False)
    # Applying the binary operator '-' (line 2229)
    result_sub_182331 = python_operator(stypy.reporting.localization.Localization(__file__, 2229, 21), '-', x3_182329, x0_182330)
    
    # Processing the call keyword arguments (line 2229)
    kwargs_182332 = {}
    # Getting the type of 'numpy' (line 2229)
    numpy_182327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 11), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 2229)
    abs_182328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2229, 11), numpy_182327, 'abs')
    # Calling abs(args, kwargs) (line 2229)
    abs_call_result_182333 = invoke(stypy.reporting.localization.Localization(__file__, 2229, 11), abs_182328, *[result_sub_182331], **kwargs_182332)
    
    # Getting the type of 'tol' (line 2229)
    tol_182334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 33), 'tol')
    
    # Call to abs(...): (line 2229)
    # Processing the call arguments (line 2229)
    # Getting the type of 'x1' (line 2229)
    x1_182337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 50), 'x1', False)
    # Processing the call keyword arguments (line 2229)
    kwargs_182338 = {}
    # Getting the type of 'numpy' (line 2229)
    numpy_182335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 40), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 2229)
    abs_182336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2229, 40), numpy_182335, 'abs')
    # Calling abs(args, kwargs) (line 2229)
    abs_call_result_182339 = invoke(stypy.reporting.localization.Localization(__file__, 2229, 40), abs_182336, *[x1_182337], **kwargs_182338)
    
    
    # Call to abs(...): (line 2229)
    # Processing the call arguments (line 2229)
    # Getting the type of 'x2' (line 2229)
    x2_182342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 66), 'x2', False)
    # Processing the call keyword arguments (line 2229)
    kwargs_182343 = {}
    # Getting the type of 'numpy' (line 2229)
    numpy_182340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 56), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 2229)
    abs_182341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2229, 56), numpy_182340, 'abs')
    # Calling abs(args, kwargs) (line 2229)
    abs_call_result_182344 = invoke(stypy.reporting.localization.Localization(__file__, 2229, 56), abs_182341, *[x2_182342], **kwargs_182343)
    
    # Applying the binary operator '+' (line 2229)
    result_add_182345 = python_operator(stypy.reporting.localization.Localization(__file__, 2229, 40), '+', abs_call_result_182339, abs_call_result_182344)
    
    # Applying the binary operator '*' (line 2229)
    result_mul_182346 = python_operator(stypy.reporting.localization.Localization(__file__, 2229, 33), '*', tol_182334, result_add_182345)
    
    # Applying the binary operator '<=' (line 2229)
    result_le_182347 = python_operator(stypy.reporting.localization.Localization(__file__, 2229, 11), '<=', abs_call_result_182333, result_mul_182346)
    
    # Testing the type of an if condition (line 2229)
    if_condition_182348 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2229, 8), result_le_182347)
    # Assigning a type to the variable 'if_condition_182348' (line 2229)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2229, 8), 'if_condition_182348', if_condition_182348)
    # SSA begins for if statement (line 2229)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 2229)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'f2' (line 2231)
    f2_182349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2231, 12), 'f2')
    # Getting the type of 'f1' (line 2231)
    f1_182350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2231, 17), 'f1')
    # Applying the binary operator '<' (line 2231)
    result_lt_182351 = python_operator(stypy.reporting.localization.Localization(__file__, 2231, 12), '<', f2_182349, f1_182350)
    
    # Testing the type of an if condition (line 2231)
    if_condition_182352 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2231, 8), result_lt_182351)
    # Assigning a type to the variable 'if_condition_182352' (line 2231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2231, 8), 'if_condition_182352', if_condition_182352)
    # SSA begins for if statement (line 2231)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2232):
    
    # Assigning a Name to a Name (line 2232):
    # Getting the type of 'x1' (line 2232)
    x1_182353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 17), 'x1')
    # Assigning a type to the variable 'x0' (line 2232)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2232, 12), 'x0', x1_182353)
    
    # Assigning a Name to a Name (line 2233):
    
    # Assigning a Name to a Name (line 2233):
    # Getting the type of 'x2' (line 2233)
    x2_182354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2233, 17), 'x2')
    # Assigning a type to the variable 'x1' (line 2233)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2233, 12), 'x1', x2_182354)
    
    # Assigning a BinOp to a Name (line 2234):
    
    # Assigning a BinOp to a Name (line 2234):
    # Getting the type of '_gR' (line 2234)
    _gR_182355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 17), '_gR')
    # Getting the type of 'x1' (line 2234)
    x1_182356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 23), 'x1')
    # Applying the binary operator '*' (line 2234)
    result_mul_182357 = python_operator(stypy.reporting.localization.Localization(__file__, 2234, 17), '*', _gR_182355, x1_182356)
    
    # Getting the type of '_gC' (line 2234)
    _gC_182358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 28), '_gC')
    # Getting the type of 'x3' (line 2234)
    x3_182359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 34), 'x3')
    # Applying the binary operator '*' (line 2234)
    result_mul_182360 = python_operator(stypy.reporting.localization.Localization(__file__, 2234, 28), '*', _gC_182358, x3_182359)
    
    # Applying the binary operator '+' (line 2234)
    result_add_182361 = python_operator(stypy.reporting.localization.Localization(__file__, 2234, 17), '+', result_mul_182357, result_mul_182360)
    
    # Assigning a type to the variable 'x2' (line 2234)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2234, 12), 'x2', result_add_182361)
    
    # Assigning a Name to a Name (line 2235):
    
    # Assigning a Name to a Name (line 2235):
    # Getting the type of 'f2' (line 2235)
    f2_182362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 17), 'f2')
    # Assigning a type to the variable 'f1' (line 2235)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2235, 12), 'f1', f2_182362)
    
    # Assigning a Call to a Name (line 2236):
    
    # Assigning a Call to a Name (line 2236):
    
    # Call to func(...): (line 2236)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2236)
    tuple_182364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2236, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2236)
    # Adding element type (line 2236)
    # Getting the type of 'x2' (line 2236)
    x2_182365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 25), 'x2', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2236, 25), tuple_182364, x2_182365)
    
    # Getting the type of 'args' (line 2236)
    args_182366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 32), 'args', False)
    # Applying the binary operator '+' (line 2236)
    result_add_182367 = python_operator(stypy.reporting.localization.Localization(__file__, 2236, 24), '+', tuple_182364, args_182366)
    
    # Processing the call keyword arguments (line 2236)
    kwargs_182368 = {}
    # Getting the type of 'func' (line 2236)
    func_182363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 17), 'func', False)
    # Calling func(args, kwargs) (line 2236)
    func_call_result_182369 = invoke(stypy.reporting.localization.Localization(__file__, 2236, 17), func_182363, *[result_add_182367], **kwargs_182368)
    
    # Assigning a type to the variable 'f2' (line 2236)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2236, 12), 'f2', func_call_result_182369)
    # SSA branch for the else part of an if statement (line 2231)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 2238):
    
    # Assigning a Name to a Name (line 2238):
    # Getting the type of 'x2' (line 2238)
    x2_182370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 17), 'x2')
    # Assigning a type to the variable 'x3' (line 2238)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2238, 12), 'x3', x2_182370)
    
    # Assigning a Name to a Name (line 2239):
    
    # Assigning a Name to a Name (line 2239):
    # Getting the type of 'x1' (line 2239)
    x1_182371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 17), 'x1')
    # Assigning a type to the variable 'x2' (line 2239)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2239, 12), 'x2', x1_182371)
    
    # Assigning a BinOp to a Name (line 2240):
    
    # Assigning a BinOp to a Name (line 2240):
    # Getting the type of '_gR' (line 2240)
    _gR_182372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 17), '_gR')
    # Getting the type of 'x2' (line 2240)
    x2_182373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 23), 'x2')
    # Applying the binary operator '*' (line 2240)
    result_mul_182374 = python_operator(stypy.reporting.localization.Localization(__file__, 2240, 17), '*', _gR_182372, x2_182373)
    
    # Getting the type of '_gC' (line 2240)
    _gC_182375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 28), '_gC')
    # Getting the type of 'x0' (line 2240)
    x0_182376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 34), 'x0')
    # Applying the binary operator '*' (line 2240)
    result_mul_182377 = python_operator(stypy.reporting.localization.Localization(__file__, 2240, 28), '*', _gC_182375, x0_182376)
    
    # Applying the binary operator '+' (line 2240)
    result_add_182378 = python_operator(stypy.reporting.localization.Localization(__file__, 2240, 17), '+', result_mul_182374, result_mul_182377)
    
    # Assigning a type to the variable 'x1' (line 2240)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2240, 12), 'x1', result_add_182378)
    
    # Assigning a Name to a Name (line 2241):
    
    # Assigning a Name to a Name (line 2241):
    # Getting the type of 'f1' (line 2241)
    f1_182379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 17), 'f1')
    # Assigning a type to the variable 'f2' (line 2241)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2241, 12), 'f2', f1_182379)
    
    # Assigning a Call to a Name (line 2242):
    
    # Assigning a Call to a Name (line 2242):
    
    # Call to func(...): (line 2242)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2242)
    tuple_182381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2242, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2242)
    # Adding element type (line 2242)
    # Getting the type of 'x1' (line 2242)
    x1_182382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 25), 'x1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2242, 25), tuple_182381, x1_182382)
    
    # Getting the type of 'args' (line 2242)
    args_182383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 32), 'args', False)
    # Applying the binary operator '+' (line 2242)
    result_add_182384 = python_operator(stypy.reporting.localization.Localization(__file__, 2242, 24), '+', tuple_182381, args_182383)
    
    # Processing the call keyword arguments (line 2242)
    kwargs_182385 = {}
    # Getting the type of 'func' (line 2242)
    func_182380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 17), 'func', False)
    # Calling func(args, kwargs) (line 2242)
    func_call_result_182386 = invoke(stypy.reporting.localization.Localization(__file__, 2242, 17), func_182380, *[result_add_182384], **kwargs_182385)
    
    # Assigning a type to the variable 'f1' (line 2242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2242, 12), 'f1', func_call_result_182386)
    # SSA join for if statement (line 2231)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'funcalls' (line 2243)
    funcalls_182387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 8), 'funcalls')
    int_182388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2243, 20), 'int')
    # Applying the binary operator '+=' (line 2243)
    result_iadd_182389 = python_operator(stypy.reporting.localization.Localization(__file__, 2243, 8), '+=', funcalls_182387, int_182388)
    # Assigning a type to the variable 'funcalls' (line 2243)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2243, 8), 'funcalls', result_iadd_182389)
    
    
    # Getting the type of 'nit' (line 2244)
    nit_182390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2244, 8), 'nit')
    int_182391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2244, 15), 'int')
    # Applying the binary operator '+=' (line 2244)
    result_iadd_182392 = python_operator(stypy.reporting.localization.Localization(__file__, 2244, 8), '+=', nit_182390, int_182391)
    # Assigning a type to the variable 'nit' (line 2244)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2244, 8), 'nit', result_iadd_182392)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'f1' (line 2245)
    f1_182393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 8), 'f1')
    # Getting the type of 'f2' (line 2245)
    f2_182394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 13), 'f2')
    # Applying the binary operator '<' (line 2245)
    result_lt_182395 = python_operator(stypy.reporting.localization.Localization(__file__, 2245, 8), '<', f1_182393, f2_182394)
    
    # Testing the type of an if condition (line 2245)
    if_condition_182396 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2245, 4), result_lt_182395)
    # Assigning a type to the variable 'if_condition_182396' (line 2245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2245, 4), 'if_condition_182396', if_condition_182396)
    # SSA begins for if statement (line 2245)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2246):
    
    # Assigning a Name to a Name (line 2246):
    # Getting the type of 'x1' (line 2246)
    x1_182397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2246, 15), 'x1')
    # Assigning a type to the variable 'xmin' (line 2246)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2246, 8), 'xmin', x1_182397)
    
    # Assigning a Name to a Name (line 2247):
    
    # Assigning a Name to a Name (line 2247):
    # Getting the type of 'f1' (line 2247)
    f1_182398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2247, 15), 'f1')
    # Assigning a type to the variable 'fval' (line 2247)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2247, 8), 'fval', f1_182398)
    # SSA branch for the else part of an if statement (line 2245)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 2249):
    
    # Assigning a Name to a Name (line 2249):
    # Getting the type of 'x2' (line 2249)
    x2_182399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2249, 15), 'x2')
    # Assigning a type to the variable 'xmin' (line 2249)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2249, 8), 'xmin', x2_182399)
    
    # Assigning a Name to a Name (line 2250):
    
    # Assigning a Name to a Name (line 2250):
    # Getting the type of 'f2' (line 2250)
    f2_182400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2250, 15), 'f2')
    # Assigning a type to the variable 'fval' (line 2250)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2250, 8), 'fval', f2_182400)
    # SSA join for if statement (line 2245)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to OptimizeResult(...): (line 2252)
    # Processing the call keyword arguments (line 2252)
    # Getting the type of 'fval' (line 2252)
    fval_182402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2252, 30), 'fval', False)
    keyword_182403 = fval_182402
    # Getting the type of 'funcalls' (line 2252)
    funcalls_182404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2252, 41), 'funcalls', False)
    keyword_182405 = funcalls_182404
    # Getting the type of 'xmin' (line 2252)
    xmin_182406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2252, 53), 'xmin', False)
    keyword_182407 = xmin_182406
    # Getting the type of 'nit' (line 2252)
    nit_182408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2252, 63), 'nit', False)
    keyword_182409 = nit_182408
    
    # Getting the type of 'nit' (line 2253)
    nit_182410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2253, 34), 'nit', False)
    # Getting the type of 'maxiter' (line 2253)
    maxiter_182411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2253, 40), 'maxiter', False)
    # Applying the binary operator '<' (line 2253)
    result_lt_182412 = python_operator(stypy.reporting.localization.Localization(__file__, 2253, 34), '<', nit_182410, maxiter_182411)
    
    keyword_182413 = result_lt_182412
    kwargs_182414 = {'fun': keyword_182403, 'nfev': keyword_182405, 'success': keyword_182413, 'nit': keyword_182409, 'x': keyword_182407}
    # Getting the type of 'OptimizeResult' (line 2252)
    OptimizeResult_182401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2252, 11), 'OptimizeResult', False)
    # Calling OptimizeResult(args, kwargs) (line 2252)
    OptimizeResult_call_result_182415 = invoke(stypy.reporting.localization.Localization(__file__, 2252, 11), OptimizeResult_182401, *[], **kwargs_182414)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2252)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2252, 4), 'stypy_return_type', OptimizeResult_call_result_182415)
    
    # ################# End of '_minimize_scalar_golden(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_minimize_scalar_golden' in the type store
    # Getting the type of 'stypy_return_type' (line 2181)
    stypy_return_type_182416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_182416)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_minimize_scalar_golden'
    return stypy_return_type_182416

# Assigning a type to the variable '_minimize_scalar_golden' (line 2181)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2181, 0), '_minimize_scalar_golden', _minimize_scalar_golden)

@norecursion
def bracket(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_182417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2256, 21), 'float')
    float_182418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2256, 29), 'float')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2256)
    tuple_182419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2256, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2256)
    
    float_182420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2256, 54), 'float')
    int_182421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2256, 69), 'int')
    defaults = [float_182417, float_182418, tuple_182419, float_182420, int_182421]
    # Create a new context for function 'bracket'
    module_type_store = module_type_store.open_function_context('bracket', 2256, 0, False)
    
    # Passed parameters checking function
    bracket.stypy_localization = localization
    bracket.stypy_type_of_self = None
    bracket.stypy_type_store = module_type_store
    bracket.stypy_function_name = 'bracket'
    bracket.stypy_param_names_list = ['func', 'xa', 'xb', 'args', 'grow_limit', 'maxiter']
    bracket.stypy_varargs_param_name = None
    bracket.stypy_kwargs_param_name = None
    bracket.stypy_call_defaults = defaults
    bracket.stypy_call_varargs = varargs
    bracket.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'bracket', ['func', 'xa', 'xb', 'args', 'grow_limit', 'maxiter'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'bracket', localization, ['func', 'xa', 'xb', 'args', 'grow_limit', 'maxiter'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'bracket(...)' code ##################

    str_182422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2288, (-1)), 'str', "\n    Bracket the minimum of the function.\n\n    Given a function and distinct initial points, search in the\n    downhill direction (as defined by the initital points) and return\n    new points xa, xb, xc that bracket the minimum of the function\n    f(xa) > f(xb) < f(xc). It doesn't always mean that obtained\n    solution will satisfy xa<=x<=xb\n\n    Parameters\n    ----------\n    func : callable f(x,*args)\n        Objective function to minimize.\n    xa, xb : float, optional\n        Bracketing interval. Defaults `xa` to 0.0, and `xb` to 1.0.\n    args : tuple, optional\n        Additional arguments (if present), passed to `func`.\n    grow_limit : float, optional\n        Maximum grow limit.  Defaults to 110.0\n    maxiter : int, optional\n        Maximum number of iterations to perform. Defaults to 1000.\n\n    Returns\n    -------\n    xa, xb, xc : float\n        Bracket.\n    fa, fb, fc : float\n        Objective function values in bracket.\n    funcalls : int\n        Number of function evaluations made.\n\n    ")
    
    # Assigning a Num to a Name (line 2289):
    
    # Assigning a Num to a Name (line 2289):
    float_182423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2289, 12), 'float')
    # Assigning a type to the variable '_gold' (line 2289)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2289, 4), '_gold', float_182423)
    
    # Assigning a Num to a Name (line 2290):
    
    # Assigning a Num to a Name (line 2290):
    float_182424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2290, 21), 'float')
    # Assigning a type to the variable '_verysmall_num' (line 2290)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2290, 4), '_verysmall_num', float_182424)
    
    # Assigning a Call to a Name (line 2291):
    
    # Assigning a Call to a Name (line 2291):
    
    # Call to func(...): (line 2291)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2291)
    tuple_182426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2291, 16), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2291)
    # Adding element type (line 2291)
    # Getting the type of 'xa' (line 2291)
    xa_182427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2291, 16), 'xa', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2291, 16), tuple_182426, xa_182427)
    
    # Getting the type of 'args' (line 2291)
    args_182428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2291, 23), 'args', False)
    # Applying the binary operator '+' (line 2291)
    result_add_182429 = python_operator(stypy.reporting.localization.Localization(__file__, 2291, 15), '+', tuple_182426, args_182428)
    
    # Processing the call keyword arguments (line 2291)
    kwargs_182430 = {}
    # Getting the type of 'func' (line 2291)
    func_182425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2291, 9), 'func', False)
    # Calling func(args, kwargs) (line 2291)
    func_call_result_182431 = invoke(stypy.reporting.localization.Localization(__file__, 2291, 9), func_182425, *[result_add_182429], **kwargs_182430)
    
    # Assigning a type to the variable 'fa' (line 2291)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2291, 4), 'fa', func_call_result_182431)
    
    # Assigning a Call to a Name (line 2292):
    
    # Assigning a Call to a Name (line 2292):
    
    # Call to func(...): (line 2292)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2292)
    tuple_182433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2292, 16), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2292)
    # Adding element type (line 2292)
    # Getting the type of 'xb' (line 2292)
    xb_182434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 16), 'xb', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2292, 16), tuple_182433, xb_182434)
    
    # Getting the type of 'args' (line 2292)
    args_182435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 23), 'args', False)
    # Applying the binary operator '+' (line 2292)
    result_add_182436 = python_operator(stypy.reporting.localization.Localization(__file__, 2292, 15), '+', tuple_182433, args_182435)
    
    # Processing the call keyword arguments (line 2292)
    kwargs_182437 = {}
    # Getting the type of 'func' (line 2292)
    func_182432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 9), 'func', False)
    # Calling func(args, kwargs) (line 2292)
    func_call_result_182438 = invoke(stypy.reporting.localization.Localization(__file__, 2292, 9), func_182432, *[result_add_182436], **kwargs_182437)
    
    # Assigning a type to the variable 'fb' (line 2292)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2292, 4), 'fb', func_call_result_182438)
    
    
    # Getting the type of 'fa' (line 2293)
    fa_182439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 8), 'fa')
    # Getting the type of 'fb' (line 2293)
    fb_182440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 13), 'fb')
    # Applying the binary operator '<' (line 2293)
    result_lt_182441 = python_operator(stypy.reporting.localization.Localization(__file__, 2293, 8), '<', fa_182439, fb_182440)
    
    # Testing the type of an if condition (line 2293)
    if_condition_182442 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2293, 4), result_lt_182441)
    # Assigning a type to the variable 'if_condition_182442' (line 2293)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2293, 4), 'if_condition_182442', if_condition_182442)
    # SSA begins for if statement (line 2293)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 2294):
    
    # Assigning a Name to a Name (line 2294):
    # Getting the type of 'xb' (line 2294)
    xb_182443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 17), 'xb')
    # Assigning a type to the variable 'tuple_assignment_176732' (line 2294)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2294, 8), 'tuple_assignment_176732', xb_182443)
    
    # Assigning a Name to a Name (line 2294):
    # Getting the type of 'xa' (line 2294)
    xa_182444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 21), 'xa')
    # Assigning a type to the variable 'tuple_assignment_176733' (line 2294)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2294, 8), 'tuple_assignment_176733', xa_182444)
    
    # Assigning a Name to a Name (line 2294):
    # Getting the type of 'tuple_assignment_176732' (line 2294)
    tuple_assignment_176732_182445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 8), 'tuple_assignment_176732')
    # Assigning a type to the variable 'xa' (line 2294)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2294, 8), 'xa', tuple_assignment_176732_182445)
    
    # Assigning a Name to a Name (line 2294):
    # Getting the type of 'tuple_assignment_176733' (line 2294)
    tuple_assignment_176733_182446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 8), 'tuple_assignment_176733')
    # Assigning a type to the variable 'xb' (line 2294)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2294, 12), 'xb', tuple_assignment_176733_182446)
    
    # Assigning a Tuple to a Tuple (line 2295):
    
    # Assigning a Name to a Name (line 2295):
    # Getting the type of 'fb' (line 2295)
    fb_182447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 17), 'fb')
    # Assigning a type to the variable 'tuple_assignment_176734' (line 2295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2295, 8), 'tuple_assignment_176734', fb_182447)
    
    # Assigning a Name to a Name (line 2295):
    # Getting the type of 'fa' (line 2295)
    fa_182448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 21), 'fa')
    # Assigning a type to the variable 'tuple_assignment_176735' (line 2295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2295, 8), 'tuple_assignment_176735', fa_182448)
    
    # Assigning a Name to a Name (line 2295):
    # Getting the type of 'tuple_assignment_176734' (line 2295)
    tuple_assignment_176734_182449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 8), 'tuple_assignment_176734')
    # Assigning a type to the variable 'fa' (line 2295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2295, 8), 'fa', tuple_assignment_176734_182449)
    
    # Assigning a Name to a Name (line 2295):
    # Getting the type of 'tuple_assignment_176735' (line 2295)
    tuple_assignment_176735_182450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 8), 'tuple_assignment_176735')
    # Assigning a type to the variable 'fb' (line 2295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2295, 12), 'fb', tuple_assignment_176735_182450)
    # SSA join for if statement (line 2293)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 2296):
    
    # Assigning a BinOp to a Name (line 2296):
    # Getting the type of 'xb' (line 2296)
    xb_182451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 9), 'xb')
    # Getting the type of '_gold' (line 2296)
    _gold_182452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 14), '_gold')
    # Getting the type of 'xb' (line 2296)
    xb_182453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 23), 'xb')
    # Getting the type of 'xa' (line 2296)
    xa_182454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 28), 'xa')
    # Applying the binary operator '-' (line 2296)
    result_sub_182455 = python_operator(stypy.reporting.localization.Localization(__file__, 2296, 23), '-', xb_182453, xa_182454)
    
    # Applying the binary operator '*' (line 2296)
    result_mul_182456 = python_operator(stypy.reporting.localization.Localization(__file__, 2296, 14), '*', _gold_182452, result_sub_182455)
    
    # Applying the binary operator '+' (line 2296)
    result_add_182457 = python_operator(stypy.reporting.localization.Localization(__file__, 2296, 9), '+', xb_182451, result_mul_182456)
    
    # Assigning a type to the variable 'xc' (line 2296)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2296, 4), 'xc', result_add_182457)
    
    # Assigning a Call to a Name (line 2297):
    
    # Assigning a Call to a Name (line 2297):
    
    # Call to func(...): (line 2297)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2297)
    tuple_182459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2297, 17), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2297)
    # Adding element type (line 2297)
    # Getting the type of 'xc' (line 2297)
    xc_182460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 17), 'xc', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2297, 17), tuple_182459, xc_182460)
    
    # Getting the type of 'args' (line 2297)
    args_182461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 24), 'args', False)
    # Applying the binary operator '+' (line 2297)
    result_add_182462 = python_operator(stypy.reporting.localization.Localization(__file__, 2297, 16), '+', tuple_182459, args_182461)
    
    # Processing the call keyword arguments (line 2297)
    kwargs_182463 = {}
    # Getting the type of 'func' (line 2297)
    func_182458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 9), 'func', False)
    # Calling func(args, kwargs) (line 2297)
    func_call_result_182464 = invoke(stypy.reporting.localization.Localization(__file__, 2297, 9), func_182458, *[result_add_182462], **kwargs_182463)
    
    # Assigning a type to the variable 'fc' (line 2297)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2297, 4), 'fc', func_call_result_182464)
    
    # Assigning a Num to a Name (line 2298):
    
    # Assigning a Num to a Name (line 2298):
    int_182465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2298, 15), 'int')
    # Assigning a type to the variable 'funcalls' (line 2298)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2298, 4), 'funcalls', int_182465)
    
    # Assigning a Num to a Name (line 2299):
    
    # Assigning a Num to a Name (line 2299):
    int_182466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2299, 11), 'int')
    # Assigning a type to the variable 'iter' (line 2299)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2299, 4), 'iter', int_182466)
    
    
    # Getting the type of 'fc' (line 2300)
    fc_182467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 11), 'fc')
    # Getting the type of 'fb' (line 2300)
    fb_182468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 16), 'fb')
    # Applying the binary operator '<' (line 2300)
    result_lt_182469 = python_operator(stypy.reporting.localization.Localization(__file__, 2300, 11), '<', fc_182467, fb_182468)
    
    # Testing the type of an if condition (line 2300)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2300, 4), result_lt_182469)
    # SSA begins for while statement (line 2300)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a BinOp to a Name (line 2301):
    
    # Assigning a BinOp to a Name (line 2301):
    # Getting the type of 'xb' (line 2301)
    xb_182470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 16), 'xb')
    # Getting the type of 'xa' (line 2301)
    xa_182471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 21), 'xa')
    # Applying the binary operator '-' (line 2301)
    result_sub_182472 = python_operator(stypy.reporting.localization.Localization(__file__, 2301, 16), '-', xb_182470, xa_182471)
    
    # Getting the type of 'fb' (line 2301)
    fb_182473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 28), 'fb')
    # Getting the type of 'fc' (line 2301)
    fc_182474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 33), 'fc')
    # Applying the binary operator '-' (line 2301)
    result_sub_182475 = python_operator(stypy.reporting.localization.Localization(__file__, 2301, 28), '-', fb_182473, fc_182474)
    
    # Applying the binary operator '*' (line 2301)
    result_mul_182476 = python_operator(stypy.reporting.localization.Localization(__file__, 2301, 15), '*', result_sub_182472, result_sub_182475)
    
    # Assigning a type to the variable 'tmp1' (line 2301)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2301, 8), 'tmp1', result_mul_182476)
    
    # Assigning a BinOp to a Name (line 2302):
    
    # Assigning a BinOp to a Name (line 2302):
    # Getting the type of 'xb' (line 2302)
    xb_182477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2302, 16), 'xb')
    # Getting the type of 'xc' (line 2302)
    xc_182478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2302, 21), 'xc')
    # Applying the binary operator '-' (line 2302)
    result_sub_182479 = python_operator(stypy.reporting.localization.Localization(__file__, 2302, 16), '-', xb_182477, xc_182478)
    
    # Getting the type of 'fb' (line 2302)
    fb_182480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2302, 28), 'fb')
    # Getting the type of 'fa' (line 2302)
    fa_182481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2302, 33), 'fa')
    # Applying the binary operator '-' (line 2302)
    result_sub_182482 = python_operator(stypy.reporting.localization.Localization(__file__, 2302, 28), '-', fb_182480, fa_182481)
    
    # Applying the binary operator '*' (line 2302)
    result_mul_182483 = python_operator(stypy.reporting.localization.Localization(__file__, 2302, 15), '*', result_sub_182479, result_sub_182482)
    
    # Assigning a type to the variable 'tmp2' (line 2302)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2302, 8), 'tmp2', result_mul_182483)
    
    # Assigning a BinOp to a Name (line 2303):
    
    # Assigning a BinOp to a Name (line 2303):
    # Getting the type of 'tmp2' (line 2303)
    tmp2_182484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2303, 14), 'tmp2')
    # Getting the type of 'tmp1' (line 2303)
    tmp1_182485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2303, 21), 'tmp1')
    # Applying the binary operator '-' (line 2303)
    result_sub_182486 = python_operator(stypy.reporting.localization.Localization(__file__, 2303, 14), '-', tmp2_182484, tmp1_182485)
    
    # Assigning a type to the variable 'val' (line 2303)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2303, 8), 'val', result_sub_182486)
    
    
    
    # Call to abs(...): (line 2304)
    # Processing the call arguments (line 2304)
    # Getting the type of 'val' (line 2304)
    val_182489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 21), 'val', False)
    # Processing the call keyword arguments (line 2304)
    kwargs_182490 = {}
    # Getting the type of 'numpy' (line 2304)
    numpy_182487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 11), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 2304)
    abs_182488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2304, 11), numpy_182487, 'abs')
    # Calling abs(args, kwargs) (line 2304)
    abs_call_result_182491 = invoke(stypy.reporting.localization.Localization(__file__, 2304, 11), abs_182488, *[val_182489], **kwargs_182490)
    
    # Getting the type of '_verysmall_num' (line 2304)
    _verysmall_num_182492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 28), '_verysmall_num')
    # Applying the binary operator '<' (line 2304)
    result_lt_182493 = python_operator(stypy.reporting.localization.Localization(__file__, 2304, 11), '<', abs_call_result_182491, _verysmall_num_182492)
    
    # Testing the type of an if condition (line 2304)
    if_condition_182494 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2304, 8), result_lt_182493)
    # Assigning a type to the variable 'if_condition_182494' (line 2304)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2304, 8), 'if_condition_182494', if_condition_182494)
    # SSA begins for if statement (line 2304)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2305):
    
    # Assigning a BinOp to a Name (line 2305):
    float_182495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2305, 20), 'float')
    # Getting the type of '_verysmall_num' (line 2305)
    _verysmall_num_182496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2305, 26), '_verysmall_num')
    # Applying the binary operator '*' (line 2305)
    result_mul_182497 = python_operator(stypy.reporting.localization.Localization(__file__, 2305, 20), '*', float_182495, _verysmall_num_182496)
    
    # Assigning a type to the variable 'denom' (line 2305)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2305, 12), 'denom', result_mul_182497)
    # SSA branch for the else part of an if statement (line 2304)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 2307):
    
    # Assigning a BinOp to a Name (line 2307):
    float_182498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2307, 20), 'float')
    # Getting the type of 'val' (line 2307)
    val_182499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 26), 'val')
    # Applying the binary operator '*' (line 2307)
    result_mul_182500 = python_operator(stypy.reporting.localization.Localization(__file__, 2307, 20), '*', float_182498, val_182499)
    
    # Assigning a type to the variable 'denom' (line 2307)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2307, 12), 'denom', result_mul_182500)
    # SSA join for if statement (line 2304)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 2308):
    
    # Assigning a BinOp to a Name (line 2308):
    # Getting the type of 'xb' (line 2308)
    xb_182501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 12), 'xb')
    # Getting the type of 'xb' (line 2308)
    xb_182502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 19), 'xb')
    # Getting the type of 'xc' (line 2308)
    xc_182503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 24), 'xc')
    # Applying the binary operator '-' (line 2308)
    result_sub_182504 = python_operator(stypy.reporting.localization.Localization(__file__, 2308, 19), '-', xb_182502, xc_182503)
    
    # Getting the type of 'tmp2' (line 2308)
    tmp2_182505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 30), 'tmp2')
    # Applying the binary operator '*' (line 2308)
    result_mul_182506 = python_operator(stypy.reporting.localization.Localization(__file__, 2308, 18), '*', result_sub_182504, tmp2_182505)
    
    # Getting the type of 'xb' (line 2308)
    xb_182507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 38), 'xb')
    # Getting the type of 'xa' (line 2308)
    xa_182508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 43), 'xa')
    # Applying the binary operator '-' (line 2308)
    result_sub_182509 = python_operator(stypy.reporting.localization.Localization(__file__, 2308, 38), '-', xb_182507, xa_182508)
    
    # Getting the type of 'tmp1' (line 2308)
    tmp1_182510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 49), 'tmp1')
    # Applying the binary operator '*' (line 2308)
    result_mul_182511 = python_operator(stypy.reporting.localization.Localization(__file__, 2308, 37), '*', result_sub_182509, tmp1_182510)
    
    # Applying the binary operator '-' (line 2308)
    result_sub_182512 = python_operator(stypy.reporting.localization.Localization(__file__, 2308, 18), '-', result_mul_182506, result_mul_182511)
    
    # Getting the type of 'denom' (line 2308)
    denom_182513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 57), 'denom')
    # Applying the binary operator 'div' (line 2308)
    result_div_182514 = python_operator(stypy.reporting.localization.Localization(__file__, 2308, 17), 'div', result_sub_182512, denom_182513)
    
    # Applying the binary operator '-' (line 2308)
    result_sub_182515 = python_operator(stypy.reporting.localization.Localization(__file__, 2308, 12), '-', xb_182501, result_div_182514)
    
    # Assigning a type to the variable 'w' (line 2308)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2308, 8), 'w', result_sub_182515)
    
    # Assigning a BinOp to a Name (line 2309):
    
    # Assigning a BinOp to a Name (line 2309):
    # Getting the type of 'xb' (line 2309)
    xb_182516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 15), 'xb')
    # Getting the type of 'grow_limit' (line 2309)
    grow_limit_182517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 20), 'grow_limit')
    # Getting the type of 'xc' (line 2309)
    xc_182518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 34), 'xc')
    # Getting the type of 'xb' (line 2309)
    xb_182519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 39), 'xb')
    # Applying the binary operator '-' (line 2309)
    result_sub_182520 = python_operator(stypy.reporting.localization.Localization(__file__, 2309, 34), '-', xc_182518, xb_182519)
    
    # Applying the binary operator '*' (line 2309)
    result_mul_182521 = python_operator(stypy.reporting.localization.Localization(__file__, 2309, 20), '*', grow_limit_182517, result_sub_182520)
    
    # Applying the binary operator '+' (line 2309)
    result_add_182522 = python_operator(stypy.reporting.localization.Localization(__file__, 2309, 15), '+', xb_182516, result_mul_182521)
    
    # Assigning a type to the variable 'wlim' (line 2309)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2309, 8), 'wlim', result_add_182522)
    
    
    # Getting the type of 'iter' (line 2310)
    iter_182523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 11), 'iter')
    # Getting the type of 'maxiter' (line 2310)
    maxiter_182524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 18), 'maxiter')
    # Applying the binary operator '>' (line 2310)
    result_gt_182525 = python_operator(stypy.reporting.localization.Localization(__file__, 2310, 11), '>', iter_182523, maxiter_182524)
    
    # Testing the type of an if condition (line 2310)
    if_condition_182526 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2310, 8), result_gt_182525)
    # Assigning a type to the variable 'if_condition_182526' (line 2310)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2310, 8), 'if_condition_182526', if_condition_182526)
    # SSA begins for if statement (line 2310)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to RuntimeError(...): (line 2311)
    # Processing the call arguments (line 2311)
    str_182528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2311, 31), 'str', 'Too many iterations.')
    # Processing the call keyword arguments (line 2311)
    kwargs_182529 = {}
    # Getting the type of 'RuntimeError' (line 2311)
    RuntimeError_182527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2311, 18), 'RuntimeError', False)
    # Calling RuntimeError(args, kwargs) (line 2311)
    RuntimeError_call_result_182530 = invoke(stypy.reporting.localization.Localization(__file__, 2311, 18), RuntimeError_182527, *[str_182528], **kwargs_182529)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2311, 12), RuntimeError_call_result_182530, 'raise parameter', BaseException)
    # SSA join for if statement (line 2310)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'iter' (line 2312)
    iter_182531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2312, 8), 'iter')
    int_182532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2312, 16), 'int')
    # Applying the binary operator '+=' (line 2312)
    result_iadd_182533 = python_operator(stypy.reporting.localization.Localization(__file__, 2312, 8), '+=', iter_182531, int_182532)
    # Assigning a type to the variable 'iter' (line 2312)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2312, 8), 'iter', result_iadd_182533)
    
    
    
    # Getting the type of 'w' (line 2313)
    w_182534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 12), 'w')
    # Getting the type of 'xc' (line 2313)
    xc_182535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 16), 'xc')
    # Applying the binary operator '-' (line 2313)
    result_sub_182536 = python_operator(stypy.reporting.localization.Localization(__file__, 2313, 12), '-', w_182534, xc_182535)
    
    # Getting the type of 'xb' (line 2313)
    xb_182537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 23), 'xb')
    # Getting the type of 'w' (line 2313)
    w_182538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 28), 'w')
    # Applying the binary operator '-' (line 2313)
    result_sub_182539 = python_operator(stypy.reporting.localization.Localization(__file__, 2313, 23), '-', xb_182537, w_182538)
    
    # Applying the binary operator '*' (line 2313)
    result_mul_182540 = python_operator(stypy.reporting.localization.Localization(__file__, 2313, 11), '*', result_sub_182536, result_sub_182539)
    
    float_182541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2313, 33), 'float')
    # Applying the binary operator '>' (line 2313)
    result_gt_182542 = python_operator(stypy.reporting.localization.Localization(__file__, 2313, 11), '>', result_mul_182540, float_182541)
    
    # Testing the type of an if condition (line 2313)
    if_condition_182543 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2313, 8), result_gt_182542)
    # Assigning a type to the variable 'if_condition_182543' (line 2313)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2313, 8), 'if_condition_182543', if_condition_182543)
    # SSA begins for if statement (line 2313)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2314):
    
    # Assigning a Call to a Name (line 2314):
    
    # Call to func(...): (line 2314)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2314)
    tuple_182545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2314, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2314)
    # Adding element type (line 2314)
    # Getting the type of 'w' (line 2314)
    w_182546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 25), 'w', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2314, 25), tuple_182545, w_182546)
    
    # Getting the type of 'args' (line 2314)
    args_182547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 31), 'args', False)
    # Applying the binary operator '+' (line 2314)
    result_add_182548 = python_operator(stypy.reporting.localization.Localization(__file__, 2314, 24), '+', tuple_182545, args_182547)
    
    # Processing the call keyword arguments (line 2314)
    kwargs_182549 = {}
    # Getting the type of 'func' (line 2314)
    func_182544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 17), 'func', False)
    # Calling func(args, kwargs) (line 2314)
    func_call_result_182550 = invoke(stypy.reporting.localization.Localization(__file__, 2314, 17), func_182544, *[result_add_182548], **kwargs_182549)
    
    # Assigning a type to the variable 'fw' (line 2314)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2314, 12), 'fw', func_call_result_182550)
    
    # Getting the type of 'funcalls' (line 2315)
    funcalls_182551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 12), 'funcalls')
    int_182552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2315, 24), 'int')
    # Applying the binary operator '+=' (line 2315)
    result_iadd_182553 = python_operator(stypy.reporting.localization.Localization(__file__, 2315, 12), '+=', funcalls_182551, int_182552)
    # Assigning a type to the variable 'funcalls' (line 2315)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2315, 12), 'funcalls', result_iadd_182553)
    
    
    
    # Getting the type of 'fw' (line 2316)
    fw_182554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 16), 'fw')
    # Getting the type of 'fc' (line 2316)
    fc_182555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 21), 'fc')
    # Applying the binary operator '<' (line 2316)
    result_lt_182556 = python_operator(stypy.reporting.localization.Localization(__file__, 2316, 16), '<', fw_182554, fc_182555)
    
    # Testing the type of an if condition (line 2316)
    if_condition_182557 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2316, 12), result_lt_182556)
    # Assigning a type to the variable 'if_condition_182557' (line 2316)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2316, 12), 'if_condition_182557', if_condition_182557)
    # SSA begins for if statement (line 2316)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2317):
    
    # Assigning a Name to a Name (line 2317):
    # Getting the type of 'xb' (line 2317)
    xb_182558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2317, 21), 'xb')
    # Assigning a type to the variable 'xa' (line 2317)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2317, 16), 'xa', xb_182558)
    
    # Assigning a Name to a Name (line 2318):
    
    # Assigning a Name to a Name (line 2318):
    # Getting the type of 'w' (line 2318)
    w_182559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2318, 21), 'w')
    # Assigning a type to the variable 'xb' (line 2318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2318, 16), 'xb', w_182559)
    
    # Assigning a Name to a Name (line 2319):
    
    # Assigning a Name to a Name (line 2319):
    # Getting the type of 'fb' (line 2319)
    fb_182560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2319, 21), 'fb')
    # Assigning a type to the variable 'fa' (line 2319)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2319, 16), 'fa', fb_182560)
    
    # Assigning a Name to a Name (line 2320):
    
    # Assigning a Name to a Name (line 2320):
    # Getting the type of 'fw' (line 2320)
    fw_182561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2320, 21), 'fw')
    # Assigning a type to the variable 'fb' (line 2320)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2320, 16), 'fb', fw_182561)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2321)
    tuple_182562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2321, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2321)
    # Adding element type (line 2321)
    # Getting the type of 'xa' (line 2321)
    xa_182563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2321, 23), 'xa')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2321, 23), tuple_182562, xa_182563)
    # Adding element type (line 2321)
    # Getting the type of 'xb' (line 2321)
    xb_182564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2321, 27), 'xb')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2321, 23), tuple_182562, xb_182564)
    # Adding element type (line 2321)
    # Getting the type of 'xc' (line 2321)
    xc_182565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2321, 31), 'xc')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2321, 23), tuple_182562, xc_182565)
    # Adding element type (line 2321)
    # Getting the type of 'fa' (line 2321)
    fa_182566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2321, 35), 'fa')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2321, 23), tuple_182562, fa_182566)
    # Adding element type (line 2321)
    # Getting the type of 'fb' (line 2321)
    fb_182567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2321, 39), 'fb')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2321, 23), tuple_182562, fb_182567)
    # Adding element type (line 2321)
    # Getting the type of 'fc' (line 2321)
    fc_182568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2321, 43), 'fc')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2321, 23), tuple_182562, fc_182568)
    # Adding element type (line 2321)
    # Getting the type of 'funcalls' (line 2321)
    funcalls_182569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2321, 47), 'funcalls')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2321, 23), tuple_182562, funcalls_182569)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2321)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2321, 16), 'stypy_return_type', tuple_182562)
    # SSA branch for the else part of an if statement (line 2316)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'fw' (line 2322)
    fw_182570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2322, 18), 'fw')
    # Getting the type of 'fb' (line 2322)
    fb_182571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2322, 23), 'fb')
    # Applying the binary operator '>' (line 2322)
    result_gt_182572 = python_operator(stypy.reporting.localization.Localization(__file__, 2322, 18), '>', fw_182570, fb_182571)
    
    # Testing the type of an if condition (line 2322)
    if_condition_182573 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2322, 17), result_gt_182572)
    # Assigning a type to the variable 'if_condition_182573' (line 2322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2322, 17), 'if_condition_182573', if_condition_182573)
    # SSA begins for if statement (line 2322)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2323):
    
    # Assigning a Name to a Name (line 2323):
    # Getting the type of 'w' (line 2323)
    w_182574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2323, 21), 'w')
    # Assigning a type to the variable 'xc' (line 2323)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2323, 16), 'xc', w_182574)
    
    # Assigning a Name to a Name (line 2324):
    
    # Assigning a Name to a Name (line 2324):
    # Getting the type of 'fw' (line 2324)
    fw_182575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2324, 21), 'fw')
    # Assigning a type to the variable 'fc' (line 2324)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2324, 16), 'fc', fw_182575)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2325)
    tuple_182576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2325, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2325)
    # Adding element type (line 2325)
    # Getting the type of 'xa' (line 2325)
    xa_182577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2325, 23), 'xa')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2325, 23), tuple_182576, xa_182577)
    # Adding element type (line 2325)
    # Getting the type of 'xb' (line 2325)
    xb_182578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2325, 27), 'xb')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2325, 23), tuple_182576, xb_182578)
    # Adding element type (line 2325)
    # Getting the type of 'xc' (line 2325)
    xc_182579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2325, 31), 'xc')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2325, 23), tuple_182576, xc_182579)
    # Adding element type (line 2325)
    # Getting the type of 'fa' (line 2325)
    fa_182580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2325, 35), 'fa')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2325, 23), tuple_182576, fa_182580)
    # Adding element type (line 2325)
    # Getting the type of 'fb' (line 2325)
    fb_182581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2325, 39), 'fb')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2325, 23), tuple_182576, fb_182581)
    # Adding element type (line 2325)
    # Getting the type of 'fc' (line 2325)
    fc_182582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2325, 43), 'fc')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2325, 23), tuple_182576, fc_182582)
    # Adding element type (line 2325)
    # Getting the type of 'funcalls' (line 2325)
    funcalls_182583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2325, 47), 'funcalls')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2325, 23), tuple_182576, funcalls_182583)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2325)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2325, 16), 'stypy_return_type', tuple_182576)
    # SSA join for if statement (line 2322)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2316)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 2326):
    
    # Assigning a BinOp to a Name (line 2326):
    # Getting the type of 'xc' (line 2326)
    xc_182584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2326, 16), 'xc')
    # Getting the type of '_gold' (line 2326)
    _gold_182585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2326, 21), '_gold')
    # Getting the type of 'xc' (line 2326)
    xc_182586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2326, 30), 'xc')
    # Getting the type of 'xb' (line 2326)
    xb_182587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2326, 35), 'xb')
    # Applying the binary operator '-' (line 2326)
    result_sub_182588 = python_operator(stypy.reporting.localization.Localization(__file__, 2326, 30), '-', xc_182586, xb_182587)
    
    # Applying the binary operator '*' (line 2326)
    result_mul_182589 = python_operator(stypy.reporting.localization.Localization(__file__, 2326, 21), '*', _gold_182585, result_sub_182588)
    
    # Applying the binary operator '+' (line 2326)
    result_add_182590 = python_operator(stypy.reporting.localization.Localization(__file__, 2326, 16), '+', xc_182584, result_mul_182589)
    
    # Assigning a type to the variable 'w' (line 2326)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2326, 12), 'w', result_add_182590)
    
    # Assigning a Call to a Name (line 2327):
    
    # Assigning a Call to a Name (line 2327):
    
    # Call to func(...): (line 2327)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2327)
    tuple_182592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2327, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2327)
    # Adding element type (line 2327)
    # Getting the type of 'w' (line 2327)
    w_182593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 25), 'w', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2327, 25), tuple_182592, w_182593)
    
    # Getting the type of 'args' (line 2327)
    args_182594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 31), 'args', False)
    # Applying the binary operator '+' (line 2327)
    result_add_182595 = python_operator(stypy.reporting.localization.Localization(__file__, 2327, 24), '+', tuple_182592, args_182594)
    
    # Processing the call keyword arguments (line 2327)
    kwargs_182596 = {}
    # Getting the type of 'func' (line 2327)
    func_182591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 17), 'func', False)
    # Calling func(args, kwargs) (line 2327)
    func_call_result_182597 = invoke(stypy.reporting.localization.Localization(__file__, 2327, 17), func_182591, *[result_add_182595], **kwargs_182596)
    
    # Assigning a type to the variable 'fw' (line 2327)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2327, 12), 'fw', func_call_result_182597)
    
    # Getting the type of 'funcalls' (line 2328)
    funcalls_182598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2328, 12), 'funcalls')
    int_182599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2328, 24), 'int')
    # Applying the binary operator '+=' (line 2328)
    result_iadd_182600 = python_operator(stypy.reporting.localization.Localization(__file__, 2328, 12), '+=', funcalls_182598, int_182599)
    # Assigning a type to the variable 'funcalls' (line 2328)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2328, 12), 'funcalls', result_iadd_182600)
    
    # SSA branch for the else part of an if statement (line 2313)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'w' (line 2329)
    w_182601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2329, 14), 'w')
    # Getting the type of 'wlim' (line 2329)
    wlim_182602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2329, 18), 'wlim')
    # Applying the binary operator '-' (line 2329)
    result_sub_182603 = python_operator(stypy.reporting.localization.Localization(__file__, 2329, 14), '-', w_182601, wlim_182602)
    
    # Getting the type of 'wlim' (line 2329)
    wlim_182604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2329, 25), 'wlim')
    # Getting the type of 'xc' (line 2329)
    xc_182605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2329, 32), 'xc')
    # Applying the binary operator '-' (line 2329)
    result_sub_182606 = python_operator(stypy.reporting.localization.Localization(__file__, 2329, 25), '-', wlim_182604, xc_182605)
    
    # Applying the binary operator '*' (line 2329)
    result_mul_182607 = python_operator(stypy.reporting.localization.Localization(__file__, 2329, 13), '*', result_sub_182603, result_sub_182606)
    
    float_182608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2329, 39), 'float')
    # Applying the binary operator '>=' (line 2329)
    result_ge_182609 = python_operator(stypy.reporting.localization.Localization(__file__, 2329, 13), '>=', result_mul_182607, float_182608)
    
    # Testing the type of an if condition (line 2329)
    if_condition_182610 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2329, 13), result_ge_182609)
    # Assigning a type to the variable 'if_condition_182610' (line 2329)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2329, 13), 'if_condition_182610', if_condition_182610)
    # SSA begins for if statement (line 2329)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2330):
    
    # Assigning a Name to a Name (line 2330):
    # Getting the type of 'wlim' (line 2330)
    wlim_182611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 16), 'wlim')
    # Assigning a type to the variable 'w' (line 2330)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2330, 12), 'w', wlim_182611)
    
    # Assigning a Call to a Name (line 2331):
    
    # Assigning a Call to a Name (line 2331):
    
    # Call to func(...): (line 2331)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2331)
    tuple_182613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2331, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2331)
    # Adding element type (line 2331)
    # Getting the type of 'w' (line 2331)
    w_182614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2331, 25), 'w', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2331, 25), tuple_182613, w_182614)
    
    # Getting the type of 'args' (line 2331)
    args_182615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2331, 31), 'args', False)
    # Applying the binary operator '+' (line 2331)
    result_add_182616 = python_operator(stypy.reporting.localization.Localization(__file__, 2331, 24), '+', tuple_182613, args_182615)
    
    # Processing the call keyword arguments (line 2331)
    kwargs_182617 = {}
    # Getting the type of 'func' (line 2331)
    func_182612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2331, 17), 'func', False)
    # Calling func(args, kwargs) (line 2331)
    func_call_result_182618 = invoke(stypy.reporting.localization.Localization(__file__, 2331, 17), func_182612, *[result_add_182616], **kwargs_182617)
    
    # Assigning a type to the variable 'fw' (line 2331)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2331, 12), 'fw', func_call_result_182618)
    
    # Getting the type of 'funcalls' (line 2332)
    funcalls_182619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 12), 'funcalls')
    int_182620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2332, 24), 'int')
    # Applying the binary operator '+=' (line 2332)
    result_iadd_182621 = python_operator(stypy.reporting.localization.Localization(__file__, 2332, 12), '+=', funcalls_182619, int_182620)
    # Assigning a type to the variable 'funcalls' (line 2332)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2332, 12), 'funcalls', result_iadd_182621)
    
    # SSA branch for the else part of an if statement (line 2329)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'w' (line 2333)
    w_182622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 14), 'w')
    # Getting the type of 'wlim' (line 2333)
    wlim_182623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 18), 'wlim')
    # Applying the binary operator '-' (line 2333)
    result_sub_182624 = python_operator(stypy.reporting.localization.Localization(__file__, 2333, 14), '-', w_182622, wlim_182623)
    
    # Getting the type of 'xc' (line 2333)
    xc_182625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 25), 'xc')
    # Getting the type of 'w' (line 2333)
    w_182626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 30), 'w')
    # Applying the binary operator '-' (line 2333)
    result_sub_182627 = python_operator(stypy.reporting.localization.Localization(__file__, 2333, 25), '-', xc_182625, w_182626)
    
    # Applying the binary operator '*' (line 2333)
    result_mul_182628 = python_operator(stypy.reporting.localization.Localization(__file__, 2333, 13), '*', result_sub_182624, result_sub_182627)
    
    float_182629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2333, 35), 'float')
    # Applying the binary operator '>' (line 2333)
    result_gt_182630 = python_operator(stypy.reporting.localization.Localization(__file__, 2333, 13), '>', result_mul_182628, float_182629)
    
    # Testing the type of an if condition (line 2333)
    if_condition_182631 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2333, 13), result_gt_182630)
    # Assigning a type to the variable 'if_condition_182631' (line 2333)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2333, 13), 'if_condition_182631', if_condition_182631)
    # SSA begins for if statement (line 2333)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2334):
    
    # Assigning a Call to a Name (line 2334):
    
    # Call to func(...): (line 2334)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2334)
    tuple_182633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2334, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2334)
    # Adding element type (line 2334)
    # Getting the type of 'w' (line 2334)
    w_182634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2334, 25), 'w', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2334, 25), tuple_182633, w_182634)
    
    # Getting the type of 'args' (line 2334)
    args_182635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2334, 31), 'args', False)
    # Applying the binary operator '+' (line 2334)
    result_add_182636 = python_operator(stypy.reporting.localization.Localization(__file__, 2334, 24), '+', tuple_182633, args_182635)
    
    # Processing the call keyword arguments (line 2334)
    kwargs_182637 = {}
    # Getting the type of 'func' (line 2334)
    func_182632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2334, 17), 'func', False)
    # Calling func(args, kwargs) (line 2334)
    func_call_result_182638 = invoke(stypy.reporting.localization.Localization(__file__, 2334, 17), func_182632, *[result_add_182636], **kwargs_182637)
    
    # Assigning a type to the variable 'fw' (line 2334)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2334, 12), 'fw', func_call_result_182638)
    
    # Getting the type of 'funcalls' (line 2335)
    funcalls_182639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2335, 12), 'funcalls')
    int_182640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2335, 24), 'int')
    # Applying the binary operator '+=' (line 2335)
    result_iadd_182641 = python_operator(stypy.reporting.localization.Localization(__file__, 2335, 12), '+=', funcalls_182639, int_182640)
    # Assigning a type to the variable 'funcalls' (line 2335)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2335, 12), 'funcalls', result_iadd_182641)
    
    
    
    # Getting the type of 'fw' (line 2336)
    fw_182642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2336, 16), 'fw')
    # Getting the type of 'fc' (line 2336)
    fc_182643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2336, 21), 'fc')
    # Applying the binary operator '<' (line 2336)
    result_lt_182644 = python_operator(stypy.reporting.localization.Localization(__file__, 2336, 16), '<', fw_182642, fc_182643)
    
    # Testing the type of an if condition (line 2336)
    if_condition_182645 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2336, 12), result_lt_182644)
    # Assigning a type to the variable 'if_condition_182645' (line 2336)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2336, 12), 'if_condition_182645', if_condition_182645)
    # SSA begins for if statement (line 2336)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2337):
    
    # Assigning a Name to a Name (line 2337):
    # Getting the type of 'xc' (line 2337)
    xc_182646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2337, 21), 'xc')
    # Assigning a type to the variable 'xb' (line 2337)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2337, 16), 'xb', xc_182646)
    
    # Assigning a Name to a Name (line 2338):
    
    # Assigning a Name to a Name (line 2338):
    # Getting the type of 'w' (line 2338)
    w_182647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2338, 21), 'w')
    # Assigning a type to the variable 'xc' (line 2338)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2338, 16), 'xc', w_182647)
    
    # Assigning a BinOp to a Name (line 2339):
    
    # Assigning a BinOp to a Name (line 2339):
    # Getting the type of 'xc' (line 2339)
    xc_182648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2339, 20), 'xc')
    # Getting the type of '_gold' (line 2339)
    _gold_182649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2339, 25), '_gold')
    # Getting the type of 'xc' (line 2339)
    xc_182650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2339, 34), 'xc')
    # Getting the type of 'xb' (line 2339)
    xb_182651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2339, 39), 'xb')
    # Applying the binary operator '-' (line 2339)
    result_sub_182652 = python_operator(stypy.reporting.localization.Localization(__file__, 2339, 34), '-', xc_182650, xb_182651)
    
    # Applying the binary operator '*' (line 2339)
    result_mul_182653 = python_operator(stypy.reporting.localization.Localization(__file__, 2339, 25), '*', _gold_182649, result_sub_182652)
    
    # Applying the binary operator '+' (line 2339)
    result_add_182654 = python_operator(stypy.reporting.localization.Localization(__file__, 2339, 20), '+', xc_182648, result_mul_182653)
    
    # Assigning a type to the variable 'w' (line 2339)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2339, 16), 'w', result_add_182654)
    
    # Assigning a Name to a Name (line 2340):
    
    # Assigning a Name to a Name (line 2340):
    # Getting the type of 'fc' (line 2340)
    fc_182655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2340, 21), 'fc')
    # Assigning a type to the variable 'fb' (line 2340)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2340, 16), 'fb', fc_182655)
    
    # Assigning a Name to a Name (line 2341):
    
    # Assigning a Name to a Name (line 2341):
    # Getting the type of 'fw' (line 2341)
    fw_182656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2341, 21), 'fw')
    # Assigning a type to the variable 'fc' (line 2341)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2341, 16), 'fc', fw_182656)
    
    # Assigning a Call to a Name (line 2342):
    
    # Assigning a Call to a Name (line 2342):
    
    # Call to func(...): (line 2342)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2342)
    tuple_182658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2342, 29), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2342)
    # Adding element type (line 2342)
    # Getting the type of 'w' (line 2342)
    w_182659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2342, 29), 'w', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2342, 29), tuple_182658, w_182659)
    
    # Getting the type of 'args' (line 2342)
    args_182660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2342, 35), 'args', False)
    # Applying the binary operator '+' (line 2342)
    result_add_182661 = python_operator(stypy.reporting.localization.Localization(__file__, 2342, 28), '+', tuple_182658, args_182660)
    
    # Processing the call keyword arguments (line 2342)
    kwargs_182662 = {}
    # Getting the type of 'func' (line 2342)
    func_182657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2342, 21), 'func', False)
    # Calling func(args, kwargs) (line 2342)
    func_call_result_182663 = invoke(stypy.reporting.localization.Localization(__file__, 2342, 21), func_182657, *[result_add_182661], **kwargs_182662)
    
    # Assigning a type to the variable 'fw' (line 2342)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2342, 16), 'fw', func_call_result_182663)
    
    # Getting the type of 'funcalls' (line 2343)
    funcalls_182664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2343, 16), 'funcalls')
    int_182665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2343, 28), 'int')
    # Applying the binary operator '+=' (line 2343)
    result_iadd_182666 = python_operator(stypy.reporting.localization.Localization(__file__, 2343, 16), '+=', funcalls_182664, int_182665)
    # Assigning a type to the variable 'funcalls' (line 2343)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2343, 16), 'funcalls', result_iadd_182666)
    
    # SSA join for if statement (line 2336)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 2333)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 2345):
    
    # Assigning a BinOp to a Name (line 2345):
    # Getting the type of 'xc' (line 2345)
    xc_182667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2345, 16), 'xc')
    # Getting the type of '_gold' (line 2345)
    _gold_182668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2345, 21), '_gold')
    # Getting the type of 'xc' (line 2345)
    xc_182669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2345, 30), 'xc')
    # Getting the type of 'xb' (line 2345)
    xb_182670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2345, 35), 'xb')
    # Applying the binary operator '-' (line 2345)
    result_sub_182671 = python_operator(stypy.reporting.localization.Localization(__file__, 2345, 30), '-', xc_182669, xb_182670)
    
    # Applying the binary operator '*' (line 2345)
    result_mul_182672 = python_operator(stypy.reporting.localization.Localization(__file__, 2345, 21), '*', _gold_182668, result_sub_182671)
    
    # Applying the binary operator '+' (line 2345)
    result_add_182673 = python_operator(stypy.reporting.localization.Localization(__file__, 2345, 16), '+', xc_182667, result_mul_182672)
    
    # Assigning a type to the variable 'w' (line 2345)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2345, 12), 'w', result_add_182673)
    
    # Assigning a Call to a Name (line 2346):
    
    # Assigning a Call to a Name (line 2346):
    
    # Call to func(...): (line 2346)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2346)
    tuple_182675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2346, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2346)
    # Adding element type (line 2346)
    # Getting the type of 'w' (line 2346)
    w_182676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 25), 'w', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2346, 25), tuple_182675, w_182676)
    
    # Getting the type of 'args' (line 2346)
    args_182677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 31), 'args', False)
    # Applying the binary operator '+' (line 2346)
    result_add_182678 = python_operator(stypy.reporting.localization.Localization(__file__, 2346, 24), '+', tuple_182675, args_182677)
    
    # Processing the call keyword arguments (line 2346)
    kwargs_182679 = {}
    # Getting the type of 'func' (line 2346)
    func_182674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 17), 'func', False)
    # Calling func(args, kwargs) (line 2346)
    func_call_result_182680 = invoke(stypy.reporting.localization.Localization(__file__, 2346, 17), func_182674, *[result_add_182678], **kwargs_182679)
    
    # Assigning a type to the variable 'fw' (line 2346)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2346, 12), 'fw', func_call_result_182680)
    
    # Getting the type of 'funcalls' (line 2347)
    funcalls_182681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2347, 12), 'funcalls')
    int_182682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2347, 24), 'int')
    # Applying the binary operator '+=' (line 2347)
    result_iadd_182683 = python_operator(stypy.reporting.localization.Localization(__file__, 2347, 12), '+=', funcalls_182681, int_182682)
    # Assigning a type to the variable 'funcalls' (line 2347)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2347, 12), 'funcalls', result_iadd_182683)
    
    # SSA join for if statement (line 2333)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2329)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2313)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 2348):
    
    # Assigning a Name to a Name (line 2348):
    # Getting the type of 'xb' (line 2348)
    xb_182684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2348, 13), 'xb')
    # Assigning a type to the variable 'xa' (line 2348)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2348, 8), 'xa', xb_182684)
    
    # Assigning a Name to a Name (line 2349):
    
    # Assigning a Name to a Name (line 2349):
    # Getting the type of 'xc' (line 2349)
    xc_182685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2349, 13), 'xc')
    # Assigning a type to the variable 'xb' (line 2349)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2349, 8), 'xb', xc_182685)
    
    # Assigning a Name to a Name (line 2350):
    
    # Assigning a Name to a Name (line 2350):
    # Getting the type of 'w' (line 2350)
    w_182686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2350, 13), 'w')
    # Assigning a type to the variable 'xc' (line 2350)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2350, 8), 'xc', w_182686)
    
    # Assigning a Name to a Name (line 2351):
    
    # Assigning a Name to a Name (line 2351):
    # Getting the type of 'fb' (line 2351)
    fb_182687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 13), 'fb')
    # Assigning a type to the variable 'fa' (line 2351)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2351, 8), 'fa', fb_182687)
    
    # Assigning a Name to a Name (line 2352):
    
    # Assigning a Name to a Name (line 2352):
    # Getting the type of 'fc' (line 2352)
    fc_182688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 13), 'fc')
    # Assigning a type to the variable 'fb' (line 2352)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2352, 8), 'fb', fc_182688)
    
    # Assigning a Name to a Name (line 2353):
    
    # Assigning a Name to a Name (line 2353):
    # Getting the type of 'fw' (line 2353)
    fw_182689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 13), 'fw')
    # Assigning a type to the variable 'fc' (line 2353)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2353, 8), 'fc', fw_182689)
    # SSA join for while statement (line 2300)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2354)
    tuple_182690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2354, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2354)
    # Adding element type (line 2354)
    # Getting the type of 'xa' (line 2354)
    xa_182691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2354, 11), 'xa')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2354, 11), tuple_182690, xa_182691)
    # Adding element type (line 2354)
    # Getting the type of 'xb' (line 2354)
    xb_182692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2354, 15), 'xb')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2354, 11), tuple_182690, xb_182692)
    # Adding element type (line 2354)
    # Getting the type of 'xc' (line 2354)
    xc_182693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2354, 19), 'xc')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2354, 11), tuple_182690, xc_182693)
    # Adding element type (line 2354)
    # Getting the type of 'fa' (line 2354)
    fa_182694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2354, 23), 'fa')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2354, 11), tuple_182690, fa_182694)
    # Adding element type (line 2354)
    # Getting the type of 'fb' (line 2354)
    fb_182695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2354, 27), 'fb')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2354, 11), tuple_182690, fb_182695)
    # Adding element type (line 2354)
    # Getting the type of 'fc' (line 2354)
    fc_182696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2354, 31), 'fc')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2354, 11), tuple_182690, fc_182696)
    # Adding element type (line 2354)
    # Getting the type of 'funcalls' (line 2354)
    funcalls_182697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2354, 35), 'funcalls')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2354, 11), tuple_182690, funcalls_182697)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2354)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2354, 4), 'stypy_return_type', tuple_182690)
    
    # ################# End of 'bracket(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'bracket' in the type store
    # Getting the type of 'stypy_return_type' (line 2256)
    stypy_return_type_182698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_182698)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'bracket'
    return stypy_return_type_182698

# Assigning a type to the variable 'bracket' (line 2256)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2256, 0), 'bracket', bracket)

@norecursion
def _linesearch_powell(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_182699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2357, 40), 'float')
    defaults = [float_182699]
    # Create a new context for function '_linesearch_powell'
    module_type_store = module_type_store.open_function_context('_linesearch_powell', 2357, 0, False)
    
    # Passed parameters checking function
    _linesearch_powell.stypy_localization = localization
    _linesearch_powell.stypy_type_of_self = None
    _linesearch_powell.stypy_type_store = module_type_store
    _linesearch_powell.stypy_function_name = '_linesearch_powell'
    _linesearch_powell.stypy_param_names_list = ['func', 'p', 'xi', 'tol']
    _linesearch_powell.stypy_varargs_param_name = None
    _linesearch_powell.stypy_kwargs_param_name = None
    _linesearch_powell.stypy_call_defaults = defaults
    _linesearch_powell.stypy_call_varargs = varargs
    _linesearch_powell.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_linesearch_powell', ['func', 'p', 'xi', 'tol'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_linesearch_powell', localization, ['func', 'p', 'xi', 'tol'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_linesearch_powell(...)' code ##################

    str_182700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2362, (-1)), 'str', 'Line-search algorithm using fminbound.\n\n    Find the minimium of the function ``func(x0+ alpha*direc)``.\n\n    ')

    @norecursion
    def myfunc(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'myfunc'
        module_type_store = module_type_store.open_function_context('myfunc', 2363, 4, False)
        
        # Passed parameters checking function
        myfunc.stypy_localization = localization
        myfunc.stypy_type_of_self = None
        myfunc.stypy_type_store = module_type_store
        myfunc.stypy_function_name = 'myfunc'
        myfunc.stypy_param_names_list = ['alpha']
        myfunc.stypy_varargs_param_name = None
        myfunc.stypy_kwargs_param_name = None
        myfunc.stypy_call_defaults = defaults
        myfunc.stypy_call_varargs = varargs
        myfunc.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'myfunc', ['alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'myfunc', localization, ['alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'myfunc(...)' code ##################

        
        # Call to func(...): (line 2364)
        # Processing the call arguments (line 2364)
        # Getting the type of 'p' (line 2364)
        p_182702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2364, 20), 'p', False)
        # Getting the type of 'alpha' (line 2364)
        alpha_182703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2364, 24), 'alpha', False)
        # Getting the type of 'xi' (line 2364)
        xi_182704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2364, 30), 'xi', False)
        # Applying the binary operator '*' (line 2364)
        result_mul_182705 = python_operator(stypy.reporting.localization.Localization(__file__, 2364, 24), '*', alpha_182703, xi_182704)
        
        # Applying the binary operator '+' (line 2364)
        result_add_182706 = python_operator(stypy.reporting.localization.Localization(__file__, 2364, 20), '+', p_182702, result_mul_182705)
        
        # Processing the call keyword arguments (line 2364)
        kwargs_182707 = {}
        # Getting the type of 'func' (line 2364)
        func_182701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2364, 15), 'func', False)
        # Calling func(args, kwargs) (line 2364)
        func_call_result_182708 = invoke(stypy.reporting.localization.Localization(__file__, 2364, 15), func_182701, *[result_add_182706], **kwargs_182707)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2364)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2364, 8), 'stypy_return_type', func_call_result_182708)
        
        # ################# End of 'myfunc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'myfunc' in the type store
        # Getting the type of 'stypy_return_type' (line 2363)
        stypy_return_type_182709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2363, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_182709)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'myfunc'
        return stypy_return_type_182709

    # Assigning a type to the variable 'myfunc' (line 2363)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2363, 4), 'myfunc', myfunc)
    
    # Assigning a Call to a Tuple (line 2365):
    
    # Assigning a Subscript to a Name (line 2365):
    
    # Obtaining the type of the subscript
    int_182710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2365, 4), 'int')
    
    # Call to brent(...): (line 2365)
    # Processing the call arguments (line 2365)
    # Getting the type of 'myfunc' (line 2365)
    myfunc_182712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 39), 'myfunc', False)
    # Processing the call keyword arguments (line 2365)
    int_182713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2365, 59), 'int')
    keyword_182714 = int_182713
    # Getting the type of 'tol' (line 2365)
    tol_182715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 66), 'tol', False)
    keyword_182716 = tol_182715
    kwargs_182717 = {'tol': keyword_182716, 'full_output': keyword_182714}
    # Getting the type of 'brent' (line 2365)
    brent_182711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 33), 'brent', False)
    # Calling brent(args, kwargs) (line 2365)
    brent_call_result_182718 = invoke(stypy.reporting.localization.Localization(__file__, 2365, 33), brent_182711, *[myfunc_182712], **kwargs_182717)
    
    # Obtaining the member '__getitem__' of a type (line 2365)
    getitem___182719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2365, 4), brent_call_result_182718, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2365)
    subscript_call_result_182720 = invoke(stypy.reporting.localization.Localization(__file__, 2365, 4), getitem___182719, int_182710)
    
    # Assigning a type to the variable 'tuple_var_assignment_176736' (line 2365)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2365, 4), 'tuple_var_assignment_176736', subscript_call_result_182720)
    
    # Assigning a Subscript to a Name (line 2365):
    
    # Obtaining the type of the subscript
    int_182721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2365, 4), 'int')
    
    # Call to brent(...): (line 2365)
    # Processing the call arguments (line 2365)
    # Getting the type of 'myfunc' (line 2365)
    myfunc_182723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 39), 'myfunc', False)
    # Processing the call keyword arguments (line 2365)
    int_182724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2365, 59), 'int')
    keyword_182725 = int_182724
    # Getting the type of 'tol' (line 2365)
    tol_182726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 66), 'tol', False)
    keyword_182727 = tol_182726
    kwargs_182728 = {'tol': keyword_182727, 'full_output': keyword_182725}
    # Getting the type of 'brent' (line 2365)
    brent_182722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 33), 'brent', False)
    # Calling brent(args, kwargs) (line 2365)
    brent_call_result_182729 = invoke(stypy.reporting.localization.Localization(__file__, 2365, 33), brent_182722, *[myfunc_182723], **kwargs_182728)
    
    # Obtaining the member '__getitem__' of a type (line 2365)
    getitem___182730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2365, 4), brent_call_result_182729, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2365)
    subscript_call_result_182731 = invoke(stypy.reporting.localization.Localization(__file__, 2365, 4), getitem___182730, int_182721)
    
    # Assigning a type to the variable 'tuple_var_assignment_176737' (line 2365)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2365, 4), 'tuple_var_assignment_176737', subscript_call_result_182731)
    
    # Assigning a Subscript to a Name (line 2365):
    
    # Obtaining the type of the subscript
    int_182732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2365, 4), 'int')
    
    # Call to brent(...): (line 2365)
    # Processing the call arguments (line 2365)
    # Getting the type of 'myfunc' (line 2365)
    myfunc_182734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 39), 'myfunc', False)
    # Processing the call keyword arguments (line 2365)
    int_182735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2365, 59), 'int')
    keyword_182736 = int_182735
    # Getting the type of 'tol' (line 2365)
    tol_182737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 66), 'tol', False)
    keyword_182738 = tol_182737
    kwargs_182739 = {'tol': keyword_182738, 'full_output': keyword_182736}
    # Getting the type of 'brent' (line 2365)
    brent_182733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 33), 'brent', False)
    # Calling brent(args, kwargs) (line 2365)
    brent_call_result_182740 = invoke(stypy.reporting.localization.Localization(__file__, 2365, 33), brent_182733, *[myfunc_182734], **kwargs_182739)
    
    # Obtaining the member '__getitem__' of a type (line 2365)
    getitem___182741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2365, 4), brent_call_result_182740, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2365)
    subscript_call_result_182742 = invoke(stypy.reporting.localization.Localization(__file__, 2365, 4), getitem___182741, int_182732)
    
    # Assigning a type to the variable 'tuple_var_assignment_176738' (line 2365)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2365, 4), 'tuple_var_assignment_176738', subscript_call_result_182742)
    
    # Assigning a Subscript to a Name (line 2365):
    
    # Obtaining the type of the subscript
    int_182743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2365, 4), 'int')
    
    # Call to brent(...): (line 2365)
    # Processing the call arguments (line 2365)
    # Getting the type of 'myfunc' (line 2365)
    myfunc_182745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 39), 'myfunc', False)
    # Processing the call keyword arguments (line 2365)
    int_182746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2365, 59), 'int')
    keyword_182747 = int_182746
    # Getting the type of 'tol' (line 2365)
    tol_182748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 66), 'tol', False)
    keyword_182749 = tol_182748
    kwargs_182750 = {'tol': keyword_182749, 'full_output': keyword_182747}
    # Getting the type of 'brent' (line 2365)
    brent_182744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 33), 'brent', False)
    # Calling brent(args, kwargs) (line 2365)
    brent_call_result_182751 = invoke(stypy.reporting.localization.Localization(__file__, 2365, 33), brent_182744, *[myfunc_182745], **kwargs_182750)
    
    # Obtaining the member '__getitem__' of a type (line 2365)
    getitem___182752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2365, 4), brent_call_result_182751, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2365)
    subscript_call_result_182753 = invoke(stypy.reporting.localization.Localization(__file__, 2365, 4), getitem___182752, int_182743)
    
    # Assigning a type to the variable 'tuple_var_assignment_176739' (line 2365)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2365, 4), 'tuple_var_assignment_176739', subscript_call_result_182753)
    
    # Assigning a Name to a Name (line 2365):
    # Getting the type of 'tuple_var_assignment_176736' (line 2365)
    tuple_var_assignment_176736_182754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 4), 'tuple_var_assignment_176736')
    # Assigning a type to the variable 'alpha_min' (line 2365)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2365, 4), 'alpha_min', tuple_var_assignment_176736_182754)
    
    # Assigning a Name to a Name (line 2365):
    # Getting the type of 'tuple_var_assignment_176737' (line 2365)
    tuple_var_assignment_176737_182755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 4), 'tuple_var_assignment_176737')
    # Assigning a type to the variable 'fret' (line 2365)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2365, 15), 'fret', tuple_var_assignment_176737_182755)
    
    # Assigning a Name to a Name (line 2365):
    # Getting the type of 'tuple_var_assignment_176738' (line 2365)
    tuple_var_assignment_176738_182756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 4), 'tuple_var_assignment_176738')
    # Assigning a type to the variable 'iter' (line 2365)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2365, 21), 'iter', tuple_var_assignment_176738_182756)
    
    # Assigning a Name to a Name (line 2365):
    # Getting the type of 'tuple_var_assignment_176739' (line 2365)
    tuple_var_assignment_176739_182757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 4), 'tuple_var_assignment_176739')
    # Assigning a type to the variable 'num' (line 2365)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2365, 27), 'num', tuple_var_assignment_176739_182757)
    
    # Assigning a BinOp to a Name (line 2366):
    
    # Assigning a BinOp to a Name (line 2366):
    # Getting the type of 'alpha_min' (line 2366)
    alpha_min_182758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2366, 9), 'alpha_min')
    # Getting the type of 'xi' (line 2366)
    xi_182759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2366, 19), 'xi')
    # Applying the binary operator '*' (line 2366)
    result_mul_182760 = python_operator(stypy.reporting.localization.Localization(__file__, 2366, 9), '*', alpha_min_182758, xi_182759)
    
    # Assigning a type to the variable 'xi' (line 2366)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2366, 4), 'xi', result_mul_182760)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2367)
    tuple_182761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2367, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2367)
    # Adding element type (line 2367)
    
    # Call to squeeze(...): (line 2367)
    # Processing the call arguments (line 2367)
    # Getting the type of 'fret' (line 2367)
    fret_182763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2367, 19), 'fret', False)
    # Processing the call keyword arguments (line 2367)
    kwargs_182764 = {}
    # Getting the type of 'squeeze' (line 2367)
    squeeze_182762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2367, 11), 'squeeze', False)
    # Calling squeeze(args, kwargs) (line 2367)
    squeeze_call_result_182765 = invoke(stypy.reporting.localization.Localization(__file__, 2367, 11), squeeze_182762, *[fret_182763], **kwargs_182764)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2367, 11), tuple_182761, squeeze_call_result_182765)
    # Adding element type (line 2367)
    # Getting the type of 'p' (line 2367)
    p_182766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2367, 26), 'p')
    # Getting the type of 'xi' (line 2367)
    xi_182767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2367, 30), 'xi')
    # Applying the binary operator '+' (line 2367)
    result_add_182768 = python_operator(stypy.reporting.localization.Localization(__file__, 2367, 26), '+', p_182766, xi_182767)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2367, 11), tuple_182761, result_add_182768)
    # Adding element type (line 2367)
    # Getting the type of 'xi' (line 2367)
    xi_182769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2367, 34), 'xi')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2367, 11), tuple_182761, xi_182769)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2367)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2367, 4), 'stypy_return_type', tuple_182761)
    
    # ################# End of '_linesearch_powell(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_linesearch_powell' in the type store
    # Getting the type of 'stypy_return_type' (line 2357)
    stypy_return_type_182770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_182770)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_linesearch_powell'
    return stypy_return_type_182770

# Assigning a type to the variable '_linesearch_powell' (line 2357)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2357, 0), '_linesearch_powell', _linesearch_powell)

@norecursion
def fmin_powell(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 2370)
    tuple_182771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2370, 31), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2370)
    
    float_182772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2370, 40), 'float')
    float_182773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2370, 51), 'float')
    # Getting the type of 'None' (line 2370)
    None_182774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2370, 65), 'None')
    # Getting the type of 'None' (line 2371)
    None_182775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2371, 23), 'None')
    int_182776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2371, 41), 'int')
    int_182777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2371, 49), 'int')
    int_182778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2371, 59), 'int')
    # Getting the type of 'None' (line 2371)
    None_182779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2371, 71), 'None')
    # Getting the type of 'None' (line 2372)
    None_182780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 22), 'None')
    defaults = [tuple_182771, float_182772, float_182773, None_182774, None_182775, int_182776, int_182777, int_182778, None_182779, None_182780]
    # Create a new context for function 'fmin_powell'
    module_type_store = module_type_store.open_function_context('fmin_powell', 2370, 0, False)
    
    # Passed parameters checking function
    fmin_powell.stypy_localization = localization
    fmin_powell.stypy_type_of_self = None
    fmin_powell.stypy_type_store = module_type_store
    fmin_powell.stypy_function_name = 'fmin_powell'
    fmin_powell.stypy_param_names_list = ['func', 'x0', 'args', 'xtol', 'ftol', 'maxiter', 'maxfun', 'full_output', 'disp', 'retall', 'callback', 'direc']
    fmin_powell.stypy_varargs_param_name = None
    fmin_powell.stypy_kwargs_param_name = None
    fmin_powell.stypy_call_defaults = defaults
    fmin_powell.stypy_call_varargs = varargs
    fmin_powell.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fmin_powell', ['func', 'x0', 'args', 'xtol', 'ftol', 'maxiter', 'maxfun', 'full_output', 'disp', 'retall', 'callback', 'direc'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fmin_powell', localization, ['func', 'x0', 'args', 'xtol', 'ftol', 'maxiter', 'maxfun', 'full_output', 'disp', 'retall', 'callback', 'direc'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fmin_powell(...)' code ##################

    str_182781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2478, (-1)), 'str', "\n    Minimize a function using modified Powell's method. This method\n    only uses function values, not derivatives.\n\n    Parameters\n    ----------\n    func : callable f(x,*args)\n        Objective function to be minimized.\n    x0 : ndarray\n        Initial guess.\n    args : tuple, optional\n        Extra arguments passed to func.\n    callback : callable, optional\n        An optional user-supplied function, called after each\n        iteration.  Called as ``callback(xk)``, where ``xk`` is the\n        current parameter vector.\n    direc : ndarray, optional\n        Initial direction set.\n    xtol : float, optional\n        Line-search error tolerance.\n    ftol : float, optional\n        Relative error in ``func(xopt)`` acceptable for convergence.\n    maxiter : int, optional\n        Maximum number of iterations to perform.\n    maxfun : int, optional\n        Maximum number of function evaluations to make.\n    full_output : bool, optional\n        If True, fopt, xi, direc, iter, funcalls, and\n        warnflag are returned.\n    disp : bool, optional\n        If True, print convergence messages.\n    retall : bool, optional\n        If True, return a list of the solution at each iteration.\n\n    Returns\n    -------\n    xopt : ndarray\n        Parameter which minimizes `func`.\n    fopt : number\n        Value of function at minimum: ``fopt = func(xopt)``.\n    direc : ndarray\n        Current direction set.\n    iter : int\n        Number of iterations.\n    funcalls : int\n        Number of function calls made.\n    warnflag : int\n        Integer warning flag:\n            1 : Maximum number of function evaluations.\n            2 : Maximum number of iterations.\n    allvecs : list\n        List of solutions at each iteration.\n\n    See also\n    --------\n    minimize: Interface to unconstrained minimization algorithms for\n        multivariate functions. See the 'Powell' `method` in particular.\n\n    Notes\n    -----\n    Uses a modification of Powell's method to find the minimum of\n    a function of N variables. Powell's method is a conjugate\n    direction method.\n\n    The algorithm has two loops. The outer loop\n    merely iterates over the inner loop. The inner loop minimizes\n    over each current direction in the direction set. At the end\n    of the inner loop, if certain conditions are met, the direction\n    that gave the largest decrease is dropped and replaced with\n    the difference between the current estimated x and the estimated\n    x from the beginning of the inner-loop.\n\n    The technical conditions for replacing the direction of greatest\n    increase amount to checking that\n\n    1. No further gain can be made along the direction of greatest increase\n       from that iteration.\n    2. The direction of greatest increase accounted for a large sufficient\n       fraction of the decrease in the function value from that iteration of\n       the inner loop.\n\n    Examples\n    --------\n    >>> def f(x):\n    ...     return x**2\n\n    >>> from scipy import optimize\n\n    >>> minimum = optimize.fmin_powell(f, -1)\n    Optimization terminated successfully.\n             Current function value: 0.000000\n             Iterations: 2\n             Function evaluations: 18\n    >>> minimum\n    array(0.0)\n\n    References\n    ----------\n    Powell M.J.D. (1964) An efficient method for finding the minimum of a\n    function of several variables without calculating derivatives,\n    Computer Journal, 7 (2):155-162.\n\n    Press W., Teukolsky S.A., Vetterling W.T., and Flannery B.P.:\n    Numerical Recipes (any edition), Cambridge University Press\n\n    ")
    
    # Assigning a Dict to a Name (line 2479):
    
    # Assigning a Dict to a Name (line 2479):
    
    # Obtaining an instance of the builtin type 'dict' (line 2479)
    dict_182782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2479, 11), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 2479)
    # Adding element type (key, value) (line 2479)
    str_182783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2479, 12), 'str', 'xtol')
    # Getting the type of 'xtol' (line 2479)
    xtol_182784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 20), 'xtol')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2479, 11), dict_182782, (str_182783, xtol_182784))
    # Adding element type (key, value) (line 2479)
    str_182785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2480, 12), 'str', 'ftol')
    # Getting the type of 'ftol' (line 2480)
    ftol_182786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 20), 'ftol')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2479, 11), dict_182782, (str_182785, ftol_182786))
    # Adding element type (key, value) (line 2479)
    str_182787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2481, 12), 'str', 'maxiter')
    # Getting the type of 'maxiter' (line 2481)
    maxiter_182788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2481, 23), 'maxiter')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2479, 11), dict_182782, (str_182787, maxiter_182788))
    # Adding element type (key, value) (line 2479)
    str_182789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2482, 12), 'str', 'maxfev')
    # Getting the type of 'maxfun' (line 2482)
    maxfun_182790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2482, 22), 'maxfun')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2479, 11), dict_182782, (str_182789, maxfun_182790))
    # Adding element type (key, value) (line 2479)
    str_182791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2483, 12), 'str', 'disp')
    # Getting the type of 'disp' (line 2483)
    disp_182792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2483, 20), 'disp')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2479, 11), dict_182782, (str_182791, disp_182792))
    # Adding element type (key, value) (line 2479)
    str_182793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2484, 12), 'str', 'direc')
    # Getting the type of 'direc' (line 2484)
    direc_182794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2484, 21), 'direc')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2479, 11), dict_182782, (str_182793, direc_182794))
    # Adding element type (key, value) (line 2479)
    str_182795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2485, 12), 'str', 'return_all')
    # Getting the type of 'retall' (line 2485)
    retall_182796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2485, 26), 'retall')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2479, 11), dict_182782, (str_182795, retall_182796))
    
    # Assigning a type to the variable 'opts' (line 2479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2479, 4), 'opts', dict_182782)
    
    # Assigning a Call to a Name (line 2487):
    
    # Assigning a Call to a Name (line 2487):
    
    # Call to _minimize_powell(...): (line 2487)
    # Processing the call arguments (line 2487)
    # Getting the type of 'func' (line 2487)
    func_182798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2487, 27), 'func', False)
    # Getting the type of 'x0' (line 2487)
    x0_182799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2487, 33), 'x0', False)
    # Getting the type of 'args' (line 2487)
    args_182800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2487, 37), 'args', False)
    # Processing the call keyword arguments (line 2487)
    # Getting the type of 'callback' (line 2487)
    callback_182801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2487, 52), 'callback', False)
    keyword_182802 = callback_182801
    # Getting the type of 'opts' (line 2487)
    opts_182803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2487, 64), 'opts', False)
    kwargs_182804 = {'opts_182803': opts_182803, 'callback': keyword_182802}
    # Getting the type of '_minimize_powell' (line 2487)
    _minimize_powell_182797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2487, 10), '_minimize_powell', False)
    # Calling _minimize_powell(args, kwargs) (line 2487)
    _minimize_powell_call_result_182805 = invoke(stypy.reporting.localization.Localization(__file__, 2487, 10), _minimize_powell_182797, *[func_182798, x0_182799, args_182800], **kwargs_182804)
    
    # Assigning a type to the variable 'res' (line 2487)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2487, 4), 'res', _minimize_powell_call_result_182805)
    
    # Getting the type of 'full_output' (line 2489)
    full_output_182806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2489, 7), 'full_output')
    # Testing the type of an if condition (line 2489)
    if_condition_182807 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2489, 4), full_output_182806)
    # Assigning a type to the variable 'if_condition_182807' (line 2489)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2489, 4), 'if_condition_182807', if_condition_182807)
    # SSA begins for if statement (line 2489)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 2490):
    
    # Assigning a Tuple to a Name (line 2490):
    
    # Obtaining an instance of the builtin type 'tuple' (line 2490)
    tuple_182808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2490, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2490)
    # Adding element type (line 2490)
    
    # Obtaining the type of the subscript
    str_182809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2490, 23), 'str', 'x')
    # Getting the type of 'res' (line 2490)
    res_182810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 19), 'res')
    # Obtaining the member '__getitem__' of a type (line 2490)
    getitem___182811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2490, 19), res_182810, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2490)
    subscript_call_result_182812 = invoke(stypy.reporting.localization.Localization(__file__, 2490, 19), getitem___182811, str_182809)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2490, 19), tuple_182808, subscript_call_result_182812)
    # Adding element type (line 2490)
    
    # Obtaining the type of the subscript
    str_182813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2490, 33), 'str', 'fun')
    # Getting the type of 'res' (line 2490)
    res_182814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 29), 'res')
    # Obtaining the member '__getitem__' of a type (line 2490)
    getitem___182815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2490, 29), res_182814, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2490)
    subscript_call_result_182816 = invoke(stypy.reporting.localization.Localization(__file__, 2490, 29), getitem___182815, str_182813)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2490, 19), tuple_182808, subscript_call_result_182816)
    # Adding element type (line 2490)
    
    # Obtaining the type of the subscript
    str_182817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2490, 45), 'str', 'direc')
    # Getting the type of 'res' (line 2490)
    res_182818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 41), 'res')
    # Obtaining the member '__getitem__' of a type (line 2490)
    getitem___182819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2490, 41), res_182818, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2490)
    subscript_call_result_182820 = invoke(stypy.reporting.localization.Localization(__file__, 2490, 41), getitem___182819, str_182817)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2490, 19), tuple_182808, subscript_call_result_182820)
    # Adding element type (line 2490)
    
    # Obtaining the type of the subscript
    str_182821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2490, 59), 'str', 'nit')
    # Getting the type of 'res' (line 2490)
    res_182822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 55), 'res')
    # Obtaining the member '__getitem__' of a type (line 2490)
    getitem___182823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2490, 55), res_182822, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2490)
    subscript_call_result_182824 = invoke(stypy.reporting.localization.Localization(__file__, 2490, 55), getitem___182823, str_182821)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2490, 19), tuple_182808, subscript_call_result_182824)
    # Adding element type (line 2490)
    
    # Obtaining the type of the subscript
    str_182825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2491, 23), 'str', 'nfev')
    # Getting the type of 'res' (line 2491)
    res_182826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2491, 19), 'res')
    # Obtaining the member '__getitem__' of a type (line 2491)
    getitem___182827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2491, 19), res_182826, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2491)
    subscript_call_result_182828 = invoke(stypy.reporting.localization.Localization(__file__, 2491, 19), getitem___182827, str_182825)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2490, 19), tuple_182808, subscript_call_result_182828)
    # Adding element type (line 2490)
    
    # Obtaining the type of the subscript
    str_182829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2491, 36), 'str', 'status')
    # Getting the type of 'res' (line 2491)
    res_182830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2491, 32), 'res')
    # Obtaining the member '__getitem__' of a type (line 2491)
    getitem___182831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2491, 32), res_182830, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2491)
    subscript_call_result_182832 = invoke(stypy.reporting.localization.Localization(__file__, 2491, 32), getitem___182831, str_182829)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2490, 19), tuple_182808, subscript_call_result_182832)
    
    # Assigning a type to the variable 'retlist' (line 2490)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2490, 8), 'retlist', tuple_182808)
    
    # Getting the type of 'retall' (line 2492)
    retall_182833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2492, 11), 'retall')
    # Testing the type of an if condition (line 2492)
    if_condition_182834 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2492, 8), retall_182833)
    # Assigning a type to the variable 'if_condition_182834' (line 2492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2492, 8), 'if_condition_182834', if_condition_182834)
    # SSA begins for if statement (line 2492)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'retlist' (line 2493)
    retlist_182835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2493, 12), 'retlist')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2493)
    tuple_182836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2493, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2493)
    # Adding element type (line 2493)
    
    # Obtaining the type of the subscript
    str_182837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2493, 28), 'str', 'allvecs')
    # Getting the type of 'res' (line 2493)
    res_182838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2493, 24), 'res')
    # Obtaining the member '__getitem__' of a type (line 2493)
    getitem___182839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2493, 24), res_182838, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2493)
    subscript_call_result_182840 = invoke(stypy.reporting.localization.Localization(__file__, 2493, 24), getitem___182839, str_182837)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2493, 24), tuple_182836, subscript_call_result_182840)
    
    # Applying the binary operator '+=' (line 2493)
    result_iadd_182841 = python_operator(stypy.reporting.localization.Localization(__file__, 2493, 12), '+=', retlist_182835, tuple_182836)
    # Assigning a type to the variable 'retlist' (line 2493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2493, 12), 'retlist', result_iadd_182841)
    
    # SSA join for if statement (line 2492)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'retlist' (line 2494)
    retlist_182842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2494, 15), 'retlist')
    # Assigning a type to the variable 'stypy_return_type' (line 2494)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2494, 8), 'stypy_return_type', retlist_182842)
    # SSA branch for the else part of an if statement (line 2489)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'retall' (line 2496)
    retall_182843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2496, 11), 'retall')
    # Testing the type of an if condition (line 2496)
    if_condition_182844 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2496, 8), retall_182843)
    # Assigning a type to the variable 'if_condition_182844' (line 2496)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2496, 8), 'if_condition_182844', if_condition_182844)
    # SSA begins for if statement (line 2496)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2497)
    tuple_182845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2497, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2497)
    # Adding element type (line 2497)
    
    # Obtaining the type of the subscript
    str_182846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2497, 23), 'str', 'x')
    # Getting the type of 'res' (line 2497)
    res_182847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2497, 19), 'res')
    # Obtaining the member '__getitem__' of a type (line 2497)
    getitem___182848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2497, 19), res_182847, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2497)
    subscript_call_result_182849 = invoke(stypy.reporting.localization.Localization(__file__, 2497, 19), getitem___182848, str_182846)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2497, 19), tuple_182845, subscript_call_result_182849)
    # Adding element type (line 2497)
    
    # Obtaining the type of the subscript
    str_182850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2497, 33), 'str', 'allvecs')
    # Getting the type of 'res' (line 2497)
    res_182851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2497, 29), 'res')
    # Obtaining the member '__getitem__' of a type (line 2497)
    getitem___182852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2497, 29), res_182851, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2497)
    subscript_call_result_182853 = invoke(stypy.reporting.localization.Localization(__file__, 2497, 29), getitem___182852, str_182850)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2497, 19), tuple_182845, subscript_call_result_182853)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2497)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2497, 12), 'stypy_return_type', tuple_182845)
    # SSA branch for the else part of an if statement (line 2496)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining the type of the subscript
    str_182854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2499, 23), 'str', 'x')
    # Getting the type of 'res' (line 2499)
    res_182855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2499, 19), 'res')
    # Obtaining the member '__getitem__' of a type (line 2499)
    getitem___182856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2499, 19), res_182855, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2499)
    subscript_call_result_182857 = invoke(stypy.reporting.localization.Localization(__file__, 2499, 19), getitem___182856, str_182854)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2499)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2499, 12), 'stypy_return_type', subscript_call_result_182857)
    # SSA join for if statement (line 2496)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2489)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'fmin_powell(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fmin_powell' in the type store
    # Getting the type of 'stypy_return_type' (line 2370)
    stypy_return_type_182858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2370, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_182858)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fmin_powell'
    return stypy_return_type_182858

# Assigning a type to the variable 'fmin_powell' (line 2370)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2370, 0), 'fmin_powell', fmin_powell)

@norecursion
def _minimize_powell(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 2502)
    tuple_182859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2502, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2502)
    
    # Getting the type of 'None' (line 2502)
    None_182860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2502, 49), 'None')
    float_182861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2503, 26), 'float')
    float_182862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2503, 37), 'float')
    # Getting the type of 'None' (line 2503)
    None_182863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2503, 51), 'None')
    # Getting the type of 'None' (line 2503)
    None_182864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2503, 64), 'None')
    # Getting the type of 'False' (line 2504)
    False_182865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2504, 26), 'False')
    # Getting the type of 'None' (line 2504)
    None_182866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2504, 39), 'None')
    # Getting the type of 'False' (line 2504)
    False_182867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2504, 56), 'False')
    defaults = [tuple_182859, None_182860, float_182861, float_182862, None_182863, None_182864, False_182865, None_182866, False_182867]
    # Create a new context for function '_minimize_powell'
    module_type_store = module_type_store.open_function_context('_minimize_powell', 2502, 0, False)
    
    # Passed parameters checking function
    _minimize_powell.stypy_localization = localization
    _minimize_powell.stypy_type_of_self = None
    _minimize_powell.stypy_type_store = module_type_store
    _minimize_powell.stypy_function_name = '_minimize_powell'
    _minimize_powell.stypy_param_names_list = ['func', 'x0', 'args', 'callback', 'xtol', 'ftol', 'maxiter', 'maxfev', 'disp', 'direc', 'return_all']
    _minimize_powell.stypy_varargs_param_name = None
    _minimize_powell.stypy_kwargs_param_name = 'unknown_options'
    _minimize_powell.stypy_call_defaults = defaults
    _minimize_powell.stypy_call_varargs = varargs
    _minimize_powell.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_minimize_powell', ['func', 'x0', 'args', 'callback', 'xtol', 'ftol', 'maxiter', 'maxfev', 'disp', 'direc', 'return_all'], None, 'unknown_options', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_minimize_powell', localization, ['func', 'x0', 'args', 'callback', 'xtol', 'ftol', 'maxiter', 'maxfev', 'disp', 'direc', 'return_all'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_minimize_powell(...)' code ##################

    str_182868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2527, (-1)), 'str', '\n    Minimization of scalar function of one or more variables using the\n    modified Powell algorithm.\n\n    Options\n    -------\n    disp : bool\n        Set to True to print convergence messages.\n    xtol : float\n        Relative error in solution `xopt` acceptable for convergence.\n    ftol : float\n        Relative error in ``fun(xopt)`` acceptable for convergence.\n    maxiter, maxfev : int\n        Maximum allowed number of iterations and function evaluations.\n        Will default to ``N*1000``, where ``N`` is the number of\n        variables, if neither `maxiter` or `maxfev` is set. If both\n        `maxiter` and `maxfev` are set, minimization will stop at the\n        first reached.\n    direc : ndarray\n        Initial set of direction vectors for the Powell method.\n\n    ')
    
    # Call to _check_unknown_options(...): (line 2528)
    # Processing the call arguments (line 2528)
    # Getting the type of 'unknown_options' (line 2528)
    unknown_options_182870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2528, 27), 'unknown_options', False)
    # Processing the call keyword arguments (line 2528)
    kwargs_182871 = {}
    # Getting the type of '_check_unknown_options' (line 2528)
    _check_unknown_options_182869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2528, 4), '_check_unknown_options', False)
    # Calling _check_unknown_options(args, kwargs) (line 2528)
    _check_unknown_options_call_result_182872 = invoke(stypy.reporting.localization.Localization(__file__, 2528, 4), _check_unknown_options_182869, *[unknown_options_182870], **kwargs_182871)
    
    
    # Assigning a Name to a Name (line 2529):
    
    # Assigning a Name to a Name (line 2529):
    # Getting the type of 'maxfev' (line 2529)
    maxfev_182873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2529, 13), 'maxfev')
    # Assigning a type to the variable 'maxfun' (line 2529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2529, 4), 'maxfun', maxfev_182873)
    
    # Assigning a Name to a Name (line 2530):
    
    # Assigning a Name to a Name (line 2530):
    # Getting the type of 'return_all' (line 2530)
    return_all_182874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2530, 13), 'return_all')
    # Assigning a type to the variable 'retall' (line 2530)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2530, 4), 'retall', return_all_182874)
    
    # Assigning a Call to a Tuple (line 2533):
    
    # Assigning a Subscript to a Name (line 2533):
    
    # Obtaining the type of the subscript
    int_182875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2533, 4), 'int')
    
    # Call to wrap_function(...): (line 2533)
    # Processing the call arguments (line 2533)
    # Getting the type of 'func' (line 2533)
    func_182877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2533, 33), 'func', False)
    # Getting the type of 'args' (line 2533)
    args_182878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2533, 39), 'args', False)
    # Processing the call keyword arguments (line 2533)
    kwargs_182879 = {}
    # Getting the type of 'wrap_function' (line 2533)
    wrap_function_182876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2533, 19), 'wrap_function', False)
    # Calling wrap_function(args, kwargs) (line 2533)
    wrap_function_call_result_182880 = invoke(stypy.reporting.localization.Localization(__file__, 2533, 19), wrap_function_182876, *[func_182877, args_182878], **kwargs_182879)
    
    # Obtaining the member '__getitem__' of a type (line 2533)
    getitem___182881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2533, 4), wrap_function_call_result_182880, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2533)
    subscript_call_result_182882 = invoke(stypy.reporting.localization.Localization(__file__, 2533, 4), getitem___182881, int_182875)
    
    # Assigning a type to the variable 'tuple_var_assignment_176740' (line 2533)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2533, 4), 'tuple_var_assignment_176740', subscript_call_result_182882)
    
    # Assigning a Subscript to a Name (line 2533):
    
    # Obtaining the type of the subscript
    int_182883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2533, 4), 'int')
    
    # Call to wrap_function(...): (line 2533)
    # Processing the call arguments (line 2533)
    # Getting the type of 'func' (line 2533)
    func_182885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2533, 33), 'func', False)
    # Getting the type of 'args' (line 2533)
    args_182886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2533, 39), 'args', False)
    # Processing the call keyword arguments (line 2533)
    kwargs_182887 = {}
    # Getting the type of 'wrap_function' (line 2533)
    wrap_function_182884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2533, 19), 'wrap_function', False)
    # Calling wrap_function(args, kwargs) (line 2533)
    wrap_function_call_result_182888 = invoke(stypy.reporting.localization.Localization(__file__, 2533, 19), wrap_function_182884, *[func_182885, args_182886], **kwargs_182887)
    
    # Obtaining the member '__getitem__' of a type (line 2533)
    getitem___182889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2533, 4), wrap_function_call_result_182888, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2533)
    subscript_call_result_182890 = invoke(stypy.reporting.localization.Localization(__file__, 2533, 4), getitem___182889, int_182883)
    
    # Assigning a type to the variable 'tuple_var_assignment_176741' (line 2533)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2533, 4), 'tuple_var_assignment_176741', subscript_call_result_182890)
    
    # Assigning a Name to a Name (line 2533):
    # Getting the type of 'tuple_var_assignment_176740' (line 2533)
    tuple_var_assignment_176740_182891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2533, 4), 'tuple_var_assignment_176740')
    # Assigning a type to the variable 'fcalls' (line 2533)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2533, 4), 'fcalls', tuple_var_assignment_176740_182891)
    
    # Assigning a Name to a Name (line 2533):
    # Getting the type of 'tuple_var_assignment_176741' (line 2533)
    tuple_var_assignment_176741_182892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2533, 4), 'tuple_var_assignment_176741')
    # Assigning a type to the variable 'func' (line 2533)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2533, 12), 'func', tuple_var_assignment_176741_182892)
    
    # Assigning a Call to a Name (line 2534):
    
    # Assigning a Call to a Name (line 2534):
    
    # Call to flatten(...): (line 2534)
    # Processing the call keyword arguments (line 2534)
    kwargs_182898 = {}
    
    # Call to asarray(...): (line 2534)
    # Processing the call arguments (line 2534)
    # Getting the type of 'x0' (line 2534)
    x0_182894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2534, 16), 'x0', False)
    # Processing the call keyword arguments (line 2534)
    kwargs_182895 = {}
    # Getting the type of 'asarray' (line 2534)
    asarray_182893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2534, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 2534)
    asarray_call_result_182896 = invoke(stypy.reporting.localization.Localization(__file__, 2534, 8), asarray_182893, *[x0_182894], **kwargs_182895)
    
    # Obtaining the member 'flatten' of a type (line 2534)
    flatten_182897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2534, 8), asarray_call_result_182896, 'flatten')
    # Calling flatten(args, kwargs) (line 2534)
    flatten_call_result_182899 = invoke(stypy.reporting.localization.Localization(__file__, 2534, 8), flatten_182897, *[], **kwargs_182898)
    
    # Assigning a type to the variable 'x' (line 2534)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2534, 4), 'x', flatten_call_result_182899)
    
    # Getting the type of 'retall' (line 2535)
    retall_182900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2535, 7), 'retall')
    # Testing the type of an if condition (line 2535)
    if_condition_182901 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2535, 4), retall_182900)
    # Assigning a type to the variable 'if_condition_182901' (line 2535)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2535, 4), 'if_condition_182901', if_condition_182901)
    # SSA begins for if statement (line 2535)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a List to a Name (line 2536):
    
    # Assigning a List to a Name (line 2536):
    
    # Obtaining an instance of the builtin type 'list' (line 2536)
    list_182902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2536, 18), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2536)
    # Adding element type (line 2536)
    # Getting the type of 'x' (line 2536)
    x_182903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2536, 19), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2536, 18), list_182902, x_182903)
    
    # Assigning a type to the variable 'allvecs' (line 2536)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2536, 8), 'allvecs', list_182902)
    # SSA join for if statement (line 2535)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2537):
    
    # Assigning a Call to a Name (line 2537):
    
    # Call to len(...): (line 2537)
    # Processing the call arguments (line 2537)
    # Getting the type of 'x' (line 2537)
    x_182905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2537, 12), 'x', False)
    # Processing the call keyword arguments (line 2537)
    kwargs_182906 = {}
    # Getting the type of 'len' (line 2537)
    len_182904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2537, 8), 'len', False)
    # Calling len(args, kwargs) (line 2537)
    len_call_result_182907 = invoke(stypy.reporting.localization.Localization(__file__, 2537, 8), len_182904, *[x_182905], **kwargs_182906)
    
    # Assigning a type to the variable 'N' (line 2537)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2537, 4), 'N', len_call_result_182907)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'maxiter' (line 2539)
    maxiter_182908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2539, 7), 'maxiter')
    # Getting the type of 'None' (line 2539)
    None_182909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2539, 18), 'None')
    # Applying the binary operator 'is' (line 2539)
    result_is__182910 = python_operator(stypy.reporting.localization.Localization(__file__, 2539, 7), 'is', maxiter_182908, None_182909)
    
    
    # Getting the type of 'maxfun' (line 2539)
    maxfun_182911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2539, 27), 'maxfun')
    # Getting the type of 'None' (line 2539)
    None_182912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2539, 37), 'None')
    # Applying the binary operator 'is' (line 2539)
    result_is__182913 = python_operator(stypy.reporting.localization.Localization(__file__, 2539, 27), 'is', maxfun_182911, None_182912)
    
    # Applying the binary operator 'and' (line 2539)
    result_and_keyword_182914 = python_operator(stypy.reporting.localization.Localization(__file__, 2539, 7), 'and', result_is__182910, result_is__182913)
    
    # Testing the type of an if condition (line 2539)
    if_condition_182915 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2539, 4), result_and_keyword_182914)
    # Assigning a type to the variable 'if_condition_182915' (line 2539)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2539, 4), 'if_condition_182915', if_condition_182915)
    # SSA begins for if statement (line 2539)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2540):
    
    # Assigning a BinOp to a Name (line 2540):
    # Getting the type of 'N' (line 2540)
    N_182916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2540, 18), 'N')
    int_182917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2540, 22), 'int')
    # Applying the binary operator '*' (line 2540)
    result_mul_182918 = python_operator(stypy.reporting.localization.Localization(__file__, 2540, 18), '*', N_182916, int_182917)
    
    # Assigning a type to the variable 'maxiter' (line 2540)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2540, 8), 'maxiter', result_mul_182918)
    
    # Assigning a BinOp to a Name (line 2541):
    
    # Assigning a BinOp to a Name (line 2541):
    # Getting the type of 'N' (line 2541)
    N_182919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2541, 17), 'N')
    int_182920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2541, 21), 'int')
    # Applying the binary operator '*' (line 2541)
    result_mul_182921 = python_operator(stypy.reporting.localization.Localization(__file__, 2541, 17), '*', N_182919, int_182920)
    
    # Assigning a type to the variable 'maxfun' (line 2541)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2541, 8), 'maxfun', result_mul_182921)
    # SSA branch for the else part of an if statement (line 2539)
    module_type_store.open_ssa_branch('else')
    
    # Type idiom detected: calculating its left and rigth part (line 2542)
    # Getting the type of 'maxiter' (line 2542)
    maxiter_182922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2542, 9), 'maxiter')
    # Getting the type of 'None' (line 2542)
    None_182923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2542, 20), 'None')
    
    (may_be_182924, more_types_in_union_182925) = may_be_none(maxiter_182922, None_182923)

    if may_be_182924:

        if more_types_in_union_182925:
            # Runtime conditional SSA (line 2542)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Getting the type of 'maxfun' (line 2545)
        maxfun_182926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 11), 'maxfun')
        # Getting the type of 'np' (line 2545)
        np_182927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 21), 'np')
        # Obtaining the member 'inf' of a type (line 2545)
        inf_182928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2545, 21), np_182927, 'inf')
        # Applying the binary operator '==' (line 2545)
        result_eq_182929 = python_operator(stypy.reporting.localization.Localization(__file__, 2545, 11), '==', maxfun_182926, inf_182928)
        
        # Testing the type of an if condition (line 2545)
        if_condition_182930 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2545, 8), result_eq_182929)
        # Assigning a type to the variable 'if_condition_182930' (line 2545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2545, 8), 'if_condition_182930', if_condition_182930)
        # SSA begins for if statement (line 2545)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 2546):
        
        # Assigning a BinOp to a Name (line 2546):
        # Getting the type of 'N' (line 2546)
        N_182931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 22), 'N')
        int_182932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2546, 26), 'int')
        # Applying the binary operator '*' (line 2546)
        result_mul_182933 = python_operator(stypy.reporting.localization.Localization(__file__, 2546, 22), '*', N_182931, int_182932)
        
        # Assigning a type to the variable 'maxiter' (line 2546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2546, 12), 'maxiter', result_mul_182933)
        # SSA branch for the else part of an if statement (line 2545)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 2548):
        
        # Assigning a Attribute to a Name (line 2548):
        # Getting the type of 'np' (line 2548)
        np_182934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2548, 22), 'np')
        # Obtaining the member 'inf' of a type (line 2548)
        inf_182935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2548, 22), np_182934, 'inf')
        # Assigning a type to the variable 'maxiter' (line 2548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2548, 12), 'maxiter', inf_182935)
        # SSA join for if statement (line 2545)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_182925:
            # Runtime conditional SSA for else branch (line 2542)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_182924) or more_types_in_union_182925):
        
        # Type idiom detected: calculating its left and rigth part (line 2549)
        # Getting the type of 'maxfun' (line 2549)
        maxfun_182936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2549, 9), 'maxfun')
        # Getting the type of 'None' (line 2549)
        None_182937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2549, 19), 'None')
        
        (may_be_182938, more_types_in_union_182939) = may_be_none(maxfun_182936, None_182937)

        if may_be_182938:

            if more_types_in_union_182939:
                # Runtime conditional SSA (line 2549)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Getting the type of 'maxiter' (line 2550)
            maxiter_182940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2550, 11), 'maxiter')
            # Getting the type of 'np' (line 2550)
            np_182941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2550, 22), 'np')
            # Obtaining the member 'inf' of a type (line 2550)
            inf_182942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2550, 22), np_182941, 'inf')
            # Applying the binary operator '==' (line 2550)
            result_eq_182943 = python_operator(stypy.reporting.localization.Localization(__file__, 2550, 11), '==', maxiter_182940, inf_182942)
            
            # Testing the type of an if condition (line 2550)
            if_condition_182944 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2550, 8), result_eq_182943)
            # Assigning a type to the variable 'if_condition_182944' (line 2550)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2550, 8), 'if_condition_182944', if_condition_182944)
            # SSA begins for if statement (line 2550)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Name (line 2551):
            
            # Assigning a BinOp to a Name (line 2551):
            # Getting the type of 'N' (line 2551)
            N_182945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2551, 21), 'N')
            int_182946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2551, 25), 'int')
            # Applying the binary operator '*' (line 2551)
            result_mul_182947 = python_operator(stypy.reporting.localization.Localization(__file__, 2551, 21), '*', N_182945, int_182946)
            
            # Assigning a type to the variable 'maxfun' (line 2551)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2551, 12), 'maxfun', result_mul_182947)
            # SSA branch for the else part of an if statement (line 2550)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Attribute to a Name (line 2553):
            
            # Assigning a Attribute to a Name (line 2553):
            # Getting the type of 'np' (line 2553)
            np_182948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 21), 'np')
            # Obtaining the member 'inf' of a type (line 2553)
            inf_182949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2553, 21), np_182948, 'inf')
            # Assigning a type to the variable 'maxfun' (line 2553)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2553, 12), 'maxfun', inf_182949)
            # SSA join for if statement (line 2550)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_182939:
                # SSA join for if statement (line 2549)
                module_type_store = module_type_store.join_ssa_context()


        

        if (may_be_182924 and more_types_in_union_182925):
            # SSA join for if statement (line 2542)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 2539)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 2555)
    # Getting the type of 'direc' (line 2555)
    direc_182950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2555, 7), 'direc')
    # Getting the type of 'None' (line 2555)
    None_182951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2555, 16), 'None')
    
    (may_be_182952, more_types_in_union_182953) = may_be_none(direc_182950, None_182951)

    if may_be_182952:

        if more_types_in_union_182953:
            # Runtime conditional SSA (line 2555)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2556):
        
        # Assigning a Call to a Name (line 2556):
        
        # Call to eye(...): (line 2556)
        # Processing the call arguments (line 2556)
        # Getting the type of 'N' (line 2556)
        N_182955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2556, 20), 'N', False)
        # Processing the call keyword arguments (line 2556)
        # Getting the type of 'float' (line 2556)
        float_182956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2556, 29), 'float', False)
        keyword_182957 = float_182956
        kwargs_182958 = {'dtype': keyword_182957}
        # Getting the type of 'eye' (line 2556)
        eye_182954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2556, 16), 'eye', False)
        # Calling eye(args, kwargs) (line 2556)
        eye_call_result_182959 = invoke(stypy.reporting.localization.Localization(__file__, 2556, 16), eye_182954, *[N_182955], **kwargs_182958)
        
        # Assigning a type to the variable 'direc' (line 2556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2556, 8), 'direc', eye_call_result_182959)

        if more_types_in_union_182953:
            # Runtime conditional SSA for else branch (line 2555)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_182952) or more_types_in_union_182953):
        
        # Assigning a Call to a Name (line 2558):
        
        # Assigning a Call to a Name (line 2558):
        
        # Call to asarray(...): (line 2558)
        # Processing the call arguments (line 2558)
        # Getting the type of 'direc' (line 2558)
        direc_182961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2558, 24), 'direc', False)
        # Processing the call keyword arguments (line 2558)
        # Getting the type of 'float' (line 2558)
        float_182962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2558, 37), 'float', False)
        keyword_182963 = float_182962
        kwargs_182964 = {'dtype': keyword_182963}
        # Getting the type of 'asarray' (line 2558)
        asarray_182960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2558, 16), 'asarray', False)
        # Calling asarray(args, kwargs) (line 2558)
        asarray_call_result_182965 = invoke(stypy.reporting.localization.Localization(__file__, 2558, 16), asarray_182960, *[direc_182961], **kwargs_182964)
        
        # Assigning a type to the variable 'direc' (line 2558)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2558, 8), 'direc', asarray_call_result_182965)

        if (may_be_182952 and more_types_in_union_182953):
            # SSA join for if statement (line 2555)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 2560):
    
    # Assigning a Call to a Name (line 2560):
    
    # Call to squeeze(...): (line 2560)
    # Processing the call arguments (line 2560)
    
    # Call to func(...): (line 2560)
    # Processing the call arguments (line 2560)
    # Getting the type of 'x' (line 2560)
    x_182968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 24), 'x', False)
    # Processing the call keyword arguments (line 2560)
    kwargs_182969 = {}
    # Getting the type of 'func' (line 2560)
    func_182967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 19), 'func', False)
    # Calling func(args, kwargs) (line 2560)
    func_call_result_182970 = invoke(stypy.reporting.localization.Localization(__file__, 2560, 19), func_182967, *[x_182968], **kwargs_182969)
    
    # Processing the call keyword arguments (line 2560)
    kwargs_182971 = {}
    # Getting the type of 'squeeze' (line 2560)
    squeeze_182966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 11), 'squeeze', False)
    # Calling squeeze(args, kwargs) (line 2560)
    squeeze_call_result_182972 = invoke(stypy.reporting.localization.Localization(__file__, 2560, 11), squeeze_182966, *[func_call_result_182970], **kwargs_182971)
    
    # Assigning a type to the variable 'fval' (line 2560)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2560, 4), 'fval', squeeze_call_result_182972)
    
    # Assigning a Call to a Name (line 2561):
    
    # Assigning a Call to a Name (line 2561):
    
    # Call to copy(...): (line 2561)
    # Processing the call keyword arguments (line 2561)
    kwargs_182975 = {}
    # Getting the type of 'x' (line 2561)
    x_182973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 9), 'x', False)
    # Obtaining the member 'copy' of a type (line 2561)
    copy_182974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2561, 9), x_182973, 'copy')
    # Calling copy(args, kwargs) (line 2561)
    copy_call_result_182976 = invoke(stypy.reporting.localization.Localization(__file__, 2561, 9), copy_182974, *[], **kwargs_182975)
    
    # Assigning a type to the variable 'x1' (line 2561)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2561, 4), 'x1', copy_call_result_182976)
    
    # Assigning a Num to a Name (line 2562):
    
    # Assigning a Num to a Name (line 2562):
    int_182977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2562, 11), 'int')
    # Assigning a type to the variable 'iter' (line 2562)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2562, 4), 'iter', int_182977)
    
    # Assigning a Call to a Name (line 2563):
    
    # Assigning a Call to a Name (line 2563):
    
    # Call to list(...): (line 2563)
    # Processing the call arguments (line 2563)
    
    # Call to range(...): (line 2563)
    # Processing the call arguments (line 2563)
    # Getting the type of 'N' (line 2563)
    N_182980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2563, 23), 'N', False)
    # Processing the call keyword arguments (line 2563)
    kwargs_182981 = {}
    # Getting the type of 'range' (line 2563)
    range_182979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2563, 17), 'range', False)
    # Calling range(args, kwargs) (line 2563)
    range_call_result_182982 = invoke(stypy.reporting.localization.Localization(__file__, 2563, 17), range_182979, *[N_182980], **kwargs_182981)
    
    # Processing the call keyword arguments (line 2563)
    kwargs_182983 = {}
    # Getting the type of 'list' (line 2563)
    list_182978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2563, 12), 'list', False)
    # Calling list(args, kwargs) (line 2563)
    list_call_result_182984 = invoke(stypy.reporting.localization.Localization(__file__, 2563, 12), list_182978, *[range_call_result_182982], **kwargs_182983)
    
    # Assigning a type to the variable 'ilist' (line 2563)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2563, 4), 'ilist', list_call_result_182984)
    
    # Getting the type of 'True' (line 2564)
    True_182985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 10), 'True')
    # Testing the type of an if condition (line 2564)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2564, 4), True_182985)
    # SSA begins for while statement (line 2564)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a Name to a Name (line 2565):
    
    # Assigning a Name to a Name (line 2565):
    # Getting the type of 'fval' (line 2565)
    fval_182986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2565, 13), 'fval')
    # Assigning a type to the variable 'fx' (line 2565)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2565, 8), 'fx', fval_182986)
    
    # Assigning a Num to a Name (line 2566):
    
    # Assigning a Num to a Name (line 2566):
    int_182987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2566, 17), 'int')
    # Assigning a type to the variable 'bigind' (line 2566)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2566, 8), 'bigind', int_182987)
    
    # Assigning a Num to a Name (line 2567):
    
    # Assigning a Num to a Name (line 2567):
    float_182988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2567, 16), 'float')
    # Assigning a type to the variable 'delta' (line 2567)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2567, 8), 'delta', float_182988)
    
    # Getting the type of 'ilist' (line 2568)
    ilist_182989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2568, 17), 'ilist')
    # Testing the type of a for loop iterable (line 2568)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2568, 8), ilist_182989)
    # Getting the type of the for loop variable (line 2568)
    for_loop_var_182990 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2568, 8), ilist_182989)
    # Assigning a type to the variable 'i' (line 2568)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2568, 8), 'i', for_loop_var_182990)
    # SSA begins for a for statement (line 2568)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 2569):
    
    # Assigning a Subscript to a Name (line 2569):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2569)
    i_182991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2569, 27), 'i')
    # Getting the type of 'direc' (line 2569)
    direc_182992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2569, 21), 'direc')
    # Obtaining the member '__getitem__' of a type (line 2569)
    getitem___182993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2569, 21), direc_182992, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2569)
    subscript_call_result_182994 = invoke(stypy.reporting.localization.Localization(__file__, 2569, 21), getitem___182993, i_182991)
    
    # Assigning a type to the variable 'direc1' (line 2569)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2569, 12), 'direc1', subscript_call_result_182994)
    
    # Assigning a Name to a Name (line 2570):
    
    # Assigning a Name to a Name (line 2570):
    # Getting the type of 'fval' (line 2570)
    fval_182995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 18), 'fval')
    # Assigning a type to the variable 'fx2' (line 2570)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2570, 12), 'fx2', fval_182995)
    
    # Assigning a Call to a Tuple (line 2571):
    
    # Assigning a Subscript to a Name (line 2571):
    
    # Obtaining the type of the subscript
    int_182996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2571, 12), 'int')
    
    # Call to _linesearch_powell(...): (line 2571)
    # Processing the call arguments (line 2571)
    # Getting the type of 'func' (line 2571)
    func_182998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 49), 'func', False)
    # Getting the type of 'x' (line 2571)
    x_182999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 55), 'x', False)
    # Getting the type of 'direc1' (line 2571)
    direc1_183000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 58), 'direc1', False)
    # Processing the call keyword arguments (line 2571)
    # Getting the type of 'xtol' (line 2572)
    xtol_183001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 53), 'xtol', False)
    int_183002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2572, 60), 'int')
    # Applying the binary operator '*' (line 2572)
    result_mul_183003 = python_operator(stypy.reporting.localization.Localization(__file__, 2572, 53), '*', xtol_183001, int_183002)
    
    keyword_183004 = result_mul_183003
    kwargs_183005 = {'tol': keyword_183004}
    # Getting the type of '_linesearch_powell' (line 2571)
    _linesearch_powell_182997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 30), '_linesearch_powell', False)
    # Calling _linesearch_powell(args, kwargs) (line 2571)
    _linesearch_powell_call_result_183006 = invoke(stypy.reporting.localization.Localization(__file__, 2571, 30), _linesearch_powell_182997, *[func_182998, x_182999, direc1_183000], **kwargs_183005)
    
    # Obtaining the member '__getitem__' of a type (line 2571)
    getitem___183007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2571, 12), _linesearch_powell_call_result_183006, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2571)
    subscript_call_result_183008 = invoke(stypy.reporting.localization.Localization(__file__, 2571, 12), getitem___183007, int_182996)
    
    # Assigning a type to the variable 'tuple_var_assignment_176742' (line 2571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2571, 12), 'tuple_var_assignment_176742', subscript_call_result_183008)
    
    # Assigning a Subscript to a Name (line 2571):
    
    # Obtaining the type of the subscript
    int_183009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2571, 12), 'int')
    
    # Call to _linesearch_powell(...): (line 2571)
    # Processing the call arguments (line 2571)
    # Getting the type of 'func' (line 2571)
    func_183011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 49), 'func', False)
    # Getting the type of 'x' (line 2571)
    x_183012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 55), 'x', False)
    # Getting the type of 'direc1' (line 2571)
    direc1_183013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 58), 'direc1', False)
    # Processing the call keyword arguments (line 2571)
    # Getting the type of 'xtol' (line 2572)
    xtol_183014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 53), 'xtol', False)
    int_183015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2572, 60), 'int')
    # Applying the binary operator '*' (line 2572)
    result_mul_183016 = python_operator(stypy.reporting.localization.Localization(__file__, 2572, 53), '*', xtol_183014, int_183015)
    
    keyword_183017 = result_mul_183016
    kwargs_183018 = {'tol': keyword_183017}
    # Getting the type of '_linesearch_powell' (line 2571)
    _linesearch_powell_183010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 30), '_linesearch_powell', False)
    # Calling _linesearch_powell(args, kwargs) (line 2571)
    _linesearch_powell_call_result_183019 = invoke(stypy.reporting.localization.Localization(__file__, 2571, 30), _linesearch_powell_183010, *[func_183011, x_183012, direc1_183013], **kwargs_183018)
    
    # Obtaining the member '__getitem__' of a type (line 2571)
    getitem___183020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2571, 12), _linesearch_powell_call_result_183019, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2571)
    subscript_call_result_183021 = invoke(stypy.reporting.localization.Localization(__file__, 2571, 12), getitem___183020, int_183009)
    
    # Assigning a type to the variable 'tuple_var_assignment_176743' (line 2571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2571, 12), 'tuple_var_assignment_176743', subscript_call_result_183021)
    
    # Assigning a Subscript to a Name (line 2571):
    
    # Obtaining the type of the subscript
    int_183022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2571, 12), 'int')
    
    # Call to _linesearch_powell(...): (line 2571)
    # Processing the call arguments (line 2571)
    # Getting the type of 'func' (line 2571)
    func_183024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 49), 'func', False)
    # Getting the type of 'x' (line 2571)
    x_183025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 55), 'x', False)
    # Getting the type of 'direc1' (line 2571)
    direc1_183026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 58), 'direc1', False)
    # Processing the call keyword arguments (line 2571)
    # Getting the type of 'xtol' (line 2572)
    xtol_183027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 53), 'xtol', False)
    int_183028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2572, 60), 'int')
    # Applying the binary operator '*' (line 2572)
    result_mul_183029 = python_operator(stypy.reporting.localization.Localization(__file__, 2572, 53), '*', xtol_183027, int_183028)
    
    keyword_183030 = result_mul_183029
    kwargs_183031 = {'tol': keyword_183030}
    # Getting the type of '_linesearch_powell' (line 2571)
    _linesearch_powell_183023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 30), '_linesearch_powell', False)
    # Calling _linesearch_powell(args, kwargs) (line 2571)
    _linesearch_powell_call_result_183032 = invoke(stypy.reporting.localization.Localization(__file__, 2571, 30), _linesearch_powell_183023, *[func_183024, x_183025, direc1_183026], **kwargs_183031)
    
    # Obtaining the member '__getitem__' of a type (line 2571)
    getitem___183033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2571, 12), _linesearch_powell_call_result_183032, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2571)
    subscript_call_result_183034 = invoke(stypy.reporting.localization.Localization(__file__, 2571, 12), getitem___183033, int_183022)
    
    # Assigning a type to the variable 'tuple_var_assignment_176744' (line 2571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2571, 12), 'tuple_var_assignment_176744', subscript_call_result_183034)
    
    # Assigning a Name to a Name (line 2571):
    # Getting the type of 'tuple_var_assignment_176742' (line 2571)
    tuple_var_assignment_176742_183035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 12), 'tuple_var_assignment_176742')
    # Assigning a type to the variable 'fval' (line 2571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2571, 12), 'fval', tuple_var_assignment_176742_183035)
    
    # Assigning a Name to a Name (line 2571):
    # Getting the type of 'tuple_var_assignment_176743' (line 2571)
    tuple_var_assignment_176743_183036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 12), 'tuple_var_assignment_176743')
    # Assigning a type to the variable 'x' (line 2571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2571, 18), 'x', tuple_var_assignment_176743_183036)
    
    # Assigning a Name to a Name (line 2571):
    # Getting the type of 'tuple_var_assignment_176744' (line 2571)
    tuple_var_assignment_176744_183037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 12), 'tuple_var_assignment_176744')
    # Assigning a type to the variable 'direc1' (line 2571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2571, 21), 'direc1', tuple_var_assignment_176744_183037)
    
    
    # Getting the type of 'fx2' (line 2573)
    fx2_183038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2573, 16), 'fx2')
    # Getting the type of 'fval' (line 2573)
    fval_183039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2573, 22), 'fval')
    # Applying the binary operator '-' (line 2573)
    result_sub_183040 = python_operator(stypy.reporting.localization.Localization(__file__, 2573, 16), '-', fx2_183038, fval_183039)
    
    # Getting the type of 'delta' (line 2573)
    delta_183041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2573, 30), 'delta')
    # Applying the binary operator '>' (line 2573)
    result_gt_183042 = python_operator(stypy.reporting.localization.Localization(__file__, 2573, 15), '>', result_sub_183040, delta_183041)
    
    # Testing the type of an if condition (line 2573)
    if_condition_183043 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2573, 12), result_gt_183042)
    # Assigning a type to the variable 'if_condition_183043' (line 2573)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2573, 12), 'if_condition_183043', if_condition_183043)
    # SSA begins for if statement (line 2573)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2574):
    
    # Assigning a BinOp to a Name (line 2574):
    # Getting the type of 'fx2' (line 2574)
    fx2_183044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 24), 'fx2')
    # Getting the type of 'fval' (line 2574)
    fval_183045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 30), 'fval')
    # Applying the binary operator '-' (line 2574)
    result_sub_183046 = python_operator(stypy.reporting.localization.Localization(__file__, 2574, 24), '-', fx2_183044, fval_183045)
    
    # Assigning a type to the variable 'delta' (line 2574)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2574, 16), 'delta', result_sub_183046)
    
    # Assigning a Name to a Name (line 2575):
    
    # Assigning a Name to a Name (line 2575):
    # Getting the type of 'i' (line 2575)
    i_183047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2575, 25), 'i')
    # Assigning a type to the variable 'bigind' (line 2575)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2575, 16), 'bigind', i_183047)
    # SSA join for if statement (line 2573)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'iter' (line 2576)
    iter_183048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 8), 'iter')
    int_183049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2576, 16), 'int')
    # Applying the binary operator '+=' (line 2576)
    result_iadd_183050 = python_operator(stypy.reporting.localization.Localization(__file__, 2576, 8), '+=', iter_183048, int_183049)
    # Assigning a type to the variable 'iter' (line 2576)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2576, 8), 'iter', result_iadd_183050)
    
    
    # Type idiom detected: calculating its left and rigth part (line 2577)
    # Getting the type of 'callback' (line 2577)
    callback_183051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2577, 8), 'callback')
    # Getting the type of 'None' (line 2577)
    None_183052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2577, 27), 'None')
    
    (may_be_183053, more_types_in_union_183054) = may_not_be_none(callback_183051, None_183052)

    if may_be_183053:

        if more_types_in_union_183054:
            # Runtime conditional SSA (line 2577)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to callback(...): (line 2578)
        # Processing the call arguments (line 2578)
        # Getting the type of 'x' (line 2578)
        x_183056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 21), 'x', False)
        # Processing the call keyword arguments (line 2578)
        kwargs_183057 = {}
        # Getting the type of 'callback' (line 2578)
        callback_183055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 12), 'callback', False)
        # Calling callback(args, kwargs) (line 2578)
        callback_call_result_183058 = invoke(stypy.reporting.localization.Localization(__file__, 2578, 12), callback_183055, *[x_183056], **kwargs_183057)
        

        if more_types_in_union_183054:
            # SSA join for if statement (line 2577)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Getting the type of 'retall' (line 2579)
    retall_183059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 11), 'retall')
    # Testing the type of an if condition (line 2579)
    if_condition_183060 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2579, 8), retall_183059)
    # Assigning a type to the variable 'if_condition_183060' (line 2579)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2579, 8), 'if_condition_183060', if_condition_183060)
    # SSA begins for if statement (line 2579)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 2580)
    # Processing the call arguments (line 2580)
    # Getting the type of 'x' (line 2580)
    x_183063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2580, 27), 'x', False)
    # Processing the call keyword arguments (line 2580)
    kwargs_183064 = {}
    # Getting the type of 'allvecs' (line 2580)
    allvecs_183061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2580, 12), 'allvecs', False)
    # Obtaining the member 'append' of a type (line 2580)
    append_183062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2580, 12), allvecs_183061, 'append')
    # Calling append(args, kwargs) (line 2580)
    append_call_result_183065 = invoke(stypy.reporting.localization.Localization(__file__, 2580, 12), append_183062, *[x_183063], **kwargs_183064)
    
    # SSA join for if statement (line 2579)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 2581):
    
    # Assigning a BinOp to a Name (line 2581):
    # Getting the type of 'ftol' (line 2581)
    ftol_183066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2581, 14), 'ftol')
    
    # Call to abs(...): (line 2581)
    # Processing the call arguments (line 2581)
    # Getting the type of 'fx' (line 2581)
    fx_183069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2581, 32), 'fx', False)
    # Processing the call keyword arguments (line 2581)
    kwargs_183070 = {}
    # Getting the type of 'numpy' (line 2581)
    numpy_183067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2581, 22), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 2581)
    abs_183068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2581, 22), numpy_183067, 'abs')
    # Calling abs(args, kwargs) (line 2581)
    abs_call_result_183071 = invoke(stypy.reporting.localization.Localization(__file__, 2581, 22), abs_183068, *[fx_183069], **kwargs_183070)
    
    
    # Call to abs(...): (line 2581)
    # Processing the call arguments (line 2581)
    # Getting the type of 'fval' (line 2581)
    fval_183074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2581, 48), 'fval', False)
    # Processing the call keyword arguments (line 2581)
    kwargs_183075 = {}
    # Getting the type of 'numpy' (line 2581)
    numpy_183072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2581, 38), 'numpy', False)
    # Obtaining the member 'abs' of a type (line 2581)
    abs_183073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2581, 38), numpy_183072, 'abs')
    # Calling abs(args, kwargs) (line 2581)
    abs_call_result_183076 = invoke(stypy.reporting.localization.Localization(__file__, 2581, 38), abs_183073, *[fval_183074], **kwargs_183075)
    
    # Applying the binary operator '+' (line 2581)
    result_add_183077 = python_operator(stypy.reporting.localization.Localization(__file__, 2581, 22), '+', abs_call_result_183071, abs_call_result_183076)
    
    # Applying the binary operator '*' (line 2581)
    result_mul_183078 = python_operator(stypy.reporting.localization.Localization(__file__, 2581, 14), '*', ftol_183066, result_add_183077)
    
    float_183079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2581, 57), 'float')
    # Applying the binary operator '+' (line 2581)
    result_add_183080 = python_operator(stypy.reporting.localization.Localization(__file__, 2581, 14), '+', result_mul_183078, float_183079)
    
    # Assigning a type to the variable 'bnd' (line 2581)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2581, 8), 'bnd', result_add_183080)
    
    
    float_183081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2582, 11), 'float')
    # Getting the type of 'fx' (line 2582)
    fx_183082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2582, 18), 'fx')
    # Getting the type of 'fval' (line 2582)
    fval_183083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2582, 23), 'fval')
    # Applying the binary operator '-' (line 2582)
    result_sub_183084 = python_operator(stypy.reporting.localization.Localization(__file__, 2582, 18), '-', fx_183082, fval_183083)
    
    # Applying the binary operator '*' (line 2582)
    result_mul_183085 = python_operator(stypy.reporting.localization.Localization(__file__, 2582, 11), '*', float_183081, result_sub_183084)
    
    # Getting the type of 'bnd' (line 2582)
    bnd_183086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2582, 32), 'bnd')
    # Applying the binary operator '<=' (line 2582)
    result_le_183087 = python_operator(stypy.reporting.localization.Localization(__file__, 2582, 11), '<=', result_mul_183085, bnd_183086)
    
    # Testing the type of an if condition (line 2582)
    if_condition_183088 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2582, 8), result_le_183087)
    # Assigning a type to the variable 'if_condition_183088' (line 2582)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2582, 8), 'if_condition_183088', if_condition_183088)
    # SSA begins for if statement (line 2582)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 2582)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_183089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2584, 18), 'int')
    # Getting the type of 'fcalls' (line 2584)
    fcalls_183090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2584, 11), 'fcalls')
    # Obtaining the member '__getitem__' of a type (line 2584)
    getitem___183091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2584, 11), fcalls_183090, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2584)
    subscript_call_result_183092 = invoke(stypy.reporting.localization.Localization(__file__, 2584, 11), getitem___183091, int_183089)
    
    # Getting the type of 'maxfun' (line 2584)
    maxfun_183093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2584, 24), 'maxfun')
    # Applying the binary operator '>=' (line 2584)
    result_ge_183094 = python_operator(stypy.reporting.localization.Localization(__file__, 2584, 11), '>=', subscript_call_result_183092, maxfun_183093)
    
    # Testing the type of an if condition (line 2584)
    if_condition_183095 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2584, 8), result_ge_183094)
    # Assigning a type to the variable 'if_condition_183095' (line 2584)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2584, 8), 'if_condition_183095', if_condition_183095)
    # SSA begins for if statement (line 2584)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 2584)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'iter' (line 2586)
    iter_183096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2586, 11), 'iter')
    # Getting the type of 'maxiter' (line 2586)
    maxiter_183097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2586, 19), 'maxiter')
    # Applying the binary operator '>=' (line 2586)
    result_ge_183098 = python_operator(stypy.reporting.localization.Localization(__file__, 2586, 11), '>=', iter_183096, maxiter_183097)
    
    # Testing the type of an if condition (line 2586)
    if_condition_183099 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2586, 8), result_ge_183098)
    # Assigning a type to the variable 'if_condition_183099' (line 2586)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2586, 8), 'if_condition_183099', if_condition_183099)
    # SSA begins for if statement (line 2586)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 2586)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 2590):
    
    # Assigning a BinOp to a Name (line 2590):
    # Getting the type of 'x' (line 2590)
    x_183100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2590, 17), 'x')
    # Getting the type of 'x1' (line 2590)
    x1_183101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2590, 21), 'x1')
    # Applying the binary operator '-' (line 2590)
    result_sub_183102 = python_operator(stypy.reporting.localization.Localization(__file__, 2590, 17), '-', x_183100, x1_183101)
    
    # Assigning a type to the variable 'direc1' (line 2590)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2590, 8), 'direc1', result_sub_183102)
    
    # Assigning a BinOp to a Name (line 2591):
    
    # Assigning a BinOp to a Name (line 2591):
    int_183103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2591, 13), 'int')
    # Getting the type of 'x' (line 2591)
    x_183104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2591, 15), 'x')
    # Applying the binary operator '*' (line 2591)
    result_mul_183105 = python_operator(stypy.reporting.localization.Localization(__file__, 2591, 13), '*', int_183103, x_183104)
    
    # Getting the type of 'x1' (line 2591)
    x1_183106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2591, 19), 'x1')
    # Applying the binary operator '-' (line 2591)
    result_sub_183107 = python_operator(stypy.reporting.localization.Localization(__file__, 2591, 13), '-', result_mul_183105, x1_183106)
    
    # Assigning a type to the variable 'x2' (line 2591)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2591, 8), 'x2', result_sub_183107)
    
    # Assigning a Call to a Name (line 2592):
    
    # Assigning a Call to a Name (line 2592):
    
    # Call to copy(...): (line 2592)
    # Processing the call keyword arguments (line 2592)
    kwargs_183110 = {}
    # Getting the type of 'x' (line 2592)
    x_183108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2592, 13), 'x', False)
    # Obtaining the member 'copy' of a type (line 2592)
    copy_183109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2592, 13), x_183108, 'copy')
    # Calling copy(args, kwargs) (line 2592)
    copy_call_result_183111 = invoke(stypy.reporting.localization.Localization(__file__, 2592, 13), copy_183109, *[], **kwargs_183110)
    
    # Assigning a type to the variable 'x1' (line 2592)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2592, 8), 'x1', copy_call_result_183111)
    
    # Assigning a Call to a Name (line 2593):
    
    # Assigning a Call to a Name (line 2593):
    
    # Call to squeeze(...): (line 2593)
    # Processing the call arguments (line 2593)
    
    # Call to func(...): (line 2593)
    # Processing the call arguments (line 2593)
    # Getting the type of 'x2' (line 2593)
    x2_183114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2593, 27), 'x2', False)
    # Processing the call keyword arguments (line 2593)
    kwargs_183115 = {}
    # Getting the type of 'func' (line 2593)
    func_183113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2593, 22), 'func', False)
    # Calling func(args, kwargs) (line 2593)
    func_call_result_183116 = invoke(stypy.reporting.localization.Localization(__file__, 2593, 22), func_183113, *[x2_183114], **kwargs_183115)
    
    # Processing the call keyword arguments (line 2593)
    kwargs_183117 = {}
    # Getting the type of 'squeeze' (line 2593)
    squeeze_183112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2593, 14), 'squeeze', False)
    # Calling squeeze(args, kwargs) (line 2593)
    squeeze_call_result_183118 = invoke(stypy.reporting.localization.Localization(__file__, 2593, 14), squeeze_183112, *[func_call_result_183116], **kwargs_183117)
    
    # Assigning a type to the variable 'fx2' (line 2593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2593, 8), 'fx2', squeeze_call_result_183118)
    
    
    # Getting the type of 'fx' (line 2595)
    fx_183119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 12), 'fx')
    # Getting the type of 'fx2' (line 2595)
    fx2_183120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 17), 'fx2')
    # Applying the binary operator '>' (line 2595)
    result_gt_183121 = python_operator(stypy.reporting.localization.Localization(__file__, 2595, 12), '>', fx_183119, fx2_183120)
    
    # Testing the type of an if condition (line 2595)
    if_condition_183122 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2595, 8), result_gt_183121)
    # Assigning a type to the variable 'if_condition_183122' (line 2595)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2595, 8), 'if_condition_183122', if_condition_183122)
    # SSA begins for if statement (line 2595)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2596):
    
    # Assigning a BinOp to a Name (line 2596):
    float_183123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2596, 16), 'float')
    # Getting the type of 'fx' (line 2596)
    fx_183124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2596, 21), 'fx')
    # Getting the type of 'fx2' (line 2596)
    fx2_183125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2596, 26), 'fx2')
    # Applying the binary operator '+' (line 2596)
    result_add_183126 = python_operator(stypy.reporting.localization.Localization(__file__, 2596, 21), '+', fx_183124, fx2_183125)
    
    float_183127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2596, 32), 'float')
    # Getting the type of 'fval' (line 2596)
    fval_183128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2596, 36), 'fval')
    # Applying the binary operator '*' (line 2596)
    result_mul_183129 = python_operator(stypy.reporting.localization.Localization(__file__, 2596, 32), '*', float_183127, fval_183128)
    
    # Applying the binary operator '-' (line 2596)
    result_sub_183130 = python_operator(stypy.reporting.localization.Localization(__file__, 2596, 30), '-', result_add_183126, result_mul_183129)
    
    # Applying the binary operator '*' (line 2596)
    result_mul_183131 = python_operator(stypy.reporting.localization.Localization(__file__, 2596, 16), '*', float_183123, result_sub_183130)
    
    # Assigning a type to the variable 't' (line 2596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2596, 12), 't', result_mul_183131)
    
    # Assigning a BinOp to a Name (line 2597):
    
    # Assigning a BinOp to a Name (line 2597):
    # Getting the type of 'fx' (line 2597)
    fx_183132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 20), 'fx')
    # Getting the type of 'fval' (line 2597)
    fval_183133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 25), 'fval')
    # Applying the binary operator '-' (line 2597)
    result_sub_183134 = python_operator(stypy.reporting.localization.Localization(__file__, 2597, 20), '-', fx_183132, fval_183133)
    
    # Getting the type of 'delta' (line 2597)
    delta_183135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 32), 'delta')
    # Applying the binary operator '-' (line 2597)
    result_sub_183136 = python_operator(stypy.reporting.localization.Localization(__file__, 2597, 30), '-', result_sub_183134, delta_183135)
    
    # Assigning a type to the variable 'temp' (line 2597)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2597, 12), 'temp', result_sub_183136)
    
    # Getting the type of 't' (line 2598)
    t_183137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2598, 12), 't')
    # Getting the type of 'temp' (line 2598)
    temp_183138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2598, 17), 'temp')
    # Getting the type of 'temp' (line 2598)
    temp_183139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2598, 22), 'temp')
    # Applying the binary operator '*' (line 2598)
    result_mul_183140 = python_operator(stypy.reporting.localization.Localization(__file__, 2598, 17), '*', temp_183138, temp_183139)
    
    # Applying the binary operator '*=' (line 2598)
    result_imul_183141 = python_operator(stypy.reporting.localization.Localization(__file__, 2598, 12), '*=', t_183137, result_mul_183140)
    # Assigning a type to the variable 't' (line 2598)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2598, 12), 't', result_imul_183141)
    
    
    # Assigning a BinOp to a Name (line 2599):
    
    # Assigning a BinOp to a Name (line 2599):
    # Getting the type of 'fx' (line 2599)
    fx_183142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2599, 19), 'fx')
    # Getting the type of 'fx2' (line 2599)
    fx2_183143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2599, 24), 'fx2')
    # Applying the binary operator '-' (line 2599)
    result_sub_183144 = python_operator(stypy.reporting.localization.Localization(__file__, 2599, 19), '-', fx_183142, fx2_183143)
    
    # Assigning a type to the variable 'temp' (line 2599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2599, 12), 'temp', result_sub_183144)
    
    # Getting the type of 't' (line 2600)
    t_183145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 12), 't')
    # Getting the type of 'delta' (line 2600)
    delta_183146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 17), 'delta')
    # Getting the type of 'temp' (line 2600)
    temp_183147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 23), 'temp')
    # Applying the binary operator '*' (line 2600)
    result_mul_183148 = python_operator(stypy.reporting.localization.Localization(__file__, 2600, 17), '*', delta_183146, temp_183147)
    
    # Getting the type of 'temp' (line 2600)
    temp_183149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 28), 'temp')
    # Applying the binary operator '*' (line 2600)
    result_mul_183150 = python_operator(stypy.reporting.localization.Localization(__file__, 2600, 27), '*', result_mul_183148, temp_183149)
    
    # Applying the binary operator '-=' (line 2600)
    result_isub_183151 = python_operator(stypy.reporting.localization.Localization(__file__, 2600, 12), '-=', t_183145, result_mul_183150)
    # Assigning a type to the variable 't' (line 2600)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2600, 12), 't', result_isub_183151)
    
    
    
    # Getting the type of 't' (line 2601)
    t_183152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2601, 15), 't')
    float_183153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2601, 19), 'float')
    # Applying the binary operator '<' (line 2601)
    result_lt_183154 = python_operator(stypy.reporting.localization.Localization(__file__, 2601, 15), '<', t_183152, float_183153)
    
    # Testing the type of an if condition (line 2601)
    if_condition_183155 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2601, 12), result_lt_183154)
    # Assigning a type to the variable 'if_condition_183155' (line 2601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2601, 12), 'if_condition_183155', if_condition_183155)
    # SSA begins for if statement (line 2601)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 2602):
    
    # Assigning a Subscript to a Name (line 2602):
    
    # Obtaining the type of the subscript
    int_183156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2602, 16), 'int')
    
    # Call to _linesearch_powell(...): (line 2602)
    # Processing the call arguments (line 2602)
    # Getting the type of 'func' (line 2602)
    func_183158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 53), 'func', False)
    # Getting the type of 'x' (line 2602)
    x_183159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 59), 'x', False)
    # Getting the type of 'direc1' (line 2602)
    direc1_183160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 62), 'direc1', False)
    # Processing the call keyword arguments (line 2602)
    # Getting the type of 'xtol' (line 2603)
    xtol_183161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2603, 57), 'xtol', False)
    int_183162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2603, 62), 'int')
    # Applying the binary operator '*' (line 2603)
    result_mul_183163 = python_operator(stypy.reporting.localization.Localization(__file__, 2603, 57), '*', xtol_183161, int_183162)
    
    keyword_183164 = result_mul_183163
    kwargs_183165 = {'tol': keyword_183164}
    # Getting the type of '_linesearch_powell' (line 2602)
    _linesearch_powell_183157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 34), '_linesearch_powell', False)
    # Calling _linesearch_powell(args, kwargs) (line 2602)
    _linesearch_powell_call_result_183166 = invoke(stypy.reporting.localization.Localization(__file__, 2602, 34), _linesearch_powell_183157, *[func_183158, x_183159, direc1_183160], **kwargs_183165)
    
    # Obtaining the member '__getitem__' of a type (line 2602)
    getitem___183167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2602, 16), _linesearch_powell_call_result_183166, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2602)
    subscript_call_result_183168 = invoke(stypy.reporting.localization.Localization(__file__, 2602, 16), getitem___183167, int_183156)
    
    # Assigning a type to the variable 'tuple_var_assignment_176745' (line 2602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2602, 16), 'tuple_var_assignment_176745', subscript_call_result_183168)
    
    # Assigning a Subscript to a Name (line 2602):
    
    # Obtaining the type of the subscript
    int_183169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2602, 16), 'int')
    
    # Call to _linesearch_powell(...): (line 2602)
    # Processing the call arguments (line 2602)
    # Getting the type of 'func' (line 2602)
    func_183171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 53), 'func', False)
    # Getting the type of 'x' (line 2602)
    x_183172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 59), 'x', False)
    # Getting the type of 'direc1' (line 2602)
    direc1_183173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 62), 'direc1', False)
    # Processing the call keyword arguments (line 2602)
    # Getting the type of 'xtol' (line 2603)
    xtol_183174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2603, 57), 'xtol', False)
    int_183175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2603, 62), 'int')
    # Applying the binary operator '*' (line 2603)
    result_mul_183176 = python_operator(stypy.reporting.localization.Localization(__file__, 2603, 57), '*', xtol_183174, int_183175)
    
    keyword_183177 = result_mul_183176
    kwargs_183178 = {'tol': keyword_183177}
    # Getting the type of '_linesearch_powell' (line 2602)
    _linesearch_powell_183170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 34), '_linesearch_powell', False)
    # Calling _linesearch_powell(args, kwargs) (line 2602)
    _linesearch_powell_call_result_183179 = invoke(stypy.reporting.localization.Localization(__file__, 2602, 34), _linesearch_powell_183170, *[func_183171, x_183172, direc1_183173], **kwargs_183178)
    
    # Obtaining the member '__getitem__' of a type (line 2602)
    getitem___183180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2602, 16), _linesearch_powell_call_result_183179, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2602)
    subscript_call_result_183181 = invoke(stypy.reporting.localization.Localization(__file__, 2602, 16), getitem___183180, int_183169)
    
    # Assigning a type to the variable 'tuple_var_assignment_176746' (line 2602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2602, 16), 'tuple_var_assignment_176746', subscript_call_result_183181)
    
    # Assigning a Subscript to a Name (line 2602):
    
    # Obtaining the type of the subscript
    int_183182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2602, 16), 'int')
    
    # Call to _linesearch_powell(...): (line 2602)
    # Processing the call arguments (line 2602)
    # Getting the type of 'func' (line 2602)
    func_183184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 53), 'func', False)
    # Getting the type of 'x' (line 2602)
    x_183185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 59), 'x', False)
    # Getting the type of 'direc1' (line 2602)
    direc1_183186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 62), 'direc1', False)
    # Processing the call keyword arguments (line 2602)
    # Getting the type of 'xtol' (line 2603)
    xtol_183187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2603, 57), 'xtol', False)
    int_183188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2603, 62), 'int')
    # Applying the binary operator '*' (line 2603)
    result_mul_183189 = python_operator(stypy.reporting.localization.Localization(__file__, 2603, 57), '*', xtol_183187, int_183188)
    
    keyword_183190 = result_mul_183189
    kwargs_183191 = {'tol': keyword_183190}
    # Getting the type of '_linesearch_powell' (line 2602)
    _linesearch_powell_183183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 34), '_linesearch_powell', False)
    # Calling _linesearch_powell(args, kwargs) (line 2602)
    _linesearch_powell_call_result_183192 = invoke(stypy.reporting.localization.Localization(__file__, 2602, 34), _linesearch_powell_183183, *[func_183184, x_183185, direc1_183186], **kwargs_183191)
    
    # Obtaining the member '__getitem__' of a type (line 2602)
    getitem___183193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2602, 16), _linesearch_powell_call_result_183192, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2602)
    subscript_call_result_183194 = invoke(stypy.reporting.localization.Localization(__file__, 2602, 16), getitem___183193, int_183182)
    
    # Assigning a type to the variable 'tuple_var_assignment_176747' (line 2602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2602, 16), 'tuple_var_assignment_176747', subscript_call_result_183194)
    
    # Assigning a Name to a Name (line 2602):
    # Getting the type of 'tuple_var_assignment_176745' (line 2602)
    tuple_var_assignment_176745_183195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 16), 'tuple_var_assignment_176745')
    # Assigning a type to the variable 'fval' (line 2602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2602, 16), 'fval', tuple_var_assignment_176745_183195)
    
    # Assigning a Name to a Name (line 2602):
    # Getting the type of 'tuple_var_assignment_176746' (line 2602)
    tuple_var_assignment_176746_183196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 16), 'tuple_var_assignment_176746')
    # Assigning a type to the variable 'x' (line 2602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2602, 22), 'x', tuple_var_assignment_176746_183196)
    
    # Assigning a Name to a Name (line 2602):
    # Getting the type of 'tuple_var_assignment_176747' (line 2602)
    tuple_var_assignment_176747_183197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 16), 'tuple_var_assignment_176747')
    # Assigning a type to the variable 'direc1' (line 2602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2602, 25), 'direc1', tuple_var_assignment_176747_183197)
    
    # Assigning a Subscript to a Subscript (line 2604):
    
    # Assigning a Subscript to a Subscript (line 2604):
    
    # Obtaining the type of the subscript
    int_183198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2604, 38), 'int')
    # Getting the type of 'direc' (line 2604)
    direc_183199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2604, 32), 'direc')
    # Obtaining the member '__getitem__' of a type (line 2604)
    getitem___183200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2604, 32), direc_183199, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2604)
    subscript_call_result_183201 = invoke(stypy.reporting.localization.Localization(__file__, 2604, 32), getitem___183200, int_183198)
    
    # Getting the type of 'direc' (line 2604)
    direc_183202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2604, 16), 'direc')
    # Getting the type of 'bigind' (line 2604)
    bigind_183203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2604, 22), 'bigind')
    # Storing an element on a container (line 2604)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2604, 16), direc_183202, (bigind_183203, subscript_call_result_183201))
    
    # Assigning a Name to a Subscript (line 2605):
    
    # Assigning a Name to a Subscript (line 2605):
    # Getting the type of 'direc1' (line 2605)
    direc1_183204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 28), 'direc1')
    # Getting the type of 'direc' (line 2605)
    direc_183205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 16), 'direc')
    int_183206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2605, 22), 'int')
    # Storing an element on a container (line 2605)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2605, 16), direc_183205, (int_183206, direc1_183204))
    # SSA join for if statement (line 2601)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2595)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for while statement (line 2564)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 2607):
    
    # Assigning a Num to a Name (line 2607):
    int_183207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2607, 15), 'int')
    # Assigning a type to the variable 'warnflag' (line 2607)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2607, 4), 'warnflag', int_183207)
    
    
    
    # Obtaining the type of the subscript
    int_183208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2608, 14), 'int')
    # Getting the type of 'fcalls' (line 2608)
    fcalls_183209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 7), 'fcalls')
    # Obtaining the member '__getitem__' of a type (line 2608)
    getitem___183210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2608, 7), fcalls_183209, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2608)
    subscript_call_result_183211 = invoke(stypy.reporting.localization.Localization(__file__, 2608, 7), getitem___183210, int_183208)
    
    # Getting the type of 'maxfun' (line 2608)
    maxfun_183212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 20), 'maxfun')
    # Applying the binary operator '>=' (line 2608)
    result_ge_183213 = python_operator(stypy.reporting.localization.Localization(__file__, 2608, 7), '>=', subscript_call_result_183211, maxfun_183212)
    
    # Testing the type of an if condition (line 2608)
    if_condition_183214 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2608, 4), result_ge_183213)
    # Assigning a type to the variable 'if_condition_183214' (line 2608)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2608, 4), 'if_condition_183214', if_condition_183214)
    # SSA begins for if statement (line 2608)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 2609):
    
    # Assigning a Num to a Name (line 2609):
    int_183215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2609, 19), 'int')
    # Assigning a type to the variable 'warnflag' (line 2609)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2609, 8), 'warnflag', int_183215)
    
    # Assigning a Subscript to a Name (line 2610):
    
    # Assigning a Subscript to a Name (line 2610):
    
    # Obtaining the type of the subscript
    str_183216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2610, 30), 'str', 'maxfev')
    # Getting the type of '_status_message' (line 2610)
    _status_message_183217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2610, 14), '_status_message')
    # Obtaining the member '__getitem__' of a type (line 2610)
    getitem___183218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2610, 14), _status_message_183217, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2610)
    subscript_call_result_183219 = invoke(stypy.reporting.localization.Localization(__file__, 2610, 14), getitem___183218, str_183216)
    
    # Assigning a type to the variable 'msg' (line 2610)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2610, 8), 'msg', subscript_call_result_183219)
    
    # Getting the type of 'disp' (line 2611)
    disp_183220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2611, 11), 'disp')
    # Testing the type of an if condition (line 2611)
    if_condition_183221 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2611, 8), disp_183220)
    # Assigning a type to the variable 'if_condition_183221' (line 2611)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2611, 8), 'if_condition_183221', if_condition_183221)
    # SSA begins for if statement (line 2611)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 2612)
    # Processing the call arguments (line 2612)
    str_183223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2612, 18), 'str', 'Warning: ')
    # Getting the type of 'msg' (line 2612)
    msg_183224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2612, 32), 'msg', False)
    # Applying the binary operator '+' (line 2612)
    result_add_183225 = python_operator(stypy.reporting.localization.Localization(__file__, 2612, 18), '+', str_183223, msg_183224)
    
    # Processing the call keyword arguments (line 2612)
    kwargs_183226 = {}
    # Getting the type of 'print' (line 2612)
    print_183222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2612, 12), 'print', False)
    # Calling print(args, kwargs) (line 2612)
    print_call_result_183227 = invoke(stypy.reporting.localization.Localization(__file__, 2612, 12), print_183222, *[result_add_183225], **kwargs_183226)
    
    # SSA join for if statement (line 2611)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 2608)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'iter' (line 2613)
    iter_183228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2613, 9), 'iter')
    # Getting the type of 'maxiter' (line 2613)
    maxiter_183229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2613, 17), 'maxiter')
    # Applying the binary operator '>=' (line 2613)
    result_ge_183230 = python_operator(stypy.reporting.localization.Localization(__file__, 2613, 9), '>=', iter_183228, maxiter_183229)
    
    # Testing the type of an if condition (line 2613)
    if_condition_183231 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2613, 9), result_ge_183230)
    # Assigning a type to the variable 'if_condition_183231' (line 2613)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2613, 9), 'if_condition_183231', if_condition_183231)
    # SSA begins for if statement (line 2613)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 2614):
    
    # Assigning a Num to a Name (line 2614):
    int_183232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2614, 19), 'int')
    # Assigning a type to the variable 'warnflag' (line 2614)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2614, 8), 'warnflag', int_183232)
    
    # Assigning a Subscript to a Name (line 2615):
    
    # Assigning a Subscript to a Name (line 2615):
    
    # Obtaining the type of the subscript
    str_183233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2615, 30), 'str', 'maxiter')
    # Getting the type of '_status_message' (line 2615)
    _status_message_183234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2615, 14), '_status_message')
    # Obtaining the member '__getitem__' of a type (line 2615)
    getitem___183235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2615, 14), _status_message_183234, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2615)
    subscript_call_result_183236 = invoke(stypy.reporting.localization.Localization(__file__, 2615, 14), getitem___183235, str_183233)
    
    # Assigning a type to the variable 'msg' (line 2615)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2615, 8), 'msg', subscript_call_result_183236)
    
    # Getting the type of 'disp' (line 2616)
    disp_183237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2616, 11), 'disp')
    # Testing the type of an if condition (line 2616)
    if_condition_183238 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2616, 8), disp_183237)
    # Assigning a type to the variable 'if_condition_183238' (line 2616)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2616, 8), 'if_condition_183238', if_condition_183238)
    # SSA begins for if statement (line 2616)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 2617)
    # Processing the call arguments (line 2617)
    str_183240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2617, 18), 'str', 'Warning: ')
    # Getting the type of 'msg' (line 2617)
    msg_183241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2617, 32), 'msg', False)
    # Applying the binary operator '+' (line 2617)
    result_add_183242 = python_operator(stypy.reporting.localization.Localization(__file__, 2617, 18), '+', str_183240, msg_183241)
    
    # Processing the call keyword arguments (line 2617)
    kwargs_183243 = {}
    # Getting the type of 'print' (line 2617)
    print_183239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2617, 12), 'print', False)
    # Calling print(args, kwargs) (line 2617)
    print_call_result_183244 = invoke(stypy.reporting.localization.Localization(__file__, 2617, 12), print_183239, *[result_add_183242], **kwargs_183243)
    
    # SSA join for if statement (line 2616)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 2613)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Subscript to a Name (line 2619):
    
    # Assigning a Subscript to a Name (line 2619):
    
    # Obtaining the type of the subscript
    str_183245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2619, 30), 'str', 'success')
    # Getting the type of '_status_message' (line 2619)
    _status_message_183246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2619, 14), '_status_message')
    # Obtaining the member '__getitem__' of a type (line 2619)
    getitem___183247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2619, 14), _status_message_183246, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2619)
    subscript_call_result_183248 = invoke(stypy.reporting.localization.Localization(__file__, 2619, 14), getitem___183247, str_183245)
    
    # Assigning a type to the variable 'msg' (line 2619)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2619, 8), 'msg', subscript_call_result_183248)
    
    # Getting the type of 'disp' (line 2620)
    disp_183249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2620, 11), 'disp')
    # Testing the type of an if condition (line 2620)
    if_condition_183250 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2620, 8), disp_183249)
    # Assigning a type to the variable 'if_condition_183250' (line 2620)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2620, 8), 'if_condition_183250', if_condition_183250)
    # SSA begins for if statement (line 2620)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 2621)
    # Processing the call arguments (line 2621)
    # Getting the type of 'msg' (line 2621)
    msg_183252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 18), 'msg', False)
    # Processing the call keyword arguments (line 2621)
    kwargs_183253 = {}
    # Getting the type of 'print' (line 2621)
    print_183251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 12), 'print', False)
    # Calling print(args, kwargs) (line 2621)
    print_call_result_183254 = invoke(stypy.reporting.localization.Localization(__file__, 2621, 12), print_183251, *[msg_183252], **kwargs_183253)
    
    
    # Call to print(...): (line 2622)
    # Processing the call arguments (line 2622)
    str_183256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2622, 18), 'str', '         Current function value: %f')
    # Getting the type of 'fval' (line 2622)
    fval_183257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2622, 58), 'fval', False)
    # Applying the binary operator '%' (line 2622)
    result_mod_183258 = python_operator(stypy.reporting.localization.Localization(__file__, 2622, 18), '%', str_183256, fval_183257)
    
    # Processing the call keyword arguments (line 2622)
    kwargs_183259 = {}
    # Getting the type of 'print' (line 2622)
    print_183255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2622, 12), 'print', False)
    # Calling print(args, kwargs) (line 2622)
    print_call_result_183260 = invoke(stypy.reporting.localization.Localization(__file__, 2622, 12), print_183255, *[result_mod_183258], **kwargs_183259)
    
    
    # Call to print(...): (line 2623)
    # Processing the call arguments (line 2623)
    str_183262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2623, 18), 'str', '         Iterations: %d')
    # Getting the type of 'iter' (line 2623)
    iter_183263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2623, 46), 'iter', False)
    # Applying the binary operator '%' (line 2623)
    result_mod_183264 = python_operator(stypy.reporting.localization.Localization(__file__, 2623, 18), '%', str_183262, iter_183263)
    
    # Processing the call keyword arguments (line 2623)
    kwargs_183265 = {}
    # Getting the type of 'print' (line 2623)
    print_183261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2623, 12), 'print', False)
    # Calling print(args, kwargs) (line 2623)
    print_call_result_183266 = invoke(stypy.reporting.localization.Localization(__file__, 2623, 12), print_183261, *[result_mod_183264], **kwargs_183265)
    
    
    # Call to print(...): (line 2624)
    # Processing the call arguments (line 2624)
    str_183268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2624, 18), 'str', '         Function evaluations: %d')
    
    # Obtaining the type of the subscript
    int_183269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2624, 63), 'int')
    # Getting the type of 'fcalls' (line 2624)
    fcalls_183270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2624, 56), 'fcalls', False)
    # Obtaining the member '__getitem__' of a type (line 2624)
    getitem___183271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2624, 56), fcalls_183270, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2624)
    subscript_call_result_183272 = invoke(stypy.reporting.localization.Localization(__file__, 2624, 56), getitem___183271, int_183269)
    
    # Applying the binary operator '%' (line 2624)
    result_mod_183273 = python_operator(stypy.reporting.localization.Localization(__file__, 2624, 18), '%', str_183268, subscript_call_result_183272)
    
    # Processing the call keyword arguments (line 2624)
    kwargs_183274 = {}
    # Getting the type of 'print' (line 2624)
    print_183267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2624, 12), 'print', False)
    # Calling print(args, kwargs) (line 2624)
    print_call_result_183275 = invoke(stypy.reporting.localization.Localization(__file__, 2624, 12), print_183267, *[result_mod_183273], **kwargs_183274)
    
    # SSA join for if statement (line 2620)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2613)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2608)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2626):
    
    # Assigning a Call to a Name (line 2626):
    
    # Call to squeeze(...): (line 2626)
    # Processing the call arguments (line 2626)
    # Getting the type of 'x' (line 2626)
    x_183277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2626, 16), 'x', False)
    # Processing the call keyword arguments (line 2626)
    kwargs_183278 = {}
    # Getting the type of 'squeeze' (line 2626)
    squeeze_183276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2626, 8), 'squeeze', False)
    # Calling squeeze(args, kwargs) (line 2626)
    squeeze_call_result_183279 = invoke(stypy.reporting.localization.Localization(__file__, 2626, 8), squeeze_183276, *[x_183277], **kwargs_183278)
    
    # Assigning a type to the variable 'x' (line 2626)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2626, 4), 'x', squeeze_call_result_183279)
    
    # Assigning a Call to a Name (line 2628):
    
    # Assigning a Call to a Name (line 2628):
    
    # Call to OptimizeResult(...): (line 2628)
    # Processing the call keyword arguments (line 2628)
    # Getting the type of 'fval' (line 2628)
    fval_183281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2628, 32), 'fval', False)
    keyword_183282 = fval_183281
    # Getting the type of 'direc' (line 2628)
    direc_183283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2628, 44), 'direc', False)
    keyword_183284 = direc_183283
    # Getting the type of 'iter' (line 2628)
    iter_183285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2628, 55), 'iter', False)
    keyword_183286 = iter_183285
    
    # Obtaining the type of the subscript
    int_183287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2628, 73), 'int')
    # Getting the type of 'fcalls' (line 2628)
    fcalls_183288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2628, 66), 'fcalls', False)
    # Obtaining the member '__getitem__' of a type (line 2628)
    getitem___183289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2628, 66), fcalls_183288, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2628)
    subscript_call_result_183290 = invoke(stypy.reporting.localization.Localization(__file__, 2628, 66), getitem___183289, int_183287)
    
    keyword_183291 = subscript_call_result_183290
    # Getting the type of 'warnflag' (line 2629)
    warnflag_183292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 35), 'warnflag', False)
    keyword_183293 = warnflag_183292
    
    # Getting the type of 'warnflag' (line 2629)
    warnflag_183294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 54), 'warnflag', False)
    int_183295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2629, 66), 'int')
    # Applying the binary operator '==' (line 2629)
    result_eq_183296 = python_operator(stypy.reporting.localization.Localization(__file__, 2629, 54), '==', warnflag_183294, int_183295)
    
    keyword_183297 = result_eq_183296
    # Getting the type of 'msg' (line 2630)
    msg_183298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2630, 36), 'msg', False)
    keyword_183299 = msg_183298
    # Getting the type of 'x' (line 2630)
    x_183300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2630, 43), 'x', False)
    keyword_183301 = x_183300
    kwargs_183302 = {'status': keyword_183293, 'success': keyword_183297, 'direc': keyword_183284, 'nfev': keyword_183291, 'fun': keyword_183282, 'x': keyword_183301, 'message': keyword_183299, 'nit': keyword_183286}
    # Getting the type of 'OptimizeResult' (line 2628)
    OptimizeResult_183280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2628, 13), 'OptimizeResult', False)
    # Calling OptimizeResult(args, kwargs) (line 2628)
    OptimizeResult_call_result_183303 = invoke(stypy.reporting.localization.Localization(__file__, 2628, 13), OptimizeResult_183280, *[], **kwargs_183302)
    
    # Assigning a type to the variable 'result' (line 2628)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2628, 4), 'result', OptimizeResult_call_result_183303)
    
    # Getting the type of 'retall' (line 2631)
    retall_183304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2631, 7), 'retall')
    # Testing the type of an if condition (line 2631)
    if_condition_183305 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2631, 4), retall_183304)
    # Assigning a type to the variable 'if_condition_183305' (line 2631)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2631, 4), 'if_condition_183305', if_condition_183305)
    # SSA begins for if statement (line 2631)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 2632):
    
    # Assigning a Name to a Subscript (line 2632):
    # Getting the type of 'allvecs' (line 2632)
    allvecs_183306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2632, 28), 'allvecs')
    # Getting the type of 'result' (line 2632)
    result_183307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2632, 8), 'result')
    str_183308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2632, 15), 'str', 'allvecs')
    # Storing an element on a container (line 2632)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2632, 8), result_183307, (str_183308, allvecs_183306))
    # SSA join for if statement (line 2631)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'result' (line 2633)
    result_183309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2633, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 2633)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2633, 4), 'stypy_return_type', result_183309)
    
    # ################# End of '_minimize_powell(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_minimize_powell' in the type store
    # Getting the type of 'stypy_return_type' (line 2502)
    stypy_return_type_183310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2502, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_183310)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_minimize_powell'
    return stypy_return_type_183310

# Assigning a type to the variable '_minimize_powell' (line 2502)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2502, 0), '_minimize_powell', _minimize_powell)

@norecursion
def _endprint(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_endprint'
    module_type_store = module_type_store.open_function_context('_endprint', 2636, 0, False)
    
    # Passed parameters checking function
    _endprint.stypy_localization = localization
    _endprint.stypy_type_of_self = None
    _endprint.stypy_type_store = module_type_store
    _endprint.stypy_function_name = '_endprint'
    _endprint.stypy_param_names_list = ['x', 'flag', 'fval', 'maxfun', 'xtol', 'disp']
    _endprint.stypy_varargs_param_name = None
    _endprint.stypy_kwargs_param_name = None
    _endprint.stypy_call_defaults = defaults
    _endprint.stypy_call_varargs = varargs
    _endprint.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_endprint', ['x', 'flag', 'fval', 'maxfun', 'xtol', 'disp'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_endprint', localization, ['x', 'flag', 'fval', 'maxfun', 'xtol', 'disp'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_endprint(...)' code ##################

    
    
    # Getting the type of 'flag' (line 2637)
    flag_183311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 7), 'flag')
    int_183312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2637, 15), 'int')
    # Applying the binary operator '==' (line 2637)
    result_eq_183313 = python_operator(stypy.reporting.localization.Localization(__file__, 2637, 7), '==', flag_183311, int_183312)
    
    # Testing the type of an if condition (line 2637)
    if_condition_183314 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2637, 4), result_eq_183313)
    # Assigning a type to the variable 'if_condition_183314' (line 2637)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2637, 4), 'if_condition_183314', if_condition_183314)
    # SSA begins for if statement (line 2637)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'disp' (line 2638)
    disp_183315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2638, 11), 'disp')
    int_183316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2638, 18), 'int')
    # Applying the binary operator '>' (line 2638)
    result_gt_183317 = python_operator(stypy.reporting.localization.Localization(__file__, 2638, 11), '>', disp_183315, int_183316)
    
    # Testing the type of an if condition (line 2638)
    if_condition_183318 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2638, 8), result_gt_183317)
    # Assigning a type to the variable 'if_condition_183318' (line 2638)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2638, 8), 'if_condition_183318', if_condition_183318)
    # SSA begins for if statement (line 2638)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 2639)
    # Processing the call arguments (line 2639)
    str_183320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2639, 18), 'str', '\nOptimization terminated successfully;\nThe returned value satisfies the termination criteria\n(using xtol = ')
    # Getting the type of 'xtol' (line 2641)
    xtol_183321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2641, 36), 'xtol', False)
    str_183322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2641, 42), 'str', ')')
    # Processing the call keyword arguments (line 2639)
    kwargs_183323 = {}
    # Getting the type of 'print' (line 2639)
    print_183319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2639, 12), 'print', False)
    # Calling print(args, kwargs) (line 2639)
    print_call_result_183324 = invoke(stypy.reporting.localization.Localization(__file__, 2639, 12), print_183319, *[str_183320, xtol_183321, str_183322], **kwargs_183323)
    
    # SSA join for if statement (line 2638)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2637)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'flag' (line 2642)
    flag_183325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 7), 'flag')
    int_183326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2642, 15), 'int')
    # Applying the binary operator '==' (line 2642)
    result_eq_183327 = python_operator(stypy.reporting.localization.Localization(__file__, 2642, 7), '==', flag_183325, int_183326)
    
    # Testing the type of an if condition (line 2642)
    if_condition_183328 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2642, 4), result_eq_183327)
    # Assigning a type to the variable 'if_condition_183328' (line 2642)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2642, 4), 'if_condition_183328', if_condition_183328)
    # SSA begins for if statement (line 2642)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'disp' (line 2643)
    disp_183329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2643, 11), 'disp')
    # Testing the type of an if condition (line 2643)
    if_condition_183330 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2643, 8), disp_183329)
    # Assigning a type to the variable 'if_condition_183330' (line 2643)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2643, 8), 'if_condition_183330', if_condition_183330)
    # SSA begins for if statement (line 2643)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 2644)
    # Processing the call arguments (line 2644)
    str_183332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2644, 18), 'str', '\nMaximum number of function evaluations exceeded --- increase maxfun argument.\n')
    # Processing the call keyword arguments (line 2644)
    kwargs_183333 = {}
    # Getting the type of 'print' (line 2644)
    print_183331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2644, 12), 'print', False)
    # Calling print(args, kwargs) (line 2644)
    print_call_result_183334 = invoke(stypy.reporting.localization.Localization(__file__, 2644, 12), print_183331, *[str_183332], **kwargs_183333)
    
    # SSA join for if statement (line 2643)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2642)
    module_type_store = module_type_store.join_ssa_context()
    
    # Assigning a type to the variable 'stypy_return_type' (line 2646)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2646, 4), 'stypy_return_type', types.NoneType)
    
    # ################# End of '_endprint(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_endprint' in the type store
    # Getting the type of 'stypy_return_type' (line 2636)
    stypy_return_type_183335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_183335)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_endprint'
    return stypy_return_type_183335

# Assigning a type to the variable '_endprint' (line 2636)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2636, 0), '_endprint', _endprint)

@norecursion
def brute(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 2649)
    tuple_183336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2649, 29), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2649)
    
    int_183337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2649, 36), 'int')
    int_183338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2649, 52), 'int')
    # Getting the type of 'fmin' (line 2649)
    fmin_183339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 62), 'fmin')
    # Getting the type of 'False' (line 2650)
    False_183340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 15), 'False')
    defaults = [tuple_183336, int_183337, int_183338, fmin_183339, False_183340]
    # Create a new context for function 'brute'
    module_type_store = module_type_store.open_function_context('brute', 2649, 0, False)
    
    # Passed parameters checking function
    brute.stypy_localization = localization
    brute.stypy_type_of_self = None
    brute.stypy_type_store = module_type_store
    brute.stypy_function_name = 'brute'
    brute.stypy_param_names_list = ['func', 'ranges', 'args', 'Ns', 'full_output', 'finish', 'disp']
    brute.stypy_varargs_param_name = None
    brute.stypy_kwargs_param_name = None
    brute.stypy_call_defaults = defaults
    brute.stypy_call_varargs = varargs
    brute.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'brute', ['func', 'ranges', 'args', 'Ns', 'full_output', 'finish', 'disp'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'brute', localization, ['func', 'ranges', 'args', 'Ns', 'full_output', 'finish', 'disp'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'brute(...)' code ##################

    str_183341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2803, (-1)), 'str', 'Minimize a function over a given range by brute force.\n\n    Uses the "brute force" method, i.e. computes the function\'s value\n    at each point of a multidimensional grid of points, to find the global\n    minimum of the function.\n\n    The function is evaluated everywhere in the range with the datatype of the\n    first call to the function, as enforced by the ``vectorize`` NumPy\n    function.  The value and type of the function evaluation returned when\n    ``full_output=True`` are affected in addition by the ``finish`` argument\n    (see Notes).\n\n    Parameters\n    ----------\n    func : callable\n        The objective function to be minimized. Must be in the\n        form ``f(x, *args)``, where ``x`` is the argument in\n        the form of a 1-D array and ``args`` is a tuple of any\n        additional fixed parameters needed to completely specify\n        the function.\n    ranges : tuple\n        Each component of the `ranges` tuple must be either a\n        "slice object" or a range tuple of the form ``(low, high)``.\n        The program uses these to create the grid of points on which\n        the objective function will be computed. See `Note 2` for\n        more detail.\n    args : tuple, optional\n        Any additional fixed parameters needed to completely specify\n        the function.\n    Ns : int, optional\n        Number of grid points along the axes, if not otherwise\n        specified. See `Note2`.\n    full_output : bool, optional\n        If True, return the evaluation grid and the objective function\'s\n        values on it.\n    finish : callable, optional\n        An optimization function that is called with the result of brute force\n        minimization as initial guess.  `finish` should take `func` and\n        the initial guess as positional arguments, and take `args` as\n        keyword arguments.  It may additionally take `full_output`\n        and/or `disp` as keyword arguments.  Use None if no "polishing"\n        function is to be used. See Notes for more details.\n    disp : bool, optional\n        Set to True to print convergence messages.\n\n    Returns\n    -------\n    x0 : ndarray\n        A 1-D array containing the coordinates of a point at which the\n        objective function had its minimum value. (See `Note 1` for\n        which point is returned.)\n    fval : float\n        Function value at the point `x0`. (Returned when `full_output` is\n        True.)\n    grid : tuple\n        Representation of the evaluation grid.  It has the same\n        length as `x0`. (Returned when `full_output` is True.)\n    Jout : ndarray\n        Function values at each point of the evaluation\n        grid, `i.e.`, ``Jout = func(*grid)``. (Returned\n        when `full_output` is True.)\n\n    See Also\n    --------\n    basinhopping, differential_evolution\n\n    Notes\n    -----\n    *Note 1*: The program finds the gridpoint at which the lowest value\n    of the objective function occurs.  If `finish` is None, that is the\n    point returned.  When the global minimum occurs within (or not very far\n    outside) the grid\'s boundaries, and the grid is fine enough, that\n    point will be in the neighborhood of the global minimum.\n\n    However, users often employ some other optimization program to\n    "polish" the gridpoint values, `i.e.`, to seek a more precise\n    (local) minimum near `brute\'s` best gridpoint.\n    The `brute` function\'s `finish` option provides a convenient way to do\n    that.  Any polishing program used must take `brute\'s` output as its\n    initial guess as a positional argument, and take `brute\'s` input values\n    for `args` as keyword arguments, otherwise an error will be raised.\n    It may additionally take `full_output` and/or `disp` as keyword arguments.\n\n    `brute` assumes that the `finish` function returns either an\n    `OptimizeResult` object or a tuple in the form:\n    ``(xmin, Jmin, ... , statuscode)``, where ``xmin`` is the minimizing\n    value of the argument, ``Jmin`` is the minimum value of the objective\n    function, "..." may be some other returned values (which are not used\n    by `brute`), and ``statuscode`` is the status code of the `finish` program.\n\n    Note that when `finish` is not None, the values returned are those\n    of the `finish` program, *not* the gridpoint ones.  Consequently,\n    while `brute` confines its search to the input grid points,\n    the `finish` program\'s results usually will not coincide with any\n    gridpoint, and may fall outside the grid\'s boundary. Thus, if a\n    minimum only needs to be found over the provided grid points, make\n    sure to pass in `finish=None`.\n\n    *Note 2*: The grid of points is a `numpy.mgrid` object.\n    For `brute` the `ranges` and `Ns` inputs have the following effect.\n    Each component of the `ranges` tuple can be either a slice object or a\n    two-tuple giving a range of values, such as (0, 5).  If the component is a\n    slice object, `brute` uses it directly.  If the component is a two-tuple\n    range, `brute` internally converts it to a slice object that interpolates\n    `Ns` points from its low-value to its high-value, inclusive.\n\n    Examples\n    --------\n    We illustrate the use of `brute` to seek the global minimum of a function\n    of two variables that is given as the sum of a positive-definite\n    quadratic and two deep "Gaussian-shaped" craters.  Specifically, define\n    the objective function `f` as the sum of three other functions,\n    ``f = f1 + f2 + f3``.  We suppose each of these has a signature\n    ``(z, *params)``, where ``z = (x, y)``,  and ``params`` and the functions\n    are as defined below.\n\n    >>> params = (2, 3, 7, 8, 9, 10, 44, -1, 2, 26, 1, -2, 0.5)\n    >>> def f1(z, *params):\n    ...     x, y = z\n    ...     a, b, c, d, e, f, g, h, i, j, k, l, scale = params\n    ...     return (a * x**2 + b * x * y + c * y**2 + d*x + e*y + f)\n\n    >>> def f2(z, *params):\n    ...     x, y = z\n    ...     a, b, c, d, e, f, g, h, i, j, k, l, scale = params\n    ...     return (-g*np.exp(-((x-h)**2 + (y-i)**2) / scale))\n\n    >>> def f3(z, *params):\n    ...     x, y = z\n    ...     a, b, c, d, e, f, g, h, i, j, k, l, scale = params\n    ...     return (-j*np.exp(-((x-k)**2 + (y-l)**2) / scale))\n\n    >>> def f(z, *params):\n    ...     return f1(z, *params) + f2(z, *params) + f3(z, *params)\n\n    Thus, the objective function may have local minima near the minimum\n    of each of the three functions of which it is composed.  To\n    use `fmin` to polish its gridpoint result, we may then continue as\n    follows:\n\n    >>> rranges = (slice(-4, 4, 0.25), slice(-4, 4, 0.25))\n    >>> from scipy import optimize\n    >>> resbrute = optimize.brute(f, rranges, args=params, full_output=True,\n    ...                           finish=optimize.fmin)\n    >>> resbrute[0]  # global minimum\n    array([-1.05665192,  1.80834843])\n    >>> resbrute[1]  # function value at global minimum\n    -3.4085818767\n\n    Note that if `finish` had been set to None, we would have gotten the\n    gridpoint [-1.0 1.75] where the rounded function value is -2.892.\n\n    ')
    
    # Assigning a Call to a Name (line 2804):
    
    # Assigning a Call to a Name (line 2804):
    
    # Call to len(...): (line 2804)
    # Processing the call arguments (line 2804)
    # Getting the type of 'ranges' (line 2804)
    ranges_183343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2804, 12), 'ranges', False)
    # Processing the call keyword arguments (line 2804)
    kwargs_183344 = {}
    # Getting the type of 'len' (line 2804)
    len_183342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2804, 8), 'len', False)
    # Calling len(args, kwargs) (line 2804)
    len_call_result_183345 = invoke(stypy.reporting.localization.Localization(__file__, 2804, 8), len_183342, *[ranges_183343], **kwargs_183344)
    
    # Assigning a type to the variable 'N' (line 2804)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2804, 4), 'N', len_call_result_183345)
    
    
    # Getting the type of 'N' (line 2805)
    N_183346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2805, 7), 'N')
    int_183347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2805, 11), 'int')
    # Applying the binary operator '>' (line 2805)
    result_gt_183348 = python_operator(stypy.reporting.localization.Localization(__file__, 2805, 7), '>', N_183346, int_183347)
    
    # Testing the type of an if condition (line 2805)
    if_condition_183349 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2805, 4), result_gt_183348)
    # Assigning a type to the variable 'if_condition_183349' (line 2805)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2805, 4), 'if_condition_183349', if_condition_183349)
    # SSA begins for if statement (line 2805)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2806)
    # Processing the call arguments (line 2806)
    str_183351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2806, 25), 'str', 'Brute Force not possible with more than 40 variables.')
    # Processing the call keyword arguments (line 2806)
    kwargs_183352 = {}
    # Getting the type of 'ValueError' (line 2806)
    ValueError_183350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2806, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2806)
    ValueError_call_result_183353 = invoke(stypy.reporting.localization.Localization(__file__, 2806, 14), ValueError_183350, *[str_183351], **kwargs_183352)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2806, 8), ValueError_call_result_183353, 'raise parameter', BaseException)
    # SSA join for if statement (line 2805)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2808):
    
    # Assigning a Call to a Name (line 2808):
    
    # Call to list(...): (line 2808)
    # Processing the call arguments (line 2808)
    # Getting the type of 'ranges' (line 2808)
    ranges_183355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2808, 18), 'ranges', False)
    # Processing the call keyword arguments (line 2808)
    kwargs_183356 = {}
    # Getting the type of 'list' (line 2808)
    list_183354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2808, 13), 'list', False)
    # Calling list(args, kwargs) (line 2808)
    list_call_result_183357 = invoke(stypy.reporting.localization.Localization(__file__, 2808, 13), list_183354, *[ranges_183355], **kwargs_183356)
    
    # Assigning a type to the variable 'lrange' (line 2808)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2808, 4), 'lrange', list_call_result_183357)
    
    
    # Call to range(...): (line 2809)
    # Processing the call arguments (line 2809)
    # Getting the type of 'N' (line 2809)
    N_183359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2809, 19), 'N', False)
    # Processing the call keyword arguments (line 2809)
    kwargs_183360 = {}
    # Getting the type of 'range' (line 2809)
    range_183358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2809, 13), 'range', False)
    # Calling range(args, kwargs) (line 2809)
    range_call_result_183361 = invoke(stypy.reporting.localization.Localization(__file__, 2809, 13), range_183358, *[N_183359], **kwargs_183360)
    
    # Testing the type of a for loop iterable (line 2809)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2809, 4), range_call_result_183361)
    # Getting the type of the for loop variable (line 2809)
    for_loop_var_183362 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2809, 4), range_call_result_183361)
    # Assigning a type to the variable 'k' (line 2809)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2809, 4), 'k', for_loop_var_183362)
    # SSA begins for a for statement (line 2809)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Type idiom detected: calculating its left and rigth part (line 2810)
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 2810)
    k_183363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2810, 23), 'k')
    # Getting the type of 'lrange' (line 2810)
    lrange_183364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2810, 16), 'lrange')
    # Obtaining the member '__getitem__' of a type (line 2810)
    getitem___183365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2810, 16), lrange_183364, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2810)
    subscript_call_result_183366 = invoke(stypy.reporting.localization.Localization(__file__, 2810, 16), getitem___183365, k_183363)
    
    
    # Call to type(...): (line 2810)
    # Processing the call arguments (line 2810)
    
    # Call to slice(...): (line 2810)
    # Processing the call arguments (line 2810)
    # Getting the type of 'None' (line 2810)
    None_183369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2810, 45), 'None', False)
    # Processing the call keyword arguments (line 2810)
    kwargs_183370 = {}
    # Getting the type of 'slice' (line 2810)
    slice_183368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2810, 39), 'slice', False)
    # Calling slice(args, kwargs) (line 2810)
    slice_call_result_183371 = invoke(stypy.reporting.localization.Localization(__file__, 2810, 39), slice_183368, *[None_183369], **kwargs_183370)
    
    # Processing the call keyword arguments (line 2810)
    kwargs_183372 = {}
    # Getting the type of 'type' (line 2810)
    type_183367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2810, 34), 'type', False)
    # Calling type(args, kwargs) (line 2810)
    type_call_result_183373 = invoke(stypy.reporting.localization.Localization(__file__, 2810, 34), type_183367, *[slice_call_result_183371], **kwargs_183372)
    
    
    (may_be_183374, more_types_in_union_183375) = may_not_be_type(subscript_call_result_183366, type_call_result_183373)

    if may_be_183374:

        if more_types_in_union_183375:
            # Runtime conditional SSA (line 2810)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        
        # Call to len(...): (line 2811)
        # Processing the call arguments (line 2811)
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 2811)
        k_183377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2811, 26), 'k', False)
        # Getting the type of 'lrange' (line 2811)
        lrange_183378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2811, 19), 'lrange', False)
        # Obtaining the member '__getitem__' of a type (line 2811)
        getitem___183379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2811, 19), lrange_183378, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2811)
        subscript_call_result_183380 = invoke(stypy.reporting.localization.Localization(__file__, 2811, 19), getitem___183379, k_183377)
        
        # Processing the call keyword arguments (line 2811)
        kwargs_183381 = {}
        # Getting the type of 'len' (line 2811)
        len_183376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2811, 15), 'len', False)
        # Calling len(args, kwargs) (line 2811)
        len_call_result_183382 = invoke(stypy.reporting.localization.Localization(__file__, 2811, 15), len_183376, *[subscript_call_result_183380], **kwargs_183381)
        
        int_183383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2811, 32), 'int')
        # Applying the binary operator '<' (line 2811)
        result_lt_183384 = python_operator(stypy.reporting.localization.Localization(__file__, 2811, 15), '<', len_call_result_183382, int_183383)
        
        # Testing the type of an if condition (line 2811)
        if_condition_183385 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2811, 12), result_lt_183384)
        # Assigning a type to the variable 'if_condition_183385' (line 2811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2811, 12), 'if_condition_183385', if_condition_183385)
        # SSA begins for if statement (line 2811)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Subscript (line 2812):
        
        # Assigning a BinOp to a Subscript (line 2812):
        
        # Call to tuple(...): (line 2812)
        # Processing the call arguments (line 2812)
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 2812)
        k_183387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2812, 41), 'k', False)
        # Getting the type of 'lrange' (line 2812)
        lrange_183388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2812, 34), 'lrange', False)
        # Obtaining the member '__getitem__' of a type (line 2812)
        getitem___183389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2812, 34), lrange_183388, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2812)
        subscript_call_result_183390 = invoke(stypy.reporting.localization.Localization(__file__, 2812, 34), getitem___183389, k_183387)
        
        # Processing the call keyword arguments (line 2812)
        kwargs_183391 = {}
        # Getting the type of 'tuple' (line 2812)
        tuple_183386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2812, 28), 'tuple', False)
        # Calling tuple(args, kwargs) (line 2812)
        tuple_call_result_183392 = invoke(stypy.reporting.localization.Localization(__file__, 2812, 28), tuple_183386, *[subscript_call_result_183390], **kwargs_183391)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 2812)
        tuple_183393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2812, 48), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2812)
        # Adding element type (line 2812)
        
        # Call to complex(...): (line 2812)
        # Processing the call arguments (line 2812)
        # Getting the type of 'Ns' (line 2812)
        Ns_183395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2812, 56), 'Ns', False)
        # Processing the call keyword arguments (line 2812)
        kwargs_183396 = {}
        # Getting the type of 'complex' (line 2812)
        complex_183394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2812, 48), 'complex', False)
        # Calling complex(args, kwargs) (line 2812)
        complex_call_result_183397 = invoke(stypy.reporting.localization.Localization(__file__, 2812, 48), complex_183394, *[Ns_183395], **kwargs_183396)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2812, 48), tuple_183393, complex_call_result_183397)
        
        # Applying the binary operator '+' (line 2812)
        result_add_183398 = python_operator(stypy.reporting.localization.Localization(__file__, 2812, 28), '+', tuple_call_result_183392, tuple_183393)
        
        # Getting the type of 'lrange' (line 2812)
        lrange_183399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2812, 16), 'lrange')
        # Getting the type of 'k' (line 2812)
        k_183400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2812, 23), 'k')
        # Storing an element on a container (line 2812)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2812, 16), lrange_183399, (k_183400, result_add_183398))
        # SSA join for if statement (line 2811)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Subscript (line 2813):
        
        # Assigning a Call to a Subscript (line 2813):
        
        # Call to slice(...): (line 2813)
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 2813)
        k_183402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2813, 38), 'k', False)
        # Getting the type of 'lrange' (line 2813)
        lrange_183403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2813, 31), 'lrange', False)
        # Obtaining the member '__getitem__' of a type (line 2813)
        getitem___183404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2813, 31), lrange_183403, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2813)
        subscript_call_result_183405 = invoke(stypy.reporting.localization.Localization(__file__, 2813, 31), getitem___183404, k_183402)
        
        # Processing the call keyword arguments (line 2813)
        kwargs_183406 = {}
        # Getting the type of 'slice' (line 2813)
        slice_183401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2813, 24), 'slice', False)
        # Calling slice(args, kwargs) (line 2813)
        slice_call_result_183407 = invoke(stypy.reporting.localization.Localization(__file__, 2813, 24), slice_183401, *[subscript_call_result_183405], **kwargs_183406)
        
        # Getting the type of 'lrange' (line 2813)
        lrange_183408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2813, 12), 'lrange')
        # Getting the type of 'k' (line 2813)
        k_183409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2813, 19), 'k')
        # Storing an element on a container (line 2813)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2813, 12), lrange_183408, (k_183409, slice_call_result_183407))

        if more_types_in_union_183375:
            # SSA join for if statement (line 2810)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'N' (line 2814)
    N_183410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2814, 8), 'N')
    int_183411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2814, 13), 'int')
    # Applying the binary operator '==' (line 2814)
    result_eq_183412 = python_operator(stypy.reporting.localization.Localization(__file__, 2814, 8), '==', N_183410, int_183411)
    
    # Testing the type of an if condition (line 2814)
    if_condition_183413 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2814, 4), result_eq_183412)
    # Assigning a type to the variable 'if_condition_183413' (line 2814)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2814, 4), 'if_condition_183413', if_condition_183413)
    # SSA begins for if statement (line 2814)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 2815):
    
    # Assigning a Subscript to a Name (line 2815):
    
    # Obtaining the type of the subscript
    int_183414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2815, 24), 'int')
    # Getting the type of 'lrange' (line 2815)
    lrange_183415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2815, 17), 'lrange')
    # Obtaining the member '__getitem__' of a type (line 2815)
    getitem___183416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2815, 17), lrange_183415, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2815)
    subscript_call_result_183417 = invoke(stypy.reporting.localization.Localization(__file__, 2815, 17), getitem___183416, int_183414)
    
    # Assigning a type to the variable 'lrange' (line 2815)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2815, 8), 'lrange', subscript_call_result_183417)
    # SSA join for if statement (line 2814)
    module_type_store = module_type_store.join_ssa_context()
    

    @norecursion
    def _scalarfunc(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_scalarfunc'
        module_type_store = module_type_store.open_function_context('_scalarfunc', 2817, 4, False)
        
        # Passed parameters checking function
        _scalarfunc.stypy_localization = localization
        _scalarfunc.stypy_type_of_self = None
        _scalarfunc.stypy_type_store = module_type_store
        _scalarfunc.stypy_function_name = '_scalarfunc'
        _scalarfunc.stypy_param_names_list = []
        _scalarfunc.stypy_varargs_param_name = 'params'
        _scalarfunc.stypy_kwargs_param_name = None
        _scalarfunc.stypy_call_defaults = defaults
        _scalarfunc.stypy_call_varargs = varargs
        _scalarfunc.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_scalarfunc', [], 'params', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_scalarfunc', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_scalarfunc(...)' code ##################

        
        # Assigning a Call to a Name (line 2818):
        
        # Assigning a Call to a Name (line 2818):
        
        # Call to squeeze(...): (line 2818)
        # Processing the call arguments (line 2818)
        
        # Call to asarray(...): (line 2818)
        # Processing the call arguments (line 2818)
        # Getting the type of 'params' (line 2818)
        params_183420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2818, 33), 'params', False)
        # Processing the call keyword arguments (line 2818)
        kwargs_183421 = {}
        # Getting the type of 'asarray' (line 2818)
        asarray_183419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2818, 25), 'asarray', False)
        # Calling asarray(args, kwargs) (line 2818)
        asarray_call_result_183422 = invoke(stypy.reporting.localization.Localization(__file__, 2818, 25), asarray_183419, *[params_183420], **kwargs_183421)
        
        # Processing the call keyword arguments (line 2818)
        kwargs_183423 = {}
        # Getting the type of 'squeeze' (line 2818)
        squeeze_183418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2818, 17), 'squeeze', False)
        # Calling squeeze(args, kwargs) (line 2818)
        squeeze_call_result_183424 = invoke(stypy.reporting.localization.Localization(__file__, 2818, 17), squeeze_183418, *[asarray_call_result_183422], **kwargs_183423)
        
        # Assigning a type to the variable 'params' (line 2818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2818, 8), 'params', squeeze_call_result_183424)
        
        # Call to func(...): (line 2819)
        # Processing the call arguments (line 2819)
        # Getting the type of 'params' (line 2819)
        params_183426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2819, 20), 'params', False)
        # Getting the type of 'args' (line 2819)
        args_183427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2819, 29), 'args', False)
        # Processing the call keyword arguments (line 2819)
        kwargs_183428 = {}
        # Getting the type of 'func' (line 2819)
        func_183425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2819, 15), 'func', False)
        # Calling func(args, kwargs) (line 2819)
        func_call_result_183429 = invoke(stypy.reporting.localization.Localization(__file__, 2819, 15), func_183425, *[params_183426, args_183427], **kwargs_183428)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2819, 8), 'stypy_return_type', func_call_result_183429)
        
        # ################# End of '_scalarfunc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_scalarfunc' in the type store
        # Getting the type of 'stypy_return_type' (line 2817)
        stypy_return_type_183430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2817, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_183430)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_scalarfunc'
        return stypy_return_type_183430

    # Assigning a type to the variable '_scalarfunc' (line 2817)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2817, 4), '_scalarfunc', _scalarfunc)
    
    # Assigning a Call to a Name (line 2821):
    
    # Assigning a Call to a Name (line 2821):
    
    # Call to vectorize(...): (line 2821)
    # Processing the call arguments (line 2821)
    # Getting the type of '_scalarfunc' (line 2821)
    _scalarfunc_183432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2821, 24), '_scalarfunc', False)
    # Processing the call keyword arguments (line 2821)
    kwargs_183433 = {}
    # Getting the type of 'vectorize' (line 2821)
    vectorize_183431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2821, 14), 'vectorize', False)
    # Calling vectorize(args, kwargs) (line 2821)
    vectorize_call_result_183434 = invoke(stypy.reporting.localization.Localization(__file__, 2821, 14), vectorize_183431, *[_scalarfunc_183432], **kwargs_183433)
    
    # Assigning a type to the variable 'vecfunc' (line 2821)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2821, 4), 'vecfunc', vectorize_call_result_183434)
    
    # Assigning a Subscript to a Name (line 2822):
    
    # Assigning a Subscript to a Name (line 2822):
    
    # Obtaining the type of the subscript
    # Getting the type of 'lrange' (line 2822)
    lrange_183435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2822, 17), 'lrange')
    # Getting the type of 'mgrid' (line 2822)
    mgrid_183436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2822, 11), 'mgrid')
    # Obtaining the member '__getitem__' of a type (line 2822)
    getitem___183437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2822, 11), mgrid_183436, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2822)
    subscript_call_result_183438 = invoke(stypy.reporting.localization.Localization(__file__, 2822, 11), getitem___183437, lrange_183435)
    
    # Assigning a type to the variable 'grid' (line 2822)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2822, 4), 'grid', subscript_call_result_183438)
    
    
    # Getting the type of 'N' (line 2823)
    N_183439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2823, 8), 'N')
    int_183440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2823, 13), 'int')
    # Applying the binary operator '==' (line 2823)
    result_eq_183441 = python_operator(stypy.reporting.localization.Localization(__file__, 2823, 8), '==', N_183439, int_183440)
    
    # Testing the type of an if condition (line 2823)
    if_condition_183442 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2823, 4), result_eq_183441)
    # Assigning a type to the variable 'if_condition_183442' (line 2823)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2823, 4), 'if_condition_183442', if_condition_183442)
    # SSA begins for if statement (line 2823)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 2824):
    
    # Assigning a Tuple to a Name (line 2824):
    
    # Obtaining an instance of the builtin type 'tuple' (line 2824)
    tuple_183443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2824, 16), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2824)
    # Adding element type (line 2824)
    # Getting the type of 'grid' (line 2824)
    grid_183444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2824, 16), 'grid')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2824, 16), tuple_183443, grid_183444)
    
    # Assigning a type to the variable 'grid' (line 2824)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2824, 8), 'grid', tuple_183443)
    # SSA join for if statement (line 2823)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2825):
    
    # Assigning a Call to a Name (line 2825):
    
    # Call to vecfunc(...): (line 2825)
    # Getting the type of 'grid' (line 2825)
    grid_183446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2825, 20), 'grid', False)
    # Processing the call keyword arguments (line 2825)
    kwargs_183447 = {}
    # Getting the type of 'vecfunc' (line 2825)
    vecfunc_183445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2825, 11), 'vecfunc', False)
    # Calling vecfunc(args, kwargs) (line 2825)
    vecfunc_call_result_183448 = invoke(stypy.reporting.localization.Localization(__file__, 2825, 11), vecfunc_183445, *[grid_183446], **kwargs_183447)
    
    # Assigning a type to the variable 'Jout' (line 2825)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2825, 4), 'Jout', vecfunc_call_result_183448)
    
    # Assigning a Call to a Name (line 2826):
    
    # Assigning a Call to a Name (line 2826):
    
    # Call to shape(...): (line 2826)
    # Processing the call arguments (line 2826)
    # Getting the type of 'Jout' (line 2826)
    Jout_183450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2826, 19), 'Jout', False)
    # Processing the call keyword arguments (line 2826)
    kwargs_183451 = {}
    # Getting the type of 'shape' (line 2826)
    shape_183449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2826, 13), 'shape', False)
    # Calling shape(args, kwargs) (line 2826)
    shape_call_result_183452 = invoke(stypy.reporting.localization.Localization(__file__, 2826, 13), shape_183449, *[Jout_183450], **kwargs_183451)
    
    # Assigning a type to the variable 'Nshape' (line 2826)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2826, 4), 'Nshape', shape_call_result_183452)
    
    # Assigning a Call to a Name (line 2827):
    
    # Assigning a Call to a Name (line 2827):
    
    # Call to argmin(...): (line 2827)
    # Processing the call arguments (line 2827)
    
    # Call to ravel(...): (line 2827)
    # Processing the call keyword arguments (line 2827)
    kwargs_183456 = {}
    # Getting the type of 'Jout' (line 2827)
    Jout_183454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2827, 18), 'Jout', False)
    # Obtaining the member 'ravel' of a type (line 2827)
    ravel_183455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2827, 18), Jout_183454, 'ravel')
    # Calling ravel(args, kwargs) (line 2827)
    ravel_call_result_183457 = invoke(stypy.reporting.localization.Localization(__file__, 2827, 18), ravel_183455, *[], **kwargs_183456)
    
    # Processing the call keyword arguments (line 2827)
    int_183458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2827, 37), 'int')
    keyword_183459 = int_183458
    kwargs_183460 = {'axis': keyword_183459}
    # Getting the type of 'argmin' (line 2827)
    argmin_183453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2827, 11), 'argmin', False)
    # Calling argmin(args, kwargs) (line 2827)
    argmin_call_result_183461 = invoke(stypy.reporting.localization.Localization(__file__, 2827, 11), argmin_183453, *[ravel_call_result_183457], **kwargs_183460)
    
    # Assigning a type to the variable 'indx' (line 2827)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2827, 4), 'indx', argmin_call_result_183461)
    
    # Assigning a Call to a Name (line 2828):
    
    # Assigning a Call to a Name (line 2828):
    
    # Call to zeros(...): (line 2828)
    # Processing the call arguments (line 2828)
    # Getting the type of 'N' (line 2828)
    N_183463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2828, 18), 'N', False)
    # Getting the type of 'int' (line 2828)
    int_183464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2828, 21), 'int', False)
    # Processing the call keyword arguments (line 2828)
    kwargs_183465 = {}
    # Getting the type of 'zeros' (line 2828)
    zeros_183462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2828, 12), 'zeros', False)
    # Calling zeros(args, kwargs) (line 2828)
    zeros_call_result_183466 = invoke(stypy.reporting.localization.Localization(__file__, 2828, 12), zeros_183462, *[N_183463, int_183464], **kwargs_183465)
    
    # Assigning a type to the variable 'Nindx' (line 2828)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2828, 4), 'Nindx', zeros_call_result_183466)
    
    # Assigning a Call to a Name (line 2829):
    
    # Assigning a Call to a Name (line 2829):
    
    # Call to zeros(...): (line 2829)
    # Processing the call arguments (line 2829)
    # Getting the type of 'N' (line 2829)
    N_183468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2829, 17), 'N', False)
    # Getting the type of 'float' (line 2829)
    float_183469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2829, 20), 'float', False)
    # Processing the call keyword arguments (line 2829)
    kwargs_183470 = {}
    # Getting the type of 'zeros' (line 2829)
    zeros_183467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2829, 11), 'zeros', False)
    # Calling zeros(args, kwargs) (line 2829)
    zeros_call_result_183471 = invoke(stypy.reporting.localization.Localization(__file__, 2829, 11), zeros_183467, *[N_183468, float_183469], **kwargs_183470)
    
    # Assigning a type to the variable 'xmin' (line 2829)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2829, 4), 'xmin', zeros_call_result_183471)
    
    
    # Call to range(...): (line 2830)
    # Processing the call arguments (line 2830)
    # Getting the type of 'N' (line 2830)
    N_183473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2830, 19), 'N', False)
    int_183474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2830, 23), 'int')
    # Applying the binary operator '-' (line 2830)
    result_sub_183475 = python_operator(stypy.reporting.localization.Localization(__file__, 2830, 19), '-', N_183473, int_183474)
    
    int_183476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2830, 26), 'int')
    int_183477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2830, 30), 'int')
    # Processing the call keyword arguments (line 2830)
    kwargs_183478 = {}
    # Getting the type of 'range' (line 2830)
    range_183472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2830, 13), 'range', False)
    # Calling range(args, kwargs) (line 2830)
    range_call_result_183479 = invoke(stypy.reporting.localization.Localization(__file__, 2830, 13), range_183472, *[result_sub_183475, int_183476, int_183477], **kwargs_183478)
    
    # Testing the type of a for loop iterable (line 2830)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2830, 4), range_call_result_183479)
    # Getting the type of the for loop variable (line 2830)
    for_loop_var_183480 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2830, 4), range_call_result_183479)
    # Assigning a type to the variable 'k' (line 2830)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2830, 4), 'k', for_loop_var_183480)
    # SSA begins for a for statement (line 2830)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 2831):
    
    # Assigning a Subscript to a Name (line 2831):
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 2831)
    k_183481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2831, 23), 'k')
    # Getting the type of 'Nshape' (line 2831)
    Nshape_183482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2831, 16), 'Nshape')
    # Obtaining the member '__getitem__' of a type (line 2831)
    getitem___183483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2831, 16), Nshape_183482, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2831)
    subscript_call_result_183484 = invoke(stypy.reporting.localization.Localization(__file__, 2831, 16), getitem___183483, k_183481)
    
    # Assigning a type to the variable 'thisN' (line 2831)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2831, 8), 'thisN', subscript_call_result_183484)
    
    # Assigning a BinOp to a Subscript (line 2832):
    
    # Assigning a BinOp to a Subscript (line 2832):
    # Getting the type of 'indx' (line 2832)
    indx_183485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2832, 19), 'indx')
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 2832)
    k_183486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2832, 33), 'k')
    # Getting the type of 'Nshape' (line 2832)
    Nshape_183487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2832, 26), 'Nshape')
    # Obtaining the member '__getitem__' of a type (line 2832)
    getitem___183488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2832, 26), Nshape_183487, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2832)
    subscript_call_result_183489 = invoke(stypy.reporting.localization.Localization(__file__, 2832, 26), getitem___183488, k_183486)
    
    # Applying the binary operator '%' (line 2832)
    result_mod_183490 = python_operator(stypy.reporting.localization.Localization(__file__, 2832, 19), '%', indx_183485, subscript_call_result_183489)
    
    # Getting the type of 'Nindx' (line 2832)
    Nindx_183491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2832, 8), 'Nindx')
    # Getting the type of 'k' (line 2832)
    k_183492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2832, 14), 'k')
    # Storing an element on a container (line 2832)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2832, 8), Nindx_183491, (k_183492, result_mod_183490))
    
    # Assigning a BinOp to a Name (line 2833):
    
    # Assigning a BinOp to a Name (line 2833):
    # Getting the type of 'indx' (line 2833)
    indx_183493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2833, 15), 'indx')
    # Getting the type of 'thisN' (line 2833)
    thisN_183494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2833, 23), 'thisN')
    # Applying the binary operator '//' (line 2833)
    result_floordiv_183495 = python_operator(stypy.reporting.localization.Localization(__file__, 2833, 15), '//', indx_183493, thisN_183494)
    
    # Assigning a type to the variable 'indx' (line 2833)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2833, 8), 'indx', result_floordiv_183495)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to range(...): (line 2834)
    # Processing the call arguments (line 2834)
    # Getting the type of 'N' (line 2834)
    N_183497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2834, 19), 'N', False)
    # Processing the call keyword arguments (line 2834)
    kwargs_183498 = {}
    # Getting the type of 'range' (line 2834)
    range_183496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2834, 13), 'range', False)
    # Calling range(args, kwargs) (line 2834)
    range_call_result_183499 = invoke(stypy.reporting.localization.Localization(__file__, 2834, 13), range_183496, *[N_183497], **kwargs_183498)
    
    # Testing the type of a for loop iterable (line 2834)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2834, 4), range_call_result_183499)
    # Getting the type of the for loop variable (line 2834)
    for_loop_var_183500 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2834, 4), range_call_result_183499)
    # Assigning a type to the variable 'k' (line 2834)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2834, 4), 'k', for_loop_var_183500)
    # SSA begins for a for statement (line 2834)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Subscript (line 2835):
    
    # Assigning a Subscript to a Subscript (line 2835):
    
    # Obtaining the type of the subscript
    
    # Call to tuple(...): (line 2835)
    # Processing the call arguments (line 2835)
    # Getting the type of 'Nindx' (line 2835)
    Nindx_183502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2835, 32), 'Nindx', False)
    # Processing the call keyword arguments (line 2835)
    kwargs_183503 = {}
    # Getting the type of 'tuple' (line 2835)
    tuple_183501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2835, 26), 'tuple', False)
    # Calling tuple(args, kwargs) (line 2835)
    tuple_call_result_183504 = invoke(stypy.reporting.localization.Localization(__file__, 2835, 26), tuple_183501, *[Nindx_183502], **kwargs_183503)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 2835)
    k_183505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2835, 23), 'k')
    # Getting the type of 'grid' (line 2835)
    grid_183506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2835, 18), 'grid')
    # Obtaining the member '__getitem__' of a type (line 2835)
    getitem___183507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2835, 18), grid_183506, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2835)
    subscript_call_result_183508 = invoke(stypy.reporting.localization.Localization(__file__, 2835, 18), getitem___183507, k_183505)
    
    # Obtaining the member '__getitem__' of a type (line 2835)
    getitem___183509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2835, 18), subscript_call_result_183508, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2835)
    subscript_call_result_183510 = invoke(stypy.reporting.localization.Localization(__file__, 2835, 18), getitem___183509, tuple_call_result_183504)
    
    # Getting the type of 'xmin' (line 2835)
    xmin_183511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2835, 8), 'xmin')
    # Getting the type of 'k' (line 2835)
    k_183512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2835, 13), 'k')
    # Storing an element on a container (line 2835)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2835, 8), xmin_183511, (k_183512, subscript_call_result_183510))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 2837):
    
    # Assigning a Subscript to a Name (line 2837):
    
    # Obtaining the type of the subscript
    
    # Call to tuple(...): (line 2837)
    # Processing the call arguments (line 2837)
    # Getting the type of 'Nindx' (line 2837)
    Nindx_183514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2837, 22), 'Nindx', False)
    # Processing the call keyword arguments (line 2837)
    kwargs_183515 = {}
    # Getting the type of 'tuple' (line 2837)
    tuple_183513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2837, 16), 'tuple', False)
    # Calling tuple(args, kwargs) (line 2837)
    tuple_call_result_183516 = invoke(stypy.reporting.localization.Localization(__file__, 2837, 16), tuple_183513, *[Nindx_183514], **kwargs_183515)
    
    # Getting the type of 'Jout' (line 2837)
    Jout_183517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2837, 11), 'Jout')
    # Obtaining the member '__getitem__' of a type (line 2837)
    getitem___183518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2837, 11), Jout_183517, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2837)
    subscript_call_result_183519 = invoke(stypy.reporting.localization.Localization(__file__, 2837, 11), getitem___183518, tuple_call_result_183516)
    
    # Assigning a type to the variable 'Jmin' (line 2837)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2837, 4), 'Jmin', subscript_call_result_183519)
    
    
    # Getting the type of 'N' (line 2838)
    N_183520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2838, 8), 'N')
    int_183521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2838, 13), 'int')
    # Applying the binary operator '==' (line 2838)
    result_eq_183522 = python_operator(stypy.reporting.localization.Localization(__file__, 2838, 8), '==', N_183520, int_183521)
    
    # Testing the type of an if condition (line 2838)
    if_condition_183523 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2838, 4), result_eq_183522)
    # Assigning a type to the variable 'if_condition_183523' (line 2838)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2838, 4), 'if_condition_183523', if_condition_183523)
    # SSA begins for if statement (line 2838)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 2839):
    
    # Assigning a Subscript to a Name (line 2839):
    
    # Obtaining the type of the subscript
    int_183524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2839, 20), 'int')
    # Getting the type of 'grid' (line 2839)
    grid_183525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2839, 15), 'grid')
    # Obtaining the member '__getitem__' of a type (line 2839)
    getitem___183526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2839, 15), grid_183525, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2839)
    subscript_call_result_183527 = invoke(stypy.reporting.localization.Localization(__file__, 2839, 15), getitem___183526, int_183524)
    
    # Assigning a type to the variable 'grid' (line 2839)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2839, 8), 'grid', subscript_call_result_183527)
    
    # Assigning a Subscript to a Name (line 2840):
    
    # Assigning a Subscript to a Name (line 2840):
    
    # Obtaining the type of the subscript
    int_183528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2840, 20), 'int')
    # Getting the type of 'xmin' (line 2840)
    xmin_183529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2840, 15), 'xmin')
    # Obtaining the member '__getitem__' of a type (line 2840)
    getitem___183530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2840, 15), xmin_183529, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2840)
    subscript_call_result_183531 = invoke(stypy.reporting.localization.Localization(__file__, 2840, 15), getitem___183530, int_183528)
    
    # Assigning a type to the variable 'xmin' (line 2840)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2840, 8), 'xmin', subscript_call_result_183531)
    # SSA join for if statement (line 2838)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to callable(...): (line 2841)
    # Processing the call arguments (line 2841)
    # Getting the type of 'finish' (line 2841)
    finish_183533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2841, 16), 'finish', False)
    # Processing the call keyword arguments (line 2841)
    kwargs_183534 = {}
    # Getting the type of 'callable' (line 2841)
    callable_183532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2841, 7), 'callable', False)
    # Calling callable(args, kwargs) (line 2841)
    callable_call_result_183535 = invoke(stypy.reporting.localization.Localization(__file__, 2841, 7), callable_183532, *[finish_183533], **kwargs_183534)
    
    # Testing the type of an if condition (line 2841)
    if_condition_183536 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2841, 4), callable_call_result_183535)
    # Assigning a type to the variable 'if_condition_183536' (line 2841)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2841, 4), 'if_condition_183536', if_condition_183536)
    # SSA begins for if statement (line 2841)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 2843):
    
    # Assigning a Attribute to a Name (line 2843):
    
    # Call to _getargspec(...): (line 2843)
    # Processing the call arguments (line 2843)
    # Getting the type of 'finish' (line 2843)
    finish_183538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 34), 'finish', False)
    # Processing the call keyword arguments (line 2843)
    kwargs_183539 = {}
    # Getting the type of '_getargspec' (line 2843)
    _getargspec_183537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 22), '_getargspec', False)
    # Calling _getargspec(args, kwargs) (line 2843)
    _getargspec_call_result_183540 = invoke(stypy.reporting.localization.Localization(__file__, 2843, 22), _getargspec_183537, *[finish_183538], **kwargs_183539)
    
    # Obtaining the member 'args' of a type (line 2843)
    args_183541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2843, 22), _getargspec_call_result_183540, 'args')
    # Assigning a type to the variable 'finish_args' (line 2843)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2843, 8), 'finish_args', args_183541)
    
    # Assigning a Call to a Name (line 2844):
    
    # Assigning a Call to a Name (line 2844):
    
    # Call to dict(...): (line 2844)
    # Processing the call keyword arguments (line 2844)
    kwargs_183543 = {}
    # Getting the type of 'dict' (line 2844)
    dict_183542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 24), 'dict', False)
    # Calling dict(args, kwargs) (line 2844)
    dict_call_result_183544 = invoke(stypy.reporting.localization.Localization(__file__, 2844, 24), dict_183542, *[], **kwargs_183543)
    
    # Assigning a type to the variable 'finish_kwargs' (line 2844)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2844, 8), 'finish_kwargs', dict_call_result_183544)
    
    
    str_183545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2845, 11), 'str', 'full_output')
    # Getting the type of 'finish_args' (line 2845)
    finish_args_183546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2845, 28), 'finish_args')
    # Applying the binary operator 'in' (line 2845)
    result_contains_183547 = python_operator(stypy.reporting.localization.Localization(__file__, 2845, 11), 'in', str_183545, finish_args_183546)
    
    # Testing the type of an if condition (line 2845)
    if_condition_183548 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2845, 8), result_contains_183547)
    # Assigning a type to the variable 'if_condition_183548' (line 2845)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2845, 8), 'if_condition_183548', if_condition_183548)
    # SSA begins for if statement (line 2845)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Subscript (line 2846):
    
    # Assigning a Num to a Subscript (line 2846):
    int_183549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2846, 43), 'int')
    # Getting the type of 'finish_kwargs' (line 2846)
    finish_kwargs_183550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2846, 12), 'finish_kwargs')
    str_183551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2846, 26), 'str', 'full_output')
    # Storing an element on a container (line 2846)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2846, 12), finish_kwargs_183550, (str_183551, int_183549))
    # SSA join for if statement (line 2845)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    str_183552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2847, 11), 'str', 'disp')
    # Getting the type of 'finish_args' (line 2847)
    finish_args_183553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2847, 21), 'finish_args')
    # Applying the binary operator 'in' (line 2847)
    result_contains_183554 = python_operator(stypy.reporting.localization.Localization(__file__, 2847, 11), 'in', str_183552, finish_args_183553)
    
    # Testing the type of an if condition (line 2847)
    if_condition_183555 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2847, 8), result_contains_183554)
    # Assigning a type to the variable 'if_condition_183555' (line 2847)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2847, 8), 'if_condition_183555', if_condition_183555)
    # SSA begins for if statement (line 2847)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 2848):
    
    # Assigning a Name to a Subscript (line 2848):
    # Getting the type of 'disp' (line 2848)
    disp_183556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 36), 'disp')
    # Getting the type of 'finish_kwargs' (line 2848)
    finish_kwargs_183557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 12), 'finish_kwargs')
    str_183558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2848, 26), 'str', 'disp')
    # Storing an element on a container (line 2848)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2848, 12), finish_kwargs_183557, (str_183558, disp_183556))
    # SSA branch for the else part of an if statement (line 2847)
    module_type_store.open_ssa_branch('else')
    
    
    str_183559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2849, 13), 'str', 'options')
    # Getting the type of 'finish_args' (line 2849)
    finish_args_183560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2849, 26), 'finish_args')
    # Applying the binary operator 'in' (line 2849)
    result_contains_183561 = python_operator(stypy.reporting.localization.Localization(__file__, 2849, 13), 'in', str_183559, finish_args_183560)
    
    # Testing the type of an if condition (line 2849)
    if_condition_183562 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2849, 13), result_contains_183561)
    # Assigning a type to the variable 'if_condition_183562' (line 2849)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2849, 13), 'if_condition_183562', if_condition_183562)
    # SSA begins for if statement (line 2849)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Dict to a Subscript (line 2852):
    
    # Assigning a Dict to a Subscript (line 2852):
    
    # Obtaining an instance of the builtin type 'dict' (line 2852)
    dict_183563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2852, 39), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 2852)
    # Adding element type (key, value) (line 2852)
    str_183564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2852, 40), 'str', 'disp')
    # Getting the type of 'disp' (line 2852)
    disp_183565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2852, 48), 'disp')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2852, 39), dict_183563, (str_183564, disp_183565))
    
    # Getting the type of 'finish_kwargs' (line 2852)
    finish_kwargs_183566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2852, 12), 'finish_kwargs')
    str_183567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2852, 26), 'str', 'options')
    # Storing an element on a container (line 2852)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2852, 12), finish_kwargs_183566, (str_183567, dict_183563))
    # SSA join for if statement (line 2849)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2847)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2855):
    
    # Assigning a Call to a Name (line 2855):
    
    # Call to finish(...): (line 2855)
    # Processing the call arguments (line 2855)
    # Getting the type of 'func' (line 2855)
    func_183569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2855, 21), 'func', False)
    # Getting the type of 'xmin' (line 2855)
    xmin_183570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2855, 27), 'xmin', False)
    # Processing the call keyword arguments (line 2855)
    # Getting the type of 'args' (line 2855)
    args_183571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2855, 38), 'args', False)
    keyword_183572 = args_183571
    # Getting the type of 'finish_kwargs' (line 2855)
    finish_kwargs_183573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2855, 46), 'finish_kwargs', False)
    kwargs_183574 = {'finish_kwargs_183573': finish_kwargs_183573, 'args': keyword_183572}
    # Getting the type of 'finish' (line 2855)
    finish_183568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2855, 14), 'finish', False)
    # Calling finish(args, kwargs) (line 2855)
    finish_call_result_183575 = invoke(stypy.reporting.localization.Localization(__file__, 2855, 14), finish_183568, *[func_183569, xmin_183570], **kwargs_183574)
    
    # Assigning a type to the variable 'res' (line 2855)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2855, 8), 'res', finish_call_result_183575)
    
    
    # Call to isinstance(...): (line 2857)
    # Processing the call arguments (line 2857)
    # Getting the type of 'res' (line 2857)
    res_183577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2857, 22), 'res', False)
    # Getting the type of 'OptimizeResult' (line 2857)
    OptimizeResult_183578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2857, 27), 'OptimizeResult', False)
    # Processing the call keyword arguments (line 2857)
    kwargs_183579 = {}
    # Getting the type of 'isinstance' (line 2857)
    isinstance_183576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2857, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2857)
    isinstance_call_result_183580 = invoke(stypy.reporting.localization.Localization(__file__, 2857, 11), isinstance_183576, *[res_183577, OptimizeResult_183578], **kwargs_183579)
    
    # Testing the type of an if condition (line 2857)
    if_condition_183581 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2857, 8), isinstance_call_result_183580)
    # Assigning a type to the variable 'if_condition_183581' (line 2857)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2857, 8), 'if_condition_183581', if_condition_183581)
    # SSA begins for if statement (line 2857)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 2858):
    
    # Assigning a Attribute to a Name (line 2858):
    # Getting the type of 'res' (line 2858)
    res_183582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2858, 19), 'res')
    # Obtaining the member 'x' of a type (line 2858)
    x_183583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2858, 19), res_183582, 'x')
    # Assigning a type to the variable 'xmin' (line 2858)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2858, 12), 'xmin', x_183583)
    
    # Assigning a Attribute to a Name (line 2859):
    
    # Assigning a Attribute to a Name (line 2859):
    # Getting the type of 'res' (line 2859)
    res_183584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2859, 19), 'res')
    # Obtaining the member 'fun' of a type (line 2859)
    fun_183585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2859, 19), res_183584, 'fun')
    # Assigning a type to the variable 'Jmin' (line 2859)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2859, 12), 'Jmin', fun_183585)
    
    # Assigning a Attribute to a Name (line 2860):
    
    # Assigning a Attribute to a Name (line 2860):
    # Getting the type of 'res' (line 2860)
    res_183586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2860, 22), 'res')
    # Obtaining the member 'success' of a type (line 2860)
    success_183587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2860, 22), res_183586, 'success')
    # Assigning a type to the variable 'success' (line 2860)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2860, 12), 'success', success_183587)
    # SSA branch for the else part of an if statement (line 2857)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Subscript to a Name (line 2862):
    
    # Assigning a Subscript to a Name (line 2862):
    
    # Obtaining the type of the subscript
    int_183588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2862, 23), 'int')
    # Getting the type of 'res' (line 2862)
    res_183589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2862, 19), 'res')
    # Obtaining the member '__getitem__' of a type (line 2862)
    getitem___183590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2862, 19), res_183589, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2862)
    subscript_call_result_183591 = invoke(stypy.reporting.localization.Localization(__file__, 2862, 19), getitem___183590, int_183588)
    
    # Assigning a type to the variable 'xmin' (line 2862)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2862, 12), 'xmin', subscript_call_result_183591)
    
    # Assigning a Subscript to a Name (line 2863):
    
    # Assigning a Subscript to a Name (line 2863):
    
    # Obtaining the type of the subscript
    int_183592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2863, 23), 'int')
    # Getting the type of 'res' (line 2863)
    res_183593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2863, 19), 'res')
    # Obtaining the member '__getitem__' of a type (line 2863)
    getitem___183594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2863, 19), res_183593, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2863)
    subscript_call_result_183595 = invoke(stypy.reporting.localization.Localization(__file__, 2863, 19), getitem___183594, int_183592)
    
    # Assigning a type to the variable 'Jmin' (line 2863)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2863, 12), 'Jmin', subscript_call_result_183595)
    
    # Assigning a Compare to a Name (line 2864):
    
    # Assigning a Compare to a Name (line 2864):
    
    
    # Obtaining the type of the subscript
    int_183596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2864, 26), 'int')
    # Getting the type of 'res' (line 2864)
    res_183597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2864, 22), 'res')
    # Obtaining the member '__getitem__' of a type (line 2864)
    getitem___183598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2864, 22), res_183597, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2864)
    subscript_call_result_183599 = invoke(stypy.reporting.localization.Localization(__file__, 2864, 22), getitem___183598, int_183596)
    
    int_183600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2864, 33), 'int')
    # Applying the binary operator '==' (line 2864)
    result_eq_183601 = python_operator(stypy.reporting.localization.Localization(__file__, 2864, 22), '==', subscript_call_result_183599, int_183600)
    
    # Assigning a type to the variable 'success' (line 2864)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2864, 12), 'success', result_eq_183601)
    # SSA join for if statement (line 2857)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'success' (line 2865)
    success_183602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2865, 15), 'success')
    # Applying the 'not' unary operator (line 2865)
    result_not__183603 = python_operator(stypy.reporting.localization.Localization(__file__, 2865, 11), 'not', success_183602)
    
    # Testing the type of an if condition (line 2865)
    if_condition_183604 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2865, 8), result_not__183603)
    # Assigning a type to the variable 'if_condition_183604' (line 2865)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2865, 8), 'if_condition_183604', if_condition_183604)
    # SSA begins for if statement (line 2865)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'disp' (line 2866)
    disp_183605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2866, 15), 'disp')
    # Testing the type of an if condition (line 2866)
    if_condition_183606 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2866, 12), disp_183605)
    # Assigning a type to the variable 'if_condition_183606' (line 2866)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2866, 12), 'if_condition_183606', if_condition_183606)
    # SSA begins for if statement (line 2866)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 2867)
    # Processing the call arguments (line 2867)
    str_183608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2867, 22), 'str', 'Warning: Either final optimization did not succeed or `finish` does not return `statuscode` as its last argument.')
    # Processing the call keyword arguments (line 2867)
    kwargs_183609 = {}
    # Getting the type of 'print' (line 2867)
    print_183607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2867, 16), 'print', False)
    # Calling print(args, kwargs) (line 2867)
    print_call_result_183610 = invoke(stypy.reporting.localization.Localization(__file__, 2867, 16), print_183607, *[str_183608], **kwargs_183609)
    
    # SSA join for if statement (line 2866)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2865)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2841)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'full_output' (line 2871)
    full_output_183611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2871, 7), 'full_output')
    # Testing the type of an if condition (line 2871)
    if_condition_183612 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2871, 4), full_output_183611)
    # Assigning a type to the variable 'if_condition_183612' (line 2871)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2871, 4), 'if_condition_183612', if_condition_183612)
    # SSA begins for if statement (line 2871)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2872)
    tuple_183613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2872, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2872)
    # Adding element type (line 2872)
    # Getting the type of 'xmin' (line 2872)
    xmin_183614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2872, 15), 'xmin')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2872, 15), tuple_183613, xmin_183614)
    # Adding element type (line 2872)
    # Getting the type of 'Jmin' (line 2872)
    Jmin_183615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2872, 21), 'Jmin')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2872, 15), tuple_183613, Jmin_183615)
    # Adding element type (line 2872)
    # Getting the type of 'grid' (line 2872)
    grid_183616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2872, 27), 'grid')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2872, 15), tuple_183613, grid_183616)
    # Adding element type (line 2872)
    # Getting the type of 'Jout' (line 2872)
    Jout_183617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2872, 33), 'Jout')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2872, 15), tuple_183613, Jout_183617)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2872)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2872, 8), 'stypy_return_type', tuple_183613)
    # SSA branch for the else part of an if statement (line 2871)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'xmin' (line 2874)
    xmin_183618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2874, 15), 'xmin')
    # Assigning a type to the variable 'stypy_return_type' (line 2874)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2874, 8), 'stypy_return_type', xmin_183618)
    # SSA join for if statement (line 2871)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'brute(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'brute' in the type store
    # Getting the type of 'stypy_return_type' (line 2649)
    stypy_return_type_183619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_183619)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'brute'
    return stypy_return_type_183619

# Assigning a type to the variable 'brute' (line 2649)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2649, 0), 'brute', brute)

@norecursion
def show_options(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2877)
    None_183620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2877, 24), 'None')
    # Getting the type of 'None' (line 2877)
    None_183621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2877, 37), 'None')
    # Getting the type of 'True' (line 2877)
    True_183622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2877, 48), 'True')
    defaults = [None_183620, None_183621, True_183622]
    # Create a new context for function 'show_options'
    module_type_store = module_type_store.open_function_context('show_options', 2877, 0, False)
    
    # Passed parameters checking function
    show_options.stypy_localization = localization
    show_options.stypy_type_of_self = None
    show_options.stypy_type_store = module_type_store
    show_options.stypy_function_name = 'show_options'
    show_options.stypy_param_names_list = ['solver', 'method', 'disp']
    show_options.stypy_varargs_param_name = None
    show_options.stypy_kwargs_param_name = None
    show_options.stypy_call_defaults = defaults
    show_options.stypy_call_varargs = varargs
    show_options.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'show_options', ['solver', 'method', 'disp'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'show_options', localization, ['solver', 'method', 'disp'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'show_options(...)' code ##################

    str_183623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2944, (-1)), 'str', "\n    Show documentation for additional options of optimization solvers.\n\n    These are method-specific options that can be supplied through the\n    ``options`` dict.\n\n    Parameters\n    ----------\n    solver : str\n        Type of optimization solver. One of 'minimize', 'minimize_scalar',\n        'root', or 'linprog'.\n    method : str, optional\n        If not given, shows all methods of the specified solver. Otherwise,\n        show only the options for the specified method. Valid values\n        corresponds to methods' names of respective solver (e.g. 'BFGS' for\n        'minimize').\n    disp : bool, optional\n        Whether to print the result rather than returning it.\n\n    Returns\n    -------\n    text\n        Either None (for disp=False) or the text string (disp=True)\n\n    Notes\n    -----\n    The solver-specific methods are:\n\n    `scipy.optimize.minimize`\n\n    - :ref:`Nelder-Mead <optimize.minimize-neldermead>`\n    - :ref:`Powell      <optimize.minimize-powell>`\n    - :ref:`CG          <optimize.minimize-cg>`\n    - :ref:`BFGS        <optimize.minimize-bfgs>`\n    - :ref:`Newton-CG   <optimize.minimize-newtoncg>`\n    - :ref:`L-BFGS-B    <optimize.minimize-lbfgsb>`\n    - :ref:`TNC         <optimize.minimize-tnc>`\n    - :ref:`COBYLA      <optimize.minimize-cobyla>`\n    - :ref:`SLSQP       <optimize.minimize-slsqp>`\n    - :ref:`dogleg      <optimize.minimize-dogleg>`\n    - :ref:`trust-ncg   <optimize.minimize-trustncg>`\n\n    `scipy.optimize.root`\n\n    - :ref:`hybr              <optimize.root-hybr>`\n    - :ref:`lm                <optimize.root-lm>`\n    - :ref:`broyden1          <optimize.root-broyden1>`\n    - :ref:`broyden2          <optimize.root-broyden2>`\n    - :ref:`anderson          <optimize.root-anderson>`\n    - :ref:`linearmixing      <optimize.root-linearmixing>`\n    - :ref:`diagbroyden       <optimize.root-diagbroyden>`\n    - :ref:`excitingmixing    <optimize.root-excitingmixing>`\n    - :ref:`krylov            <optimize.root-krylov>`\n    - :ref:`df-sane           <optimize.root-dfsane>`\n\n    `scipy.optimize.minimize_scalar`\n\n    - :ref:`brent       <optimize.minimize_scalar-brent>`\n    - :ref:`golden      <optimize.minimize_scalar-golden>`\n    - :ref:`bounded     <optimize.minimize_scalar-bounded>`\n\n    `scipy.optimize.linprog`\n\n    - :ref:`simplex         <optimize.linprog-simplex>`\n    - :ref:`interior-point  <optimize.linprog-interior-point>`\n\n    ")
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2945, 4))
    
    # 'import textwrap' statement (line 2945)
    import textwrap

    import_module(stypy.reporting.localization.Localization(__file__, 2945, 4), 'textwrap', textwrap, module_type_store)
    
    
    # Assigning a Dict to a Name (line 2947):
    
    # Assigning a Dict to a Name (line 2947):
    
    # Obtaining an instance of the builtin type 'dict' (line 2947)
    dict_183624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2947, 19), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 2947)
    # Adding element type (key, value) (line 2947)
    str_183625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2948, 8), 'str', 'minimize')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2949)
    tuple_183626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2949, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2949)
    # Adding element type (line 2949)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2949)
    tuple_183627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2949, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2949)
    # Adding element type (line 2949)
    str_183628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2949, 13), 'str', 'bfgs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2949, 13), tuple_183627, str_183628)
    # Adding element type (line 2949)
    str_183629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2949, 21), 'str', 'scipy.optimize.optimize._minimize_bfgs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2949, 13), tuple_183627, str_183629)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2949, 12), tuple_183626, tuple_183627)
    # Adding element type (line 2949)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2950)
    tuple_183630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2950, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2950)
    # Adding element type (line 2950)
    str_183631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2950, 13), 'str', 'cg')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2950, 13), tuple_183630, str_183631)
    # Adding element type (line 2950)
    str_183632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2950, 19), 'str', 'scipy.optimize.optimize._minimize_cg')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2950, 13), tuple_183630, str_183632)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2949, 12), tuple_183626, tuple_183630)
    # Adding element type (line 2949)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2951)
    tuple_183633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2951, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2951)
    # Adding element type (line 2951)
    str_183634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2951, 13), 'str', 'cobyla')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2951, 13), tuple_183633, str_183634)
    # Adding element type (line 2951)
    str_183635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2951, 23), 'str', 'scipy.optimize.cobyla._minimize_cobyla')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2951, 13), tuple_183633, str_183635)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2949, 12), tuple_183626, tuple_183633)
    # Adding element type (line 2949)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2952)
    tuple_183636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2952, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2952)
    # Adding element type (line 2952)
    str_183637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2952, 13), 'str', 'dogleg')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2952, 13), tuple_183636, str_183637)
    # Adding element type (line 2952)
    str_183638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2952, 23), 'str', 'scipy.optimize._trustregion_dogleg._minimize_dogleg')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2952, 13), tuple_183636, str_183638)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2949, 12), tuple_183626, tuple_183636)
    # Adding element type (line 2949)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2953)
    tuple_183639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2953, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2953)
    # Adding element type (line 2953)
    str_183640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2953, 13), 'str', 'l-bfgs-b')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2953, 13), tuple_183639, str_183640)
    # Adding element type (line 2953)
    str_183641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2953, 25), 'str', 'scipy.optimize.lbfgsb._minimize_lbfgsb')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2953, 13), tuple_183639, str_183641)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2949, 12), tuple_183626, tuple_183639)
    # Adding element type (line 2949)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2954)
    tuple_183642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2954, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2954)
    # Adding element type (line 2954)
    str_183643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2954, 13), 'str', 'nelder-mead')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2954, 13), tuple_183642, str_183643)
    # Adding element type (line 2954)
    str_183644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2954, 28), 'str', 'scipy.optimize.optimize._minimize_neldermead')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2954, 13), tuple_183642, str_183644)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2949, 12), tuple_183626, tuple_183642)
    # Adding element type (line 2949)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2955)
    tuple_183645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2955, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2955)
    # Adding element type (line 2955)
    str_183646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2955, 13), 'str', 'newtoncg')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2955, 13), tuple_183645, str_183646)
    # Adding element type (line 2955)
    str_183647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2955, 25), 'str', 'scipy.optimize.optimize._minimize_newtoncg')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2955, 13), tuple_183645, str_183647)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2949, 12), tuple_183626, tuple_183645)
    # Adding element type (line 2949)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2956)
    tuple_183648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2956, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2956)
    # Adding element type (line 2956)
    str_183649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2956, 13), 'str', 'powell')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2956, 13), tuple_183648, str_183649)
    # Adding element type (line 2956)
    str_183650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2956, 23), 'str', 'scipy.optimize.optimize._minimize_powell')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2956, 13), tuple_183648, str_183650)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2949, 12), tuple_183626, tuple_183648)
    # Adding element type (line 2949)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2957)
    tuple_183651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2957, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2957)
    # Adding element type (line 2957)
    str_183652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2957, 13), 'str', 'slsqp')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2957, 13), tuple_183651, str_183652)
    # Adding element type (line 2957)
    str_183653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2957, 22), 'str', 'scipy.optimize.slsqp._minimize_slsqp')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2957, 13), tuple_183651, str_183653)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2949, 12), tuple_183626, tuple_183651)
    # Adding element type (line 2949)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2958)
    tuple_183654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2958, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2958)
    # Adding element type (line 2958)
    str_183655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2958, 13), 'str', 'tnc')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2958, 13), tuple_183654, str_183655)
    # Adding element type (line 2958)
    str_183656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2958, 20), 'str', 'scipy.optimize.tnc._minimize_tnc')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2958, 13), tuple_183654, str_183656)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2949, 12), tuple_183626, tuple_183654)
    # Adding element type (line 2949)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2959)
    tuple_183657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2959, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2959)
    # Adding element type (line 2959)
    str_183658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2959, 13), 'str', 'trust-ncg')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2959, 13), tuple_183657, str_183658)
    # Adding element type (line 2959)
    str_183659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2959, 26), 'str', 'scipy.optimize._trustregion_ncg._minimize_trust_ncg')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2959, 13), tuple_183657, str_183659)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2949, 12), tuple_183626, tuple_183657)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2947, 19), dict_183624, (str_183625, tuple_183626))
    # Adding element type (key, value) (line 2947)
    str_183660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2961, 8), 'str', 'root')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2962)
    tuple_183661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2962, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2962)
    # Adding element type (line 2962)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2962)
    tuple_183662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2962, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2962)
    # Adding element type (line 2962)
    str_183663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2962, 13), 'str', 'hybr')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2962, 13), tuple_183662, str_183663)
    # Adding element type (line 2962)
    str_183664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2962, 21), 'str', 'scipy.optimize.minpack._root_hybr')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2962, 13), tuple_183662, str_183664)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2962, 12), tuple_183661, tuple_183662)
    # Adding element type (line 2962)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2963)
    tuple_183665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2963, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2963)
    # Adding element type (line 2963)
    str_183666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2963, 13), 'str', 'lm')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2963, 13), tuple_183665, str_183666)
    # Adding element type (line 2963)
    str_183667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2963, 19), 'str', 'scipy.optimize._root._root_leastsq')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2963, 13), tuple_183665, str_183667)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2962, 12), tuple_183661, tuple_183665)
    # Adding element type (line 2962)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2964)
    tuple_183668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2964, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2964)
    # Adding element type (line 2964)
    str_183669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2964, 13), 'str', 'broyden1')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2964, 13), tuple_183668, str_183669)
    # Adding element type (line 2964)
    str_183670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2964, 25), 'str', 'scipy.optimize._root._root_broyden1_doc')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2964, 13), tuple_183668, str_183670)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2962, 12), tuple_183661, tuple_183668)
    # Adding element type (line 2962)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2965)
    tuple_183671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2965, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2965)
    # Adding element type (line 2965)
    str_183672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2965, 13), 'str', 'broyden2')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2965, 13), tuple_183671, str_183672)
    # Adding element type (line 2965)
    str_183673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2965, 25), 'str', 'scipy.optimize._root._root_broyden2_doc')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2965, 13), tuple_183671, str_183673)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2962, 12), tuple_183661, tuple_183671)
    # Adding element type (line 2962)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2966)
    tuple_183674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2966, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2966)
    # Adding element type (line 2966)
    str_183675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2966, 13), 'str', 'anderson')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2966, 13), tuple_183674, str_183675)
    # Adding element type (line 2966)
    str_183676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2966, 25), 'str', 'scipy.optimize._root._root_anderson_doc')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2966, 13), tuple_183674, str_183676)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2962, 12), tuple_183661, tuple_183674)
    # Adding element type (line 2962)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2967)
    tuple_183677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2967, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2967)
    # Adding element type (line 2967)
    str_183678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2967, 13), 'str', 'diagbroyden')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2967, 13), tuple_183677, str_183678)
    # Adding element type (line 2967)
    str_183679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2967, 28), 'str', 'scipy.optimize._root._root_diagbroyden_doc')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2967, 13), tuple_183677, str_183679)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2962, 12), tuple_183661, tuple_183677)
    # Adding element type (line 2962)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2968)
    tuple_183680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2968, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2968)
    # Adding element type (line 2968)
    str_183681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2968, 13), 'str', 'excitingmixing')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2968, 13), tuple_183680, str_183681)
    # Adding element type (line 2968)
    str_183682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2968, 31), 'str', 'scipy.optimize._root._root_excitingmixing_doc')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2968, 13), tuple_183680, str_183682)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2962, 12), tuple_183661, tuple_183680)
    # Adding element type (line 2962)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2969)
    tuple_183683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2969, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2969)
    # Adding element type (line 2969)
    str_183684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2969, 13), 'str', 'linearmixing')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2969, 13), tuple_183683, str_183684)
    # Adding element type (line 2969)
    str_183685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2969, 29), 'str', 'scipy.optimize._root._root_linearmixing_doc')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2969, 13), tuple_183683, str_183685)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2962, 12), tuple_183661, tuple_183683)
    # Adding element type (line 2962)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2970)
    tuple_183686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2970, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2970)
    # Adding element type (line 2970)
    str_183687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2970, 13), 'str', 'krylov')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2970, 13), tuple_183686, str_183687)
    # Adding element type (line 2970)
    str_183688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2970, 23), 'str', 'scipy.optimize._root._root_krylov_doc')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2970, 13), tuple_183686, str_183688)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2962, 12), tuple_183661, tuple_183686)
    # Adding element type (line 2962)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2971)
    tuple_183689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2971, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2971)
    # Adding element type (line 2971)
    str_183690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2971, 13), 'str', 'df-sane')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2971, 13), tuple_183689, str_183690)
    # Adding element type (line 2971)
    str_183691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2971, 24), 'str', 'scipy.optimize._spectral._root_df_sane')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2971, 13), tuple_183689, str_183691)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2962, 12), tuple_183661, tuple_183689)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2947, 19), dict_183624, (str_183660, tuple_183661))
    # Adding element type (key, value) (line 2947)
    str_183692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2973, 8), 'str', 'linprog')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2974)
    tuple_183693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2974, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2974)
    # Adding element type (line 2974)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2974)
    tuple_183694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2974, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2974)
    # Adding element type (line 2974)
    str_183695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2974, 13), 'str', 'simplex')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2974, 13), tuple_183694, str_183695)
    # Adding element type (line 2974)
    str_183696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2974, 24), 'str', 'scipy.optimize._linprog._linprog_simplex')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2974, 13), tuple_183694, str_183696)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2974, 12), tuple_183693, tuple_183694)
    # Adding element type (line 2974)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2975)
    tuple_183697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2975, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2975)
    # Adding element type (line 2975)
    str_183698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2975, 13), 'str', 'interior-point')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 13), tuple_183697, str_183698)
    # Adding element type (line 2975)
    str_183699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2975, 31), 'str', 'scipy.optimize._linprog._linprog_ip')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 13), tuple_183697, str_183699)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2974, 12), tuple_183693, tuple_183697)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2947, 19), dict_183624, (str_183692, tuple_183693))
    # Adding element type (key, value) (line 2947)
    str_183700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2977, 8), 'str', 'minimize_scalar')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2978)
    tuple_183701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2978, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2978)
    # Adding element type (line 2978)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2978)
    tuple_183702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2978, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2978)
    # Adding element type (line 2978)
    str_183703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2978, 13), 'str', 'brent')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2978, 13), tuple_183702, str_183703)
    # Adding element type (line 2978)
    str_183704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2978, 22), 'str', 'scipy.optimize.optimize._minimize_scalar_brent')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2978, 13), tuple_183702, str_183704)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2978, 12), tuple_183701, tuple_183702)
    # Adding element type (line 2978)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2979)
    tuple_183705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2979, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2979)
    # Adding element type (line 2979)
    str_183706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2979, 13), 'str', 'bounded')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2979, 13), tuple_183705, str_183706)
    # Adding element type (line 2979)
    str_183707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2979, 24), 'str', 'scipy.optimize.optimize._minimize_scalar_bounded')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2979, 13), tuple_183705, str_183707)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2978, 12), tuple_183701, tuple_183705)
    # Adding element type (line 2978)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2980)
    tuple_183708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2980, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2980)
    # Adding element type (line 2980)
    str_183709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2980, 13), 'str', 'golden')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2980, 13), tuple_183708, str_183709)
    # Adding element type (line 2980)
    str_183710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2980, 23), 'str', 'scipy.optimize.optimize._minimize_scalar_golden')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2980, 13), tuple_183708, str_183710)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2978, 12), tuple_183701, tuple_183708)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2947, 19), dict_183624, (str_183700, tuple_183701))
    
    # Assigning a type to the variable 'doc_routines' (line 2947)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2947, 4), 'doc_routines', dict_183624)
    
    # Type idiom detected: calculating its left and rigth part (line 2984)
    # Getting the type of 'solver' (line 2984)
    solver_183711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2984, 7), 'solver')
    # Getting the type of 'None' (line 2984)
    None_183712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2984, 17), 'None')
    
    (may_be_183713, more_types_in_union_183714) = may_be_none(solver_183711, None_183712)

    if may_be_183713:

        if more_types_in_union_183714:
            # Runtime conditional SSA (line 2984)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a List to a Name (line 2985):
        
        # Assigning a List to a Name (line 2985):
        
        # Obtaining an instance of the builtin type 'list' (line 2985)
        list_183715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2985, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2985)
        # Adding element type (line 2985)
        str_183716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2985, 16), 'str', '\n\n\n========\n')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2985, 15), list_183715, str_183716)
        # Adding element type (line 2985)
        str_183717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2985, 36), 'str', 'minimize\n')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2985, 15), list_183715, str_183717)
        # Adding element type (line 2985)
        str_183718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2985, 50), 'str', '========\n')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2985, 15), list_183715, str_183718)
        
        # Assigning a type to the variable 'text' (line 2985)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2985, 8), 'text', list_183715)
        
        # Call to append(...): (line 2986)
        # Processing the call arguments (line 2986)
        
        # Call to show_options(...): (line 2986)
        # Processing the call arguments (line 2986)
        str_183722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2986, 33), 'str', 'minimize')
        # Processing the call keyword arguments (line 2986)
        # Getting the type of 'False' (line 2986)
        False_183723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2986, 50), 'False', False)
        keyword_183724 = False_183723
        kwargs_183725 = {'disp': keyword_183724}
        # Getting the type of 'show_options' (line 2986)
        show_options_183721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2986, 20), 'show_options', False)
        # Calling show_options(args, kwargs) (line 2986)
        show_options_call_result_183726 = invoke(stypy.reporting.localization.Localization(__file__, 2986, 20), show_options_183721, *[str_183722], **kwargs_183725)
        
        # Processing the call keyword arguments (line 2986)
        kwargs_183727 = {}
        # Getting the type of 'text' (line 2986)
        text_183719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2986, 8), 'text', False)
        # Obtaining the member 'append' of a type (line 2986)
        append_183720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2986, 8), text_183719, 'append')
        # Calling append(args, kwargs) (line 2986)
        append_call_result_183728 = invoke(stypy.reporting.localization.Localization(__file__, 2986, 8), append_183720, *[show_options_call_result_183726], **kwargs_183727)
        
        
        # Call to extend(...): (line 2987)
        # Processing the call arguments (line 2987)
        
        # Obtaining an instance of the builtin type 'list' (line 2987)
        list_183731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2987, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2987)
        # Adding element type (line 2987)
        str_183732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2987, 21), 'str', '\n\n===============\n')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2987, 20), list_183731, str_183732)
        # Adding element type (line 2987)
        str_183733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2987, 46), 'str', 'minimize_scalar\n')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2987, 20), list_183731, str_183733)
        # Adding element type (line 2987)
        str_183734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2988, 21), 'str', '===============\n')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2987, 20), list_183731, str_183734)
        
        # Processing the call keyword arguments (line 2987)
        kwargs_183735 = {}
        # Getting the type of 'text' (line 2987)
        text_183729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2987, 8), 'text', False)
        # Obtaining the member 'extend' of a type (line 2987)
        extend_183730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2987, 8), text_183729, 'extend')
        # Calling extend(args, kwargs) (line 2987)
        extend_call_result_183736 = invoke(stypy.reporting.localization.Localization(__file__, 2987, 8), extend_183730, *[list_183731], **kwargs_183735)
        
        
        # Call to append(...): (line 2989)
        # Processing the call arguments (line 2989)
        
        # Call to show_options(...): (line 2989)
        # Processing the call arguments (line 2989)
        str_183740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2989, 33), 'str', 'minimize_scalar')
        # Processing the call keyword arguments (line 2989)
        # Getting the type of 'False' (line 2989)
        False_183741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2989, 57), 'False', False)
        keyword_183742 = False_183741
        kwargs_183743 = {'disp': keyword_183742}
        # Getting the type of 'show_options' (line 2989)
        show_options_183739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2989, 20), 'show_options', False)
        # Calling show_options(args, kwargs) (line 2989)
        show_options_call_result_183744 = invoke(stypy.reporting.localization.Localization(__file__, 2989, 20), show_options_183739, *[str_183740], **kwargs_183743)
        
        # Processing the call keyword arguments (line 2989)
        kwargs_183745 = {}
        # Getting the type of 'text' (line 2989)
        text_183737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2989, 8), 'text', False)
        # Obtaining the member 'append' of a type (line 2989)
        append_183738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2989, 8), text_183737, 'append')
        # Calling append(args, kwargs) (line 2989)
        append_call_result_183746 = invoke(stypy.reporting.localization.Localization(__file__, 2989, 8), append_183738, *[show_options_call_result_183744], **kwargs_183745)
        
        
        # Call to extend(...): (line 2990)
        # Processing the call arguments (line 2990)
        
        # Obtaining an instance of the builtin type 'list' (line 2990)
        list_183749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2990, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2990)
        # Adding element type (line 2990)
        str_183750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2990, 21), 'str', '\n\n\n====\n')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2990, 20), list_183749, str_183750)
        # Adding element type (line 2990)
        str_183751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2990, 37), 'str', 'root\n')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2990, 20), list_183749, str_183751)
        # Adding element type (line 2990)
        str_183752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2991, 21), 'str', '====\n')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2990, 20), list_183749, str_183752)
        
        # Processing the call keyword arguments (line 2990)
        kwargs_183753 = {}
        # Getting the type of 'text' (line 2990)
        text_183747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2990, 8), 'text', False)
        # Obtaining the member 'extend' of a type (line 2990)
        extend_183748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2990, 8), text_183747, 'extend')
        # Calling extend(args, kwargs) (line 2990)
        extend_call_result_183754 = invoke(stypy.reporting.localization.Localization(__file__, 2990, 8), extend_183748, *[list_183749], **kwargs_183753)
        
        
        # Call to append(...): (line 2992)
        # Processing the call arguments (line 2992)
        
        # Call to show_options(...): (line 2992)
        # Processing the call arguments (line 2992)
        str_183758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2992, 33), 'str', 'root')
        # Processing the call keyword arguments (line 2992)
        # Getting the type of 'False' (line 2992)
        False_183759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2992, 46), 'False', False)
        keyword_183760 = False_183759
        kwargs_183761 = {'disp': keyword_183760}
        # Getting the type of 'show_options' (line 2992)
        show_options_183757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2992, 20), 'show_options', False)
        # Calling show_options(args, kwargs) (line 2992)
        show_options_call_result_183762 = invoke(stypy.reporting.localization.Localization(__file__, 2992, 20), show_options_183757, *[str_183758], **kwargs_183761)
        
        # Processing the call keyword arguments (line 2992)
        kwargs_183763 = {}
        # Getting the type of 'text' (line 2992)
        text_183755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2992, 8), 'text', False)
        # Obtaining the member 'append' of a type (line 2992)
        append_183756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2992, 8), text_183755, 'append')
        # Calling append(args, kwargs) (line 2992)
        append_call_result_183764 = invoke(stypy.reporting.localization.Localization(__file__, 2992, 8), append_183756, *[show_options_call_result_183762], **kwargs_183763)
        
        
        # Call to extend(...): (line 2993)
        # Processing the call arguments (line 2993)
        
        # Obtaining an instance of the builtin type 'list' (line 2993)
        list_183767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2993, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2993)
        # Adding element type (line 2993)
        str_183768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2993, 21), 'str', '\n\n\n=======\n')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2993, 20), list_183767, str_183768)
        # Adding element type (line 2993)
        str_183769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2993, 40), 'str', 'linprog\n')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2993, 20), list_183767, str_183769)
        # Adding element type (line 2993)
        str_183770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2994, 21), 'str', '=======\n')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2993, 20), list_183767, str_183770)
        
        # Processing the call keyword arguments (line 2993)
        kwargs_183771 = {}
        # Getting the type of 'text' (line 2993)
        text_183765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2993, 8), 'text', False)
        # Obtaining the member 'extend' of a type (line 2993)
        extend_183766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2993, 8), text_183765, 'extend')
        # Calling extend(args, kwargs) (line 2993)
        extend_call_result_183772 = invoke(stypy.reporting.localization.Localization(__file__, 2993, 8), extend_183766, *[list_183767], **kwargs_183771)
        
        
        # Call to append(...): (line 2995)
        # Processing the call arguments (line 2995)
        
        # Call to show_options(...): (line 2995)
        # Processing the call arguments (line 2995)
        str_183776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2995, 33), 'str', 'linprog')
        # Processing the call keyword arguments (line 2995)
        # Getting the type of 'False' (line 2995)
        False_183777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 49), 'False', False)
        keyword_183778 = False_183777
        kwargs_183779 = {'disp': keyword_183778}
        # Getting the type of 'show_options' (line 2995)
        show_options_183775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 20), 'show_options', False)
        # Calling show_options(args, kwargs) (line 2995)
        show_options_call_result_183780 = invoke(stypy.reporting.localization.Localization(__file__, 2995, 20), show_options_183775, *[str_183776], **kwargs_183779)
        
        # Processing the call keyword arguments (line 2995)
        kwargs_183781 = {}
        # Getting the type of 'text' (line 2995)
        text_183773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 8), 'text', False)
        # Obtaining the member 'append' of a type (line 2995)
        append_183774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2995, 8), text_183773, 'append')
        # Calling append(args, kwargs) (line 2995)
        append_call_result_183782 = invoke(stypy.reporting.localization.Localization(__file__, 2995, 8), append_183774, *[show_options_call_result_183780], **kwargs_183781)
        
        
        # Assigning a Call to a Name (line 2996):
        
        # Assigning a Call to a Name (line 2996):
        
        # Call to join(...): (line 2996)
        # Processing the call arguments (line 2996)
        # Getting the type of 'text' (line 2996)
        text_183785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2996, 23), 'text', False)
        # Processing the call keyword arguments (line 2996)
        kwargs_183786 = {}
        str_183783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2996, 15), 'str', '')
        # Obtaining the member 'join' of a type (line 2996)
        join_183784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2996, 15), str_183783, 'join')
        # Calling join(args, kwargs) (line 2996)
        join_call_result_183787 = invoke(stypy.reporting.localization.Localization(__file__, 2996, 15), join_183784, *[text_183785], **kwargs_183786)
        
        # Assigning a type to the variable 'text' (line 2996)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2996, 8), 'text', join_call_result_183787)

        if more_types_in_union_183714:
            # Runtime conditional SSA for else branch (line 2984)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_183713) or more_types_in_union_183714):
        
        # Assigning a Call to a Name (line 2998):
        
        # Assigning a Call to a Name (line 2998):
        
        # Call to lower(...): (line 2998)
        # Processing the call keyword arguments (line 2998)
        kwargs_183790 = {}
        # Getting the type of 'solver' (line 2998)
        solver_183788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2998, 17), 'solver', False)
        # Obtaining the member 'lower' of a type (line 2998)
        lower_183789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2998, 17), solver_183788, 'lower')
        # Calling lower(args, kwargs) (line 2998)
        lower_call_result_183791 = invoke(stypy.reporting.localization.Localization(__file__, 2998, 17), lower_183789, *[], **kwargs_183790)
        
        # Assigning a type to the variable 'solver' (line 2998)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2998, 8), 'solver', lower_call_result_183791)
        
        
        # Getting the type of 'solver' (line 2999)
        solver_183792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2999, 11), 'solver')
        # Getting the type of 'doc_routines' (line 2999)
        doc_routines_183793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2999, 25), 'doc_routines')
        # Applying the binary operator 'notin' (line 2999)
        result_contains_183794 = python_operator(stypy.reporting.localization.Localization(__file__, 2999, 11), 'notin', solver_183792, doc_routines_183793)
        
        # Testing the type of an if condition (line 2999)
        if_condition_183795 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2999, 8), result_contains_183794)
        # Assigning a type to the variable 'if_condition_183795' (line 2999)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2999, 8), 'if_condition_183795', if_condition_183795)
        # SSA begins for if statement (line 2999)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 3000)
        # Processing the call arguments (line 3000)
        str_183797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3000, 29), 'str', 'Unknown solver %r')
        
        # Obtaining an instance of the builtin type 'tuple' (line 3000)
        tuple_183798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3000, 52), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3000)
        # Adding element type (line 3000)
        # Getting the type of 'solver' (line 3000)
        solver_183799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3000, 52), 'solver', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3000, 52), tuple_183798, solver_183799)
        
        # Applying the binary operator '%' (line 3000)
        result_mod_183800 = python_operator(stypy.reporting.localization.Localization(__file__, 3000, 29), '%', str_183797, tuple_183798)
        
        # Processing the call keyword arguments (line 3000)
        kwargs_183801 = {}
        # Getting the type of 'ValueError' (line 3000)
        ValueError_183796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3000, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 3000)
        ValueError_call_result_183802 = invoke(stypy.reporting.localization.Localization(__file__, 3000, 18), ValueError_183796, *[result_mod_183800], **kwargs_183801)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3000, 12), ValueError_call_result_183802, 'raise parameter', BaseException)
        # SSA join for if statement (line 2999)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 3002)
        # Getting the type of 'method' (line 3002)
        method_183803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3002, 11), 'method')
        # Getting the type of 'None' (line 3002)
        None_183804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3002, 21), 'None')
        
        (may_be_183805, more_types_in_union_183806) = may_be_none(method_183803, None_183804)

        if may_be_183805:

            if more_types_in_union_183806:
                # Runtime conditional SSA (line 3002)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a List to a Name (line 3003):
            
            # Assigning a List to a Name (line 3003):
            
            # Obtaining an instance of the builtin type 'list' (line 3003)
            list_183807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3003, 19), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3003)
            
            # Assigning a type to the variable 'text' (line 3003)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3003, 12), 'text', list_183807)
            
            
            # Obtaining the type of the subscript
            # Getting the type of 'solver' (line 3004)
            solver_183808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3004, 40), 'solver')
            # Getting the type of 'doc_routines' (line 3004)
            doc_routines_183809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3004, 27), 'doc_routines')
            # Obtaining the member '__getitem__' of a type (line 3004)
            getitem___183810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3004, 27), doc_routines_183809, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3004)
            subscript_call_result_183811 = invoke(stypy.reporting.localization.Localization(__file__, 3004, 27), getitem___183810, solver_183808)
            
            # Testing the type of a for loop iterable (line 3004)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3004, 12), subscript_call_result_183811)
            # Getting the type of the for loop variable (line 3004)
            for_loop_var_183812 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3004, 12), subscript_call_result_183811)
            # Assigning a type to the variable 'name' (line 3004)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3004, 12), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3004, 12), for_loop_var_183812))
            # Assigning a type to the variable '_' (line 3004)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3004, 12), '_', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3004, 12), for_loop_var_183812))
            # SSA begins for a for statement (line 3004)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Call to extend(...): (line 3005)
            # Processing the call arguments (line 3005)
            
            # Obtaining an instance of the builtin type 'list' (line 3005)
            list_183815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3005, 28), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3005)
            # Adding element type (line 3005)
            str_183816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3005, 29), 'str', '\n\n')
            # Getting the type of 'name' (line 3005)
            name_183817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3005, 38), 'name', False)
            # Applying the binary operator '+' (line 3005)
            result_add_183818 = python_operator(stypy.reporting.localization.Localization(__file__, 3005, 29), '+', str_183816, name_183817)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3005, 28), list_183815, result_add_183818)
            # Adding element type (line 3005)
            str_183819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3005, 44), 'str', '\n')
            str_183820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3005, 51), 'str', '=')
            
            # Call to len(...): (line 3005)
            # Processing the call arguments (line 3005)
            # Getting the type of 'name' (line 3005)
            name_183822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3005, 59), 'name', False)
            # Processing the call keyword arguments (line 3005)
            kwargs_183823 = {}
            # Getting the type of 'len' (line 3005)
            len_183821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3005, 55), 'len', False)
            # Calling len(args, kwargs) (line 3005)
            len_call_result_183824 = invoke(stypy.reporting.localization.Localization(__file__, 3005, 55), len_183821, *[name_183822], **kwargs_183823)
            
            # Applying the binary operator '*' (line 3005)
            result_mul_183825 = python_operator(stypy.reporting.localization.Localization(__file__, 3005, 51), '*', str_183820, len_call_result_183824)
            
            # Applying the binary operator '+' (line 3005)
            result_add_183826 = python_operator(stypy.reporting.localization.Localization(__file__, 3005, 44), '+', str_183819, result_mul_183825)
            
            str_183827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3005, 67), 'str', '\n\n')
            # Applying the binary operator '+' (line 3005)
            result_add_183828 = python_operator(stypy.reporting.localization.Localization(__file__, 3005, 65), '+', result_add_183826, str_183827)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3005, 28), list_183815, result_add_183828)
            
            # Processing the call keyword arguments (line 3005)
            kwargs_183829 = {}
            # Getting the type of 'text' (line 3005)
            text_183813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3005, 16), 'text', False)
            # Obtaining the member 'extend' of a type (line 3005)
            extend_183814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3005, 16), text_183813, 'extend')
            # Calling extend(args, kwargs) (line 3005)
            extend_call_result_183830 = invoke(stypy.reporting.localization.Localization(__file__, 3005, 16), extend_183814, *[list_183815], **kwargs_183829)
            
            
            # Call to append(...): (line 3006)
            # Processing the call arguments (line 3006)
            
            # Call to show_options(...): (line 3006)
            # Processing the call arguments (line 3006)
            # Getting the type of 'solver' (line 3006)
            solver_183834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 41), 'solver', False)
            # Getting the type of 'name' (line 3006)
            name_183835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 49), 'name', False)
            # Processing the call keyword arguments (line 3006)
            # Getting the type of 'False' (line 3006)
            False_183836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 60), 'False', False)
            keyword_183837 = False_183836
            kwargs_183838 = {'disp': keyword_183837}
            # Getting the type of 'show_options' (line 3006)
            show_options_183833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 28), 'show_options', False)
            # Calling show_options(args, kwargs) (line 3006)
            show_options_call_result_183839 = invoke(stypy.reporting.localization.Localization(__file__, 3006, 28), show_options_183833, *[solver_183834, name_183835], **kwargs_183838)
            
            # Processing the call keyword arguments (line 3006)
            kwargs_183840 = {}
            # Getting the type of 'text' (line 3006)
            text_183831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 16), 'text', False)
            # Obtaining the member 'append' of a type (line 3006)
            append_183832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3006, 16), text_183831, 'append')
            # Calling append(args, kwargs) (line 3006)
            append_call_result_183841 = invoke(stypy.reporting.localization.Localization(__file__, 3006, 16), append_183832, *[show_options_call_result_183839], **kwargs_183840)
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Name (line 3007):
            
            # Assigning a Call to a Name (line 3007):
            
            # Call to join(...): (line 3007)
            # Processing the call arguments (line 3007)
            # Getting the type of 'text' (line 3007)
            text_183844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3007, 27), 'text', False)
            # Processing the call keyword arguments (line 3007)
            kwargs_183845 = {}
            str_183842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3007, 19), 'str', '')
            # Obtaining the member 'join' of a type (line 3007)
            join_183843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3007, 19), str_183842, 'join')
            # Calling join(args, kwargs) (line 3007)
            join_call_result_183846 = invoke(stypy.reporting.localization.Localization(__file__, 3007, 19), join_183843, *[text_183844], **kwargs_183845)
            
            # Assigning a type to the variable 'text' (line 3007)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3007, 12), 'text', join_call_result_183846)

            if more_types_in_union_183806:
                # Runtime conditional SSA for else branch (line 3002)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_183805) or more_types_in_union_183806):
            
            # Assigning a Call to a Name (line 3009):
            
            # Assigning a Call to a Name (line 3009):
            
            # Call to dict(...): (line 3009)
            # Processing the call arguments (line 3009)
            
            # Obtaining the type of the subscript
            # Getting the type of 'solver' (line 3009)
            solver_183848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3009, 40), 'solver', False)
            # Getting the type of 'doc_routines' (line 3009)
            doc_routines_183849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3009, 27), 'doc_routines', False)
            # Obtaining the member '__getitem__' of a type (line 3009)
            getitem___183850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3009, 27), doc_routines_183849, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3009)
            subscript_call_result_183851 = invoke(stypy.reporting.localization.Localization(__file__, 3009, 27), getitem___183850, solver_183848)
            
            # Processing the call keyword arguments (line 3009)
            kwargs_183852 = {}
            # Getting the type of 'dict' (line 3009)
            dict_183847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3009, 22), 'dict', False)
            # Calling dict(args, kwargs) (line 3009)
            dict_call_result_183853 = invoke(stypy.reporting.localization.Localization(__file__, 3009, 22), dict_183847, *[subscript_call_result_183851], **kwargs_183852)
            
            # Assigning a type to the variable 'methods' (line 3009)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3009, 12), 'methods', dict_call_result_183853)
            
            
            # Getting the type of 'method' (line 3010)
            method_183854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3010, 15), 'method')
            # Getting the type of 'methods' (line 3010)
            methods_183855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3010, 29), 'methods')
            # Applying the binary operator 'notin' (line 3010)
            result_contains_183856 = python_operator(stypy.reporting.localization.Localization(__file__, 3010, 15), 'notin', method_183854, methods_183855)
            
            # Testing the type of an if condition (line 3010)
            if_condition_183857 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3010, 12), result_contains_183856)
            # Assigning a type to the variable 'if_condition_183857' (line 3010)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3010, 12), 'if_condition_183857', if_condition_183857)
            # SSA begins for if statement (line 3010)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 3011)
            # Processing the call arguments (line 3011)
            str_183859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3011, 33), 'str', 'Unknown method %r')
            
            # Obtaining an instance of the builtin type 'tuple' (line 3011)
            tuple_183860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3011, 56), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3011)
            # Adding element type (line 3011)
            # Getting the type of 'method' (line 3011)
            method_183861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3011, 56), 'method', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3011, 56), tuple_183860, method_183861)
            
            # Applying the binary operator '%' (line 3011)
            result_mod_183862 = python_operator(stypy.reporting.localization.Localization(__file__, 3011, 33), '%', str_183859, tuple_183860)
            
            # Processing the call keyword arguments (line 3011)
            kwargs_183863 = {}
            # Getting the type of 'ValueError' (line 3011)
            ValueError_183858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3011, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 3011)
            ValueError_call_result_183864 = invoke(stypy.reporting.localization.Localization(__file__, 3011, 22), ValueError_183858, *[result_mod_183862], **kwargs_183863)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3011, 16), ValueError_call_result_183864, 'raise parameter', BaseException)
            # SSA join for if statement (line 3010)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Subscript to a Name (line 3012):
            
            # Assigning a Subscript to a Name (line 3012):
            
            # Obtaining the type of the subscript
            # Getting the type of 'method' (line 3012)
            method_183865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3012, 27), 'method')
            # Getting the type of 'methods' (line 3012)
            methods_183866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3012, 19), 'methods')
            # Obtaining the member '__getitem__' of a type (line 3012)
            getitem___183867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3012, 19), methods_183866, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3012)
            subscript_call_result_183868 = invoke(stypy.reporting.localization.Localization(__file__, 3012, 19), getitem___183867, method_183865)
            
            # Assigning a type to the variable 'name' (line 3012)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3012, 12), 'name', subscript_call_result_183868)
            
            # Assigning a Call to a Name (line 3015):
            
            # Assigning a Call to a Name (line 3015):
            
            # Call to split(...): (line 3015)
            # Processing the call arguments (line 3015)
            str_183871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3015, 31), 'str', '.')
            # Processing the call keyword arguments (line 3015)
            kwargs_183872 = {}
            # Getting the type of 'name' (line 3015)
            name_183869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3015, 20), 'name', False)
            # Obtaining the member 'split' of a type (line 3015)
            split_183870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3015, 20), name_183869, 'split')
            # Calling split(args, kwargs) (line 3015)
            split_call_result_183873 = invoke(stypy.reporting.localization.Localization(__file__, 3015, 20), split_183870, *[str_183871], **kwargs_183872)
            
            # Assigning a type to the variable 'parts' (line 3015)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3015, 12), 'parts', split_call_result_183873)
            
            # Assigning a Call to a Name (line 3016):
            
            # Assigning a Call to a Name (line 3016):
            
            # Call to join(...): (line 3016)
            # Processing the call arguments (line 3016)
            
            # Obtaining the type of the subscript
            int_183876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3016, 39), 'int')
            slice_183877 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3016, 32), None, int_183876, None)
            # Getting the type of 'parts' (line 3016)
            parts_183878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3016, 32), 'parts', False)
            # Obtaining the member '__getitem__' of a type (line 3016)
            getitem___183879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3016, 32), parts_183878, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3016)
            subscript_call_result_183880 = invoke(stypy.reporting.localization.Localization(__file__, 3016, 32), getitem___183879, slice_183877)
            
            # Processing the call keyword arguments (line 3016)
            kwargs_183881 = {}
            str_183874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3016, 23), 'str', '.')
            # Obtaining the member 'join' of a type (line 3016)
            join_183875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3016, 23), str_183874, 'join')
            # Calling join(args, kwargs) (line 3016)
            join_call_result_183882 = invoke(stypy.reporting.localization.Localization(__file__, 3016, 23), join_183875, *[subscript_call_result_183880], **kwargs_183881)
            
            # Assigning a type to the variable 'mod_name' (line 3016)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3016, 12), 'mod_name', join_call_result_183882)
            
            # Call to __import__(...): (line 3017)
            # Processing the call arguments (line 3017)
            # Getting the type of 'mod_name' (line 3017)
            mod_name_183884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 23), 'mod_name', False)
            # Processing the call keyword arguments (line 3017)
            kwargs_183885 = {}
            # Getting the type of '__import__' (line 3017)
            import___183883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 12), '__import__', False)
            # Calling __import__(args, kwargs) (line 3017)
            import___call_result_183886 = invoke(stypy.reporting.localization.Localization(__file__, 3017, 12), import___183883, *[mod_name_183884], **kwargs_183885)
            
            
            # Assigning a Call to a Name (line 3018):
            
            # Assigning a Call to a Name (line 3018):
            
            # Call to getattr(...): (line 3018)
            # Processing the call arguments (line 3018)
            
            # Obtaining the type of the subscript
            # Getting the type of 'mod_name' (line 3018)
            mod_name_183888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3018, 38), 'mod_name', False)
            # Getting the type of 'sys' (line 3018)
            sys_183889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3018, 26), 'sys', False)
            # Obtaining the member 'modules' of a type (line 3018)
            modules_183890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3018, 26), sys_183889, 'modules')
            # Obtaining the member '__getitem__' of a type (line 3018)
            getitem___183891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3018, 26), modules_183890, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3018)
            subscript_call_result_183892 = invoke(stypy.reporting.localization.Localization(__file__, 3018, 26), getitem___183891, mod_name_183888)
            
            
            # Obtaining the type of the subscript
            int_183893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3018, 55), 'int')
            # Getting the type of 'parts' (line 3018)
            parts_183894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3018, 49), 'parts', False)
            # Obtaining the member '__getitem__' of a type (line 3018)
            getitem___183895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3018, 49), parts_183894, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3018)
            subscript_call_result_183896 = invoke(stypy.reporting.localization.Localization(__file__, 3018, 49), getitem___183895, int_183893)
            
            # Processing the call keyword arguments (line 3018)
            kwargs_183897 = {}
            # Getting the type of 'getattr' (line 3018)
            getattr_183887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3018, 18), 'getattr', False)
            # Calling getattr(args, kwargs) (line 3018)
            getattr_call_result_183898 = invoke(stypy.reporting.localization.Localization(__file__, 3018, 18), getattr_183887, *[subscript_call_result_183892, subscript_call_result_183896], **kwargs_183897)
            
            # Assigning a type to the variable 'obj' (line 3018)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3018, 12), 'obj', getattr_call_result_183898)
            
            # Assigning a Attribute to a Name (line 3021):
            
            # Assigning a Attribute to a Name (line 3021):
            # Getting the type of 'obj' (line 3021)
            obj_183899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3021, 18), 'obj')
            # Obtaining the member '__doc__' of a type (line 3021)
            doc___183900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3021, 18), obj_183899, '__doc__')
            # Assigning a type to the variable 'doc' (line 3021)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3021, 12), 'doc', doc___183900)
            
            # Type idiom detected: calculating its left and rigth part (line 3022)
            # Getting the type of 'doc' (line 3022)
            doc_183901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3022, 12), 'doc')
            # Getting the type of 'None' (line 3022)
            None_183902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3022, 26), 'None')
            
            (may_be_183903, more_types_in_union_183904) = may_not_be_none(doc_183901, None_183902)

            if may_be_183903:

                if more_types_in_union_183904:
                    # Runtime conditional SSA (line 3022)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Assigning a Call to a Name (line 3023):
                
                # Assigning a Call to a Name (line 3023):
                
                # Call to strip(...): (line 3023)
                # Processing the call keyword arguments (line 3023)
                kwargs_183911 = {}
                
                # Call to dedent(...): (line 3023)
                # Processing the call arguments (line 3023)
                # Getting the type of 'doc' (line 3023)
                doc_183907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3023, 39), 'doc', False)
                # Processing the call keyword arguments (line 3023)
                kwargs_183908 = {}
                # Getting the type of 'textwrap' (line 3023)
                textwrap_183905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3023, 23), 'textwrap', False)
                # Obtaining the member 'dedent' of a type (line 3023)
                dedent_183906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3023, 23), textwrap_183905, 'dedent')
                # Calling dedent(args, kwargs) (line 3023)
                dedent_call_result_183909 = invoke(stypy.reporting.localization.Localization(__file__, 3023, 23), dedent_183906, *[doc_183907], **kwargs_183908)
                
                # Obtaining the member 'strip' of a type (line 3023)
                strip_183910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3023, 23), dedent_call_result_183909, 'strip')
                # Calling strip(args, kwargs) (line 3023)
                strip_call_result_183912 = invoke(stypy.reporting.localization.Localization(__file__, 3023, 23), strip_183910, *[], **kwargs_183911)
                
                # Assigning a type to the variable 'text' (line 3023)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3023, 16), 'text', strip_call_result_183912)

                if more_types_in_union_183904:
                    # Runtime conditional SSA for else branch (line 3022)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_183903) or more_types_in_union_183904):
                
                # Assigning a Str to a Name (line 3025):
                
                # Assigning a Str to a Name (line 3025):
                str_183913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3025, 23), 'str', '')
                # Assigning a type to the variable 'text' (line 3025)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3025, 16), 'text', str_183913)

                if (may_be_183903 and more_types_in_union_183904):
                    # SSA join for if statement (line 3022)
                    module_type_store = module_type_store.join_ssa_context()


            

            if (may_be_183805 and more_types_in_union_183806):
                # SSA join for if statement (line 3002)
                module_type_store = module_type_store.join_ssa_context()


        

        if (may_be_183713 and more_types_in_union_183714):
            # SSA join for if statement (line 2984)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Getting the type of 'disp' (line 3027)
    disp_183914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3027, 7), 'disp')
    # Testing the type of an if condition (line 3027)
    if_condition_183915 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3027, 4), disp_183914)
    # Assigning a type to the variable 'if_condition_183915' (line 3027)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3027, 4), 'if_condition_183915', if_condition_183915)
    # SSA begins for if statement (line 3027)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 3028)
    # Processing the call arguments (line 3028)
    # Getting the type of 'text' (line 3028)
    text_183917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3028, 14), 'text', False)
    # Processing the call keyword arguments (line 3028)
    kwargs_183918 = {}
    # Getting the type of 'print' (line 3028)
    print_183916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3028, 8), 'print', False)
    # Calling print(args, kwargs) (line 3028)
    print_call_result_183919 = invoke(stypy.reporting.localization.Localization(__file__, 3028, 8), print_183916, *[text_183917], **kwargs_183918)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3029)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3029, 8), 'stypy_return_type', types.NoneType)
    # SSA branch for the else part of an if statement (line 3027)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'text' (line 3031)
    text_183920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3031, 15), 'text')
    # Assigning a type to the variable 'stypy_return_type' (line 3031)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3031, 8), 'stypy_return_type', text_183920)
    # SSA join for if statement (line 3027)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'show_options(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'show_options' in the type store
    # Getting the type of 'stypy_return_type' (line 2877)
    stypy_return_type_183921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2877, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_183921)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'show_options'
    return stypy_return_type_183921

# Assigning a type to the variable 'show_options' (line 2877)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2877, 0), 'show_options', show_options)

@norecursion
def main(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'main'
    module_type_store = module_type_store.open_function_context('main', 3034, 0, False)
    
    # Passed parameters checking function
    main.stypy_localization = localization
    main.stypy_type_of_self = None
    main.stypy_type_store = module_type_store
    main.stypy_function_name = 'main'
    main.stypy_param_names_list = []
    main.stypy_varargs_param_name = None
    main.stypy_kwargs_param_name = None
    main.stypy_call_defaults = defaults
    main.stypy_call_varargs = varargs
    main.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'main', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'main', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'main(...)' code ##################

    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3035, 4))
    
    # 'import time' statement (line 3035)
    import time

    import_module(stypy.reporting.localization.Localization(__file__, 3035, 4), 'time', time, module_type_store)
    
    
    # Assigning a List to a Name (line 3037):
    
    # Assigning a List to a Name (line 3037):
    
    # Obtaining an instance of the builtin type 'list' (line 3037)
    list_183922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3037, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3037)
    
    # Assigning a type to the variable 'times' (line 3037)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3037, 4), 'times', list_183922)
    
    # Assigning a List to a Name (line 3038):
    
    # Assigning a List to a Name (line 3038):
    
    # Obtaining an instance of the builtin type 'list' (line 3038)
    list_183923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3038, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3038)
    
    # Assigning a type to the variable 'algor' (line 3038)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3038, 4), 'algor', list_183923)
    
    # Assigning a List to a Name (line 3039):
    
    # Assigning a List to a Name (line 3039):
    
    # Obtaining an instance of the builtin type 'list' (line 3039)
    list_183924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3039, 9), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3039)
    # Adding element type (line 3039)
    float_183925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3039, 10), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3039, 9), list_183924, float_183925)
    # Adding element type (line 3039)
    float_183926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3039, 15), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3039, 9), list_183924, float_183926)
    # Adding element type (line 3039)
    float_183927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3039, 20), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3039, 9), list_183924, float_183927)
    
    # Assigning a type to the variable 'x0' (line 3039)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3039, 4), 'x0', list_183924)
    
    # Call to print(...): (line 3040)
    # Processing the call arguments (line 3040)
    str_183929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3040, 10), 'str', 'Nelder-Mead Simplex')
    # Processing the call keyword arguments (line 3040)
    kwargs_183930 = {}
    # Getting the type of 'print' (line 3040)
    print_183928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3040, 4), 'print', False)
    # Calling print(args, kwargs) (line 3040)
    print_call_result_183931 = invoke(stypy.reporting.localization.Localization(__file__, 3040, 4), print_183928, *[str_183929], **kwargs_183930)
    
    
    # Call to print(...): (line 3041)
    # Processing the call arguments (line 3041)
    str_183933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3041, 10), 'str', '===================')
    # Processing the call keyword arguments (line 3041)
    kwargs_183934 = {}
    # Getting the type of 'print' (line 3041)
    print_183932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3041, 4), 'print', False)
    # Calling print(args, kwargs) (line 3041)
    print_call_result_183935 = invoke(stypy.reporting.localization.Localization(__file__, 3041, 4), print_183932, *[str_183933], **kwargs_183934)
    
    
    # Assigning a Call to a Name (line 3042):
    
    # Assigning a Call to a Name (line 3042):
    
    # Call to time(...): (line 3042)
    # Processing the call keyword arguments (line 3042)
    kwargs_183938 = {}
    # Getting the type of 'time' (line 3042)
    time_183936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3042, 12), 'time', False)
    # Obtaining the member 'time' of a type (line 3042)
    time_183937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3042, 12), time_183936, 'time')
    # Calling time(args, kwargs) (line 3042)
    time_call_result_183939 = invoke(stypy.reporting.localization.Localization(__file__, 3042, 12), time_183937, *[], **kwargs_183938)
    
    # Assigning a type to the variable 'start' (line 3042)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3042, 4), 'start', time_call_result_183939)
    
    # Assigning a Call to a Name (line 3043):
    
    # Assigning a Call to a Name (line 3043):
    
    # Call to fmin(...): (line 3043)
    # Processing the call arguments (line 3043)
    # Getting the type of 'rosen' (line 3043)
    rosen_183941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3043, 13), 'rosen', False)
    # Getting the type of 'x0' (line 3043)
    x0_183942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3043, 20), 'x0', False)
    # Processing the call keyword arguments (line 3043)
    kwargs_183943 = {}
    # Getting the type of 'fmin' (line 3043)
    fmin_183940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3043, 8), 'fmin', False)
    # Calling fmin(args, kwargs) (line 3043)
    fmin_call_result_183944 = invoke(stypy.reporting.localization.Localization(__file__, 3043, 8), fmin_183940, *[rosen_183941, x0_183942], **kwargs_183943)
    
    # Assigning a type to the variable 'x' (line 3043)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3043, 4), 'x', fmin_call_result_183944)
    
    # Call to print(...): (line 3044)
    # Processing the call arguments (line 3044)
    # Getting the type of 'x' (line 3044)
    x_183946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3044, 10), 'x', False)
    # Processing the call keyword arguments (line 3044)
    kwargs_183947 = {}
    # Getting the type of 'print' (line 3044)
    print_183945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3044, 4), 'print', False)
    # Calling print(args, kwargs) (line 3044)
    print_call_result_183948 = invoke(stypy.reporting.localization.Localization(__file__, 3044, 4), print_183945, *[x_183946], **kwargs_183947)
    
    
    # Call to append(...): (line 3045)
    # Processing the call arguments (line 3045)
    
    # Call to time(...): (line 3045)
    # Processing the call keyword arguments (line 3045)
    kwargs_183953 = {}
    # Getting the type of 'time' (line 3045)
    time_183951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3045, 17), 'time', False)
    # Obtaining the member 'time' of a type (line 3045)
    time_183952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3045, 17), time_183951, 'time')
    # Calling time(args, kwargs) (line 3045)
    time_call_result_183954 = invoke(stypy.reporting.localization.Localization(__file__, 3045, 17), time_183952, *[], **kwargs_183953)
    
    # Getting the type of 'start' (line 3045)
    start_183955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3045, 31), 'start', False)
    # Applying the binary operator '-' (line 3045)
    result_sub_183956 = python_operator(stypy.reporting.localization.Localization(__file__, 3045, 17), '-', time_call_result_183954, start_183955)
    
    # Processing the call keyword arguments (line 3045)
    kwargs_183957 = {}
    # Getting the type of 'times' (line 3045)
    times_183949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3045, 4), 'times', False)
    # Obtaining the member 'append' of a type (line 3045)
    append_183950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3045, 4), times_183949, 'append')
    # Calling append(args, kwargs) (line 3045)
    append_call_result_183958 = invoke(stypy.reporting.localization.Localization(__file__, 3045, 4), append_183950, *[result_sub_183956], **kwargs_183957)
    
    
    # Call to append(...): (line 3046)
    # Processing the call arguments (line 3046)
    str_183961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3046, 17), 'str', 'Nelder-Mead Simplex\t')
    # Processing the call keyword arguments (line 3046)
    kwargs_183962 = {}
    # Getting the type of 'algor' (line 3046)
    algor_183959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3046, 4), 'algor', False)
    # Obtaining the member 'append' of a type (line 3046)
    append_183960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3046, 4), algor_183959, 'append')
    # Calling append(args, kwargs) (line 3046)
    append_call_result_183963 = invoke(stypy.reporting.localization.Localization(__file__, 3046, 4), append_183960, *[str_183961], **kwargs_183962)
    
    
    # Call to print(...): (line 3048)
    # Processing the call keyword arguments (line 3048)
    kwargs_183965 = {}
    # Getting the type of 'print' (line 3048)
    print_183964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3048, 4), 'print', False)
    # Calling print(args, kwargs) (line 3048)
    print_call_result_183966 = invoke(stypy.reporting.localization.Localization(__file__, 3048, 4), print_183964, *[], **kwargs_183965)
    
    
    # Call to print(...): (line 3049)
    # Processing the call arguments (line 3049)
    str_183968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3049, 10), 'str', 'Powell Direction Set Method')
    # Processing the call keyword arguments (line 3049)
    kwargs_183969 = {}
    # Getting the type of 'print' (line 3049)
    print_183967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3049, 4), 'print', False)
    # Calling print(args, kwargs) (line 3049)
    print_call_result_183970 = invoke(stypy.reporting.localization.Localization(__file__, 3049, 4), print_183967, *[str_183968], **kwargs_183969)
    
    
    # Call to print(...): (line 3050)
    # Processing the call arguments (line 3050)
    str_183972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3050, 10), 'str', '===========================')
    # Processing the call keyword arguments (line 3050)
    kwargs_183973 = {}
    # Getting the type of 'print' (line 3050)
    print_183971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3050, 4), 'print', False)
    # Calling print(args, kwargs) (line 3050)
    print_call_result_183974 = invoke(stypy.reporting.localization.Localization(__file__, 3050, 4), print_183971, *[str_183972], **kwargs_183973)
    
    
    # Assigning a Call to a Name (line 3051):
    
    # Assigning a Call to a Name (line 3051):
    
    # Call to time(...): (line 3051)
    # Processing the call keyword arguments (line 3051)
    kwargs_183977 = {}
    # Getting the type of 'time' (line 3051)
    time_183975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3051, 12), 'time', False)
    # Obtaining the member 'time' of a type (line 3051)
    time_183976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3051, 12), time_183975, 'time')
    # Calling time(args, kwargs) (line 3051)
    time_call_result_183978 = invoke(stypy.reporting.localization.Localization(__file__, 3051, 12), time_183976, *[], **kwargs_183977)
    
    # Assigning a type to the variable 'start' (line 3051)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3051, 4), 'start', time_call_result_183978)
    
    # Assigning a Call to a Name (line 3052):
    
    # Assigning a Call to a Name (line 3052):
    
    # Call to fmin_powell(...): (line 3052)
    # Processing the call arguments (line 3052)
    # Getting the type of 'rosen' (line 3052)
    rosen_183980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3052, 20), 'rosen', False)
    # Getting the type of 'x0' (line 3052)
    x0_183981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3052, 27), 'x0', False)
    # Processing the call keyword arguments (line 3052)
    kwargs_183982 = {}
    # Getting the type of 'fmin_powell' (line 3052)
    fmin_powell_183979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3052, 8), 'fmin_powell', False)
    # Calling fmin_powell(args, kwargs) (line 3052)
    fmin_powell_call_result_183983 = invoke(stypy.reporting.localization.Localization(__file__, 3052, 8), fmin_powell_183979, *[rosen_183980, x0_183981], **kwargs_183982)
    
    # Assigning a type to the variable 'x' (line 3052)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3052, 4), 'x', fmin_powell_call_result_183983)
    
    # Call to print(...): (line 3053)
    # Processing the call arguments (line 3053)
    # Getting the type of 'x' (line 3053)
    x_183985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3053, 10), 'x', False)
    # Processing the call keyword arguments (line 3053)
    kwargs_183986 = {}
    # Getting the type of 'print' (line 3053)
    print_183984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3053, 4), 'print', False)
    # Calling print(args, kwargs) (line 3053)
    print_call_result_183987 = invoke(stypy.reporting.localization.Localization(__file__, 3053, 4), print_183984, *[x_183985], **kwargs_183986)
    
    
    # Call to append(...): (line 3054)
    # Processing the call arguments (line 3054)
    
    # Call to time(...): (line 3054)
    # Processing the call keyword arguments (line 3054)
    kwargs_183992 = {}
    # Getting the type of 'time' (line 3054)
    time_183990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3054, 17), 'time', False)
    # Obtaining the member 'time' of a type (line 3054)
    time_183991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3054, 17), time_183990, 'time')
    # Calling time(args, kwargs) (line 3054)
    time_call_result_183993 = invoke(stypy.reporting.localization.Localization(__file__, 3054, 17), time_183991, *[], **kwargs_183992)
    
    # Getting the type of 'start' (line 3054)
    start_183994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3054, 31), 'start', False)
    # Applying the binary operator '-' (line 3054)
    result_sub_183995 = python_operator(stypy.reporting.localization.Localization(__file__, 3054, 17), '-', time_call_result_183993, start_183994)
    
    # Processing the call keyword arguments (line 3054)
    kwargs_183996 = {}
    # Getting the type of 'times' (line 3054)
    times_183988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3054, 4), 'times', False)
    # Obtaining the member 'append' of a type (line 3054)
    append_183989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3054, 4), times_183988, 'append')
    # Calling append(args, kwargs) (line 3054)
    append_call_result_183997 = invoke(stypy.reporting.localization.Localization(__file__, 3054, 4), append_183989, *[result_sub_183995], **kwargs_183996)
    
    
    # Call to append(...): (line 3055)
    # Processing the call arguments (line 3055)
    str_184000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3055, 17), 'str', 'Powell Direction Set Method.')
    # Processing the call keyword arguments (line 3055)
    kwargs_184001 = {}
    # Getting the type of 'algor' (line 3055)
    algor_183998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3055, 4), 'algor', False)
    # Obtaining the member 'append' of a type (line 3055)
    append_183999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3055, 4), algor_183998, 'append')
    # Calling append(args, kwargs) (line 3055)
    append_call_result_184002 = invoke(stypy.reporting.localization.Localization(__file__, 3055, 4), append_183999, *[str_184000], **kwargs_184001)
    
    
    # Call to print(...): (line 3057)
    # Processing the call keyword arguments (line 3057)
    kwargs_184004 = {}
    # Getting the type of 'print' (line 3057)
    print_184003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3057, 4), 'print', False)
    # Calling print(args, kwargs) (line 3057)
    print_call_result_184005 = invoke(stypy.reporting.localization.Localization(__file__, 3057, 4), print_184003, *[], **kwargs_184004)
    
    
    # Call to print(...): (line 3058)
    # Processing the call arguments (line 3058)
    str_184007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3058, 10), 'str', 'Nonlinear CG')
    # Processing the call keyword arguments (line 3058)
    kwargs_184008 = {}
    # Getting the type of 'print' (line 3058)
    print_184006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3058, 4), 'print', False)
    # Calling print(args, kwargs) (line 3058)
    print_call_result_184009 = invoke(stypy.reporting.localization.Localization(__file__, 3058, 4), print_184006, *[str_184007], **kwargs_184008)
    
    
    # Call to print(...): (line 3059)
    # Processing the call arguments (line 3059)
    str_184011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3059, 10), 'str', '============')
    # Processing the call keyword arguments (line 3059)
    kwargs_184012 = {}
    # Getting the type of 'print' (line 3059)
    print_184010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3059, 4), 'print', False)
    # Calling print(args, kwargs) (line 3059)
    print_call_result_184013 = invoke(stypy.reporting.localization.Localization(__file__, 3059, 4), print_184010, *[str_184011], **kwargs_184012)
    
    
    # Assigning a Call to a Name (line 3060):
    
    # Assigning a Call to a Name (line 3060):
    
    # Call to time(...): (line 3060)
    # Processing the call keyword arguments (line 3060)
    kwargs_184016 = {}
    # Getting the type of 'time' (line 3060)
    time_184014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3060, 12), 'time', False)
    # Obtaining the member 'time' of a type (line 3060)
    time_184015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3060, 12), time_184014, 'time')
    # Calling time(args, kwargs) (line 3060)
    time_call_result_184017 = invoke(stypy.reporting.localization.Localization(__file__, 3060, 12), time_184015, *[], **kwargs_184016)
    
    # Assigning a type to the variable 'start' (line 3060)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3060, 4), 'start', time_call_result_184017)
    
    # Assigning a Call to a Name (line 3061):
    
    # Assigning a Call to a Name (line 3061):
    
    # Call to fmin_cg(...): (line 3061)
    # Processing the call arguments (line 3061)
    # Getting the type of 'rosen' (line 3061)
    rosen_184019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3061, 16), 'rosen', False)
    # Getting the type of 'x0' (line 3061)
    x0_184020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3061, 23), 'x0', False)
    # Processing the call keyword arguments (line 3061)
    # Getting the type of 'rosen_der' (line 3061)
    rosen_der_184021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3061, 34), 'rosen_der', False)
    keyword_184022 = rosen_der_184021
    int_184023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3061, 53), 'int')
    keyword_184024 = int_184023
    kwargs_184025 = {'fprime': keyword_184022, 'maxiter': keyword_184024}
    # Getting the type of 'fmin_cg' (line 3061)
    fmin_cg_184018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3061, 8), 'fmin_cg', False)
    # Calling fmin_cg(args, kwargs) (line 3061)
    fmin_cg_call_result_184026 = invoke(stypy.reporting.localization.Localization(__file__, 3061, 8), fmin_cg_184018, *[rosen_184019, x0_184020], **kwargs_184025)
    
    # Assigning a type to the variable 'x' (line 3061)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3061, 4), 'x', fmin_cg_call_result_184026)
    
    # Call to print(...): (line 3062)
    # Processing the call arguments (line 3062)
    # Getting the type of 'x' (line 3062)
    x_184028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3062, 10), 'x', False)
    # Processing the call keyword arguments (line 3062)
    kwargs_184029 = {}
    # Getting the type of 'print' (line 3062)
    print_184027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3062, 4), 'print', False)
    # Calling print(args, kwargs) (line 3062)
    print_call_result_184030 = invoke(stypy.reporting.localization.Localization(__file__, 3062, 4), print_184027, *[x_184028], **kwargs_184029)
    
    
    # Call to append(...): (line 3063)
    # Processing the call arguments (line 3063)
    
    # Call to time(...): (line 3063)
    # Processing the call keyword arguments (line 3063)
    kwargs_184035 = {}
    # Getting the type of 'time' (line 3063)
    time_184033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3063, 17), 'time', False)
    # Obtaining the member 'time' of a type (line 3063)
    time_184034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3063, 17), time_184033, 'time')
    # Calling time(args, kwargs) (line 3063)
    time_call_result_184036 = invoke(stypy.reporting.localization.Localization(__file__, 3063, 17), time_184034, *[], **kwargs_184035)
    
    # Getting the type of 'start' (line 3063)
    start_184037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3063, 31), 'start', False)
    # Applying the binary operator '-' (line 3063)
    result_sub_184038 = python_operator(stypy.reporting.localization.Localization(__file__, 3063, 17), '-', time_call_result_184036, start_184037)
    
    # Processing the call keyword arguments (line 3063)
    kwargs_184039 = {}
    # Getting the type of 'times' (line 3063)
    times_184031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3063, 4), 'times', False)
    # Obtaining the member 'append' of a type (line 3063)
    append_184032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3063, 4), times_184031, 'append')
    # Calling append(args, kwargs) (line 3063)
    append_call_result_184040 = invoke(stypy.reporting.localization.Localization(__file__, 3063, 4), append_184032, *[result_sub_184038], **kwargs_184039)
    
    
    # Call to append(...): (line 3064)
    # Processing the call arguments (line 3064)
    str_184043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3064, 17), 'str', 'Nonlinear CG     \t')
    # Processing the call keyword arguments (line 3064)
    kwargs_184044 = {}
    # Getting the type of 'algor' (line 3064)
    algor_184041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3064, 4), 'algor', False)
    # Obtaining the member 'append' of a type (line 3064)
    append_184042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3064, 4), algor_184041, 'append')
    # Calling append(args, kwargs) (line 3064)
    append_call_result_184045 = invoke(stypy.reporting.localization.Localization(__file__, 3064, 4), append_184042, *[str_184043], **kwargs_184044)
    
    
    # Call to print(...): (line 3066)
    # Processing the call keyword arguments (line 3066)
    kwargs_184047 = {}
    # Getting the type of 'print' (line 3066)
    print_184046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3066, 4), 'print', False)
    # Calling print(args, kwargs) (line 3066)
    print_call_result_184048 = invoke(stypy.reporting.localization.Localization(__file__, 3066, 4), print_184046, *[], **kwargs_184047)
    
    
    # Call to print(...): (line 3067)
    # Processing the call arguments (line 3067)
    str_184050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3067, 10), 'str', 'BFGS Quasi-Newton')
    # Processing the call keyword arguments (line 3067)
    kwargs_184051 = {}
    # Getting the type of 'print' (line 3067)
    print_184049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3067, 4), 'print', False)
    # Calling print(args, kwargs) (line 3067)
    print_call_result_184052 = invoke(stypy.reporting.localization.Localization(__file__, 3067, 4), print_184049, *[str_184050], **kwargs_184051)
    
    
    # Call to print(...): (line 3068)
    # Processing the call arguments (line 3068)
    str_184054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3068, 10), 'str', '=================')
    # Processing the call keyword arguments (line 3068)
    kwargs_184055 = {}
    # Getting the type of 'print' (line 3068)
    print_184053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3068, 4), 'print', False)
    # Calling print(args, kwargs) (line 3068)
    print_call_result_184056 = invoke(stypy.reporting.localization.Localization(__file__, 3068, 4), print_184053, *[str_184054], **kwargs_184055)
    
    
    # Assigning a Call to a Name (line 3069):
    
    # Assigning a Call to a Name (line 3069):
    
    # Call to time(...): (line 3069)
    # Processing the call keyword arguments (line 3069)
    kwargs_184059 = {}
    # Getting the type of 'time' (line 3069)
    time_184057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3069, 12), 'time', False)
    # Obtaining the member 'time' of a type (line 3069)
    time_184058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3069, 12), time_184057, 'time')
    # Calling time(args, kwargs) (line 3069)
    time_call_result_184060 = invoke(stypy.reporting.localization.Localization(__file__, 3069, 12), time_184058, *[], **kwargs_184059)
    
    # Assigning a type to the variable 'start' (line 3069)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3069, 4), 'start', time_call_result_184060)
    
    # Assigning a Call to a Name (line 3070):
    
    # Assigning a Call to a Name (line 3070):
    
    # Call to fmin_bfgs(...): (line 3070)
    # Processing the call arguments (line 3070)
    # Getting the type of 'rosen' (line 3070)
    rosen_184062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3070, 18), 'rosen', False)
    # Getting the type of 'x0' (line 3070)
    x0_184063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3070, 25), 'x0', False)
    # Processing the call keyword arguments (line 3070)
    # Getting the type of 'rosen_der' (line 3070)
    rosen_der_184064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3070, 36), 'rosen_der', False)
    keyword_184065 = rosen_der_184064
    int_184066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3070, 55), 'int')
    keyword_184067 = int_184066
    kwargs_184068 = {'fprime': keyword_184065, 'maxiter': keyword_184067}
    # Getting the type of 'fmin_bfgs' (line 3070)
    fmin_bfgs_184061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3070, 8), 'fmin_bfgs', False)
    # Calling fmin_bfgs(args, kwargs) (line 3070)
    fmin_bfgs_call_result_184069 = invoke(stypy.reporting.localization.Localization(__file__, 3070, 8), fmin_bfgs_184061, *[rosen_184062, x0_184063], **kwargs_184068)
    
    # Assigning a type to the variable 'x' (line 3070)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3070, 4), 'x', fmin_bfgs_call_result_184069)
    
    # Call to print(...): (line 3071)
    # Processing the call arguments (line 3071)
    # Getting the type of 'x' (line 3071)
    x_184071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3071, 10), 'x', False)
    # Processing the call keyword arguments (line 3071)
    kwargs_184072 = {}
    # Getting the type of 'print' (line 3071)
    print_184070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3071, 4), 'print', False)
    # Calling print(args, kwargs) (line 3071)
    print_call_result_184073 = invoke(stypy.reporting.localization.Localization(__file__, 3071, 4), print_184070, *[x_184071], **kwargs_184072)
    
    
    # Call to append(...): (line 3072)
    # Processing the call arguments (line 3072)
    
    # Call to time(...): (line 3072)
    # Processing the call keyword arguments (line 3072)
    kwargs_184078 = {}
    # Getting the type of 'time' (line 3072)
    time_184076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3072, 17), 'time', False)
    # Obtaining the member 'time' of a type (line 3072)
    time_184077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3072, 17), time_184076, 'time')
    # Calling time(args, kwargs) (line 3072)
    time_call_result_184079 = invoke(stypy.reporting.localization.Localization(__file__, 3072, 17), time_184077, *[], **kwargs_184078)
    
    # Getting the type of 'start' (line 3072)
    start_184080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3072, 31), 'start', False)
    # Applying the binary operator '-' (line 3072)
    result_sub_184081 = python_operator(stypy.reporting.localization.Localization(__file__, 3072, 17), '-', time_call_result_184079, start_184080)
    
    # Processing the call keyword arguments (line 3072)
    kwargs_184082 = {}
    # Getting the type of 'times' (line 3072)
    times_184074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3072, 4), 'times', False)
    # Obtaining the member 'append' of a type (line 3072)
    append_184075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3072, 4), times_184074, 'append')
    # Calling append(args, kwargs) (line 3072)
    append_call_result_184083 = invoke(stypy.reporting.localization.Localization(__file__, 3072, 4), append_184075, *[result_sub_184081], **kwargs_184082)
    
    
    # Call to append(...): (line 3073)
    # Processing the call arguments (line 3073)
    str_184086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3073, 17), 'str', 'BFGS Quasi-Newton\t')
    # Processing the call keyword arguments (line 3073)
    kwargs_184087 = {}
    # Getting the type of 'algor' (line 3073)
    algor_184084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3073, 4), 'algor', False)
    # Obtaining the member 'append' of a type (line 3073)
    append_184085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3073, 4), algor_184084, 'append')
    # Calling append(args, kwargs) (line 3073)
    append_call_result_184088 = invoke(stypy.reporting.localization.Localization(__file__, 3073, 4), append_184085, *[str_184086], **kwargs_184087)
    
    
    # Call to print(...): (line 3075)
    # Processing the call keyword arguments (line 3075)
    kwargs_184090 = {}
    # Getting the type of 'print' (line 3075)
    print_184089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3075, 4), 'print', False)
    # Calling print(args, kwargs) (line 3075)
    print_call_result_184091 = invoke(stypy.reporting.localization.Localization(__file__, 3075, 4), print_184089, *[], **kwargs_184090)
    
    
    # Call to print(...): (line 3076)
    # Processing the call arguments (line 3076)
    str_184093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3076, 10), 'str', 'BFGS approximate gradient')
    # Processing the call keyword arguments (line 3076)
    kwargs_184094 = {}
    # Getting the type of 'print' (line 3076)
    print_184092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 4), 'print', False)
    # Calling print(args, kwargs) (line 3076)
    print_call_result_184095 = invoke(stypy.reporting.localization.Localization(__file__, 3076, 4), print_184092, *[str_184093], **kwargs_184094)
    
    
    # Call to print(...): (line 3077)
    # Processing the call arguments (line 3077)
    str_184097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3077, 10), 'str', '=========================')
    # Processing the call keyword arguments (line 3077)
    kwargs_184098 = {}
    # Getting the type of 'print' (line 3077)
    print_184096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3077, 4), 'print', False)
    # Calling print(args, kwargs) (line 3077)
    print_call_result_184099 = invoke(stypy.reporting.localization.Localization(__file__, 3077, 4), print_184096, *[str_184097], **kwargs_184098)
    
    
    # Assigning a Call to a Name (line 3078):
    
    # Assigning a Call to a Name (line 3078):
    
    # Call to time(...): (line 3078)
    # Processing the call keyword arguments (line 3078)
    kwargs_184102 = {}
    # Getting the type of 'time' (line 3078)
    time_184100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3078, 12), 'time', False)
    # Obtaining the member 'time' of a type (line 3078)
    time_184101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3078, 12), time_184100, 'time')
    # Calling time(args, kwargs) (line 3078)
    time_call_result_184103 = invoke(stypy.reporting.localization.Localization(__file__, 3078, 12), time_184101, *[], **kwargs_184102)
    
    # Assigning a type to the variable 'start' (line 3078)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3078, 4), 'start', time_call_result_184103)
    
    # Assigning a Call to a Name (line 3079):
    
    # Assigning a Call to a Name (line 3079):
    
    # Call to fmin_bfgs(...): (line 3079)
    # Processing the call arguments (line 3079)
    # Getting the type of 'rosen' (line 3079)
    rosen_184105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3079, 18), 'rosen', False)
    # Getting the type of 'x0' (line 3079)
    x0_184106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3079, 25), 'x0', False)
    # Processing the call keyword arguments (line 3079)
    float_184107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3079, 34), 'float')
    keyword_184108 = float_184107
    int_184109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3079, 48), 'int')
    keyword_184110 = int_184109
    kwargs_184111 = {'gtol': keyword_184108, 'maxiter': keyword_184110}
    # Getting the type of 'fmin_bfgs' (line 3079)
    fmin_bfgs_184104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3079, 8), 'fmin_bfgs', False)
    # Calling fmin_bfgs(args, kwargs) (line 3079)
    fmin_bfgs_call_result_184112 = invoke(stypy.reporting.localization.Localization(__file__, 3079, 8), fmin_bfgs_184104, *[rosen_184105, x0_184106], **kwargs_184111)
    
    # Assigning a type to the variable 'x' (line 3079)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3079, 4), 'x', fmin_bfgs_call_result_184112)
    
    # Call to print(...): (line 3080)
    # Processing the call arguments (line 3080)
    # Getting the type of 'x' (line 3080)
    x_184114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3080, 10), 'x', False)
    # Processing the call keyword arguments (line 3080)
    kwargs_184115 = {}
    # Getting the type of 'print' (line 3080)
    print_184113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3080, 4), 'print', False)
    # Calling print(args, kwargs) (line 3080)
    print_call_result_184116 = invoke(stypy.reporting.localization.Localization(__file__, 3080, 4), print_184113, *[x_184114], **kwargs_184115)
    
    
    # Call to append(...): (line 3081)
    # Processing the call arguments (line 3081)
    
    # Call to time(...): (line 3081)
    # Processing the call keyword arguments (line 3081)
    kwargs_184121 = {}
    # Getting the type of 'time' (line 3081)
    time_184119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3081, 17), 'time', False)
    # Obtaining the member 'time' of a type (line 3081)
    time_184120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3081, 17), time_184119, 'time')
    # Calling time(args, kwargs) (line 3081)
    time_call_result_184122 = invoke(stypy.reporting.localization.Localization(__file__, 3081, 17), time_184120, *[], **kwargs_184121)
    
    # Getting the type of 'start' (line 3081)
    start_184123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3081, 31), 'start', False)
    # Applying the binary operator '-' (line 3081)
    result_sub_184124 = python_operator(stypy.reporting.localization.Localization(__file__, 3081, 17), '-', time_call_result_184122, start_184123)
    
    # Processing the call keyword arguments (line 3081)
    kwargs_184125 = {}
    # Getting the type of 'times' (line 3081)
    times_184117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3081, 4), 'times', False)
    # Obtaining the member 'append' of a type (line 3081)
    append_184118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3081, 4), times_184117, 'append')
    # Calling append(args, kwargs) (line 3081)
    append_call_result_184126 = invoke(stypy.reporting.localization.Localization(__file__, 3081, 4), append_184118, *[result_sub_184124], **kwargs_184125)
    
    
    # Call to append(...): (line 3082)
    # Processing the call arguments (line 3082)
    str_184129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3082, 17), 'str', 'BFGS without gradient\t')
    # Processing the call keyword arguments (line 3082)
    kwargs_184130 = {}
    # Getting the type of 'algor' (line 3082)
    algor_184127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3082, 4), 'algor', False)
    # Obtaining the member 'append' of a type (line 3082)
    append_184128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3082, 4), algor_184127, 'append')
    # Calling append(args, kwargs) (line 3082)
    append_call_result_184131 = invoke(stypy.reporting.localization.Localization(__file__, 3082, 4), append_184128, *[str_184129], **kwargs_184130)
    
    
    # Call to print(...): (line 3084)
    # Processing the call keyword arguments (line 3084)
    kwargs_184133 = {}
    # Getting the type of 'print' (line 3084)
    print_184132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3084, 4), 'print', False)
    # Calling print(args, kwargs) (line 3084)
    print_call_result_184134 = invoke(stypy.reporting.localization.Localization(__file__, 3084, 4), print_184132, *[], **kwargs_184133)
    
    
    # Call to print(...): (line 3085)
    # Processing the call arguments (line 3085)
    str_184136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3085, 10), 'str', 'Newton-CG with Hessian product')
    # Processing the call keyword arguments (line 3085)
    kwargs_184137 = {}
    # Getting the type of 'print' (line 3085)
    print_184135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3085, 4), 'print', False)
    # Calling print(args, kwargs) (line 3085)
    print_call_result_184138 = invoke(stypy.reporting.localization.Localization(__file__, 3085, 4), print_184135, *[str_184136], **kwargs_184137)
    
    
    # Call to print(...): (line 3086)
    # Processing the call arguments (line 3086)
    str_184140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3086, 10), 'str', '==============================')
    # Processing the call keyword arguments (line 3086)
    kwargs_184141 = {}
    # Getting the type of 'print' (line 3086)
    print_184139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3086, 4), 'print', False)
    # Calling print(args, kwargs) (line 3086)
    print_call_result_184142 = invoke(stypy.reporting.localization.Localization(__file__, 3086, 4), print_184139, *[str_184140], **kwargs_184141)
    
    
    # Assigning a Call to a Name (line 3087):
    
    # Assigning a Call to a Name (line 3087):
    
    # Call to time(...): (line 3087)
    # Processing the call keyword arguments (line 3087)
    kwargs_184145 = {}
    # Getting the type of 'time' (line 3087)
    time_184143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3087, 12), 'time', False)
    # Obtaining the member 'time' of a type (line 3087)
    time_184144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3087, 12), time_184143, 'time')
    # Calling time(args, kwargs) (line 3087)
    time_call_result_184146 = invoke(stypy.reporting.localization.Localization(__file__, 3087, 12), time_184144, *[], **kwargs_184145)
    
    # Assigning a type to the variable 'start' (line 3087)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3087, 4), 'start', time_call_result_184146)
    
    # Assigning a Call to a Name (line 3088):
    
    # Assigning a Call to a Name (line 3088):
    
    # Call to fmin_ncg(...): (line 3088)
    # Processing the call arguments (line 3088)
    # Getting the type of 'rosen' (line 3088)
    rosen_184148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3088, 17), 'rosen', False)
    # Getting the type of 'x0' (line 3088)
    x0_184149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3088, 24), 'x0', False)
    # Getting the type of 'rosen_der' (line 3088)
    rosen_der_184150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3088, 28), 'rosen_der', False)
    # Processing the call keyword arguments (line 3088)
    # Getting the type of 'rosen_hess_prod' (line 3088)
    rosen_hess_prod_184151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3088, 47), 'rosen_hess_prod', False)
    keyword_184152 = rosen_hess_prod_184151
    int_184153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3088, 72), 'int')
    keyword_184154 = int_184153
    kwargs_184155 = {'maxiter': keyword_184154, 'fhess_p': keyword_184152}
    # Getting the type of 'fmin_ncg' (line 3088)
    fmin_ncg_184147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3088, 8), 'fmin_ncg', False)
    # Calling fmin_ncg(args, kwargs) (line 3088)
    fmin_ncg_call_result_184156 = invoke(stypy.reporting.localization.Localization(__file__, 3088, 8), fmin_ncg_184147, *[rosen_184148, x0_184149, rosen_der_184150], **kwargs_184155)
    
    # Assigning a type to the variable 'x' (line 3088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3088, 4), 'x', fmin_ncg_call_result_184156)
    
    # Call to print(...): (line 3089)
    # Processing the call arguments (line 3089)
    # Getting the type of 'x' (line 3089)
    x_184158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3089, 10), 'x', False)
    # Processing the call keyword arguments (line 3089)
    kwargs_184159 = {}
    # Getting the type of 'print' (line 3089)
    print_184157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3089, 4), 'print', False)
    # Calling print(args, kwargs) (line 3089)
    print_call_result_184160 = invoke(stypy.reporting.localization.Localization(__file__, 3089, 4), print_184157, *[x_184158], **kwargs_184159)
    
    
    # Call to append(...): (line 3090)
    # Processing the call arguments (line 3090)
    
    # Call to time(...): (line 3090)
    # Processing the call keyword arguments (line 3090)
    kwargs_184165 = {}
    # Getting the type of 'time' (line 3090)
    time_184163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 17), 'time', False)
    # Obtaining the member 'time' of a type (line 3090)
    time_184164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3090, 17), time_184163, 'time')
    # Calling time(args, kwargs) (line 3090)
    time_call_result_184166 = invoke(stypy.reporting.localization.Localization(__file__, 3090, 17), time_184164, *[], **kwargs_184165)
    
    # Getting the type of 'start' (line 3090)
    start_184167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 31), 'start', False)
    # Applying the binary operator '-' (line 3090)
    result_sub_184168 = python_operator(stypy.reporting.localization.Localization(__file__, 3090, 17), '-', time_call_result_184166, start_184167)
    
    # Processing the call keyword arguments (line 3090)
    kwargs_184169 = {}
    # Getting the type of 'times' (line 3090)
    times_184161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 4), 'times', False)
    # Obtaining the member 'append' of a type (line 3090)
    append_184162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3090, 4), times_184161, 'append')
    # Calling append(args, kwargs) (line 3090)
    append_call_result_184170 = invoke(stypy.reporting.localization.Localization(__file__, 3090, 4), append_184162, *[result_sub_184168], **kwargs_184169)
    
    
    # Call to append(...): (line 3091)
    # Processing the call arguments (line 3091)
    str_184173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3091, 17), 'str', 'Newton-CG with hessian product')
    # Processing the call keyword arguments (line 3091)
    kwargs_184174 = {}
    # Getting the type of 'algor' (line 3091)
    algor_184171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 4), 'algor', False)
    # Obtaining the member 'append' of a type (line 3091)
    append_184172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3091, 4), algor_184171, 'append')
    # Calling append(args, kwargs) (line 3091)
    append_call_result_184175 = invoke(stypy.reporting.localization.Localization(__file__, 3091, 4), append_184172, *[str_184173], **kwargs_184174)
    
    
    # Call to print(...): (line 3093)
    # Processing the call keyword arguments (line 3093)
    kwargs_184177 = {}
    # Getting the type of 'print' (line 3093)
    print_184176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3093, 4), 'print', False)
    # Calling print(args, kwargs) (line 3093)
    print_call_result_184178 = invoke(stypy.reporting.localization.Localization(__file__, 3093, 4), print_184176, *[], **kwargs_184177)
    
    
    # Call to print(...): (line 3094)
    # Processing the call arguments (line 3094)
    str_184180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3094, 10), 'str', 'Newton-CG with full Hessian')
    # Processing the call keyword arguments (line 3094)
    kwargs_184181 = {}
    # Getting the type of 'print' (line 3094)
    print_184179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3094, 4), 'print', False)
    # Calling print(args, kwargs) (line 3094)
    print_call_result_184182 = invoke(stypy.reporting.localization.Localization(__file__, 3094, 4), print_184179, *[str_184180], **kwargs_184181)
    
    
    # Call to print(...): (line 3095)
    # Processing the call arguments (line 3095)
    str_184184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3095, 10), 'str', '===========================')
    # Processing the call keyword arguments (line 3095)
    kwargs_184185 = {}
    # Getting the type of 'print' (line 3095)
    print_184183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 4), 'print', False)
    # Calling print(args, kwargs) (line 3095)
    print_call_result_184186 = invoke(stypy.reporting.localization.Localization(__file__, 3095, 4), print_184183, *[str_184184], **kwargs_184185)
    
    
    # Assigning a Call to a Name (line 3096):
    
    # Assigning a Call to a Name (line 3096):
    
    # Call to time(...): (line 3096)
    # Processing the call keyword arguments (line 3096)
    kwargs_184189 = {}
    # Getting the type of 'time' (line 3096)
    time_184187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3096, 12), 'time', False)
    # Obtaining the member 'time' of a type (line 3096)
    time_184188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3096, 12), time_184187, 'time')
    # Calling time(args, kwargs) (line 3096)
    time_call_result_184190 = invoke(stypy.reporting.localization.Localization(__file__, 3096, 12), time_184188, *[], **kwargs_184189)
    
    # Assigning a type to the variable 'start' (line 3096)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3096, 4), 'start', time_call_result_184190)
    
    # Assigning a Call to a Name (line 3097):
    
    # Assigning a Call to a Name (line 3097):
    
    # Call to fmin_ncg(...): (line 3097)
    # Processing the call arguments (line 3097)
    # Getting the type of 'rosen' (line 3097)
    rosen_184192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3097, 17), 'rosen', False)
    # Getting the type of 'x0' (line 3097)
    x0_184193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3097, 24), 'x0', False)
    # Getting the type of 'rosen_der' (line 3097)
    rosen_der_184194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3097, 28), 'rosen_der', False)
    # Processing the call keyword arguments (line 3097)
    # Getting the type of 'rosen_hess' (line 3097)
    rosen_hess_184195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3097, 45), 'rosen_hess', False)
    keyword_184196 = rosen_hess_184195
    int_184197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3097, 65), 'int')
    keyword_184198 = int_184197
    kwargs_184199 = {'fhess': keyword_184196, 'maxiter': keyword_184198}
    # Getting the type of 'fmin_ncg' (line 3097)
    fmin_ncg_184191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3097, 8), 'fmin_ncg', False)
    # Calling fmin_ncg(args, kwargs) (line 3097)
    fmin_ncg_call_result_184200 = invoke(stypy.reporting.localization.Localization(__file__, 3097, 8), fmin_ncg_184191, *[rosen_184192, x0_184193, rosen_der_184194], **kwargs_184199)
    
    # Assigning a type to the variable 'x' (line 3097)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3097, 4), 'x', fmin_ncg_call_result_184200)
    
    # Call to print(...): (line 3098)
    # Processing the call arguments (line 3098)
    # Getting the type of 'x' (line 3098)
    x_184202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3098, 10), 'x', False)
    # Processing the call keyword arguments (line 3098)
    kwargs_184203 = {}
    # Getting the type of 'print' (line 3098)
    print_184201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3098, 4), 'print', False)
    # Calling print(args, kwargs) (line 3098)
    print_call_result_184204 = invoke(stypy.reporting.localization.Localization(__file__, 3098, 4), print_184201, *[x_184202], **kwargs_184203)
    
    
    # Call to append(...): (line 3099)
    # Processing the call arguments (line 3099)
    
    # Call to time(...): (line 3099)
    # Processing the call keyword arguments (line 3099)
    kwargs_184209 = {}
    # Getting the type of 'time' (line 3099)
    time_184207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3099, 17), 'time', False)
    # Obtaining the member 'time' of a type (line 3099)
    time_184208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3099, 17), time_184207, 'time')
    # Calling time(args, kwargs) (line 3099)
    time_call_result_184210 = invoke(stypy.reporting.localization.Localization(__file__, 3099, 17), time_184208, *[], **kwargs_184209)
    
    # Getting the type of 'start' (line 3099)
    start_184211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3099, 31), 'start', False)
    # Applying the binary operator '-' (line 3099)
    result_sub_184212 = python_operator(stypy.reporting.localization.Localization(__file__, 3099, 17), '-', time_call_result_184210, start_184211)
    
    # Processing the call keyword arguments (line 3099)
    kwargs_184213 = {}
    # Getting the type of 'times' (line 3099)
    times_184205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3099, 4), 'times', False)
    # Obtaining the member 'append' of a type (line 3099)
    append_184206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3099, 4), times_184205, 'append')
    # Calling append(args, kwargs) (line 3099)
    append_call_result_184214 = invoke(stypy.reporting.localization.Localization(__file__, 3099, 4), append_184206, *[result_sub_184212], **kwargs_184213)
    
    
    # Call to append(...): (line 3100)
    # Processing the call arguments (line 3100)
    str_184217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3100, 17), 'str', 'Newton-CG with full hessian')
    # Processing the call keyword arguments (line 3100)
    kwargs_184218 = {}
    # Getting the type of 'algor' (line 3100)
    algor_184215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 4), 'algor', False)
    # Obtaining the member 'append' of a type (line 3100)
    append_184216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3100, 4), algor_184215, 'append')
    # Calling append(args, kwargs) (line 3100)
    append_call_result_184219 = invoke(stypy.reporting.localization.Localization(__file__, 3100, 4), append_184216, *[str_184217], **kwargs_184218)
    
    
    # Call to print(...): (line 3102)
    # Processing the call keyword arguments (line 3102)
    kwargs_184221 = {}
    # Getting the type of 'print' (line 3102)
    print_184220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3102, 4), 'print', False)
    # Calling print(args, kwargs) (line 3102)
    print_call_result_184222 = invoke(stypy.reporting.localization.Localization(__file__, 3102, 4), print_184220, *[], **kwargs_184221)
    
    
    # Call to print(...): (line 3103)
    # Processing the call arguments (line 3103)
    str_184224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3103, 10), 'str', '\nMinimizing the Rosenbrock function of order 3\n')
    # Processing the call keyword arguments (line 3103)
    kwargs_184225 = {}
    # Getting the type of 'print' (line 3103)
    print_184223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3103, 4), 'print', False)
    # Calling print(args, kwargs) (line 3103)
    print_call_result_184226 = invoke(stypy.reporting.localization.Localization(__file__, 3103, 4), print_184223, *[str_184224], **kwargs_184225)
    
    
    # Call to print(...): (line 3104)
    # Processing the call arguments (line 3104)
    str_184228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3104, 10), 'str', ' Algorithm \t\t\t       Seconds')
    # Processing the call keyword arguments (line 3104)
    kwargs_184229 = {}
    # Getting the type of 'print' (line 3104)
    print_184227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3104, 4), 'print', False)
    # Calling print(args, kwargs) (line 3104)
    print_call_result_184230 = invoke(stypy.reporting.localization.Localization(__file__, 3104, 4), print_184227, *[str_184228], **kwargs_184229)
    
    
    # Call to print(...): (line 3105)
    # Processing the call arguments (line 3105)
    str_184232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3105, 10), 'str', '===========\t\t\t      =========')
    # Processing the call keyword arguments (line 3105)
    kwargs_184233 = {}
    # Getting the type of 'print' (line 3105)
    print_184231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3105, 4), 'print', False)
    # Calling print(args, kwargs) (line 3105)
    print_call_result_184234 = invoke(stypy.reporting.localization.Localization(__file__, 3105, 4), print_184231, *[str_184232], **kwargs_184233)
    
    
    
    # Call to range(...): (line 3106)
    # Processing the call arguments (line 3106)
    
    # Call to len(...): (line 3106)
    # Processing the call arguments (line 3106)
    # Getting the type of 'algor' (line 3106)
    algor_184237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3106, 23), 'algor', False)
    # Processing the call keyword arguments (line 3106)
    kwargs_184238 = {}
    # Getting the type of 'len' (line 3106)
    len_184236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3106, 19), 'len', False)
    # Calling len(args, kwargs) (line 3106)
    len_call_result_184239 = invoke(stypy.reporting.localization.Localization(__file__, 3106, 19), len_184236, *[algor_184237], **kwargs_184238)
    
    # Processing the call keyword arguments (line 3106)
    kwargs_184240 = {}
    # Getting the type of 'range' (line 3106)
    range_184235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3106, 13), 'range', False)
    # Calling range(args, kwargs) (line 3106)
    range_call_result_184241 = invoke(stypy.reporting.localization.Localization(__file__, 3106, 13), range_184235, *[len_call_result_184239], **kwargs_184240)
    
    # Testing the type of a for loop iterable (line 3106)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3106, 4), range_call_result_184241)
    # Getting the type of the for loop variable (line 3106)
    for_loop_var_184242 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3106, 4), range_call_result_184241)
    # Assigning a type to the variable 'k' (line 3106)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3106, 4), 'k', for_loop_var_184242)
    # SSA begins for a for statement (line 3106)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to print(...): (line 3107)
    # Processing the call arguments (line 3107)
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 3107)
    k_184244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3107, 20), 'k', False)
    # Getting the type of 'algor' (line 3107)
    algor_184245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3107, 14), 'algor', False)
    # Obtaining the member '__getitem__' of a type (line 3107)
    getitem___184246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3107, 14), algor_184245, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3107)
    subscript_call_result_184247 = invoke(stypy.reporting.localization.Localization(__file__, 3107, 14), getitem___184246, k_184244)
    
    str_184248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3107, 24), 'str', '\t -- ')
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 3107)
    k_184249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3107, 40), 'k', False)
    # Getting the type of 'times' (line 3107)
    times_184250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3107, 34), 'times', False)
    # Obtaining the member '__getitem__' of a type (line 3107)
    getitem___184251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3107, 34), times_184250, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3107)
    subscript_call_result_184252 = invoke(stypy.reporting.localization.Localization(__file__, 3107, 34), getitem___184251, k_184249)
    
    # Processing the call keyword arguments (line 3107)
    kwargs_184253 = {}
    # Getting the type of 'print' (line 3107)
    print_184243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3107, 8), 'print', False)
    # Calling print(args, kwargs) (line 3107)
    print_call_result_184254 = invoke(stypy.reporting.localization.Localization(__file__, 3107, 8), print_184243, *[subscript_call_result_184247, str_184248, subscript_call_result_184252], **kwargs_184253)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'main(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'main' in the type store
    # Getting the type of 'stypy_return_type' (line 3034)
    stypy_return_type_184255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3034, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_184255)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'main'
    return stypy_return_type_184255

# Assigning a type to the variable 'main' (line 3034)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3034, 0), 'main', main)

if (__name__ == '__main__'):
    
    # Call to main(...): (line 3111)
    # Processing the call keyword arguments (line 3111)
    kwargs_184257 = {}
    # Getting the type of 'main' (line 3111)
    main_184256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3111, 4), 'main', False)
    # Calling main(args, kwargs) (line 3111)
    main_call_result_184258 = invoke(stypy.reporting.localization.Localization(__file__, 3111, 4), main_184256, *[], **kwargs_184257)
    


# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
