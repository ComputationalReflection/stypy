
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: r'''
2: 
3: Nonlinear solvers
4: -----------------
5: 
6: .. currentmodule:: scipy.optimize
7: 
8: This is a collection of general-purpose nonlinear multidimensional
9: solvers.  These solvers find *x* for which *F(x) = 0*. Both *x*
10: and *F* can be multidimensional.
11: 
12: Routines
13: ~~~~~~~~
14: 
15: Large-scale nonlinear solvers:
16: 
17: .. autosummary::
18: 
19:    newton_krylov
20:    anderson
21: 
22: General nonlinear solvers:
23: 
24: .. autosummary::
25: 
26:    broyden1
27:    broyden2
28: 
29: Simple iterations:
30: 
31: .. autosummary::
32: 
33:    excitingmixing
34:    linearmixing
35:    diagbroyden
36: 
37: 
38: Examples
39: ~~~~~~~~
40: 
41: **Small problem**
42: 
43: >>> def F(x):
44: ...    return np.cos(x) + x[::-1] - [1, 2, 3, 4]
45: >>> import scipy.optimize
46: >>> x = scipy.optimize.broyden1(F, [1,1,1,1], f_tol=1e-14)
47: >>> x
48: array([ 4.04674914,  3.91158389,  2.71791677,  1.61756251])
49: >>> np.cos(x) + x[::-1]
50: array([ 1.,  2.,  3.,  4.])
51: 
52: 
53: **Large problem**
54: 
55: Suppose that we needed to solve the following integrodifferential
56: equation on the square :math:`[0,1]\times[0,1]`:
57: 
58: .. math::
59: 
60:    \nabla^2 P = 10 \left(\int_0^1\int_0^1\cosh(P)\,dx\,dy\right)^2
61: 
62: with :math:`P(x,1) = 1` and :math:`P=0` elsewhere on the boundary of
63: the square.
64: 
65: The solution can be found using the `newton_krylov` solver:
66: 
67: .. plot::
68: 
69:    import numpy as np
70:    from scipy.optimize import newton_krylov
71:    from numpy import cosh, zeros_like, mgrid, zeros
72: 
73:    # parameters
74:    nx, ny = 75, 75
75:    hx, hy = 1./(nx-1), 1./(ny-1)
76: 
77:    P_left, P_right = 0, 0
78:    P_top, P_bottom = 1, 0
79: 
80:    def residual(P):
81:        d2x = zeros_like(P)
82:        d2y = zeros_like(P)
83: 
84:        d2x[1:-1] = (P[2:]   - 2*P[1:-1] + P[:-2]) / hx/hx
85:        d2x[0]    = (P[1]    - 2*P[0]    + P_left)/hx/hx
86:        d2x[-1]   = (P_right - 2*P[-1]   + P[-2])/hx/hx
87: 
88:        d2y[:,1:-1] = (P[:,2:] - 2*P[:,1:-1] + P[:,:-2])/hy/hy
89:        d2y[:,0]    = (P[:,1]  - 2*P[:,0]    + P_bottom)/hy/hy
90:        d2y[:,-1]   = (P_top   - 2*P[:,-1]   + P[:,-2])/hy/hy
91: 
92:        return d2x + d2y - 10*cosh(P).mean()**2
93: 
94:    # solve
95:    guess = zeros((nx, ny), float)
96:    sol = newton_krylov(residual, guess, method='lgmres', verbose=1)
97:    print('Residual: %g' % abs(residual(sol)).max())
98: 
99:    # visualize
100:    import matplotlib.pyplot as plt
101:    x, y = mgrid[0:1:(nx*1j), 0:1:(ny*1j)]
102:    plt.pcolor(x, y, sol)
103:    plt.colorbar()
104:    plt.show()
105: 
106: '''
107: # Copyright (C) 2009, Pauli Virtanen <pav@iki.fi>
108: # Distributed under the same license as Scipy.
109: 
110: from __future__ import division, print_function, absolute_import
111: 
112: import sys
113: import numpy as np
114: from scipy._lib.six import callable, exec_, xrange
115: from scipy.linalg import norm, solve, inv, qr, svd, LinAlgError
116: from numpy import asarray, dot, vdot
117: import scipy.sparse.linalg
118: import scipy.sparse
119: from scipy.linalg import get_blas_funcs
120: import inspect
121: from scipy._lib._util import getargspec_no_self as _getargspec
122: from .linesearch import scalar_search_wolfe1, scalar_search_armijo
123: 
124: 
125: __all__ = [
126:     'broyden1', 'broyden2', 'anderson', 'linearmixing',
127:     'diagbroyden', 'excitingmixing', 'newton_krylov']
128: 
129: #------------------------------------------------------------------------------
130: # Utility functions
131: #------------------------------------------------------------------------------
132: 
133: 
134: class NoConvergence(Exception):
135:     pass
136: 
137: 
138: def maxnorm(x):
139:     return np.absolute(x).max()
140: 
141: 
142: def _as_inexact(x):
143:     '''Return `x` as an array, of either floats or complex floats'''
144:     x = asarray(x)
145:     if not np.issubdtype(x.dtype, np.inexact):
146:         return asarray(x, dtype=np.float_)
147:     return x
148: 
149: 
150: def _array_like(x, x0):
151:     '''Return ndarray `x` as same array subclass and shape as `x0`'''
152:     x = np.reshape(x, np.shape(x0))
153:     wrap = getattr(x0, '__array_wrap__', x.__array_wrap__)
154:     return wrap(x)
155: 
156: 
157: def _safe_norm(v):
158:     if not np.isfinite(v).all():
159:         return np.array(np.inf)
160:     return norm(v)
161: 
162: #------------------------------------------------------------------------------
163: # Generic nonlinear solver machinery
164: #------------------------------------------------------------------------------
165: 
166: _doc_parts = dict(
167:     params_basic='''
168:     F : function(x) -> f
169:         Function whose root to find; should take and return an array-like
170:         object.
171:     xin : array_like
172:         Initial guess for the solution
173:     '''.strip(),
174:     params_extra='''
175:     iter : int, optional
176:         Number of iterations to make. If omitted (default), make as many
177:         as required to meet tolerances.
178:     verbose : bool, optional
179:         Print status to stdout on every iteration.
180:     maxiter : int, optional
181:         Maximum number of iterations to make. If more are needed to
182:         meet convergence, `NoConvergence` is raised.
183:     f_tol : float, optional
184:         Absolute tolerance (in max-norm) for the residual.
185:         If omitted, default is 6e-6.
186:     f_rtol : float, optional
187:         Relative tolerance for the residual. If omitted, not used.
188:     x_tol : float, optional
189:         Absolute minimum step size, as determined from the Jacobian
190:         approximation. If the step size is smaller than this, optimization
191:         is terminated as successful. If omitted, not used.
192:     x_rtol : float, optional
193:         Relative minimum step size. If omitted, not used.
194:     tol_norm : function(vector) -> scalar, optional
195:         Norm to use in convergence check. Default is the maximum norm.
196:     line_search : {None, 'armijo' (default), 'wolfe'}, optional
197:         Which type of a line search to use to determine the step size in the
198:         direction given by the Jacobian approximation. Defaults to 'armijo'.
199:     callback : function, optional
200:         Optional callback function. It is called on every iteration as
201:         ``callback(x, f)`` where `x` is the current solution and `f`
202:         the corresponding residual.
203: 
204:     Returns
205:     -------
206:     sol : ndarray
207:         An array (of similar array type as `x0`) containing the final solution.
208: 
209:     Raises
210:     ------
211:     NoConvergence
212:         When a solution was not found.
213: 
214:     '''.strip()
215: )
216: 
217: 
218: def _set_doc(obj):
219:     if obj.__doc__:
220:         obj.__doc__ = obj.__doc__ % _doc_parts
221: 
222: 
223: def nonlin_solve(F, x0, jacobian='krylov', iter=None, verbose=False,
224:                  maxiter=None, f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
225:                  tol_norm=None, line_search='armijo', callback=None,
226:                  full_output=False, raise_exception=True):
227:     '''
228:     Find a root of a function, in a way suitable for large-scale problems.
229: 
230:     Parameters
231:     ----------
232:     %(params_basic)s
233:     jacobian : Jacobian
234:         A Jacobian approximation: `Jacobian` object or something that
235:         `asjacobian` can transform to one. Alternatively, a string specifying
236:         which of the builtin Jacobian approximations to use:
237: 
238:             krylov, broyden1, broyden2, anderson
239:             diagbroyden, linearmixing, excitingmixing
240: 
241:     %(params_extra)s
242:     full_output : bool
243:         If true, returns a dictionary `info` containing convergence
244:         information.
245:     raise_exception : bool
246:         If True, a `NoConvergence` exception is raise if no solution is found.
247: 
248:     See Also
249:     --------
250:     asjacobian, Jacobian
251: 
252:     Notes
253:     -----
254:     This algorithm implements the inexact Newton method, with
255:     backtracking or full line searches. Several Jacobian
256:     approximations are available, including Krylov and Quasi-Newton
257:     methods.
258: 
259:     References
260:     ----------
261:     .. [KIM] C. T. Kelley, \"Iterative Methods for Linear and Nonlinear
262:        Equations\". Society for Industrial and Applied Mathematics. (1995)
263:        http://www.siam.org/books/kelley/fr16/index.php
264: 
265:     '''
266: 
267:     condition = TerminationCondition(f_tol=f_tol, f_rtol=f_rtol,
268:                                      x_tol=x_tol, x_rtol=x_rtol,
269:                                      iter=iter, norm=tol_norm)
270: 
271:     x0 = _as_inexact(x0)
272:     func = lambda z: _as_inexact(F(_array_like(z, x0))).flatten()
273:     x = x0.flatten()
274: 
275:     dx = np.inf
276:     Fx = func(x)
277:     Fx_norm = norm(Fx)
278: 
279:     jacobian = asjacobian(jacobian)
280:     jacobian.setup(x.copy(), Fx, func)
281: 
282:     if maxiter is None:
283:         if iter is not None:
284:             maxiter = iter + 1
285:         else:
286:             maxiter = 100*(x.size+1)
287: 
288:     if line_search is True:
289:         line_search = 'armijo'
290:     elif line_search is False:
291:         line_search = None
292: 
293:     if line_search not in (None, 'armijo', 'wolfe'):
294:         raise ValueError("Invalid line search")
295: 
296:     # Solver tolerance selection
297:     gamma = 0.9
298:     eta_max = 0.9999
299:     eta_treshold = 0.1
300:     eta = 1e-3
301: 
302:     for n in xrange(maxiter):
303:         status = condition.check(Fx, x, dx)
304:         if status:
305:             break
306: 
307:         # The tolerance, as computed for scipy.sparse.linalg.* routines
308:         tol = min(eta, eta*Fx_norm)
309:         dx = -jacobian.solve(Fx, tol=tol)
310: 
311:         if norm(dx) == 0:
312:             raise ValueError("Jacobian inversion yielded zero vector. "
313:                              "This indicates a bug in the Jacobian "
314:                              "approximation.")
315: 
316:         # Line search, or Newton step
317:         if line_search:
318:             s, x, Fx, Fx_norm_new = _nonlin_line_search(func, x, Fx, dx,
319:                                                         line_search)
320:         else:
321:             s = 1.0
322:             x = x + dx
323:             Fx = func(x)
324:             Fx_norm_new = norm(Fx)
325: 
326:         jacobian.update(x.copy(), Fx)
327: 
328:         if callback:
329:             callback(x, Fx)
330: 
331:         # Adjust forcing parameters for inexact methods
332:         eta_A = gamma * Fx_norm_new**2 / Fx_norm**2
333:         if gamma * eta**2 < eta_treshold:
334:             eta = min(eta_max, eta_A)
335:         else:
336:             eta = min(eta_max, max(eta_A, gamma*eta**2))
337: 
338:         Fx_norm = Fx_norm_new
339: 
340:         # Print status
341:         if verbose:
342:             sys.stdout.write("%d:  |F(x)| = %g; step %g; tol %g\n" % (
343:                 n, norm(Fx), s, eta))
344:             sys.stdout.flush()
345:     else:
346:         if raise_exception:
347:             raise NoConvergence(_array_like(x, x0))
348:         else:
349:             status = 2
350: 
351:     if full_output:
352:         info = {'nit': condition.iteration,
353:                 'fun': Fx,
354:                 'status': status,
355:                 'success': status == 1,
356:                 'message': {1: 'A solution was found at the specified '
357:                                'tolerance.',
358:                             2: 'The maximum number of iterations allowed '
359:                                'has been reached.'
360:                             }[status]
361:                 }
362:         return _array_like(x, x0), info
363:     else:
364:         return _array_like(x, x0)
365: 
366: _set_doc(nonlin_solve)
367: 
368: 
369: def _nonlin_line_search(func, x, Fx, dx, search_type='armijo', rdiff=1e-8,
370:                         smin=1e-2):
371:     tmp_s = [0]
372:     tmp_Fx = [Fx]
373:     tmp_phi = [norm(Fx)**2]
374:     s_norm = norm(x) / norm(dx)
375: 
376:     def phi(s, store=True):
377:         if s == tmp_s[0]:
378:             return tmp_phi[0]
379:         xt = x + s*dx
380:         v = func(xt)
381:         p = _safe_norm(v)**2
382:         if store:
383:             tmp_s[0] = s
384:             tmp_phi[0] = p
385:             tmp_Fx[0] = v
386:         return p
387: 
388:     def derphi(s):
389:         ds = (abs(s) + s_norm + 1) * rdiff
390:         return (phi(s+ds, store=False) - phi(s)) / ds
391: 
392:     if search_type == 'wolfe':
393:         s, phi1, phi0 = scalar_search_wolfe1(phi, derphi, tmp_phi[0],
394:                                              xtol=1e-2, amin=smin)
395:     elif search_type == 'armijo':
396:         s, phi1 = scalar_search_armijo(phi, tmp_phi[0], -tmp_phi[0],
397:                                        amin=smin)
398: 
399:     if s is None:
400:         # XXX: No suitable step length found. Take the full Newton step,
401:         #      and hope for the best.
402:         s = 1.0
403: 
404:     x = x + s*dx
405:     if s == tmp_s[0]:
406:         Fx = tmp_Fx[0]
407:     else:
408:         Fx = func(x)
409:     Fx_norm = norm(Fx)
410: 
411:     return s, x, Fx, Fx_norm
412: 
413: 
414: class TerminationCondition(object):
415:     '''
416:     Termination condition for an iteration. It is terminated if
417: 
418:     - |F| < f_rtol*|F_0|, AND
419:     - |F| < f_tol
420: 
421:     AND
422: 
423:     - |dx| < x_rtol*|x|, AND
424:     - |dx| < x_tol
425: 
426:     '''
427:     def __init__(self, f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
428:                  iter=None, norm=maxnorm):
429: 
430:         if f_tol is None:
431:             f_tol = np.finfo(np.float_).eps ** (1./3)
432:         if f_rtol is None:
433:             f_rtol = np.inf
434:         if x_tol is None:
435:             x_tol = np.inf
436:         if x_rtol is None:
437:             x_rtol = np.inf
438: 
439:         self.x_tol = x_tol
440:         self.x_rtol = x_rtol
441:         self.f_tol = f_tol
442:         self.f_rtol = f_rtol
443: 
444:         if norm is None:
445:             self.norm = maxnorm
446:         else:
447:             self.norm = norm
448: 
449:         self.iter = iter
450: 
451:         self.f0_norm = None
452:         self.iteration = 0
453: 
454:     def check(self, f, x, dx):
455:         self.iteration += 1
456:         f_norm = self.norm(f)
457:         x_norm = self.norm(x)
458:         dx_norm = self.norm(dx)
459: 
460:         if self.f0_norm is None:
461:             self.f0_norm = f_norm
462: 
463:         if f_norm == 0:
464:             return 1
465: 
466:         if self.iter is not None:
467:             # backwards compatibility with Scipy 0.6.0
468:             return 2 * (self.iteration > self.iter)
469: 
470:         # NB: condition must succeed for rtol=inf even if norm == 0
471:         return int((f_norm <= self.f_tol
472:                     and f_norm/self.f_rtol <= self.f0_norm)
473:                    and (dx_norm <= self.x_tol
474:                         and dx_norm/self.x_rtol <= x_norm))
475: 
476: 
477: #------------------------------------------------------------------------------
478: # Generic Jacobian approximation
479: #------------------------------------------------------------------------------
480: 
481: class Jacobian(object):
482:     '''
483:     Common interface for Jacobians or Jacobian approximations.
484: 
485:     The optional methods come useful when implementing trust region
486:     etc.  algorithms that often require evaluating transposes of the
487:     Jacobian.
488: 
489:     Methods
490:     -------
491:     solve
492:         Returns J^-1 * v
493:     update
494:         Updates Jacobian to point `x` (where the function has residual `Fx`)
495: 
496:     matvec : optional
497:         Returns J * v
498:     rmatvec : optional
499:         Returns A^H * v
500:     rsolve : optional
501:         Returns A^-H * v
502:     matmat : optional
503:         Returns A * V, where V is a dense matrix with dimensions (N,K).
504:     todense : optional
505:         Form the dense Jacobian matrix. Necessary for dense trust region
506:         algorithms, and useful for testing.
507: 
508:     Attributes
509:     ----------
510:     shape
511:         Matrix dimensions (M, N)
512:     dtype
513:         Data type of the matrix.
514:     func : callable, optional
515:         Function the Jacobian corresponds to
516: 
517:     '''
518: 
519:     def __init__(self, **kw):
520:         names = ["solve", "update", "matvec", "rmatvec", "rsolve",
521:                  "matmat", "todense", "shape", "dtype"]
522:         for name, value in kw.items():
523:             if name not in names:
524:                 raise ValueError("Unknown keyword argument %s" % name)
525:             if value is not None:
526:                 setattr(self, name, kw[name])
527: 
528:         if hasattr(self, 'todense'):
529:             self.__array__ = lambda: self.todense()
530: 
531:     def aspreconditioner(self):
532:         return InverseJacobian(self)
533: 
534:     def solve(self, v, tol=0):
535:         raise NotImplementedError
536: 
537:     def update(self, x, F):
538:         pass
539: 
540:     def setup(self, x, F, func):
541:         self.func = func
542:         self.shape = (F.size, x.size)
543:         self.dtype = F.dtype
544:         if self.__class__.setup is Jacobian.setup:
545:             # Call on the first point unless overridden
546:             self.update(x, F)
547: 
548: 
549: class InverseJacobian(object):
550:     def __init__(self, jacobian):
551:         self.jacobian = jacobian
552:         self.matvec = jacobian.solve
553:         self.update = jacobian.update
554:         if hasattr(jacobian, 'setup'):
555:             self.setup = jacobian.setup
556:         if hasattr(jacobian, 'rsolve'):
557:             self.rmatvec = jacobian.rsolve
558: 
559:     @property
560:     def shape(self):
561:         return self.jacobian.shape
562: 
563:     @property
564:     def dtype(self):
565:         return self.jacobian.dtype
566: 
567: 
568: def asjacobian(J):
569:     '''
570:     Convert given object to one suitable for use as a Jacobian.
571:     '''
572:     spsolve = scipy.sparse.linalg.spsolve
573:     if isinstance(J, Jacobian):
574:         return J
575:     elif inspect.isclass(J) and issubclass(J, Jacobian):
576:         return J()
577:     elif isinstance(J, np.ndarray):
578:         if J.ndim > 2:
579:             raise ValueError('array must have rank <= 2')
580:         J = np.atleast_2d(np.asarray(J))
581:         if J.shape[0] != J.shape[1]:
582:             raise ValueError('array must be square')
583: 
584:         return Jacobian(matvec=lambda v: dot(J, v),
585:                         rmatvec=lambda v: dot(J.conj().T, v),
586:                         solve=lambda v: solve(J, v),
587:                         rsolve=lambda v: solve(J.conj().T, v),
588:                         dtype=J.dtype, shape=J.shape)
589:     elif scipy.sparse.isspmatrix(J):
590:         if J.shape[0] != J.shape[1]:
591:             raise ValueError('matrix must be square')
592:         return Jacobian(matvec=lambda v: J*v,
593:                         rmatvec=lambda v: J.conj().T * v,
594:                         solve=lambda v: spsolve(J, v),
595:                         rsolve=lambda v: spsolve(J.conj().T, v),
596:                         dtype=J.dtype, shape=J.shape)
597:     elif hasattr(J, 'shape') and hasattr(J, 'dtype') and hasattr(J, 'solve'):
598:         return Jacobian(matvec=getattr(J, 'matvec'),
599:                         rmatvec=getattr(J, 'rmatvec'),
600:                         solve=J.solve,
601:                         rsolve=getattr(J, 'rsolve'),
602:                         update=getattr(J, 'update'),
603:                         setup=getattr(J, 'setup'),
604:                         dtype=J.dtype,
605:                         shape=J.shape)
606:     elif callable(J):
607:         # Assume it's a function J(x) that returns the Jacobian
608:         class Jac(Jacobian):
609:             def update(self, x, F):
610:                 self.x = x
611: 
612:             def solve(self, v, tol=0):
613:                 m = J(self.x)
614:                 if isinstance(m, np.ndarray):
615:                     return solve(m, v)
616:                 elif scipy.sparse.isspmatrix(m):
617:                     return spsolve(m, v)
618:                 else:
619:                     raise ValueError("Unknown matrix type")
620: 
621:             def matvec(self, v):
622:                 m = J(self.x)
623:                 if isinstance(m, np.ndarray):
624:                     return dot(m, v)
625:                 elif scipy.sparse.isspmatrix(m):
626:                     return m*v
627:                 else:
628:                     raise ValueError("Unknown matrix type")
629: 
630:             def rsolve(self, v, tol=0):
631:                 m = J(self.x)
632:                 if isinstance(m, np.ndarray):
633:                     return solve(m.conj().T, v)
634:                 elif scipy.sparse.isspmatrix(m):
635:                     return spsolve(m.conj().T, v)
636:                 else:
637:                     raise ValueError("Unknown matrix type")
638: 
639:             def rmatvec(self, v):
640:                 m = J(self.x)
641:                 if isinstance(m, np.ndarray):
642:                     return dot(m.conj().T, v)
643:                 elif scipy.sparse.isspmatrix(m):
644:                     return m.conj().T * v
645:                 else:
646:                     raise ValueError("Unknown matrix type")
647:         return Jac()
648:     elif isinstance(J, str):
649:         return dict(broyden1=BroydenFirst,
650:                     broyden2=BroydenSecond,
651:                     anderson=Anderson,
652:                     diagbroyden=DiagBroyden,
653:                     linearmixing=LinearMixing,
654:                     excitingmixing=ExcitingMixing,
655:                     krylov=KrylovJacobian)[J]()
656:     else:
657:         raise TypeError('Cannot convert object to a Jacobian')
658: 
659: 
660: #------------------------------------------------------------------------------
661: # Broyden
662: #------------------------------------------------------------------------------
663: 
664: class GenericBroyden(Jacobian):
665:     def setup(self, x0, f0, func):
666:         Jacobian.setup(self, x0, f0, func)
667:         self.last_f = f0
668:         self.last_x = x0
669: 
670:         if hasattr(self, 'alpha') and self.alpha is None:
671:             # Autoscale the initial Jacobian parameter
672:             # unless we have already guessed the solution.
673:             normf0 = norm(f0)
674:             if normf0:
675:                 self.alpha = 0.5*max(norm(x0), 1) / normf0
676:             else:
677:                 self.alpha = 1.0
678: 
679:     def _update(self, x, f, dx, df, dx_norm, df_norm):
680:         raise NotImplementedError
681: 
682:     def update(self, x, f):
683:         df = f - self.last_f
684:         dx = x - self.last_x
685:         self._update(x, f, dx, df, norm(dx), norm(df))
686:         self.last_f = f
687:         self.last_x = x
688: 
689: 
690: class LowRankMatrix(object):
691:     r'''
692:     A matrix represented as
693: 
694:     .. math:: \alpha I + \sum_{n=0}^{n=M} c_n d_n^\dagger
695: 
696:     However, if the rank of the matrix reaches the dimension of the vectors,
697:     full matrix representation will be used thereon.
698: 
699:     '''
700: 
701:     def __init__(self, alpha, n, dtype):
702:         self.alpha = alpha
703:         self.cs = []
704:         self.ds = []
705:         self.n = n
706:         self.dtype = dtype
707:         self.collapsed = None
708: 
709:     @staticmethod
710:     def _matvec(v, alpha, cs, ds):
711:         axpy, scal, dotc = get_blas_funcs(['axpy', 'scal', 'dotc'],
712:                                           cs[:1] + [v])
713:         w = alpha * v
714:         for c, d in zip(cs, ds):
715:             a = dotc(d, v)
716:             w = axpy(c, w, w.size, a)
717:         return w
718: 
719:     @staticmethod
720:     def _solve(v, alpha, cs, ds):
721:         '''Evaluate w = M^-1 v'''
722:         if len(cs) == 0:
723:             return v/alpha
724: 
725:         # (B + C D^H)^-1 = B^-1 - B^-1 C (I + D^H B^-1 C)^-1 D^H B^-1
726: 
727:         axpy, dotc = get_blas_funcs(['axpy', 'dotc'], cs[:1] + [v])
728: 
729:         c0 = cs[0]
730:         A = alpha * np.identity(len(cs), dtype=c0.dtype)
731:         for i, d in enumerate(ds):
732:             for j, c in enumerate(cs):
733:                 A[i,j] += dotc(d, c)
734: 
735:         q = np.zeros(len(cs), dtype=c0.dtype)
736:         for j, d in enumerate(ds):
737:             q[j] = dotc(d, v)
738:         q /= alpha
739:         q = solve(A, q)
740: 
741:         w = v/alpha
742:         for c, qc in zip(cs, q):
743:             w = axpy(c, w, w.size, -qc)
744: 
745:         return w
746: 
747:     def matvec(self, v):
748:         '''Evaluate w = M v'''
749:         if self.collapsed is not None:
750:             return np.dot(self.collapsed, v)
751:         return LowRankMatrix._matvec(v, self.alpha, self.cs, self.ds)
752: 
753:     def rmatvec(self, v):
754:         '''Evaluate w = M^H v'''
755:         if self.collapsed is not None:
756:             return np.dot(self.collapsed.T.conj(), v)
757:         return LowRankMatrix._matvec(v, np.conj(self.alpha), self.ds, self.cs)
758: 
759:     def solve(self, v, tol=0):
760:         '''Evaluate w = M^-1 v'''
761:         if self.collapsed is not None:
762:             return solve(self.collapsed, v)
763:         return LowRankMatrix._solve(v, self.alpha, self.cs, self.ds)
764: 
765:     def rsolve(self, v, tol=0):
766:         '''Evaluate w = M^-H v'''
767:         if self.collapsed is not None:
768:             return solve(self.collapsed.T.conj(), v)
769:         return LowRankMatrix._solve(v, np.conj(self.alpha), self.ds, self.cs)
770: 
771:     def append(self, c, d):
772:         if self.collapsed is not None:
773:             self.collapsed += c[:,None] * d[None,:].conj()
774:             return
775: 
776:         self.cs.append(c)
777:         self.ds.append(d)
778: 
779:         if len(self.cs) > c.size:
780:             self.collapse()
781: 
782:     def __array__(self):
783:         if self.collapsed is not None:
784:             return self.collapsed
785: 
786:         Gm = self.alpha*np.identity(self.n, dtype=self.dtype)
787:         for c, d in zip(self.cs, self.ds):
788:             Gm += c[:,None]*d[None,:].conj()
789:         return Gm
790: 
791:     def collapse(self):
792:         '''Collapse the low-rank matrix to a full-rank one.'''
793:         self.collapsed = np.array(self)
794:         self.cs = None
795:         self.ds = None
796:         self.alpha = None
797: 
798:     def restart_reduce(self, rank):
799:         '''
800:         Reduce the rank of the matrix by dropping all vectors.
801:         '''
802:         if self.collapsed is not None:
803:             return
804:         assert rank > 0
805:         if len(self.cs) > rank:
806:             del self.cs[:]
807:             del self.ds[:]
808: 
809:     def simple_reduce(self, rank):
810:         '''
811:         Reduce the rank of the matrix by dropping oldest vectors.
812:         '''
813:         if self.collapsed is not None:
814:             return
815:         assert rank > 0
816:         while len(self.cs) > rank:
817:             del self.cs[0]
818:             del self.ds[0]
819: 
820:     def svd_reduce(self, max_rank, to_retain=None):
821:         '''
822:         Reduce the rank of the matrix by retaining some SVD components.
823: 
824:         This corresponds to the \"Broyden Rank Reduction Inverse\"
825:         algorithm described in [1]_.
826: 
827:         Note that the SVD decomposition can be done by solving only a
828:         problem whose size is the effective rank of this matrix, which
829:         is viable even for large problems.
830: 
831:         Parameters
832:         ----------
833:         max_rank : int
834:             Maximum rank of this matrix after reduction.
835:         to_retain : int, optional
836:             Number of SVD components to retain when reduction is done
837:             (ie. rank > max_rank). Default is ``max_rank - 2``.
838: 
839:         References
840:         ----------
841:         .. [1] B.A. van der Rotten, PhD thesis,
842:            \"A limited memory Broyden method to solve high-dimensional
843:            systems of nonlinear equations\". Mathematisch Instituut,
844:            Universiteit Leiden, The Netherlands (2003).
845: 
846:            http://www.math.leidenuniv.nl/scripties/Rotten.pdf
847: 
848:         '''
849:         if self.collapsed is not None:
850:             return
851: 
852:         p = max_rank
853:         if to_retain is not None:
854:             q = to_retain
855:         else:
856:             q = p - 2
857: 
858:         if self.cs:
859:             p = min(p, len(self.cs[0]))
860:         q = max(0, min(q, p-1))
861: 
862:         m = len(self.cs)
863:         if m < p:
864:             # nothing to do
865:             return
866: 
867:         C = np.array(self.cs).T
868:         D = np.array(self.ds).T
869: 
870:         D, R = qr(D, mode='economic')
871:         C = dot(C, R.T.conj())
872: 
873:         U, S, WH = svd(C, full_matrices=False, compute_uv=True)
874: 
875:         C = dot(C, inv(WH))
876:         D = dot(D, WH.T.conj())
877: 
878:         for k in xrange(q):
879:             self.cs[k] = C[:,k].copy()
880:             self.ds[k] = D[:,k].copy()
881: 
882:         del self.cs[q:]
883:         del self.ds[q:]
884: 
885: _doc_parts['broyden_params'] = '''
886:     alpha : float, optional
887:         Initial guess for the Jacobian is ``(-1/alpha)``.
888:     reduction_method : str or tuple, optional
889:         Method used in ensuring that the rank of the Broyden matrix
890:         stays low. Can either be a string giving the name of the method,
891:         or a tuple of the form ``(method, param1, param2, ...)``
892:         that gives the name of the method and values for additional parameters.
893: 
894:         Methods available:
895: 
896:             - ``restart``: drop all matrix columns. Has no extra parameters.
897:             - ``simple``: drop oldest matrix column. Has no extra parameters.
898:             - ``svd``: keep only the most significant SVD components.
899:               Takes an extra parameter, ``to_retain``, which determines the
900:               number of SVD components to retain when rank reduction is done.
901:               Default is ``max_rank - 2``.
902: 
903:     max_rank : int, optional
904:         Maximum rank for the Broyden matrix.
905:         Default is infinity (ie., no rank reduction).
906:     '''.strip()
907: 
908: 
909: class BroydenFirst(GenericBroyden):
910:     r'''
911:     Find a root of a function, using Broyden's first Jacobian approximation.
912: 
913:     This method is also known as \"Broyden's good method\".
914: 
915:     Parameters
916:     ----------
917:     %(params_basic)s
918:     %(broyden_params)s
919:     %(params_extra)s
920: 
921:     Notes
922:     -----
923:     This algorithm implements the inverse Jacobian Quasi-Newton update
924: 
925:     .. math:: H_+ = H + (dx - H df) dx^\dagger H / ( dx^\dagger H df)
926: 
927:     which corresponds to Broyden's first Jacobian update
928: 
929:     .. math:: J_+ = J + (df - J dx) dx^\dagger / dx^\dagger dx
930: 
931: 
932:     References
933:     ----------
934:     .. [1] B.A. van der Rotten, PhD thesis,
935:        \"A limited memory Broyden method to solve high-dimensional
936:        systems of nonlinear equations\". Mathematisch Instituut,
937:        Universiteit Leiden, The Netherlands (2003).
938: 
939:        http://www.math.leidenuniv.nl/scripties/Rotten.pdf
940: 
941:     '''
942: 
943:     def __init__(self, alpha=None, reduction_method='restart', max_rank=None):
944:         GenericBroyden.__init__(self)
945:         self.alpha = alpha
946:         self.Gm = None
947: 
948:         if max_rank is None:
949:             max_rank = np.inf
950:         self.max_rank = max_rank
951: 
952:         if isinstance(reduction_method, str):
953:             reduce_params = ()
954:         else:
955:             reduce_params = reduction_method[1:]
956:             reduction_method = reduction_method[0]
957:         reduce_params = (max_rank - 1,) + reduce_params
958: 
959:         if reduction_method == 'svd':
960:             self._reduce = lambda: self.Gm.svd_reduce(*reduce_params)
961:         elif reduction_method == 'simple':
962:             self._reduce = lambda: self.Gm.simple_reduce(*reduce_params)
963:         elif reduction_method == 'restart':
964:             self._reduce = lambda: self.Gm.restart_reduce(*reduce_params)
965:         else:
966:             raise ValueError("Unknown rank reduction method '%s'" %
967:                              reduction_method)
968: 
969:     def setup(self, x, F, func):
970:         GenericBroyden.setup(self, x, F, func)
971:         self.Gm = LowRankMatrix(-self.alpha, self.shape[0], self.dtype)
972: 
973:     def todense(self):
974:         return inv(self.Gm)
975: 
976:     def solve(self, f, tol=0):
977:         r = self.Gm.matvec(f)
978:         if not np.isfinite(r).all():
979:             # singular; reset the Jacobian approximation
980:             self.setup(self.last_x, self.last_f, self.func)
981:         return self.Gm.matvec(f)
982: 
983:     def matvec(self, f):
984:         return self.Gm.solve(f)
985: 
986:     def rsolve(self, f, tol=0):
987:         return self.Gm.rmatvec(f)
988: 
989:     def rmatvec(self, f):
990:         return self.Gm.rsolve(f)
991: 
992:     def _update(self, x, f, dx, df, dx_norm, df_norm):
993:         self._reduce()  # reduce first to preserve secant condition
994: 
995:         v = self.Gm.rmatvec(dx)
996:         c = dx - self.Gm.matvec(df)
997:         d = v / vdot(df, v)
998: 
999:         self.Gm.append(c, d)
1000: 
1001: 
1002: class BroydenSecond(BroydenFirst):
1003:     '''
1004:     Find a root of a function, using Broyden\'s second Jacobian approximation.
1005: 
1006:     This method is also known as \"Broyden's bad method\".
1007: 
1008:     Parameters
1009:     ----------
1010:     %(params_basic)s
1011:     %(broyden_params)s
1012:     %(params_extra)s
1013: 
1014:     Notes
1015:     -----
1016:     This algorithm implements the inverse Jacobian Quasi-Newton update
1017: 
1018:     .. math:: H_+ = H + (dx - H df) df^\\dagger / ( df^\\dagger df)
1019: 
1020:     corresponding to Broyden's second method.
1021: 
1022:     References
1023:     ----------
1024:     .. [1] B.A. van der Rotten, PhD thesis,
1025:        \"A limited memory Broyden method to solve high-dimensional
1026:        systems of nonlinear equations\". Mathematisch Instituut,
1027:        Universiteit Leiden, The Netherlands (2003).
1028: 
1029:        http://www.math.leidenuniv.nl/scripties/Rotten.pdf
1030: 
1031:     '''
1032: 
1033:     def _update(self, x, f, dx, df, dx_norm, df_norm):
1034:         self._reduce()  # reduce first to preserve secant condition
1035: 
1036:         v = df
1037:         c = dx - self.Gm.matvec(df)
1038:         d = v / df_norm**2
1039:         self.Gm.append(c, d)
1040: 
1041: 
1042: #------------------------------------------------------------------------------
1043: # Broyden-like (restricted memory)
1044: #------------------------------------------------------------------------------
1045: 
1046: class Anderson(GenericBroyden):
1047:     '''
1048:     Find a root of a function, using (extended) Anderson mixing.
1049: 
1050:     The Jacobian is formed by for a 'best' solution in the space
1051:     spanned by last `M` vectors. As a result, only a MxM matrix
1052:     inversions and MxN multiplications are required. [Ey]_
1053: 
1054:     Parameters
1055:     ----------
1056:     %(params_basic)s
1057:     alpha : float, optional
1058:         Initial guess for the Jacobian is (-1/alpha).
1059:     M : float, optional
1060:         Number of previous vectors to retain. Defaults to 5.
1061:     w0 : float, optional
1062:         Regularization parameter for numerical stability.
1063:         Compared to unity, good values of the order of 0.01.
1064:     %(params_extra)s
1065: 
1066:     References
1067:     ----------
1068:     .. [Ey] V. Eyert, J. Comp. Phys., 124, 271 (1996).
1069: 
1070:     '''
1071: 
1072:     # Note:
1073:     #
1074:     # Anderson method maintains a rank M approximation of the inverse Jacobian,
1075:     #
1076:     #     J^-1 v ~ -v*alpha + (dX + alpha dF) A^-1 dF^H v
1077:     #     A      = W + dF^H dF
1078:     #     W      = w0^2 diag(dF^H dF)
1079:     #
1080:     # so that for w0 = 0 the secant condition applies for last M iterates, ie.,
1081:     #
1082:     #     J^-1 df_j = dx_j
1083:     #
1084:     # for all j = 0 ... M-1.
1085:     #
1086:     # Moreover, (from Sherman-Morrison-Woodbury formula)
1087:     #
1088:     #    J v ~ [ b I - b^2 C (I + b dF^H A^-1 C)^-1 dF^H ] v
1089:     #    C   = (dX + alpha dF) A^-1
1090:     #    b   = -1/alpha
1091:     #
1092:     # and after simplification
1093:     #
1094:     #    J v ~ -v/alpha + (dX/alpha + dF) (dF^H dX - alpha W)^-1 dF^H v
1095:     #
1096: 
1097:     def __init__(self, alpha=None, w0=0.01, M=5):
1098:         GenericBroyden.__init__(self)
1099:         self.alpha = alpha
1100:         self.M = M
1101:         self.dx = []
1102:         self.df = []
1103:         self.gamma = None
1104:         self.w0 = w0
1105: 
1106:     def solve(self, f, tol=0):
1107:         dx = -self.alpha*f
1108: 
1109:         n = len(self.dx)
1110:         if n == 0:
1111:             return dx
1112: 
1113:         df_f = np.empty(n, dtype=f.dtype)
1114:         for k in xrange(n):
1115:             df_f[k] = vdot(self.df[k], f)
1116: 
1117:         try:
1118:             gamma = solve(self.a, df_f)
1119:         except LinAlgError:
1120:             # singular; reset the Jacobian approximation
1121:             del self.dx[:]
1122:             del self.df[:]
1123:             return dx
1124: 
1125:         for m in xrange(n):
1126:             dx += gamma[m]*(self.dx[m] + self.alpha*self.df[m])
1127:         return dx
1128: 
1129:     def matvec(self, f):
1130:         dx = -f/self.alpha
1131: 
1132:         n = len(self.dx)
1133:         if n == 0:
1134:             return dx
1135: 
1136:         df_f = np.empty(n, dtype=f.dtype)
1137:         for k in xrange(n):
1138:             df_f[k] = vdot(self.df[k], f)
1139: 
1140:         b = np.empty((n, n), dtype=f.dtype)
1141:         for i in xrange(n):
1142:             for j in xrange(n):
1143:                 b[i,j] = vdot(self.df[i], self.dx[j])
1144:                 if i == j and self.w0 != 0:
1145:                     b[i,j] -= vdot(self.df[i], self.df[i])*self.w0**2*self.alpha
1146:         gamma = solve(b, df_f)
1147: 
1148:         for m in xrange(n):
1149:             dx += gamma[m]*(self.df[m] + self.dx[m]/self.alpha)
1150:         return dx
1151: 
1152:     def _update(self, x, f, dx, df, dx_norm, df_norm):
1153:         if self.M == 0:
1154:             return
1155: 
1156:         self.dx.append(dx)
1157:         self.df.append(df)
1158: 
1159:         while len(self.dx) > self.M:
1160:             self.dx.pop(0)
1161:             self.df.pop(0)
1162: 
1163:         n = len(self.dx)
1164:         a = np.zeros((n, n), dtype=f.dtype)
1165: 
1166:         for i in xrange(n):
1167:             for j in xrange(i, n):
1168:                 if i == j:
1169:                     wd = self.w0**2
1170:                 else:
1171:                     wd = 0
1172:                 a[i,j] = (1+wd)*vdot(self.df[i], self.df[j])
1173: 
1174:         a += np.triu(a, 1).T.conj()
1175:         self.a = a
1176: 
1177: #------------------------------------------------------------------------------
1178: # Simple iterations
1179: #------------------------------------------------------------------------------
1180: 
1181: 
1182: class DiagBroyden(GenericBroyden):
1183:     '''
1184:     Find a root of a function, using diagonal Broyden Jacobian approximation.
1185: 
1186:     The Jacobian approximation is derived from previous iterations, by
1187:     retaining only the diagonal of Broyden matrices.
1188: 
1189:     .. warning::
1190: 
1191:        This algorithm may be useful for specific problems, but whether
1192:        it will work may depend strongly on the problem.
1193: 
1194:     Parameters
1195:     ----------
1196:     %(params_basic)s
1197:     alpha : float, optional
1198:         Initial guess for the Jacobian is (-1/alpha).
1199:     %(params_extra)s
1200:     '''
1201: 
1202:     def __init__(self, alpha=None):
1203:         GenericBroyden.__init__(self)
1204:         self.alpha = alpha
1205: 
1206:     def setup(self, x, F, func):
1207:         GenericBroyden.setup(self, x, F, func)
1208:         self.d = np.ones((self.shape[0],), dtype=self.dtype) / self.alpha
1209: 
1210:     def solve(self, f, tol=0):
1211:         return -f / self.d
1212: 
1213:     def matvec(self, f):
1214:         return -f * self.d
1215: 
1216:     def rsolve(self, f, tol=0):
1217:         return -f / self.d.conj()
1218: 
1219:     def rmatvec(self, f):
1220:         return -f * self.d.conj()
1221: 
1222:     def todense(self):
1223:         return np.diag(-self.d)
1224: 
1225:     def _update(self, x, f, dx, df, dx_norm, df_norm):
1226:         self.d -= (df + self.d*dx)*dx/dx_norm**2
1227: 
1228: 
1229: class LinearMixing(GenericBroyden):
1230:     '''
1231:     Find a root of a function, using a scalar Jacobian approximation.
1232: 
1233:     .. warning::
1234: 
1235:        This algorithm may be useful for specific problems, but whether
1236:        it will work may depend strongly on the problem.
1237: 
1238:     Parameters
1239:     ----------
1240:     %(params_basic)s
1241:     alpha : float, optional
1242:         The Jacobian approximation is (-1/alpha).
1243:     %(params_extra)s
1244:     '''
1245: 
1246:     def __init__(self, alpha=None):
1247:         GenericBroyden.__init__(self)
1248:         self.alpha = alpha
1249: 
1250:     def solve(self, f, tol=0):
1251:         return -f*self.alpha
1252: 
1253:     def matvec(self, f):
1254:         return -f/self.alpha
1255: 
1256:     def rsolve(self, f, tol=0):
1257:         return -f*np.conj(self.alpha)
1258: 
1259:     def rmatvec(self, f):
1260:         return -f/np.conj(self.alpha)
1261: 
1262:     def todense(self):
1263:         return np.diag(-np.ones(self.shape[0])/self.alpha)
1264: 
1265:     def _update(self, x, f, dx, df, dx_norm, df_norm):
1266:         pass
1267: 
1268: 
1269: class ExcitingMixing(GenericBroyden):
1270:     '''
1271:     Find a root of a function, using a tuned diagonal Jacobian approximation.
1272: 
1273:     The Jacobian matrix is diagonal and is tuned on each iteration.
1274: 
1275:     .. warning::
1276: 
1277:        This algorithm may be useful for specific problems, but whether
1278:        it will work may depend strongly on the problem.
1279: 
1280:     Parameters
1281:     ----------
1282:     %(params_basic)s
1283:     alpha : float, optional
1284:         Initial Jacobian approximation is (-1/alpha).
1285:     alphamax : float, optional
1286:         The entries of the diagonal Jacobian are kept in the range
1287:         ``[alpha, alphamax]``.
1288:     %(params_extra)s
1289:     '''
1290: 
1291:     def __init__(self, alpha=None, alphamax=1.0):
1292:         GenericBroyden.__init__(self)
1293:         self.alpha = alpha
1294:         self.alphamax = alphamax
1295:         self.beta = None
1296: 
1297:     def setup(self, x, F, func):
1298:         GenericBroyden.setup(self, x, F, func)
1299:         self.beta = self.alpha * np.ones((self.shape[0],), dtype=self.dtype)
1300: 
1301:     def solve(self, f, tol=0):
1302:         return -f*self.beta
1303: 
1304:     def matvec(self, f):
1305:         return -f/self.beta
1306: 
1307:     def rsolve(self, f, tol=0):
1308:         return -f*self.beta.conj()
1309: 
1310:     def rmatvec(self, f):
1311:         return -f/self.beta.conj()
1312: 
1313:     def todense(self):
1314:         return np.diag(-1/self.beta)
1315: 
1316:     def _update(self, x, f, dx, df, dx_norm, df_norm):
1317:         incr = f*self.last_f > 0
1318:         self.beta[incr] += self.alpha
1319:         self.beta[~incr] = self.alpha
1320:         np.clip(self.beta, 0, self.alphamax, out=self.beta)
1321: 
1322: 
1323: #------------------------------------------------------------------------------
1324: # Iterative/Krylov approximated Jacobians
1325: #------------------------------------------------------------------------------
1326: 
1327: class KrylovJacobian(Jacobian):
1328:     r'''
1329:     Find a root of a function, using Krylov approximation for inverse Jacobian.
1330: 
1331:     This method is suitable for solving large-scale problems.
1332: 
1333:     Parameters
1334:     ----------
1335:     %(params_basic)s
1336:     rdiff : float, optional
1337:         Relative step size to use in numerical differentiation.
1338:     method : {'lgmres', 'gmres', 'bicgstab', 'cgs', 'minres'} or function
1339:         Krylov method to use to approximate the Jacobian.
1340:         Can be a string, or a function implementing the same interface as
1341:         the iterative solvers in `scipy.sparse.linalg`.
1342: 
1343:         The default is `scipy.sparse.linalg.lgmres`.
1344:     inner_M : LinearOperator or InverseJacobian
1345:         Preconditioner for the inner Krylov iteration.
1346:         Note that you can use also inverse Jacobians as (adaptive)
1347:         preconditioners. For example,
1348: 
1349:         >>> from scipy.optimize.nonlin import BroydenFirst, KrylovJacobian
1350:         >>> from scipy.optimize.nonlin import InverseJacobian
1351:         >>> jac = BroydenFirst()
1352:         >>> kjac = KrylovJacobian(inner_M=InverseJacobian(jac))
1353: 
1354:         If the preconditioner has a method named 'update', it will be called
1355:         as ``update(x, f)`` after each nonlinear step, with ``x`` giving
1356:         the current point, and ``f`` the current function value.
1357:     inner_tol, inner_maxiter, ...
1358:         Parameters to pass on to the \"inner\" Krylov solver.
1359:         See `scipy.sparse.linalg.gmres` for details.
1360:     outer_k : int, optional
1361:         Size of the subspace kept across LGMRES nonlinear iterations.
1362:         See `scipy.sparse.linalg.lgmres` for details.
1363:     %(params_extra)s
1364: 
1365:     See Also
1366:     --------
1367:     scipy.sparse.linalg.gmres
1368:     scipy.sparse.linalg.lgmres
1369: 
1370:     Notes
1371:     -----
1372:     This function implements a Newton-Krylov solver. The basic idea is
1373:     to compute the inverse of the Jacobian with an iterative Krylov
1374:     method. These methods require only evaluating the Jacobian-vector
1375:     products, which are conveniently approximated by a finite difference:
1376: 
1377:     .. math:: J v \approx (f(x + \omega*v/|v|) - f(x)) / \omega
1378: 
1379:     Due to the use of iterative matrix inverses, these methods can
1380:     deal with large nonlinear problems.
1381: 
1382:     Scipy's `scipy.sparse.linalg` module offers a selection of Krylov
1383:     solvers to choose from. The default here is `lgmres`, which is a
1384:     variant of restarted GMRES iteration that reuses some of the
1385:     information obtained in the previous Newton steps to invert
1386:     Jacobians in subsequent steps.
1387: 
1388:     For a review on Newton-Krylov methods, see for example [1]_,
1389:     and for the LGMRES sparse inverse method, see [2]_.
1390: 
1391:     References
1392:     ----------
1393:     .. [1] D.A. Knoll and D.E. Keyes, J. Comp. Phys. 193, 357 (2004).
1394:            :doi:`10.1016/j.jcp.2003.08.010`
1395:     .. [2] A.H. Baker and E.R. Jessup and T. Manteuffel,
1396:            SIAM J. Matrix Anal. Appl. 26, 962 (2005).
1397:            :doi:`10.1137/S0895479803422014`
1398: 
1399:     '''
1400: 
1401:     def __init__(self, rdiff=None, method='lgmres', inner_maxiter=20,
1402:                  inner_M=None, outer_k=10, **kw):
1403:         self.preconditioner = inner_M
1404:         self.rdiff = rdiff
1405:         self.method = dict(
1406:             bicgstab=scipy.sparse.linalg.bicgstab,
1407:             gmres=scipy.sparse.linalg.gmres,
1408:             lgmres=scipy.sparse.linalg.lgmres,
1409:             cgs=scipy.sparse.linalg.cgs,
1410:             minres=scipy.sparse.linalg.minres,
1411:             ).get(method, method)
1412: 
1413:         self.method_kw = dict(maxiter=inner_maxiter, M=self.preconditioner)
1414: 
1415:         if self.method is scipy.sparse.linalg.gmres:
1416:             # Replace GMRES's outer iteration with Newton steps
1417:             self.method_kw['restrt'] = inner_maxiter
1418:             self.method_kw['maxiter'] = 1
1419:         elif self.method is scipy.sparse.linalg.lgmres:
1420:             self.method_kw['outer_k'] = outer_k
1421:             # Replace LGMRES's outer iteration with Newton steps
1422:             self.method_kw['maxiter'] = 1
1423:             # Carry LGMRES's `outer_v` vectors across nonlinear iterations
1424:             self.method_kw.setdefault('outer_v', [])
1425:             self.method_kw.setdefault('prepend_outer_v', True)
1426:             # But don't carry the corresponding Jacobian*v products, in case
1427:             # the Jacobian changes a lot in the nonlinear step
1428:             #
1429:             # XXX: some trust-region inspired ideas might be more efficient...
1430:             #      See eg. Brown & Saad. But needs to be implemented separately
1431:             #      since it's not an inexact Newton method.
1432:             self.method_kw.setdefault('store_outer_Av', False)
1433: 
1434:         for key, value in kw.items():
1435:             if not key.startswith('inner_'):
1436:                 raise ValueError("Unknown parameter %s" % key)
1437:             self.method_kw[key[6:]] = value
1438: 
1439:     def _update_diff_step(self):
1440:         mx = abs(self.x0).max()
1441:         mf = abs(self.f0).max()
1442:         self.omega = self.rdiff * max(1, mx) / max(1, mf)
1443: 
1444:     def matvec(self, v):
1445:         nv = norm(v)
1446:         if nv == 0:
1447:             return 0*v
1448:         sc = self.omega / nv
1449:         r = (self.func(self.x0 + sc*v) - self.f0) / sc
1450:         if not np.all(np.isfinite(r)) and np.all(np.isfinite(v)):
1451:             raise ValueError('Function returned non-finite results')
1452:         return r
1453: 
1454:     def solve(self, rhs, tol=0):
1455:         if 'tol' in self.method_kw:
1456:             sol, info = self.method(self.op, rhs, **self.method_kw)
1457:         else:
1458:             sol, info = self.method(self.op, rhs, tol=tol, **self.method_kw)
1459:         return sol
1460: 
1461:     def update(self, x, f):
1462:         self.x0 = x
1463:         self.f0 = f
1464:         self._update_diff_step()
1465: 
1466:         # Update also the preconditioner, if possible
1467:         if self.preconditioner is not None:
1468:             if hasattr(self.preconditioner, 'update'):
1469:                 self.preconditioner.update(x, f)
1470: 
1471:     def setup(self, x, f, func):
1472:         Jacobian.setup(self, x, f, func)
1473:         self.x0 = x
1474:         self.f0 = f
1475:         self.op = scipy.sparse.linalg.aslinearoperator(self)
1476: 
1477:         if self.rdiff is None:
1478:             self.rdiff = np.finfo(x.dtype).eps ** (1./2)
1479: 
1480:         self._update_diff_step()
1481: 
1482:         # Setup also the preconditioner, if possible
1483:         if self.preconditioner is not None:
1484:             if hasattr(self.preconditioner, 'setup'):
1485:                 self.preconditioner.setup(x, f, func)
1486: 
1487: 
1488: #------------------------------------------------------------------------------
1489: # Wrapper functions
1490: #------------------------------------------------------------------------------
1491: 
1492: def _nonlin_wrapper(name, jac):
1493:     '''
1494:     Construct a solver wrapper with given name and jacobian approx.
1495: 
1496:     It inspects the keyword arguments of ``jac.__init__``, and allows to
1497:     use the same arguments in the wrapper function, in addition to the
1498:     keyword arguments of `nonlin_solve`
1499: 
1500:     '''
1501:     args, varargs, varkw, defaults = _getargspec(jac.__init__)
1502:     kwargs = list(zip(args[-len(defaults):], defaults))
1503:     kw_str = ", ".join(["%s=%r" % (k, v) for k, v in kwargs])
1504:     if kw_str:
1505:         kw_str = ", " + kw_str
1506:     kwkw_str = ", ".join(["%s=%s" % (k, k) for k, v in kwargs])
1507:     if kwkw_str:
1508:         kwkw_str = kwkw_str + ", "
1509: 
1510:     # Construct the wrapper function so that its keyword arguments
1511:     # are visible in pydoc.help etc.
1512:     wrapper = '''
1513: def %(name)s(F, xin, iter=None %(kw)s, verbose=False, maxiter=None,
1514:              f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,
1515:              tol_norm=None, line_search='armijo', callback=None, **kw):
1516:     jac = %(jac)s(%(kwkw)s **kw)
1517:     return nonlin_solve(F, xin, jac, iter, verbose, maxiter,
1518:                         f_tol, f_rtol, x_tol, x_rtol, tol_norm, line_search,
1519:                         callback)
1520: '''
1521: 
1522:     wrapper = wrapper % dict(name=name, kw=kw_str, jac=jac.__name__,
1523:                              kwkw=kwkw_str)
1524:     ns = {}
1525:     ns.update(globals())
1526:     exec_(wrapper, ns)
1527:     func = ns[name]
1528:     func.__doc__ = jac.__doc__
1529:     _set_doc(func)
1530:     return func
1531: 
1532: broyden1 = _nonlin_wrapper('broyden1', BroydenFirst)
1533: broyden2 = _nonlin_wrapper('broyden2', BroydenSecond)
1534: anderson = _nonlin_wrapper('anderson', Anderson)
1535: linearmixing = _nonlin_wrapper('linearmixing', LinearMixing)
1536: diagbroyden = _nonlin_wrapper('diagbroyden', DiagBroyden)
1537: excitingmixing = _nonlin_wrapper('excitingmixing', ExcitingMixing)
1538: newton_krylov = _nonlin_wrapper('newton_krylov', KrylovJacobian)
1539: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

str_173019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 106, (-1)), 'str', "\n\nNonlinear solvers\n-----------------\n\n.. currentmodule:: scipy.optimize\n\nThis is a collection of general-purpose nonlinear multidimensional\nsolvers.  These solvers find *x* for which *F(x) = 0*. Both *x*\nand *F* can be multidimensional.\n\nRoutines\n~~~~~~~~\n\nLarge-scale nonlinear solvers:\n\n.. autosummary::\n\n   newton_krylov\n   anderson\n\nGeneral nonlinear solvers:\n\n.. autosummary::\n\n   broyden1\n   broyden2\n\nSimple iterations:\n\n.. autosummary::\n\n   excitingmixing\n   linearmixing\n   diagbroyden\n\n\nExamples\n~~~~~~~~\n\n**Small problem**\n\n>>> def F(x):\n...    return np.cos(x) + x[::-1] - [1, 2, 3, 4]\n>>> import scipy.optimize\n>>> x = scipy.optimize.broyden1(F, [1,1,1,1], f_tol=1e-14)\n>>> x\narray([ 4.04674914,  3.91158389,  2.71791677,  1.61756251])\n>>> np.cos(x) + x[::-1]\narray([ 1.,  2.,  3.,  4.])\n\n\n**Large problem**\n\nSuppose that we needed to solve the following integrodifferential\nequation on the square :math:`[0,1]\\times[0,1]`:\n\n.. math::\n\n   \\nabla^2 P = 10 \\left(\\int_0^1\\int_0^1\\cosh(P)\\,dx\\,dy\\right)^2\n\nwith :math:`P(x,1) = 1` and :math:`P=0` elsewhere on the boundary of\nthe square.\n\nThe solution can be found using the `newton_krylov` solver:\n\n.. plot::\n\n   import numpy as np\n   from scipy.optimize import newton_krylov\n   from numpy import cosh, zeros_like, mgrid, zeros\n\n   # parameters\n   nx, ny = 75, 75\n   hx, hy = 1./(nx-1), 1./(ny-1)\n\n   P_left, P_right = 0, 0\n   P_top, P_bottom = 1, 0\n\n   def residual(P):\n       d2x = zeros_like(P)\n       d2y = zeros_like(P)\n\n       d2x[1:-1] = (P[2:]   - 2*P[1:-1] + P[:-2]) / hx/hx\n       d2x[0]    = (P[1]    - 2*P[0]    + P_left)/hx/hx\n       d2x[-1]   = (P_right - 2*P[-1]   + P[-2])/hx/hx\n\n       d2y[:,1:-1] = (P[:,2:] - 2*P[:,1:-1] + P[:,:-2])/hy/hy\n       d2y[:,0]    = (P[:,1]  - 2*P[:,0]    + P_bottom)/hy/hy\n       d2y[:,-1]   = (P_top   - 2*P[:,-1]   + P[:,-2])/hy/hy\n\n       return d2x + d2y - 10*cosh(P).mean()**2\n\n   # solve\n   guess = zeros((nx, ny), float)\n   sol = newton_krylov(residual, guess, method='lgmres', verbose=1)\n   print('Residual: %g' % abs(residual(sol)).max())\n\n   # visualize\n   import matplotlib.pyplot as plt\n   x, y = mgrid[0:1:(nx*1j), 0:1:(ny*1j)]\n   plt.pcolor(x, y, sol)\n   plt.colorbar()\n   plt.show()\n\n")
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 112, 0))

# 'import sys' statement (line 112)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 112, 0), 'sys', sys, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 113, 0))

# 'import numpy' statement (line 113)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_173020 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 113, 0), 'numpy')

if (type(import_173020) is not StypyTypeError):

    if (import_173020 != 'pyd_module'):
        __import__(import_173020)
        sys_modules_173021 = sys.modules[import_173020]
        import_module(stypy.reporting.localization.Localization(__file__, 113, 0), 'np', sys_modules_173021.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 113, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 113)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 0), 'numpy', import_173020)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 114, 0))

# 'from scipy._lib.six import callable, exec_, xrange' statement (line 114)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_173022 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 114, 0), 'scipy._lib.six')

if (type(import_173022) is not StypyTypeError):

    if (import_173022 != 'pyd_module'):
        __import__(import_173022)
        sys_modules_173023 = sys.modules[import_173022]
        import_from_module(stypy.reporting.localization.Localization(__file__, 114, 0), 'scipy._lib.six', sys_modules_173023.module_type_store, module_type_store, ['callable', 'exec_', 'xrange'])
        nest_module(stypy.reporting.localization.Localization(__file__, 114, 0), __file__, sys_modules_173023, sys_modules_173023.module_type_store, module_type_store)
    else:
        from scipy._lib.six import callable, exec_, xrange

        import_from_module(stypy.reporting.localization.Localization(__file__, 114, 0), 'scipy._lib.six', None, module_type_store, ['callable', 'exec_', 'xrange'], [callable, exec_, xrange])

else:
    # Assigning a type to the variable 'scipy._lib.six' (line 114)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 114, 0), 'scipy._lib.six', import_173022)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 115, 0))

# 'from scipy.linalg import norm, solve, inv, qr, svd, LinAlgError' statement (line 115)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_173024 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 115, 0), 'scipy.linalg')

if (type(import_173024) is not StypyTypeError):

    if (import_173024 != 'pyd_module'):
        __import__(import_173024)
        sys_modules_173025 = sys.modules[import_173024]
        import_from_module(stypy.reporting.localization.Localization(__file__, 115, 0), 'scipy.linalg', sys_modules_173025.module_type_store, module_type_store, ['norm', 'solve', 'inv', 'qr', 'svd', 'LinAlgError'])
        nest_module(stypy.reporting.localization.Localization(__file__, 115, 0), __file__, sys_modules_173025, sys_modules_173025.module_type_store, module_type_store)
    else:
        from scipy.linalg import norm, solve, inv, qr, svd, LinAlgError

        import_from_module(stypy.reporting.localization.Localization(__file__, 115, 0), 'scipy.linalg', None, module_type_store, ['norm', 'solve', 'inv', 'qr', 'svd', 'LinAlgError'], [norm, solve, inv, qr, svd, LinAlgError])

else:
    # Assigning a type to the variable 'scipy.linalg' (line 115)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 115, 0), 'scipy.linalg', import_173024)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 116, 0))

# 'from numpy import asarray, dot, vdot' statement (line 116)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_173026 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 116, 0), 'numpy')

if (type(import_173026) is not StypyTypeError):

    if (import_173026 != 'pyd_module'):
        __import__(import_173026)
        sys_modules_173027 = sys.modules[import_173026]
        import_from_module(stypy.reporting.localization.Localization(__file__, 116, 0), 'numpy', sys_modules_173027.module_type_store, module_type_store, ['asarray', 'dot', 'vdot'])
        nest_module(stypy.reporting.localization.Localization(__file__, 116, 0), __file__, sys_modules_173027, sys_modules_173027.module_type_store, module_type_store)
    else:
        from numpy import asarray, dot, vdot

        import_from_module(stypy.reporting.localization.Localization(__file__, 116, 0), 'numpy', None, module_type_store, ['asarray', 'dot', 'vdot'], [asarray, dot, vdot])

else:
    # Assigning a type to the variable 'numpy' (line 116)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 116, 0), 'numpy', import_173026)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 117, 0))

# 'import scipy.sparse.linalg' statement (line 117)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_173028 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 117, 0), 'scipy.sparse.linalg')

if (type(import_173028) is not StypyTypeError):

    if (import_173028 != 'pyd_module'):
        __import__(import_173028)
        sys_modules_173029 = sys.modules[import_173028]
        import_module(stypy.reporting.localization.Localization(__file__, 117, 0), 'scipy.sparse.linalg', sys_modules_173029.module_type_store, module_type_store)
    else:
        import scipy.sparse.linalg

        import_module(stypy.reporting.localization.Localization(__file__, 117, 0), 'scipy.sparse.linalg', scipy.sparse.linalg, module_type_store)

else:
    # Assigning a type to the variable 'scipy.sparse.linalg' (line 117)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 117, 0), 'scipy.sparse.linalg', import_173028)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 118, 0))

# 'import scipy.sparse' statement (line 118)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_173030 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 118, 0), 'scipy.sparse')

if (type(import_173030) is not StypyTypeError):

    if (import_173030 != 'pyd_module'):
        __import__(import_173030)
        sys_modules_173031 = sys.modules[import_173030]
        import_module(stypy.reporting.localization.Localization(__file__, 118, 0), 'scipy.sparse', sys_modules_173031.module_type_store, module_type_store)
    else:
        import scipy.sparse

        import_module(stypy.reporting.localization.Localization(__file__, 118, 0), 'scipy.sparse', scipy.sparse, module_type_store)

else:
    # Assigning a type to the variable 'scipy.sparse' (line 118)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 118, 0), 'scipy.sparse', import_173030)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 119, 0))

# 'from scipy.linalg import get_blas_funcs' statement (line 119)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_173032 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 119, 0), 'scipy.linalg')

if (type(import_173032) is not StypyTypeError):

    if (import_173032 != 'pyd_module'):
        __import__(import_173032)
        sys_modules_173033 = sys.modules[import_173032]
        import_from_module(stypy.reporting.localization.Localization(__file__, 119, 0), 'scipy.linalg', sys_modules_173033.module_type_store, module_type_store, ['get_blas_funcs'])
        nest_module(stypy.reporting.localization.Localization(__file__, 119, 0), __file__, sys_modules_173033, sys_modules_173033.module_type_store, module_type_store)
    else:
        from scipy.linalg import get_blas_funcs

        import_from_module(stypy.reporting.localization.Localization(__file__, 119, 0), 'scipy.linalg', None, module_type_store, ['get_blas_funcs'], [get_blas_funcs])

else:
    # Assigning a type to the variable 'scipy.linalg' (line 119)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 119, 0), 'scipy.linalg', import_173032)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 120, 0))

# 'import inspect' statement (line 120)
import inspect

import_module(stypy.reporting.localization.Localization(__file__, 120, 0), 'inspect', inspect, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 121, 0))

# 'from scipy._lib._util import _getargspec' statement (line 121)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_173034 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 121, 0), 'scipy._lib._util')

if (type(import_173034) is not StypyTypeError):

    if (import_173034 != 'pyd_module'):
        __import__(import_173034)
        sys_modules_173035 = sys.modules[import_173034]
        import_from_module(stypy.reporting.localization.Localization(__file__, 121, 0), 'scipy._lib._util', sys_modules_173035.module_type_store, module_type_store, ['getargspec_no_self'])
        nest_module(stypy.reporting.localization.Localization(__file__, 121, 0), __file__, sys_modules_173035, sys_modules_173035.module_type_store, module_type_store)
    else:
        from scipy._lib._util import getargspec_no_self as _getargspec

        import_from_module(stypy.reporting.localization.Localization(__file__, 121, 0), 'scipy._lib._util', None, module_type_store, ['getargspec_no_self'], [_getargspec])

else:
    # Assigning a type to the variable 'scipy._lib._util' (line 121)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 121, 0), 'scipy._lib._util', import_173034)

# Adding an alias
module_type_store.add_alias('_getargspec', 'getargspec_no_self')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 122, 0))

# 'from scipy.optimize.linesearch import scalar_search_wolfe1, scalar_search_armijo' statement (line 122)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_173036 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 122, 0), 'scipy.optimize.linesearch')

if (type(import_173036) is not StypyTypeError):

    if (import_173036 != 'pyd_module'):
        __import__(import_173036)
        sys_modules_173037 = sys.modules[import_173036]
        import_from_module(stypy.reporting.localization.Localization(__file__, 122, 0), 'scipy.optimize.linesearch', sys_modules_173037.module_type_store, module_type_store, ['scalar_search_wolfe1', 'scalar_search_armijo'])
        nest_module(stypy.reporting.localization.Localization(__file__, 122, 0), __file__, sys_modules_173037, sys_modules_173037.module_type_store, module_type_store)
    else:
        from scipy.optimize.linesearch import scalar_search_wolfe1, scalar_search_armijo

        import_from_module(stypy.reporting.localization.Localization(__file__, 122, 0), 'scipy.optimize.linesearch', None, module_type_store, ['scalar_search_wolfe1', 'scalar_search_armijo'], [scalar_search_wolfe1, scalar_search_armijo])

else:
    # Assigning a type to the variable 'scipy.optimize.linesearch' (line 122)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 122, 0), 'scipy.optimize.linesearch', import_173036)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')


# Assigning a List to a Name (line 125):

# Assigning a List to a Name (line 125):
__all__ = ['broyden1', 'broyden2', 'anderson', 'linearmixing', 'diagbroyden', 'excitingmixing', 'newton_krylov']
module_type_store.set_exportable_members(['broyden1', 'broyden2', 'anderson', 'linearmixing', 'diagbroyden', 'excitingmixing', 'newton_krylov'])

# Obtaining an instance of the builtin type 'list' (line 125)
list_173038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 125, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 125)
# Adding element type (line 125)
str_173039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, 4), 'str', 'broyden1')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 125, 10), list_173038, str_173039)
# Adding element type (line 125)
str_173040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, 16), 'str', 'broyden2')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 125, 10), list_173038, str_173040)
# Adding element type (line 125)
str_173041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, 28), 'str', 'anderson')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 125, 10), list_173038, str_173041)
# Adding element type (line 125)
str_173042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, 40), 'str', 'linearmixing')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 125, 10), list_173038, str_173042)
# Adding element type (line 125)
str_173043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 127, 4), 'str', 'diagbroyden')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 125, 10), list_173038, str_173043)
# Adding element type (line 125)
str_173044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 127, 19), 'str', 'excitingmixing')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 125, 10), list_173038, str_173044)
# Adding element type (line 125)
str_173045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 127, 37), 'str', 'newton_krylov')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 125, 10), list_173038, str_173045)

# Assigning a type to the variable '__all__' (line 125)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 125, 0), '__all__', list_173038)
# Declaration of the 'NoConvergence' class
# Getting the type of 'Exception' (line 134)
Exception_173046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 20), 'Exception')

class NoConvergence(Exception_173046, ):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 134, 0, False)
        # Assigning a type to the variable 'self' (line 135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 135, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NoConvergence.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'NoConvergence' (line 134)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 134, 0), 'NoConvergence', NoConvergence)

@norecursion
def maxnorm(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'maxnorm'
    module_type_store = module_type_store.open_function_context('maxnorm', 138, 0, False)
    
    # Passed parameters checking function
    maxnorm.stypy_localization = localization
    maxnorm.stypy_type_of_self = None
    maxnorm.stypy_type_store = module_type_store
    maxnorm.stypy_function_name = 'maxnorm'
    maxnorm.stypy_param_names_list = ['x']
    maxnorm.stypy_varargs_param_name = None
    maxnorm.stypy_kwargs_param_name = None
    maxnorm.stypy_call_defaults = defaults
    maxnorm.stypy_call_varargs = varargs
    maxnorm.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'maxnorm', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'maxnorm', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'maxnorm(...)' code ##################

    
    # Call to max(...): (line 139)
    # Processing the call keyword arguments (line 139)
    kwargs_173053 = {}
    
    # Call to absolute(...): (line 139)
    # Processing the call arguments (line 139)
    # Getting the type of 'x' (line 139)
    x_173049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 23), 'x', False)
    # Processing the call keyword arguments (line 139)
    kwargs_173050 = {}
    # Getting the type of 'np' (line 139)
    np_173047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 11), 'np', False)
    # Obtaining the member 'absolute' of a type (line 139)
    absolute_173048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 139, 11), np_173047, 'absolute')
    # Calling absolute(args, kwargs) (line 139)
    absolute_call_result_173051 = invoke(stypy.reporting.localization.Localization(__file__, 139, 11), absolute_173048, *[x_173049], **kwargs_173050)
    
    # Obtaining the member 'max' of a type (line 139)
    max_173052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 139, 11), absolute_call_result_173051, 'max')
    # Calling max(args, kwargs) (line 139)
    max_call_result_173054 = invoke(stypy.reporting.localization.Localization(__file__, 139, 11), max_173052, *[], **kwargs_173053)
    
    # Assigning a type to the variable 'stypy_return_type' (line 139)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 139, 4), 'stypy_return_type', max_call_result_173054)
    
    # ################# End of 'maxnorm(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'maxnorm' in the type store
    # Getting the type of 'stypy_return_type' (line 138)
    stypy_return_type_173055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_173055)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'maxnorm'
    return stypy_return_type_173055

# Assigning a type to the variable 'maxnorm' (line 138)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 138, 0), 'maxnorm', maxnorm)

@norecursion
def _as_inexact(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_as_inexact'
    module_type_store = module_type_store.open_function_context('_as_inexact', 142, 0, False)
    
    # Passed parameters checking function
    _as_inexact.stypy_localization = localization
    _as_inexact.stypy_type_of_self = None
    _as_inexact.stypy_type_store = module_type_store
    _as_inexact.stypy_function_name = '_as_inexact'
    _as_inexact.stypy_param_names_list = ['x']
    _as_inexact.stypy_varargs_param_name = None
    _as_inexact.stypy_kwargs_param_name = None
    _as_inexact.stypy_call_defaults = defaults
    _as_inexact.stypy_call_varargs = varargs
    _as_inexact.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_as_inexact', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_as_inexact', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_as_inexact(...)' code ##################

    str_173056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 143, 4), 'str', 'Return `x` as an array, of either floats or complex floats')
    
    # Assigning a Call to a Name (line 144):
    
    # Assigning a Call to a Name (line 144):
    
    # Call to asarray(...): (line 144)
    # Processing the call arguments (line 144)
    # Getting the type of 'x' (line 144)
    x_173058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 16), 'x', False)
    # Processing the call keyword arguments (line 144)
    kwargs_173059 = {}
    # Getting the type of 'asarray' (line 144)
    asarray_173057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 144)
    asarray_call_result_173060 = invoke(stypy.reporting.localization.Localization(__file__, 144, 8), asarray_173057, *[x_173058], **kwargs_173059)
    
    # Assigning a type to the variable 'x' (line 144)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 144, 4), 'x', asarray_call_result_173060)
    
    
    
    # Call to issubdtype(...): (line 145)
    # Processing the call arguments (line 145)
    # Getting the type of 'x' (line 145)
    x_173063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 25), 'x', False)
    # Obtaining the member 'dtype' of a type (line 145)
    dtype_173064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 145, 25), x_173063, 'dtype')
    # Getting the type of 'np' (line 145)
    np_173065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 34), 'np', False)
    # Obtaining the member 'inexact' of a type (line 145)
    inexact_173066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 145, 34), np_173065, 'inexact')
    # Processing the call keyword arguments (line 145)
    kwargs_173067 = {}
    # Getting the type of 'np' (line 145)
    np_173061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 11), 'np', False)
    # Obtaining the member 'issubdtype' of a type (line 145)
    issubdtype_173062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 145, 11), np_173061, 'issubdtype')
    # Calling issubdtype(args, kwargs) (line 145)
    issubdtype_call_result_173068 = invoke(stypy.reporting.localization.Localization(__file__, 145, 11), issubdtype_173062, *[dtype_173064, inexact_173066], **kwargs_173067)
    
    # Applying the 'not' unary operator (line 145)
    result_not__173069 = python_operator(stypy.reporting.localization.Localization(__file__, 145, 7), 'not', issubdtype_call_result_173068)
    
    # Testing the type of an if condition (line 145)
    if_condition_173070 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 145, 4), result_not__173069)
    # Assigning a type to the variable 'if_condition_173070' (line 145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 145, 4), 'if_condition_173070', if_condition_173070)
    # SSA begins for if statement (line 145)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to asarray(...): (line 146)
    # Processing the call arguments (line 146)
    # Getting the type of 'x' (line 146)
    x_173072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 23), 'x', False)
    # Processing the call keyword arguments (line 146)
    # Getting the type of 'np' (line 146)
    np_173073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 32), 'np', False)
    # Obtaining the member 'float_' of a type (line 146)
    float__173074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 146, 32), np_173073, 'float_')
    keyword_173075 = float__173074
    kwargs_173076 = {'dtype': keyword_173075}
    # Getting the type of 'asarray' (line 146)
    asarray_173071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 15), 'asarray', False)
    # Calling asarray(args, kwargs) (line 146)
    asarray_call_result_173077 = invoke(stypy.reporting.localization.Localization(__file__, 146, 15), asarray_173071, *[x_173072], **kwargs_173076)
    
    # Assigning a type to the variable 'stypy_return_type' (line 146)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 146, 8), 'stypy_return_type', asarray_call_result_173077)
    # SSA join for if statement (line 145)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'x' (line 147)
    x_173078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 11), 'x')
    # Assigning a type to the variable 'stypy_return_type' (line 147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 147, 4), 'stypy_return_type', x_173078)
    
    # ################# End of '_as_inexact(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_as_inexact' in the type store
    # Getting the type of 'stypy_return_type' (line 142)
    stypy_return_type_173079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_173079)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_as_inexact'
    return stypy_return_type_173079

# Assigning a type to the variable '_as_inexact' (line 142)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 142, 0), '_as_inexact', _as_inexact)

@norecursion
def _array_like(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_array_like'
    module_type_store = module_type_store.open_function_context('_array_like', 150, 0, False)
    
    # Passed parameters checking function
    _array_like.stypy_localization = localization
    _array_like.stypy_type_of_self = None
    _array_like.stypy_type_store = module_type_store
    _array_like.stypy_function_name = '_array_like'
    _array_like.stypy_param_names_list = ['x', 'x0']
    _array_like.stypy_varargs_param_name = None
    _array_like.stypy_kwargs_param_name = None
    _array_like.stypy_call_defaults = defaults
    _array_like.stypy_call_varargs = varargs
    _array_like.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_array_like', ['x', 'x0'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_array_like', localization, ['x', 'x0'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_array_like(...)' code ##################

    str_173080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, 4), 'str', 'Return ndarray `x` as same array subclass and shape as `x0`')
    
    # Assigning a Call to a Name (line 152):
    
    # Assigning a Call to a Name (line 152):
    
    # Call to reshape(...): (line 152)
    # Processing the call arguments (line 152)
    # Getting the type of 'x' (line 152)
    x_173083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 19), 'x', False)
    
    # Call to shape(...): (line 152)
    # Processing the call arguments (line 152)
    # Getting the type of 'x0' (line 152)
    x0_173086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 31), 'x0', False)
    # Processing the call keyword arguments (line 152)
    kwargs_173087 = {}
    # Getting the type of 'np' (line 152)
    np_173084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 22), 'np', False)
    # Obtaining the member 'shape' of a type (line 152)
    shape_173085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 22), np_173084, 'shape')
    # Calling shape(args, kwargs) (line 152)
    shape_call_result_173088 = invoke(stypy.reporting.localization.Localization(__file__, 152, 22), shape_173085, *[x0_173086], **kwargs_173087)
    
    # Processing the call keyword arguments (line 152)
    kwargs_173089 = {}
    # Getting the type of 'np' (line 152)
    np_173081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 8), 'np', False)
    # Obtaining the member 'reshape' of a type (line 152)
    reshape_173082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 8), np_173081, 'reshape')
    # Calling reshape(args, kwargs) (line 152)
    reshape_call_result_173090 = invoke(stypy.reporting.localization.Localization(__file__, 152, 8), reshape_173082, *[x_173083, shape_call_result_173088], **kwargs_173089)
    
    # Assigning a type to the variable 'x' (line 152)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 152, 4), 'x', reshape_call_result_173090)
    
    # Assigning a Call to a Name (line 153):
    
    # Assigning a Call to a Name (line 153):
    
    # Call to getattr(...): (line 153)
    # Processing the call arguments (line 153)
    # Getting the type of 'x0' (line 153)
    x0_173092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 19), 'x0', False)
    str_173093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 153, 23), 'str', '__array_wrap__')
    # Getting the type of 'x' (line 153)
    x_173094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 41), 'x', False)
    # Obtaining the member '__array_wrap__' of a type (line 153)
    array_wrap___173095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 41), x_173094, '__array_wrap__')
    # Processing the call keyword arguments (line 153)
    kwargs_173096 = {}
    # Getting the type of 'getattr' (line 153)
    getattr_173091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 11), 'getattr', False)
    # Calling getattr(args, kwargs) (line 153)
    getattr_call_result_173097 = invoke(stypy.reporting.localization.Localization(__file__, 153, 11), getattr_173091, *[x0_173092, str_173093, array_wrap___173095], **kwargs_173096)
    
    # Assigning a type to the variable 'wrap' (line 153)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 153, 4), 'wrap', getattr_call_result_173097)
    
    # Call to wrap(...): (line 154)
    # Processing the call arguments (line 154)
    # Getting the type of 'x' (line 154)
    x_173099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 16), 'x', False)
    # Processing the call keyword arguments (line 154)
    kwargs_173100 = {}
    # Getting the type of 'wrap' (line 154)
    wrap_173098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 11), 'wrap', False)
    # Calling wrap(args, kwargs) (line 154)
    wrap_call_result_173101 = invoke(stypy.reporting.localization.Localization(__file__, 154, 11), wrap_173098, *[x_173099], **kwargs_173100)
    
    # Assigning a type to the variable 'stypy_return_type' (line 154)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 154, 4), 'stypy_return_type', wrap_call_result_173101)
    
    # ################# End of '_array_like(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_array_like' in the type store
    # Getting the type of 'stypy_return_type' (line 150)
    stypy_return_type_173102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_173102)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_array_like'
    return stypy_return_type_173102

# Assigning a type to the variable '_array_like' (line 150)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 150, 0), '_array_like', _array_like)

@norecursion
def _safe_norm(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_safe_norm'
    module_type_store = module_type_store.open_function_context('_safe_norm', 157, 0, False)
    
    # Passed parameters checking function
    _safe_norm.stypy_localization = localization
    _safe_norm.stypy_type_of_self = None
    _safe_norm.stypy_type_store = module_type_store
    _safe_norm.stypy_function_name = '_safe_norm'
    _safe_norm.stypy_param_names_list = ['v']
    _safe_norm.stypy_varargs_param_name = None
    _safe_norm.stypy_kwargs_param_name = None
    _safe_norm.stypy_call_defaults = defaults
    _safe_norm.stypy_call_varargs = varargs
    _safe_norm.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_safe_norm', ['v'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_safe_norm', localization, ['v'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_safe_norm(...)' code ##################

    
    
    
    # Call to all(...): (line 158)
    # Processing the call keyword arguments (line 158)
    kwargs_173109 = {}
    
    # Call to isfinite(...): (line 158)
    # Processing the call arguments (line 158)
    # Getting the type of 'v' (line 158)
    v_173105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 23), 'v', False)
    # Processing the call keyword arguments (line 158)
    kwargs_173106 = {}
    # Getting the type of 'np' (line 158)
    np_173103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 11), 'np', False)
    # Obtaining the member 'isfinite' of a type (line 158)
    isfinite_173104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 11), np_173103, 'isfinite')
    # Calling isfinite(args, kwargs) (line 158)
    isfinite_call_result_173107 = invoke(stypy.reporting.localization.Localization(__file__, 158, 11), isfinite_173104, *[v_173105], **kwargs_173106)
    
    # Obtaining the member 'all' of a type (line 158)
    all_173108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 11), isfinite_call_result_173107, 'all')
    # Calling all(args, kwargs) (line 158)
    all_call_result_173110 = invoke(stypy.reporting.localization.Localization(__file__, 158, 11), all_173108, *[], **kwargs_173109)
    
    # Applying the 'not' unary operator (line 158)
    result_not__173111 = python_operator(stypy.reporting.localization.Localization(__file__, 158, 7), 'not', all_call_result_173110)
    
    # Testing the type of an if condition (line 158)
    if_condition_173112 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 158, 4), result_not__173111)
    # Assigning a type to the variable 'if_condition_173112' (line 158)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 4), 'if_condition_173112', if_condition_173112)
    # SSA begins for if statement (line 158)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to array(...): (line 159)
    # Processing the call arguments (line 159)
    # Getting the type of 'np' (line 159)
    np_173115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 24), 'np', False)
    # Obtaining the member 'inf' of a type (line 159)
    inf_173116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 24), np_173115, 'inf')
    # Processing the call keyword arguments (line 159)
    kwargs_173117 = {}
    # Getting the type of 'np' (line 159)
    np_173113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 15), 'np', False)
    # Obtaining the member 'array' of a type (line 159)
    array_173114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 15), np_173113, 'array')
    # Calling array(args, kwargs) (line 159)
    array_call_result_173118 = invoke(stypy.reporting.localization.Localization(__file__, 159, 15), array_173114, *[inf_173116], **kwargs_173117)
    
    # Assigning a type to the variable 'stypy_return_type' (line 159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 8), 'stypy_return_type', array_call_result_173118)
    # SSA join for if statement (line 158)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to norm(...): (line 160)
    # Processing the call arguments (line 160)
    # Getting the type of 'v' (line 160)
    v_173120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 16), 'v', False)
    # Processing the call keyword arguments (line 160)
    kwargs_173121 = {}
    # Getting the type of 'norm' (line 160)
    norm_173119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 11), 'norm', False)
    # Calling norm(args, kwargs) (line 160)
    norm_call_result_173122 = invoke(stypy.reporting.localization.Localization(__file__, 160, 11), norm_173119, *[v_173120], **kwargs_173121)
    
    # Assigning a type to the variable 'stypy_return_type' (line 160)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 160, 4), 'stypy_return_type', norm_call_result_173122)
    
    # ################# End of '_safe_norm(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_safe_norm' in the type store
    # Getting the type of 'stypy_return_type' (line 157)
    stypy_return_type_173123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_173123)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_safe_norm'
    return stypy_return_type_173123

# Assigning a type to the variable '_safe_norm' (line 157)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 157, 0), '_safe_norm', _safe_norm)

# Assigning a Call to a Name (line 166):

# Assigning a Call to a Name (line 166):

# Call to dict(...): (line 166)
# Processing the call keyword arguments (line 166)

# Call to strip(...): (line 173)
# Processing the call keyword arguments (line 173)
kwargs_173127 = {}
str_173125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 173, (-1)), 'str', '\n    F : function(x) -> f\n        Function whose root to find; should take and return an array-like\n        object.\n    xin : array_like\n        Initial guess for the solution\n    ')
# Obtaining the member 'strip' of a type (line 173)
strip_173126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, (-1)), str_173125, 'strip')
# Calling strip(args, kwargs) (line 173)
strip_call_result_173128 = invoke(stypy.reporting.localization.Localization(__file__, 173, (-1)), strip_173126, *[], **kwargs_173127)

keyword_173129 = strip_call_result_173128

# Call to strip(...): (line 214)
# Processing the call keyword arguments (line 214)
kwargs_173132 = {}
str_173130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 214, (-1)), 'str', "\n    iter : int, optional\n        Number of iterations to make. If omitted (default), make as many\n        as required to meet tolerances.\n    verbose : bool, optional\n        Print status to stdout on every iteration.\n    maxiter : int, optional\n        Maximum number of iterations to make. If more are needed to\n        meet convergence, `NoConvergence` is raised.\n    f_tol : float, optional\n        Absolute tolerance (in max-norm) for the residual.\n        If omitted, default is 6e-6.\n    f_rtol : float, optional\n        Relative tolerance for the residual. If omitted, not used.\n    x_tol : float, optional\n        Absolute minimum step size, as determined from the Jacobian\n        approximation. If the step size is smaller than this, optimization\n        is terminated as successful. If omitted, not used.\n    x_rtol : float, optional\n        Relative minimum step size. If omitted, not used.\n    tol_norm : function(vector) -> scalar, optional\n        Norm to use in convergence check. Default is the maximum norm.\n    line_search : {None, 'armijo' (default), 'wolfe'}, optional\n        Which type of a line search to use to determine the step size in the\n        direction given by the Jacobian approximation. Defaults to 'armijo'.\n    callback : function, optional\n        Optional callback function. It is called on every iteration as\n        ``callback(x, f)`` where `x` is the current solution and `f`\n        the corresponding residual.\n\n    Returns\n    -------\n    sol : ndarray\n        An array (of similar array type as `x0`) containing the final solution.\n\n    Raises\n    ------\n    NoConvergence\n        When a solution was not found.\n\n    ")
# Obtaining the member 'strip' of a type (line 214)
strip_173131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, (-1)), str_173130, 'strip')
# Calling strip(args, kwargs) (line 214)
strip_call_result_173133 = invoke(stypy.reporting.localization.Localization(__file__, 214, (-1)), strip_173131, *[], **kwargs_173132)

keyword_173134 = strip_call_result_173133
kwargs_173135 = {'params_extra': keyword_173134, 'params_basic': keyword_173129}
# Getting the type of 'dict' (line 166)
dict_173124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 13), 'dict', False)
# Calling dict(args, kwargs) (line 166)
dict_call_result_173136 = invoke(stypy.reporting.localization.Localization(__file__, 166, 13), dict_173124, *[], **kwargs_173135)

# Assigning a type to the variable '_doc_parts' (line 166)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 166, 0), '_doc_parts', dict_call_result_173136)

@norecursion
def _set_doc(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_set_doc'
    module_type_store = module_type_store.open_function_context('_set_doc', 218, 0, False)
    
    # Passed parameters checking function
    _set_doc.stypy_localization = localization
    _set_doc.stypy_type_of_self = None
    _set_doc.stypy_type_store = module_type_store
    _set_doc.stypy_function_name = '_set_doc'
    _set_doc.stypy_param_names_list = ['obj']
    _set_doc.stypy_varargs_param_name = None
    _set_doc.stypy_kwargs_param_name = None
    _set_doc.stypy_call_defaults = defaults
    _set_doc.stypy_call_varargs = varargs
    _set_doc.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_set_doc', ['obj'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_set_doc', localization, ['obj'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_set_doc(...)' code ##################

    
    # Getting the type of 'obj' (line 219)
    obj_173137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 7), 'obj')
    # Obtaining the member '__doc__' of a type (line 219)
    doc___173138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 7), obj_173137, '__doc__')
    # Testing the type of an if condition (line 219)
    if_condition_173139 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 219, 4), doc___173138)
    # Assigning a type to the variable 'if_condition_173139' (line 219)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 219, 4), 'if_condition_173139', if_condition_173139)
    # SSA begins for if statement (line 219)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Attribute (line 220):
    
    # Assigning a BinOp to a Attribute (line 220):
    # Getting the type of 'obj' (line 220)
    obj_173140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 22), 'obj')
    # Obtaining the member '__doc__' of a type (line 220)
    doc___173141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 220, 22), obj_173140, '__doc__')
    # Getting the type of '_doc_parts' (line 220)
    _doc_parts_173142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 36), '_doc_parts')
    # Applying the binary operator '%' (line 220)
    result_mod_173143 = python_operator(stypy.reporting.localization.Localization(__file__, 220, 22), '%', doc___173141, _doc_parts_173142)
    
    # Getting the type of 'obj' (line 220)
    obj_173144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 8), 'obj')
    # Setting the type of the member '__doc__' of a type (line 220)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 220, 8), obj_173144, '__doc__', result_mod_173143)
    # SSA join for if statement (line 219)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_set_doc(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_set_doc' in the type store
    # Getting the type of 'stypy_return_type' (line 218)
    stypy_return_type_173145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_173145)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_set_doc'
    return stypy_return_type_173145

# Assigning a type to the variable '_set_doc' (line 218)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 218, 0), '_set_doc', _set_doc)

@norecursion
def nonlin_solve(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_173146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 223, 33), 'str', 'krylov')
    # Getting the type of 'None' (line 223)
    None_173147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 48), 'None')
    # Getting the type of 'False' (line 223)
    False_173148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 62), 'False')
    # Getting the type of 'None' (line 224)
    None_173149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 25), 'None')
    # Getting the type of 'None' (line 224)
    None_173150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 37), 'None')
    # Getting the type of 'None' (line 224)
    None_173151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 50), 'None')
    # Getting the type of 'None' (line 224)
    None_173152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 62), 'None')
    # Getting the type of 'None' (line 224)
    None_173153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 75), 'None')
    # Getting the type of 'None' (line 225)
    None_173154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 26), 'None')
    str_173155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 44), 'str', 'armijo')
    # Getting the type of 'None' (line 225)
    None_173156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 63), 'None')
    # Getting the type of 'False' (line 226)
    False_173157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 29), 'False')
    # Getting the type of 'True' (line 226)
    True_173158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 52), 'True')
    defaults = [str_173146, None_173147, False_173148, None_173149, None_173150, None_173151, None_173152, None_173153, None_173154, str_173155, None_173156, False_173157, True_173158]
    # Create a new context for function 'nonlin_solve'
    module_type_store = module_type_store.open_function_context('nonlin_solve', 223, 0, False)
    
    # Passed parameters checking function
    nonlin_solve.stypy_localization = localization
    nonlin_solve.stypy_type_of_self = None
    nonlin_solve.stypy_type_store = module_type_store
    nonlin_solve.stypy_function_name = 'nonlin_solve'
    nonlin_solve.stypy_param_names_list = ['F', 'x0', 'jacobian', 'iter', 'verbose', 'maxiter', 'f_tol', 'f_rtol', 'x_tol', 'x_rtol', 'tol_norm', 'line_search', 'callback', 'full_output', 'raise_exception']
    nonlin_solve.stypy_varargs_param_name = None
    nonlin_solve.stypy_kwargs_param_name = None
    nonlin_solve.stypy_call_defaults = defaults
    nonlin_solve.stypy_call_varargs = varargs
    nonlin_solve.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'nonlin_solve', ['F', 'x0', 'jacobian', 'iter', 'verbose', 'maxiter', 'f_tol', 'f_rtol', 'x_tol', 'x_rtol', 'tol_norm', 'line_search', 'callback', 'full_output', 'raise_exception'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'nonlin_solve', localization, ['F', 'x0', 'jacobian', 'iter', 'verbose', 'maxiter', 'f_tol', 'f_rtol', 'x_tol', 'x_rtol', 'tol_norm', 'line_search', 'callback', 'full_output', 'raise_exception'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'nonlin_solve(...)' code ##################

    str_173159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 265, (-1)), 'str', '\n    Find a root of a function, in a way suitable for large-scale problems.\n\n    Parameters\n    ----------\n    %(params_basic)s\n    jacobian : Jacobian\n        A Jacobian approximation: `Jacobian` object or something that\n        `asjacobian` can transform to one. Alternatively, a string specifying\n        which of the builtin Jacobian approximations to use:\n\n            krylov, broyden1, broyden2, anderson\n            diagbroyden, linearmixing, excitingmixing\n\n    %(params_extra)s\n    full_output : bool\n        If true, returns a dictionary `info` containing convergence\n        information.\n    raise_exception : bool\n        If True, a `NoConvergence` exception is raise if no solution is found.\n\n    See Also\n    --------\n    asjacobian, Jacobian\n\n    Notes\n    -----\n    This algorithm implements the inexact Newton method, with\n    backtracking or full line searches. Several Jacobian\n    approximations are available, including Krylov and Quasi-Newton\n    methods.\n\n    References\n    ----------\n    .. [KIM] C. T. Kelley, "Iterative Methods for Linear and Nonlinear\n       Equations". Society for Industrial and Applied Mathematics. (1995)\n       http://www.siam.org/books/kelley/fr16/index.php\n\n    ')
    
    # Assigning a Call to a Name (line 267):
    
    # Assigning a Call to a Name (line 267):
    
    # Call to TerminationCondition(...): (line 267)
    # Processing the call keyword arguments (line 267)
    # Getting the type of 'f_tol' (line 267)
    f_tol_173161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 43), 'f_tol', False)
    keyword_173162 = f_tol_173161
    # Getting the type of 'f_rtol' (line 267)
    f_rtol_173163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 57), 'f_rtol', False)
    keyword_173164 = f_rtol_173163
    # Getting the type of 'x_tol' (line 268)
    x_tol_173165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 43), 'x_tol', False)
    keyword_173166 = x_tol_173165
    # Getting the type of 'x_rtol' (line 268)
    x_rtol_173167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 57), 'x_rtol', False)
    keyword_173168 = x_rtol_173167
    # Getting the type of 'iter' (line 269)
    iter_173169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 42), 'iter', False)
    keyword_173170 = iter_173169
    # Getting the type of 'tol_norm' (line 269)
    tol_norm_173171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 53), 'tol_norm', False)
    keyword_173172 = tol_norm_173171
    kwargs_173173 = {'f_rtol': keyword_173164, 'f_tol': keyword_173162, 'iter': keyword_173170, 'x_rtol': keyword_173168, 'x_tol': keyword_173166, 'norm': keyword_173172}
    # Getting the type of 'TerminationCondition' (line 267)
    TerminationCondition_173160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 16), 'TerminationCondition', False)
    # Calling TerminationCondition(args, kwargs) (line 267)
    TerminationCondition_call_result_173174 = invoke(stypy.reporting.localization.Localization(__file__, 267, 16), TerminationCondition_173160, *[], **kwargs_173173)
    
    # Assigning a type to the variable 'condition' (line 267)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 267, 4), 'condition', TerminationCondition_call_result_173174)
    
    # Assigning a Call to a Name (line 271):
    
    # Assigning a Call to a Name (line 271):
    
    # Call to _as_inexact(...): (line 271)
    # Processing the call arguments (line 271)
    # Getting the type of 'x0' (line 271)
    x0_173176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 21), 'x0', False)
    # Processing the call keyword arguments (line 271)
    kwargs_173177 = {}
    # Getting the type of '_as_inexact' (line 271)
    _as_inexact_173175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 9), '_as_inexact', False)
    # Calling _as_inexact(args, kwargs) (line 271)
    _as_inexact_call_result_173178 = invoke(stypy.reporting.localization.Localization(__file__, 271, 9), _as_inexact_173175, *[x0_173176], **kwargs_173177)
    
    # Assigning a type to the variable 'x0' (line 271)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 271, 4), 'x0', _as_inexact_call_result_173178)
    
    # Assigning a Lambda to a Name (line 272):
    
    # Assigning a Lambda to a Name (line 272):

    @norecursion
    def _stypy_temp_lambda_49(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_49'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_49', 272, 11, True)
        # Passed parameters checking function
        _stypy_temp_lambda_49.stypy_localization = localization
        _stypy_temp_lambda_49.stypy_type_of_self = None
        _stypy_temp_lambda_49.stypy_type_store = module_type_store
        _stypy_temp_lambda_49.stypy_function_name = '_stypy_temp_lambda_49'
        _stypy_temp_lambda_49.stypy_param_names_list = ['z']
        _stypy_temp_lambda_49.stypy_varargs_param_name = None
        _stypy_temp_lambda_49.stypy_kwargs_param_name = None
        _stypy_temp_lambda_49.stypy_call_defaults = defaults
        _stypy_temp_lambda_49.stypy_call_varargs = varargs
        _stypy_temp_lambda_49.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_49', ['z'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_49', ['z'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to flatten(...): (line 272)
        # Processing the call keyword arguments (line 272)
        kwargs_173191 = {}
        
        # Call to _as_inexact(...): (line 272)
        # Processing the call arguments (line 272)
        
        # Call to F(...): (line 272)
        # Processing the call arguments (line 272)
        
        # Call to _array_like(...): (line 272)
        # Processing the call arguments (line 272)
        # Getting the type of 'z' (line 272)
        z_173182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 47), 'z', False)
        # Getting the type of 'x0' (line 272)
        x0_173183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 50), 'x0', False)
        # Processing the call keyword arguments (line 272)
        kwargs_173184 = {}
        # Getting the type of '_array_like' (line 272)
        _array_like_173181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 35), '_array_like', False)
        # Calling _array_like(args, kwargs) (line 272)
        _array_like_call_result_173185 = invoke(stypy.reporting.localization.Localization(__file__, 272, 35), _array_like_173181, *[z_173182, x0_173183], **kwargs_173184)
        
        # Processing the call keyword arguments (line 272)
        kwargs_173186 = {}
        # Getting the type of 'F' (line 272)
        F_173180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 33), 'F', False)
        # Calling F(args, kwargs) (line 272)
        F_call_result_173187 = invoke(stypy.reporting.localization.Localization(__file__, 272, 33), F_173180, *[_array_like_call_result_173185], **kwargs_173186)
        
        # Processing the call keyword arguments (line 272)
        kwargs_173188 = {}
        # Getting the type of '_as_inexact' (line 272)
        _as_inexact_173179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 21), '_as_inexact', False)
        # Calling _as_inexact(args, kwargs) (line 272)
        _as_inexact_call_result_173189 = invoke(stypy.reporting.localization.Localization(__file__, 272, 21), _as_inexact_173179, *[F_call_result_173187], **kwargs_173188)
        
        # Obtaining the member 'flatten' of a type (line 272)
        flatten_173190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 272, 21), _as_inexact_call_result_173189, 'flatten')
        # Calling flatten(args, kwargs) (line 272)
        flatten_call_result_173192 = invoke(stypy.reporting.localization.Localization(__file__, 272, 21), flatten_173190, *[], **kwargs_173191)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 11), 'stypy_return_type', flatten_call_result_173192)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_49' in the type store
        # Getting the type of 'stypy_return_type' (line 272)
        stypy_return_type_173193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 11), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_173193)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_49'
        return stypy_return_type_173193

    # Assigning a type to the variable '_stypy_temp_lambda_49' (line 272)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 11), '_stypy_temp_lambda_49', _stypy_temp_lambda_49)
    # Getting the type of '_stypy_temp_lambda_49' (line 272)
    _stypy_temp_lambda_49_173194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 11), '_stypy_temp_lambda_49')
    # Assigning a type to the variable 'func' (line 272)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 4), 'func', _stypy_temp_lambda_49_173194)
    
    # Assigning a Call to a Name (line 273):
    
    # Assigning a Call to a Name (line 273):
    
    # Call to flatten(...): (line 273)
    # Processing the call keyword arguments (line 273)
    kwargs_173197 = {}
    # Getting the type of 'x0' (line 273)
    x0_173195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'x0', False)
    # Obtaining the member 'flatten' of a type (line 273)
    flatten_173196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 273, 8), x0_173195, 'flatten')
    # Calling flatten(args, kwargs) (line 273)
    flatten_call_result_173198 = invoke(stypy.reporting.localization.Localization(__file__, 273, 8), flatten_173196, *[], **kwargs_173197)
    
    # Assigning a type to the variable 'x' (line 273)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 4), 'x', flatten_call_result_173198)
    
    # Assigning a Attribute to a Name (line 275):
    
    # Assigning a Attribute to a Name (line 275):
    # Getting the type of 'np' (line 275)
    np_173199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 9), 'np')
    # Obtaining the member 'inf' of a type (line 275)
    inf_173200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 275, 9), np_173199, 'inf')
    # Assigning a type to the variable 'dx' (line 275)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 275, 4), 'dx', inf_173200)
    
    # Assigning a Call to a Name (line 276):
    
    # Assigning a Call to a Name (line 276):
    
    # Call to func(...): (line 276)
    # Processing the call arguments (line 276)
    # Getting the type of 'x' (line 276)
    x_173202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 14), 'x', False)
    # Processing the call keyword arguments (line 276)
    kwargs_173203 = {}
    # Getting the type of 'func' (line 276)
    func_173201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 9), 'func', False)
    # Calling func(args, kwargs) (line 276)
    func_call_result_173204 = invoke(stypy.reporting.localization.Localization(__file__, 276, 9), func_173201, *[x_173202], **kwargs_173203)
    
    # Assigning a type to the variable 'Fx' (line 276)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 4), 'Fx', func_call_result_173204)
    
    # Assigning a Call to a Name (line 277):
    
    # Assigning a Call to a Name (line 277):
    
    # Call to norm(...): (line 277)
    # Processing the call arguments (line 277)
    # Getting the type of 'Fx' (line 277)
    Fx_173206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 19), 'Fx', False)
    # Processing the call keyword arguments (line 277)
    kwargs_173207 = {}
    # Getting the type of 'norm' (line 277)
    norm_173205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 14), 'norm', False)
    # Calling norm(args, kwargs) (line 277)
    norm_call_result_173208 = invoke(stypy.reporting.localization.Localization(__file__, 277, 14), norm_173205, *[Fx_173206], **kwargs_173207)
    
    # Assigning a type to the variable 'Fx_norm' (line 277)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 4), 'Fx_norm', norm_call_result_173208)
    
    # Assigning a Call to a Name (line 279):
    
    # Assigning a Call to a Name (line 279):
    
    # Call to asjacobian(...): (line 279)
    # Processing the call arguments (line 279)
    # Getting the type of 'jacobian' (line 279)
    jacobian_173210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 26), 'jacobian', False)
    # Processing the call keyword arguments (line 279)
    kwargs_173211 = {}
    # Getting the type of 'asjacobian' (line 279)
    asjacobian_173209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 15), 'asjacobian', False)
    # Calling asjacobian(args, kwargs) (line 279)
    asjacobian_call_result_173212 = invoke(stypy.reporting.localization.Localization(__file__, 279, 15), asjacobian_173209, *[jacobian_173210], **kwargs_173211)
    
    # Assigning a type to the variable 'jacobian' (line 279)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 279, 4), 'jacobian', asjacobian_call_result_173212)
    
    # Call to setup(...): (line 280)
    # Processing the call arguments (line 280)
    
    # Call to copy(...): (line 280)
    # Processing the call keyword arguments (line 280)
    kwargs_173217 = {}
    # Getting the type of 'x' (line 280)
    x_173215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 19), 'x', False)
    # Obtaining the member 'copy' of a type (line 280)
    copy_173216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 280, 19), x_173215, 'copy')
    # Calling copy(args, kwargs) (line 280)
    copy_call_result_173218 = invoke(stypy.reporting.localization.Localization(__file__, 280, 19), copy_173216, *[], **kwargs_173217)
    
    # Getting the type of 'Fx' (line 280)
    Fx_173219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 29), 'Fx', False)
    # Getting the type of 'func' (line 280)
    func_173220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 33), 'func', False)
    # Processing the call keyword arguments (line 280)
    kwargs_173221 = {}
    # Getting the type of 'jacobian' (line 280)
    jacobian_173213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 4), 'jacobian', False)
    # Obtaining the member 'setup' of a type (line 280)
    setup_173214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 280, 4), jacobian_173213, 'setup')
    # Calling setup(args, kwargs) (line 280)
    setup_call_result_173222 = invoke(stypy.reporting.localization.Localization(__file__, 280, 4), setup_173214, *[copy_call_result_173218, Fx_173219, func_173220], **kwargs_173221)
    
    
    # Type idiom detected: calculating its left and rigth part (line 282)
    # Getting the type of 'maxiter' (line 282)
    maxiter_173223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 7), 'maxiter')
    # Getting the type of 'None' (line 282)
    None_173224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 18), 'None')
    
    (may_be_173225, more_types_in_union_173226) = may_be_none(maxiter_173223, None_173224)

    if may_be_173225:

        if more_types_in_union_173226:
            # Runtime conditional SSA (line 282)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Type idiom detected: calculating its left and rigth part (line 283)
        # Getting the type of 'iter' (line 283)
        iter_173227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 8), 'iter')
        # Getting the type of 'None' (line 283)
        None_173228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 23), 'None')
        
        (may_be_173229, more_types_in_union_173230) = may_not_be_none(iter_173227, None_173228)

        if may_be_173229:

            if more_types_in_union_173230:
                # Runtime conditional SSA (line 283)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a BinOp to a Name (line 284):
            
            # Assigning a BinOp to a Name (line 284):
            # Getting the type of 'iter' (line 284)
            iter_173231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 22), 'iter')
            int_173232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 284, 29), 'int')
            # Applying the binary operator '+' (line 284)
            result_add_173233 = python_operator(stypy.reporting.localization.Localization(__file__, 284, 22), '+', iter_173231, int_173232)
            
            # Assigning a type to the variable 'maxiter' (line 284)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 284, 12), 'maxiter', result_add_173233)

            if more_types_in_union_173230:
                # Runtime conditional SSA for else branch (line 283)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_173229) or more_types_in_union_173230):
            
            # Assigning a BinOp to a Name (line 286):
            
            # Assigning a BinOp to a Name (line 286):
            int_173234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 286, 22), 'int')
            # Getting the type of 'x' (line 286)
            x_173235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 27), 'x')
            # Obtaining the member 'size' of a type (line 286)
            size_173236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 27), x_173235, 'size')
            int_173237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 286, 34), 'int')
            # Applying the binary operator '+' (line 286)
            result_add_173238 = python_operator(stypy.reporting.localization.Localization(__file__, 286, 27), '+', size_173236, int_173237)
            
            # Applying the binary operator '*' (line 286)
            result_mul_173239 = python_operator(stypy.reporting.localization.Localization(__file__, 286, 22), '*', int_173234, result_add_173238)
            
            # Assigning a type to the variable 'maxiter' (line 286)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 12), 'maxiter', result_mul_173239)

            if (may_be_173229 and more_types_in_union_173230):
                # SSA join for if statement (line 283)
                module_type_store = module_type_store.join_ssa_context()


        

        if more_types_in_union_173226:
            # SSA join for if statement (line 282)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'line_search' (line 288)
    line_search_173240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 7), 'line_search')
    # Getting the type of 'True' (line 288)
    True_173241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 22), 'True')
    # Applying the binary operator 'is' (line 288)
    result_is__173242 = python_operator(stypy.reporting.localization.Localization(__file__, 288, 7), 'is', line_search_173240, True_173241)
    
    # Testing the type of an if condition (line 288)
    if_condition_173243 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 288, 4), result_is__173242)
    # Assigning a type to the variable 'if_condition_173243' (line 288)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 288, 4), 'if_condition_173243', if_condition_173243)
    # SSA begins for if statement (line 288)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 289):
    
    # Assigning a Str to a Name (line 289):
    str_173244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, 22), 'str', 'armijo')
    # Assigning a type to the variable 'line_search' (line 289)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 289, 8), 'line_search', str_173244)
    # SSA branch for the else part of an if statement (line 288)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'line_search' (line 290)
    line_search_173245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 9), 'line_search')
    # Getting the type of 'False' (line 290)
    False_173246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 24), 'False')
    # Applying the binary operator 'is' (line 290)
    result_is__173247 = python_operator(stypy.reporting.localization.Localization(__file__, 290, 9), 'is', line_search_173245, False_173246)
    
    # Testing the type of an if condition (line 290)
    if_condition_173248 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 290, 9), result_is__173247)
    # Assigning a type to the variable 'if_condition_173248' (line 290)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 290, 9), 'if_condition_173248', if_condition_173248)
    # SSA begins for if statement (line 290)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 291):
    
    # Assigning a Name to a Name (line 291):
    # Getting the type of 'None' (line 291)
    None_173249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 22), 'None')
    # Assigning a type to the variable 'line_search' (line 291)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 291, 8), 'line_search', None_173249)
    # SSA join for if statement (line 290)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 288)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'line_search' (line 293)
    line_search_173250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 7), 'line_search')
    
    # Obtaining an instance of the builtin type 'tuple' (line 293)
    tuple_173251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 293, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 293)
    # Adding element type (line 293)
    # Getting the type of 'None' (line 293)
    None_173252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 27), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 293, 27), tuple_173251, None_173252)
    # Adding element type (line 293)
    str_173253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 293, 33), 'str', 'armijo')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 293, 27), tuple_173251, str_173253)
    # Adding element type (line 293)
    str_173254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 293, 43), 'str', 'wolfe')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 293, 27), tuple_173251, str_173254)
    
    # Applying the binary operator 'notin' (line 293)
    result_contains_173255 = python_operator(stypy.reporting.localization.Localization(__file__, 293, 7), 'notin', line_search_173250, tuple_173251)
    
    # Testing the type of an if condition (line 293)
    if_condition_173256 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 293, 4), result_contains_173255)
    # Assigning a type to the variable 'if_condition_173256' (line 293)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 293, 4), 'if_condition_173256', if_condition_173256)
    # SSA begins for if statement (line 293)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 294)
    # Processing the call arguments (line 294)
    str_173258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 294, 25), 'str', 'Invalid line search')
    # Processing the call keyword arguments (line 294)
    kwargs_173259 = {}
    # Getting the type of 'ValueError' (line 294)
    ValueError_173257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 294)
    ValueError_call_result_173260 = invoke(stypy.reporting.localization.Localization(__file__, 294, 14), ValueError_173257, *[str_173258], **kwargs_173259)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 294, 8), ValueError_call_result_173260, 'raise parameter', BaseException)
    # SSA join for if statement (line 293)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 297):
    
    # Assigning a Num to a Name (line 297):
    float_173261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 297, 12), 'float')
    # Assigning a type to the variable 'gamma' (line 297)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 4), 'gamma', float_173261)
    
    # Assigning a Num to a Name (line 298):
    
    # Assigning a Num to a Name (line 298):
    float_173262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 298, 14), 'float')
    # Assigning a type to the variable 'eta_max' (line 298)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 298, 4), 'eta_max', float_173262)
    
    # Assigning a Num to a Name (line 299):
    
    # Assigning a Num to a Name (line 299):
    float_173263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 299, 19), 'float')
    # Assigning a type to the variable 'eta_treshold' (line 299)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 299, 4), 'eta_treshold', float_173263)
    
    # Assigning a Num to a Name (line 300):
    
    # Assigning a Num to a Name (line 300):
    float_173264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 300, 10), 'float')
    # Assigning a type to the variable 'eta' (line 300)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 300, 4), 'eta', float_173264)
    
    
    # Call to xrange(...): (line 302)
    # Processing the call arguments (line 302)
    # Getting the type of 'maxiter' (line 302)
    maxiter_173266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 20), 'maxiter', False)
    # Processing the call keyword arguments (line 302)
    kwargs_173267 = {}
    # Getting the type of 'xrange' (line 302)
    xrange_173265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 13), 'xrange', False)
    # Calling xrange(args, kwargs) (line 302)
    xrange_call_result_173268 = invoke(stypy.reporting.localization.Localization(__file__, 302, 13), xrange_173265, *[maxiter_173266], **kwargs_173267)
    
    # Testing the type of a for loop iterable (line 302)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 302, 4), xrange_call_result_173268)
    # Getting the type of the for loop variable (line 302)
    for_loop_var_173269 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 302, 4), xrange_call_result_173268)
    # Assigning a type to the variable 'n' (line 302)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 302, 4), 'n', for_loop_var_173269)
    # SSA begins for a for statement (line 302)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 303):
    
    # Assigning a Call to a Name (line 303):
    
    # Call to check(...): (line 303)
    # Processing the call arguments (line 303)
    # Getting the type of 'Fx' (line 303)
    Fx_173272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 33), 'Fx', False)
    # Getting the type of 'x' (line 303)
    x_173273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 37), 'x', False)
    # Getting the type of 'dx' (line 303)
    dx_173274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 40), 'dx', False)
    # Processing the call keyword arguments (line 303)
    kwargs_173275 = {}
    # Getting the type of 'condition' (line 303)
    condition_173270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 17), 'condition', False)
    # Obtaining the member 'check' of a type (line 303)
    check_173271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 303, 17), condition_173270, 'check')
    # Calling check(args, kwargs) (line 303)
    check_call_result_173276 = invoke(stypy.reporting.localization.Localization(__file__, 303, 17), check_173271, *[Fx_173272, x_173273, dx_173274], **kwargs_173275)
    
    # Assigning a type to the variable 'status' (line 303)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 303, 8), 'status', check_call_result_173276)
    
    # Getting the type of 'status' (line 304)
    status_173277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 11), 'status')
    # Testing the type of an if condition (line 304)
    if_condition_173278 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 304, 8), status_173277)
    # Assigning a type to the variable 'if_condition_173278' (line 304)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 304, 8), 'if_condition_173278', if_condition_173278)
    # SSA begins for if statement (line 304)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 304)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 308):
    
    # Assigning a Call to a Name (line 308):
    
    # Call to min(...): (line 308)
    # Processing the call arguments (line 308)
    # Getting the type of 'eta' (line 308)
    eta_173280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 18), 'eta', False)
    # Getting the type of 'eta' (line 308)
    eta_173281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 23), 'eta', False)
    # Getting the type of 'Fx_norm' (line 308)
    Fx_norm_173282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 27), 'Fx_norm', False)
    # Applying the binary operator '*' (line 308)
    result_mul_173283 = python_operator(stypy.reporting.localization.Localization(__file__, 308, 23), '*', eta_173281, Fx_norm_173282)
    
    # Processing the call keyword arguments (line 308)
    kwargs_173284 = {}
    # Getting the type of 'min' (line 308)
    min_173279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 14), 'min', False)
    # Calling min(args, kwargs) (line 308)
    min_call_result_173285 = invoke(stypy.reporting.localization.Localization(__file__, 308, 14), min_173279, *[eta_173280, result_mul_173283], **kwargs_173284)
    
    # Assigning a type to the variable 'tol' (line 308)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 308, 8), 'tol', min_call_result_173285)
    
    # Assigning a UnaryOp to a Name (line 309):
    
    # Assigning a UnaryOp to a Name (line 309):
    
    
    # Call to solve(...): (line 309)
    # Processing the call arguments (line 309)
    # Getting the type of 'Fx' (line 309)
    Fx_173288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 29), 'Fx', False)
    # Processing the call keyword arguments (line 309)
    # Getting the type of 'tol' (line 309)
    tol_173289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 37), 'tol', False)
    keyword_173290 = tol_173289
    kwargs_173291 = {'tol': keyword_173290}
    # Getting the type of 'jacobian' (line 309)
    jacobian_173286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 14), 'jacobian', False)
    # Obtaining the member 'solve' of a type (line 309)
    solve_173287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 14), jacobian_173286, 'solve')
    # Calling solve(args, kwargs) (line 309)
    solve_call_result_173292 = invoke(stypy.reporting.localization.Localization(__file__, 309, 14), solve_173287, *[Fx_173288], **kwargs_173291)
    
    # Applying the 'usub' unary operator (line 309)
    result___neg___173293 = python_operator(stypy.reporting.localization.Localization(__file__, 309, 13), 'usub', solve_call_result_173292)
    
    # Assigning a type to the variable 'dx' (line 309)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 309, 8), 'dx', result___neg___173293)
    
    
    
    # Call to norm(...): (line 311)
    # Processing the call arguments (line 311)
    # Getting the type of 'dx' (line 311)
    dx_173295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 16), 'dx', False)
    # Processing the call keyword arguments (line 311)
    kwargs_173296 = {}
    # Getting the type of 'norm' (line 311)
    norm_173294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 11), 'norm', False)
    # Calling norm(args, kwargs) (line 311)
    norm_call_result_173297 = invoke(stypy.reporting.localization.Localization(__file__, 311, 11), norm_173294, *[dx_173295], **kwargs_173296)
    
    int_173298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 311, 23), 'int')
    # Applying the binary operator '==' (line 311)
    result_eq_173299 = python_operator(stypy.reporting.localization.Localization(__file__, 311, 11), '==', norm_call_result_173297, int_173298)
    
    # Testing the type of an if condition (line 311)
    if_condition_173300 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 311, 8), result_eq_173299)
    # Assigning a type to the variable 'if_condition_173300' (line 311)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 311, 8), 'if_condition_173300', if_condition_173300)
    # SSA begins for if statement (line 311)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 312)
    # Processing the call arguments (line 312)
    str_173302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 312, 29), 'str', 'Jacobian inversion yielded zero vector. This indicates a bug in the Jacobian approximation.')
    # Processing the call keyword arguments (line 312)
    kwargs_173303 = {}
    # Getting the type of 'ValueError' (line 312)
    ValueError_173301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 312)
    ValueError_call_result_173304 = invoke(stypy.reporting.localization.Localization(__file__, 312, 18), ValueError_173301, *[str_173302], **kwargs_173303)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 312, 12), ValueError_call_result_173304, 'raise parameter', BaseException)
    # SSA join for if statement (line 311)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'line_search' (line 317)
    line_search_173305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 11), 'line_search')
    # Testing the type of an if condition (line 317)
    if_condition_173306 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 317, 8), line_search_173305)
    # Assigning a type to the variable 'if_condition_173306' (line 317)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 317, 8), 'if_condition_173306', if_condition_173306)
    # SSA begins for if statement (line 317)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 318):
    
    # Assigning a Subscript to a Name (line 318):
    
    # Obtaining the type of the subscript
    int_173307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 12), 'int')
    
    # Call to _nonlin_line_search(...): (line 318)
    # Processing the call arguments (line 318)
    # Getting the type of 'func' (line 318)
    func_173309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 56), 'func', False)
    # Getting the type of 'x' (line 318)
    x_173310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 62), 'x', False)
    # Getting the type of 'Fx' (line 318)
    Fx_173311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 65), 'Fx', False)
    # Getting the type of 'dx' (line 318)
    dx_173312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 69), 'dx', False)
    # Getting the type of 'line_search' (line 319)
    line_search_173313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 56), 'line_search', False)
    # Processing the call keyword arguments (line 318)
    kwargs_173314 = {}
    # Getting the type of '_nonlin_line_search' (line 318)
    _nonlin_line_search_173308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 36), '_nonlin_line_search', False)
    # Calling _nonlin_line_search(args, kwargs) (line 318)
    _nonlin_line_search_call_result_173315 = invoke(stypy.reporting.localization.Localization(__file__, 318, 36), _nonlin_line_search_173308, *[func_173309, x_173310, Fx_173311, dx_173312, line_search_173313], **kwargs_173314)
    
    # Obtaining the member '__getitem__' of a type (line 318)
    getitem___173316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 318, 12), _nonlin_line_search_call_result_173315, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 318)
    subscript_call_result_173317 = invoke(stypy.reporting.localization.Localization(__file__, 318, 12), getitem___173316, int_173307)
    
    # Assigning a type to the variable 'tuple_var_assignment_172992' (line 318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 318, 12), 'tuple_var_assignment_172992', subscript_call_result_173317)
    
    # Assigning a Subscript to a Name (line 318):
    
    # Obtaining the type of the subscript
    int_173318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 12), 'int')
    
    # Call to _nonlin_line_search(...): (line 318)
    # Processing the call arguments (line 318)
    # Getting the type of 'func' (line 318)
    func_173320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 56), 'func', False)
    # Getting the type of 'x' (line 318)
    x_173321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 62), 'x', False)
    # Getting the type of 'Fx' (line 318)
    Fx_173322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 65), 'Fx', False)
    # Getting the type of 'dx' (line 318)
    dx_173323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 69), 'dx', False)
    # Getting the type of 'line_search' (line 319)
    line_search_173324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 56), 'line_search', False)
    # Processing the call keyword arguments (line 318)
    kwargs_173325 = {}
    # Getting the type of '_nonlin_line_search' (line 318)
    _nonlin_line_search_173319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 36), '_nonlin_line_search', False)
    # Calling _nonlin_line_search(args, kwargs) (line 318)
    _nonlin_line_search_call_result_173326 = invoke(stypy.reporting.localization.Localization(__file__, 318, 36), _nonlin_line_search_173319, *[func_173320, x_173321, Fx_173322, dx_173323, line_search_173324], **kwargs_173325)
    
    # Obtaining the member '__getitem__' of a type (line 318)
    getitem___173327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 318, 12), _nonlin_line_search_call_result_173326, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 318)
    subscript_call_result_173328 = invoke(stypy.reporting.localization.Localization(__file__, 318, 12), getitem___173327, int_173318)
    
    # Assigning a type to the variable 'tuple_var_assignment_172993' (line 318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 318, 12), 'tuple_var_assignment_172993', subscript_call_result_173328)
    
    # Assigning a Subscript to a Name (line 318):
    
    # Obtaining the type of the subscript
    int_173329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 12), 'int')
    
    # Call to _nonlin_line_search(...): (line 318)
    # Processing the call arguments (line 318)
    # Getting the type of 'func' (line 318)
    func_173331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 56), 'func', False)
    # Getting the type of 'x' (line 318)
    x_173332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 62), 'x', False)
    # Getting the type of 'Fx' (line 318)
    Fx_173333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 65), 'Fx', False)
    # Getting the type of 'dx' (line 318)
    dx_173334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 69), 'dx', False)
    # Getting the type of 'line_search' (line 319)
    line_search_173335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 56), 'line_search', False)
    # Processing the call keyword arguments (line 318)
    kwargs_173336 = {}
    # Getting the type of '_nonlin_line_search' (line 318)
    _nonlin_line_search_173330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 36), '_nonlin_line_search', False)
    # Calling _nonlin_line_search(args, kwargs) (line 318)
    _nonlin_line_search_call_result_173337 = invoke(stypy.reporting.localization.Localization(__file__, 318, 36), _nonlin_line_search_173330, *[func_173331, x_173332, Fx_173333, dx_173334, line_search_173335], **kwargs_173336)
    
    # Obtaining the member '__getitem__' of a type (line 318)
    getitem___173338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 318, 12), _nonlin_line_search_call_result_173337, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 318)
    subscript_call_result_173339 = invoke(stypy.reporting.localization.Localization(__file__, 318, 12), getitem___173338, int_173329)
    
    # Assigning a type to the variable 'tuple_var_assignment_172994' (line 318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 318, 12), 'tuple_var_assignment_172994', subscript_call_result_173339)
    
    # Assigning a Subscript to a Name (line 318):
    
    # Obtaining the type of the subscript
    int_173340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 12), 'int')
    
    # Call to _nonlin_line_search(...): (line 318)
    # Processing the call arguments (line 318)
    # Getting the type of 'func' (line 318)
    func_173342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 56), 'func', False)
    # Getting the type of 'x' (line 318)
    x_173343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 62), 'x', False)
    # Getting the type of 'Fx' (line 318)
    Fx_173344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 65), 'Fx', False)
    # Getting the type of 'dx' (line 318)
    dx_173345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 69), 'dx', False)
    # Getting the type of 'line_search' (line 319)
    line_search_173346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 56), 'line_search', False)
    # Processing the call keyword arguments (line 318)
    kwargs_173347 = {}
    # Getting the type of '_nonlin_line_search' (line 318)
    _nonlin_line_search_173341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 36), '_nonlin_line_search', False)
    # Calling _nonlin_line_search(args, kwargs) (line 318)
    _nonlin_line_search_call_result_173348 = invoke(stypy.reporting.localization.Localization(__file__, 318, 36), _nonlin_line_search_173341, *[func_173342, x_173343, Fx_173344, dx_173345, line_search_173346], **kwargs_173347)
    
    # Obtaining the member '__getitem__' of a type (line 318)
    getitem___173349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 318, 12), _nonlin_line_search_call_result_173348, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 318)
    subscript_call_result_173350 = invoke(stypy.reporting.localization.Localization(__file__, 318, 12), getitem___173349, int_173340)
    
    # Assigning a type to the variable 'tuple_var_assignment_172995' (line 318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 318, 12), 'tuple_var_assignment_172995', subscript_call_result_173350)
    
    # Assigning a Name to a Name (line 318):
    # Getting the type of 'tuple_var_assignment_172992' (line 318)
    tuple_var_assignment_172992_173351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 12), 'tuple_var_assignment_172992')
    # Assigning a type to the variable 's' (line 318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 318, 12), 's', tuple_var_assignment_172992_173351)
    
    # Assigning a Name to a Name (line 318):
    # Getting the type of 'tuple_var_assignment_172993' (line 318)
    tuple_var_assignment_172993_173352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 12), 'tuple_var_assignment_172993')
    # Assigning a type to the variable 'x' (line 318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 318, 15), 'x', tuple_var_assignment_172993_173352)
    
    # Assigning a Name to a Name (line 318):
    # Getting the type of 'tuple_var_assignment_172994' (line 318)
    tuple_var_assignment_172994_173353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 12), 'tuple_var_assignment_172994')
    # Assigning a type to the variable 'Fx' (line 318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 318, 18), 'Fx', tuple_var_assignment_172994_173353)
    
    # Assigning a Name to a Name (line 318):
    # Getting the type of 'tuple_var_assignment_172995' (line 318)
    tuple_var_assignment_172995_173354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 12), 'tuple_var_assignment_172995')
    # Assigning a type to the variable 'Fx_norm_new' (line 318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 318, 22), 'Fx_norm_new', tuple_var_assignment_172995_173354)
    # SSA branch for the else part of an if statement (line 317)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Name (line 321):
    
    # Assigning a Num to a Name (line 321):
    float_173355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 321, 16), 'float')
    # Assigning a type to the variable 's' (line 321)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 321, 12), 's', float_173355)
    
    # Assigning a BinOp to a Name (line 322):
    
    # Assigning a BinOp to a Name (line 322):
    # Getting the type of 'x' (line 322)
    x_173356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 16), 'x')
    # Getting the type of 'dx' (line 322)
    dx_173357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 20), 'dx')
    # Applying the binary operator '+' (line 322)
    result_add_173358 = python_operator(stypy.reporting.localization.Localization(__file__, 322, 16), '+', x_173356, dx_173357)
    
    # Assigning a type to the variable 'x' (line 322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 322, 12), 'x', result_add_173358)
    
    # Assigning a Call to a Name (line 323):
    
    # Assigning a Call to a Name (line 323):
    
    # Call to func(...): (line 323)
    # Processing the call arguments (line 323)
    # Getting the type of 'x' (line 323)
    x_173360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 22), 'x', False)
    # Processing the call keyword arguments (line 323)
    kwargs_173361 = {}
    # Getting the type of 'func' (line 323)
    func_173359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 17), 'func', False)
    # Calling func(args, kwargs) (line 323)
    func_call_result_173362 = invoke(stypy.reporting.localization.Localization(__file__, 323, 17), func_173359, *[x_173360], **kwargs_173361)
    
    # Assigning a type to the variable 'Fx' (line 323)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 323, 12), 'Fx', func_call_result_173362)
    
    # Assigning a Call to a Name (line 324):
    
    # Assigning a Call to a Name (line 324):
    
    # Call to norm(...): (line 324)
    # Processing the call arguments (line 324)
    # Getting the type of 'Fx' (line 324)
    Fx_173364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 31), 'Fx', False)
    # Processing the call keyword arguments (line 324)
    kwargs_173365 = {}
    # Getting the type of 'norm' (line 324)
    norm_173363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 26), 'norm', False)
    # Calling norm(args, kwargs) (line 324)
    norm_call_result_173366 = invoke(stypy.reporting.localization.Localization(__file__, 324, 26), norm_173363, *[Fx_173364], **kwargs_173365)
    
    # Assigning a type to the variable 'Fx_norm_new' (line 324)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 324, 12), 'Fx_norm_new', norm_call_result_173366)
    # SSA join for if statement (line 317)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to update(...): (line 326)
    # Processing the call arguments (line 326)
    
    # Call to copy(...): (line 326)
    # Processing the call keyword arguments (line 326)
    kwargs_173371 = {}
    # Getting the type of 'x' (line 326)
    x_173369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 24), 'x', False)
    # Obtaining the member 'copy' of a type (line 326)
    copy_173370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 326, 24), x_173369, 'copy')
    # Calling copy(args, kwargs) (line 326)
    copy_call_result_173372 = invoke(stypy.reporting.localization.Localization(__file__, 326, 24), copy_173370, *[], **kwargs_173371)
    
    # Getting the type of 'Fx' (line 326)
    Fx_173373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 34), 'Fx', False)
    # Processing the call keyword arguments (line 326)
    kwargs_173374 = {}
    # Getting the type of 'jacobian' (line 326)
    jacobian_173367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 8), 'jacobian', False)
    # Obtaining the member 'update' of a type (line 326)
    update_173368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 326, 8), jacobian_173367, 'update')
    # Calling update(args, kwargs) (line 326)
    update_call_result_173375 = invoke(stypy.reporting.localization.Localization(__file__, 326, 8), update_173368, *[copy_call_result_173372, Fx_173373], **kwargs_173374)
    
    
    # Getting the type of 'callback' (line 328)
    callback_173376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 11), 'callback')
    # Testing the type of an if condition (line 328)
    if_condition_173377 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 328, 8), callback_173376)
    # Assigning a type to the variable 'if_condition_173377' (line 328)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 328, 8), 'if_condition_173377', if_condition_173377)
    # SSA begins for if statement (line 328)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to callback(...): (line 329)
    # Processing the call arguments (line 329)
    # Getting the type of 'x' (line 329)
    x_173379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 21), 'x', False)
    # Getting the type of 'Fx' (line 329)
    Fx_173380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 24), 'Fx', False)
    # Processing the call keyword arguments (line 329)
    kwargs_173381 = {}
    # Getting the type of 'callback' (line 329)
    callback_173378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 12), 'callback', False)
    # Calling callback(args, kwargs) (line 329)
    callback_call_result_173382 = invoke(stypy.reporting.localization.Localization(__file__, 329, 12), callback_173378, *[x_173379, Fx_173380], **kwargs_173381)
    
    # SSA join for if statement (line 328)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 332):
    
    # Assigning a BinOp to a Name (line 332):
    # Getting the type of 'gamma' (line 332)
    gamma_173383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 16), 'gamma')
    # Getting the type of 'Fx_norm_new' (line 332)
    Fx_norm_new_173384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 24), 'Fx_norm_new')
    int_173385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 332, 37), 'int')
    # Applying the binary operator '**' (line 332)
    result_pow_173386 = python_operator(stypy.reporting.localization.Localization(__file__, 332, 24), '**', Fx_norm_new_173384, int_173385)
    
    # Applying the binary operator '*' (line 332)
    result_mul_173387 = python_operator(stypy.reporting.localization.Localization(__file__, 332, 16), '*', gamma_173383, result_pow_173386)
    
    # Getting the type of 'Fx_norm' (line 332)
    Fx_norm_173388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 41), 'Fx_norm')
    int_173389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 332, 50), 'int')
    # Applying the binary operator '**' (line 332)
    result_pow_173390 = python_operator(stypy.reporting.localization.Localization(__file__, 332, 41), '**', Fx_norm_173388, int_173389)
    
    # Applying the binary operator 'div' (line 332)
    result_div_173391 = python_operator(stypy.reporting.localization.Localization(__file__, 332, 39), 'div', result_mul_173387, result_pow_173390)
    
    # Assigning a type to the variable 'eta_A' (line 332)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 332, 8), 'eta_A', result_div_173391)
    
    
    # Getting the type of 'gamma' (line 333)
    gamma_173392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 11), 'gamma')
    # Getting the type of 'eta' (line 333)
    eta_173393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 19), 'eta')
    int_173394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 333, 24), 'int')
    # Applying the binary operator '**' (line 333)
    result_pow_173395 = python_operator(stypy.reporting.localization.Localization(__file__, 333, 19), '**', eta_173393, int_173394)
    
    # Applying the binary operator '*' (line 333)
    result_mul_173396 = python_operator(stypy.reporting.localization.Localization(__file__, 333, 11), '*', gamma_173392, result_pow_173395)
    
    # Getting the type of 'eta_treshold' (line 333)
    eta_treshold_173397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 28), 'eta_treshold')
    # Applying the binary operator '<' (line 333)
    result_lt_173398 = python_operator(stypy.reporting.localization.Localization(__file__, 333, 11), '<', result_mul_173396, eta_treshold_173397)
    
    # Testing the type of an if condition (line 333)
    if_condition_173399 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 333, 8), result_lt_173398)
    # Assigning a type to the variable 'if_condition_173399' (line 333)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 333, 8), 'if_condition_173399', if_condition_173399)
    # SSA begins for if statement (line 333)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 334):
    
    # Assigning a Call to a Name (line 334):
    
    # Call to min(...): (line 334)
    # Processing the call arguments (line 334)
    # Getting the type of 'eta_max' (line 334)
    eta_max_173401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 22), 'eta_max', False)
    # Getting the type of 'eta_A' (line 334)
    eta_A_173402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 31), 'eta_A', False)
    # Processing the call keyword arguments (line 334)
    kwargs_173403 = {}
    # Getting the type of 'min' (line 334)
    min_173400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 18), 'min', False)
    # Calling min(args, kwargs) (line 334)
    min_call_result_173404 = invoke(stypy.reporting.localization.Localization(__file__, 334, 18), min_173400, *[eta_max_173401, eta_A_173402], **kwargs_173403)
    
    # Assigning a type to the variable 'eta' (line 334)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 334, 12), 'eta', min_call_result_173404)
    # SSA branch for the else part of an if statement (line 333)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 336):
    
    # Assigning a Call to a Name (line 336):
    
    # Call to min(...): (line 336)
    # Processing the call arguments (line 336)
    # Getting the type of 'eta_max' (line 336)
    eta_max_173406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 22), 'eta_max', False)
    
    # Call to max(...): (line 336)
    # Processing the call arguments (line 336)
    # Getting the type of 'eta_A' (line 336)
    eta_A_173408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 35), 'eta_A', False)
    # Getting the type of 'gamma' (line 336)
    gamma_173409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 42), 'gamma', False)
    # Getting the type of 'eta' (line 336)
    eta_173410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 48), 'eta', False)
    int_173411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 336, 53), 'int')
    # Applying the binary operator '**' (line 336)
    result_pow_173412 = python_operator(stypy.reporting.localization.Localization(__file__, 336, 48), '**', eta_173410, int_173411)
    
    # Applying the binary operator '*' (line 336)
    result_mul_173413 = python_operator(stypy.reporting.localization.Localization(__file__, 336, 42), '*', gamma_173409, result_pow_173412)
    
    # Processing the call keyword arguments (line 336)
    kwargs_173414 = {}
    # Getting the type of 'max' (line 336)
    max_173407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 31), 'max', False)
    # Calling max(args, kwargs) (line 336)
    max_call_result_173415 = invoke(stypy.reporting.localization.Localization(__file__, 336, 31), max_173407, *[eta_A_173408, result_mul_173413], **kwargs_173414)
    
    # Processing the call keyword arguments (line 336)
    kwargs_173416 = {}
    # Getting the type of 'min' (line 336)
    min_173405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 18), 'min', False)
    # Calling min(args, kwargs) (line 336)
    min_call_result_173417 = invoke(stypy.reporting.localization.Localization(__file__, 336, 18), min_173405, *[eta_max_173406, max_call_result_173415], **kwargs_173416)
    
    # Assigning a type to the variable 'eta' (line 336)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 336, 12), 'eta', min_call_result_173417)
    # SSA join for if statement (line 333)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 338):
    
    # Assigning a Name to a Name (line 338):
    # Getting the type of 'Fx_norm_new' (line 338)
    Fx_norm_new_173418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 18), 'Fx_norm_new')
    # Assigning a type to the variable 'Fx_norm' (line 338)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 338, 8), 'Fx_norm', Fx_norm_new_173418)
    
    # Getting the type of 'verbose' (line 341)
    verbose_173419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 11), 'verbose')
    # Testing the type of an if condition (line 341)
    if_condition_173420 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 341, 8), verbose_173419)
    # Assigning a type to the variable 'if_condition_173420' (line 341)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 341, 8), 'if_condition_173420', if_condition_173420)
    # SSA begins for if statement (line 341)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to write(...): (line 342)
    # Processing the call arguments (line 342)
    str_173424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, 29), 'str', '%d:  |F(x)| = %g; step %g; tol %g\n')
    
    # Obtaining an instance of the builtin type 'tuple' (line 343)
    tuple_173425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 343, 16), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 343)
    # Adding element type (line 343)
    # Getting the type of 'n' (line 343)
    n_173426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 16), 'n', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 343, 16), tuple_173425, n_173426)
    # Adding element type (line 343)
    
    # Call to norm(...): (line 343)
    # Processing the call arguments (line 343)
    # Getting the type of 'Fx' (line 343)
    Fx_173428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 24), 'Fx', False)
    # Processing the call keyword arguments (line 343)
    kwargs_173429 = {}
    # Getting the type of 'norm' (line 343)
    norm_173427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 19), 'norm', False)
    # Calling norm(args, kwargs) (line 343)
    norm_call_result_173430 = invoke(stypy.reporting.localization.Localization(__file__, 343, 19), norm_173427, *[Fx_173428], **kwargs_173429)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 343, 16), tuple_173425, norm_call_result_173430)
    # Adding element type (line 343)
    # Getting the type of 's' (line 343)
    s_173431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 29), 's', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 343, 16), tuple_173425, s_173431)
    # Adding element type (line 343)
    # Getting the type of 'eta' (line 343)
    eta_173432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 32), 'eta', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 343, 16), tuple_173425, eta_173432)
    
    # Applying the binary operator '%' (line 342)
    result_mod_173433 = python_operator(stypy.reporting.localization.Localization(__file__, 342, 29), '%', str_173424, tuple_173425)
    
    # Processing the call keyword arguments (line 342)
    kwargs_173434 = {}
    # Getting the type of 'sys' (line 342)
    sys_173421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 12), 'sys', False)
    # Obtaining the member 'stdout' of a type (line 342)
    stdout_173422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 342, 12), sys_173421, 'stdout')
    # Obtaining the member 'write' of a type (line 342)
    write_173423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 342, 12), stdout_173422, 'write')
    # Calling write(args, kwargs) (line 342)
    write_call_result_173435 = invoke(stypy.reporting.localization.Localization(__file__, 342, 12), write_173423, *[result_mod_173433], **kwargs_173434)
    
    
    # Call to flush(...): (line 344)
    # Processing the call keyword arguments (line 344)
    kwargs_173439 = {}
    # Getting the type of 'sys' (line 344)
    sys_173436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 12), 'sys', False)
    # Obtaining the member 'stdout' of a type (line 344)
    stdout_173437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 344, 12), sys_173436, 'stdout')
    # Obtaining the member 'flush' of a type (line 344)
    flush_173438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 344, 12), stdout_173437, 'flush')
    # Calling flush(args, kwargs) (line 344)
    flush_call_result_173440 = invoke(stypy.reporting.localization.Localization(__file__, 344, 12), flush_173438, *[], **kwargs_173439)
    
    # SSA join for if statement (line 341)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of a for statement (line 302)
    module_type_store.open_ssa_branch('for loop else')
    
    # Getting the type of 'raise_exception' (line 346)
    raise_exception_173441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 11), 'raise_exception')
    # Testing the type of an if condition (line 346)
    if_condition_173442 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 346, 8), raise_exception_173441)
    # Assigning a type to the variable 'if_condition_173442' (line 346)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 346, 8), 'if_condition_173442', if_condition_173442)
    # SSA begins for if statement (line 346)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to NoConvergence(...): (line 347)
    # Processing the call arguments (line 347)
    
    # Call to _array_like(...): (line 347)
    # Processing the call arguments (line 347)
    # Getting the type of 'x' (line 347)
    x_173445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 44), 'x', False)
    # Getting the type of 'x0' (line 347)
    x0_173446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 47), 'x0', False)
    # Processing the call keyword arguments (line 347)
    kwargs_173447 = {}
    # Getting the type of '_array_like' (line 347)
    _array_like_173444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 32), '_array_like', False)
    # Calling _array_like(args, kwargs) (line 347)
    _array_like_call_result_173448 = invoke(stypy.reporting.localization.Localization(__file__, 347, 32), _array_like_173444, *[x_173445, x0_173446], **kwargs_173447)
    
    # Processing the call keyword arguments (line 347)
    kwargs_173449 = {}
    # Getting the type of 'NoConvergence' (line 347)
    NoConvergence_173443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 18), 'NoConvergence', False)
    # Calling NoConvergence(args, kwargs) (line 347)
    NoConvergence_call_result_173450 = invoke(stypy.reporting.localization.Localization(__file__, 347, 18), NoConvergence_173443, *[_array_like_call_result_173448], **kwargs_173449)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 347, 12), NoConvergence_call_result_173450, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 346)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Name (line 349):
    
    # Assigning a Num to a Name (line 349):
    int_173451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 349, 21), 'int')
    # Assigning a type to the variable 'status' (line 349)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 349, 12), 'status', int_173451)
    # SSA join for if statement (line 346)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'full_output' (line 351)
    full_output_173452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 7), 'full_output')
    # Testing the type of an if condition (line 351)
    if_condition_173453 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 351, 4), full_output_173452)
    # Assigning a type to the variable 'if_condition_173453' (line 351)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 351, 4), 'if_condition_173453', if_condition_173453)
    # SSA begins for if statement (line 351)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Dict to a Name (line 352):
    
    # Assigning a Dict to a Name (line 352):
    
    # Obtaining an instance of the builtin type 'dict' (line 352)
    dict_173454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 15), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 352)
    # Adding element type (key, value) (line 352)
    str_173455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 16), 'str', 'nit')
    # Getting the type of 'condition' (line 352)
    condition_173456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 23), 'condition')
    # Obtaining the member 'iteration' of a type (line 352)
    iteration_173457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 23), condition_173456, 'iteration')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 352, 15), dict_173454, (str_173455, iteration_173457))
    # Adding element type (key, value) (line 352)
    str_173458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 353, 16), 'str', 'fun')
    # Getting the type of 'Fx' (line 353)
    Fx_173459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 23), 'Fx')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 352, 15), dict_173454, (str_173458, Fx_173459))
    # Adding element type (key, value) (line 352)
    str_173460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 354, 16), 'str', 'status')
    # Getting the type of 'status' (line 354)
    status_173461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 26), 'status')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 352, 15), dict_173454, (str_173460, status_173461))
    # Adding element type (key, value) (line 352)
    str_173462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, 16), 'str', 'success')
    
    # Getting the type of 'status' (line 355)
    status_173463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 27), 'status')
    int_173464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, 37), 'int')
    # Applying the binary operator '==' (line 355)
    result_eq_173465 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 27), '==', status_173463, int_173464)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 352, 15), dict_173454, (str_173462, result_eq_173465))
    # Adding element type (key, value) (line 352)
    str_173466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 356, 16), 'str', 'message')
    
    # Obtaining the type of the subscript
    # Getting the type of 'status' (line 360)
    status_173467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 30), 'status')
    
    # Obtaining an instance of the builtin type 'dict' (line 356)
    dict_173468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 356, 27), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 356)
    # Adding element type (key, value) (line 356)
    int_173469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 356, 28), 'int')
    str_173470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 356, 31), 'str', 'A solution was found at the specified tolerance.')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 356, 27), dict_173468, (int_173469, str_173470))
    # Adding element type (key, value) (line 356)
    int_173471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 358, 28), 'int')
    str_173472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 358, 31), 'str', 'The maximum number of iterations allowed has been reached.')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 356, 27), dict_173468, (int_173471, str_173472))
    
    # Obtaining the member '__getitem__' of a type (line 356)
    getitem___173473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 27), dict_173468, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 356)
    subscript_call_result_173474 = invoke(stypy.reporting.localization.Localization(__file__, 356, 27), getitem___173473, status_173467)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 352, 15), dict_173454, (str_173466, subscript_call_result_173474))
    
    # Assigning a type to the variable 'info' (line 352)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'info', dict_173454)
    
    # Obtaining an instance of the builtin type 'tuple' (line 362)
    tuple_173475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 362, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 362)
    # Adding element type (line 362)
    
    # Call to _array_like(...): (line 362)
    # Processing the call arguments (line 362)
    # Getting the type of 'x' (line 362)
    x_173477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 27), 'x', False)
    # Getting the type of 'x0' (line 362)
    x0_173478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 30), 'x0', False)
    # Processing the call keyword arguments (line 362)
    kwargs_173479 = {}
    # Getting the type of '_array_like' (line 362)
    _array_like_173476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 15), '_array_like', False)
    # Calling _array_like(args, kwargs) (line 362)
    _array_like_call_result_173480 = invoke(stypy.reporting.localization.Localization(__file__, 362, 15), _array_like_173476, *[x_173477, x0_173478], **kwargs_173479)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 362, 15), tuple_173475, _array_like_call_result_173480)
    # Adding element type (line 362)
    # Getting the type of 'info' (line 362)
    info_173481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 35), 'info')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 362, 15), tuple_173475, info_173481)
    
    # Assigning a type to the variable 'stypy_return_type' (line 362)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 362, 8), 'stypy_return_type', tuple_173475)
    # SSA branch for the else part of an if statement (line 351)
    module_type_store.open_ssa_branch('else')
    
    # Call to _array_like(...): (line 364)
    # Processing the call arguments (line 364)
    # Getting the type of 'x' (line 364)
    x_173483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 27), 'x', False)
    # Getting the type of 'x0' (line 364)
    x0_173484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 30), 'x0', False)
    # Processing the call keyword arguments (line 364)
    kwargs_173485 = {}
    # Getting the type of '_array_like' (line 364)
    _array_like_173482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 15), '_array_like', False)
    # Calling _array_like(args, kwargs) (line 364)
    _array_like_call_result_173486 = invoke(stypy.reporting.localization.Localization(__file__, 364, 15), _array_like_173482, *[x_173483, x0_173484], **kwargs_173485)
    
    # Assigning a type to the variable 'stypy_return_type' (line 364)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 364, 8), 'stypy_return_type', _array_like_call_result_173486)
    # SSA join for if statement (line 351)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'nonlin_solve(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'nonlin_solve' in the type store
    # Getting the type of 'stypy_return_type' (line 223)
    stypy_return_type_173487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_173487)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'nonlin_solve'
    return stypy_return_type_173487

# Assigning a type to the variable 'nonlin_solve' (line 223)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 223, 0), 'nonlin_solve', nonlin_solve)

# Call to _set_doc(...): (line 366)
# Processing the call arguments (line 366)
# Getting the type of 'nonlin_solve' (line 366)
nonlin_solve_173489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 9), 'nonlin_solve', False)
# Processing the call keyword arguments (line 366)
kwargs_173490 = {}
# Getting the type of '_set_doc' (line 366)
_set_doc_173488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 0), '_set_doc', False)
# Calling _set_doc(args, kwargs) (line 366)
_set_doc_call_result_173491 = invoke(stypy.reporting.localization.Localization(__file__, 366, 0), _set_doc_173488, *[nonlin_solve_173489], **kwargs_173490)


@norecursion
def _nonlin_line_search(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_173492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 369, 53), 'str', 'armijo')
    float_173493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 369, 69), 'float')
    float_173494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 370, 29), 'float')
    defaults = [str_173492, float_173493, float_173494]
    # Create a new context for function '_nonlin_line_search'
    module_type_store = module_type_store.open_function_context('_nonlin_line_search', 369, 0, False)
    
    # Passed parameters checking function
    _nonlin_line_search.stypy_localization = localization
    _nonlin_line_search.stypy_type_of_self = None
    _nonlin_line_search.stypy_type_store = module_type_store
    _nonlin_line_search.stypy_function_name = '_nonlin_line_search'
    _nonlin_line_search.stypy_param_names_list = ['func', 'x', 'Fx', 'dx', 'search_type', 'rdiff', 'smin']
    _nonlin_line_search.stypy_varargs_param_name = None
    _nonlin_line_search.stypy_kwargs_param_name = None
    _nonlin_line_search.stypy_call_defaults = defaults
    _nonlin_line_search.stypy_call_varargs = varargs
    _nonlin_line_search.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_nonlin_line_search', ['func', 'x', 'Fx', 'dx', 'search_type', 'rdiff', 'smin'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_nonlin_line_search', localization, ['func', 'x', 'Fx', 'dx', 'search_type', 'rdiff', 'smin'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_nonlin_line_search(...)' code ##################

    
    # Assigning a List to a Name (line 371):
    
    # Assigning a List to a Name (line 371):
    
    # Obtaining an instance of the builtin type 'list' (line 371)
    list_173495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 371, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 371)
    # Adding element type (line 371)
    int_173496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 371, 13), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 371, 12), list_173495, int_173496)
    
    # Assigning a type to the variable 'tmp_s' (line 371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 371, 4), 'tmp_s', list_173495)
    
    # Assigning a List to a Name (line 372):
    
    # Assigning a List to a Name (line 372):
    
    # Obtaining an instance of the builtin type 'list' (line 372)
    list_173497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 372, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 372)
    # Adding element type (line 372)
    # Getting the type of 'Fx' (line 372)
    Fx_173498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 14), 'Fx')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 372, 13), list_173497, Fx_173498)
    
    # Assigning a type to the variable 'tmp_Fx' (line 372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 4), 'tmp_Fx', list_173497)
    
    # Assigning a List to a Name (line 373):
    
    # Assigning a List to a Name (line 373):
    
    # Obtaining an instance of the builtin type 'list' (line 373)
    list_173499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 373, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 373)
    # Adding element type (line 373)
    
    # Call to norm(...): (line 373)
    # Processing the call arguments (line 373)
    # Getting the type of 'Fx' (line 373)
    Fx_173501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 20), 'Fx', False)
    # Processing the call keyword arguments (line 373)
    kwargs_173502 = {}
    # Getting the type of 'norm' (line 373)
    norm_173500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 15), 'norm', False)
    # Calling norm(args, kwargs) (line 373)
    norm_call_result_173503 = invoke(stypy.reporting.localization.Localization(__file__, 373, 15), norm_173500, *[Fx_173501], **kwargs_173502)
    
    int_173504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 373, 25), 'int')
    # Applying the binary operator '**' (line 373)
    result_pow_173505 = python_operator(stypy.reporting.localization.Localization(__file__, 373, 15), '**', norm_call_result_173503, int_173504)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 373, 14), list_173499, result_pow_173505)
    
    # Assigning a type to the variable 'tmp_phi' (line 373)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 373, 4), 'tmp_phi', list_173499)
    
    # Assigning a BinOp to a Name (line 374):
    
    # Assigning a BinOp to a Name (line 374):
    
    # Call to norm(...): (line 374)
    # Processing the call arguments (line 374)
    # Getting the type of 'x' (line 374)
    x_173507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 18), 'x', False)
    # Processing the call keyword arguments (line 374)
    kwargs_173508 = {}
    # Getting the type of 'norm' (line 374)
    norm_173506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 13), 'norm', False)
    # Calling norm(args, kwargs) (line 374)
    norm_call_result_173509 = invoke(stypy.reporting.localization.Localization(__file__, 374, 13), norm_173506, *[x_173507], **kwargs_173508)
    
    
    # Call to norm(...): (line 374)
    # Processing the call arguments (line 374)
    # Getting the type of 'dx' (line 374)
    dx_173511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 28), 'dx', False)
    # Processing the call keyword arguments (line 374)
    kwargs_173512 = {}
    # Getting the type of 'norm' (line 374)
    norm_173510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 23), 'norm', False)
    # Calling norm(args, kwargs) (line 374)
    norm_call_result_173513 = invoke(stypy.reporting.localization.Localization(__file__, 374, 23), norm_173510, *[dx_173511], **kwargs_173512)
    
    # Applying the binary operator 'div' (line 374)
    result_div_173514 = python_operator(stypy.reporting.localization.Localization(__file__, 374, 13), 'div', norm_call_result_173509, norm_call_result_173513)
    
    # Assigning a type to the variable 's_norm' (line 374)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 374, 4), 's_norm', result_div_173514)

    @norecursion
    def phi(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 376)
        True_173515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 21), 'True')
        defaults = [True_173515]
        # Create a new context for function 'phi'
        module_type_store = module_type_store.open_function_context('phi', 376, 4, False)
        
        # Passed parameters checking function
        phi.stypy_localization = localization
        phi.stypy_type_of_self = None
        phi.stypy_type_store = module_type_store
        phi.stypy_function_name = 'phi'
        phi.stypy_param_names_list = ['s', 'store']
        phi.stypy_varargs_param_name = None
        phi.stypy_kwargs_param_name = None
        phi.stypy_call_defaults = defaults
        phi.stypy_call_varargs = varargs
        phi.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'phi', ['s', 'store'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'phi', localization, ['s', 'store'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'phi(...)' code ##################

        
        
        # Getting the type of 's' (line 377)
        s_173516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 11), 's')
        
        # Obtaining the type of the subscript
        int_173517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 377, 22), 'int')
        # Getting the type of 'tmp_s' (line 377)
        tmp_s_173518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 16), 'tmp_s')
        # Obtaining the member '__getitem__' of a type (line 377)
        getitem___173519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 377, 16), tmp_s_173518, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 377)
        subscript_call_result_173520 = invoke(stypy.reporting.localization.Localization(__file__, 377, 16), getitem___173519, int_173517)
        
        # Applying the binary operator '==' (line 377)
        result_eq_173521 = python_operator(stypy.reporting.localization.Localization(__file__, 377, 11), '==', s_173516, subscript_call_result_173520)
        
        # Testing the type of an if condition (line 377)
        if_condition_173522 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 377, 8), result_eq_173521)
        # Assigning a type to the variable 'if_condition_173522' (line 377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 8), 'if_condition_173522', if_condition_173522)
        # SSA begins for if statement (line 377)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining the type of the subscript
        int_173523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 378, 27), 'int')
        # Getting the type of 'tmp_phi' (line 378)
        tmp_phi_173524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 19), 'tmp_phi')
        # Obtaining the member '__getitem__' of a type (line 378)
        getitem___173525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 378, 19), tmp_phi_173524, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 378)
        subscript_call_result_173526 = invoke(stypy.reporting.localization.Localization(__file__, 378, 19), getitem___173525, int_173523)
        
        # Assigning a type to the variable 'stypy_return_type' (line 378)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 378, 12), 'stypy_return_type', subscript_call_result_173526)
        # SSA join for if statement (line 377)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 379):
        
        # Assigning a BinOp to a Name (line 379):
        # Getting the type of 'x' (line 379)
        x_173527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 13), 'x')
        # Getting the type of 's' (line 379)
        s_173528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 17), 's')
        # Getting the type of 'dx' (line 379)
        dx_173529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 19), 'dx')
        # Applying the binary operator '*' (line 379)
        result_mul_173530 = python_operator(stypy.reporting.localization.Localization(__file__, 379, 17), '*', s_173528, dx_173529)
        
        # Applying the binary operator '+' (line 379)
        result_add_173531 = python_operator(stypy.reporting.localization.Localization(__file__, 379, 13), '+', x_173527, result_mul_173530)
        
        # Assigning a type to the variable 'xt' (line 379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 8), 'xt', result_add_173531)
        
        # Assigning a Call to a Name (line 380):
        
        # Assigning a Call to a Name (line 380):
        
        # Call to func(...): (line 380)
        # Processing the call arguments (line 380)
        # Getting the type of 'xt' (line 380)
        xt_173533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 17), 'xt', False)
        # Processing the call keyword arguments (line 380)
        kwargs_173534 = {}
        # Getting the type of 'func' (line 380)
        func_173532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 12), 'func', False)
        # Calling func(args, kwargs) (line 380)
        func_call_result_173535 = invoke(stypy.reporting.localization.Localization(__file__, 380, 12), func_173532, *[xt_173533], **kwargs_173534)
        
        # Assigning a type to the variable 'v' (line 380)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 380, 8), 'v', func_call_result_173535)
        
        # Assigning a BinOp to a Name (line 381):
        
        # Assigning a BinOp to a Name (line 381):
        
        # Call to _safe_norm(...): (line 381)
        # Processing the call arguments (line 381)
        # Getting the type of 'v' (line 381)
        v_173537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 23), 'v', False)
        # Processing the call keyword arguments (line 381)
        kwargs_173538 = {}
        # Getting the type of '_safe_norm' (line 381)
        _safe_norm_173536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 12), '_safe_norm', False)
        # Calling _safe_norm(args, kwargs) (line 381)
        _safe_norm_call_result_173539 = invoke(stypy.reporting.localization.Localization(__file__, 381, 12), _safe_norm_173536, *[v_173537], **kwargs_173538)
        
        int_173540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 381, 27), 'int')
        # Applying the binary operator '**' (line 381)
        result_pow_173541 = python_operator(stypy.reporting.localization.Localization(__file__, 381, 12), '**', _safe_norm_call_result_173539, int_173540)
        
        # Assigning a type to the variable 'p' (line 381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 381, 8), 'p', result_pow_173541)
        
        # Getting the type of 'store' (line 382)
        store_173542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 11), 'store')
        # Testing the type of an if condition (line 382)
        if_condition_173543 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 382, 8), store_173542)
        # Assigning a type to the variable 'if_condition_173543' (line 382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 8), 'if_condition_173543', if_condition_173543)
        # SSA begins for if statement (line 382)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Subscript (line 383):
        
        # Assigning a Name to a Subscript (line 383):
        # Getting the type of 's' (line 383)
        s_173544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 23), 's')
        # Getting the type of 'tmp_s' (line 383)
        tmp_s_173545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 12), 'tmp_s')
        int_173546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 383, 18), 'int')
        # Storing an element on a container (line 383)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 383, 12), tmp_s_173545, (int_173546, s_173544))
        
        # Assigning a Name to a Subscript (line 384):
        
        # Assigning a Name to a Subscript (line 384):
        # Getting the type of 'p' (line 384)
        p_173547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 25), 'p')
        # Getting the type of 'tmp_phi' (line 384)
        tmp_phi_173548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 12), 'tmp_phi')
        int_173549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 384, 20), 'int')
        # Storing an element on a container (line 384)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 384, 12), tmp_phi_173548, (int_173549, p_173547))
        
        # Assigning a Name to a Subscript (line 385):
        
        # Assigning a Name to a Subscript (line 385):
        # Getting the type of 'v' (line 385)
        v_173550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 24), 'v')
        # Getting the type of 'tmp_Fx' (line 385)
        tmp_Fx_173551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 12), 'tmp_Fx')
        int_173552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 385, 19), 'int')
        # Storing an element on a container (line 385)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 385, 12), tmp_Fx_173551, (int_173552, v_173550))
        # SSA join for if statement (line 382)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'p' (line 386)
        p_173553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 15), 'p')
        # Assigning a type to the variable 'stypy_return_type' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 8), 'stypy_return_type', p_173553)
        
        # ################# End of 'phi(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'phi' in the type store
        # Getting the type of 'stypy_return_type' (line 376)
        stypy_return_type_173554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_173554)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'phi'
        return stypy_return_type_173554

    # Assigning a type to the variable 'phi' (line 376)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 4), 'phi', phi)

    @norecursion
    def derphi(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'derphi'
        module_type_store = module_type_store.open_function_context('derphi', 388, 4, False)
        
        # Passed parameters checking function
        derphi.stypy_localization = localization
        derphi.stypy_type_of_self = None
        derphi.stypy_type_store = module_type_store
        derphi.stypy_function_name = 'derphi'
        derphi.stypy_param_names_list = ['s']
        derphi.stypy_varargs_param_name = None
        derphi.stypy_kwargs_param_name = None
        derphi.stypy_call_defaults = defaults
        derphi.stypy_call_varargs = varargs
        derphi.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'derphi', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'derphi', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'derphi(...)' code ##################

        
        # Assigning a BinOp to a Name (line 389):
        
        # Assigning a BinOp to a Name (line 389):
        
        # Call to abs(...): (line 389)
        # Processing the call arguments (line 389)
        # Getting the type of 's' (line 389)
        s_173556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 18), 's', False)
        # Processing the call keyword arguments (line 389)
        kwargs_173557 = {}
        # Getting the type of 'abs' (line 389)
        abs_173555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 14), 'abs', False)
        # Calling abs(args, kwargs) (line 389)
        abs_call_result_173558 = invoke(stypy.reporting.localization.Localization(__file__, 389, 14), abs_173555, *[s_173556], **kwargs_173557)
        
        # Getting the type of 's_norm' (line 389)
        s_norm_173559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 23), 's_norm')
        # Applying the binary operator '+' (line 389)
        result_add_173560 = python_operator(stypy.reporting.localization.Localization(__file__, 389, 14), '+', abs_call_result_173558, s_norm_173559)
        
        int_173561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 389, 32), 'int')
        # Applying the binary operator '+' (line 389)
        result_add_173562 = python_operator(stypy.reporting.localization.Localization(__file__, 389, 30), '+', result_add_173560, int_173561)
        
        # Getting the type of 'rdiff' (line 389)
        rdiff_173563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 37), 'rdiff')
        # Applying the binary operator '*' (line 389)
        result_mul_173564 = python_operator(stypy.reporting.localization.Localization(__file__, 389, 13), '*', result_add_173562, rdiff_173563)
        
        # Assigning a type to the variable 'ds' (line 389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), 'ds', result_mul_173564)
        
        # Call to phi(...): (line 390)
        # Processing the call arguments (line 390)
        # Getting the type of 's' (line 390)
        s_173566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 20), 's', False)
        # Getting the type of 'ds' (line 390)
        ds_173567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 22), 'ds', False)
        # Applying the binary operator '+' (line 390)
        result_add_173568 = python_operator(stypy.reporting.localization.Localization(__file__, 390, 20), '+', s_173566, ds_173567)
        
        # Processing the call keyword arguments (line 390)
        # Getting the type of 'False' (line 390)
        False_173569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 32), 'False', False)
        keyword_173570 = False_173569
        kwargs_173571 = {'store': keyword_173570}
        # Getting the type of 'phi' (line 390)
        phi_173565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 16), 'phi', False)
        # Calling phi(args, kwargs) (line 390)
        phi_call_result_173572 = invoke(stypy.reporting.localization.Localization(__file__, 390, 16), phi_173565, *[result_add_173568], **kwargs_173571)
        
        
        # Call to phi(...): (line 390)
        # Processing the call arguments (line 390)
        # Getting the type of 's' (line 390)
        s_173574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 45), 's', False)
        # Processing the call keyword arguments (line 390)
        kwargs_173575 = {}
        # Getting the type of 'phi' (line 390)
        phi_173573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 41), 'phi', False)
        # Calling phi(args, kwargs) (line 390)
        phi_call_result_173576 = invoke(stypy.reporting.localization.Localization(__file__, 390, 41), phi_173573, *[s_173574], **kwargs_173575)
        
        # Applying the binary operator '-' (line 390)
        result_sub_173577 = python_operator(stypy.reporting.localization.Localization(__file__, 390, 16), '-', phi_call_result_173572, phi_call_result_173576)
        
        # Getting the type of 'ds' (line 390)
        ds_173578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 51), 'ds')
        # Applying the binary operator 'div' (line 390)
        result_div_173579 = python_operator(stypy.reporting.localization.Localization(__file__, 390, 15), 'div', result_sub_173577, ds_173578)
        
        # Assigning a type to the variable 'stypy_return_type' (line 390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 8), 'stypy_return_type', result_div_173579)
        
        # ################# End of 'derphi(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'derphi' in the type store
        # Getting the type of 'stypy_return_type' (line 388)
        stypy_return_type_173580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_173580)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'derphi'
        return stypy_return_type_173580

    # Assigning a type to the variable 'derphi' (line 388)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 388, 4), 'derphi', derphi)
    
    
    # Getting the type of 'search_type' (line 392)
    search_type_173581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 7), 'search_type')
    str_173582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 22), 'str', 'wolfe')
    # Applying the binary operator '==' (line 392)
    result_eq_173583 = python_operator(stypy.reporting.localization.Localization(__file__, 392, 7), '==', search_type_173581, str_173582)
    
    # Testing the type of an if condition (line 392)
    if_condition_173584 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 392, 4), result_eq_173583)
    # Assigning a type to the variable 'if_condition_173584' (line 392)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 392, 4), 'if_condition_173584', if_condition_173584)
    # SSA begins for if statement (line 392)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 393):
    
    # Assigning a Subscript to a Name (line 393):
    
    # Obtaining the type of the subscript
    int_173585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 393, 8), 'int')
    
    # Call to scalar_search_wolfe1(...): (line 393)
    # Processing the call arguments (line 393)
    # Getting the type of 'phi' (line 393)
    phi_173587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 45), 'phi', False)
    # Getting the type of 'derphi' (line 393)
    derphi_173588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 50), 'derphi', False)
    
    # Obtaining the type of the subscript
    int_173589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 393, 66), 'int')
    # Getting the type of 'tmp_phi' (line 393)
    tmp_phi_173590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 58), 'tmp_phi', False)
    # Obtaining the member '__getitem__' of a type (line 393)
    getitem___173591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 58), tmp_phi_173590, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 393)
    subscript_call_result_173592 = invoke(stypy.reporting.localization.Localization(__file__, 393, 58), getitem___173591, int_173589)
    
    # Processing the call keyword arguments (line 393)
    float_173593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 394, 50), 'float')
    keyword_173594 = float_173593
    # Getting the type of 'smin' (line 394)
    smin_173595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 61), 'smin', False)
    keyword_173596 = smin_173595
    kwargs_173597 = {'xtol': keyword_173594, 'amin': keyword_173596}
    # Getting the type of 'scalar_search_wolfe1' (line 393)
    scalar_search_wolfe1_173586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 24), 'scalar_search_wolfe1', False)
    # Calling scalar_search_wolfe1(args, kwargs) (line 393)
    scalar_search_wolfe1_call_result_173598 = invoke(stypy.reporting.localization.Localization(__file__, 393, 24), scalar_search_wolfe1_173586, *[phi_173587, derphi_173588, subscript_call_result_173592], **kwargs_173597)
    
    # Obtaining the member '__getitem__' of a type (line 393)
    getitem___173599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 8), scalar_search_wolfe1_call_result_173598, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 393)
    subscript_call_result_173600 = invoke(stypy.reporting.localization.Localization(__file__, 393, 8), getitem___173599, int_173585)
    
    # Assigning a type to the variable 'tuple_var_assignment_172996' (line 393)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 8), 'tuple_var_assignment_172996', subscript_call_result_173600)
    
    # Assigning a Subscript to a Name (line 393):
    
    # Obtaining the type of the subscript
    int_173601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 393, 8), 'int')
    
    # Call to scalar_search_wolfe1(...): (line 393)
    # Processing the call arguments (line 393)
    # Getting the type of 'phi' (line 393)
    phi_173603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 45), 'phi', False)
    # Getting the type of 'derphi' (line 393)
    derphi_173604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 50), 'derphi', False)
    
    # Obtaining the type of the subscript
    int_173605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 393, 66), 'int')
    # Getting the type of 'tmp_phi' (line 393)
    tmp_phi_173606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 58), 'tmp_phi', False)
    # Obtaining the member '__getitem__' of a type (line 393)
    getitem___173607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 58), tmp_phi_173606, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 393)
    subscript_call_result_173608 = invoke(stypy.reporting.localization.Localization(__file__, 393, 58), getitem___173607, int_173605)
    
    # Processing the call keyword arguments (line 393)
    float_173609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 394, 50), 'float')
    keyword_173610 = float_173609
    # Getting the type of 'smin' (line 394)
    smin_173611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 61), 'smin', False)
    keyword_173612 = smin_173611
    kwargs_173613 = {'xtol': keyword_173610, 'amin': keyword_173612}
    # Getting the type of 'scalar_search_wolfe1' (line 393)
    scalar_search_wolfe1_173602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 24), 'scalar_search_wolfe1', False)
    # Calling scalar_search_wolfe1(args, kwargs) (line 393)
    scalar_search_wolfe1_call_result_173614 = invoke(stypy.reporting.localization.Localization(__file__, 393, 24), scalar_search_wolfe1_173602, *[phi_173603, derphi_173604, subscript_call_result_173608], **kwargs_173613)
    
    # Obtaining the member '__getitem__' of a type (line 393)
    getitem___173615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 8), scalar_search_wolfe1_call_result_173614, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 393)
    subscript_call_result_173616 = invoke(stypy.reporting.localization.Localization(__file__, 393, 8), getitem___173615, int_173601)
    
    # Assigning a type to the variable 'tuple_var_assignment_172997' (line 393)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 8), 'tuple_var_assignment_172997', subscript_call_result_173616)
    
    # Assigning a Subscript to a Name (line 393):
    
    # Obtaining the type of the subscript
    int_173617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 393, 8), 'int')
    
    # Call to scalar_search_wolfe1(...): (line 393)
    # Processing the call arguments (line 393)
    # Getting the type of 'phi' (line 393)
    phi_173619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 45), 'phi', False)
    # Getting the type of 'derphi' (line 393)
    derphi_173620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 50), 'derphi', False)
    
    # Obtaining the type of the subscript
    int_173621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 393, 66), 'int')
    # Getting the type of 'tmp_phi' (line 393)
    tmp_phi_173622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 58), 'tmp_phi', False)
    # Obtaining the member '__getitem__' of a type (line 393)
    getitem___173623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 58), tmp_phi_173622, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 393)
    subscript_call_result_173624 = invoke(stypy.reporting.localization.Localization(__file__, 393, 58), getitem___173623, int_173621)
    
    # Processing the call keyword arguments (line 393)
    float_173625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 394, 50), 'float')
    keyword_173626 = float_173625
    # Getting the type of 'smin' (line 394)
    smin_173627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 61), 'smin', False)
    keyword_173628 = smin_173627
    kwargs_173629 = {'xtol': keyword_173626, 'amin': keyword_173628}
    # Getting the type of 'scalar_search_wolfe1' (line 393)
    scalar_search_wolfe1_173618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 24), 'scalar_search_wolfe1', False)
    # Calling scalar_search_wolfe1(args, kwargs) (line 393)
    scalar_search_wolfe1_call_result_173630 = invoke(stypy.reporting.localization.Localization(__file__, 393, 24), scalar_search_wolfe1_173618, *[phi_173619, derphi_173620, subscript_call_result_173624], **kwargs_173629)
    
    # Obtaining the member '__getitem__' of a type (line 393)
    getitem___173631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 8), scalar_search_wolfe1_call_result_173630, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 393)
    subscript_call_result_173632 = invoke(stypy.reporting.localization.Localization(__file__, 393, 8), getitem___173631, int_173617)
    
    # Assigning a type to the variable 'tuple_var_assignment_172998' (line 393)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 8), 'tuple_var_assignment_172998', subscript_call_result_173632)
    
    # Assigning a Name to a Name (line 393):
    # Getting the type of 'tuple_var_assignment_172996' (line 393)
    tuple_var_assignment_172996_173633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 8), 'tuple_var_assignment_172996')
    # Assigning a type to the variable 's' (line 393)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 8), 's', tuple_var_assignment_172996_173633)
    
    # Assigning a Name to a Name (line 393):
    # Getting the type of 'tuple_var_assignment_172997' (line 393)
    tuple_var_assignment_172997_173634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 8), 'tuple_var_assignment_172997')
    # Assigning a type to the variable 'phi1' (line 393)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 11), 'phi1', tuple_var_assignment_172997_173634)
    
    # Assigning a Name to a Name (line 393):
    # Getting the type of 'tuple_var_assignment_172998' (line 393)
    tuple_var_assignment_172998_173635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 8), 'tuple_var_assignment_172998')
    # Assigning a type to the variable 'phi0' (line 393)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 17), 'phi0', tuple_var_assignment_172998_173635)
    # SSA branch for the else part of an if statement (line 392)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'search_type' (line 395)
    search_type_173636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 9), 'search_type')
    str_173637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 395, 24), 'str', 'armijo')
    # Applying the binary operator '==' (line 395)
    result_eq_173638 = python_operator(stypy.reporting.localization.Localization(__file__, 395, 9), '==', search_type_173636, str_173637)
    
    # Testing the type of an if condition (line 395)
    if_condition_173639 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 395, 9), result_eq_173638)
    # Assigning a type to the variable 'if_condition_173639' (line 395)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 395, 9), 'if_condition_173639', if_condition_173639)
    # SSA begins for if statement (line 395)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 396):
    
    # Assigning a Subscript to a Name (line 396):
    
    # Obtaining the type of the subscript
    int_173640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 396, 8), 'int')
    
    # Call to scalar_search_armijo(...): (line 396)
    # Processing the call arguments (line 396)
    # Getting the type of 'phi' (line 396)
    phi_173642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 39), 'phi', False)
    
    # Obtaining the type of the subscript
    int_173643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 396, 52), 'int')
    # Getting the type of 'tmp_phi' (line 396)
    tmp_phi_173644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 44), 'tmp_phi', False)
    # Obtaining the member '__getitem__' of a type (line 396)
    getitem___173645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 396, 44), tmp_phi_173644, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 396)
    subscript_call_result_173646 = invoke(stypy.reporting.localization.Localization(__file__, 396, 44), getitem___173645, int_173643)
    
    
    
    # Obtaining the type of the subscript
    int_173647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 396, 65), 'int')
    # Getting the type of 'tmp_phi' (line 396)
    tmp_phi_173648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 57), 'tmp_phi', False)
    # Obtaining the member '__getitem__' of a type (line 396)
    getitem___173649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 396, 57), tmp_phi_173648, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 396)
    subscript_call_result_173650 = invoke(stypy.reporting.localization.Localization(__file__, 396, 57), getitem___173649, int_173647)
    
    # Applying the 'usub' unary operator (line 396)
    result___neg___173651 = python_operator(stypy.reporting.localization.Localization(__file__, 396, 56), 'usub', subscript_call_result_173650)
    
    # Processing the call keyword arguments (line 396)
    # Getting the type of 'smin' (line 397)
    smin_173652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 44), 'smin', False)
    keyword_173653 = smin_173652
    kwargs_173654 = {'amin': keyword_173653}
    # Getting the type of 'scalar_search_armijo' (line 396)
    scalar_search_armijo_173641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 18), 'scalar_search_armijo', False)
    # Calling scalar_search_armijo(args, kwargs) (line 396)
    scalar_search_armijo_call_result_173655 = invoke(stypy.reporting.localization.Localization(__file__, 396, 18), scalar_search_armijo_173641, *[phi_173642, subscript_call_result_173646, result___neg___173651], **kwargs_173654)
    
    # Obtaining the member '__getitem__' of a type (line 396)
    getitem___173656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 396, 8), scalar_search_armijo_call_result_173655, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 396)
    subscript_call_result_173657 = invoke(stypy.reporting.localization.Localization(__file__, 396, 8), getitem___173656, int_173640)
    
    # Assigning a type to the variable 'tuple_var_assignment_172999' (line 396)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 396, 8), 'tuple_var_assignment_172999', subscript_call_result_173657)
    
    # Assigning a Subscript to a Name (line 396):
    
    # Obtaining the type of the subscript
    int_173658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 396, 8), 'int')
    
    # Call to scalar_search_armijo(...): (line 396)
    # Processing the call arguments (line 396)
    # Getting the type of 'phi' (line 396)
    phi_173660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 39), 'phi', False)
    
    # Obtaining the type of the subscript
    int_173661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 396, 52), 'int')
    # Getting the type of 'tmp_phi' (line 396)
    tmp_phi_173662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 44), 'tmp_phi', False)
    # Obtaining the member '__getitem__' of a type (line 396)
    getitem___173663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 396, 44), tmp_phi_173662, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 396)
    subscript_call_result_173664 = invoke(stypy.reporting.localization.Localization(__file__, 396, 44), getitem___173663, int_173661)
    
    
    
    # Obtaining the type of the subscript
    int_173665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 396, 65), 'int')
    # Getting the type of 'tmp_phi' (line 396)
    tmp_phi_173666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 57), 'tmp_phi', False)
    # Obtaining the member '__getitem__' of a type (line 396)
    getitem___173667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 396, 57), tmp_phi_173666, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 396)
    subscript_call_result_173668 = invoke(stypy.reporting.localization.Localization(__file__, 396, 57), getitem___173667, int_173665)
    
    # Applying the 'usub' unary operator (line 396)
    result___neg___173669 = python_operator(stypy.reporting.localization.Localization(__file__, 396, 56), 'usub', subscript_call_result_173668)
    
    # Processing the call keyword arguments (line 396)
    # Getting the type of 'smin' (line 397)
    smin_173670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 44), 'smin', False)
    keyword_173671 = smin_173670
    kwargs_173672 = {'amin': keyword_173671}
    # Getting the type of 'scalar_search_armijo' (line 396)
    scalar_search_armijo_173659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 18), 'scalar_search_armijo', False)
    # Calling scalar_search_armijo(args, kwargs) (line 396)
    scalar_search_armijo_call_result_173673 = invoke(stypy.reporting.localization.Localization(__file__, 396, 18), scalar_search_armijo_173659, *[phi_173660, subscript_call_result_173664, result___neg___173669], **kwargs_173672)
    
    # Obtaining the member '__getitem__' of a type (line 396)
    getitem___173674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 396, 8), scalar_search_armijo_call_result_173673, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 396)
    subscript_call_result_173675 = invoke(stypy.reporting.localization.Localization(__file__, 396, 8), getitem___173674, int_173658)
    
    # Assigning a type to the variable 'tuple_var_assignment_173000' (line 396)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 396, 8), 'tuple_var_assignment_173000', subscript_call_result_173675)
    
    # Assigning a Name to a Name (line 396):
    # Getting the type of 'tuple_var_assignment_172999' (line 396)
    tuple_var_assignment_172999_173676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 8), 'tuple_var_assignment_172999')
    # Assigning a type to the variable 's' (line 396)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 396, 8), 's', tuple_var_assignment_172999_173676)
    
    # Assigning a Name to a Name (line 396):
    # Getting the type of 'tuple_var_assignment_173000' (line 396)
    tuple_var_assignment_173000_173677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 8), 'tuple_var_assignment_173000')
    # Assigning a type to the variable 'phi1' (line 396)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 396, 11), 'phi1', tuple_var_assignment_173000_173677)
    # SSA join for if statement (line 395)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 392)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 399)
    # Getting the type of 's' (line 399)
    s_173678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 7), 's')
    # Getting the type of 'None' (line 399)
    None_173679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 12), 'None')
    
    (may_be_173680, more_types_in_union_173681) = may_be_none(s_173678, None_173679)

    if may_be_173680:

        if more_types_in_union_173681:
            # Runtime conditional SSA (line 399)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 402):
        
        # Assigning a Num to a Name (line 402):
        float_173682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 402, 12), 'float')
        # Assigning a type to the variable 's' (line 402)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 402, 8), 's', float_173682)

        if more_types_in_union_173681:
            # SSA join for if statement (line 399)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a BinOp to a Name (line 404):
    
    # Assigning a BinOp to a Name (line 404):
    # Getting the type of 'x' (line 404)
    x_173683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 8), 'x')
    # Getting the type of 's' (line 404)
    s_173684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 12), 's')
    # Getting the type of 'dx' (line 404)
    dx_173685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 14), 'dx')
    # Applying the binary operator '*' (line 404)
    result_mul_173686 = python_operator(stypy.reporting.localization.Localization(__file__, 404, 12), '*', s_173684, dx_173685)
    
    # Applying the binary operator '+' (line 404)
    result_add_173687 = python_operator(stypy.reporting.localization.Localization(__file__, 404, 8), '+', x_173683, result_mul_173686)
    
    # Assigning a type to the variable 'x' (line 404)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 404, 4), 'x', result_add_173687)
    
    
    # Getting the type of 's' (line 405)
    s_173688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 7), 's')
    
    # Obtaining the type of the subscript
    int_173689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 405, 18), 'int')
    # Getting the type of 'tmp_s' (line 405)
    tmp_s_173690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 12), 'tmp_s')
    # Obtaining the member '__getitem__' of a type (line 405)
    getitem___173691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 405, 12), tmp_s_173690, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 405)
    subscript_call_result_173692 = invoke(stypy.reporting.localization.Localization(__file__, 405, 12), getitem___173691, int_173689)
    
    # Applying the binary operator '==' (line 405)
    result_eq_173693 = python_operator(stypy.reporting.localization.Localization(__file__, 405, 7), '==', s_173688, subscript_call_result_173692)
    
    # Testing the type of an if condition (line 405)
    if_condition_173694 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 405, 4), result_eq_173693)
    # Assigning a type to the variable 'if_condition_173694' (line 405)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 405, 4), 'if_condition_173694', if_condition_173694)
    # SSA begins for if statement (line 405)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 406):
    
    # Assigning a Subscript to a Name (line 406):
    
    # Obtaining the type of the subscript
    int_173695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 406, 20), 'int')
    # Getting the type of 'tmp_Fx' (line 406)
    tmp_Fx_173696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 13), 'tmp_Fx')
    # Obtaining the member '__getitem__' of a type (line 406)
    getitem___173697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 406, 13), tmp_Fx_173696, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 406)
    subscript_call_result_173698 = invoke(stypy.reporting.localization.Localization(__file__, 406, 13), getitem___173697, int_173695)
    
    # Assigning a type to the variable 'Fx' (line 406)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 406, 8), 'Fx', subscript_call_result_173698)
    # SSA branch for the else part of an if statement (line 405)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 408):
    
    # Assigning a Call to a Name (line 408):
    
    # Call to func(...): (line 408)
    # Processing the call arguments (line 408)
    # Getting the type of 'x' (line 408)
    x_173700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 18), 'x', False)
    # Processing the call keyword arguments (line 408)
    kwargs_173701 = {}
    # Getting the type of 'func' (line 408)
    func_173699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 13), 'func', False)
    # Calling func(args, kwargs) (line 408)
    func_call_result_173702 = invoke(stypy.reporting.localization.Localization(__file__, 408, 13), func_173699, *[x_173700], **kwargs_173701)
    
    # Assigning a type to the variable 'Fx' (line 408)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 408, 8), 'Fx', func_call_result_173702)
    # SSA join for if statement (line 405)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 409):
    
    # Assigning a Call to a Name (line 409):
    
    # Call to norm(...): (line 409)
    # Processing the call arguments (line 409)
    # Getting the type of 'Fx' (line 409)
    Fx_173704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 19), 'Fx', False)
    # Processing the call keyword arguments (line 409)
    kwargs_173705 = {}
    # Getting the type of 'norm' (line 409)
    norm_173703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 14), 'norm', False)
    # Calling norm(args, kwargs) (line 409)
    norm_call_result_173706 = invoke(stypy.reporting.localization.Localization(__file__, 409, 14), norm_173703, *[Fx_173704], **kwargs_173705)
    
    # Assigning a type to the variable 'Fx_norm' (line 409)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 409, 4), 'Fx_norm', norm_call_result_173706)
    
    # Obtaining an instance of the builtin type 'tuple' (line 411)
    tuple_173707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 411, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 411)
    # Adding element type (line 411)
    # Getting the type of 's' (line 411)
    s_173708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 11), 's')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 411, 11), tuple_173707, s_173708)
    # Adding element type (line 411)
    # Getting the type of 'x' (line 411)
    x_173709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 14), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 411, 11), tuple_173707, x_173709)
    # Adding element type (line 411)
    # Getting the type of 'Fx' (line 411)
    Fx_173710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 17), 'Fx')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 411, 11), tuple_173707, Fx_173710)
    # Adding element type (line 411)
    # Getting the type of 'Fx_norm' (line 411)
    Fx_norm_173711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 21), 'Fx_norm')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 411, 11), tuple_173707, Fx_norm_173711)
    
    # Assigning a type to the variable 'stypy_return_type' (line 411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 4), 'stypy_return_type', tuple_173707)
    
    # ################# End of '_nonlin_line_search(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_nonlin_line_search' in the type store
    # Getting the type of 'stypy_return_type' (line 369)
    stypy_return_type_173712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_173712)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_nonlin_line_search'
    return stypy_return_type_173712

# Assigning a type to the variable '_nonlin_line_search' (line 369)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 369, 0), '_nonlin_line_search', _nonlin_line_search)
# Declaration of the 'TerminationCondition' class

class TerminationCondition(object, ):
    str_173713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, (-1)), 'str', '\n    Termination condition for an iteration. It is terminated if\n\n    - |F| < f_rtol*|F_0|, AND\n    - |F| < f_tol\n\n    AND\n\n    - |dx| < x_rtol*|x|, AND\n    - |dx| < x_tol\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 427)
        None_173714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 29), 'None')
        # Getting the type of 'None' (line 427)
        None_173715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 42), 'None')
        # Getting the type of 'None' (line 427)
        None_173716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 54), 'None')
        # Getting the type of 'None' (line 427)
        None_173717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 67), 'None')
        # Getting the type of 'None' (line 428)
        None_173718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 22), 'None')
        # Getting the type of 'maxnorm' (line 428)
        maxnorm_173719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 33), 'maxnorm')
        defaults = [None_173714, None_173715, None_173716, None_173717, None_173718, maxnorm_173719]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 427, 4, False)
        # Assigning a type to the variable 'self' (line 428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TerminationCondition.__init__', ['f_tol', 'f_rtol', 'x_tol', 'x_rtol', 'iter', 'norm'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['f_tol', 'f_rtol', 'x_tol', 'x_rtol', 'iter', 'norm'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 430)
        # Getting the type of 'f_tol' (line 430)
        f_tol_173720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 11), 'f_tol')
        # Getting the type of 'None' (line 430)
        None_173721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 20), 'None')
        
        (may_be_173722, more_types_in_union_173723) = may_be_none(f_tol_173720, None_173721)

        if may_be_173722:

            if more_types_in_union_173723:
                # Runtime conditional SSA (line 430)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a BinOp to a Name (line 431):
            
            # Assigning a BinOp to a Name (line 431):
            
            # Call to finfo(...): (line 431)
            # Processing the call arguments (line 431)
            # Getting the type of 'np' (line 431)
            np_173726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 29), 'np', False)
            # Obtaining the member 'float_' of a type (line 431)
            float__173727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 431, 29), np_173726, 'float_')
            # Processing the call keyword arguments (line 431)
            kwargs_173728 = {}
            # Getting the type of 'np' (line 431)
            np_173724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 20), 'np', False)
            # Obtaining the member 'finfo' of a type (line 431)
            finfo_173725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 431, 20), np_173724, 'finfo')
            # Calling finfo(args, kwargs) (line 431)
            finfo_call_result_173729 = invoke(stypy.reporting.localization.Localization(__file__, 431, 20), finfo_173725, *[float__173727], **kwargs_173728)
            
            # Obtaining the member 'eps' of a type (line 431)
            eps_173730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 431, 20), finfo_call_result_173729, 'eps')
            float_173731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 431, 48), 'float')
            int_173732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 431, 51), 'int')
            # Applying the binary operator 'div' (line 431)
            result_div_173733 = python_operator(stypy.reporting.localization.Localization(__file__, 431, 48), 'div', float_173731, int_173732)
            
            # Applying the binary operator '**' (line 431)
            result_pow_173734 = python_operator(stypy.reporting.localization.Localization(__file__, 431, 20), '**', eps_173730, result_div_173733)
            
            # Assigning a type to the variable 'f_tol' (line 431)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 431, 12), 'f_tol', result_pow_173734)

            if more_types_in_union_173723:
                # SSA join for if statement (line 430)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 432)
        # Getting the type of 'f_rtol' (line 432)
        f_rtol_173735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 11), 'f_rtol')
        # Getting the type of 'None' (line 432)
        None_173736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 21), 'None')
        
        (may_be_173737, more_types_in_union_173738) = may_be_none(f_rtol_173735, None_173736)

        if may_be_173737:

            if more_types_in_union_173738:
                # Runtime conditional SSA (line 432)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 433):
            
            # Assigning a Attribute to a Name (line 433):
            # Getting the type of 'np' (line 433)
            np_173739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 21), 'np')
            # Obtaining the member 'inf' of a type (line 433)
            inf_173740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 21), np_173739, 'inf')
            # Assigning a type to the variable 'f_rtol' (line 433)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 433, 12), 'f_rtol', inf_173740)

            if more_types_in_union_173738:
                # SSA join for if statement (line 432)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 434)
        # Getting the type of 'x_tol' (line 434)
        x_tol_173741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 11), 'x_tol')
        # Getting the type of 'None' (line 434)
        None_173742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 20), 'None')
        
        (may_be_173743, more_types_in_union_173744) = may_be_none(x_tol_173741, None_173742)

        if may_be_173743:

            if more_types_in_union_173744:
                # Runtime conditional SSA (line 434)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 435):
            
            # Assigning a Attribute to a Name (line 435):
            # Getting the type of 'np' (line 435)
            np_173745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 20), 'np')
            # Obtaining the member 'inf' of a type (line 435)
            inf_173746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 20), np_173745, 'inf')
            # Assigning a type to the variable 'x_tol' (line 435)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 12), 'x_tol', inf_173746)

            if more_types_in_union_173744:
                # SSA join for if statement (line 434)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 436)
        # Getting the type of 'x_rtol' (line 436)
        x_rtol_173747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 11), 'x_rtol')
        # Getting the type of 'None' (line 436)
        None_173748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 21), 'None')
        
        (may_be_173749, more_types_in_union_173750) = may_be_none(x_rtol_173747, None_173748)

        if may_be_173749:

            if more_types_in_union_173750:
                # Runtime conditional SSA (line 436)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 437):
            
            # Assigning a Attribute to a Name (line 437):
            # Getting the type of 'np' (line 437)
            np_173751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 21), 'np')
            # Obtaining the member 'inf' of a type (line 437)
            inf_173752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 437, 21), np_173751, 'inf')
            # Assigning a type to the variable 'x_rtol' (line 437)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 437, 12), 'x_rtol', inf_173752)

            if more_types_in_union_173750:
                # SSA join for if statement (line 436)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 439):
        
        # Assigning a Name to a Attribute (line 439):
        # Getting the type of 'x_tol' (line 439)
        x_tol_173753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 21), 'x_tol')
        # Getting the type of 'self' (line 439)
        self_173754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 8), 'self')
        # Setting the type of the member 'x_tol' of a type (line 439)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 439, 8), self_173754, 'x_tol', x_tol_173753)
        
        # Assigning a Name to a Attribute (line 440):
        
        # Assigning a Name to a Attribute (line 440):
        # Getting the type of 'x_rtol' (line 440)
        x_rtol_173755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 22), 'x_rtol')
        # Getting the type of 'self' (line 440)
        self_173756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 8), 'self')
        # Setting the type of the member 'x_rtol' of a type (line 440)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 440, 8), self_173756, 'x_rtol', x_rtol_173755)
        
        # Assigning a Name to a Attribute (line 441):
        
        # Assigning a Name to a Attribute (line 441):
        # Getting the type of 'f_tol' (line 441)
        f_tol_173757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 21), 'f_tol')
        # Getting the type of 'self' (line 441)
        self_173758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 8), 'self')
        # Setting the type of the member 'f_tol' of a type (line 441)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 441, 8), self_173758, 'f_tol', f_tol_173757)
        
        # Assigning a Name to a Attribute (line 442):
        
        # Assigning a Name to a Attribute (line 442):
        # Getting the type of 'f_rtol' (line 442)
        f_rtol_173759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 22), 'f_rtol')
        # Getting the type of 'self' (line 442)
        self_173760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 8), 'self')
        # Setting the type of the member 'f_rtol' of a type (line 442)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 442, 8), self_173760, 'f_rtol', f_rtol_173759)
        
        # Type idiom detected: calculating its left and rigth part (line 444)
        # Getting the type of 'norm' (line 444)
        norm_173761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 11), 'norm')
        # Getting the type of 'None' (line 444)
        None_173762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 19), 'None')
        
        (may_be_173763, more_types_in_union_173764) = may_be_none(norm_173761, None_173762)

        if may_be_173763:

            if more_types_in_union_173764:
                # Runtime conditional SSA (line 444)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 445):
            
            # Assigning a Name to a Attribute (line 445):
            # Getting the type of 'maxnorm' (line 445)
            maxnorm_173765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 24), 'maxnorm')
            # Getting the type of 'self' (line 445)
            self_173766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 12), 'self')
            # Setting the type of the member 'norm' of a type (line 445)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 12), self_173766, 'norm', maxnorm_173765)

            if more_types_in_union_173764:
                # Runtime conditional SSA for else branch (line 444)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_173763) or more_types_in_union_173764):
            
            # Assigning a Name to a Attribute (line 447):
            
            # Assigning a Name to a Attribute (line 447):
            # Getting the type of 'norm' (line 447)
            norm_173767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 24), 'norm')
            # Getting the type of 'self' (line 447)
            self_173768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 12), 'self')
            # Setting the type of the member 'norm' of a type (line 447)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 447, 12), self_173768, 'norm', norm_173767)

            if (may_be_173763 and more_types_in_union_173764):
                # SSA join for if statement (line 444)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 449):
        
        # Assigning a Name to a Attribute (line 449):
        # Getting the type of 'iter' (line 449)
        iter_173769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 20), 'iter')
        # Getting the type of 'self' (line 449)
        self_173770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 8), 'self')
        # Setting the type of the member 'iter' of a type (line 449)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 449, 8), self_173770, 'iter', iter_173769)
        
        # Assigning a Name to a Attribute (line 451):
        
        # Assigning a Name to a Attribute (line 451):
        # Getting the type of 'None' (line 451)
        None_173771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 23), 'None')
        # Getting the type of 'self' (line 451)
        self_173772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 8), 'self')
        # Setting the type of the member 'f0_norm' of a type (line 451)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 451, 8), self_173772, 'f0_norm', None_173771)
        
        # Assigning a Num to a Attribute (line 452):
        
        # Assigning a Num to a Attribute (line 452):
        int_173773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 452, 25), 'int')
        # Getting the type of 'self' (line 452)
        self_173774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 8), 'self')
        # Setting the type of the member 'iteration' of a type (line 452)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 452, 8), self_173774, 'iteration', int_173773)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def check(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'check'
        module_type_store = module_type_store.open_function_context('check', 454, 4, False)
        # Assigning a type to the variable 'self' (line 455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 455, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TerminationCondition.check.__dict__.__setitem__('stypy_localization', localization)
        TerminationCondition.check.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TerminationCondition.check.__dict__.__setitem__('stypy_type_store', module_type_store)
        TerminationCondition.check.__dict__.__setitem__('stypy_function_name', 'TerminationCondition.check')
        TerminationCondition.check.__dict__.__setitem__('stypy_param_names_list', ['f', 'x', 'dx'])
        TerminationCondition.check.__dict__.__setitem__('stypy_varargs_param_name', None)
        TerminationCondition.check.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TerminationCondition.check.__dict__.__setitem__('stypy_call_defaults', defaults)
        TerminationCondition.check.__dict__.__setitem__('stypy_call_varargs', varargs)
        TerminationCondition.check.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TerminationCondition.check.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TerminationCondition.check', ['f', 'x', 'dx'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'check', localization, ['f', 'x', 'dx'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'check(...)' code ##################

        
        # Getting the type of 'self' (line 455)
        self_173775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 8), 'self')
        # Obtaining the member 'iteration' of a type (line 455)
        iteration_173776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 455, 8), self_173775, 'iteration')
        int_173777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 455, 26), 'int')
        # Applying the binary operator '+=' (line 455)
        result_iadd_173778 = python_operator(stypy.reporting.localization.Localization(__file__, 455, 8), '+=', iteration_173776, int_173777)
        # Getting the type of 'self' (line 455)
        self_173779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 8), 'self')
        # Setting the type of the member 'iteration' of a type (line 455)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 455, 8), self_173779, 'iteration', result_iadd_173778)
        
        
        # Assigning a Call to a Name (line 456):
        
        # Assigning a Call to a Name (line 456):
        
        # Call to norm(...): (line 456)
        # Processing the call arguments (line 456)
        # Getting the type of 'f' (line 456)
        f_173782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 27), 'f', False)
        # Processing the call keyword arguments (line 456)
        kwargs_173783 = {}
        # Getting the type of 'self' (line 456)
        self_173780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 17), 'self', False)
        # Obtaining the member 'norm' of a type (line 456)
        norm_173781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 456, 17), self_173780, 'norm')
        # Calling norm(args, kwargs) (line 456)
        norm_call_result_173784 = invoke(stypy.reporting.localization.Localization(__file__, 456, 17), norm_173781, *[f_173782], **kwargs_173783)
        
        # Assigning a type to the variable 'f_norm' (line 456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 456, 8), 'f_norm', norm_call_result_173784)
        
        # Assigning a Call to a Name (line 457):
        
        # Assigning a Call to a Name (line 457):
        
        # Call to norm(...): (line 457)
        # Processing the call arguments (line 457)
        # Getting the type of 'x' (line 457)
        x_173787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 27), 'x', False)
        # Processing the call keyword arguments (line 457)
        kwargs_173788 = {}
        # Getting the type of 'self' (line 457)
        self_173785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 17), 'self', False)
        # Obtaining the member 'norm' of a type (line 457)
        norm_173786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 457, 17), self_173785, 'norm')
        # Calling norm(args, kwargs) (line 457)
        norm_call_result_173789 = invoke(stypy.reporting.localization.Localization(__file__, 457, 17), norm_173786, *[x_173787], **kwargs_173788)
        
        # Assigning a type to the variable 'x_norm' (line 457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 457, 8), 'x_norm', norm_call_result_173789)
        
        # Assigning a Call to a Name (line 458):
        
        # Assigning a Call to a Name (line 458):
        
        # Call to norm(...): (line 458)
        # Processing the call arguments (line 458)
        # Getting the type of 'dx' (line 458)
        dx_173792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 28), 'dx', False)
        # Processing the call keyword arguments (line 458)
        kwargs_173793 = {}
        # Getting the type of 'self' (line 458)
        self_173790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 18), 'self', False)
        # Obtaining the member 'norm' of a type (line 458)
        norm_173791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 458, 18), self_173790, 'norm')
        # Calling norm(args, kwargs) (line 458)
        norm_call_result_173794 = invoke(stypy.reporting.localization.Localization(__file__, 458, 18), norm_173791, *[dx_173792], **kwargs_173793)
        
        # Assigning a type to the variable 'dx_norm' (line 458)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 458, 8), 'dx_norm', norm_call_result_173794)
        
        # Type idiom detected: calculating its left and rigth part (line 460)
        # Getting the type of 'self' (line 460)
        self_173795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 11), 'self')
        # Obtaining the member 'f0_norm' of a type (line 460)
        f0_norm_173796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 11), self_173795, 'f0_norm')
        # Getting the type of 'None' (line 460)
        None_173797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 27), 'None')
        
        (may_be_173798, more_types_in_union_173799) = may_be_none(f0_norm_173796, None_173797)

        if may_be_173798:

            if more_types_in_union_173799:
                # Runtime conditional SSA (line 460)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 461):
            
            # Assigning a Name to a Attribute (line 461):
            # Getting the type of 'f_norm' (line 461)
            f_norm_173800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 27), 'f_norm')
            # Getting the type of 'self' (line 461)
            self_173801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 12), 'self')
            # Setting the type of the member 'f0_norm' of a type (line 461)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 461, 12), self_173801, 'f0_norm', f_norm_173800)

            if more_types_in_union_173799:
                # SSA join for if statement (line 460)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'f_norm' (line 463)
        f_norm_173802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 11), 'f_norm')
        int_173803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 463, 21), 'int')
        # Applying the binary operator '==' (line 463)
        result_eq_173804 = python_operator(stypy.reporting.localization.Localization(__file__, 463, 11), '==', f_norm_173802, int_173803)
        
        # Testing the type of an if condition (line 463)
        if_condition_173805 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 463, 8), result_eq_173804)
        # Assigning a type to the variable 'if_condition_173805' (line 463)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 463, 8), 'if_condition_173805', if_condition_173805)
        # SSA begins for if statement (line 463)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        int_173806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 19), 'int')
        # Assigning a type to the variable 'stypy_return_type' (line 464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 12), 'stypy_return_type', int_173806)
        # SSA join for if statement (line 463)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 466)
        self_173807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 11), 'self')
        # Obtaining the member 'iter' of a type (line 466)
        iter_173808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 11), self_173807, 'iter')
        # Getting the type of 'None' (line 466)
        None_173809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 28), 'None')
        # Applying the binary operator 'isnot' (line 466)
        result_is_not_173810 = python_operator(stypy.reporting.localization.Localization(__file__, 466, 11), 'isnot', iter_173808, None_173809)
        
        # Testing the type of an if condition (line 466)
        if_condition_173811 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 466, 8), result_is_not_173810)
        # Assigning a type to the variable 'if_condition_173811' (line 466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 466, 8), 'if_condition_173811', if_condition_173811)
        # SSA begins for if statement (line 466)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        int_173812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 468, 19), 'int')
        
        # Getting the type of 'self' (line 468)
        self_173813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 24), 'self')
        # Obtaining the member 'iteration' of a type (line 468)
        iteration_173814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 24), self_173813, 'iteration')
        # Getting the type of 'self' (line 468)
        self_173815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 41), 'self')
        # Obtaining the member 'iter' of a type (line 468)
        iter_173816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 41), self_173815, 'iter')
        # Applying the binary operator '>' (line 468)
        result_gt_173817 = python_operator(stypy.reporting.localization.Localization(__file__, 468, 24), '>', iteration_173814, iter_173816)
        
        # Applying the binary operator '*' (line 468)
        result_mul_173818 = python_operator(stypy.reporting.localization.Localization(__file__, 468, 19), '*', int_173812, result_gt_173817)
        
        # Assigning a type to the variable 'stypy_return_type' (line 468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 468, 12), 'stypy_return_type', result_mul_173818)
        # SSA join for if statement (line 466)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to int(...): (line 471)
        # Processing the call arguments (line 471)
        
        # Evaluating a boolean operation
        
        # Evaluating a boolean operation
        
        # Getting the type of 'f_norm' (line 471)
        f_norm_173820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 20), 'f_norm', False)
        # Getting the type of 'self' (line 471)
        self_173821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 30), 'self', False)
        # Obtaining the member 'f_tol' of a type (line 471)
        f_tol_173822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 471, 30), self_173821, 'f_tol')
        # Applying the binary operator '<=' (line 471)
        result_le_173823 = python_operator(stypy.reporting.localization.Localization(__file__, 471, 20), '<=', f_norm_173820, f_tol_173822)
        
        
        # Getting the type of 'f_norm' (line 472)
        f_norm_173824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 24), 'f_norm', False)
        # Getting the type of 'self' (line 472)
        self_173825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 31), 'self', False)
        # Obtaining the member 'f_rtol' of a type (line 472)
        f_rtol_173826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 472, 31), self_173825, 'f_rtol')
        # Applying the binary operator 'div' (line 472)
        result_div_173827 = python_operator(stypy.reporting.localization.Localization(__file__, 472, 24), 'div', f_norm_173824, f_rtol_173826)
        
        # Getting the type of 'self' (line 472)
        self_173828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 46), 'self', False)
        # Obtaining the member 'f0_norm' of a type (line 472)
        f0_norm_173829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 472, 46), self_173828, 'f0_norm')
        # Applying the binary operator '<=' (line 472)
        result_le_173830 = python_operator(stypy.reporting.localization.Localization(__file__, 472, 24), '<=', result_div_173827, f0_norm_173829)
        
        # Applying the binary operator 'and' (line 471)
        result_and_keyword_173831 = python_operator(stypy.reporting.localization.Localization(__file__, 471, 20), 'and', result_le_173823, result_le_173830)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'dx_norm' (line 473)
        dx_norm_173832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 24), 'dx_norm', False)
        # Getting the type of 'self' (line 473)
        self_173833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 35), 'self', False)
        # Obtaining the member 'x_tol' of a type (line 473)
        x_tol_173834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 35), self_173833, 'x_tol')
        # Applying the binary operator '<=' (line 473)
        result_le_173835 = python_operator(stypy.reporting.localization.Localization(__file__, 473, 24), '<=', dx_norm_173832, x_tol_173834)
        
        
        # Getting the type of 'dx_norm' (line 474)
        dx_norm_173836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 28), 'dx_norm', False)
        # Getting the type of 'self' (line 474)
        self_173837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 36), 'self', False)
        # Obtaining the member 'x_rtol' of a type (line 474)
        x_rtol_173838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 36), self_173837, 'x_rtol')
        # Applying the binary operator 'div' (line 474)
        result_div_173839 = python_operator(stypy.reporting.localization.Localization(__file__, 474, 28), 'div', dx_norm_173836, x_rtol_173838)
        
        # Getting the type of 'x_norm' (line 474)
        x_norm_173840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 51), 'x_norm', False)
        # Applying the binary operator '<=' (line 474)
        result_le_173841 = python_operator(stypy.reporting.localization.Localization(__file__, 474, 28), '<=', result_div_173839, x_norm_173840)
        
        # Applying the binary operator 'and' (line 473)
        result_and_keyword_173842 = python_operator(stypy.reporting.localization.Localization(__file__, 473, 24), 'and', result_le_173835, result_le_173841)
        
        # Applying the binary operator 'and' (line 471)
        result_and_keyword_173843 = python_operator(stypy.reporting.localization.Localization(__file__, 471, 19), 'and', result_and_keyword_173831, result_and_keyword_173842)
        
        # Processing the call keyword arguments (line 471)
        kwargs_173844 = {}
        # Getting the type of 'int' (line 471)
        int_173819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 15), 'int', False)
        # Calling int(args, kwargs) (line 471)
        int_call_result_173845 = invoke(stypy.reporting.localization.Localization(__file__, 471, 15), int_173819, *[result_and_keyword_173843], **kwargs_173844)
        
        # Assigning a type to the variable 'stypy_return_type' (line 471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 471, 8), 'stypy_return_type', int_call_result_173845)
        
        # ################# End of 'check(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'check' in the type store
        # Getting the type of 'stypy_return_type' (line 454)
        stypy_return_type_173846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_173846)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'check'
        return stypy_return_type_173846


# Assigning a type to the variable 'TerminationCondition' (line 414)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 414, 0), 'TerminationCondition', TerminationCondition)
# Declaration of the 'Jacobian' class

class Jacobian(object, ):
    str_173847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 517, (-1)), 'str', '\n    Common interface for Jacobians or Jacobian approximations.\n\n    The optional methods come useful when implementing trust region\n    etc.  algorithms that often require evaluating transposes of the\n    Jacobian.\n\n    Methods\n    -------\n    solve\n        Returns J^-1 * v\n    update\n        Updates Jacobian to point `x` (where the function has residual `Fx`)\n\n    matvec : optional\n        Returns J * v\n    rmatvec : optional\n        Returns A^H * v\n    rsolve : optional\n        Returns A^-H * v\n    matmat : optional\n        Returns A * V, where V is a dense matrix with dimensions (N,K).\n    todense : optional\n        Form the dense Jacobian matrix. Necessary for dense trust region\n        algorithms, and useful for testing.\n\n    Attributes\n    ----------\n    shape\n        Matrix dimensions (M, N)\n    dtype\n        Data type of the matrix.\n    func : callable, optional\n        Function the Jacobian corresponds to\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 519, 4, False)
        # Assigning a type to the variable 'self' (line 520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 520, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Jacobian.__init__', [], None, 'kw', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a List to a Name (line 520):
        
        # Assigning a List to a Name (line 520):
        
        # Obtaining an instance of the builtin type 'list' (line 520)
        list_173848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 520, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 520)
        # Adding element type (line 520)
        str_173849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 520, 17), 'str', 'solve')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 520, 16), list_173848, str_173849)
        # Adding element type (line 520)
        str_173850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 520, 26), 'str', 'update')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 520, 16), list_173848, str_173850)
        # Adding element type (line 520)
        str_173851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 520, 36), 'str', 'matvec')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 520, 16), list_173848, str_173851)
        # Adding element type (line 520)
        str_173852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 520, 46), 'str', 'rmatvec')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 520, 16), list_173848, str_173852)
        # Adding element type (line 520)
        str_173853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 520, 57), 'str', 'rsolve')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 520, 16), list_173848, str_173853)
        # Adding element type (line 520)
        str_173854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 521, 17), 'str', 'matmat')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 520, 16), list_173848, str_173854)
        # Adding element type (line 520)
        str_173855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 521, 27), 'str', 'todense')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 520, 16), list_173848, str_173855)
        # Adding element type (line 520)
        str_173856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 521, 38), 'str', 'shape')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 520, 16), list_173848, str_173856)
        # Adding element type (line 520)
        str_173857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 521, 47), 'str', 'dtype')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 520, 16), list_173848, str_173857)
        
        # Assigning a type to the variable 'names' (line 520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 520, 8), 'names', list_173848)
        
        
        # Call to items(...): (line 522)
        # Processing the call keyword arguments (line 522)
        kwargs_173860 = {}
        # Getting the type of 'kw' (line 522)
        kw_173858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 27), 'kw', False)
        # Obtaining the member 'items' of a type (line 522)
        items_173859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 27), kw_173858, 'items')
        # Calling items(args, kwargs) (line 522)
        items_call_result_173861 = invoke(stypy.reporting.localization.Localization(__file__, 522, 27), items_173859, *[], **kwargs_173860)
        
        # Testing the type of a for loop iterable (line 522)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 522, 8), items_call_result_173861)
        # Getting the type of the for loop variable (line 522)
        for_loop_var_173862 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 522, 8), items_call_result_173861)
        # Assigning a type to the variable 'name' (line 522)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 8), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 522, 8), for_loop_var_173862))
        # Assigning a type to the variable 'value' (line 522)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 8), 'value', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 522, 8), for_loop_var_173862))
        # SSA begins for a for statement (line 522)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'name' (line 523)
        name_173863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 15), 'name')
        # Getting the type of 'names' (line 523)
        names_173864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 27), 'names')
        # Applying the binary operator 'notin' (line 523)
        result_contains_173865 = python_operator(stypy.reporting.localization.Localization(__file__, 523, 15), 'notin', name_173863, names_173864)
        
        # Testing the type of an if condition (line 523)
        if_condition_173866 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 523, 12), result_contains_173865)
        # Assigning a type to the variable 'if_condition_173866' (line 523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 12), 'if_condition_173866', if_condition_173866)
        # SSA begins for if statement (line 523)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 524)
        # Processing the call arguments (line 524)
        str_173868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, 33), 'str', 'Unknown keyword argument %s')
        # Getting the type of 'name' (line 524)
        name_173869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 65), 'name', False)
        # Applying the binary operator '%' (line 524)
        result_mod_173870 = python_operator(stypy.reporting.localization.Localization(__file__, 524, 33), '%', str_173868, name_173869)
        
        # Processing the call keyword arguments (line 524)
        kwargs_173871 = {}
        # Getting the type of 'ValueError' (line 524)
        ValueError_173867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 524)
        ValueError_call_result_173872 = invoke(stypy.reporting.localization.Localization(__file__, 524, 22), ValueError_173867, *[result_mod_173870], **kwargs_173871)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 524, 16), ValueError_call_result_173872, 'raise parameter', BaseException)
        # SSA join for if statement (line 523)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 525)
        # Getting the type of 'value' (line 525)
        value_173873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 12), 'value')
        # Getting the type of 'None' (line 525)
        None_173874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 28), 'None')
        
        (may_be_173875, more_types_in_union_173876) = may_not_be_none(value_173873, None_173874)

        if may_be_173875:

            if more_types_in_union_173876:
                # Runtime conditional SSA (line 525)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to setattr(...): (line 526)
            # Processing the call arguments (line 526)
            # Getting the type of 'self' (line 526)
            self_173878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 24), 'self', False)
            # Getting the type of 'name' (line 526)
            name_173879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 30), 'name', False)
            
            # Obtaining the type of the subscript
            # Getting the type of 'name' (line 526)
            name_173880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 39), 'name', False)
            # Getting the type of 'kw' (line 526)
            kw_173881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 36), 'kw', False)
            # Obtaining the member '__getitem__' of a type (line 526)
            getitem___173882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 36), kw_173881, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 526)
            subscript_call_result_173883 = invoke(stypy.reporting.localization.Localization(__file__, 526, 36), getitem___173882, name_173880)
            
            # Processing the call keyword arguments (line 526)
            kwargs_173884 = {}
            # Getting the type of 'setattr' (line 526)
            setattr_173877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 16), 'setattr', False)
            # Calling setattr(args, kwargs) (line 526)
            setattr_call_result_173885 = invoke(stypy.reporting.localization.Localization(__file__, 526, 16), setattr_173877, *[self_173878, name_173879, subscript_call_result_173883], **kwargs_173884)
            

            if more_types_in_union_173876:
                # SSA join for if statement (line 525)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 528)
        str_173886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 528, 25), 'str', 'todense')
        # Getting the type of 'self' (line 528)
        self_173887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 19), 'self')
        
        (may_be_173888, more_types_in_union_173889) = may_provide_member(str_173886, self_173887)

        if may_be_173888:

            if more_types_in_union_173889:
                # Runtime conditional SSA (line 528)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 528)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 8), 'self', remove_not_member_provider_from_union(self_173887, 'todense'))
            
            # Assigning a Lambda to a Attribute (line 529):
            
            # Assigning a Lambda to a Attribute (line 529):

            @norecursion
            def _stypy_temp_lambda_50(localization, *varargs, **kwargs):
                global module_type_store
                # Assign values to the parameters with defaults
                defaults = []
                # Create a new context for function '_stypy_temp_lambda_50'
                module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_50', 529, 29, True)
                # Passed parameters checking function
                _stypy_temp_lambda_50.stypy_localization = localization
                _stypy_temp_lambda_50.stypy_type_of_self = None
                _stypy_temp_lambda_50.stypy_type_store = module_type_store
                _stypy_temp_lambda_50.stypy_function_name = '_stypy_temp_lambda_50'
                _stypy_temp_lambda_50.stypy_param_names_list = []
                _stypy_temp_lambda_50.stypy_varargs_param_name = None
                _stypy_temp_lambda_50.stypy_kwargs_param_name = None
                _stypy_temp_lambda_50.stypy_call_defaults = defaults
                _stypy_temp_lambda_50.stypy_call_varargs = varargs
                _stypy_temp_lambda_50.stypy_call_kwargs = kwargs
                arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_50', [], None, None, defaults, varargs, kwargs)

                if is_error_type(arguments):
                    # Destroy the current context
                    module_type_store = module_type_store.close_function_context()
                    return arguments

                # Stacktrace push for error reporting
                localization.set_stack_trace('_stypy_temp_lambda_50', [], arguments)
                # Default return type storage variable (SSA)
                # Assigning a type to the variable 'stypy_return_type'
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
                
                
                # ################# Begin of the lambda function code ##################

                
                # Call to todense(...): (line 529)
                # Processing the call keyword arguments (line 529)
                kwargs_173892 = {}
                # Getting the type of 'self' (line 529)
                self_173890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 37), 'self', False)
                # Obtaining the member 'todense' of a type (line 529)
                todense_173891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 529, 37), self_173890, 'todense')
                # Calling todense(args, kwargs) (line 529)
                todense_call_result_173893 = invoke(stypy.reporting.localization.Localization(__file__, 529, 37), todense_173891, *[], **kwargs_173892)
                
                # Assigning the return type of the lambda function
                # Assigning a type to the variable 'stypy_return_type' (line 529)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 29), 'stypy_return_type', todense_call_result_173893)
                
                # ################# End of the lambda function code ##################

                # Stacktrace pop (error reporting)
                localization.unset_stack_trace()
                
                # Storing the return type of function '_stypy_temp_lambda_50' in the type store
                # Getting the type of 'stypy_return_type' (line 529)
                stypy_return_type_173894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 29), 'stypy_return_type')
                module_type_store.store_return_type_of_current_context(stypy_return_type_173894)
                
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                
                # Return type of the function '_stypy_temp_lambda_50'
                return stypy_return_type_173894

            # Assigning a type to the variable '_stypy_temp_lambda_50' (line 529)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 29), '_stypy_temp_lambda_50', _stypy_temp_lambda_50)
            # Getting the type of '_stypy_temp_lambda_50' (line 529)
            _stypy_temp_lambda_50_173895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 29), '_stypy_temp_lambda_50')
            # Getting the type of 'self' (line 529)
            self_173896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 12), 'self')
            # Setting the type of the member '__array__' of a type (line 529)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 529, 12), self_173896, '__array__', _stypy_temp_lambda_50_173895)

            if more_types_in_union_173889:
                # SSA join for if statement (line 528)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def aspreconditioner(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'aspreconditioner'
        module_type_store = module_type_store.open_function_context('aspreconditioner', 531, 4, False)
        # Assigning a type to the variable 'self' (line 532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 532, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Jacobian.aspreconditioner.__dict__.__setitem__('stypy_localization', localization)
        Jacobian.aspreconditioner.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Jacobian.aspreconditioner.__dict__.__setitem__('stypy_type_store', module_type_store)
        Jacobian.aspreconditioner.__dict__.__setitem__('stypy_function_name', 'Jacobian.aspreconditioner')
        Jacobian.aspreconditioner.__dict__.__setitem__('stypy_param_names_list', [])
        Jacobian.aspreconditioner.__dict__.__setitem__('stypy_varargs_param_name', None)
        Jacobian.aspreconditioner.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Jacobian.aspreconditioner.__dict__.__setitem__('stypy_call_defaults', defaults)
        Jacobian.aspreconditioner.__dict__.__setitem__('stypy_call_varargs', varargs)
        Jacobian.aspreconditioner.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Jacobian.aspreconditioner.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Jacobian.aspreconditioner', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'aspreconditioner', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'aspreconditioner(...)' code ##################

        
        # Call to InverseJacobian(...): (line 532)
        # Processing the call arguments (line 532)
        # Getting the type of 'self' (line 532)
        self_173898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 31), 'self', False)
        # Processing the call keyword arguments (line 532)
        kwargs_173899 = {}
        # Getting the type of 'InverseJacobian' (line 532)
        InverseJacobian_173897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 15), 'InverseJacobian', False)
        # Calling InverseJacobian(args, kwargs) (line 532)
        InverseJacobian_call_result_173900 = invoke(stypy.reporting.localization.Localization(__file__, 532, 15), InverseJacobian_173897, *[self_173898], **kwargs_173899)
        
        # Assigning a type to the variable 'stypy_return_type' (line 532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 532, 8), 'stypy_return_type', InverseJacobian_call_result_173900)
        
        # ################# End of 'aspreconditioner(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'aspreconditioner' in the type store
        # Getting the type of 'stypy_return_type' (line 531)
        stypy_return_type_173901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_173901)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'aspreconditioner'
        return stypy_return_type_173901


    @norecursion
    def solve(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_173902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 534, 27), 'int')
        defaults = [int_173902]
        # Create a new context for function 'solve'
        module_type_store = module_type_store.open_function_context('solve', 534, 4, False)
        # Assigning a type to the variable 'self' (line 535)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 535, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Jacobian.solve.__dict__.__setitem__('stypy_localization', localization)
        Jacobian.solve.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Jacobian.solve.__dict__.__setitem__('stypy_type_store', module_type_store)
        Jacobian.solve.__dict__.__setitem__('stypy_function_name', 'Jacobian.solve')
        Jacobian.solve.__dict__.__setitem__('stypy_param_names_list', ['v', 'tol'])
        Jacobian.solve.__dict__.__setitem__('stypy_varargs_param_name', None)
        Jacobian.solve.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Jacobian.solve.__dict__.__setitem__('stypy_call_defaults', defaults)
        Jacobian.solve.__dict__.__setitem__('stypy_call_varargs', varargs)
        Jacobian.solve.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Jacobian.solve.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Jacobian.solve', ['v', 'tol'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'solve', localization, ['v', 'tol'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'solve(...)' code ##################

        # Getting the type of 'NotImplementedError' (line 535)
        NotImplementedError_173903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 14), 'NotImplementedError')
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 535, 8), NotImplementedError_173903, 'raise parameter', BaseException)
        
        # ################# End of 'solve(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'solve' in the type store
        # Getting the type of 'stypy_return_type' (line 534)
        stypy_return_type_173904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_173904)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'solve'
        return stypy_return_type_173904


    @norecursion
    def update(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update'
        module_type_store = module_type_store.open_function_context('update', 537, 4, False)
        # Assigning a type to the variable 'self' (line 538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Jacobian.update.__dict__.__setitem__('stypy_localization', localization)
        Jacobian.update.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Jacobian.update.__dict__.__setitem__('stypy_type_store', module_type_store)
        Jacobian.update.__dict__.__setitem__('stypy_function_name', 'Jacobian.update')
        Jacobian.update.__dict__.__setitem__('stypy_param_names_list', ['x', 'F'])
        Jacobian.update.__dict__.__setitem__('stypy_varargs_param_name', None)
        Jacobian.update.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Jacobian.update.__dict__.__setitem__('stypy_call_defaults', defaults)
        Jacobian.update.__dict__.__setitem__('stypy_call_varargs', varargs)
        Jacobian.update.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Jacobian.update.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Jacobian.update', ['x', 'F'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update', localization, ['x', 'F'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update(...)' code ##################

        pass
        
        # ################# End of 'update(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update' in the type store
        # Getting the type of 'stypy_return_type' (line 537)
        stypy_return_type_173905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_173905)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update'
        return stypy_return_type_173905


    @norecursion
    def setup(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'setup'
        module_type_store = module_type_store.open_function_context('setup', 540, 4, False)
        # Assigning a type to the variable 'self' (line 541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Jacobian.setup.__dict__.__setitem__('stypy_localization', localization)
        Jacobian.setup.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Jacobian.setup.__dict__.__setitem__('stypy_type_store', module_type_store)
        Jacobian.setup.__dict__.__setitem__('stypy_function_name', 'Jacobian.setup')
        Jacobian.setup.__dict__.__setitem__('stypy_param_names_list', ['x', 'F', 'func'])
        Jacobian.setup.__dict__.__setitem__('stypy_varargs_param_name', None)
        Jacobian.setup.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Jacobian.setup.__dict__.__setitem__('stypy_call_defaults', defaults)
        Jacobian.setup.__dict__.__setitem__('stypy_call_varargs', varargs)
        Jacobian.setup.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Jacobian.setup.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Jacobian.setup', ['x', 'F', 'func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'setup', localization, ['x', 'F', 'func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'setup(...)' code ##################

        
        # Assigning a Name to a Attribute (line 541):
        
        # Assigning a Name to a Attribute (line 541):
        # Getting the type of 'func' (line 541)
        func_173906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 20), 'func')
        # Getting the type of 'self' (line 541)
        self_173907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 8), 'self')
        # Setting the type of the member 'func' of a type (line 541)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 8), self_173907, 'func', func_173906)
        
        # Assigning a Tuple to a Attribute (line 542):
        
        # Assigning a Tuple to a Attribute (line 542):
        
        # Obtaining an instance of the builtin type 'tuple' (line 542)
        tuple_173908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 542, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 542)
        # Adding element type (line 542)
        # Getting the type of 'F' (line 542)
        F_173909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 22), 'F')
        # Obtaining the member 'size' of a type (line 542)
        size_173910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 22), F_173909, 'size')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 542, 22), tuple_173908, size_173910)
        # Adding element type (line 542)
        # Getting the type of 'x' (line 542)
        x_173911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 30), 'x')
        # Obtaining the member 'size' of a type (line 542)
        size_173912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 30), x_173911, 'size')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 542, 22), tuple_173908, size_173912)
        
        # Getting the type of 'self' (line 542)
        self_173913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 8), 'self')
        # Setting the type of the member 'shape' of a type (line 542)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 8), self_173913, 'shape', tuple_173908)
        
        # Assigning a Attribute to a Attribute (line 543):
        
        # Assigning a Attribute to a Attribute (line 543):
        # Getting the type of 'F' (line 543)
        F_173914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 21), 'F')
        # Obtaining the member 'dtype' of a type (line 543)
        dtype_173915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 21), F_173914, 'dtype')
        # Getting the type of 'self' (line 543)
        self_173916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 8), 'self')
        # Setting the type of the member 'dtype' of a type (line 543)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 8), self_173916, 'dtype', dtype_173915)
        
        
        # Getting the type of 'self' (line 544)
        self_173917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 11), 'self')
        # Obtaining the member '__class__' of a type (line 544)
        class___173918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 11), self_173917, '__class__')
        # Obtaining the member 'setup' of a type (line 544)
        setup_173919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 11), class___173918, 'setup')
        # Getting the type of 'Jacobian' (line 544)
        Jacobian_173920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 35), 'Jacobian')
        # Obtaining the member 'setup' of a type (line 544)
        setup_173921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 35), Jacobian_173920, 'setup')
        # Applying the binary operator 'is' (line 544)
        result_is__173922 = python_operator(stypy.reporting.localization.Localization(__file__, 544, 11), 'is', setup_173919, setup_173921)
        
        # Testing the type of an if condition (line 544)
        if_condition_173923 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 544, 8), result_is__173922)
        # Assigning a type to the variable 'if_condition_173923' (line 544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 544, 8), 'if_condition_173923', if_condition_173923)
        # SSA begins for if statement (line 544)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to update(...): (line 546)
        # Processing the call arguments (line 546)
        # Getting the type of 'x' (line 546)
        x_173926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 24), 'x', False)
        # Getting the type of 'F' (line 546)
        F_173927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 27), 'F', False)
        # Processing the call keyword arguments (line 546)
        kwargs_173928 = {}
        # Getting the type of 'self' (line 546)
        self_173924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 12), 'self', False)
        # Obtaining the member 'update' of a type (line 546)
        update_173925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 546, 12), self_173924, 'update')
        # Calling update(args, kwargs) (line 546)
        update_call_result_173929 = invoke(stypy.reporting.localization.Localization(__file__, 546, 12), update_173925, *[x_173926, F_173927], **kwargs_173928)
        
        # SSA join for if statement (line 544)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'setup(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'setup' in the type store
        # Getting the type of 'stypy_return_type' (line 540)
        stypy_return_type_173930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_173930)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'setup'
        return stypy_return_type_173930


# Assigning a type to the variable 'Jacobian' (line 481)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 481, 0), 'Jacobian', Jacobian)
# Declaration of the 'InverseJacobian' class

class InverseJacobian(object, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 550, 4, False)
        # Assigning a type to the variable 'self' (line 551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'InverseJacobian.__init__', ['jacobian'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['jacobian'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 551):
        
        # Assigning a Name to a Attribute (line 551):
        # Getting the type of 'jacobian' (line 551)
        jacobian_173931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 24), 'jacobian')
        # Getting the type of 'self' (line 551)
        self_173932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 8), 'self')
        # Setting the type of the member 'jacobian' of a type (line 551)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 8), self_173932, 'jacobian', jacobian_173931)
        
        # Assigning a Attribute to a Attribute (line 552):
        
        # Assigning a Attribute to a Attribute (line 552):
        # Getting the type of 'jacobian' (line 552)
        jacobian_173933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 22), 'jacobian')
        # Obtaining the member 'solve' of a type (line 552)
        solve_173934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 22), jacobian_173933, 'solve')
        # Getting the type of 'self' (line 552)
        self_173935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 8), 'self')
        # Setting the type of the member 'matvec' of a type (line 552)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 8), self_173935, 'matvec', solve_173934)
        
        # Assigning a Attribute to a Attribute (line 553):
        
        # Assigning a Attribute to a Attribute (line 553):
        # Getting the type of 'jacobian' (line 553)
        jacobian_173936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 22), 'jacobian')
        # Obtaining the member 'update' of a type (line 553)
        update_173937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 22), jacobian_173936, 'update')
        # Getting the type of 'self' (line 553)
        self_173938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 8), 'self')
        # Setting the type of the member 'update' of a type (line 553)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 8), self_173938, 'update', update_173937)
        
        # Type idiom detected: calculating its left and rigth part (line 554)
        str_173939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 554, 29), 'str', 'setup')
        # Getting the type of 'jacobian' (line 554)
        jacobian_173940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 19), 'jacobian')
        
        (may_be_173941, more_types_in_union_173942) = may_provide_member(str_173939, jacobian_173940)

        if may_be_173941:

            if more_types_in_union_173942:
                # Runtime conditional SSA (line 554)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'jacobian' (line 554)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 554, 8), 'jacobian', remove_not_member_provider_from_union(jacobian_173940, 'setup'))
            
            # Assigning a Attribute to a Attribute (line 555):
            
            # Assigning a Attribute to a Attribute (line 555):
            # Getting the type of 'jacobian' (line 555)
            jacobian_173943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 25), 'jacobian')
            # Obtaining the member 'setup' of a type (line 555)
            setup_173944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 25), jacobian_173943, 'setup')
            # Getting the type of 'self' (line 555)
            self_173945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 12), 'self')
            # Setting the type of the member 'setup' of a type (line 555)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 12), self_173945, 'setup', setup_173944)

            if more_types_in_union_173942:
                # SSA join for if statement (line 554)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 556)
        str_173946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 556, 29), 'str', 'rsolve')
        # Getting the type of 'jacobian' (line 556)
        jacobian_173947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 19), 'jacobian')
        
        (may_be_173948, more_types_in_union_173949) = may_provide_member(str_173946, jacobian_173947)

        if may_be_173948:

            if more_types_in_union_173949:
                # Runtime conditional SSA (line 556)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'jacobian' (line 556)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 8), 'jacobian', remove_not_member_provider_from_union(jacobian_173947, 'rsolve'))
            
            # Assigning a Attribute to a Attribute (line 557):
            
            # Assigning a Attribute to a Attribute (line 557):
            # Getting the type of 'jacobian' (line 557)
            jacobian_173950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 27), 'jacobian')
            # Obtaining the member 'rsolve' of a type (line 557)
            rsolve_173951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 557, 27), jacobian_173950, 'rsolve')
            # Getting the type of 'self' (line 557)
            self_173952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 12), 'self')
            # Setting the type of the member 'rmatvec' of a type (line 557)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 557, 12), self_173952, 'rmatvec', rsolve_173951)

            if more_types_in_union_173949:
                # SSA join for if statement (line 556)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def shape(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'shape'
        module_type_store = module_type_store.open_function_context('shape', 559, 4, False)
        # Assigning a type to the variable 'self' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        InverseJacobian.shape.__dict__.__setitem__('stypy_localization', localization)
        InverseJacobian.shape.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        InverseJacobian.shape.__dict__.__setitem__('stypy_type_store', module_type_store)
        InverseJacobian.shape.__dict__.__setitem__('stypy_function_name', 'InverseJacobian.shape')
        InverseJacobian.shape.__dict__.__setitem__('stypy_param_names_list', [])
        InverseJacobian.shape.__dict__.__setitem__('stypy_varargs_param_name', None)
        InverseJacobian.shape.__dict__.__setitem__('stypy_kwargs_param_name', None)
        InverseJacobian.shape.__dict__.__setitem__('stypy_call_defaults', defaults)
        InverseJacobian.shape.__dict__.__setitem__('stypy_call_varargs', varargs)
        InverseJacobian.shape.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        InverseJacobian.shape.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'InverseJacobian.shape', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'shape', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'shape(...)' code ##################

        # Getting the type of 'self' (line 561)
        self_173953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 15), 'self')
        # Obtaining the member 'jacobian' of a type (line 561)
        jacobian_173954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 15), self_173953, 'jacobian')
        # Obtaining the member 'shape' of a type (line 561)
        shape_173955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 15), jacobian_173954, 'shape')
        # Assigning a type to the variable 'stypy_return_type' (line 561)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 561, 8), 'stypy_return_type', shape_173955)
        
        # ################# End of 'shape(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'shape' in the type store
        # Getting the type of 'stypy_return_type' (line 559)
        stypy_return_type_173956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_173956)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'shape'
        return stypy_return_type_173956


    @norecursion
    def dtype(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'dtype'
        module_type_store = module_type_store.open_function_context('dtype', 563, 4, False)
        # Assigning a type to the variable 'self' (line 564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 564, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        InverseJacobian.dtype.__dict__.__setitem__('stypy_localization', localization)
        InverseJacobian.dtype.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        InverseJacobian.dtype.__dict__.__setitem__('stypy_type_store', module_type_store)
        InverseJacobian.dtype.__dict__.__setitem__('stypy_function_name', 'InverseJacobian.dtype')
        InverseJacobian.dtype.__dict__.__setitem__('stypy_param_names_list', [])
        InverseJacobian.dtype.__dict__.__setitem__('stypy_varargs_param_name', None)
        InverseJacobian.dtype.__dict__.__setitem__('stypy_kwargs_param_name', None)
        InverseJacobian.dtype.__dict__.__setitem__('stypy_call_defaults', defaults)
        InverseJacobian.dtype.__dict__.__setitem__('stypy_call_varargs', varargs)
        InverseJacobian.dtype.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        InverseJacobian.dtype.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'InverseJacobian.dtype', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'dtype', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'dtype(...)' code ##################

        # Getting the type of 'self' (line 565)
        self_173957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 15), 'self')
        # Obtaining the member 'jacobian' of a type (line 565)
        jacobian_173958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 15), self_173957, 'jacobian')
        # Obtaining the member 'dtype' of a type (line 565)
        dtype_173959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 15), jacobian_173958, 'dtype')
        # Assigning a type to the variable 'stypy_return_type' (line 565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'stypy_return_type', dtype_173959)
        
        # ################# End of 'dtype(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'dtype' in the type store
        # Getting the type of 'stypy_return_type' (line 563)
        stypy_return_type_173960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_173960)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'dtype'
        return stypy_return_type_173960


# Assigning a type to the variable 'InverseJacobian' (line 549)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 0), 'InverseJacobian', InverseJacobian)

@norecursion
def asjacobian(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'asjacobian'
    module_type_store = module_type_store.open_function_context('asjacobian', 568, 0, False)
    
    # Passed parameters checking function
    asjacobian.stypy_localization = localization
    asjacobian.stypy_type_of_self = None
    asjacobian.stypy_type_store = module_type_store
    asjacobian.stypy_function_name = 'asjacobian'
    asjacobian.stypy_param_names_list = ['J']
    asjacobian.stypy_varargs_param_name = None
    asjacobian.stypy_kwargs_param_name = None
    asjacobian.stypy_call_defaults = defaults
    asjacobian.stypy_call_varargs = varargs
    asjacobian.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'asjacobian', ['J'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'asjacobian', localization, ['J'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'asjacobian(...)' code ##################

    str_173961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 571, (-1)), 'str', '\n    Convert given object to one suitable for use as a Jacobian.\n    ')
    
    # Assigning a Attribute to a Name (line 572):
    
    # Assigning a Attribute to a Name (line 572):
    # Getting the type of 'scipy' (line 572)
    scipy_173962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 14), 'scipy')
    # Obtaining the member 'sparse' of a type (line 572)
    sparse_173963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 14), scipy_173962, 'sparse')
    # Obtaining the member 'linalg' of a type (line 572)
    linalg_173964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 14), sparse_173963, 'linalg')
    # Obtaining the member 'spsolve' of a type (line 572)
    spsolve_173965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 14), linalg_173964, 'spsolve')
    # Assigning a type to the variable 'spsolve' (line 572)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 4), 'spsolve', spsolve_173965)
    
    
    # Call to isinstance(...): (line 573)
    # Processing the call arguments (line 573)
    # Getting the type of 'J' (line 573)
    J_173967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 18), 'J', False)
    # Getting the type of 'Jacobian' (line 573)
    Jacobian_173968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 21), 'Jacobian', False)
    # Processing the call keyword arguments (line 573)
    kwargs_173969 = {}
    # Getting the type of 'isinstance' (line 573)
    isinstance_173966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 573)
    isinstance_call_result_173970 = invoke(stypy.reporting.localization.Localization(__file__, 573, 7), isinstance_173966, *[J_173967, Jacobian_173968], **kwargs_173969)
    
    # Testing the type of an if condition (line 573)
    if_condition_173971 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 573, 4), isinstance_call_result_173970)
    # Assigning a type to the variable 'if_condition_173971' (line 573)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 573, 4), 'if_condition_173971', if_condition_173971)
    # SSA begins for if statement (line 573)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'J' (line 574)
    J_173972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 15), 'J')
    # Assigning a type to the variable 'stypy_return_type' (line 574)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 574, 8), 'stypy_return_type', J_173972)
    # SSA branch for the else part of an if statement (line 573)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    # Call to isclass(...): (line 575)
    # Processing the call arguments (line 575)
    # Getting the type of 'J' (line 575)
    J_173975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 25), 'J', False)
    # Processing the call keyword arguments (line 575)
    kwargs_173976 = {}
    # Getting the type of 'inspect' (line 575)
    inspect_173973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 9), 'inspect', False)
    # Obtaining the member 'isclass' of a type (line 575)
    isclass_173974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 575, 9), inspect_173973, 'isclass')
    # Calling isclass(args, kwargs) (line 575)
    isclass_call_result_173977 = invoke(stypy.reporting.localization.Localization(__file__, 575, 9), isclass_173974, *[J_173975], **kwargs_173976)
    
    
    # Call to issubclass(...): (line 575)
    # Processing the call arguments (line 575)
    # Getting the type of 'J' (line 575)
    J_173979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 43), 'J', False)
    # Getting the type of 'Jacobian' (line 575)
    Jacobian_173980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 46), 'Jacobian', False)
    # Processing the call keyword arguments (line 575)
    kwargs_173981 = {}
    # Getting the type of 'issubclass' (line 575)
    issubclass_173978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 32), 'issubclass', False)
    # Calling issubclass(args, kwargs) (line 575)
    issubclass_call_result_173982 = invoke(stypy.reporting.localization.Localization(__file__, 575, 32), issubclass_173978, *[J_173979, Jacobian_173980], **kwargs_173981)
    
    # Applying the binary operator 'and' (line 575)
    result_and_keyword_173983 = python_operator(stypy.reporting.localization.Localization(__file__, 575, 9), 'and', isclass_call_result_173977, issubclass_call_result_173982)
    
    # Testing the type of an if condition (line 575)
    if_condition_173984 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 575, 9), result_and_keyword_173983)
    # Assigning a type to the variable 'if_condition_173984' (line 575)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 575, 9), 'if_condition_173984', if_condition_173984)
    # SSA begins for if statement (line 575)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to J(...): (line 576)
    # Processing the call keyword arguments (line 576)
    kwargs_173986 = {}
    # Getting the type of 'J' (line 576)
    J_173985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 15), 'J', False)
    # Calling J(args, kwargs) (line 576)
    J_call_result_173987 = invoke(stypy.reporting.localization.Localization(__file__, 576, 15), J_173985, *[], **kwargs_173986)
    
    # Assigning a type to the variable 'stypy_return_type' (line 576)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 576, 8), 'stypy_return_type', J_call_result_173987)
    # SSA branch for the else part of an if statement (line 575)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to isinstance(...): (line 577)
    # Processing the call arguments (line 577)
    # Getting the type of 'J' (line 577)
    J_173989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 20), 'J', False)
    # Getting the type of 'np' (line 577)
    np_173990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 23), 'np', False)
    # Obtaining the member 'ndarray' of a type (line 577)
    ndarray_173991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 23), np_173990, 'ndarray')
    # Processing the call keyword arguments (line 577)
    kwargs_173992 = {}
    # Getting the type of 'isinstance' (line 577)
    isinstance_173988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 9), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 577)
    isinstance_call_result_173993 = invoke(stypy.reporting.localization.Localization(__file__, 577, 9), isinstance_173988, *[J_173989, ndarray_173991], **kwargs_173992)
    
    # Testing the type of an if condition (line 577)
    if_condition_173994 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 577, 9), isinstance_call_result_173993)
    # Assigning a type to the variable 'if_condition_173994' (line 577)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 9), 'if_condition_173994', if_condition_173994)
    # SSA begins for if statement (line 577)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'J' (line 578)
    J_173995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 11), 'J')
    # Obtaining the member 'ndim' of a type (line 578)
    ndim_173996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 11), J_173995, 'ndim')
    int_173997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, 20), 'int')
    # Applying the binary operator '>' (line 578)
    result_gt_173998 = python_operator(stypy.reporting.localization.Localization(__file__, 578, 11), '>', ndim_173996, int_173997)
    
    # Testing the type of an if condition (line 578)
    if_condition_173999 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 578, 8), result_gt_173998)
    # Assigning a type to the variable 'if_condition_173999' (line 578)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 8), 'if_condition_173999', if_condition_173999)
    # SSA begins for if statement (line 578)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 579)
    # Processing the call arguments (line 579)
    str_174001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 579, 29), 'str', 'array must have rank <= 2')
    # Processing the call keyword arguments (line 579)
    kwargs_174002 = {}
    # Getting the type of 'ValueError' (line 579)
    ValueError_174000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 579)
    ValueError_call_result_174003 = invoke(stypy.reporting.localization.Localization(__file__, 579, 18), ValueError_174000, *[str_174001], **kwargs_174002)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 579, 12), ValueError_call_result_174003, 'raise parameter', BaseException)
    # SSA join for if statement (line 578)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 580):
    
    # Assigning a Call to a Name (line 580):
    
    # Call to atleast_2d(...): (line 580)
    # Processing the call arguments (line 580)
    
    # Call to asarray(...): (line 580)
    # Processing the call arguments (line 580)
    # Getting the type of 'J' (line 580)
    J_174008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 37), 'J', False)
    # Processing the call keyword arguments (line 580)
    kwargs_174009 = {}
    # Getting the type of 'np' (line 580)
    np_174006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 26), 'np', False)
    # Obtaining the member 'asarray' of a type (line 580)
    asarray_174007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 580, 26), np_174006, 'asarray')
    # Calling asarray(args, kwargs) (line 580)
    asarray_call_result_174010 = invoke(stypy.reporting.localization.Localization(__file__, 580, 26), asarray_174007, *[J_174008], **kwargs_174009)
    
    # Processing the call keyword arguments (line 580)
    kwargs_174011 = {}
    # Getting the type of 'np' (line 580)
    np_174004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 12), 'np', False)
    # Obtaining the member 'atleast_2d' of a type (line 580)
    atleast_2d_174005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 580, 12), np_174004, 'atleast_2d')
    # Calling atleast_2d(args, kwargs) (line 580)
    atleast_2d_call_result_174012 = invoke(stypy.reporting.localization.Localization(__file__, 580, 12), atleast_2d_174005, *[asarray_call_result_174010], **kwargs_174011)
    
    # Assigning a type to the variable 'J' (line 580)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 580, 8), 'J', atleast_2d_call_result_174012)
    
    
    
    # Obtaining the type of the subscript
    int_174013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 581, 19), 'int')
    # Getting the type of 'J' (line 581)
    J_174014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 11), 'J')
    # Obtaining the member 'shape' of a type (line 581)
    shape_174015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 11), J_174014, 'shape')
    # Obtaining the member '__getitem__' of a type (line 581)
    getitem___174016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 11), shape_174015, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 581)
    subscript_call_result_174017 = invoke(stypy.reporting.localization.Localization(__file__, 581, 11), getitem___174016, int_174013)
    
    
    # Obtaining the type of the subscript
    int_174018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 581, 33), 'int')
    # Getting the type of 'J' (line 581)
    J_174019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 25), 'J')
    # Obtaining the member 'shape' of a type (line 581)
    shape_174020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 25), J_174019, 'shape')
    # Obtaining the member '__getitem__' of a type (line 581)
    getitem___174021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 25), shape_174020, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 581)
    subscript_call_result_174022 = invoke(stypy.reporting.localization.Localization(__file__, 581, 25), getitem___174021, int_174018)
    
    # Applying the binary operator '!=' (line 581)
    result_ne_174023 = python_operator(stypy.reporting.localization.Localization(__file__, 581, 11), '!=', subscript_call_result_174017, subscript_call_result_174022)
    
    # Testing the type of an if condition (line 581)
    if_condition_174024 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 581, 8), result_ne_174023)
    # Assigning a type to the variable 'if_condition_174024' (line 581)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 8), 'if_condition_174024', if_condition_174024)
    # SSA begins for if statement (line 581)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 582)
    # Processing the call arguments (line 582)
    str_174026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 582, 29), 'str', 'array must be square')
    # Processing the call keyword arguments (line 582)
    kwargs_174027 = {}
    # Getting the type of 'ValueError' (line 582)
    ValueError_174025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 582)
    ValueError_call_result_174028 = invoke(stypy.reporting.localization.Localization(__file__, 582, 18), ValueError_174025, *[str_174026], **kwargs_174027)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 582, 12), ValueError_call_result_174028, 'raise parameter', BaseException)
    # SSA join for if statement (line 581)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to Jacobian(...): (line 584)
    # Processing the call keyword arguments (line 584)

    @norecursion
    def _stypy_temp_lambda_51(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_51'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_51', 584, 31, True)
        # Passed parameters checking function
        _stypy_temp_lambda_51.stypy_localization = localization
        _stypy_temp_lambda_51.stypy_type_of_self = None
        _stypy_temp_lambda_51.stypy_type_store = module_type_store
        _stypy_temp_lambda_51.stypy_function_name = '_stypy_temp_lambda_51'
        _stypy_temp_lambda_51.stypy_param_names_list = ['v']
        _stypy_temp_lambda_51.stypy_varargs_param_name = None
        _stypy_temp_lambda_51.stypy_kwargs_param_name = None
        _stypy_temp_lambda_51.stypy_call_defaults = defaults
        _stypy_temp_lambda_51.stypy_call_varargs = varargs
        _stypy_temp_lambda_51.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_51', ['v'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_51', ['v'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to dot(...): (line 584)
        # Processing the call arguments (line 584)
        # Getting the type of 'J' (line 584)
        J_174031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 45), 'J', False)
        # Getting the type of 'v' (line 584)
        v_174032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 48), 'v', False)
        # Processing the call keyword arguments (line 584)
        kwargs_174033 = {}
        # Getting the type of 'dot' (line 584)
        dot_174030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 41), 'dot', False)
        # Calling dot(args, kwargs) (line 584)
        dot_call_result_174034 = invoke(stypy.reporting.localization.Localization(__file__, 584, 41), dot_174030, *[J_174031, v_174032], **kwargs_174033)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 584, 31), 'stypy_return_type', dot_call_result_174034)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_51' in the type store
        # Getting the type of 'stypy_return_type' (line 584)
        stypy_return_type_174035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 31), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_174035)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_51'
        return stypy_return_type_174035

    # Assigning a type to the variable '_stypy_temp_lambda_51' (line 584)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 584, 31), '_stypy_temp_lambda_51', _stypy_temp_lambda_51)
    # Getting the type of '_stypy_temp_lambda_51' (line 584)
    _stypy_temp_lambda_51_174036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 31), '_stypy_temp_lambda_51')
    keyword_174037 = _stypy_temp_lambda_51_174036

    @norecursion
    def _stypy_temp_lambda_52(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_52'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_52', 585, 32, True)
        # Passed parameters checking function
        _stypy_temp_lambda_52.stypy_localization = localization
        _stypy_temp_lambda_52.stypy_type_of_self = None
        _stypy_temp_lambda_52.stypy_type_store = module_type_store
        _stypy_temp_lambda_52.stypy_function_name = '_stypy_temp_lambda_52'
        _stypy_temp_lambda_52.stypy_param_names_list = ['v']
        _stypy_temp_lambda_52.stypy_varargs_param_name = None
        _stypy_temp_lambda_52.stypy_kwargs_param_name = None
        _stypy_temp_lambda_52.stypy_call_defaults = defaults
        _stypy_temp_lambda_52.stypy_call_varargs = varargs
        _stypy_temp_lambda_52.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_52', ['v'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_52', ['v'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to dot(...): (line 585)
        # Processing the call arguments (line 585)
        
        # Call to conj(...): (line 585)
        # Processing the call keyword arguments (line 585)
        kwargs_174041 = {}
        # Getting the type of 'J' (line 585)
        J_174039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 46), 'J', False)
        # Obtaining the member 'conj' of a type (line 585)
        conj_174040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 585, 46), J_174039, 'conj')
        # Calling conj(args, kwargs) (line 585)
        conj_call_result_174042 = invoke(stypy.reporting.localization.Localization(__file__, 585, 46), conj_174040, *[], **kwargs_174041)
        
        # Obtaining the member 'T' of a type (line 585)
        T_174043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 585, 46), conj_call_result_174042, 'T')
        # Getting the type of 'v' (line 585)
        v_174044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 58), 'v', False)
        # Processing the call keyword arguments (line 585)
        kwargs_174045 = {}
        # Getting the type of 'dot' (line 585)
        dot_174038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 42), 'dot', False)
        # Calling dot(args, kwargs) (line 585)
        dot_call_result_174046 = invoke(stypy.reporting.localization.Localization(__file__, 585, 42), dot_174038, *[T_174043, v_174044], **kwargs_174045)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 585)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 585, 32), 'stypy_return_type', dot_call_result_174046)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_52' in the type store
        # Getting the type of 'stypy_return_type' (line 585)
        stypy_return_type_174047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 32), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_174047)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_52'
        return stypy_return_type_174047

    # Assigning a type to the variable '_stypy_temp_lambda_52' (line 585)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 585, 32), '_stypy_temp_lambda_52', _stypy_temp_lambda_52)
    # Getting the type of '_stypy_temp_lambda_52' (line 585)
    _stypy_temp_lambda_52_174048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 32), '_stypy_temp_lambda_52')
    keyword_174049 = _stypy_temp_lambda_52_174048

    @norecursion
    def _stypy_temp_lambda_53(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_53'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_53', 586, 30, True)
        # Passed parameters checking function
        _stypy_temp_lambda_53.stypy_localization = localization
        _stypy_temp_lambda_53.stypy_type_of_self = None
        _stypy_temp_lambda_53.stypy_type_store = module_type_store
        _stypy_temp_lambda_53.stypy_function_name = '_stypy_temp_lambda_53'
        _stypy_temp_lambda_53.stypy_param_names_list = ['v']
        _stypy_temp_lambda_53.stypy_varargs_param_name = None
        _stypy_temp_lambda_53.stypy_kwargs_param_name = None
        _stypy_temp_lambda_53.stypy_call_defaults = defaults
        _stypy_temp_lambda_53.stypy_call_varargs = varargs
        _stypy_temp_lambda_53.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_53', ['v'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_53', ['v'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to solve(...): (line 586)
        # Processing the call arguments (line 586)
        # Getting the type of 'J' (line 586)
        J_174051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 46), 'J', False)
        # Getting the type of 'v' (line 586)
        v_174052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 49), 'v', False)
        # Processing the call keyword arguments (line 586)
        kwargs_174053 = {}
        # Getting the type of 'solve' (line 586)
        solve_174050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 40), 'solve', False)
        # Calling solve(args, kwargs) (line 586)
        solve_call_result_174054 = invoke(stypy.reporting.localization.Localization(__file__, 586, 40), solve_174050, *[J_174051, v_174052], **kwargs_174053)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 586, 30), 'stypy_return_type', solve_call_result_174054)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_53' in the type store
        # Getting the type of 'stypy_return_type' (line 586)
        stypy_return_type_174055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 30), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_174055)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_53'
        return stypy_return_type_174055

    # Assigning a type to the variable '_stypy_temp_lambda_53' (line 586)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 586, 30), '_stypy_temp_lambda_53', _stypy_temp_lambda_53)
    # Getting the type of '_stypy_temp_lambda_53' (line 586)
    _stypy_temp_lambda_53_174056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 30), '_stypy_temp_lambda_53')
    keyword_174057 = _stypy_temp_lambda_53_174056

    @norecursion
    def _stypy_temp_lambda_54(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_54'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_54', 587, 31, True)
        # Passed parameters checking function
        _stypy_temp_lambda_54.stypy_localization = localization
        _stypy_temp_lambda_54.stypy_type_of_self = None
        _stypy_temp_lambda_54.stypy_type_store = module_type_store
        _stypy_temp_lambda_54.stypy_function_name = '_stypy_temp_lambda_54'
        _stypy_temp_lambda_54.stypy_param_names_list = ['v']
        _stypy_temp_lambda_54.stypy_varargs_param_name = None
        _stypy_temp_lambda_54.stypy_kwargs_param_name = None
        _stypy_temp_lambda_54.stypy_call_defaults = defaults
        _stypy_temp_lambda_54.stypy_call_varargs = varargs
        _stypy_temp_lambda_54.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_54', ['v'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_54', ['v'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to solve(...): (line 587)
        # Processing the call arguments (line 587)
        
        # Call to conj(...): (line 587)
        # Processing the call keyword arguments (line 587)
        kwargs_174061 = {}
        # Getting the type of 'J' (line 587)
        J_174059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 47), 'J', False)
        # Obtaining the member 'conj' of a type (line 587)
        conj_174060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 587, 47), J_174059, 'conj')
        # Calling conj(args, kwargs) (line 587)
        conj_call_result_174062 = invoke(stypy.reporting.localization.Localization(__file__, 587, 47), conj_174060, *[], **kwargs_174061)
        
        # Obtaining the member 'T' of a type (line 587)
        T_174063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 587, 47), conj_call_result_174062, 'T')
        # Getting the type of 'v' (line 587)
        v_174064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 59), 'v', False)
        # Processing the call keyword arguments (line 587)
        kwargs_174065 = {}
        # Getting the type of 'solve' (line 587)
        solve_174058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 41), 'solve', False)
        # Calling solve(args, kwargs) (line 587)
        solve_call_result_174066 = invoke(stypy.reporting.localization.Localization(__file__, 587, 41), solve_174058, *[T_174063, v_174064], **kwargs_174065)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 587, 31), 'stypy_return_type', solve_call_result_174066)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_54' in the type store
        # Getting the type of 'stypy_return_type' (line 587)
        stypy_return_type_174067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 31), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_174067)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_54'
        return stypy_return_type_174067

    # Assigning a type to the variable '_stypy_temp_lambda_54' (line 587)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 587, 31), '_stypy_temp_lambda_54', _stypy_temp_lambda_54)
    # Getting the type of '_stypy_temp_lambda_54' (line 587)
    _stypy_temp_lambda_54_174068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 31), '_stypy_temp_lambda_54')
    keyword_174069 = _stypy_temp_lambda_54_174068
    # Getting the type of 'J' (line 588)
    J_174070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 30), 'J', False)
    # Obtaining the member 'dtype' of a type (line 588)
    dtype_174071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 30), J_174070, 'dtype')
    keyword_174072 = dtype_174071
    # Getting the type of 'J' (line 588)
    J_174073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 45), 'J', False)
    # Obtaining the member 'shape' of a type (line 588)
    shape_174074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 45), J_174073, 'shape')
    keyword_174075 = shape_174074
    kwargs_174076 = {'rmatvec': keyword_174049, 'dtype': keyword_174072, 'shape': keyword_174075, 'solve': keyword_174057, 'rsolve': keyword_174069, 'matvec': keyword_174037}
    # Getting the type of 'Jacobian' (line 584)
    Jacobian_174029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 15), 'Jacobian', False)
    # Calling Jacobian(args, kwargs) (line 584)
    Jacobian_call_result_174077 = invoke(stypy.reporting.localization.Localization(__file__, 584, 15), Jacobian_174029, *[], **kwargs_174076)
    
    # Assigning a type to the variable 'stypy_return_type' (line 584)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 584, 8), 'stypy_return_type', Jacobian_call_result_174077)
    # SSA branch for the else part of an if statement (line 577)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to isspmatrix(...): (line 589)
    # Processing the call arguments (line 589)
    # Getting the type of 'J' (line 589)
    J_174081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 33), 'J', False)
    # Processing the call keyword arguments (line 589)
    kwargs_174082 = {}
    # Getting the type of 'scipy' (line 589)
    scipy_174078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 9), 'scipy', False)
    # Obtaining the member 'sparse' of a type (line 589)
    sparse_174079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 9), scipy_174078, 'sparse')
    # Obtaining the member 'isspmatrix' of a type (line 589)
    isspmatrix_174080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 9), sparse_174079, 'isspmatrix')
    # Calling isspmatrix(args, kwargs) (line 589)
    isspmatrix_call_result_174083 = invoke(stypy.reporting.localization.Localization(__file__, 589, 9), isspmatrix_174080, *[J_174081], **kwargs_174082)
    
    # Testing the type of an if condition (line 589)
    if_condition_174084 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 589, 9), isspmatrix_call_result_174083)
    # Assigning a type to the variable 'if_condition_174084' (line 589)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 589, 9), 'if_condition_174084', if_condition_174084)
    # SSA begins for if statement (line 589)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Obtaining the type of the subscript
    int_174085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 19), 'int')
    # Getting the type of 'J' (line 590)
    J_174086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 11), 'J')
    # Obtaining the member 'shape' of a type (line 590)
    shape_174087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 11), J_174086, 'shape')
    # Obtaining the member '__getitem__' of a type (line 590)
    getitem___174088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 11), shape_174087, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 590)
    subscript_call_result_174089 = invoke(stypy.reporting.localization.Localization(__file__, 590, 11), getitem___174088, int_174085)
    
    
    # Obtaining the type of the subscript
    int_174090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 33), 'int')
    # Getting the type of 'J' (line 590)
    J_174091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 25), 'J')
    # Obtaining the member 'shape' of a type (line 590)
    shape_174092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 25), J_174091, 'shape')
    # Obtaining the member '__getitem__' of a type (line 590)
    getitem___174093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 25), shape_174092, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 590)
    subscript_call_result_174094 = invoke(stypy.reporting.localization.Localization(__file__, 590, 25), getitem___174093, int_174090)
    
    # Applying the binary operator '!=' (line 590)
    result_ne_174095 = python_operator(stypy.reporting.localization.Localization(__file__, 590, 11), '!=', subscript_call_result_174089, subscript_call_result_174094)
    
    # Testing the type of an if condition (line 590)
    if_condition_174096 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 590, 8), result_ne_174095)
    # Assigning a type to the variable 'if_condition_174096' (line 590)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 590, 8), 'if_condition_174096', if_condition_174096)
    # SSA begins for if statement (line 590)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 591)
    # Processing the call arguments (line 591)
    str_174098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 29), 'str', 'matrix must be square')
    # Processing the call keyword arguments (line 591)
    kwargs_174099 = {}
    # Getting the type of 'ValueError' (line 591)
    ValueError_174097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 591)
    ValueError_call_result_174100 = invoke(stypy.reporting.localization.Localization(__file__, 591, 18), ValueError_174097, *[str_174098], **kwargs_174099)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 591, 12), ValueError_call_result_174100, 'raise parameter', BaseException)
    # SSA join for if statement (line 590)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to Jacobian(...): (line 592)
    # Processing the call keyword arguments (line 592)

    @norecursion
    def _stypy_temp_lambda_55(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_55'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_55', 592, 31, True)
        # Passed parameters checking function
        _stypy_temp_lambda_55.stypy_localization = localization
        _stypy_temp_lambda_55.stypy_type_of_self = None
        _stypy_temp_lambda_55.stypy_type_store = module_type_store
        _stypy_temp_lambda_55.stypy_function_name = '_stypy_temp_lambda_55'
        _stypy_temp_lambda_55.stypy_param_names_list = ['v']
        _stypy_temp_lambda_55.stypy_varargs_param_name = None
        _stypy_temp_lambda_55.stypy_kwargs_param_name = None
        _stypy_temp_lambda_55.stypy_call_defaults = defaults
        _stypy_temp_lambda_55.stypy_call_varargs = varargs
        _stypy_temp_lambda_55.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_55', ['v'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_55', ['v'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        # Getting the type of 'J' (line 592)
        J_174102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 41), 'J', False)
        # Getting the type of 'v' (line 592)
        v_174103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 43), 'v', False)
        # Applying the binary operator '*' (line 592)
        result_mul_174104 = python_operator(stypy.reporting.localization.Localization(__file__, 592, 41), '*', J_174102, v_174103)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 592)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 592, 31), 'stypy_return_type', result_mul_174104)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_55' in the type store
        # Getting the type of 'stypy_return_type' (line 592)
        stypy_return_type_174105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 31), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_174105)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_55'
        return stypy_return_type_174105

    # Assigning a type to the variable '_stypy_temp_lambda_55' (line 592)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 592, 31), '_stypy_temp_lambda_55', _stypy_temp_lambda_55)
    # Getting the type of '_stypy_temp_lambda_55' (line 592)
    _stypy_temp_lambda_55_174106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 31), '_stypy_temp_lambda_55')
    keyword_174107 = _stypy_temp_lambda_55_174106

    @norecursion
    def _stypy_temp_lambda_56(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_56'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_56', 593, 32, True)
        # Passed parameters checking function
        _stypy_temp_lambda_56.stypy_localization = localization
        _stypy_temp_lambda_56.stypy_type_of_self = None
        _stypy_temp_lambda_56.stypy_type_store = module_type_store
        _stypy_temp_lambda_56.stypy_function_name = '_stypy_temp_lambda_56'
        _stypy_temp_lambda_56.stypy_param_names_list = ['v']
        _stypy_temp_lambda_56.stypy_varargs_param_name = None
        _stypy_temp_lambda_56.stypy_kwargs_param_name = None
        _stypy_temp_lambda_56.stypy_call_defaults = defaults
        _stypy_temp_lambda_56.stypy_call_varargs = varargs
        _stypy_temp_lambda_56.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_56', ['v'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_56', ['v'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to conj(...): (line 593)
        # Processing the call keyword arguments (line 593)
        kwargs_174110 = {}
        # Getting the type of 'J' (line 593)
        J_174108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 42), 'J', False)
        # Obtaining the member 'conj' of a type (line 593)
        conj_174109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 42), J_174108, 'conj')
        # Calling conj(args, kwargs) (line 593)
        conj_call_result_174111 = invoke(stypy.reporting.localization.Localization(__file__, 593, 42), conj_174109, *[], **kwargs_174110)
        
        # Obtaining the member 'T' of a type (line 593)
        T_174112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 42), conj_call_result_174111, 'T')
        # Getting the type of 'v' (line 593)
        v_174113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 55), 'v', False)
        # Applying the binary operator '*' (line 593)
        result_mul_174114 = python_operator(stypy.reporting.localization.Localization(__file__, 593, 42), '*', T_174112, v_174113)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 593)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 32), 'stypy_return_type', result_mul_174114)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_56' in the type store
        # Getting the type of 'stypy_return_type' (line 593)
        stypy_return_type_174115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 32), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_174115)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_56'
        return stypy_return_type_174115

    # Assigning a type to the variable '_stypy_temp_lambda_56' (line 593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 32), '_stypy_temp_lambda_56', _stypy_temp_lambda_56)
    # Getting the type of '_stypy_temp_lambda_56' (line 593)
    _stypy_temp_lambda_56_174116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 32), '_stypy_temp_lambda_56')
    keyword_174117 = _stypy_temp_lambda_56_174116

    @norecursion
    def _stypy_temp_lambda_57(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_57'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_57', 594, 30, True)
        # Passed parameters checking function
        _stypy_temp_lambda_57.stypy_localization = localization
        _stypy_temp_lambda_57.stypy_type_of_self = None
        _stypy_temp_lambda_57.stypy_type_store = module_type_store
        _stypy_temp_lambda_57.stypy_function_name = '_stypy_temp_lambda_57'
        _stypy_temp_lambda_57.stypy_param_names_list = ['v']
        _stypy_temp_lambda_57.stypy_varargs_param_name = None
        _stypy_temp_lambda_57.stypy_kwargs_param_name = None
        _stypy_temp_lambda_57.stypy_call_defaults = defaults
        _stypy_temp_lambda_57.stypy_call_varargs = varargs
        _stypy_temp_lambda_57.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_57', ['v'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_57', ['v'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to spsolve(...): (line 594)
        # Processing the call arguments (line 594)
        # Getting the type of 'J' (line 594)
        J_174119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 48), 'J', False)
        # Getting the type of 'v' (line 594)
        v_174120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 51), 'v', False)
        # Processing the call keyword arguments (line 594)
        kwargs_174121 = {}
        # Getting the type of 'spsolve' (line 594)
        spsolve_174118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 40), 'spsolve', False)
        # Calling spsolve(args, kwargs) (line 594)
        spsolve_call_result_174122 = invoke(stypy.reporting.localization.Localization(__file__, 594, 40), spsolve_174118, *[J_174119, v_174120], **kwargs_174121)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 30), 'stypy_return_type', spsolve_call_result_174122)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_57' in the type store
        # Getting the type of 'stypy_return_type' (line 594)
        stypy_return_type_174123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 30), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_174123)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_57'
        return stypy_return_type_174123

    # Assigning a type to the variable '_stypy_temp_lambda_57' (line 594)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 30), '_stypy_temp_lambda_57', _stypy_temp_lambda_57)
    # Getting the type of '_stypy_temp_lambda_57' (line 594)
    _stypy_temp_lambda_57_174124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 30), '_stypy_temp_lambda_57')
    keyword_174125 = _stypy_temp_lambda_57_174124

    @norecursion
    def _stypy_temp_lambda_58(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_58'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_58', 595, 31, True)
        # Passed parameters checking function
        _stypy_temp_lambda_58.stypy_localization = localization
        _stypy_temp_lambda_58.stypy_type_of_self = None
        _stypy_temp_lambda_58.stypy_type_store = module_type_store
        _stypy_temp_lambda_58.stypy_function_name = '_stypy_temp_lambda_58'
        _stypy_temp_lambda_58.stypy_param_names_list = ['v']
        _stypy_temp_lambda_58.stypy_varargs_param_name = None
        _stypy_temp_lambda_58.stypy_kwargs_param_name = None
        _stypy_temp_lambda_58.stypy_call_defaults = defaults
        _stypy_temp_lambda_58.stypy_call_varargs = varargs
        _stypy_temp_lambda_58.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_58', ['v'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_58', ['v'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to spsolve(...): (line 595)
        # Processing the call arguments (line 595)
        
        # Call to conj(...): (line 595)
        # Processing the call keyword arguments (line 595)
        kwargs_174129 = {}
        # Getting the type of 'J' (line 595)
        J_174127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 49), 'J', False)
        # Obtaining the member 'conj' of a type (line 595)
        conj_174128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 595, 49), J_174127, 'conj')
        # Calling conj(args, kwargs) (line 595)
        conj_call_result_174130 = invoke(stypy.reporting.localization.Localization(__file__, 595, 49), conj_174128, *[], **kwargs_174129)
        
        # Obtaining the member 'T' of a type (line 595)
        T_174131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 595, 49), conj_call_result_174130, 'T')
        # Getting the type of 'v' (line 595)
        v_174132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 61), 'v', False)
        # Processing the call keyword arguments (line 595)
        kwargs_174133 = {}
        # Getting the type of 'spsolve' (line 595)
        spsolve_174126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 41), 'spsolve', False)
        # Calling spsolve(args, kwargs) (line 595)
        spsolve_call_result_174134 = invoke(stypy.reporting.localization.Localization(__file__, 595, 41), spsolve_174126, *[T_174131, v_174132], **kwargs_174133)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 595)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 595, 31), 'stypy_return_type', spsolve_call_result_174134)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_58' in the type store
        # Getting the type of 'stypy_return_type' (line 595)
        stypy_return_type_174135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 31), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_174135)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_58'
        return stypy_return_type_174135

    # Assigning a type to the variable '_stypy_temp_lambda_58' (line 595)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 595, 31), '_stypy_temp_lambda_58', _stypy_temp_lambda_58)
    # Getting the type of '_stypy_temp_lambda_58' (line 595)
    _stypy_temp_lambda_58_174136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 31), '_stypy_temp_lambda_58')
    keyword_174137 = _stypy_temp_lambda_58_174136
    # Getting the type of 'J' (line 596)
    J_174138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 30), 'J', False)
    # Obtaining the member 'dtype' of a type (line 596)
    dtype_174139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 596, 30), J_174138, 'dtype')
    keyword_174140 = dtype_174139
    # Getting the type of 'J' (line 596)
    J_174141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 45), 'J', False)
    # Obtaining the member 'shape' of a type (line 596)
    shape_174142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 596, 45), J_174141, 'shape')
    keyword_174143 = shape_174142
    kwargs_174144 = {'rmatvec': keyword_174117, 'dtype': keyword_174140, 'shape': keyword_174143, 'solve': keyword_174125, 'rsolve': keyword_174137, 'matvec': keyword_174107}
    # Getting the type of 'Jacobian' (line 592)
    Jacobian_174101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 15), 'Jacobian', False)
    # Calling Jacobian(args, kwargs) (line 592)
    Jacobian_call_result_174145 = invoke(stypy.reporting.localization.Localization(__file__, 592, 15), Jacobian_174101, *[], **kwargs_174144)
    
    # Assigning a type to the variable 'stypy_return_type' (line 592)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 592, 8), 'stypy_return_type', Jacobian_call_result_174145)
    # SSA branch for the else part of an if statement (line 589)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    # Call to hasattr(...): (line 597)
    # Processing the call arguments (line 597)
    # Getting the type of 'J' (line 597)
    J_174147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 17), 'J', False)
    str_174148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 597, 20), 'str', 'shape')
    # Processing the call keyword arguments (line 597)
    kwargs_174149 = {}
    # Getting the type of 'hasattr' (line 597)
    hasattr_174146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 9), 'hasattr', False)
    # Calling hasattr(args, kwargs) (line 597)
    hasattr_call_result_174150 = invoke(stypy.reporting.localization.Localization(__file__, 597, 9), hasattr_174146, *[J_174147, str_174148], **kwargs_174149)
    
    
    # Call to hasattr(...): (line 597)
    # Processing the call arguments (line 597)
    # Getting the type of 'J' (line 597)
    J_174152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 41), 'J', False)
    str_174153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 597, 44), 'str', 'dtype')
    # Processing the call keyword arguments (line 597)
    kwargs_174154 = {}
    # Getting the type of 'hasattr' (line 597)
    hasattr_174151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 33), 'hasattr', False)
    # Calling hasattr(args, kwargs) (line 597)
    hasattr_call_result_174155 = invoke(stypy.reporting.localization.Localization(__file__, 597, 33), hasattr_174151, *[J_174152, str_174153], **kwargs_174154)
    
    # Applying the binary operator 'and' (line 597)
    result_and_keyword_174156 = python_operator(stypy.reporting.localization.Localization(__file__, 597, 9), 'and', hasattr_call_result_174150, hasattr_call_result_174155)
    
    # Call to hasattr(...): (line 597)
    # Processing the call arguments (line 597)
    # Getting the type of 'J' (line 597)
    J_174158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 65), 'J', False)
    str_174159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 597, 68), 'str', 'solve')
    # Processing the call keyword arguments (line 597)
    kwargs_174160 = {}
    # Getting the type of 'hasattr' (line 597)
    hasattr_174157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 57), 'hasattr', False)
    # Calling hasattr(args, kwargs) (line 597)
    hasattr_call_result_174161 = invoke(stypy.reporting.localization.Localization(__file__, 597, 57), hasattr_174157, *[J_174158, str_174159], **kwargs_174160)
    
    # Applying the binary operator 'and' (line 597)
    result_and_keyword_174162 = python_operator(stypy.reporting.localization.Localization(__file__, 597, 9), 'and', result_and_keyword_174156, hasattr_call_result_174161)
    
    # Testing the type of an if condition (line 597)
    if_condition_174163 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 597, 9), result_and_keyword_174162)
    # Assigning a type to the variable 'if_condition_174163' (line 597)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 597, 9), 'if_condition_174163', if_condition_174163)
    # SSA begins for if statement (line 597)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to Jacobian(...): (line 598)
    # Processing the call keyword arguments (line 598)
    
    # Call to getattr(...): (line 598)
    # Processing the call arguments (line 598)
    # Getting the type of 'J' (line 598)
    J_174166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 39), 'J', False)
    str_174167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 598, 42), 'str', 'matvec')
    # Processing the call keyword arguments (line 598)
    kwargs_174168 = {}
    # Getting the type of 'getattr' (line 598)
    getattr_174165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 31), 'getattr', False)
    # Calling getattr(args, kwargs) (line 598)
    getattr_call_result_174169 = invoke(stypy.reporting.localization.Localization(__file__, 598, 31), getattr_174165, *[J_174166, str_174167], **kwargs_174168)
    
    keyword_174170 = getattr_call_result_174169
    
    # Call to getattr(...): (line 599)
    # Processing the call arguments (line 599)
    # Getting the type of 'J' (line 599)
    J_174172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 40), 'J', False)
    str_174173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 599, 43), 'str', 'rmatvec')
    # Processing the call keyword arguments (line 599)
    kwargs_174174 = {}
    # Getting the type of 'getattr' (line 599)
    getattr_174171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 32), 'getattr', False)
    # Calling getattr(args, kwargs) (line 599)
    getattr_call_result_174175 = invoke(stypy.reporting.localization.Localization(__file__, 599, 32), getattr_174171, *[J_174172, str_174173], **kwargs_174174)
    
    keyword_174176 = getattr_call_result_174175
    # Getting the type of 'J' (line 600)
    J_174177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 30), 'J', False)
    # Obtaining the member 'solve' of a type (line 600)
    solve_174178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 600, 30), J_174177, 'solve')
    keyword_174179 = solve_174178
    
    # Call to getattr(...): (line 601)
    # Processing the call arguments (line 601)
    # Getting the type of 'J' (line 601)
    J_174181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 39), 'J', False)
    str_174182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 601, 42), 'str', 'rsolve')
    # Processing the call keyword arguments (line 601)
    kwargs_174183 = {}
    # Getting the type of 'getattr' (line 601)
    getattr_174180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 31), 'getattr', False)
    # Calling getattr(args, kwargs) (line 601)
    getattr_call_result_174184 = invoke(stypy.reporting.localization.Localization(__file__, 601, 31), getattr_174180, *[J_174181, str_174182], **kwargs_174183)
    
    keyword_174185 = getattr_call_result_174184
    
    # Call to getattr(...): (line 602)
    # Processing the call arguments (line 602)
    # Getting the type of 'J' (line 602)
    J_174187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 39), 'J', False)
    str_174188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 42), 'str', 'update')
    # Processing the call keyword arguments (line 602)
    kwargs_174189 = {}
    # Getting the type of 'getattr' (line 602)
    getattr_174186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 31), 'getattr', False)
    # Calling getattr(args, kwargs) (line 602)
    getattr_call_result_174190 = invoke(stypy.reporting.localization.Localization(__file__, 602, 31), getattr_174186, *[J_174187, str_174188], **kwargs_174189)
    
    keyword_174191 = getattr_call_result_174190
    
    # Call to getattr(...): (line 603)
    # Processing the call arguments (line 603)
    # Getting the type of 'J' (line 603)
    J_174193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 38), 'J', False)
    str_174194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 41), 'str', 'setup')
    # Processing the call keyword arguments (line 603)
    kwargs_174195 = {}
    # Getting the type of 'getattr' (line 603)
    getattr_174192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 30), 'getattr', False)
    # Calling getattr(args, kwargs) (line 603)
    getattr_call_result_174196 = invoke(stypy.reporting.localization.Localization(__file__, 603, 30), getattr_174192, *[J_174193, str_174194], **kwargs_174195)
    
    keyword_174197 = getattr_call_result_174196
    # Getting the type of 'J' (line 604)
    J_174198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 30), 'J', False)
    # Obtaining the member 'dtype' of a type (line 604)
    dtype_174199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 604, 30), J_174198, 'dtype')
    keyword_174200 = dtype_174199
    # Getting the type of 'J' (line 605)
    J_174201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 30), 'J', False)
    # Obtaining the member 'shape' of a type (line 605)
    shape_174202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 30), J_174201, 'shape')
    keyword_174203 = shape_174202
    kwargs_174204 = {'rmatvec': keyword_174176, 'dtype': keyword_174200, 'setup': keyword_174197, 'update': keyword_174191, 'shape': keyword_174203, 'solve': keyword_174179, 'rsolve': keyword_174185, 'matvec': keyword_174170}
    # Getting the type of 'Jacobian' (line 598)
    Jacobian_174164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 15), 'Jacobian', False)
    # Calling Jacobian(args, kwargs) (line 598)
    Jacobian_call_result_174205 = invoke(stypy.reporting.localization.Localization(__file__, 598, 15), Jacobian_174164, *[], **kwargs_174204)
    
    # Assigning a type to the variable 'stypy_return_type' (line 598)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 8), 'stypy_return_type', Jacobian_call_result_174205)
    # SSA branch for the else part of an if statement (line 597)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to callable(...): (line 606)
    # Processing the call arguments (line 606)
    # Getting the type of 'J' (line 606)
    J_174207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 18), 'J', False)
    # Processing the call keyword arguments (line 606)
    kwargs_174208 = {}
    # Getting the type of 'callable' (line 606)
    callable_174206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 9), 'callable', False)
    # Calling callable(args, kwargs) (line 606)
    callable_call_result_174209 = invoke(stypy.reporting.localization.Localization(__file__, 606, 9), callable_174206, *[J_174207], **kwargs_174208)
    
    # Testing the type of an if condition (line 606)
    if_condition_174210 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 606, 9), callable_call_result_174209)
    # Assigning a type to the variable 'if_condition_174210' (line 606)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 9), 'if_condition_174210', if_condition_174210)
    # SSA begins for if statement (line 606)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Declaration of the 'Jac' class
    # Getting the type of 'Jacobian' (line 608)
    Jacobian_174211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 18), 'Jacobian')

    class Jac(Jacobian_174211, ):

        @norecursion
        def update(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'update'
            module_type_store = module_type_store.open_function_context('update', 609, 12, False)
            # Assigning a type to the variable 'self' (line 610)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 610, 12), 'self', type_of_self)
            
            # Passed parameters checking function
            Jac.update.__dict__.__setitem__('stypy_localization', localization)
            Jac.update.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            Jac.update.__dict__.__setitem__('stypy_type_store', module_type_store)
            Jac.update.__dict__.__setitem__('stypy_function_name', 'Jac.update')
            Jac.update.__dict__.__setitem__('stypy_param_names_list', ['x', 'F'])
            Jac.update.__dict__.__setitem__('stypy_varargs_param_name', None)
            Jac.update.__dict__.__setitem__('stypy_kwargs_param_name', None)
            Jac.update.__dict__.__setitem__('stypy_call_defaults', defaults)
            Jac.update.__dict__.__setitem__('stypy_call_varargs', varargs)
            Jac.update.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            Jac.update.__dict__.__setitem__('stypy_declared_arg_number', 3)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Jac.update', ['x', 'F'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'update', localization, ['x', 'F'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'update(...)' code ##################

            
            # Assigning a Name to a Attribute (line 610):
            
            # Assigning a Name to a Attribute (line 610):
            # Getting the type of 'x' (line 610)
            x_174212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 25), 'x')
            # Getting the type of 'self' (line 610)
            self_174213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 16), 'self')
            # Setting the type of the member 'x' of a type (line 610)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 16), self_174213, 'x', x_174212)
            
            # ################# End of 'update(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'update' in the type store
            # Getting the type of 'stypy_return_type' (line 609)
            stypy_return_type_174214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 12), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_174214)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'update'
            return stypy_return_type_174214


        @norecursion
        def solve(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            int_174215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 612, 35), 'int')
            defaults = [int_174215]
            # Create a new context for function 'solve'
            module_type_store = module_type_store.open_function_context('solve', 612, 12, False)
            # Assigning a type to the variable 'self' (line 613)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 613, 12), 'self', type_of_self)
            
            # Passed parameters checking function
            Jac.solve.__dict__.__setitem__('stypy_localization', localization)
            Jac.solve.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            Jac.solve.__dict__.__setitem__('stypy_type_store', module_type_store)
            Jac.solve.__dict__.__setitem__('stypy_function_name', 'Jac.solve')
            Jac.solve.__dict__.__setitem__('stypy_param_names_list', ['v', 'tol'])
            Jac.solve.__dict__.__setitem__('stypy_varargs_param_name', None)
            Jac.solve.__dict__.__setitem__('stypy_kwargs_param_name', None)
            Jac.solve.__dict__.__setitem__('stypy_call_defaults', defaults)
            Jac.solve.__dict__.__setitem__('stypy_call_varargs', varargs)
            Jac.solve.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            Jac.solve.__dict__.__setitem__('stypy_declared_arg_number', 3)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Jac.solve', ['v', 'tol'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'solve', localization, ['v', 'tol'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'solve(...)' code ##################

            
            # Assigning a Call to a Name (line 613):
            
            # Assigning a Call to a Name (line 613):
            
            # Call to J(...): (line 613)
            # Processing the call arguments (line 613)
            # Getting the type of 'self' (line 613)
            self_174217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 22), 'self', False)
            # Obtaining the member 'x' of a type (line 613)
            x_174218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 22), self_174217, 'x')
            # Processing the call keyword arguments (line 613)
            kwargs_174219 = {}
            # Getting the type of 'J' (line 613)
            J_174216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 20), 'J', False)
            # Calling J(args, kwargs) (line 613)
            J_call_result_174220 = invoke(stypy.reporting.localization.Localization(__file__, 613, 20), J_174216, *[x_174218], **kwargs_174219)
            
            # Assigning a type to the variable 'm' (line 613)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 613, 16), 'm', J_call_result_174220)
            
            
            # Call to isinstance(...): (line 614)
            # Processing the call arguments (line 614)
            # Getting the type of 'm' (line 614)
            m_174222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 30), 'm', False)
            # Getting the type of 'np' (line 614)
            np_174223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 33), 'np', False)
            # Obtaining the member 'ndarray' of a type (line 614)
            ndarray_174224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 614, 33), np_174223, 'ndarray')
            # Processing the call keyword arguments (line 614)
            kwargs_174225 = {}
            # Getting the type of 'isinstance' (line 614)
            isinstance_174221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 19), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 614)
            isinstance_call_result_174226 = invoke(stypy.reporting.localization.Localization(__file__, 614, 19), isinstance_174221, *[m_174222, ndarray_174224], **kwargs_174225)
            
            # Testing the type of an if condition (line 614)
            if_condition_174227 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 614, 16), isinstance_call_result_174226)
            # Assigning a type to the variable 'if_condition_174227' (line 614)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 614, 16), 'if_condition_174227', if_condition_174227)
            # SSA begins for if statement (line 614)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to solve(...): (line 615)
            # Processing the call arguments (line 615)
            # Getting the type of 'm' (line 615)
            m_174229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 33), 'm', False)
            # Getting the type of 'v' (line 615)
            v_174230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 36), 'v', False)
            # Processing the call keyword arguments (line 615)
            kwargs_174231 = {}
            # Getting the type of 'solve' (line 615)
            solve_174228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 27), 'solve', False)
            # Calling solve(args, kwargs) (line 615)
            solve_call_result_174232 = invoke(stypy.reporting.localization.Localization(__file__, 615, 27), solve_174228, *[m_174229, v_174230], **kwargs_174231)
            
            # Assigning a type to the variable 'stypy_return_type' (line 615)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 615, 20), 'stypy_return_type', solve_call_result_174232)
            # SSA branch for the else part of an if statement (line 614)
            module_type_store.open_ssa_branch('else')
            
            
            # Call to isspmatrix(...): (line 616)
            # Processing the call arguments (line 616)
            # Getting the type of 'm' (line 616)
            m_174236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 45), 'm', False)
            # Processing the call keyword arguments (line 616)
            kwargs_174237 = {}
            # Getting the type of 'scipy' (line 616)
            scipy_174233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 21), 'scipy', False)
            # Obtaining the member 'sparse' of a type (line 616)
            sparse_174234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 21), scipy_174233, 'sparse')
            # Obtaining the member 'isspmatrix' of a type (line 616)
            isspmatrix_174235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 21), sparse_174234, 'isspmatrix')
            # Calling isspmatrix(args, kwargs) (line 616)
            isspmatrix_call_result_174238 = invoke(stypy.reporting.localization.Localization(__file__, 616, 21), isspmatrix_174235, *[m_174236], **kwargs_174237)
            
            # Testing the type of an if condition (line 616)
            if_condition_174239 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 616, 21), isspmatrix_call_result_174238)
            # Assigning a type to the variable 'if_condition_174239' (line 616)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 616, 21), 'if_condition_174239', if_condition_174239)
            # SSA begins for if statement (line 616)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to spsolve(...): (line 617)
            # Processing the call arguments (line 617)
            # Getting the type of 'm' (line 617)
            m_174241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 35), 'm', False)
            # Getting the type of 'v' (line 617)
            v_174242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 38), 'v', False)
            # Processing the call keyword arguments (line 617)
            kwargs_174243 = {}
            # Getting the type of 'spsolve' (line 617)
            spsolve_174240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 27), 'spsolve', False)
            # Calling spsolve(args, kwargs) (line 617)
            spsolve_call_result_174244 = invoke(stypy.reporting.localization.Localization(__file__, 617, 27), spsolve_174240, *[m_174241, v_174242], **kwargs_174243)
            
            # Assigning a type to the variable 'stypy_return_type' (line 617)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 617, 20), 'stypy_return_type', spsolve_call_result_174244)
            # SSA branch for the else part of an if statement (line 616)
            module_type_store.open_ssa_branch('else')
            
            # Call to ValueError(...): (line 619)
            # Processing the call arguments (line 619)
            str_174246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 619, 37), 'str', 'Unknown matrix type')
            # Processing the call keyword arguments (line 619)
            kwargs_174247 = {}
            # Getting the type of 'ValueError' (line 619)
            ValueError_174245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 26), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 619)
            ValueError_call_result_174248 = invoke(stypy.reporting.localization.Localization(__file__, 619, 26), ValueError_174245, *[str_174246], **kwargs_174247)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 619, 20), ValueError_call_result_174248, 'raise parameter', BaseException)
            # SSA join for if statement (line 616)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 614)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # ################# End of 'solve(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'solve' in the type store
            # Getting the type of 'stypy_return_type' (line 612)
            stypy_return_type_174249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 12), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_174249)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'solve'
            return stypy_return_type_174249


        @norecursion
        def matvec(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'matvec'
            module_type_store = module_type_store.open_function_context('matvec', 621, 12, False)
            # Assigning a type to the variable 'self' (line 622)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 622, 12), 'self', type_of_self)
            
            # Passed parameters checking function
            Jac.matvec.__dict__.__setitem__('stypy_localization', localization)
            Jac.matvec.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            Jac.matvec.__dict__.__setitem__('stypy_type_store', module_type_store)
            Jac.matvec.__dict__.__setitem__('stypy_function_name', 'Jac.matvec')
            Jac.matvec.__dict__.__setitem__('stypy_param_names_list', ['v'])
            Jac.matvec.__dict__.__setitem__('stypy_varargs_param_name', None)
            Jac.matvec.__dict__.__setitem__('stypy_kwargs_param_name', None)
            Jac.matvec.__dict__.__setitem__('stypy_call_defaults', defaults)
            Jac.matvec.__dict__.__setitem__('stypy_call_varargs', varargs)
            Jac.matvec.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            Jac.matvec.__dict__.__setitem__('stypy_declared_arg_number', 2)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Jac.matvec', ['v'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'matvec', localization, ['v'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'matvec(...)' code ##################

            
            # Assigning a Call to a Name (line 622):
            
            # Assigning a Call to a Name (line 622):
            
            # Call to J(...): (line 622)
            # Processing the call arguments (line 622)
            # Getting the type of 'self' (line 622)
            self_174251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 22), 'self', False)
            # Obtaining the member 'x' of a type (line 622)
            x_174252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 622, 22), self_174251, 'x')
            # Processing the call keyword arguments (line 622)
            kwargs_174253 = {}
            # Getting the type of 'J' (line 622)
            J_174250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 20), 'J', False)
            # Calling J(args, kwargs) (line 622)
            J_call_result_174254 = invoke(stypy.reporting.localization.Localization(__file__, 622, 20), J_174250, *[x_174252], **kwargs_174253)
            
            # Assigning a type to the variable 'm' (line 622)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 622, 16), 'm', J_call_result_174254)
            
            
            # Call to isinstance(...): (line 623)
            # Processing the call arguments (line 623)
            # Getting the type of 'm' (line 623)
            m_174256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 30), 'm', False)
            # Getting the type of 'np' (line 623)
            np_174257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 33), 'np', False)
            # Obtaining the member 'ndarray' of a type (line 623)
            ndarray_174258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 623, 33), np_174257, 'ndarray')
            # Processing the call keyword arguments (line 623)
            kwargs_174259 = {}
            # Getting the type of 'isinstance' (line 623)
            isinstance_174255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 19), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 623)
            isinstance_call_result_174260 = invoke(stypy.reporting.localization.Localization(__file__, 623, 19), isinstance_174255, *[m_174256, ndarray_174258], **kwargs_174259)
            
            # Testing the type of an if condition (line 623)
            if_condition_174261 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 623, 16), isinstance_call_result_174260)
            # Assigning a type to the variable 'if_condition_174261' (line 623)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 623, 16), 'if_condition_174261', if_condition_174261)
            # SSA begins for if statement (line 623)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to dot(...): (line 624)
            # Processing the call arguments (line 624)
            # Getting the type of 'm' (line 624)
            m_174263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 31), 'm', False)
            # Getting the type of 'v' (line 624)
            v_174264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 34), 'v', False)
            # Processing the call keyword arguments (line 624)
            kwargs_174265 = {}
            # Getting the type of 'dot' (line 624)
            dot_174262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 27), 'dot', False)
            # Calling dot(args, kwargs) (line 624)
            dot_call_result_174266 = invoke(stypy.reporting.localization.Localization(__file__, 624, 27), dot_174262, *[m_174263, v_174264], **kwargs_174265)
            
            # Assigning a type to the variable 'stypy_return_type' (line 624)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 624, 20), 'stypy_return_type', dot_call_result_174266)
            # SSA branch for the else part of an if statement (line 623)
            module_type_store.open_ssa_branch('else')
            
            
            # Call to isspmatrix(...): (line 625)
            # Processing the call arguments (line 625)
            # Getting the type of 'm' (line 625)
            m_174270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 45), 'm', False)
            # Processing the call keyword arguments (line 625)
            kwargs_174271 = {}
            # Getting the type of 'scipy' (line 625)
            scipy_174267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 21), 'scipy', False)
            # Obtaining the member 'sparse' of a type (line 625)
            sparse_174268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 21), scipy_174267, 'sparse')
            # Obtaining the member 'isspmatrix' of a type (line 625)
            isspmatrix_174269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 21), sparse_174268, 'isspmatrix')
            # Calling isspmatrix(args, kwargs) (line 625)
            isspmatrix_call_result_174272 = invoke(stypy.reporting.localization.Localization(__file__, 625, 21), isspmatrix_174269, *[m_174270], **kwargs_174271)
            
            # Testing the type of an if condition (line 625)
            if_condition_174273 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 625, 21), isspmatrix_call_result_174272)
            # Assigning a type to the variable 'if_condition_174273' (line 625)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 21), 'if_condition_174273', if_condition_174273)
            # SSA begins for if statement (line 625)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            # Getting the type of 'm' (line 626)
            m_174274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 27), 'm')
            # Getting the type of 'v' (line 626)
            v_174275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 29), 'v')
            # Applying the binary operator '*' (line 626)
            result_mul_174276 = python_operator(stypy.reporting.localization.Localization(__file__, 626, 27), '*', m_174274, v_174275)
            
            # Assigning a type to the variable 'stypy_return_type' (line 626)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 20), 'stypy_return_type', result_mul_174276)
            # SSA branch for the else part of an if statement (line 625)
            module_type_store.open_ssa_branch('else')
            
            # Call to ValueError(...): (line 628)
            # Processing the call arguments (line 628)
            str_174278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, 37), 'str', 'Unknown matrix type')
            # Processing the call keyword arguments (line 628)
            kwargs_174279 = {}
            # Getting the type of 'ValueError' (line 628)
            ValueError_174277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 26), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 628)
            ValueError_call_result_174280 = invoke(stypy.reporting.localization.Localization(__file__, 628, 26), ValueError_174277, *[str_174278], **kwargs_174279)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 628, 20), ValueError_call_result_174280, 'raise parameter', BaseException)
            # SSA join for if statement (line 625)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 623)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # ################# End of 'matvec(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'matvec' in the type store
            # Getting the type of 'stypy_return_type' (line 621)
            stypy_return_type_174281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 12), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_174281)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'matvec'
            return stypy_return_type_174281


        @norecursion
        def rsolve(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            int_174282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 630, 36), 'int')
            defaults = [int_174282]
            # Create a new context for function 'rsolve'
            module_type_store = module_type_store.open_function_context('rsolve', 630, 12, False)
            # Assigning a type to the variable 'self' (line 631)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 631, 12), 'self', type_of_self)
            
            # Passed parameters checking function
            Jac.rsolve.__dict__.__setitem__('stypy_localization', localization)
            Jac.rsolve.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            Jac.rsolve.__dict__.__setitem__('stypy_type_store', module_type_store)
            Jac.rsolve.__dict__.__setitem__('stypy_function_name', 'Jac.rsolve')
            Jac.rsolve.__dict__.__setitem__('stypy_param_names_list', ['v', 'tol'])
            Jac.rsolve.__dict__.__setitem__('stypy_varargs_param_name', None)
            Jac.rsolve.__dict__.__setitem__('stypy_kwargs_param_name', None)
            Jac.rsolve.__dict__.__setitem__('stypy_call_defaults', defaults)
            Jac.rsolve.__dict__.__setitem__('stypy_call_varargs', varargs)
            Jac.rsolve.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            Jac.rsolve.__dict__.__setitem__('stypy_declared_arg_number', 3)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Jac.rsolve', ['v', 'tol'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'rsolve', localization, ['v', 'tol'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'rsolve(...)' code ##################

            
            # Assigning a Call to a Name (line 631):
            
            # Assigning a Call to a Name (line 631):
            
            # Call to J(...): (line 631)
            # Processing the call arguments (line 631)
            # Getting the type of 'self' (line 631)
            self_174284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 22), 'self', False)
            # Obtaining the member 'x' of a type (line 631)
            x_174285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 631, 22), self_174284, 'x')
            # Processing the call keyword arguments (line 631)
            kwargs_174286 = {}
            # Getting the type of 'J' (line 631)
            J_174283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 20), 'J', False)
            # Calling J(args, kwargs) (line 631)
            J_call_result_174287 = invoke(stypy.reporting.localization.Localization(__file__, 631, 20), J_174283, *[x_174285], **kwargs_174286)
            
            # Assigning a type to the variable 'm' (line 631)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 631, 16), 'm', J_call_result_174287)
            
            
            # Call to isinstance(...): (line 632)
            # Processing the call arguments (line 632)
            # Getting the type of 'm' (line 632)
            m_174289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 30), 'm', False)
            # Getting the type of 'np' (line 632)
            np_174290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 33), 'np', False)
            # Obtaining the member 'ndarray' of a type (line 632)
            ndarray_174291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 632, 33), np_174290, 'ndarray')
            # Processing the call keyword arguments (line 632)
            kwargs_174292 = {}
            # Getting the type of 'isinstance' (line 632)
            isinstance_174288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 19), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 632)
            isinstance_call_result_174293 = invoke(stypy.reporting.localization.Localization(__file__, 632, 19), isinstance_174288, *[m_174289, ndarray_174291], **kwargs_174292)
            
            # Testing the type of an if condition (line 632)
            if_condition_174294 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 632, 16), isinstance_call_result_174293)
            # Assigning a type to the variable 'if_condition_174294' (line 632)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 632, 16), 'if_condition_174294', if_condition_174294)
            # SSA begins for if statement (line 632)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to solve(...): (line 633)
            # Processing the call arguments (line 633)
            
            # Call to conj(...): (line 633)
            # Processing the call keyword arguments (line 633)
            kwargs_174298 = {}
            # Getting the type of 'm' (line 633)
            m_174296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 33), 'm', False)
            # Obtaining the member 'conj' of a type (line 633)
            conj_174297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 633, 33), m_174296, 'conj')
            # Calling conj(args, kwargs) (line 633)
            conj_call_result_174299 = invoke(stypy.reporting.localization.Localization(__file__, 633, 33), conj_174297, *[], **kwargs_174298)
            
            # Obtaining the member 'T' of a type (line 633)
            T_174300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 633, 33), conj_call_result_174299, 'T')
            # Getting the type of 'v' (line 633)
            v_174301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 45), 'v', False)
            # Processing the call keyword arguments (line 633)
            kwargs_174302 = {}
            # Getting the type of 'solve' (line 633)
            solve_174295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 27), 'solve', False)
            # Calling solve(args, kwargs) (line 633)
            solve_call_result_174303 = invoke(stypy.reporting.localization.Localization(__file__, 633, 27), solve_174295, *[T_174300, v_174301], **kwargs_174302)
            
            # Assigning a type to the variable 'stypy_return_type' (line 633)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 633, 20), 'stypy_return_type', solve_call_result_174303)
            # SSA branch for the else part of an if statement (line 632)
            module_type_store.open_ssa_branch('else')
            
            
            # Call to isspmatrix(...): (line 634)
            # Processing the call arguments (line 634)
            # Getting the type of 'm' (line 634)
            m_174307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 45), 'm', False)
            # Processing the call keyword arguments (line 634)
            kwargs_174308 = {}
            # Getting the type of 'scipy' (line 634)
            scipy_174304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 21), 'scipy', False)
            # Obtaining the member 'sparse' of a type (line 634)
            sparse_174305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 21), scipy_174304, 'sparse')
            # Obtaining the member 'isspmatrix' of a type (line 634)
            isspmatrix_174306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 21), sparse_174305, 'isspmatrix')
            # Calling isspmatrix(args, kwargs) (line 634)
            isspmatrix_call_result_174309 = invoke(stypy.reporting.localization.Localization(__file__, 634, 21), isspmatrix_174306, *[m_174307], **kwargs_174308)
            
            # Testing the type of an if condition (line 634)
            if_condition_174310 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 634, 21), isspmatrix_call_result_174309)
            # Assigning a type to the variable 'if_condition_174310' (line 634)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 21), 'if_condition_174310', if_condition_174310)
            # SSA begins for if statement (line 634)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to spsolve(...): (line 635)
            # Processing the call arguments (line 635)
            
            # Call to conj(...): (line 635)
            # Processing the call keyword arguments (line 635)
            kwargs_174314 = {}
            # Getting the type of 'm' (line 635)
            m_174312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 35), 'm', False)
            # Obtaining the member 'conj' of a type (line 635)
            conj_174313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 635, 35), m_174312, 'conj')
            # Calling conj(args, kwargs) (line 635)
            conj_call_result_174315 = invoke(stypy.reporting.localization.Localization(__file__, 635, 35), conj_174313, *[], **kwargs_174314)
            
            # Obtaining the member 'T' of a type (line 635)
            T_174316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 635, 35), conj_call_result_174315, 'T')
            # Getting the type of 'v' (line 635)
            v_174317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 47), 'v', False)
            # Processing the call keyword arguments (line 635)
            kwargs_174318 = {}
            # Getting the type of 'spsolve' (line 635)
            spsolve_174311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 27), 'spsolve', False)
            # Calling spsolve(args, kwargs) (line 635)
            spsolve_call_result_174319 = invoke(stypy.reporting.localization.Localization(__file__, 635, 27), spsolve_174311, *[T_174316, v_174317], **kwargs_174318)
            
            # Assigning a type to the variable 'stypy_return_type' (line 635)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 635, 20), 'stypy_return_type', spsolve_call_result_174319)
            # SSA branch for the else part of an if statement (line 634)
            module_type_store.open_ssa_branch('else')
            
            # Call to ValueError(...): (line 637)
            # Processing the call arguments (line 637)
            str_174321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, 37), 'str', 'Unknown matrix type')
            # Processing the call keyword arguments (line 637)
            kwargs_174322 = {}
            # Getting the type of 'ValueError' (line 637)
            ValueError_174320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 26), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 637)
            ValueError_call_result_174323 = invoke(stypy.reporting.localization.Localization(__file__, 637, 26), ValueError_174320, *[str_174321], **kwargs_174322)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 637, 20), ValueError_call_result_174323, 'raise parameter', BaseException)
            # SSA join for if statement (line 634)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 632)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # ################# End of 'rsolve(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'rsolve' in the type store
            # Getting the type of 'stypy_return_type' (line 630)
            stypy_return_type_174324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 12), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_174324)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'rsolve'
            return stypy_return_type_174324


        @norecursion
        def rmatvec(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'rmatvec'
            module_type_store = module_type_store.open_function_context('rmatvec', 639, 12, False)
            # Assigning a type to the variable 'self' (line 640)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 640, 12), 'self', type_of_self)
            
            # Passed parameters checking function
            Jac.rmatvec.__dict__.__setitem__('stypy_localization', localization)
            Jac.rmatvec.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            Jac.rmatvec.__dict__.__setitem__('stypy_type_store', module_type_store)
            Jac.rmatvec.__dict__.__setitem__('stypy_function_name', 'Jac.rmatvec')
            Jac.rmatvec.__dict__.__setitem__('stypy_param_names_list', ['v'])
            Jac.rmatvec.__dict__.__setitem__('stypy_varargs_param_name', None)
            Jac.rmatvec.__dict__.__setitem__('stypy_kwargs_param_name', None)
            Jac.rmatvec.__dict__.__setitem__('stypy_call_defaults', defaults)
            Jac.rmatvec.__dict__.__setitem__('stypy_call_varargs', varargs)
            Jac.rmatvec.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            Jac.rmatvec.__dict__.__setitem__('stypy_declared_arg_number', 2)
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Jac.rmatvec', ['v'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'rmatvec', localization, ['v'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'rmatvec(...)' code ##################

            
            # Assigning a Call to a Name (line 640):
            
            # Assigning a Call to a Name (line 640):
            
            # Call to J(...): (line 640)
            # Processing the call arguments (line 640)
            # Getting the type of 'self' (line 640)
            self_174326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 22), 'self', False)
            # Obtaining the member 'x' of a type (line 640)
            x_174327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 22), self_174326, 'x')
            # Processing the call keyword arguments (line 640)
            kwargs_174328 = {}
            # Getting the type of 'J' (line 640)
            J_174325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 20), 'J', False)
            # Calling J(args, kwargs) (line 640)
            J_call_result_174329 = invoke(stypy.reporting.localization.Localization(__file__, 640, 20), J_174325, *[x_174327], **kwargs_174328)
            
            # Assigning a type to the variable 'm' (line 640)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 640, 16), 'm', J_call_result_174329)
            
            
            # Call to isinstance(...): (line 641)
            # Processing the call arguments (line 641)
            # Getting the type of 'm' (line 641)
            m_174331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 30), 'm', False)
            # Getting the type of 'np' (line 641)
            np_174332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 33), 'np', False)
            # Obtaining the member 'ndarray' of a type (line 641)
            ndarray_174333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 641, 33), np_174332, 'ndarray')
            # Processing the call keyword arguments (line 641)
            kwargs_174334 = {}
            # Getting the type of 'isinstance' (line 641)
            isinstance_174330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 19), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 641)
            isinstance_call_result_174335 = invoke(stypy.reporting.localization.Localization(__file__, 641, 19), isinstance_174330, *[m_174331, ndarray_174333], **kwargs_174334)
            
            # Testing the type of an if condition (line 641)
            if_condition_174336 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 641, 16), isinstance_call_result_174335)
            # Assigning a type to the variable 'if_condition_174336' (line 641)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 641, 16), 'if_condition_174336', if_condition_174336)
            # SSA begins for if statement (line 641)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to dot(...): (line 642)
            # Processing the call arguments (line 642)
            
            # Call to conj(...): (line 642)
            # Processing the call keyword arguments (line 642)
            kwargs_174340 = {}
            # Getting the type of 'm' (line 642)
            m_174338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 31), 'm', False)
            # Obtaining the member 'conj' of a type (line 642)
            conj_174339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 642, 31), m_174338, 'conj')
            # Calling conj(args, kwargs) (line 642)
            conj_call_result_174341 = invoke(stypy.reporting.localization.Localization(__file__, 642, 31), conj_174339, *[], **kwargs_174340)
            
            # Obtaining the member 'T' of a type (line 642)
            T_174342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 642, 31), conj_call_result_174341, 'T')
            # Getting the type of 'v' (line 642)
            v_174343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 43), 'v', False)
            # Processing the call keyword arguments (line 642)
            kwargs_174344 = {}
            # Getting the type of 'dot' (line 642)
            dot_174337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 27), 'dot', False)
            # Calling dot(args, kwargs) (line 642)
            dot_call_result_174345 = invoke(stypy.reporting.localization.Localization(__file__, 642, 27), dot_174337, *[T_174342, v_174343], **kwargs_174344)
            
            # Assigning a type to the variable 'stypy_return_type' (line 642)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 642, 20), 'stypy_return_type', dot_call_result_174345)
            # SSA branch for the else part of an if statement (line 641)
            module_type_store.open_ssa_branch('else')
            
            
            # Call to isspmatrix(...): (line 643)
            # Processing the call arguments (line 643)
            # Getting the type of 'm' (line 643)
            m_174349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 45), 'm', False)
            # Processing the call keyword arguments (line 643)
            kwargs_174350 = {}
            # Getting the type of 'scipy' (line 643)
            scipy_174346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 21), 'scipy', False)
            # Obtaining the member 'sparse' of a type (line 643)
            sparse_174347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 643, 21), scipy_174346, 'sparse')
            # Obtaining the member 'isspmatrix' of a type (line 643)
            isspmatrix_174348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 643, 21), sparse_174347, 'isspmatrix')
            # Calling isspmatrix(args, kwargs) (line 643)
            isspmatrix_call_result_174351 = invoke(stypy.reporting.localization.Localization(__file__, 643, 21), isspmatrix_174348, *[m_174349], **kwargs_174350)
            
            # Testing the type of an if condition (line 643)
            if_condition_174352 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 643, 21), isspmatrix_call_result_174351)
            # Assigning a type to the variable 'if_condition_174352' (line 643)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 643, 21), 'if_condition_174352', if_condition_174352)
            # SSA begins for if statement (line 643)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to conj(...): (line 644)
            # Processing the call keyword arguments (line 644)
            kwargs_174355 = {}
            # Getting the type of 'm' (line 644)
            m_174353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 27), 'm', False)
            # Obtaining the member 'conj' of a type (line 644)
            conj_174354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 644, 27), m_174353, 'conj')
            # Calling conj(args, kwargs) (line 644)
            conj_call_result_174356 = invoke(stypy.reporting.localization.Localization(__file__, 644, 27), conj_174354, *[], **kwargs_174355)
            
            # Obtaining the member 'T' of a type (line 644)
            T_174357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 644, 27), conj_call_result_174356, 'T')
            # Getting the type of 'v' (line 644)
            v_174358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 40), 'v')
            # Applying the binary operator '*' (line 644)
            result_mul_174359 = python_operator(stypy.reporting.localization.Localization(__file__, 644, 27), '*', T_174357, v_174358)
            
            # Assigning a type to the variable 'stypy_return_type' (line 644)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 644, 20), 'stypy_return_type', result_mul_174359)
            # SSA branch for the else part of an if statement (line 643)
            module_type_store.open_ssa_branch('else')
            
            # Call to ValueError(...): (line 646)
            # Processing the call arguments (line 646)
            str_174361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 646, 37), 'str', 'Unknown matrix type')
            # Processing the call keyword arguments (line 646)
            kwargs_174362 = {}
            # Getting the type of 'ValueError' (line 646)
            ValueError_174360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 26), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 646)
            ValueError_call_result_174363 = invoke(stypy.reporting.localization.Localization(__file__, 646, 26), ValueError_174360, *[str_174361], **kwargs_174362)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 646, 20), ValueError_call_result_174363, 'raise parameter', BaseException)
            # SSA join for if statement (line 643)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 641)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # ################# End of 'rmatvec(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'rmatvec' in the type store
            # Getting the type of 'stypy_return_type' (line 639)
            stypy_return_type_174364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 12), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_174364)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'rmatvec'
            return stypy_return_type_174364


        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 608, 8, False)
            # Assigning a type to the variable 'self' (line 609)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 609, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, 'Jac.__init__', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            pass
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()

    
    # Assigning a type to the variable 'Jac' (line 608)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 608, 8), 'Jac', Jac)
    
    # Call to Jac(...): (line 647)
    # Processing the call keyword arguments (line 647)
    kwargs_174366 = {}
    # Getting the type of 'Jac' (line 647)
    Jac_174365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 15), 'Jac', False)
    # Calling Jac(args, kwargs) (line 647)
    Jac_call_result_174367 = invoke(stypy.reporting.localization.Localization(__file__, 647, 15), Jac_174365, *[], **kwargs_174366)
    
    # Assigning a type to the variable 'stypy_return_type' (line 647)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 647, 8), 'stypy_return_type', Jac_call_result_174367)
    # SSA branch for the else part of an if statement (line 606)
    module_type_store.open_ssa_branch('else')
    
    # Type idiom detected: calculating its left and rigth part (line 648)
    # Getting the type of 'str' (line 648)
    str_174368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 23), 'str')
    # Getting the type of 'J' (line 648)
    J_174369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 20), 'J')
    
    (may_be_174370, more_types_in_union_174371) = may_be_subtype(str_174368, J_174369)

    if may_be_174370:

        if more_types_in_union_174371:
            # Runtime conditional SSA (line 648)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'J' (line 648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 9), 'J', remove_not_subtype_from_union(J_174369, str))
        
        # Call to (...): (line 649)
        # Processing the call keyword arguments (line 649)
        kwargs_174392 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'J' (line 655)
        J_174372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 43), 'J', False)
        
        # Call to dict(...): (line 649)
        # Processing the call keyword arguments (line 649)
        # Getting the type of 'BroydenFirst' (line 649)
        BroydenFirst_174374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 29), 'BroydenFirst', False)
        keyword_174375 = BroydenFirst_174374
        # Getting the type of 'BroydenSecond' (line 650)
        BroydenSecond_174376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 29), 'BroydenSecond', False)
        keyword_174377 = BroydenSecond_174376
        # Getting the type of 'Anderson' (line 651)
        Anderson_174378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 29), 'Anderson', False)
        keyword_174379 = Anderson_174378
        # Getting the type of 'DiagBroyden' (line 652)
        DiagBroyden_174380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 32), 'DiagBroyden', False)
        keyword_174381 = DiagBroyden_174380
        # Getting the type of 'LinearMixing' (line 653)
        LinearMixing_174382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 33), 'LinearMixing', False)
        keyword_174383 = LinearMixing_174382
        # Getting the type of 'ExcitingMixing' (line 654)
        ExcitingMixing_174384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 35), 'ExcitingMixing', False)
        keyword_174385 = ExcitingMixing_174384
        # Getting the type of 'KrylovJacobian' (line 655)
        KrylovJacobian_174386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 27), 'KrylovJacobian', False)
        keyword_174387 = KrylovJacobian_174386
        kwargs_174388 = {'broyden2': keyword_174377, 'broyden1': keyword_174375, 'excitingmixing': keyword_174385, 'krylov': keyword_174387, 'anderson': keyword_174379, 'linearmixing': keyword_174383, 'diagbroyden': keyword_174381}
        # Getting the type of 'dict' (line 649)
        dict_174373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 15), 'dict', False)
        # Calling dict(args, kwargs) (line 649)
        dict_call_result_174389 = invoke(stypy.reporting.localization.Localization(__file__, 649, 15), dict_174373, *[], **kwargs_174388)
        
        # Obtaining the member '__getitem__' of a type (line 649)
        getitem___174390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 649, 15), dict_call_result_174389, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 649)
        subscript_call_result_174391 = invoke(stypy.reporting.localization.Localization(__file__, 649, 15), getitem___174390, J_174372)
        
        # Calling (args, kwargs) (line 649)
        _call_result_174393 = invoke(stypy.reporting.localization.Localization(__file__, 649, 15), subscript_call_result_174391, *[], **kwargs_174392)
        
        # Assigning a type to the variable 'stypy_return_type' (line 649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 8), 'stypy_return_type', _call_result_174393)

        if more_types_in_union_174371:
            # Runtime conditional SSA for else branch (line 648)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_174370) or more_types_in_union_174371):
        # Assigning a type to the variable 'J' (line 648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 9), 'J', remove_subtype_from_union(J_174369, str))
        
        # Call to TypeError(...): (line 657)
        # Processing the call arguments (line 657)
        str_174395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 657, 24), 'str', 'Cannot convert object to a Jacobian')
        # Processing the call keyword arguments (line 657)
        kwargs_174396 = {}
        # Getting the type of 'TypeError' (line 657)
        TypeError_174394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 14), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 657)
        TypeError_call_result_174397 = invoke(stypy.reporting.localization.Localization(__file__, 657, 14), TypeError_174394, *[str_174395], **kwargs_174396)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 657, 8), TypeError_call_result_174397, 'raise parameter', BaseException)

        if (may_be_174370 and more_types_in_union_174371):
            # SSA join for if statement (line 648)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 606)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 597)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 589)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 577)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 575)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 573)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'asjacobian(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'asjacobian' in the type store
    # Getting the type of 'stypy_return_type' (line 568)
    stypy_return_type_174398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_174398)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'asjacobian'
    return stypy_return_type_174398

# Assigning a type to the variable 'asjacobian' (line 568)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 568, 0), 'asjacobian', asjacobian)
# Declaration of the 'GenericBroyden' class
# Getting the type of 'Jacobian' (line 664)
Jacobian_174399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 21), 'Jacobian')

class GenericBroyden(Jacobian_174399, ):

    @norecursion
    def setup(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'setup'
        module_type_store = module_type_store.open_function_context('setup', 665, 4, False)
        # Assigning a type to the variable 'self' (line 666)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GenericBroyden.setup.__dict__.__setitem__('stypy_localization', localization)
        GenericBroyden.setup.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GenericBroyden.setup.__dict__.__setitem__('stypy_type_store', module_type_store)
        GenericBroyden.setup.__dict__.__setitem__('stypy_function_name', 'GenericBroyden.setup')
        GenericBroyden.setup.__dict__.__setitem__('stypy_param_names_list', ['x0', 'f0', 'func'])
        GenericBroyden.setup.__dict__.__setitem__('stypy_varargs_param_name', None)
        GenericBroyden.setup.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GenericBroyden.setup.__dict__.__setitem__('stypy_call_defaults', defaults)
        GenericBroyden.setup.__dict__.__setitem__('stypy_call_varargs', varargs)
        GenericBroyden.setup.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GenericBroyden.setup.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GenericBroyden.setup', ['x0', 'f0', 'func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'setup', localization, ['x0', 'f0', 'func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'setup(...)' code ##################

        
        # Call to setup(...): (line 666)
        # Processing the call arguments (line 666)
        # Getting the type of 'self' (line 666)
        self_174402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 23), 'self', False)
        # Getting the type of 'x0' (line 666)
        x0_174403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 29), 'x0', False)
        # Getting the type of 'f0' (line 666)
        f0_174404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 33), 'f0', False)
        # Getting the type of 'func' (line 666)
        func_174405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 37), 'func', False)
        # Processing the call keyword arguments (line 666)
        kwargs_174406 = {}
        # Getting the type of 'Jacobian' (line 666)
        Jacobian_174400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 8), 'Jacobian', False)
        # Obtaining the member 'setup' of a type (line 666)
        setup_174401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 8), Jacobian_174400, 'setup')
        # Calling setup(args, kwargs) (line 666)
        setup_call_result_174407 = invoke(stypy.reporting.localization.Localization(__file__, 666, 8), setup_174401, *[self_174402, x0_174403, f0_174404, func_174405], **kwargs_174406)
        
        
        # Assigning a Name to a Attribute (line 667):
        
        # Assigning a Name to a Attribute (line 667):
        # Getting the type of 'f0' (line 667)
        f0_174408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 22), 'f0')
        # Getting the type of 'self' (line 667)
        self_174409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 8), 'self')
        # Setting the type of the member 'last_f' of a type (line 667)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 8), self_174409, 'last_f', f0_174408)
        
        # Assigning a Name to a Attribute (line 668):
        
        # Assigning a Name to a Attribute (line 668):
        # Getting the type of 'x0' (line 668)
        x0_174410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 22), 'x0')
        # Getting the type of 'self' (line 668)
        self_174411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 8), 'self')
        # Setting the type of the member 'last_x' of a type (line 668)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 668, 8), self_174411, 'last_x', x0_174410)
        
        
        # Evaluating a boolean operation
        
        # Call to hasattr(...): (line 670)
        # Processing the call arguments (line 670)
        # Getting the type of 'self' (line 670)
        self_174413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 19), 'self', False)
        str_174414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 670, 25), 'str', 'alpha')
        # Processing the call keyword arguments (line 670)
        kwargs_174415 = {}
        # Getting the type of 'hasattr' (line 670)
        hasattr_174412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 11), 'hasattr', False)
        # Calling hasattr(args, kwargs) (line 670)
        hasattr_call_result_174416 = invoke(stypy.reporting.localization.Localization(__file__, 670, 11), hasattr_174412, *[self_174413, str_174414], **kwargs_174415)
        
        
        # Getting the type of 'self' (line 670)
        self_174417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 38), 'self')
        # Obtaining the member 'alpha' of a type (line 670)
        alpha_174418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 38), self_174417, 'alpha')
        # Getting the type of 'None' (line 670)
        None_174419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 52), 'None')
        # Applying the binary operator 'is' (line 670)
        result_is__174420 = python_operator(stypy.reporting.localization.Localization(__file__, 670, 38), 'is', alpha_174418, None_174419)
        
        # Applying the binary operator 'and' (line 670)
        result_and_keyword_174421 = python_operator(stypy.reporting.localization.Localization(__file__, 670, 11), 'and', hasattr_call_result_174416, result_is__174420)
        
        # Testing the type of an if condition (line 670)
        if_condition_174422 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 670, 8), result_and_keyword_174421)
        # Assigning a type to the variable 'if_condition_174422' (line 670)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 670, 8), 'if_condition_174422', if_condition_174422)
        # SSA begins for if statement (line 670)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 673):
        
        # Assigning a Call to a Name (line 673):
        
        # Call to norm(...): (line 673)
        # Processing the call arguments (line 673)
        # Getting the type of 'f0' (line 673)
        f0_174424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 26), 'f0', False)
        # Processing the call keyword arguments (line 673)
        kwargs_174425 = {}
        # Getting the type of 'norm' (line 673)
        norm_174423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 21), 'norm', False)
        # Calling norm(args, kwargs) (line 673)
        norm_call_result_174426 = invoke(stypy.reporting.localization.Localization(__file__, 673, 21), norm_174423, *[f0_174424], **kwargs_174425)
        
        # Assigning a type to the variable 'normf0' (line 673)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 673, 12), 'normf0', norm_call_result_174426)
        
        # Getting the type of 'normf0' (line 674)
        normf0_174427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 15), 'normf0')
        # Testing the type of an if condition (line 674)
        if_condition_174428 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 674, 12), normf0_174427)
        # Assigning a type to the variable 'if_condition_174428' (line 674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 674, 12), 'if_condition_174428', if_condition_174428)
        # SSA begins for if statement (line 674)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Attribute (line 675):
        
        # Assigning a BinOp to a Attribute (line 675):
        float_174429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 675, 29), 'float')
        
        # Call to max(...): (line 675)
        # Processing the call arguments (line 675)
        
        # Call to norm(...): (line 675)
        # Processing the call arguments (line 675)
        # Getting the type of 'x0' (line 675)
        x0_174432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 42), 'x0', False)
        # Processing the call keyword arguments (line 675)
        kwargs_174433 = {}
        # Getting the type of 'norm' (line 675)
        norm_174431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 37), 'norm', False)
        # Calling norm(args, kwargs) (line 675)
        norm_call_result_174434 = invoke(stypy.reporting.localization.Localization(__file__, 675, 37), norm_174431, *[x0_174432], **kwargs_174433)
        
        int_174435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 675, 47), 'int')
        # Processing the call keyword arguments (line 675)
        kwargs_174436 = {}
        # Getting the type of 'max' (line 675)
        max_174430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 33), 'max', False)
        # Calling max(args, kwargs) (line 675)
        max_call_result_174437 = invoke(stypy.reporting.localization.Localization(__file__, 675, 33), max_174430, *[norm_call_result_174434, int_174435], **kwargs_174436)
        
        # Applying the binary operator '*' (line 675)
        result_mul_174438 = python_operator(stypy.reporting.localization.Localization(__file__, 675, 29), '*', float_174429, max_call_result_174437)
        
        # Getting the type of 'normf0' (line 675)
        normf0_174439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 52), 'normf0')
        # Applying the binary operator 'div' (line 675)
        result_div_174440 = python_operator(stypy.reporting.localization.Localization(__file__, 675, 50), 'div', result_mul_174438, normf0_174439)
        
        # Getting the type of 'self' (line 675)
        self_174441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 16), 'self')
        # Setting the type of the member 'alpha' of a type (line 675)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 675, 16), self_174441, 'alpha', result_div_174440)
        # SSA branch for the else part of an if statement (line 674)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Attribute (line 677):
        
        # Assigning a Num to a Attribute (line 677):
        float_174442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 677, 29), 'float')
        # Getting the type of 'self' (line 677)
        self_174443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 16), 'self')
        # Setting the type of the member 'alpha' of a type (line 677)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 677, 16), self_174443, 'alpha', float_174442)
        # SSA join for if statement (line 674)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 670)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'setup(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'setup' in the type store
        # Getting the type of 'stypy_return_type' (line 665)
        stypy_return_type_174444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_174444)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'setup'
        return stypy_return_type_174444


    @norecursion
    def _update(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update'
        module_type_store = module_type_store.open_function_context('_update', 679, 4, False)
        # Assigning a type to the variable 'self' (line 680)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 680, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GenericBroyden._update.__dict__.__setitem__('stypy_localization', localization)
        GenericBroyden._update.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GenericBroyden._update.__dict__.__setitem__('stypy_type_store', module_type_store)
        GenericBroyden._update.__dict__.__setitem__('stypy_function_name', 'GenericBroyden._update')
        GenericBroyden._update.__dict__.__setitem__('stypy_param_names_list', ['x', 'f', 'dx', 'df', 'dx_norm', 'df_norm'])
        GenericBroyden._update.__dict__.__setitem__('stypy_varargs_param_name', None)
        GenericBroyden._update.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GenericBroyden._update.__dict__.__setitem__('stypy_call_defaults', defaults)
        GenericBroyden._update.__dict__.__setitem__('stypy_call_varargs', varargs)
        GenericBroyden._update.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GenericBroyden._update.__dict__.__setitem__('stypy_declared_arg_number', 7)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GenericBroyden._update', ['x', 'f', 'dx', 'df', 'dx_norm', 'df_norm'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update', localization, ['x', 'f', 'dx', 'df', 'dx_norm', 'df_norm'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update(...)' code ##################

        # Getting the type of 'NotImplementedError' (line 680)
        NotImplementedError_174445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 14), 'NotImplementedError')
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 680, 8), NotImplementedError_174445, 'raise parameter', BaseException)
        
        # ################# End of '_update(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update' in the type store
        # Getting the type of 'stypy_return_type' (line 679)
        stypy_return_type_174446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_174446)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update'
        return stypy_return_type_174446


    @norecursion
    def update(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update'
        module_type_store = module_type_store.open_function_context('update', 682, 4, False)
        # Assigning a type to the variable 'self' (line 683)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 683, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        GenericBroyden.update.__dict__.__setitem__('stypy_localization', localization)
        GenericBroyden.update.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        GenericBroyden.update.__dict__.__setitem__('stypy_type_store', module_type_store)
        GenericBroyden.update.__dict__.__setitem__('stypy_function_name', 'GenericBroyden.update')
        GenericBroyden.update.__dict__.__setitem__('stypy_param_names_list', ['x', 'f'])
        GenericBroyden.update.__dict__.__setitem__('stypy_varargs_param_name', None)
        GenericBroyden.update.__dict__.__setitem__('stypy_kwargs_param_name', None)
        GenericBroyden.update.__dict__.__setitem__('stypy_call_defaults', defaults)
        GenericBroyden.update.__dict__.__setitem__('stypy_call_varargs', varargs)
        GenericBroyden.update.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        GenericBroyden.update.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GenericBroyden.update', ['x', 'f'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update', localization, ['x', 'f'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update(...)' code ##################

        
        # Assigning a BinOp to a Name (line 683):
        
        # Assigning a BinOp to a Name (line 683):
        # Getting the type of 'f' (line 683)
        f_174447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 13), 'f')
        # Getting the type of 'self' (line 683)
        self_174448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 17), 'self')
        # Obtaining the member 'last_f' of a type (line 683)
        last_f_174449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 683, 17), self_174448, 'last_f')
        # Applying the binary operator '-' (line 683)
        result_sub_174450 = python_operator(stypy.reporting.localization.Localization(__file__, 683, 13), '-', f_174447, last_f_174449)
        
        # Assigning a type to the variable 'df' (line 683)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 683, 8), 'df', result_sub_174450)
        
        # Assigning a BinOp to a Name (line 684):
        
        # Assigning a BinOp to a Name (line 684):
        # Getting the type of 'x' (line 684)
        x_174451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 13), 'x')
        # Getting the type of 'self' (line 684)
        self_174452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 17), 'self')
        # Obtaining the member 'last_x' of a type (line 684)
        last_x_174453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 684, 17), self_174452, 'last_x')
        # Applying the binary operator '-' (line 684)
        result_sub_174454 = python_operator(stypy.reporting.localization.Localization(__file__, 684, 13), '-', x_174451, last_x_174453)
        
        # Assigning a type to the variable 'dx' (line 684)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 684, 8), 'dx', result_sub_174454)
        
        # Call to _update(...): (line 685)
        # Processing the call arguments (line 685)
        # Getting the type of 'x' (line 685)
        x_174457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 21), 'x', False)
        # Getting the type of 'f' (line 685)
        f_174458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 24), 'f', False)
        # Getting the type of 'dx' (line 685)
        dx_174459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 27), 'dx', False)
        # Getting the type of 'df' (line 685)
        df_174460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 31), 'df', False)
        
        # Call to norm(...): (line 685)
        # Processing the call arguments (line 685)
        # Getting the type of 'dx' (line 685)
        dx_174462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 40), 'dx', False)
        # Processing the call keyword arguments (line 685)
        kwargs_174463 = {}
        # Getting the type of 'norm' (line 685)
        norm_174461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 35), 'norm', False)
        # Calling norm(args, kwargs) (line 685)
        norm_call_result_174464 = invoke(stypy.reporting.localization.Localization(__file__, 685, 35), norm_174461, *[dx_174462], **kwargs_174463)
        
        
        # Call to norm(...): (line 685)
        # Processing the call arguments (line 685)
        # Getting the type of 'df' (line 685)
        df_174466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 50), 'df', False)
        # Processing the call keyword arguments (line 685)
        kwargs_174467 = {}
        # Getting the type of 'norm' (line 685)
        norm_174465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 45), 'norm', False)
        # Calling norm(args, kwargs) (line 685)
        norm_call_result_174468 = invoke(stypy.reporting.localization.Localization(__file__, 685, 45), norm_174465, *[df_174466], **kwargs_174467)
        
        # Processing the call keyword arguments (line 685)
        kwargs_174469 = {}
        # Getting the type of 'self' (line 685)
        self_174455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 8), 'self', False)
        # Obtaining the member '_update' of a type (line 685)
        _update_174456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 8), self_174455, '_update')
        # Calling _update(args, kwargs) (line 685)
        _update_call_result_174470 = invoke(stypy.reporting.localization.Localization(__file__, 685, 8), _update_174456, *[x_174457, f_174458, dx_174459, df_174460, norm_call_result_174464, norm_call_result_174468], **kwargs_174469)
        
        
        # Assigning a Name to a Attribute (line 686):
        
        # Assigning a Name to a Attribute (line 686):
        # Getting the type of 'f' (line 686)
        f_174471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 22), 'f')
        # Getting the type of 'self' (line 686)
        self_174472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 8), 'self')
        # Setting the type of the member 'last_f' of a type (line 686)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 686, 8), self_174472, 'last_f', f_174471)
        
        # Assigning a Name to a Attribute (line 687):
        
        # Assigning a Name to a Attribute (line 687):
        # Getting the type of 'x' (line 687)
        x_174473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 22), 'x')
        # Getting the type of 'self' (line 687)
        self_174474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 8), 'self')
        # Setting the type of the member 'last_x' of a type (line 687)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 687, 8), self_174474, 'last_x', x_174473)
        
        # ################# End of 'update(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update' in the type store
        # Getting the type of 'stypy_return_type' (line 682)
        stypy_return_type_174475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_174475)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update'
        return stypy_return_type_174475


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 664, 0, False)
        # Assigning a type to the variable 'self' (line 665)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 665, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'GenericBroyden.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'GenericBroyden' (line 664)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 664, 0), 'GenericBroyden', GenericBroyden)
# Declaration of the 'LowRankMatrix' class

class LowRankMatrix(object, ):
    str_174476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 699, (-1)), 'str', '\n    A matrix represented as\n\n    .. math:: \\alpha I + \\sum_{n=0}^{n=M} c_n d_n^\\dagger\n\n    However, if the rank of the matrix reaches the dimension of the vectors,\n    full matrix representation will be used thereon.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 701, 4, False)
        # Assigning a type to the variable 'self' (line 702)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 702, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LowRankMatrix.__init__', ['alpha', 'n', 'dtype'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['alpha', 'n', 'dtype'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 702):
        
        # Assigning a Name to a Attribute (line 702):
        # Getting the type of 'alpha' (line 702)
        alpha_174477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 21), 'alpha')
        # Getting the type of 'self' (line 702)
        self_174478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 8), 'self')
        # Setting the type of the member 'alpha' of a type (line 702)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 702, 8), self_174478, 'alpha', alpha_174477)
        
        # Assigning a List to a Attribute (line 703):
        
        # Assigning a List to a Attribute (line 703):
        
        # Obtaining an instance of the builtin type 'list' (line 703)
        list_174479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 703, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 703)
        
        # Getting the type of 'self' (line 703)
        self_174480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'self')
        # Setting the type of the member 'cs' of a type (line 703)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 8), self_174480, 'cs', list_174479)
        
        # Assigning a List to a Attribute (line 704):
        
        # Assigning a List to a Attribute (line 704):
        
        # Obtaining an instance of the builtin type 'list' (line 704)
        list_174481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 704, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 704)
        
        # Getting the type of 'self' (line 704)
        self_174482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 8), 'self')
        # Setting the type of the member 'ds' of a type (line 704)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 704, 8), self_174482, 'ds', list_174481)
        
        # Assigning a Name to a Attribute (line 705):
        
        # Assigning a Name to a Attribute (line 705):
        # Getting the type of 'n' (line 705)
        n_174483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 17), 'n')
        # Getting the type of 'self' (line 705)
        self_174484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 8), 'self')
        # Setting the type of the member 'n' of a type (line 705)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 705, 8), self_174484, 'n', n_174483)
        
        # Assigning a Name to a Attribute (line 706):
        
        # Assigning a Name to a Attribute (line 706):
        # Getting the type of 'dtype' (line 706)
        dtype_174485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 21), 'dtype')
        # Getting the type of 'self' (line 706)
        self_174486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 8), 'self')
        # Setting the type of the member 'dtype' of a type (line 706)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 706, 8), self_174486, 'dtype', dtype_174485)
        
        # Assigning a Name to a Attribute (line 707):
        
        # Assigning a Name to a Attribute (line 707):
        # Getting the type of 'None' (line 707)
        None_174487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 25), 'None')
        # Getting the type of 'self' (line 707)
        self_174488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 8), 'self')
        # Setting the type of the member 'collapsed' of a type (line 707)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 707, 8), self_174488, 'collapsed', None_174487)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @staticmethod
    @norecursion
    def _matvec(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_matvec'
        module_type_store = module_type_store.open_function_context('_matvec', 709, 4, False)
        
        # Passed parameters checking function
        LowRankMatrix._matvec.__dict__.__setitem__('stypy_localization', localization)
        LowRankMatrix._matvec.__dict__.__setitem__('stypy_type_of_self', None)
        LowRankMatrix._matvec.__dict__.__setitem__('stypy_type_store', module_type_store)
        LowRankMatrix._matvec.__dict__.__setitem__('stypy_function_name', '_matvec')
        LowRankMatrix._matvec.__dict__.__setitem__('stypy_param_names_list', ['v', 'alpha', 'cs', 'ds'])
        LowRankMatrix._matvec.__dict__.__setitem__('stypy_varargs_param_name', None)
        LowRankMatrix._matvec.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LowRankMatrix._matvec.__dict__.__setitem__('stypy_call_defaults', defaults)
        LowRankMatrix._matvec.__dict__.__setitem__('stypy_call_varargs', varargs)
        LowRankMatrix._matvec.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LowRankMatrix._matvec.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, None, module_type_store, '_matvec', ['v', 'alpha', 'cs', 'ds'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_matvec', localization, ['alpha', 'cs', 'ds'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_matvec(...)' code ##################

        
        # Assigning a Call to a Tuple (line 711):
        
        # Assigning a Subscript to a Name (line 711):
        
        # Obtaining the type of the subscript
        int_174489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 8), 'int')
        
        # Call to get_blas_funcs(...): (line 711)
        # Processing the call arguments (line 711)
        
        # Obtaining an instance of the builtin type 'list' (line 711)
        list_174491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 711)
        # Adding element type (line 711)
        str_174492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 43), 'str', 'axpy')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 711, 42), list_174491, str_174492)
        # Adding element type (line 711)
        str_174493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 51), 'str', 'scal')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 711, 42), list_174491, str_174493)
        # Adding element type (line 711)
        str_174494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 59), 'str', 'dotc')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 711, 42), list_174491, str_174494)
        
        
        # Obtaining the type of the subscript
        int_174495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 712, 46), 'int')
        slice_174496 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 712, 42), None, int_174495, None)
        # Getting the type of 'cs' (line 712)
        cs_174497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 42), 'cs', False)
        # Obtaining the member '__getitem__' of a type (line 712)
        getitem___174498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 712, 42), cs_174497, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 712)
        subscript_call_result_174499 = invoke(stypy.reporting.localization.Localization(__file__, 712, 42), getitem___174498, slice_174496)
        
        
        # Obtaining an instance of the builtin type 'list' (line 712)
        list_174500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 712, 51), 'list')
        # Adding type elements to the builtin type 'list' instance (line 712)
        # Adding element type (line 712)
        # Getting the type of 'v' (line 712)
        v_174501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 52), 'v', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 712, 51), list_174500, v_174501)
        
        # Applying the binary operator '+' (line 712)
        result_add_174502 = python_operator(stypy.reporting.localization.Localization(__file__, 712, 42), '+', subscript_call_result_174499, list_174500)
        
        # Processing the call keyword arguments (line 711)
        kwargs_174503 = {}
        # Getting the type of 'get_blas_funcs' (line 711)
        get_blas_funcs_174490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 27), 'get_blas_funcs', False)
        # Calling get_blas_funcs(args, kwargs) (line 711)
        get_blas_funcs_call_result_174504 = invoke(stypy.reporting.localization.Localization(__file__, 711, 27), get_blas_funcs_174490, *[list_174491, result_add_174502], **kwargs_174503)
        
        # Obtaining the member '__getitem__' of a type (line 711)
        getitem___174505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 8), get_blas_funcs_call_result_174504, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 711)
        subscript_call_result_174506 = invoke(stypy.reporting.localization.Localization(__file__, 711, 8), getitem___174505, int_174489)
        
        # Assigning a type to the variable 'tuple_var_assignment_173001' (line 711)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 711, 8), 'tuple_var_assignment_173001', subscript_call_result_174506)
        
        # Assigning a Subscript to a Name (line 711):
        
        # Obtaining the type of the subscript
        int_174507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 8), 'int')
        
        # Call to get_blas_funcs(...): (line 711)
        # Processing the call arguments (line 711)
        
        # Obtaining an instance of the builtin type 'list' (line 711)
        list_174509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 711)
        # Adding element type (line 711)
        str_174510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 43), 'str', 'axpy')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 711, 42), list_174509, str_174510)
        # Adding element type (line 711)
        str_174511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 51), 'str', 'scal')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 711, 42), list_174509, str_174511)
        # Adding element type (line 711)
        str_174512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 59), 'str', 'dotc')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 711, 42), list_174509, str_174512)
        
        
        # Obtaining the type of the subscript
        int_174513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 712, 46), 'int')
        slice_174514 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 712, 42), None, int_174513, None)
        # Getting the type of 'cs' (line 712)
        cs_174515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 42), 'cs', False)
        # Obtaining the member '__getitem__' of a type (line 712)
        getitem___174516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 712, 42), cs_174515, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 712)
        subscript_call_result_174517 = invoke(stypy.reporting.localization.Localization(__file__, 712, 42), getitem___174516, slice_174514)
        
        
        # Obtaining an instance of the builtin type 'list' (line 712)
        list_174518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 712, 51), 'list')
        # Adding type elements to the builtin type 'list' instance (line 712)
        # Adding element type (line 712)
        # Getting the type of 'v' (line 712)
        v_174519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 52), 'v', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 712, 51), list_174518, v_174519)
        
        # Applying the binary operator '+' (line 712)
        result_add_174520 = python_operator(stypy.reporting.localization.Localization(__file__, 712, 42), '+', subscript_call_result_174517, list_174518)
        
        # Processing the call keyword arguments (line 711)
        kwargs_174521 = {}
        # Getting the type of 'get_blas_funcs' (line 711)
        get_blas_funcs_174508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 27), 'get_blas_funcs', False)
        # Calling get_blas_funcs(args, kwargs) (line 711)
        get_blas_funcs_call_result_174522 = invoke(stypy.reporting.localization.Localization(__file__, 711, 27), get_blas_funcs_174508, *[list_174509, result_add_174520], **kwargs_174521)
        
        # Obtaining the member '__getitem__' of a type (line 711)
        getitem___174523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 8), get_blas_funcs_call_result_174522, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 711)
        subscript_call_result_174524 = invoke(stypy.reporting.localization.Localization(__file__, 711, 8), getitem___174523, int_174507)
        
        # Assigning a type to the variable 'tuple_var_assignment_173002' (line 711)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 711, 8), 'tuple_var_assignment_173002', subscript_call_result_174524)
        
        # Assigning a Subscript to a Name (line 711):
        
        # Obtaining the type of the subscript
        int_174525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 8), 'int')
        
        # Call to get_blas_funcs(...): (line 711)
        # Processing the call arguments (line 711)
        
        # Obtaining an instance of the builtin type 'list' (line 711)
        list_174527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 711)
        # Adding element type (line 711)
        str_174528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 43), 'str', 'axpy')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 711, 42), list_174527, str_174528)
        # Adding element type (line 711)
        str_174529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 51), 'str', 'scal')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 711, 42), list_174527, str_174529)
        # Adding element type (line 711)
        str_174530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 59), 'str', 'dotc')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 711, 42), list_174527, str_174530)
        
        
        # Obtaining the type of the subscript
        int_174531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 712, 46), 'int')
        slice_174532 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 712, 42), None, int_174531, None)
        # Getting the type of 'cs' (line 712)
        cs_174533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 42), 'cs', False)
        # Obtaining the member '__getitem__' of a type (line 712)
        getitem___174534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 712, 42), cs_174533, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 712)
        subscript_call_result_174535 = invoke(stypy.reporting.localization.Localization(__file__, 712, 42), getitem___174534, slice_174532)
        
        
        # Obtaining an instance of the builtin type 'list' (line 712)
        list_174536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 712, 51), 'list')
        # Adding type elements to the builtin type 'list' instance (line 712)
        # Adding element type (line 712)
        # Getting the type of 'v' (line 712)
        v_174537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 52), 'v', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 712, 51), list_174536, v_174537)
        
        # Applying the binary operator '+' (line 712)
        result_add_174538 = python_operator(stypy.reporting.localization.Localization(__file__, 712, 42), '+', subscript_call_result_174535, list_174536)
        
        # Processing the call keyword arguments (line 711)
        kwargs_174539 = {}
        # Getting the type of 'get_blas_funcs' (line 711)
        get_blas_funcs_174526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 27), 'get_blas_funcs', False)
        # Calling get_blas_funcs(args, kwargs) (line 711)
        get_blas_funcs_call_result_174540 = invoke(stypy.reporting.localization.Localization(__file__, 711, 27), get_blas_funcs_174526, *[list_174527, result_add_174538], **kwargs_174539)
        
        # Obtaining the member '__getitem__' of a type (line 711)
        getitem___174541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 8), get_blas_funcs_call_result_174540, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 711)
        subscript_call_result_174542 = invoke(stypy.reporting.localization.Localization(__file__, 711, 8), getitem___174541, int_174525)
        
        # Assigning a type to the variable 'tuple_var_assignment_173003' (line 711)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 711, 8), 'tuple_var_assignment_173003', subscript_call_result_174542)
        
        # Assigning a Name to a Name (line 711):
        # Getting the type of 'tuple_var_assignment_173001' (line 711)
        tuple_var_assignment_173001_174543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 8), 'tuple_var_assignment_173001')
        # Assigning a type to the variable 'axpy' (line 711)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 711, 8), 'axpy', tuple_var_assignment_173001_174543)
        
        # Assigning a Name to a Name (line 711):
        # Getting the type of 'tuple_var_assignment_173002' (line 711)
        tuple_var_assignment_173002_174544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 8), 'tuple_var_assignment_173002')
        # Assigning a type to the variable 'scal' (line 711)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 711, 14), 'scal', tuple_var_assignment_173002_174544)
        
        # Assigning a Name to a Name (line 711):
        # Getting the type of 'tuple_var_assignment_173003' (line 711)
        tuple_var_assignment_173003_174545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 8), 'tuple_var_assignment_173003')
        # Assigning a type to the variable 'dotc' (line 711)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 711, 20), 'dotc', tuple_var_assignment_173003_174545)
        
        # Assigning a BinOp to a Name (line 713):
        
        # Assigning a BinOp to a Name (line 713):
        # Getting the type of 'alpha' (line 713)
        alpha_174546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 12), 'alpha')
        # Getting the type of 'v' (line 713)
        v_174547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 20), 'v')
        # Applying the binary operator '*' (line 713)
        result_mul_174548 = python_operator(stypy.reporting.localization.Localization(__file__, 713, 12), '*', alpha_174546, v_174547)
        
        # Assigning a type to the variable 'w' (line 713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 8), 'w', result_mul_174548)
        
        
        # Call to zip(...): (line 714)
        # Processing the call arguments (line 714)
        # Getting the type of 'cs' (line 714)
        cs_174550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 24), 'cs', False)
        # Getting the type of 'ds' (line 714)
        ds_174551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 28), 'ds', False)
        # Processing the call keyword arguments (line 714)
        kwargs_174552 = {}
        # Getting the type of 'zip' (line 714)
        zip_174549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 20), 'zip', False)
        # Calling zip(args, kwargs) (line 714)
        zip_call_result_174553 = invoke(stypy.reporting.localization.Localization(__file__, 714, 20), zip_174549, *[cs_174550, ds_174551], **kwargs_174552)
        
        # Testing the type of a for loop iterable (line 714)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 714, 8), zip_call_result_174553)
        # Getting the type of the for loop variable (line 714)
        for_loop_var_174554 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 714, 8), zip_call_result_174553)
        # Assigning a type to the variable 'c' (line 714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 714, 8), 'c', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 714, 8), for_loop_var_174554))
        # Assigning a type to the variable 'd' (line 714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 714, 8), 'd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 714, 8), for_loop_var_174554))
        # SSA begins for a for statement (line 714)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 715):
        
        # Assigning a Call to a Name (line 715):
        
        # Call to dotc(...): (line 715)
        # Processing the call arguments (line 715)
        # Getting the type of 'd' (line 715)
        d_174556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 21), 'd', False)
        # Getting the type of 'v' (line 715)
        v_174557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 24), 'v', False)
        # Processing the call keyword arguments (line 715)
        kwargs_174558 = {}
        # Getting the type of 'dotc' (line 715)
        dotc_174555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 16), 'dotc', False)
        # Calling dotc(args, kwargs) (line 715)
        dotc_call_result_174559 = invoke(stypy.reporting.localization.Localization(__file__, 715, 16), dotc_174555, *[d_174556, v_174557], **kwargs_174558)
        
        # Assigning a type to the variable 'a' (line 715)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 715, 12), 'a', dotc_call_result_174559)
        
        # Assigning a Call to a Name (line 716):
        
        # Assigning a Call to a Name (line 716):
        
        # Call to axpy(...): (line 716)
        # Processing the call arguments (line 716)
        # Getting the type of 'c' (line 716)
        c_174561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 21), 'c', False)
        # Getting the type of 'w' (line 716)
        w_174562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 24), 'w', False)
        # Getting the type of 'w' (line 716)
        w_174563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 27), 'w', False)
        # Obtaining the member 'size' of a type (line 716)
        size_174564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 716, 27), w_174563, 'size')
        # Getting the type of 'a' (line 716)
        a_174565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 35), 'a', False)
        # Processing the call keyword arguments (line 716)
        kwargs_174566 = {}
        # Getting the type of 'axpy' (line 716)
        axpy_174560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 16), 'axpy', False)
        # Calling axpy(args, kwargs) (line 716)
        axpy_call_result_174567 = invoke(stypy.reporting.localization.Localization(__file__, 716, 16), axpy_174560, *[c_174561, w_174562, size_174564, a_174565], **kwargs_174566)
        
        # Assigning a type to the variable 'w' (line 716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 716, 12), 'w', axpy_call_result_174567)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'w' (line 717)
        w_174568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 15), 'w')
        # Assigning a type to the variable 'stypy_return_type' (line 717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 717, 8), 'stypy_return_type', w_174568)
        
        # ################# End of '_matvec(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_matvec' in the type store
        # Getting the type of 'stypy_return_type' (line 709)
        stypy_return_type_174569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_174569)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_matvec'
        return stypy_return_type_174569


    @staticmethod
    @norecursion
    def _solve(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_solve'
        module_type_store = module_type_store.open_function_context('_solve', 719, 4, False)
        
        # Passed parameters checking function
        LowRankMatrix._solve.__dict__.__setitem__('stypy_localization', localization)
        LowRankMatrix._solve.__dict__.__setitem__('stypy_type_of_self', None)
        LowRankMatrix._solve.__dict__.__setitem__('stypy_type_store', module_type_store)
        LowRankMatrix._solve.__dict__.__setitem__('stypy_function_name', '_solve')
        LowRankMatrix._solve.__dict__.__setitem__('stypy_param_names_list', ['v', 'alpha', 'cs', 'ds'])
        LowRankMatrix._solve.__dict__.__setitem__('stypy_varargs_param_name', None)
        LowRankMatrix._solve.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LowRankMatrix._solve.__dict__.__setitem__('stypy_call_defaults', defaults)
        LowRankMatrix._solve.__dict__.__setitem__('stypy_call_varargs', varargs)
        LowRankMatrix._solve.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LowRankMatrix._solve.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, None, module_type_store, '_solve', ['v', 'alpha', 'cs', 'ds'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_solve', localization, ['alpha', 'cs', 'ds'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_solve(...)' code ##################

        str_174570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 721, 8), 'str', 'Evaluate w = M^-1 v')
        
        
        
        # Call to len(...): (line 722)
        # Processing the call arguments (line 722)
        # Getting the type of 'cs' (line 722)
        cs_174572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 15), 'cs', False)
        # Processing the call keyword arguments (line 722)
        kwargs_174573 = {}
        # Getting the type of 'len' (line 722)
        len_174571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 11), 'len', False)
        # Calling len(args, kwargs) (line 722)
        len_call_result_174574 = invoke(stypy.reporting.localization.Localization(__file__, 722, 11), len_174571, *[cs_174572], **kwargs_174573)
        
        int_174575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 722, 22), 'int')
        # Applying the binary operator '==' (line 722)
        result_eq_174576 = python_operator(stypy.reporting.localization.Localization(__file__, 722, 11), '==', len_call_result_174574, int_174575)
        
        # Testing the type of an if condition (line 722)
        if_condition_174577 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 722, 8), result_eq_174576)
        # Assigning a type to the variable 'if_condition_174577' (line 722)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 722, 8), 'if_condition_174577', if_condition_174577)
        # SSA begins for if statement (line 722)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'v' (line 723)
        v_174578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 19), 'v')
        # Getting the type of 'alpha' (line 723)
        alpha_174579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 21), 'alpha')
        # Applying the binary operator 'div' (line 723)
        result_div_174580 = python_operator(stypy.reporting.localization.Localization(__file__, 723, 19), 'div', v_174578, alpha_174579)
        
        # Assigning a type to the variable 'stypy_return_type' (line 723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 723, 12), 'stypy_return_type', result_div_174580)
        # SSA join for if statement (line 722)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 727):
        
        # Assigning a Subscript to a Name (line 727):
        
        # Obtaining the type of the subscript
        int_174581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 8), 'int')
        
        # Call to get_blas_funcs(...): (line 727)
        # Processing the call arguments (line 727)
        
        # Obtaining an instance of the builtin type 'list' (line 727)
        list_174583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 36), 'list')
        # Adding type elements to the builtin type 'list' instance (line 727)
        # Adding element type (line 727)
        str_174584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 37), 'str', 'axpy')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 727, 36), list_174583, str_174584)
        # Adding element type (line 727)
        str_174585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 45), 'str', 'dotc')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 727, 36), list_174583, str_174585)
        
        
        # Obtaining the type of the subscript
        int_174586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 58), 'int')
        slice_174587 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 727, 54), None, int_174586, None)
        # Getting the type of 'cs' (line 727)
        cs_174588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 54), 'cs', False)
        # Obtaining the member '__getitem__' of a type (line 727)
        getitem___174589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 54), cs_174588, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 727)
        subscript_call_result_174590 = invoke(stypy.reporting.localization.Localization(__file__, 727, 54), getitem___174589, slice_174587)
        
        
        # Obtaining an instance of the builtin type 'list' (line 727)
        list_174591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 63), 'list')
        # Adding type elements to the builtin type 'list' instance (line 727)
        # Adding element type (line 727)
        # Getting the type of 'v' (line 727)
        v_174592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 64), 'v', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 727, 63), list_174591, v_174592)
        
        # Applying the binary operator '+' (line 727)
        result_add_174593 = python_operator(stypy.reporting.localization.Localization(__file__, 727, 54), '+', subscript_call_result_174590, list_174591)
        
        # Processing the call keyword arguments (line 727)
        kwargs_174594 = {}
        # Getting the type of 'get_blas_funcs' (line 727)
        get_blas_funcs_174582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 21), 'get_blas_funcs', False)
        # Calling get_blas_funcs(args, kwargs) (line 727)
        get_blas_funcs_call_result_174595 = invoke(stypy.reporting.localization.Localization(__file__, 727, 21), get_blas_funcs_174582, *[list_174583, result_add_174593], **kwargs_174594)
        
        # Obtaining the member '__getitem__' of a type (line 727)
        getitem___174596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 8), get_blas_funcs_call_result_174595, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 727)
        subscript_call_result_174597 = invoke(stypy.reporting.localization.Localization(__file__, 727, 8), getitem___174596, int_174581)
        
        # Assigning a type to the variable 'tuple_var_assignment_173004' (line 727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 8), 'tuple_var_assignment_173004', subscript_call_result_174597)
        
        # Assigning a Subscript to a Name (line 727):
        
        # Obtaining the type of the subscript
        int_174598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 8), 'int')
        
        # Call to get_blas_funcs(...): (line 727)
        # Processing the call arguments (line 727)
        
        # Obtaining an instance of the builtin type 'list' (line 727)
        list_174600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 36), 'list')
        # Adding type elements to the builtin type 'list' instance (line 727)
        # Adding element type (line 727)
        str_174601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 37), 'str', 'axpy')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 727, 36), list_174600, str_174601)
        # Adding element type (line 727)
        str_174602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 45), 'str', 'dotc')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 727, 36), list_174600, str_174602)
        
        
        # Obtaining the type of the subscript
        int_174603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 58), 'int')
        slice_174604 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 727, 54), None, int_174603, None)
        # Getting the type of 'cs' (line 727)
        cs_174605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 54), 'cs', False)
        # Obtaining the member '__getitem__' of a type (line 727)
        getitem___174606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 54), cs_174605, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 727)
        subscript_call_result_174607 = invoke(stypy.reporting.localization.Localization(__file__, 727, 54), getitem___174606, slice_174604)
        
        
        # Obtaining an instance of the builtin type 'list' (line 727)
        list_174608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 63), 'list')
        # Adding type elements to the builtin type 'list' instance (line 727)
        # Adding element type (line 727)
        # Getting the type of 'v' (line 727)
        v_174609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 64), 'v', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 727, 63), list_174608, v_174609)
        
        # Applying the binary operator '+' (line 727)
        result_add_174610 = python_operator(stypy.reporting.localization.Localization(__file__, 727, 54), '+', subscript_call_result_174607, list_174608)
        
        # Processing the call keyword arguments (line 727)
        kwargs_174611 = {}
        # Getting the type of 'get_blas_funcs' (line 727)
        get_blas_funcs_174599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 21), 'get_blas_funcs', False)
        # Calling get_blas_funcs(args, kwargs) (line 727)
        get_blas_funcs_call_result_174612 = invoke(stypy.reporting.localization.Localization(__file__, 727, 21), get_blas_funcs_174599, *[list_174600, result_add_174610], **kwargs_174611)
        
        # Obtaining the member '__getitem__' of a type (line 727)
        getitem___174613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 8), get_blas_funcs_call_result_174612, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 727)
        subscript_call_result_174614 = invoke(stypy.reporting.localization.Localization(__file__, 727, 8), getitem___174613, int_174598)
        
        # Assigning a type to the variable 'tuple_var_assignment_173005' (line 727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 8), 'tuple_var_assignment_173005', subscript_call_result_174614)
        
        # Assigning a Name to a Name (line 727):
        # Getting the type of 'tuple_var_assignment_173004' (line 727)
        tuple_var_assignment_173004_174615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 8), 'tuple_var_assignment_173004')
        # Assigning a type to the variable 'axpy' (line 727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 8), 'axpy', tuple_var_assignment_173004_174615)
        
        # Assigning a Name to a Name (line 727):
        # Getting the type of 'tuple_var_assignment_173005' (line 727)
        tuple_var_assignment_173005_174616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 8), 'tuple_var_assignment_173005')
        # Assigning a type to the variable 'dotc' (line 727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 14), 'dotc', tuple_var_assignment_173005_174616)
        
        # Assigning a Subscript to a Name (line 729):
        
        # Assigning a Subscript to a Name (line 729):
        
        # Obtaining the type of the subscript
        int_174617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 729, 16), 'int')
        # Getting the type of 'cs' (line 729)
        cs_174618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 13), 'cs')
        # Obtaining the member '__getitem__' of a type (line 729)
        getitem___174619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 13), cs_174618, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 729)
        subscript_call_result_174620 = invoke(stypy.reporting.localization.Localization(__file__, 729, 13), getitem___174619, int_174617)
        
        # Assigning a type to the variable 'c0' (line 729)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 729, 8), 'c0', subscript_call_result_174620)
        
        # Assigning a BinOp to a Name (line 730):
        
        # Assigning a BinOp to a Name (line 730):
        # Getting the type of 'alpha' (line 730)
        alpha_174621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 12), 'alpha')
        
        # Call to identity(...): (line 730)
        # Processing the call arguments (line 730)
        
        # Call to len(...): (line 730)
        # Processing the call arguments (line 730)
        # Getting the type of 'cs' (line 730)
        cs_174625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 36), 'cs', False)
        # Processing the call keyword arguments (line 730)
        kwargs_174626 = {}
        # Getting the type of 'len' (line 730)
        len_174624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 32), 'len', False)
        # Calling len(args, kwargs) (line 730)
        len_call_result_174627 = invoke(stypy.reporting.localization.Localization(__file__, 730, 32), len_174624, *[cs_174625], **kwargs_174626)
        
        # Processing the call keyword arguments (line 730)
        # Getting the type of 'c0' (line 730)
        c0_174628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 47), 'c0', False)
        # Obtaining the member 'dtype' of a type (line 730)
        dtype_174629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 730, 47), c0_174628, 'dtype')
        keyword_174630 = dtype_174629
        kwargs_174631 = {'dtype': keyword_174630}
        # Getting the type of 'np' (line 730)
        np_174622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 20), 'np', False)
        # Obtaining the member 'identity' of a type (line 730)
        identity_174623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 730, 20), np_174622, 'identity')
        # Calling identity(args, kwargs) (line 730)
        identity_call_result_174632 = invoke(stypy.reporting.localization.Localization(__file__, 730, 20), identity_174623, *[len_call_result_174627], **kwargs_174631)
        
        # Applying the binary operator '*' (line 730)
        result_mul_174633 = python_operator(stypy.reporting.localization.Localization(__file__, 730, 12), '*', alpha_174621, identity_call_result_174632)
        
        # Assigning a type to the variable 'A' (line 730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 8), 'A', result_mul_174633)
        
        
        # Call to enumerate(...): (line 731)
        # Processing the call arguments (line 731)
        # Getting the type of 'ds' (line 731)
        ds_174635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 30), 'ds', False)
        # Processing the call keyword arguments (line 731)
        kwargs_174636 = {}
        # Getting the type of 'enumerate' (line 731)
        enumerate_174634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 20), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 731)
        enumerate_call_result_174637 = invoke(stypy.reporting.localization.Localization(__file__, 731, 20), enumerate_174634, *[ds_174635], **kwargs_174636)
        
        # Testing the type of a for loop iterable (line 731)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 731, 8), enumerate_call_result_174637)
        # Getting the type of the for loop variable (line 731)
        for_loop_var_174638 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 731, 8), enumerate_call_result_174637)
        # Assigning a type to the variable 'i' (line 731)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 731, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 731, 8), for_loop_var_174638))
        # Assigning a type to the variable 'd' (line 731)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 731, 8), 'd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 731, 8), for_loop_var_174638))
        # SSA begins for a for statement (line 731)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to enumerate(...): (line 732)
        # Processing the call arguments (line 732)
        # Getting the type of 'cs' (line 732)
        cs_174640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 34), 'cs', False)
        # Processing the call keyword arguments (line 732)
        kwargs_174641 = {}
        # Getting the type of 'enumerate' (line 732)
        enumerate_174639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 24), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 732)
        enumerate_call_result_174642 = invoke(stypy.reporting.localization.Localization(__file__, 732, 24), enumerate_174639, *[cs_174640], **kwargs_174641)
        
        # Testing the type of a for loop iterable (line 732)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 732, 12), enumerate_call_result_174642)
        # Getting the type of the for loop variable (line 732)
        for_loop_var_174643 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 732, 12), enumerate_call_result_174642)
        # Assigning a type to the variable 'j' (line 732)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 732, 12), 'j', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 732, 12), for_loop_var_174643))
        # Assigning a type to the variable 'c' (line 732)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 732, 12), 'c', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 732, 12), for_loop_var_174643))
        # SSA begins for a for statement (line 732)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'A' (line 733)
        A_174644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 16), 'A')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 733)
        tuple_174645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 733, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 733)
        # Adding element type (line 733)
        # Getting the type of 'i' (line 733)
        i_174646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 18), 'i')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 733, 18), tuple_174645, i_174646)
        # Adding element type (line 733)
        # Getting the type of 'j' (line 733)
        j_174647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 20), 'j')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 733, 18), tuple_174645, j_174647)
        
        # Getting the type of 'A' (line 733)
        A_174648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 16), 'A')
        # Obtaining the member '__getitem__' of a type (line 733)
        getitem___174649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 733, 16), A_174648, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 733)
        subscript_call_result_174650 = invoke(stypy.reporting.localization.Localization(__file__, 733, 16), getitem___174649, tuple_174645)
        
        
        # Call to dotc(...): (line 733)
        # Processing the call arguments (line 733)
        # Getting the type of 'd' (line 733)
        d_174652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 31), 'd', False)
        # Getting the type of 'c' (line 733)
        c_174653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 34), 'c', False)
        # Processing the call keyword arguments (line 733)
        kwargs_174654 = {}
        # Getting the type of 'dotc' (line 733)
        dotc_174651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 26), 'dotc', False)
        # Calling dotc(args, kwargs) (line 733)
        dotc_call_result_174655 = invoke(stypy.reporting.localization.Localization(__file__, 733, 26), dotc_174651, *[d_174652, c_174653], **kwargs_174654)
        
        # Applying the binary operator '+=' (line 733)
        result_iadd_174656 = python_operator(stypy.reporting.localization.Localization(__file__, 733, 16), '+=', subscript_call_result_174650, dotc_call_result_174655)
        # Getting the type of 'A' (line 733)
        A_174657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 16), 'A')
        
        # Obtaining an instance of the builtin type 'tuple' (line 733)
        tuple_174658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 733, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 733)
        # Adding element type (line 733)
        # Getting the type of 'i' (line 733)
        i_174659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 18), 'i')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 733, 18), tuple_174658, i_174659)
        # Adding element type (line 733)
        # Getting the type of 'j' (line 733)
        j_174660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 20), 'j')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 733, 18), tuple_174658, j_174660)
        
        # Storing an element on a container (line 733)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 733, 16), A_174657, (tuple_174658, result_iadd_174656))
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 735):
        
        # Assigning a Call to a Name (line 735):
        
        # Call to zeros(...): (line 735)
        # Processing the call arguments (line 735)
        
        # Call to len(...): (line 735)
        # Processing the call arguments (line 735)
        # Getting the type of 'cs' (line 735)
        cs_174664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 25), 'cs', False)
        # Processing the call keyword arguments (line 735)
        kwargs_174665 = {}
        # Getting the type of 'len' (line 735)
        len_174663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 21), 'len', False)
        # Calling len(args, kwargs) (line 735)
        len_call_result_174666 = invoke(stypy.reporting.localization.Localization(__file__, 735, 21), len_174663, *[cs_174664], **kwargs_174665)
        
        # Processing the call keyword arguments (line 735)
        # Getting the type of 'c0' (line 735)
        c0_174667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 36), 'c0', False)
        # Obtaining the member 'dtype' of a type (line 735)
        dtype_174668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 36), c0_174667, 'dtype')
        keyword_174669 = dtype_174668
        kwargs_174670 = {'dtype': keyword_174669}
        # Getting the type of 'np' (line 735)
        np_174661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 12), 'np', False)
        # Obtaining the member 'zeros' of a type (line 735)
        zeros_174662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 12), np_174661, 'zeros')
        # Calling zeros(args, kwargs) (line 735)
        zeros_call_result_174671 = invoke(stypy.reporting.localization.Localization(__file__, 735, 12), zeros_174662, *[len_call_result_174666], **kwargs_174670)
        
        # Assigning a type to the variable 'q' (line 735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 735, 8), 'q', zeros_call_result_174671)
        
        
        # Call to enumerate(...): (line 736)
        # Processing the call arguments (line 736)
        # Getting the type of 'ds' (line 736)
        ds_174673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 30), 'ds', False)
        # Processing the call keyword arguments (line 736)
        kwargs_174674 = {}
        # Getting the type of 'enumerate' (line 736)
        enumerate_174672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 20), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 736)
        enumerate_call_result_174675 = invoke(stypy.reporting.localization.Localization(__file__, 736, 20), enumerate_174672, *[ds_174673], **kwargs_174674)
        
        # Testing the type of a for loop iterable (line 736)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 736, 8), enumerate_call_result_174675)
        # Getting the type of the for loop variable (line 736)
        for_loop_var_174676 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 736, 8), enumerate_call_result_174675)
        # Assigning a type to the variable 'j' (line 736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 8), 'j', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 736, 8), for_loop_var_174676))
        # Assigning a type to the variable 'd' (line 736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 8), 'd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 736, 8), for_loop_var_174676))
        # SSA begins for a for statement (line 736)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Subscript (line 737):
        
        # Assigning a Call to a Subscript (line 737):
        
        # Call to dotc(...): (line 737)
        # Processing the call arguments (line 737)
        # Getting the type of 'd' (line 737)
        d_174678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 24), 'd', False)
        # Getting the type of 'v' (line 737)
        v_174679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 27), 'v', False)
        # Processing the call keyword arguments (line 737)
        kwargs_174680 = {}
        # Getting the type of 'dotc' (line 737)
        dotc_174677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 19), 'dotc', False)
        # Calling dotc(args, kwargs) (line 737)
        dotc_call_result_174681 = invoke(stypy.reporting.localization.Localization(__file__, 737, 19), dotc_174677, *[d_174678, v_174679], **kwargs_174680)
        
        # Getting the type of 'q' (line 737)
        q_174682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 12), 'q')
        # Getting the type of 'j' (line 737)
        j_174683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 14), 'j')
        # Storing an element on a container (line 737)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 737, 12), q_174682, (j_174683, dotc_call_result_174681))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'q' (line 738)
        q_174684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 8), 'q')
        # Getting the type of 'alpha' (line 738)
        alpha_174685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 13), 'alpha')
        # Applying the binary operator 'div=' (line 738)
        result_div_174686 = python_operator(stypy.reporting.localization.Localization(__file__, 738, 8), 'div=', q_174684, alpha_174685)
        # Assigning a type to the variable 'q' (line 738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 738, 8), 'q', result_div_174686)
        
        
        # Assigning a Call to a Name (line 739):
        
        # Assigning a Call to a Name (line 739):
        
        # Call to solve(...): (line 739)
        # Processing the call arguments (line 739)
        # Getting the type of 'A' (line 739)
        A_174688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 18), 'A', False)
        # Getting the type of 'q' (line 739)
        q_174689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 21), 'q', False)
        # Processing the call keyword arguments (line 739)
        kwargs_174690 = {}
        # Getting the type of 'solve' (line 739)
        solve_174687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 12), 'solve', False)
        # Calling solve(args, kwargs) (line 739)
        solve_call_result_174691 = invoke(stypy.reporting.localization.Localization(__file__, 739, 12), solve_174687, *[A_174688, q_174689], **kwargs_174690)
        
        # Assigning a type to the variable 'q' (line 739)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 739, 8), 'q', solve_call_result_174691)
        
        # Assigning a BinOp to a Name (line 741):
        
        # Assigning a BinOp to a Name (line 741):
        # Getting the type of 'v' (line 741)
        v_174692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 12), 'v')
        # Getting the type of 'alpha' (line 741)
        alpha_174693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 14), 'alpha')
        # Applying the binary operator 'div' (line 741)
        result_div_174694 = python_operator(stypy.reporting.localization.Localization(__file__, 741, 12), 'div', v_174692, alpha_174693)
        
        # Assigning a type to the variable 'w' (line 741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 8), 'w', result_div_174694)
        
        
        # Call to zip(...): (line 742)
        # Processing the call arguments (line 742)
        # Getting the type of 'cs' (line 742)
        cs_174696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 25), 'cs', False)
        # Getting the type of 'q' (line 742)
        q_174697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 29), 'q', False)
        # Processing the call keyword arguments (line 742)
        kwargs_174698 = {}
        # Getting the type of 'zip' (line 742)
        zip_174695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 21), 'zip', False)
        # Calling zip(args, kwargs) (line 742)
        zip_call_result_174699 = invoke(stypy.reporting.localization.Localization(__file__, 742, 21), zip_174695, *[cs_174696, q_174697], **kwargs_174698)
        
        # Testing the type of a for loop iterable (line 742)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 742, 8), zip_call_result_174699)
        # Getting the type of the for loop variable (line 742)
        for_loop_var_174700 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 742, 8), zip_call_result_174699)
        # Assigning a type to the variable 'c' (line 742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 742, 8), 'c', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 742, 8), for_loop_var_174700))
        # Assigning a type to the variable 'qc' (line 742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 742, 8), 'qc', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 742, 8), for_loop_var_174700))
        # SSA begins for a for statement (line 742)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 743):
        
        # Assigning a Call to a Name (line 743):
        
        # Call to axpy(...): (line 743)
        # Processing the call arguments (line 743)
        # Getting the type of 'c' (line 743)
        c_174702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 21), 'c', False)
        # Getting the type of 'w' (line 743)
        w_174703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 24), 'w', False)
        # Getting the type of 'w' (line 743)
        w_174704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 27), 'w', False)
        # Obtaining the member 'size' of a type (line 743)
        size_174705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 27), w_174704, 'size')
        
        # Getting the type of 'qc' (line 743)
        qc_174706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 36), 'qc', False)
        # Applying the 'usub' unary operator (line 743)
        result___neg___174707 = python_operator(stypy.reporting.localization.Localization(__file__, 743, 35), 'usub', qc_174706)
        
        # Processing the call keyword arguments (line 743)
        kwargs_174708 = {}
        # Getting the type of 'axpy' (line 743)
        axpy_174701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 16), 'axpy', False)
        # Calling axpy(args, kwargs) (line 743)
        axpy_call_result_174709 = invoke(stypy.reporting.localization.Localization(__file__, 743, 16), axpy_174701, *[c_174702, w_174703, size_174705, result___neg___174707], **kwargs_174708)
        
        # Assigning a type to the variable 'w' (line 743)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 743, 12), 'w', axpy_call_result_174709)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'w' (line 745)
        w_174710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 15), 'w')
        # Assigning a type to the variable 'stypy_return_type' (line 745)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 745, 8), 'stypy_return_type', w_174710)
        
        # ################# End of '_solve(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_solve' in the type store
        # Getting the type of 'stypy_return_type' (line 719)
        stypy_return_type_174711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_174711)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_solve'
        return stypy_return_type_174711


    @norecursion
    def matvec(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'matvec'
        module_type_store = module_type_store.open_function_context('matvec', 747, 4, False)
        # Assigning a type to the variable 'self' (line 748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 748, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LowRankMatrix.matvec.__dict__.__setitem__('stypy_localization', localization)
        LowRankMatrix.matvec.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LowRankMatrix.matvec.__dict__.__setitem__('stypy_type_store', module_type_store)
        LowRankMatrix.matvec.__dict__.__setitem__('stypy_function_name', 'LowRankMatrix.matvec')
        LowRankMatrix.matvec.__dict__.__setitem__('stypy_param_names_list', ['v'])
        LowRankMatrix.matvec.__dict__.__setitem__('stypy_varargs_param_name', None)
        LowRankMatrix.matvec.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LowRankMatrix.matvec.__dict__.__setitem__('stypy_call_defaults', defaults)
        LowRankMatrix.matvec.__dict__.__setitem__('stypy_call_varargs', varargs)
        LowRankMatrix.matvec.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LowRankMatrix.matvec.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LowRankMatrix.matvec', ['v'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'matvec', localization, ['v'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'matvec(...)' code ##################

        str_174712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 748, 8), 'str', 'Evaluate w = M v')
        
        
        # Getting the type of 'self' (line 749)
        self_174713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 11), 'self')
        # Obtaining the member 'collapsed' of a type (line 749)
        collapsed_174714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 749, 11), self_174713, 'collapsed')
        # Getting the type of 'None' (line 749)
        None_174715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 33), 'None')
        # Applying the binary operator 'isnot' (line 749)
        result_is_not_174716 = python_operator(stypy.reporting.localization.Localization(__file__, 749, 11), 'isnot', collapsed_174714, None_174715)
        
        # Testing the type of an if condition (line 749)
        if_condition_174717 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 749, 8), result_is_not_174716)
        # Assigning a type to the variable 'if_condition_174717' (line 749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 749, 8), 'if_condition_174717', if_condition_174717)
        # SSA begins for if statement (line 749)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to dot(...): (line 750)
        # Processing the call arguments (line 750)
        # Getting the type of 'self' (line 750)
        self_174720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 26), 'self', False)
        # Obtaining the member 'collapsed' of a type (line 750)
        collapsed_174721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 26), self_174720, 'collapsed')
        # Getting the type of 'v' (line 750)
        v_174722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 42), 'v', False)
        # Processing the call keyword arguments (line 750)
        kwargs_174723 = {}
        # Getting the type of 'np' (line 750)
        np_174718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 19), 'np', False)
        # Obtaining the member 'dot' of a type (line 750)
        dot_174719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 19), np_174718, 'dot')
        # Calling dot(args, kwargs) (line 750)
        dot_call_result_174724 = invoke(stypy.reporting.localization.Localization(__file__, 750, 19), dot_174719, *[collapsed_174721, v_174722], **kwargs_174723)
        
        # Assigning a type to the variable 'stypy_return_type' (line 750)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 12), 'stypy_return_type', dot_call_result_174724)
        # SSA join for if statement (line 749)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _matvec(...): (line 751)
        # Processing the call arguments (line 751)
        # Getting the type of 'v' (line 751)
        v_174727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 37), 'v', False)
        # Getting the type of 'self' (line 751)
        self_174728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 40), 'self', False)
        # Obtaining the member 'alpha' of a type (line 751)
        alpha_174729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 40), self_174728, 'alpha')
        # Getting the type of 'self' (line 751)
        self_174730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 52), 'self', False)
        # Obtaining the member 'cs' of a type (line 751)
        cs_174731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 52), self_174730, 'cs')
        # Getting the type of 'self' (line 751)
        self_174732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 61), 'self', False)
        # Obtaining the member 'ds' of a type (line 751)
        ds_174733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 61), self_174732, 'ds')
        # Processing the call keyword arguments (line 751)
        kwargs_174734 = {}
        # Getting the type of 'LowRankMatrix' (line 751)
        LowRankMatrix_174725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 15), 'LowRankMatrix', False)
        # Obtaining the member '_matvec' of a type (line 751)
        _matvec_174726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 15), LowRankMatrix_174725, '_matvec')
        # Calling _matvec(args, kwargs) (line 751)
        _matvec_call_result_174735 = invoke(stypy.reporting.localization.Localization(__file__, 751, 15), _matvec_174726, *[v_174727, alpha_174729, cs_174731, ds_174733], **kwargs_174734)
        
        # Assigning a type to the variable 'stypy_return_type' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'stypy_return_type', _matvec_call_result_174735)
        
        # ################# End of 'matvec(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'matvec' in the type store
        # Getting the type of 'stypy_return_type' (line 747)
        stypy_return_type_174736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_174736)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'matvec'
        return stypy_return_type_174736


    @norecursion
    def rmatvec(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'rmatvec'
        module_type_store = module_type_store.open_function_context('rmatvec', 753, 4, False)
        # Assigning a type to the variable 'self' (line 754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 754, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LowRankMatrix.rmatvec.__dict__.__setitem__('stypy_localization', localization)
        LowRankMatrix.rmatvec.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LowRankMatrix.rmatvec.__dict__.__setitem__('stypy_type_store', module_type_store)
        LowRankMatrix.rmatvec.__dict__.__setitem__('stypy_function_name', 'LowRankMatrix.rmatvec')
        LowRankMatrix.rmatvec.__dict__.__setitem__('stypy_param_names_list', ['v'])
        LowRankMatrix.rmatvec.__dict__.__setitem__('stypy_varargs_param_name', None)
        LowRankMatrix.rmatvec.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LowRankMatrix.rmatvec.__dict__.__setitem__('stypy_call_defaults', defaults)
        LowRankMatrix.rmatvec.__dict__.__setitem__('stypy_call_varargs', varargs)
        LowRankMatrix.rmatvec.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LowRankMatrix.rmatvec.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LowRankMatrix.rmatvec', ['v'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rmatvec', localization, ['v'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rmatvec(...)' code ##################

        str_174737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 754, 8), 'str', 'Evaluate w = M^H v')
        
        
        # Getting the type of 'self' (line 755)
        self_174738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 11), 'self')
        # Obtaining the member 'collapsed' of a type (line 755)
        collapsed_174739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 755, 11), self_174738, 'collapsed')
        # Getting the type of 'None' (line 755)
        None_174740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 33), 'None')
        # Applying the binary operator 'isnot' (line 755)
        result_is_not_174741 = python_operator(stypy.reporting.localization.Localization(__file__, 755, 11), 'isnot', collapsed_174739, None_174740)
        
        # Testing the type of an if condition (line 755)
        if_condition_174742 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 755, 8), result_is_not_174741)
        # Assigning a type to the variable 'if_condition_174742' (line 755)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 8), 'if_condition_174742', if_condition_174742)
        # SSA begins for if statement (line 755)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to dot(...): (line 756)
        # Processing the call arguments (line 756)
        
        # Call to conj(...): (line 756)
        # Processing the call keyword arguments (line 756)
        kwargs_174749 = {}
        # Getting the type of 'self' (line 756)
        self_174745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 26), 'self', False)
        # Obtaining the member 'collapsed' of a type (line 756)
        collapsed_174746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 26), self_174745, 'collapsed')
        # Obtaining the member 'T' of a type (line 756)
        T_174747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 26), collapsed_174746, 'T')
        # Obtaining the member 'conj' of a type (line 756)
        conj_174748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 26), T_174747, 'conj')
        # Calling conj(args, kwargs) (line 756)
        conj_call_result_174750 = invoke(stypy.reporting.localization.Localization(__file__, 756, 26), conj_174748, *[], **kwargs_174749)
        
        # Getting the type of 'v' (line 756)
        v_174751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 51), 'v', False)
        # Processing the call keyword arguments (line 756)
        kwargs_174752 = {}
        # Getting the type of 'np' (line 756)
        np_174743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 19), 'np', False)
        # Obtaining the member 'dot' of a type (line 756)
        dot_174744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 19), np_174743, 'dot')
        # Calling dot(args, kwargs) (line 756)
        dot_call_result_174753 = invoke(stypy.reporting.localization.Localization(__file__, 756, 19), dot_174744, *[conj_call_result_174750, v_174751], **kwargs_174752)
        
        # Assigning a type to the variable 'stypy_return_type' (line 756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 12), 'stypy_return_type', dot_call_result_174753)
        # SSA join for if statement (line 755)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _matvec(...): (line 757)
        # Processing the call arguments (line 757)
        # Getting the type of 'v' (line 757)
        v_174756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 37), 'v', False)
        
        # Call to conj(...): (line 757)
        # Processing the call arguments (line 757)
        # Getting the type of 'self' (line 757)
        self_174759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 48), 'self', False)
        # Obtaining the member 'alpha' of a type (line 757)
        alpha_174760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 48), self_174759, 'alpha')
        # Processing the call keyword arguments (line 757)
        kwargs_174761 = {}
        # Getting the type of 'np' (line 757)
        np_174757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 40), 'np', False)
        # Obtaining the member 'conj' of a type (line 757)
        conj_174758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 40), np_174757, 'conj')
        # Calling conj(args, kwargs) (line 757)
        conj_call_result_174762 = invoke(stypy.reporting.localization.Localization(__file__, 757, 40), conj_174758, *[alpha_174760], **kwargs_174761)
        
        # Getting the type of 'self' (line 757)
        self_174763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 61), 'self', False)
        # Obtaining the member 'ds' of a type (line 757)
        ds_174764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 61), self_174763, 'ds')
        # Getting the type of 'self' (line 757)
        self_174765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 70), 'self', False)
        # Obtaining the member 'cs' of a type (line 757)
        cs_174766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 70), self_174765, 'cs')
        # Processing the call keyword arguments (line 757)
        kwargs_174767 = {}
        # Getting the type of 'LowRankMatrix' (line 757)
        LowRankMatrix_174754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 15), 'LowRankMatrix', False)
        # Obtaining the member '_matvec' of a type (line 757)
        _matvec_174755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 15), LowRankMatrix_174754, '_matvec')
        # Calling _matvec(args, kwargs) (line 757)
        _matvec_call_result_174768 = invoke(stypy.reporting.localization.Localization(__file__, 757, 15), _matvec_174755, *[v_174756, conj_call_result_174762, ds_174764, cs_174766], **kwargs_174767)
        
        # Assigning a type to the variable 'stypy_return_type' (line 757)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 8), 'stypy_return_type', _matvec_call_result_174768)
        
        # ################# End of 'rmatvec(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rmatvec' in the type store
        # Getting the type of 'stypy_return_type' (line 753)
        stypy_return_type_174769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_174769)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rmatvec'
        return stypy_return_type_174769


    @norecursion
    def solve(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_174770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 759, 27), 'int')
        defaults = [int_174770]
        # Create a new context for function 'solve'
        module_type_store = module_type_store.open_function_context('solve', 759, 4, False)
        # Assigning a type to the variable 'self' (line 760)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 760, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LowRankMatrix.solve.__dict__.__setitem__('stypy_localization', localization)
        LowRankMatrix.solve.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LowRankMatrix.solve.__dict__.__setitem__('stypy_type_store', module_type_store)
        LowRankMatrix.solve.__dict__.__setitem__('stypy_function_name', 'LowRankMatrix.solve')
        LowRankMatrix.solve.__dict__.__setitem__('stypy_param_names_list', ['v', 'tol'])
        LowRankMatrix.solve.__dict__.__setitem__('stypy_varargs_param_name', None)
        LowRankMatrix.solve.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LowRankMatrix.solve.__dict__.__setitem__('stypy_call_defaults', defaults)
        LowRankMatrix.solve.__dict__.__setitem__('stypy_call_varargs', varargs)
        LowRankMatrix.solve.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LowRankMatrix.solve.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LowRankMatrix.solve', ['v', 'tol'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'solve', localization, ['v', 'tol'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'solve(...)' code ##################

        str_174771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 760, 8), 'str', 'Evaluate w = M^-1 v')
        
        
        # Getting the type of 'self' (line 761)
        self_174772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 11), 'self')
        # Obtaining the member 'collapsed' of a type (line 761)
        collapsed_174773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 11), self_174772, 'collapsed')
        # Getting the type of 'None' (line 761)
        None_174774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 33), 'None')
        # Applying the binary operator 'isnot' (line 761)
        result_is_not_174775 = python_operator(stypy.reporting.localization.Localization(__file__, 761, 11), 'isnot', collapsed_174773, None_174774)
        
        # Testing the type of an if condition (line 761)
        if_condition_174776 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 761, 8), result_is_not_174775)
        # Assigning a type to the variable 'if_condition_174776' (line 761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 8), 'if_condition_174776', if_condition_174776)
        # SSA begins for if statement (line 761)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to solve(...): (line 762)
        # Processing the call arguments (line 762)
        # Getting the type of 'self' (line 762)
        self_174778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 25), 'self', False)
        # Obtaining the member 'collapsed' of a type (line 762)
        collapsed_174779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 762, 25), self_174778, 'collapsed')
        # Getting the type of 'v' (line 762)
        v_174780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 41), 'v', False)
        # Processing the call keyword arguments (line 762)
        kwargs_174781 = {}
        # Getting the type of 'solve' (line 762)
        solve_174777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 19), 'solve', False)
        # Calling solve(args, kwargs) (line 762)
        solve_call_result_174782 = invoke(stypy.reporting.localization.Localization(__file__, 762, 19), solve_174777, *[collapsed_174779, v_174780], **kwargs_174781)
        
        # Assigning a type to the variable 'stypy_return_type' (line 762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 762, 12), 'stypy_return_type', solve_call_result_174782)
        # SSA join for if statement (line 761)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _solve(...): (line 763)
        # Processing the call arguments (line 763)
        # Getting the type of 'v' (line 763)
        v_174785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 36), 'v', False)
        # Getting the type of 'self' (line 763)
        self_174786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 39), 'self', False)
        # Obtaining the member 'alpha' of a type (line 763)
        alpha_174787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 39), self_174786, 'alpha')
        # Getting the type of 'self' (line 763)
        self_174788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 51), 'self', False)
        # Obtaining the member 'cs' of a type (line 763)
        cs_174789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 51), self_174788, 'cs')
        # Getting the type of 'self' (line 763)
        self_174790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 60), 'self', False)
        # Obtaining the member 'ds' of a type (line 763)
        ds_174791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 60), self_174790, 'ds')
        # Processing the call keyword arguments (line 763)
        kwargs_174792 = {}
        # Getting the type of 'LowRankMatrix' (line 763)
        LowRankMatrix_174783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 15), 'LowRankMatrix', False)
        # Obtaining the member '_solve' of a type (line 763)
        _solve_174784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 15), LowRankMatrix_174783, '_solve')
        # Calling _solve(args, kwargs) (line 763)
        _solve_call_result_174793 = invoke(stypy.reporting.localization.Localization(__file__, 763, 15), _solve_174784, *[v_174785, alpha_174787, cs_174789, ds_174791], **kwargs_174792)
        
        # Assigning a type to the variable 'stypy_return_type' (line 763)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 763, 8), 'stypy_return_type', _solve_call_result_174793)
        
        # ################# End of 'solve(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'solve' in the type store
        # Getting the type of 'stypy_return_type' (line 759)
        stypy_return_type_174794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_174794)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'solve'
        return stypy_return_type_174794


    @norecursion
    def rsolve(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_174795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 765, 28), 'int')
        defaults = [int_174795]
        # Create a new context for function 'rsolve'
        module_type_store = module_type_store.open_function_context('rsolve', 765, 4, False)
        # Assigning a type to the variable 'self' (line 766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 766, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LowRankMatrix.rsolve.__dict__.__setitem__('stypy_localization', localization)
        LowRankMatrix.rsolve.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LowRankMatrix.rsolve.__dict__.__setitem__('stypy_type_store', module_type_store)
        LowRankMatrix.rsolve.__dict__.__setitem__('stypy_function_name', 'LowRankMatrix.rsolve')
        LowRankMatrix.rsolve.__dict__.__setitem__('stypy_param_names_list', ['v', 'tol'])
        LowRankMatrix.rsolve.__dict__.__setitem__('stypy_varargs_param_name', None)
        LowRankMatrix.rsolve.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LowRankMatrix.rsolve.__dict__.__setitem__('stypy_call_defaults', defaults)
        LowRankMatrix.rsolve.__dict__.__setitem__('stypy_call_varargs', varargs)
        LowRankMatrix.rsolve.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LowRankMatrix.rsolve.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LowRankMatrix.rsolve', ['v', 'tol'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rsolve', localization, ['v', 'tol'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rsolve(...)' code ##################

        str_174796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, 8), 'str', 'Evaluate w = M^-H v')
        
        
        # Getting the type of 'self' (line 767)
        self_174797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 11), 'self')
        # Obtaining the member 'collapsed' of a type (line 767)
        collapsed_174798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 767, 11), self_174797, 'collapsed')
        # Getting the type of 'None' (line 767)
        None_174799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 33), 'None')
        # Applying the binary operator 'isnot' (line 767)
        result_is_not_174800 = python_operator(stypy.reporting.localization.Localization(__file__, 767, 11), 'isnot', collapsed_174798, None_174799)
        
        # Testing the type of an if condition (line 767)
        if_condition_174801 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 767, 8), result_is_not_174800)
        # Assigning a type to the variable 'if_condition_174801' (line 767)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 767, 8), 'if_condition_174801', if_condition_174801)
        # SSA begins for if statement (line 767)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to solve(...): (line 768)
        # Processing the call arguments (line 768)
        
        # Call to conj(...): (line 768)
        # Processing the call keyword arguments (line 768)
        kwargs_174807 = {}
        # Getting the type of 'self' (line 768)
        self_174803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 25), 'self', False)
        # Obtaining the member 'collapsed' of a type (line 768)
        collapsed_174804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 25), self_174803, 'collapsed')
        # Obtaining the member 'T' of a type (line 768)
        T_174805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 25), collapsed_174804, 'T')
        # Obtaining the member 'conj' of a type (line 768)
        conj_174806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 25), T_174805, 'conj')
        # Calling conj(args, kwargs) (line 768)
        conj_call_result_174808 = invoke(stypy.reporting.localization.Localization(__file__, 768, 25), conj_174806, *[], **kwargs_174807)
        
        # Getting the type of 'v' (line 768)
        v_174809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 50), 'v', False)
        # Processing the call keyword arguments (line 768)
        kwargs_174810 = {}
        # Getting the type of 'solve' (line 768)
        solve_174802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 19), 'solve', False)
        # Calling solve(args, kwargs) (line 768)
        solve_call_result_174811 = invoke(stypy.reporting.localization.Localization(__file__, 768, 19), solve_174802, *[conj_call_result_174808, v_174809], **kwargs_174810)
        
        # Assigning a type to the variable 'stypy_return_type' (line 768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 12), 'stypy_return_type', solve_call_result_174811)
        # SSA join for if statement (line 767)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _solve(...): (line 769)
        # Processing the call arguments (line 769)
        # Getting the type of 'v' (line 769)
        v_174814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 36), 'v', False)
        
        # Call to conj(...): (line 769)
        # Processing the call arguments (line 769)
        # Getting the type of 'self' (line 769)
        self_174817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 47), 'self', False)
        # Obtaining the member 'alpha' of a type (line 769)
        alpha_174818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 47), self_174817, 'alpha')
        # Processing the call keyword arguments (line 769)
        kwargs_174819 = {}
        # Getting the type of 'np' (line 769)
        np_174815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 39), 'np', False)
        # Obtaining the member 'conj' of a type (line 769)
        conj_174816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 39), np_174815, 'conj')
        # Calling conj(args, kwargs) (line 769)
        conj_call_result_174820 = invoke(stypy.reporting.localization.Localization(__file__, 769, 39), conj_174816, *[alpha_174818], **kwargs_174819)
        
        # Getting the type of 'self' (line 769)
        self_174821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 60), 'self', False)
        # Obtaining the member 'ds' of a type (line 769)
        ds_174822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 60), self_174821, 'ds')
        # Getting the type of 'self' (line 769)
        self_174823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 69), 'self', False)
        # Obtaining the member 'cs' of a type (line 769)
        cs_174824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 69), self_174823, 'cs')
        # Processing the call keyword arguments (line 769)
        kwargs_174825 = {}
        # Getting the type of 'LowRankMatrix' (line 769)
        LowRankMatrix_174812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 15), 'LowRankMatrix', False)
        # Obtaining the member '_solve' of a type (line 769)
        _solve_174813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 15), LowRankMatrix_174812, '_solve')
        # Calling _solve(args, kwargs) (line 769)
        _solve_call_result_174826 = invoke(stypy.reporting.localization.Localization(__file__, 769, 15), _solve_174813, *[v_174814, conj_call_result_174820, ds_174822, cs_174824], **kwargs_174825)
        
        # Assigning a type to the variable 'stypy_return_type' (line 769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 769, 8), 'stypy_return_type', _solve_call_result_174826)
        
        # ################# End of 'rsolve(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rsolve' in the type store
        # Getting the type of 'stypy_return_type' (line 765)
        stypy_return_type_174827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_174827)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rsolve'
        return stypy_return_type_174827


    @norecursion
    def append(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'append'
        module_type_store = module_type_store.open_function_context('append', 771, 4, False)
        # Assigning a type to the variable 'self' (line 772)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 772, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LowRankMatrix.append.__dict__.__setitem__('stypy_localization', localization)
        LowRankMatrix.append.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LowRankMatrix.append.__dict__.__setitem__('stypy_type_store', module_type_store)
        LowRankMatrix.append.__dict__.__setitem__('stypy_function_name', 'LowRankMatrix.append')
        LowRankMatrix.append.__dict__.__setitem__('stypy_param_names_list', ['c', 'd'])
        LowRankMatrix.append.__dict__.__setitem__('stypy_varargs_param_name', None)
        LowRankMatrix.append.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LowRankMatrix.append.__dict__.__setitem__('stypy_call_defaults', defaults)
        LowRankMatrix.append.__dict__.__setitem__('stypy_call_varargs', varargs)
        LowRankMatrix.append.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LowRankMatrix.append.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LowRankMatrix.append', ['c', 'd'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'append', localization, ['c', 'd'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'append(...)' code ##################

        
        
        # Getting the type of 'self' (line 772)
        self_174828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 11), 'self')
        # Obtaining the member 'collapsed' of a type (line 772)
        collapsed_174829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 772, 11), self_174828, 'collapsed')
        # Getting the type of 'None' (line 772)
        None_174830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 33), 'None')
        # Applying the binary operator 'isnot' (line 772)
        result_is_not_174831 = python_operator(stypy.reporting.localization.Localization(__file__, 772, 11), 'isnot', collapsed_174829, None_174830)
        
        # Testing the type of an if condition (line 772)
        if_condition_174832 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 772, 8), result_is_not_174831)
        # Assigning a type to the variable 'if_condition_174832' (line 772)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 772, 8), 'if_condition_174832', if_condition_174832)
        # SSA begins for if statement (line 772)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 773)
        self_174833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 12), 'self')
        # Obtaining the member 'collapsed' of a type (line 773)
        collapsed_174834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 12), self_174833, 'collapsed')
        
        # Obtaining the type of the subscript
        slice_174835 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 773, 30), None, None, None)
        # Getting the type of 'None' (line 773)
        None_174836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 34), 'None')
        # Getting the type of 'c' (line 773)
        c_174837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 30), 'c')
        # Obtaining the member '__getitem__' of a type (line 773)
        getitem___174838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 30), c_174837, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 773)
        subscript_call_result_174839 = invoke(stypy.reporting.localization.Localization(__file__, 773, 30), getitem___174838, (slice_174835, None_174836))
        
        
        # Call to conj(...): (line 773)
        # Processing the call keyword arguments (line 773)
        kwargs_174846 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'None' (line 773)
        None_174840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 44), 'None', False)
        slice_174841 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 773, 42), None, None, None)
        # Getting the type of 'd' (line 773)
        d_174842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 42), 'd', False)
        # Obtaining the member '__getitem__' of a type (line 773)
        getitem___174843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 42), d_174842, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 773)
        subscript_call_result_174844 = invoke(stypy.reporting.localization.Localization(__file__, 773, 42), getitem___174843, (None_174840, slice_174841))
        
        # Obtaining the member 'conj' of a type (line 773)
        conj_174845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 42), subscript_call_result_174844, 'conj')
        # Calling conj(args, kwargs) (line 773)
        conj_call_result_174847 = invoke(stypy.reporting.localization.Localization(__file__, 773, 42), conj_174845, *[], **kwargs_174846)
        
        # Applying the binary operator '*' (line 773)
        result_mul_174848 = python_operator(stypy.reporting.localization.Localization(__file__, 773, 30), '*', subscript_call_result_174839, conj_call_result_174847)
        
        # Applying the binary operator '+=' (line 773)
        result_iadd_174849 = python_operator(stypy.reporting.localization.Localization(__file__, 773, 12), '+=', collapsed_174834, result_mul_174848)
        # Getting the type of 'self' (line 773)
        self_174850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 12), 'self')
        # Setting the type of the member 'collapsed' of a type (line 773)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 12), self_174850, 'collapsed', result_iadd_174849)
        
        # Assigning a type to the variable 'stypy_return_type' (line 774)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 774, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 772)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 776)
        # Processing the call arguments (line 776)
        # Getting the type of 'c' (line 776)
        c_174854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 23), 'c', False)
        # Processing the call keyword arguments (line 776)
        kwargs_174855 = {}
        # Getting the type of 'self' (line 776)
        self_174851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 8), 'self', False)
        # Obtaining the member 'cs' of a type (line 776)
        cs_174852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 8), self_174851, 'cs')
        # Obtaining the member 'append' of a type (line 776)
        append_174853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 8), cs_174852, 'append')
        # Calling append(args, kwargs) (line 776)
        append_call_result_174856 = invoke(stypy.reporting.localization.Localization(__file__, 776, 8), append_174853, *[c_174854], **kwargs_174855)
        
        
        # Call to append(...): (line 777)
        # Processing the call arguments (line 777)
        # Getting the type of 'd' (line 777)
        d_174860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 23), 'd', False)
        # Processing the call keyword arguments (line 777)
        kwargs_174861 = {}
        # Getting the type of 'self' (line 777)
        self_174857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 8), 'self', False)
        # Obtaining the member 'ds' of a type (line 777)
        ds_174858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 8), self_174857, 'ds')
        # Obtaining the member 'append' of a type (line 777)
        append_174859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 8), ds_174858, 'append')
        # Calling append(args, kwargs) (line 777)
        append_call_result_174862 = invoke(stypy.reporting.localization.Localization(__file__, 777, 8), append_174859, *[d_174860], **kwargs_174861)
        
        
        
        
        # Call to len(...): (line 779)
        # Processing the call arguments (line 779)
        # Getting the type of 'self' (line 779)
        self_174864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 15), 'self', False)
        # Obtaining the member 'cs' of a type (line 779)
        cs_174865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 779, 15), self_174864, 'cs')
        # Processing the call keyword arguments (line 779)
        kwargs_174866 = {}
        # Getting the type of 'len' (line 779)
        len_174863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 11), 'len', False)
        # Calling len(args, kwargs) (line 779)
        len_call_result_174867 = invoke(stypy.reporting.localization.Localization(__file__, 779, 11), len_174863, *[cs_174865], **kwargs_174866)
        
        # Getting the type of 'c' (line 779)
        c_174868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 26), 'c')
        # Obtaining the member 'size' of a type (line 779)
        size_174869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 779, 26), c_174868, 'size')
        # Applying the binary operator '>' (line 779)
        result_gt_174870 = python_operator(stypy.reporting.localization.Localization(__file__, 779, 11), '>', len_call_result_174867, size_174869)
        
        # Testing the type of an if condition (line 779)
        if_condition_174871 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 779, 8), result_gt_174870)
        # Assigning a type to the variable 'if_condition_174871' (line 779)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 779, 8), 'if_condition_174871', if_condition_174871)
        # SSA begins for if statement (line 779)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to collapse(...): (line 780)
        # Processing the call keyword arguments (line 780)
        kwargs_174874 = {}
        # Getting the type of 'self' (line 780)
        self_174872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 12), 'self', False)
        # Obtaining the member 'collapse' of a type (line 780)
        collapse_174873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 780, 12), self_174872, 'collapse')
        # Calling collapse(args, kwargs) (line 780)
        collapse_call_result_174875 = invoke(stypy.reporting.localization.Localization(__file__, 780, 12), collapse_174873, *[], **kwargs_174874)
        
        # SSA join for if statement (line 779)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'append(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'append' in the type store
        # Getting the type of 'stypy_return_type' (line 771)
        stypy_return_type_174876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_174876)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'append'
        return stypy_return_type_174876


    @norecursion
    def __array__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__array__'
        module_type_store = module_type_store.open_function_context('__array__', 782, 4, False)
        # Assigning a type to the variable 'self' (line 783)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 783, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LowRankMatrix.__array__.__dict__.__setitem__('stypy_localization', localization)
        LowRankMatrix.__array__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LowRankMatrix.__array__.__dict__.__setitem__('stypy_type_store', module_type_store)
        LowRankMatrix.__array__.__dict__.__setitem__('stypy_function_name', 'LowRankMatrix.__array__')
        LowRankMatrix.__array__.__dict__.__setitem__('stypy_param_names_list', [])
        LowRankMatrix.__array__.__dict__.__setitem__('stypy_varargs_param_name', None)
        LowRankMatrix.__array__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LowRankMatrix.__array__.__dict__.__setitem__('stypy_call_defaults', defaults)
        LowRankMatrix.__array__.__dict__.__setitem__('stypy_call_varargs', varargs)
        LowRankMatrix.__array__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LowRankMatrix.__array__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LowRankMatrix.__array__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__array__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__array__(...)' code ##################

        
        
        # Getting the type of 'self' (line 783)
        self_174877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 11), 'self')
        # Obtaining the member 'collapsed' of a type (line 783)
        collapsed_174878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 783, 11), self_174877, 'collapsed')
        # Getting the type of 'None' (line 783)
        None_174879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 33), 'None')
        # Applying the binary operator 'isnot' (line 783)
        result_is_not_174880 = python_operator(stypy.reporting.localization.Localization(__file__, 783, 11), 'isnot', collapsed_174878, None_174879)
        
        # Testing the type of an if condition (line 783)
        if_condition_174881 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 783, 8), result_is_not_174880)
        # Assigning a type to the variable 'if_condition_174881' (line 783)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 783, 8), 'if_condition_174881', if_condition_174881)
        # SSA begins for if statement (line 783)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 784)
        self_174882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 19), 'self')
        # Obtaining the member 'collapsed' of a type (line 784)
        collapsed_174883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 784, 19), self_174882, 'collapsed')
        # Assigning a type to the variable 'stypy_return_type' (line 784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 784, 12), 'stypy_return_type', collapsed_174883)
        # SSA join for if statement (line 783)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 786):
        
        # Assigning a BinOp to a Name (line 786):
        # Getting the type of 'self' (line 786)
        self_174884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 13), 'self')
        # Obtaining the member 'alpha' of a type (line 786)
        alpha_174885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 786, 13), self_174884, 'alpha')
        
        # Call to identity(...): (line 786)
        # Processing the call arguments (line 786)
        # Getting the type of 'self' (line 786)
        self_174888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 36), 'self', False)
        # Obtaining the member 'n' of a type (line 786)
        n_174889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 786, 36), self_174888, 'n')
        # Processing the call keyword arguments (line 786)
        # Getting the type of 'self' (line 786)
        self_174890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 50), 'self', False)
        # Obtaining the member 'dtype' of a type (line 786)
        dtype_174891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 786, 50), self_174890, 'dtype')
        keyword_174892 = dtype_174891
        kwargs_174893 = {'dtype': keyword_174892}
        # Getting the type of 'np' (line 786)
        np_174886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 24), 'np', False)
        # Obtaining the member 'identity' of a type (line 786)
        identity_174887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 786, 24), np_174886, 'identity')
        # Calling identity(args, kwargs) (line 786)
        identity_call_result_174894 = invoke(stypy.reporting.localization.Localization(__file__, 786, 24), identity_174887, *[n_174889], **kwargs_174893)
        
        # Applying the binary operator '*' (line 786)
        result_mul_174895 = python_operator(stypy.reporting.localization.Localization(__file__, 786, 13), '*', alpha_174885, identity_call_result_174894)
        
        # Assigning a type to the variable 'Gm' (line 786)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 786, 8), 'Gm', result_mul_174895)
        
        
        # Call to zip(...): (line 787)
        # Processing the call arguments (line 787)
        # Getting the type of 'self' (line 787)
        self_174897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 24), 'self', False)
        # Obtaining the member 'cs' of a type (line 787)
        cs_174898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 24), self_174897, 'cs')
        # Getting the type of 'self' (line 787)
        self_174899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 33), 'self', False)
        # Obtaining the member 'ds' of a type (line 787)
        ds_174900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 33), self_174899, 'ds')
        # Processing the call keyword arguments (line 787)
        kwargs_174901 = {}
        # Getting the type of 'zip' (line 787)
        zip_174896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 20), 'zip', False)
        # Calling zip(args, kwargs) (line 787)
        zip_call_result_174902 = invoke(stypy.reporting.localization.Localization(__file__, 787, 20), zip_174896, *[cs_174898, ds_174900], **kwargs_174901)
        
        # Testing the type of a for loop iterable (line 787)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 787, 8), zip_call_result_174902)
        # Getting the type of the for loop variable (line 787)
        for_loop_var_174903 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 787, 8), zip_call_result_174902)
        # Assigning a type to the variable 'c' (line 787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 787, 8), 'c', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 787, 8), for_loop_var_174903))
        # Assigning a type to the variable 'd' (line 787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 787, 8), 'd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 787, 8), for_loop_var_174903))
        # SSA begins for a for statement (line 787)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'Gm' (line 788)
        Gm_174904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 12), 'Gm')
        
        # Obtaining the type of the subscript
        slice_174905 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 788, 18), None, None, None)
        # Getting the type of 'None' (line 788)
        None_174906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 22), 'None')
        # Getting the type of 'c' (line 788)
        c_174907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 18), 'c')
        # Obtaining the member '__getitem__' of a type (line 788)
        getitem___174908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 18), c_174907, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 788)
        subscript_call_result_174909 = invoke(stypy.reporting.localization.Localization(__file__, 788, 18), getitem___174908, (slice_174905, None_174906))
        
        
        # Call to conj(...): (line 788)
        # Processing the call keyword arguments (line 788)
        kwargs_174916 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'None' (line 788)
        None_174910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 30), 'None', False)
        slice_174911 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 788, 28), None, None, None)
        # Getting the type of 'd' (line 788)
        d_174912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 28), 'd', False)
        # Obtaining the member '__getitem__' of a type (line 788)
        getitem___174913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 28), d_174912, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 788)
        subscript_call_result_174914 = invoke(stypy.reporting.localization.Localization(__file__, 788, 28), getitem___174913, (None_174910, slice_174911))
        
        # Obtaining the member 'conj' of a type (line 788)
        conj_174915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 28), subscript_call_result_174914, 'conj')
        # Calling conj(args, kwargs) (line 788)
        conj_call_result_174917 = invoke(stypy.reporting.localization.Localization(__file__, 788, 28), conj_174915, *[], **kwargs_174916)
        
        # Applying the binary operator '*' (line 788)
        result_mul_174918 = python_operator(stypy.reporting.localization.Localization(__file__, 788, 18), '*', subscript_call_result_174909, conj_call_result_174917)
        
        # Applying the binary operator '+=' (line 788)
        result_iadd_174919 = python_operator(stypy.reporting.localization.Localization(__file__, 788, 12), '+=', Gm_174904, result_mul_174918)
        # Assigning a type to the variable 'Gm' (line 788)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 788, 12), 'Gm', result_iadd_174919)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'Gm' (line 789)
        Gm_174920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 15), 'Gm')
        # Assigning a type to the variable 'stypy_return_type' (line 789)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 789, 8), 'stypy_return_type', Gm_174920)
        
        # ################# End of '__array__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__array__' in the type store
        # Getting the type of 'stypy_return_type' (line 782)
        stypy_return_type_174921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_174921)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__array__'
        return stypy_return_type_174921


    @norecursion
    def collapse(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'collapse'
        module_type_store = module_type_store.open_function_context('collapse', 791, 4, False)
        # Assigning a type to the variable 'self' (line 792)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 792, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LowRankMatrix.collapse.__dict__.__setitem__('stypy_localization', localization)
        LowRankMatrix.collapse.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LowRankMatrix.collapse.__dict__.__setitem__('stypy_type_store', module_type_store)
        LowRankMatrix.collapse.__dict__.__setitem__('stypy_function_name', 'LowRankMatrix.collapse')
        LowRankMatrix.collapse.__dict__.__setitem__('stypy_param_names_list', [])
        LowRankMatrix.collapse.__dict__.__setitem__('stypy_varargs_param_name', None)
        LowRankMatrix.collapse.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LowRankMatrix.collapse.__dict__.__setitem__('stypy_call_defaults', defaults)
        LowRankMatrix.collapse.__dict__.__setitem__('stypy_call_varargs', varargs)
        LowRankMatrix.collapse.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LowRankMatrix.collapse.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LowRankMatrix.collapse', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'collapse', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'collapse(...)' code ##################

        str_174922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 8), 'str', 'Collapse the low-rank matrix to a full-rank one.')
        
        # Assigning a Call to a Attribute (line 793):
        
        # Assigning a Call to a Attribute (line 793):
        
        # Call to array(...): (line 793)
        # Processing the call arguments (line 793)
        # Getting the type of 'self' (line 793)
        self_174925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 34), 'self', False)
        # Processing the call keyword arguments (line 793)
        kwargs_174926 = {}
        # Getting the type of 'np' (line 793)
        np_174923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 25), 'np', False)
        # Obtaining the member 'array' of a type (line 793)
        array_174924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 25), np_174923, 'array')
        # Calling array(args, kwargs) (line 793)
        array_call_result_174927 = invoke(stypy.reporting.localization.Localization(__file__, 793, 25), array_174924, *[self_174925], **kwargs_174926)
        
        # Getting the type of 'self' (line 793)
        self_174928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 8), 'self')
        # Setting the type of the member 'collapsed' of a type (line 793)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 8), self_174928, 'collapsed', array_call_result_174927)
        
        # Assigning a Name to a Attribute (line 794):
        
        # Assigning a Name to a Attribute (line 794):
        # Getting the type of 'None' (line 794)
        None_174929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 18), 'None')
        # Getting the type of 'self' (line 794)
        self_174930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 8), 'self')
        # Setting the type of the member 'cs' of a type (line 794)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 794, 8), self_174930, 'cs', None_174929)
        
        # Assigning a Name to a Attribute (line 795):
        
        # Assigning a Name to a Attribute (line 795):
        # Getting the type of 'None' (line 795)
        None_174931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 18), 'None')
        # Getting the type of 'self' (line 795)
        self_174932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 8), 'self')
        # Setting the type of the member 'ds' of a type (line 795)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 795, 8), self_174932, 'ds', None_174931)
        
        # Assigning a Name to a Attribute (line 796):
        
        # Assigning a Name to a Attribute (line 796):
        # Getting the type of 'None' (line 796)
        None_174933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 21), 'None')
        # Getting the type of 'self' (line 796)
        self_174934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 8), 'self')
        # Setting the type of the member 'alpha' of a type (line 796)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 796, 8), self_174934, 'alpha', None_174933)
        
        # ################# End of 'collapse(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'collapse' in the type store
        # Getting the type of 'stypy_return_type' (line 791)
        stypy_return_type_174935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_174935)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'collapse'
        return stypy_return_type_174935


    @norecursion
    def restart_reduce(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'restart_reduce'
        module_type_store = module_type_store.open_function_context('restart_reduce', 798, 4, False)
        # Assigning a type to the variable 'self' (line 799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LowRankMatrix.restart_reduce.__dict__.__setitem__('stypy_localization', localization)
        LowRankMatrix.restart_reduce.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LowRankMatrix.restart_reduce.__dict__.__setitem__('stypy_type_store', module_type_store)
        LowRankMatrix.restart_reduce.__dict__.__setitem__('stypy_function_name', 'LowRankMatrix.restart_reduce')
        LowRankMatrix.restart_reduce.__dict__.__setitem__('stypy_param_names_list', ['rank'])
        LowRankMatrix.restart_reduce.__dict__.__setitem__('stypy_varargs_param_name', None)
        LowRankMatrix.restart_reduce.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LowRankMatrix.restart_reduce.__dict__.__setitem__('stypy_call_defaults', defaults)
        LowRankMatrix.restart_reduce.__dict__.__setitem__('stypy_call_varargs', varargs)
        LowRankMatrix.restart_reduce.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LowRankMatrix.restart_reduce.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LowRankMatrix.restart_reduce', ['rank'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'restart_reduce', localization, ['rank'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'restart_reduce(...)' code ##################

        str_174936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 801, (-1)), 'str', '\n        Reduce the rank of the matrix by dropping all vectors.\n        ')
        
        
        # Getting the type of 'self' (line 802)
        self_174937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 11), 'self')
        # Obtaining the member 'collapsed' of a type (line 802)
        collapsed_174938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 11), self_174937, 'collapsed')
        # Getting the type of 'None' (line 802)
        None_174939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 33), 'None')
        # Applying the binary operator 'isnot' (line 802)
        result_is_not_174940 = python_operator(stypy.reporting.localization.Localization(__file__, 802, 11), 'isnot', collapsed_174938, None_174939)
        
        # Testing the type of an if condition (line 802)
        if_condition_174941 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 802, 8), result_is_not_174940)
        # Assigning a type to the variable 'if_condition_174941' (line 802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 8), 'if_condition_174941', if_condition_174941)
        # SSA begins for if statement (line 802)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 803)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 803, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 802)
        module_type_store = module_type_store.join_ssa_context()
        
        # Evaluating assert statement condition
        
        # Getting the type of 'rank' (line 804)
        rank_174942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 15), 'rank')
        int_174943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 804, 22), 'int')
        # Applying the binary operator '>' (line 804)
        result_gt_174944 = python_operator(stypy.reporting.localization.Localization(__file__, 804, 15), '>', rank_174942, int_174943)
        
        
        
        
        # Call to len(...): (line 805)
        # Processing the call arguments (line 805)
        # Getting the type of 'self' (line 805)
        self_174946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 15), 'self', False)
        # Obtaining the member 'cs' of a type (line 805)
        cs_174947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 15), self_174946, 'cs')
        # Processing the call keyword arguments (line 805)
        kwargs_174948 = {}
        # Getting the type of 'len' (line 805)
        len_174945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 11), 'len', False)
        # Calling len(args, kwargs) (line 805)
        len_call_result_174949 = invoke(stypy.reporting.localization.Localization(__file__, 805, 11), len_174945, *[cs_174947], **kwargs_174948)
        
        # Getting the type of 'rank' (line 805)
        rank_174950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 26), 'rank')
        # Applying the binary operator '>' (line 805)
        result_gt_174951 = python_operator(stypy.reporting.localization.Localization(__file__, 805, 11), '>', len_call_result_174949, rank_174950)
        
        # Testing the type of an if condition (line 805)
        if_condition_174952 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 805, 8), result_gt_174951)
        # Assigning a type to the variable 'if_condition_174952' (line 805)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 805, 8), 'if_condition_174952', if_condition_174952)
        # SSA begins for if statement (line 805)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Deleting a member
        # Getting the type of 'self' (line 806)
        self_174953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 16), 'self')
        # Obtaining the member 'cs' of a type (line 806)
        cs_174954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 16), self_174953, 'cs')
        
        # Obtaining the type of the subscript
        slice_174955 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 806, 16), None, None, None)
        # Getting the type of 'self' (line 806)
        self_174956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 16), 'self')
        # Obtaining the member 'cs' of a type (line 806)
        cs_174957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 16), self_174956, 'cs')
        # Obtaining the member '__getitem__' of a type (line 806)
        getitem___174958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 16), cs_174957, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 806)
        subscript_call_result_174959 = invoke(stypy.reporting.localization.Localization(__file__, 806, 16), getitem___174958, slice_174955)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 806, 12), cs_174954, subscript_call_result_174959)
        # Deleting a member
        # Getting the type of 'self' (line 807)
        self_174960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 16), 'self')
        # Obtaining the member 'ds' of a type (line 807)
        ds_174961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 16), self_174960, 'ds')
        
        # Obtaining the type of the subscript
        slice_174962 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 807, 16), None, None, None)
        # Getting the type of 'self' (line 807)
        self_174963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 16), 'self')
        # Obtaining the member 'ds' of a type (line 807)
        ds_174964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 16), self_174963, 'ds')
        # Obtaining the member '__getitem__' of a type (line 807)
        getitem___174965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 16), ds_174964, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 807)
        subscript_call_result_174966 = invoke(stypy.reporting.localization.Localization(__file__, 807, 16), getitem___174965, slice_174962)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 807, 12), ds_174961, subscript_call_result_174966)
        # SSA join for if statement (line 805)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'restart_reduce(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'restart_reduce' in the type store
        # Getting the type of 'stypy_return_type' (line 798)
        stypy_return_type_174967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_174967)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'restart_reduce'
        return stypy_return_type_174967


    @norecursion
    def simple_reduce(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'simple_reduce'
        module_type_store = module_type_store.open_function_context('simple_reduce', 809, 4, False)
        # Assigning a type to the variable 'self' (line 810)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 810, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LowRankMatrix.simple_reduce.__dict__.__setitem__('stypy_localization', localization)
        LowRankMatrix.simple_reduce.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LowRankMatrix.simple_reduce.__dict__.__setitem__('stypy_type_store', module_type_store)
        LowRankMatrix.simple_reduce.__dict__.__setitem__('stypy_function_name', 'LowRankMatrix.simple_reduce')
        LowRankMatrix.simple_reduce.__dict__.__setitem__('stypy_param_names_list', ['rank'])
        LowRankMatrix.simple_reduce.__dict__.__setitem__('stypy_varargs_param_name', None)
        LowRankMatrix.simple_reduce.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LowRankMatrix.simple_reduce.__dict__.__setitem__('stypy_call_defaults', defaults)
        LowRankMatrix.simple_reduce.__dict__.__setitem__('stypy_call_varargs', varargs)
        LowRankMatrix.simple_reduce.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LowRankMatrix.simple_reduce.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LowRankMatrix.simple_reduce', ['rank'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'simple_reduce', localization, ['rank'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'simple_reduce(...)' code ##################

        str_174968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 812, (-1)), 'str', '\n        Reduce the rank of the matrix by dropping oldest vectors.\n        ')
        
        
        # Getting the type of 'self' (line 813)
        self_174969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 11), 'self')
        # Obtaining the member 'collapsed' of a type (line 813)
        collapsed_174970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 813, 11), self_174969, 'collapsed')
        # Getting the type of 'None' (line 813)
        None_174971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 33), 'None')
        # Applying the binary operator 'isnot' (line 813)
        result_is_not_174972 = python_operator(stypy.reporting.localization.Localization(__file__, 813, 11), 'isnot', collapsed_174970, None_174971)
        
        # Testing the type of an if condition (line 813)
        if_condition_174973 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 813, 8), result_is_not_174972)
        # Assigning a type to the variable 'if_condition_174973' (line 813)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 813, 8), 'if_condition_174973', if_condition_174973)
        # SSA begins for if statement (line 813)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 814, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 813)
        module_type_store = module_type_store.join_ssa_context()
        
        # Evaluating assert statement condition
        
        # Getting the type of 'rank' (line 815)
        rank_174974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 15), 'rank')
        int_174975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 815, 22), 'int')
        # Applying the binary operator '>' (line 815)
        result_gt_174976 = python_operator(stypy.reporting.localization.Localization(__file__, 815, 15), '>', rank_174974, int_174975)
        
        
        
        
        # Call to len(...): (line 816)
        # Processing the call arguments (line 816)
        # Getting the type of 'self' (line 816)
        self_174978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 18), 'self', False)
        # Obtaining the member 'cs' of a type (line 816)
        cs_174979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 816, 18), self_174978, 'cs')
        # Processing the call keyword arguments (line 816)
        kwargs_174980 = {}
        # Getting the type of 'len' (line 816)
        len_174977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 14), 'len', False)
        # Calling len(args, kwargs) (line 816)
        len_call_result_174981 = invoke(stypy.reporting.localization.Localization(__file__, 816, 14), len_174977, *[cs_174979], **kwargs_174980)
        
        # Getting the type of 'rank' (line 816)
        rank_174982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 29), 'rank')
        # Applying the binary operator '>' (line 816)
        result_gt_174983 = python_operator(stypy.reporting.localization.Localization(__file__, 816, 14), '>', len_call_result_174981, rank_174982)
        
        # Testing the type of an if condition (line 816)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 816, 8), result_gt_174983)
        # SSA begins for while statement (line 816)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        # Deleting a member
        # Getting the type of 'self' (line 817)
        self_174984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 16), 'self')
        # Obtaining the member 'cs' of a type (line 817)
        cs_174985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 16), self_174984, 'cs')
        
        # Obtaining the type of the subscript
        int_174986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 817, 24), 'int')
        # Getting the type of 'self' (line 817)
        self_174987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 16), 'self')
        # Obtaining the member 'cs' of a type (line 817)
        cs_174988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 16), self_174987, 'cs')
        # Obtaining the member '__getitem__' of a type (line 817)
        getitem___174989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 16), cs_174988, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 817)
        subscript_call_result_174990 = invoke(stypy.reporting.localization.Localization(__file__, 817, 16), getitem___174989, int_174986)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 817, 12), cs_174985, subscript_call_result_174990)
        # Deleting a member
        # Getting the type of 'self' (line 818)
        self_174991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 16), 'self')
        # Obtaining the member 'ds' of a type (line 818)
        ds_174992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 16), self_174991, 'ds')
        
        # Obtaining the type of the subscript
        int_174993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 818, 24), 'int')
        # Getting the type of 'self' (line 818)
        self_174994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 16), 'self')
        # Obtaining the member 'ds' of a type (line 818)
        ds_174995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 16), self_174994, 'ds')
        # Obtaining the member '__getitem__' of a type (line 818)
        getitem___174996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 16), ds_174995, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 818)
        subscript_call_result_174997 = invoke(stypy.reporting.localization.Localization(__file__, 818, 16), getitem___174996, int_174993)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 818, 12), ds_174992, subscript_call_result_174997)
        # SSA join for while statement (line 816)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'simple_reduce(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'simple_reduce' in the type store
        # Getting the type of 'stypy_return_type' (line 809)
        stypy_return_type_174998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_174998)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'simple_reduce'
        return stypy_return_type_174998


    @norecursion
    def svd_reduce(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 820)
        None_174999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 45), 'None')
        defaults = [None_174999]
        # Create a new context for function 'svd_reduce'
        module_type_store = module_type_store.open_function_context('svd_reduce', 820, 4, False)
        # Assigning a type to the variable 'self' (line 821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 821, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LowRankMatrix.svd_reduce.__dict__.__setitem__('stypy_localization', localization)
        LowRankMatrix.svd_reduce.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LowRankMatrix.svd_reduce.__dict__.__setitem__('stypy_type_store', module_type_store)
        LowRankMatrix.svd_reduce.__dict__.__setitem__('stypy_function_name', 'LowRankMatrix.svd_reduce')
        LowRankMatrix.svd_reduce.__dict__.__setitem__('stypy_param_names_list', ['max_rank', 'to_retain'])
        LowRankMatrix.svd_reduce.__dict__.__setitem__('stypy_varargs_param_name', None)
        LowRankMatrix.svd_reduce.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LowRankMatrix.svd_reduce.__dict__.__setitem__('stypy_call_defaults', defaults)
        LowRankMatrix.svd_reduce.__dict__.__setitem__('stypy_call_varargs', varargs)
        LowRankMatrix.svd_reduce.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LowRankMatrix.svd_reduce.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LowRankMatrix.svd_reduce', ['max_rank', 'to_retain'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'svd_reduce', localization, ['max_rank', 'to_retain'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'svd_reduce(...)' code ##################

        str_175000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 848, (-1)), 'str', '\n        Reduce the rank of the matrix by retaining some SVD components.\n\n        This corresponds to the "Broyden Rank Reduction Inverse"\n        algorithm described in [1]_.\n\n        Note that the SVD decomposition can be done by solving only a\n        problem whose size is the effective rank of this matrix, which\n        is viable even for large problems.\n\n        Parameters\n        ----------\n        max_rank : int\n            Maximum rank of this matrix after reduction.\n        to_retain : int, optional\n            Number of SVD components to retain when reduction is done\n            (ie. rank > max_rank). Default is ``max_rank - 2``.\n\n        References\n        ----------\n        .. [1] B.A. van der Rotten, PhD thesis,\n           "A limited memory Broyden method to solve high-dimensional\n           systems of nonlinear equations". Mathematisch Instituut,\n           Universiteit Leiden, The Netherlands (2003).\n\n           http://www.math.leidenuniv.nl/scripties/Rotten.pdf\n\n        ')
        
        
        # Getting the type of 'self' (line 849)
        self_175001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 11), 'self')
        # Obtaining the member 'collapsed' of a type (line 849)
        collapsed_175002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 849, 11), self_175001, 'collapsed')
        # Getting the type of 'None' (line 849)
        None_175003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 33), 'None')
        # Applying the binary operator 'isnot' (line 849)
        result_is_not_175004 = python_operator(stypy.reporting.localization.Localization(__file__, 849, 11), 'isnot', collapsed_175002, None_175003)
        
        # Testing the type of an if condition (line 849)
        if_condition_175005 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 849, 8), result_is_not_175004)
        # Assigning a type to the variable 'if_condition_175005' (line 849)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 849, 8), 'if_condition_175005', if_condition_175005)
        # SSA begins for if statement (line 849)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 850)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 850, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 849)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 852):
        
        # Assigning a Name to a Name (line 852):
        # Getting the type of 'max_rank' (line 852)
        max_rank_175006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 12), 'max_rank')
        # Assigning a type to the variable 'p' (line 852)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 852, 8), 'p', max_rank_175006)
        
        # Type idiom detected: calculating its left and rigth part (line 853)
        # Getting the type of 'to_retain' (line 853)
        to_retain_175007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 8), 'to_retain')
        # Getting the type of 'None' (line 853)
        None_175008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 28), 'None')
        
        (may_be_175009, more_types_in_union_175010) = may_not_be_none(to_retain_175007, None_175008)

        if may_be_175009:

            if more_types_in_union_175010:
                # Runtime conditional SSA (line 853)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 854):
            
            # Assigning a Name to a Name (line 854):
            # Getting the type of 'to_retain' (line 854)
            to_retain_175011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 16), 'to_retain')
            # Assigning a type to the variable 'q' (line 854)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 854, 12), 'q', to_retain_175011)

            if more_types_in_union_175010:
                # Runtime conditional SSA for else branch (line 853)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_175009) or more_types_in_union_175010):
            
            # Assigning a BinOp to a Name (line 856):
            
            # Assigning a BinOp to a Name (line 856):
            # Getting the type of 'p' (line 856)
            p_175012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 16), 'p')
            int_175013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 856, 20), 'int')
            # Applying the binary operator '-' (line 856)
            result_sub_175014 = python_operator(stypy.reporting.localization.Localization(__file__, 856, 16), '-', p_175012, int_175013)
            
            # Assigning a type to the variable 'q' (line 856)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 856, 12), 'q', result_sub_175014)

            if (may_be_175009 and more_types_in_union_175010):
                # SSA join for if statement (line 853)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'self' (line 858)
        self_175015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 858, 11), 'self')
        # Obtaining the member 'cs' of a type (line 858)
        cs_175016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 858, 11), self_175015, 'cs')
        # Testing the type of an if condition (line 858)
        if_condition_175017 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 858, 8), cs_175016)
        # Assigning a type to the variable 'if_condition_175017' (line 858)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 858, 8), 'if_condition_175017', if_condition_175017)
        # SSA begins for if statement (line 858)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 859):
        
        # Assigning a Call to a Name (line 859):
        
        # Call to min(...): (line 859)
        # Processing the call arguments (line 859)
        # Getting the type of 'p' (line 859)
        p_175019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 20), 'p', False)
        
        # Call to len(...): (line 859)
        # Processing the call arguments (line 859)
        
        # Obtaining the type of the subscript
        int_175021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 859, 35), 'int')
        # Getting the type of 'self' (line 859)
        self_175022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 27), 'self', False)
        # Obtaining the member 'cs' of a type (line 859)
        cs_175023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 859, 27), self_175022, 'cs')
        # Obtaining the member '__getitem__' of a type (line 859)
        getitem___175024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 859, 27), cs_175023, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 859)
        subscript_call_result_175025 = invoke(stypy.reporting.localization.Localization(__file__, 859, 27), getitem___175024, int_175021)
        
        # Processing the call keyword arguments (line 859)
        kwargs_175026 = {}
        # Getting the type of 'len' (line 859)
        len_175020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 23), 'len', False)
        # Calling len(args, kwargs) (line 859)
        len_call_result_175027 = invoke(stypy.reporting.localization.Localization(__file__, 859, 23), len_175020, *[subscript_call_result_175025], **kwargs_175026)
        
        # Processing the call keyword arguments (line 859)
        kwargs_175028 = {}
        # Getting the type of 'min' (line 859)
        min_175018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 16), 'min', False)
        # Calling min(args, kwargs) (line 859)
        min_call_result_175029 = invoke(stypy.reporting.localization.Localization(__file__, 859, 16), min_175018, *[p_175019, len_call_result_175027], **kwargs_175028)
        
        # Assigning a type to the variable 'p' (line 859)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 859, 12), 'p', min_call_result_175029)
        # SSA join for if statement (line 858)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 860):
        
        # Assigning a Call to a Name (line 860):
        
        # Call to max(...): (line 860)
        # Processing the call arguments (line 860)
        int_175031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 860, 16), 'int')
        
        # Call to min(...): (line 860)
        # Processing the call arguments (line 860)
        # Getting the type of 'q' (line 860)
        q_175033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 23), 'q', False)
        # Getting the type of 'p' (line 860)
        p_175034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 26), 'p', False)
        int_175035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 860, 28), 'int')
        # Applying the binary operator '-' (line 860)
        result_sub_175036 = python_operator(stypy.reporting.localization.Localization(__file__, 860, 26), '-', p_175034, int_175035)
        
        # Processing the call keyword arguments (line 860)
        kwargs_175037 = {}
        # Getting the type of 'min' (line 860)
        min_175032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 19), 'min', False)
        # Calling min(args, kwargs) (line 860)
        min_call_result_175038 = invoke(stypy.reporting.localization.Localization(__file__, 860, 19), min_175032, *[q_175033, result_sub_175036], **kwargs_175037)
        
        # Processing the call keyword arguments (line 860)
        kwargs_175039 = {}
        # Getting the type of 'max' (line 860)
        max_175030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 12), 'max', False)
        # Calling max(args, kwargs) (line 860)
        max_call_result_175040 = invoke(stypy.reporting.localization.Localization(__file__, 860, 12), max_175030, *[int_175031, min_call_result_175038], **kwargs_175039)
        
        # Assigning a type to the variable 'q' (line 860)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 860, 8), 'q', max_call_result_175040)
        
        # Assigning a Call to a Name (line 862):
        
        # Assigning a Call to a Name (line 862):
        
        # Call to len(...): (line 862)
        # Processing the call arguments (line 862)
        # Getting the type of 'self' (line 862)
        self_175042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 16), 'self', False)
        # Obtaining the member 'cs' of a type (line 862)
        cs_175043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 862, 16), self_175042, 'cs')
        # Processing the call keyword arguments (line 862)
        kwargs_175044 = {}
        # Getting the type of 'len' (line 862)
        len_175041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 12), 'len', False)
        # Calling len(args, kwargs) (line 862)
        len_call_result_175045 = invoke(stypy.reporting.localization.Localization(__file__, 862, 12), len_175041, *[cs_175043], **kwargs_175044)
        
        # Assigning a type to the variable 'm' (line 862)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 862, 8), 'm', len_call_result_175045)
        
        
        # Getting the type of 'm' (line 863)
        m_175046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 11), 'm')
        # Getting the type of 'p' (line 863)
        p_175047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 15), 'p')
        # Applying the binary operator '<' (line 863)
        result_lt_175048 = python_operator(stypy.reporting.localization.Localization(__file__, 863, 11), '<', m_175046, p_175047)
        
        # Testing the type of an if condition (line 863)
        if_condition_175049 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 863, 8), result_lt_175048)
        # Assigning a type to the variable 'if_condition_175049' (line 863)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 863, 8), 'if_condition_175049', if_condition_175049)
        # SSA begins for if statement (line 863)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 865)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 865, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 863)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 867):
        
        # Assigning a Attribute to a Name (line 867):
        
        # Call to array(...): (line 867)
        # Processing the call arguments (line 867)
        # Getting the type of 'self' (line 867)
        self_175052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 21), 'self', False)
        # Obtaining the member 'cs' of a type (line 867)
        cs_175053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 867, 21), self_175052, 'cs')
        # Processing the call keyword arguments (line 867)
        kwargs_175054 = {}
        # Getting the type of 'np' (line 867)
        np_175050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 12), 'np', False)
        # Obtaining the member 'array' of a type (line 867)
        array_175051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 867, 12), np_175050, 'array')
        # Calling array(args, kwargs) (line 867)
        array_call_result_175055 = invoke(stypy.reporting.localization.Localization(__file__, 867, 12), array_175051, *[cs_175053], **kwargs_175054)
        
        # Obtaining the member 'T' of a type (line 867)
        T_175056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 867, 12), array_call_result_175055, 'T')
        # Assigning a type to the variable 'C' (line 867)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 867, 8), 'C', T_175056)
        
        # Assigning a Attribute to a Name (line 868):
        
        # Assigning a Attribute to a Name (line 868):
        
        # Call to array(...): (line 868)
        # Processing the call arguments (line 868)
        # Getting the type of 'self' (line 868)
        self_175059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 21), 'self', False)
        # Obtaining the member 'ds' of a type (line 868)
        ds_175060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 868, 21), self_175059, 'ds')
        # Processing the call keyword arguments (line 868)
        kwargs_175061 = {}
        # Getting the type of 'np' (line 868)
        np_175057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 12), 'np', False)
        # Obtaining the member 'array' of a type (line 868)
        array_175058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 868, 12), np_175057, 'array')
        # Calling array(args, kwargs) (line 868)
        array_call_result_175062 = invoke(stypy.reporting.localization.Localization(__file__, 868, 12), array_175058, *[ds_175060], **kwargs_175061)
        
        # Obtaining the member 'T' of a type (line 868)
        T_175063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 868, 12), array_call_result_175062, 'T')
        # Assigning a type to the variable 'D' (line 868)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 868, 8), 'D', T_175063)
        
        # Assigning a Call to a Tuple (line 870):
        
        # Assigning a Subscript to a Name (line 870):
        
        # Obtaining the type of the subscript
        int_175064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 8), 'int')
        
        # Call to qr(...): (line 870)
        # Processing the call arguments (line 870)
        # Getting the type of 'D' (line 870)
        D_175066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 18), 'D', False)
        # Processing the call keyword arguments (line 870)
        str_175067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 26), 'str', 'economic')
        keyword_175068 = str_175067
        kwargs_175069 = {'mode': keyword_175068}
        # Getting the type of 'qr' (line 870)
        qr_175065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 15), 'qr', False)
        # Calling qr(args, kwargs) (line 870)
        qr_call_result_175070 = invoke(stypy.reporting.localization.Localization(__file__, 870, 15), qr_175065, *[D_175066], **kwargs_175069)
        
        # Obtaining the member '__getitem__' of a type (line 870)
        getitem___175071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 870, 8), qr_call_result_175070, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 870)
        subscript_call_result_175072 = invoke(stypy.reporting.localization.Localization(__file__, 870, 8), getitem___175071, int_175064)
        
        # Assigning a type to the variable 'tuple_var_assignment_173006' (line 870)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 870, 8), 'tuple_var_assignment_173006', subscript_call_result_175072)
        
        # Assigning a Subscript to a Name (line 870):
        
        # Obtaining the type of the subscript
        int_175073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 8), 'int')
        
        # Call to qr(...): (line 870)
        # Processing the call arguments (line 870)
        # Getting the type of 'D' (line 870)
        D_175075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 18), 'D', False)
        # Processing the call keyword arguments (line 870)
        str_175076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 26), 'str', 'economic')
        keyword_175077 = str_175076
        kwargs_175078 = {'mode': keyword_175077}
        # Getting the type of 'qr' (line 870)
        qr_175074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 15), 'qr', False)
        # Calling qr(args, kwargs) (line 870)
        qr_call_result_175079 = invoke(stypy.reporting.localization.Localization(__file__, 870, 15), qr_175074, *[D_175075], **kwargs_175078)
        
        # Obtaining the member '__getitem__' of a type (line 870)
        getitem___175080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 870, 8), qr_call_result_175079, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 870)
        subscript_call_result_175081 = invoke(stypy.reporting.localization.Localization(__file__, 870, 8), getitem___175080, int_175073)
        
        # Assigning a type to the variable 'tuple_var_assignment_173007' (line 870)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 870, 8), 'tuple_var_assignment_173007', subscript_call_result_175081)
        
        # Assigning a Name to a Name (line 870):
        # Getting the type of 'tuple_var_assignment_173006' (line 870)
        tuple_var_assignment_173006_175082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 8), 'tuple_var_assignment_173006')
        # Assigning a type to the variable 'D' (line 870)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 870, 8), 'D', tuple_var_assignment_173006_175082)
        
        # Assigning a Name to a Name (line 870):
        # Getting the type of 'tuple_var_assignment_173007' (line 870)
        tuple_var_assignment_173007_175083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 8), 'tuple_var_assignment_173007')
        # Assigning a type to the variable 'R' (line 870)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 870, 11), 'R', tuple_var_assignment_173007_175083)
        
        # Assigning a Call to a Name (line 871):
        
        # Assigning a Call to a Name (line 871):
        
        # Call to dot(...): (line 871)
        # Processing the call arguments (line 871)
        # Getting the type of 'C' (line 871)
        C_175085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 16), 'C', False)
        
        # Call to conj(...): (line 871)
        # Processing the call keyword arguments (line 871)
        kwargs_175089 = {}
        # Getting the type of 'R' (line 871)
        R_175086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 19), 'R', False)
        # Obtaining the member 'T' of a type (line 871)
        T_175087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 871, 19), R_175086, 'T')
        # Obtaining the member 'conj' of a type (line 871)
        conj_175088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 871, 19), T_175087, 'conj')
        # Calling conj(args, kwargs) (line 871)
        conj_call_result_175090 = invoke(stypy.reporting.localization.Localization(__file__, 871, 19), conj_175088, *[], **kwargs_175089)
        
        # Processing the call keyword arguments (line 871)
        kwargs_175091 = {}
        # Getting the type of 'dot' (line 871)
        dot_175084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 12), 'dot', False)
        # Calling dot(args, kwargs) (line 871)
        dot_call_result_175092 = invoke(stypy.reporting.localization.Localization(__file__, 871, 12), dot_175084, *[C_175085, conj_call_result_175090], **kwargs_175091)
        
        # Assigning a type to the variable 'C' (line 871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 8), 'C', dot_call_result_175092)
        
        # Assigning a Call to a Tuple (line 873):
        
        # Assigning a Subscript to a Name (line 873):
        
        # Obtaining the type of the subscript
        int_175093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 873, 8), 'int')
        
        # Call to svd(...): (line 873)
        # Processing the call arguments (line 873)
        # Getting the type of 'C' (line 873)
        C_175095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 23), 'C', False)
        # Processing the call keyword arguments (line 873)
        # Getting the type of 'False' (line 873)
        False_175096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 40), 'False', False)
        keyword_175097 = False_175096
        # Getting the type of 'True' (line 873)
        True_175098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 58), 'True', False)
        keyword_175099 = True_175098
        kwargs_175100 = {'compute_uv': keyword_175099, 'full_matrices': keyword_175097}
        # Getting the type of 'svd' (line 873)
        svd_175094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 19), 'svd', False)
        # Calling svd(args, kwargs) (line 873)
        svd_call_result_175101 = invoke(stypy.reporting.localization.Localization(__file__, 873, 19), svd_175094, *[C_175095], **kwargs_175100)
        
        # Obtaining the member '__getitem__' of a type (line 873)
        getitem___175102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 8), svd_call_result_175101, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 873)
        subscript_call_result_175103 = invoke(stypy.reporting.localization.Localization(__file__, 873, 8), getitem___175102, int_175093)
        
        # Assigning a type to the variable 'tuple_var_assignment_173008' (line 873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 873, 8), 'tuple_var_assignment_173008', subscript_call_result_175103)
        
        # Assigning a Subscript to a Name (line 873):
        
        # Obtaining the type of the subscript
        int_175104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 873, 8), 'int')
        
        # Call to svd(...): (line 873)
        # Processing the call arguments (line 873)
        # Getting the type of 'C' (line 873)
        C_175106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 23), 'C', False)
        # Processing the call keyword arguments (line 873)
        # Getting the type of 'False' (line 873)
        False_175107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 40), 'False', False)
        keyword_175108 = False_175107
        # Getting the type of 'True' (line 873)
        True_175109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 58), 'True', False)
        keyword_175110 = True_175109
        kwargs_175111 = {'compute_uv': keyword_175110, 'full_matrices': keyword_175108}
        # Getting the type of 'svd' (line 873)
        svd_175105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 19), 'svd', False)
        # Calling svd(args, kwargs) (line 873)
        svd_call_result_175112 = invoke(stypy.reporting.localization.Localization(__file__, 873, 19), svd_175105, *[C_175106], **kwargs_175111)
        
        # Obtaining the member '__getitem__' of a type (line 873)
        getitem___175113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 8), svd_call_result_175112, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 873)
        subscript_call_result_175114 = invoke(stypy.reporting.localization.Localization(__file__, 873, 8), getitem___175113, int_175104)
        
        # Assigning a type to the variable 'tuple_var_assignment_173009' (line 873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 873, 8), 'tuple_var_assignment_173009', subscript_call_result_175114)
        
        # Assigning a Subscript to a Name (line 873):
        
        # Obtaining the type of the subscript
        int_175115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 873, 8), 'int')
        
        # Call to svd(...): (line 873)
        # Processing the call arguments (line 873)
        # Getting the type of 'C' (line 873)
        C_175117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 23), 'C', False)
        # Processing the call keyword arguments (line 873)
        # Getting the type of 'False' (line 873)
        False_175118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 40), 'False', False)
        keyword_175119 = False_175118
        # Getting the type of 'True' (line 873)
        True_175120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 58), 'True', False)
        keyword_175121 = True_175120
        kwargs_175122 = {'compute_uv': keyword_175121, 'full_matrices': keyword_175119}
        # Getting the type of 'svd' (line 873)
        svd_175116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 19), 'svd', False)
        # Calling svd(args, kwargs) (line 873)
        svd_call_result_175123 = invoke(stypy.reporting.localization.Localization(__file__, 873, 19), svd_175116, *[C_175117], **kwargs_175122)
        
        # Obtaining the member '__getitem__' of a type (line 873)
        getitem___175124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 8), svd_call_result_175123, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 873)
        subscript_call_result_175125 = invoke(stypy.reporting.localization.Localization(__file__, 873, 8), getitem___175124, int_175115)
        
        # Assigning a type to the variable 'tuple_var_assignment_173010' (line 873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 873, 8), 'tuple_var_assignment_173010', subscript_call_result_175125)
        
        # Assigning a Name to a Name (line 873):
        # Getting the type of 'tuple_var_assignment_173008' (line 873)
        tuple_var_assignment_173008_175126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 8), 'tuple_var_assignment_173008')
        # Assigning a type to the variable 'U' (line 873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 873, 8), 'U', tuple_var_assignment_173008_175126)
        
        # Assigning a Name to a Name (line 873):
        # Getting the type of 'tuple_var_assignment_173009' (line 873)
        tuple_var_assignment_173009_175127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 8), 'tuple_var_assignment_173009')
        # Assigning a type to the variable 'S' (line 873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 873, 11), 'S', tuple_var_assignment_173009_175127)
        
        # Assigning a Name to a Name (line 873):
        # Getting the type of 'tuple_var_assignment_173010' (line 873)
        tuple_var_assignment_173010_175128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 8), 'tuple_var_assignment_173010')
        # Assigning a type to the variable 'WH' (line 873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 873, 14), 'WH', tuple_var_assignment_173010_175128)
        
        # Assigning a Call to a Name (line 875):
        
        # Assigning a Call to a Name (line 875):
        
        # Call to dot(...): (line 875)
        # Processing the call arguments (line 875)
        # Getting the type of 'C' (line 875)
        C_175130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 16), 'C', False)
        
        # Call to inv(...): (line 875)
        # Processing the call arguments (line 875)
        # Getting the type of 'WH' (line 875)
        WH_175132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 23), 'WH', False)
        # Processing the call keyword arguments (line 875)
        kwargs_175133 = {}
        # Getting the type of 'inv' (line 875)
        inv_175131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 19), 'inv', False)
        # Calling inv(args, kwargs) (line 875)
        inv_call_result_175134 = invoke(stypy.reporting.localization.Localization(__file__, 875, 19), inv_175131, *[WH_175132], **kwargs_175133)
        
        # Processing the call keyword arguments (line 875)
        kwargs_175135 = {}
        # Getting the type of 'dot' (line 875)
        dot_175129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 12), 'dot', False)
        # Calling dot(args, kwargs) (line 875)
        dot_call_result_175136 = invoke(stypy.reporting.localization.Localization(__file__, 875, 12), dot_175129, *[C_175130, inv_call_result_175134], **kwargs_175135)
        
        # Assigning a type to the variable 'C' (line 875)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 875, 8), 'C', dot_call_result_175136)
        
        # Assigning a Call to a Name (line 876):
        
        # Assigning a Call to a Name (line 876):
        
        # Call to dot(...): (line 876)
        # Processing the call arguments (line 876)
        # Getting the type of 'D' (line 876)
        D_175138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 16), 'D', False)
        
        # Call to conj(...): (line 876)
        # Processing the call keyword arguments (line 876)
        kwargs_175142 = {}
        # Getting the type of 'WH' (line 876)
        WH_175139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 19), 'WH', False)
        # Obtaining the member 'T' of a type (line 876)
        T_175140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 19), WH_175139, 'T')
        # Obtaining the member 'conj' of a type (line 876)
        conj_175141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 19), T_175140, 'conj')
        # Calling conj(args, kwargs) (line 876)
        conj_call_result_175143 = invoke(stypy.reporting.localization.Localization(__file__, 876, 19), conj_175141, *[], **kwargs_175142)
        
        # Processing the call keyword arguments (line 876)
        kwargs_175144 = {}
        # Getting the type of 'dot' (line 876)
        dot_175137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 12), 'dot', False)
        # Calling dot(args, kwargs) (line 876)
        dot_call_result_175145 = invoke(stypy.reporting.localization.Localization(__file__, 876, 12), dot_175137, *[D_175138, conj_call_result_175143], **kwargs_175144)
        
        # Assigning a type to the variable 'D' (line 876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 876, 8), 'D', dot_call_result_175145)
        
        
        # Call to xrange(...): (line 878)
        # Processing the call arguments (line 878)
        # Getting the type of 'q' (line 878)
        q_175147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 24), 'q', False)
        # Processing the call keyword arguments (line 878)
        kwargs_175148 = {}
        # Getting the type of 'xrange' (line 878)
        xrange_175146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 17), 'xrange', False)
        # Calling xrange(args, kwargs) (line 878)
        xrange_call_result_175149 = invoke(stypy.reporting.localization.Localization(__file__, 878, 17), xrange_175146, *[q_175147], **kwargs_175148)
        
        # Testing the type of a for loop iterable (line 878)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 878, 8), xrange_call_result_175149)
        # Getting the type of the for loop variable (line 878)
        for_loop_var_175150 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 878, 8), xrange_call_result_175149)
        # Assigning a type to the variable 'k' (line 878)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 878, 8), 'k', for_loop_var_175150)
        # SSA begins for a for statement (line 878)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Subscript (line 879):
        
        # Assigning a Call to a Subscript (line 879):
        
        # Call to copy(...): (line 879)
        # Processing the call keyword arguments (line 879)
        kwargs_175157 = {}
        
        # Obtaining the type of the subscript
        slice_175151 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 879, 25), None, None, None)
        # Getting the type of 'k' (line 879)
        k_175152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 29), 'k', False)
        # Getting the type of 'C' (line 879)
        C_175153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 25), 'C', False)
        # Obtaining the member '__getitem__' of a type (line 879)
        getitem___175154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 25), C_175153, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 879)
        subscript_call_result_175155 = invoke(stypy.reporting.localization.Localization(__file__, 879, 25), getitem___175154, (slice_175151, k_175152))
        
        # Obtaining the member 'copy' of a type (line 879)
        copy_175156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 25), subscript_call_result_175155, 'copy')
        # Calling copy(args, kwargs) (line 879)
        copy_call_result_175158 = invoke(stypy.reporting.localization.Localization(__file__, 879, 25), copy_175156, *[], **kwargs_175157)
        
        # Getting the type of 'self' (line 879)
        self_175159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 12), 'self')
        # Obtaining the member 'cs' of a type (line 879)
        cs_175160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 12), self_175159, 'cs')
        # Getting the type of 'k' (line 879)
        k_175161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 20), 'k')
        # Storing an element on a container (line 879)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 879, 12), cs_175160, (k_175161, copy_call_result_175158))
        
        # Assigning a Call to a Subscript (line 880):
        
        # Assigning a Call to a Subscript (line 880):
        
        # Call to copy(...): (line 880)
        # Processing the call keyword arguments (line 880)
        kwargs_175168 = {}
        
        # Obtaining the type of the subscript
        slice_175162 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 880, 25), None, None, None)
        # Getting the type of 'k' (line 880)
        k_175163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 29), 'k', False)
        # Getting the type of 'D' (line 880)
        D_175164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 25), 'D', False)
        # Obtaining the member '__getitem__' of a type (line 880)
        getitem___175165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 880, 25), D_175164, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 880)
        subscript_call_result_175166 = invoke(stypy.reporting.localization.Localization(__file__, 880, 25), getitem___175165, (slice_175162, k_175163))
        
        # Obtaining the member 'copy' of a type (line 880)
        copy_175167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 880, 25), subscript_call_result_175166, 'copy')
        # Calling copy(args, kwargs) (line 880)
        copy_call_result_175169 = invoke(stypy.reporting.localization.Localization(__file__, 880, 25), copy_175167, *[], **kwargs_175168)
        
        # Getting the type of 'self' (line 880)
        self_175170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 12), 'self')
        # Obtaining the member 'ds' of a type (line 880)
        ds_175171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 880, 12), self_175170, 'ds')
        # Getting the type of 'k' (line 880)
        k_175172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 20), 'k')
        # Storing an element on a container (line 880)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 880, 12), ds_175171, (k_175172, copy_call_result_175169))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Deleting a member
        # Getting the type of 'self' (line 882)
        self_175173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 12), 'self')
        # Obtaining the member 'cs' of a type (line 882)
        cs_175174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 12), self_175173, 'cs')
        
        # Obtaining the type of the subscript
        # Getting the type of 'q' (line 882)
        q_175175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 20), 'q')
        slice_175176 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 882, 12), q_175175, None, None)
        # Getting the type of 'self' (line 882)
        self_175177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 12), 'self')
        # Obtaining the member 'cs' of a type (line 882)
        cs_175178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 12), self_175177, 'cs')
        # Obtaining the member '__getitem__' of a type (line 882)
        getitem___175179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 12), cs_175178, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 882)
        subscript_call_result_175180 = invoke(stypy.reporting.localization.Localization(__file__, 882, 12), getitem___175179, slice_175176)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 882, 8), cs_175174, subscript_call_result_175180)
        # Deleting a member
        # Getting the type of 'self' (line 883)
        self_175181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 12), 'self')
        # Obtaining the member 'ds' of a type (line 883)
        ds_175182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 12), self_175181, 'ds')
        
        # Obtaining the type of the subscript
        # Getting the type of 'q' (line 883)
        q_175183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 20), 'q')
        slice_175184 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 883, 12), q_175183, None, None)
        # Getting the type of 'self' (line 883)
        self_175185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 12), 'self')
        # Obtaining the member 'ds' of a type (line 883)
        ds_175186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 12), self_175185, 'ds')
        # Obtaining the member '__getitem__' of a type (line 883)
        getitem___175187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 883, 12), ds_175186, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 883)
        subscript_call_result_175188 = invoke(stypy.reporting.localization.Localization(__file__, 883, 12), getitem___175187, slice_175184)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 883, 8), ds_175182, subscript_call_result_175188)
        
        # ################# End of 'svd_reduce(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'svd_reduce' in the type store
        # Getting the type of 'stypy_return_type' (line 820)
        stypy_return_type_175189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175189)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'svd_reduce'
        return stypy_return_type_175189


# Assigning a type to the variable 'LowRankMatrix' (line 690)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 690, 0), 'LowRankMatrix', LowRankMatrix)

# Assigning a Call to a Subscript (line 885):

# Assigning a Call to a Subscript (line 885):

# Call to strip(...): (line 906)
# Processing the call keyword arguments (line 906)
kwargs_175192 = {}
str_175190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 906, (-1)), 'str', '\n    alpha : float, optional\n        Initial guess for the Jacobian is ``(-1/alpha)``.\n    reduction_method : str or tuple, optional\n        Method used in ensuring that the rank of the Broyden matrix\n        stays low. Can either be a string giving the name of the method,\n        or a tuple of the form ``(method, param1, param2, ...)``\n        that gives the name of the method and values for additional parameters.\n\n        Methods available:\n\n            - ``restart``: drop all matrix columns. Has no extra parameters.\n            - ``simple``: drop oldest matrix column. Has no extra parameters.\n            - ``svd``: keep only the most significant SVD components.\n              Takes an extra parameter, ``to_retain``, which determines the\n              number of SVD components to retain when rank reduction is done.\n              Default is ``max_rank - 2``.\n\n    max_rank : int, optional\n        Maximum rank for the Broyden matrix.\n        Default is infinity (ie., no rank reduction).\n    ')
# Obtaining the member 'strip' of a type (line 906)
strip_175191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 906, (-1)), str_175190, 'strip')
# Calling strip(args, kwargs) (line 906)
strip_call_result_175193 = invoke(stypy.reporting.localization.Localization(__file__, 906, (-1)), strip_175191, *[], **kwargs_175192)

# Getting the type of '_doc_parts' (line 885)
_doc_parts_175194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 0), '_doc_parts')
str_175195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 885, 11), 'str', 'broyden_params')
# Storing an element on a container (line 885)
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 885, 0), _doc_parts_175194, (str_175195, strip_call_result_175193))
# Declaration of the 'BroydenFirst' class
# Getting the type of 'GenericBroyden' (line 909)
GenericBroyden_175196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 19), 'GenericBroyden')

class BroydenFirst(GenericBroyden_175196, ):
    str_175197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, (-1)), 'str', '\n    Find a root of a function, using Broyden\'s first Jacobian approximation.\n\n    This method is also known as \\"Broyden\'s good method\\".\n\n    Parameters\n    ----------\n    %(params_basic)s\n    %(broyden_params)s\n    %(params_extra)s\n\n    Notes\n    -----\n    This algorithm implements the inverse Jacobian Quasi-Newton update\n\n    .. math:: H_+ = H + (dx - H df) dx^\\dagger H / ( dx^\\dagger H df)\n\n    which corresponds to Broyden\'s first Jacobian update\n\n    .. math:: J_+ = J + (df - J dx) dx^\\dagger / dx^\\dagger dx\n\n\n    References\n    ----------\n    .. [1] B.A. van der Rotten, PhD thesis,\n       \\"A limited memory Broyden method to solve high-dimensional\n       systems of nonlinear equations\\". Mathematisch Instituut,\n       Universiteit Leiden, The Netherlands (2003).\n\n       http://www.math.leidenuniv.nl/scripties/Rotten.pdf\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 943)
        None_175198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 29), 'None')
        str_175199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 943, 52), 'str', 'restart')
        # Getting the type of 'None' (line 943)
        None_175200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 72), 'None')
        defaults = [None_175198, str_175199, None_175200]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 943, 4, False)
        # Assigning a type to the variable 'self' (line 944)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 944, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BroydenFirst.__init__', ['alpha', 'reduction_method', 'max_rank'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['alpha', 'reduction_method', 'max_rank'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 944)
        # Processing the call arguments (line 944)
        # Getting the type of 'self' (line 944)
        self_175203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 32), 'self', False)
        # Processing the call keyword arguments (line 944)
        kwargs_175204 = {}
        # Getting the type of 'GenericBroyden' (line 944)
        GenericBroyden_175201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 8), 'GenericBroyden', False)
        # Obtaining the member '__init__' of a type (line 944)
        init___175202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 944, 8), GenericBroyden_175201, '__init__')
        # Calling __init__(args, kwargs) (line 944)
        init___call_result_175205 = invoke(stypy.reporting.localization.Localization(__file__, 944, 8), init___175202, *[self_175203], **kwargs_175204)
        
        
        # Assigning a Name to a Attribute (line 945):
        
        # Assigning a Name to a Attribute (line 945):
        # Getting the type of 'alpha' (line 945)
        alpha_175206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 21), 'alpha')
        # Getting the type of 'self' (line 945)
        self_175207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 8), 'self')
        # Setting the type of the member 'alpha' of a type (line 945)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 945, 8), self_175207, 'alpha', alpha_175206)
        
        # Assigning a Name to a Attribute (line 946):
        
        # Assigning a Name to a Attribute (line 946):
        # Getting the type of 'None' (line 946)
        None_175208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 18), 'None')
        # Getting the type of 'self' (line 946)
        self_175209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 8), 'self')
        # Setting the type of the member 'Gm' of a type (line 946)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 946, 8), self_175209, 'Gm', None_175208)
        
        # Type idiom detected: calculating its left and rigth part (line 948)
        # Getting the type of 'max_rank' (line 948)
        max_rank_175210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 11), 'max_rank')
        # Getting the type of 'None' (line 948)
        None_175211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 23), 'None')
        
        (may_be_175212, more_types_in_union_175213) = may_be_none(max_rank_175210, None_175211)

        if may_be_175212:

            if more_types_in_union_175213:
                # Runtime conditional SSA (line 948)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 949):
            
            # Assigning a Attribute to a Name (line 949):
            # Getting the type of 'np' (line 949)
            np_175214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 23), 'np')
            # Obtaining the member 'inf' of a type (line 949)
            inf_175215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 23), np_175214, 'inf')
            # Assigning a type to the variable 'max_rank' (line 949)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 949, 12), 'max_rank', inf_175215)

            if more_types_in_union_175213:
                # SSA join for if statement (line 948)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 950):
        
        # Assigning a Name to a Attribute (line 950):
        # Getting the type of 'max_rank' (line 950)
        max_rank_175216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 24), 'max_rank')
        # Getting the type of 'self' (line 950)
        self_175217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 8), 'self')
        # Setting the type of the member 'max_rank' of a type (line 950)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 8), self_175217, 'max_rank', max_rank_175216)
        
        # Type idiom detected: calculating its left and rigth part (line 952)
        # Getting the type of 'str' (line 952)
        str_175218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 40), 'str')
        # Getting the type of 'reduction_method' (line 952)
        reduction_method_175219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 22), 'reduction_method')
        
        (may_be_175220, more_types_in_union_175221) = may_be_subtype(str_175218, reduction_method_175219)

        if may_be_175220:

            if more_types_in_union_175221:
                # Runtime conditional SSA (line 952)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'reduction_method' (line 952)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 8), 'reduction_method', remove_not_subtype_from_union(reduction_method_175219, str))
            
            # Assigning a Tuple to a Name (line 953):
            
            # Assigning a Tuple to a Name (line 953):
            
            # Obtaining an instance of the builtin type 'tuple' (line 953)
            tuple_175222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 953, 28), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 953)
            
            # Assigning a type to the variable 'reduce_params' (line 953)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 953, 12), 'reduce_params', tuple_175222)

            if more_types_in_union_175221:
                # Runtime conditional SSA for else branch (line 952)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_175220) or more_types_in_union_175221):
            # Assigning a type to the variable 'reduction_method' (line 952)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 8), 'reduction_method', remove_subtype_from_union(reduction_method_175219, str))
            
            # Assigning a Subscript to a Name (line 955):
            
            # Assigning a Subscript to a Name (line 955):
            
            # Obtaining the type of the subscript
            int_175223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 955, 45), 'int')
            slice_175224 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 955, 28), int_175223, None, None)
            # Getting the type of 'reduction_method' (line 955)
            reduction_method_175225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 28), 'reduction_method')
            # Obtaining the member '__getitem__' of a type (line 955)
            getitem___175226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 955, 28), reduction_method_175225, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 955)
            subscript_call_result_175227 = invoke(stypy.reporting.localization.Localization(__file__, 955, 28), getitem___175226, slice_175224)
            
            # Assigning a type to the variable 'reduce_params' (line 955)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 955, 12), 'reduce_params', subscript_call_result_175227)
            
            # Assigning a Subscript to a Name (line 956):
            
            # Assigning a Subscript to a Name (line 956):
            
            # Obtaining the type of the subscript
            int_175228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 956, 48), 'int')
            # Getting the type of 'reduction_method' (line 956)
            reduction_method_175229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 31), 'reduction_method')
            # Obtaining the member '__getitem__' of a type (line 956)
            getitem___175230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 956, 31), reduction_method_175229, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 956)
            subscript_call_result_175231 = invoke(stypy.reporting.localization.Localization(__file__, 956, 31), getitem___175230, int_175228)
            
            # Assigning a type to the variable 'reduction_method' (line 956)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 956, 12), 'reduction_method', subscript_call_result_175231)

            if (may_be_175220 and more_types_in_union_175221):
                # SSA join for if statement (line 952)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a BinOp to a Name (line 957):
        
        # Assigning a BinOp to a Name (line 957):
        
        # Obtaining an instance of the builtin type 'tuple' (line 957)
        tuple_175232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 957)
        # Adding element type (line 957)
        # Getting the type of 'max_rank' (line 957)
        max_rank_175233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 25), 'max_rank')
        int_175234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 36), 'int')
        # Applying the binary operator '-' (line 957)
        result_sub_175235 = python_operator(stypy.reporting.localization.Localization(__file__, 957, 25), '-', max_rank_175233, int_175234)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 957, 25), tuple_175232, result_sub_175235)
        
        # Getting the type of 'reduce_params' (line 957)
        reduce_params_175236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 42), 'reduce_params')
        # Applying the binary operator '+' (line 957)
        result_add_175237 = python_operator(stypy.reporting.localization.Localization(__file__, 957, 24), '+', tuple_175232, reduce_params_175236)
        
        # Assigning a type to the variable 'reduce_params' (line 957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 8), 'reduce_params', result_add_175237)
        
        
        # Getting the type of 'reduction_method' (line 959)
        reduction_method_175238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 11), 'reduction_method')
        str_175239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 959, 31), 'str', 'svd')
        # Applying the binary operator '==' (line 959)
        result_eq_175240 = python_operator(stypy.reporting.localization.Localization(__file__, 959, 11), '==', reduction_method_175238, str_175239)
        
        # Testing the type of an if condition (line 959)
        if_condition_175241 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 959, 8), result_eq_175240)
        # Assigning a type to the variable 'if_condition_175241' (line 959)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 959, 8), 'if_condition_175241', if_condition_175241)
        # SSA begins for if statement (line 959)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Lambda to a Attribute (line 960):
        
        # Assigning a Lambda to a Attribute (line 960):

        @norecursion
        def _stypy_temp_lambda_59(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_59'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_59', 960, 27, True)
            # Passed parameters checking function
            _stypy_temp_lambda_59.stypy_localization = localization
            _stypy_temp_lambda_59.stypy_type_of_self = None
            _stypy_temp_lambda_59.stypy_type_store = module_type_store
            _stypy_temp_lambda_59.stypy_function_name = '_stypy_temp_lambda_59'
            _stypy_temp_lambda_59.stypy_param_names_list = []
            _stypy_temp_lambda_59.stypy_varargs_param_name = None
            _stypy_temp_lambda_59.stypy_kwargs_param_name = None
            _stypy_temp_lambda_59.stypy_call_defaults = defaults
            _stypy_temp_lambda_59.stypy_call_varargs = varargs
            _stypy_temp_lambda_59.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_59', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_59', [], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to svd_reduce(...): (line 960)
            # Getting the type of 'reduce_params' (line 960)
            reduce_params_175245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 55), 'reduce_params', False)
            # Processing the call keyword arguments (line 960)
            kwargs_175246 = {}
            # Getting the type of 'self' (line 960)
            self_175242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 35), 'self', False)
            # Obtaining the member 'Gm' of a type (line 960)
            Gm_175243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 35), self_175242, 'Gm')
            # Obtaining the member 'svd_reduce' of a type (line 960)
            svd_reduce_175244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 35), Gm_175243, 'svd_reduce')
            # Calling svd_reduce(args, kwargs) (line 960)
            svd_reduce_call_result_175247 = invoke(stypy.reporting.localization.Localization(__file__, 960, 35), svd_reduce_175244, *[reduce_params_175245], **kwargs_175246)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 960)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 960, 27), 'stypy_return_type', svd_reduce_call_result_175247)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_59' in the type store
            # Getting the type of 'stypy_return_type' (line 960)
            stypy_return_type_175248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 27), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_175248)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_59'
            return stypy_return_type_175248

        # Assigning a type to the variable '_stypy_temp_lambda_59' (line 960)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 960, 27), '_stypy_temp_lambda_59', _stypy_temp_lambda_59)
        # Getting the type of '_stypy_temp_lambda_59' (line 960)
        _stypy_temp_lambda_59_175249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 27), '_stypy_temp_lambda_59')
        # Getting the type of 'self' (line 960)
        self_175250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 12), 'self')
        # Setting the type of the member '_reduce' of a type (line 960)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 12), self_175250, '_reduce', _stypy_temp_lambda_59_175249)
        # SSA branch for the else part of an if statement (line 959)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'reduction_method' (line 961)
        reduction_method_175251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 13), 'reduction_method')
        str_175252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 961, 33), 'str', 'simple')
        # Applying the binary operator '==' (line 961)
        result_eq_175253 = python_operator(stypy.reporting.localization.Localization(__file__, 961, 13), '==', reduction_method_175251, str_175252)
        
        # Testing the type of an if condition (line 961)
        if_condition_175254 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 961, 13), result_eq_175253)
        # Assigning a type to the variable 'if_condition_175254' (line 961)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 961, 13), 'if_condition_175254', if_condition_175254)
        # SSA begins for if statement (line 961)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Lambda to a Attribute (line 962):
        
        # Assigning a Lambda to a Attribute (line 962):

        @norecursion
        def _stypy_temp_lambda_60(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_60'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_60', 962, 27, True)
            # Passed parameters checking function
            _stypy_temp_lambda_60.stypy_localization = localization
            _stypy_temp_lambda_60.stypy_type_of_self = None
            _stypy_temp_lambda_60.stypy_type_store = module_type_store
            _stypy_temp_lambda_60.stypy_function_name = '_stypy_temp_lambda_60'
            _stypy_temp_lambda_60.stypy_param_names_list = []
            _stypy_temp_lambda_60.stypy_varargs_param_name = None
            _stypy_temp_lambda_60.stypy_kwargs_param_name = None
            _stypy_temp_lambda_60.stypy_call_defaults = defaults
            _stypy_temp_lambda_60.stypy_call_varargs = varargs
            _stypy_temp_lambda_60.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_60', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_60', [], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to simple_reduce(...): (line 962)
            # Getting the type of 'reduce_params' (line 962)
            reduce_params_175258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 58), 'reduce_params', False)
            # Processing the call keyword arguments (line 962)
            kwargs_175259 = {}
            # Getting the type of 'self' (line 962)
            self_175255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 35), 'self', False)
            # Obtaining the member 'Gm' of a type (line 962)
            Gm_175256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 35), self_175255, 'Gm')
            # Obtaining the member 'simple_reduce' of a type (line 962)
            simple_reduce_175257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 35), Gm_175256, 'simple_reduce')
            # Calling simple_reduce(args, kwargs) (line 962)
            simple_reduce_call_result_175260 = invoke(stypy.reporting.localization.Localization(__file__, 962, 35), simple_reduce_175257, *[reduce_params_175258], **kwargs_175259)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 962)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 27), 'stypy_return_type', simple_reduce_call_result_175260)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_60' in the type store
            # Getting the type of 'stypy_return_type' (line 962)
            stypy_return_type_175261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 27), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_175261)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_60'
            return stypy_return_type_175261

        # Assigning a type to the variable '_stypy_temp_lambda_60' (line 962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 27), '_stypy_temp_lambda_60', _stypy_temp_lambda_60)
        # Getting the type of '_stypy_temp_lambda_60' (line 962)
        _stypy_temp_lambda_60_175262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 27), '_stypy_temp_lambda_60')
        # Getting the type of 'self' (line 962)
        self_175263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'self')
        # Setting the type of the member '_reduce' of a type (line 962)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 12), self_175263, '_reduce', _stypy_temp_lambda_60_175262)
        # SSA branch for the else part of an if statement (line 961)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'reduction_method' (line 963)
        reduction_method_175264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 13), 'reduction_method')
        str_175265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 963, 33), 'str', 'restart')
        # Applying the binary operator '==' (line 963)
        result_eq_175266 = python_operator(stypy.reporting.localization.Localization(__file__, 963, 13), '==', reduction_method_175264, str_175265)
        
        # Testing the type of an if condition (line 963)
        if_condition_175267 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 963, 13), result_eq_175266)
        # Assigning a type to the variable 'if_condition_175267' (line 963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 963, 13), 'if_condition_175267', if_condition_175267)
        # SSA begins for if statement (line 963)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Lambda to a Attribute (line 964):
        
        # Assigning a Lambda to a Attribute (line 964):

        @norecursion
        def _stypy_temp_lambda_61(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_61'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_61', 964, 27, True)
            # Passed parameters checking function
            _stypy_temp_lambda_61.stypy_localization = localization
            _stypy_temp_lambda_61.stypy_type_of_self = None
            _stypy_temp_lambda_61.stypy_type_store = module_type_store
            _stypy_temp_lambda_61.stypy_function_name = '_stypy_temp_lambda_61'
            _stypy_temp_lambda_61.stypy_param_names_list = []
            _stypy_temp_lambda_61.stypy_varargs_param_name = None
            _stypy_temp_lambda_61.stypy_kwargs_param_name = None
            _stypy_temp_lambda_61.stypy_call_defaults = defaults
            _stypy_temp_lambda_61.stypy_call_varargs = varargs
            _stypy_temp_lambda_61.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_61', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_61', [], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to restart_reduce(...): (line 964)
            # Getting the type of 'reduce_params' (line 964)
            reduce_params_175271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 59), 'reduce_params', False)
            # Processing the call keyword arguments (line 964)
            kwargs_175272 = {}
            # Getting the type of 'self' (line 964)
            self_175268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 35), 'self', False)
            # Obtaining the member 'Gm' of a type (line 964)
            Gm_175269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 964, 35), self_175268, 'Gm')
            # Obtaining the member 'restart_reduce' of a type (line 964)
            restart_reduce_175270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 964, 35), Gm_175269, 'restart_reduce')
            # Calling restart_reduce(args, kwargs) (line 964)
            restart_reduce_call_result_175273 = invoke(stypy.reporting.localization.Localization(__file__, 964, 35), restart_reduce_175270, *[reduce_params_175271], **kwargs_175272)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 964)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 964, 27), 'stypy_return_type', restart_reduce_call_result_175273)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_61' in the type store
            # Getting the type of 'stypy_return_type' (line 964)
            stypy_return_type_175274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 27), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_175274)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_61'
            return stypy_return_type_175274

        # Assigning a type to the variable '_stypy_temp_lambda_61' (line 964)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 964, 27), '_stypy_temp_lambda_61', _stypy_temp_lambda_61)
        # Getting the type of '_stypy_temp_lambda_61' (line 964)
        _stypy_temp_lambda_61_175275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 27), '_stypy_temp_lambda_61')
        # Getting the type of 'self' (line 964)
        self_175276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 12), 'self')
        # Setting the type of the member '_reduce' of a type (line 964)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 964, 12), self_175276, '_reduce', _stypy_temp_lambda_61_175275)
        # SSA branch for the else part of an if statement (line 963)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 966)
        # Processing the call arguments (line 966)
        str_175278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 966, 29), 'str', "Unknown rank reduction method '%s'")
        # Getting the type of 'reduction_method' (line 967)
        reduction_method_175279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 29), 'reduction_method', False)
        # Applying the binary operator '%' (line 966)
        result_mod_175280 = python_operator(stypy.reporting.localization.Localization(__file__, 966, 29), '%', str_175278, reduction_method_175279)
        
        # Processing the call keyword arguments (line 966)
        kwargs_175281 = {}
        # Getting the type of 'ValueError' (line 966)
        ValueError_175277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 966)
        ValueError_call_result_175282 = invoke(stypy.reporting.localization.Localization(__file__, 966, 18), ValueError_175277, *[result_mod_175280], **kwargs_175281)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 966, 12), ValueError_call_result_175282, 'raise parameter', BaseException)
        # SSA join for if statement (line 963)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 961)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 959)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def setup(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'setup'
        module_type_store = module_type_store.open_function_context('setup', 969, 4, False)
        # Assigning a type to the variable 'self' (line 970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BroydenFirst.setup.__dict__.__setitem__('stypy_localization', localization)
        BroydenFirst.setup.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BroydenFirst.setup.__dict__.__setitem__('stypy_type_store', module_type_store)
        BroydenFirst.setup.__dict__.__setitem__('stypy_function_name', 'BroydenFirst.setup')
        BroydenFirst.setup.__dict__.__setitem__('stypy_param_names_list', ['x', 'F', 'func'])
        BroydenFirst.setup.__dict__.__setitem__('stypy_varargs_param_name', None)
        BroydenFirst.setup.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BroydenFirst.setup.__dict__.__setitem__('stypy_call_defaults', defaults)
        BroydenFirst.setup.__dict__.__setitem__('stypy_call_varargs', varargs)
        BroydenFirst.setup.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BroydenFirst.setup.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BroydenFirst.setup', ['x', 'F', 'func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'setup', localization, ['x', 'F', 'func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'setup(...)' code ##################

        
        # Call to setup(...): (line 970)
        # Processing the call arguments (line 970)
        # Getting the type of 'self' (line 970)
        self_175285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 29), 'self', False)
        # Getting the type of 'x' (line 970)
        x_175286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 35), 'x', False)
        # Getting the type of 'F' (line 970)
        F_175287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 38), 'F', False)
        # Getting the type of 'func' (line 970)
        func_175288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 41), 'func', False)
        # Processing the call keyword arguments (line 970)
        kwargs_175289 = {}
        # Getting the type of 'GenericBroyden' (line 970)
        GenericBroyden_175283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 8), 'GenericBroyden', False)
        # Obtaining the member 'setup' of a type (line 970)
        setup_175284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 970, 8), GenericBroyden_175283, 'setup')
        # Calling setup(args, kwargs) (line 970)
        setup_call_result_175290 = invoke(stypy.reporting.localization.Localization(__file__, 970, 8), setup_175284, *[self_175285, x_175286, F_175287, func_175288], **kwargs_175289)
        
        
        # Assigning a Call to a Attribute (line 971):
        
        # Assigning a Call to a Attribute (line 971):
        
        # Call to LowRankMatrix(...): (line 971)
        # Processing the call arguments (line 971)
        
        # Getting the type of 'self' (line 971)
        self_175292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 33), 'self', False)
        # Obtaining the member 'alpha' of a type (line 971)
        alpha_175293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 33), self_175292, 'alpha')
        # Applying the 'usub' unary operator (line 971)
        result___neg___175294 = python_operator(stypy.reporting.localization.Localization(__file__, 971, 32), 'usub', alpha_175293)
        
        
        # Obtaining the type of the subscript
        int_175295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 971, 56), 'int')
        # Getting the type of 'self' (line 971)
        self_175296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 45), 'self', False)
        # Obtaining the member 'shape' of a type (line 971)
        shape_175297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 45), self_175296, 'shape')
        # Obtaining the member '__getitem__' of a type (line 971)
        getitem___175298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 45), shape_175297, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 971)
        subscript_call_result_175299 = invoke(stypy.reporting.localization.Localization(__file__, 971, 45), getitem___175298, int_175295)
        
        # Getting the type of 'self' (line 971)
        self_175300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 60), 'self', False)
        # Obtaining the member 'dtype' of a type (line 971)
        dtype_175301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 60), self_175300, 'dtype')
        # Processing the call keyword arguments (line 971)
        kwargs_175302 = {}
        # Getting the type of 'LowRankMatrix' (line 971)
        LowRankMatrix_175291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 18), 'LowRankMatrix', False)
        # Calling LowRankMatrix(args, kwargs) (line 971)
        LowRankMatrix_call_result_175303 = invoke(stypy.reporting.localization.Localization(__file__, 971, 18), LowRankMatrix_175291, *[result___neg___175294, subscript_call_result_175299, dtype_175301], **kwargs_175302)
        
        # Getting the type of 'self' (line 971)
        self_175304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'self')
        # Setting the type of the member 'Gm' of a type (line 971)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 8), self_175304, 'Gm', LowRankMatrix_call_result_175303)
        
        # ################# End of 'setup(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'setup' in the type store
        # Getting the type of 'stypy_return_type' (line 969)
        stypy_return_type_175305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175305)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'setup'
        return stypy_return_type_175305


    @norecursion
    def todense(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'todense'
        module_type_store = module_type_store.open_function_context('todense', 973, 4, False)
        # Assigning a type to the variable 'self' (line 974)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 974, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BroydenFirst.todense.__dict__.__setitem__('stypy_localization', localization)
        BroydenFirst.todense.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BroydenFirst.todense.__dict__.__setitem__('stypy_type_store', module_type_store)
        BroydenFirst.todense.__dict__.__setitem__('stypy_function_name', 'BroydenFirst.todense')
        BroydenFirst.todense.__dict__.__setitem__('stypy_param_names_list', [])
        BroydenFirst.todense.__dict__.__setitem__('stypy_varargs_param_name', None)
        BroydenFirst.todense.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BroydenFirst.todense.__dict__.__setitem__('stypy_call_defaults', defaults)
        BroydenFirst.todense.__dict__.__setitem__('stypy_call_varargs', varargs)
        BroydenFirst.todense.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BroydenFirst.todense.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BroydenFirst.todense', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'todense', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'todense(...)' code ##################

        
        # Call to inv(...): (line 974)
        # Processing the call arguments (line 974)
        # Getting the type of 'self' (line 974)
        self_175307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 19), 'self', False)
        # Obtaining the member 'Gm' of a type (line 974)
        Gm_175308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 974, 19), self_175307, 'Gm')
        # Processing the call keyword arguments (line 974)
        kwargs_175309 = {}
        # Getting the type of 'inv' (line 974)
        inv_175306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 15), 'inv', False)
        # Calling inv(args, kwargs) (line 974)
        inv_call_result_175310 = invoke(stypy.reporting.localization.Localization(__file__, 974, 15), inv_175306, *[Gm_175308], **kwargs_175309)
        
        # Assigning a type to the variable 'stypy_return_type' (line 974)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 974, 8), 'stypy_return_type', inv_call_result_175310)
        
        # ################# End of 'todense(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'todense' in the type store
        # Getting the type of 'stypy_return_type' (line 973)
        stypy_return_type_175311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175311)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'todense'
        return stypy_return_type_175311


    @norecursion
    def solve(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_175312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 976, 27), 'int')
        defaults = [int_175312]
        # Create a new context for function 'solve'
        module_type_store = module_type_store.open_function_context('solve', 976, 4, False)
        # Assigning a type to the variable 'self' (line 977)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 977, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BroydenFirst.solve.__dict__.__setitem__('stypy_localization', localization)
        BroydenFirst.solve.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BroydenFirst.solve.__dict__.__setitem__('stypy_type_store', module_type_store)
        BroydenFirst.solve.__dict__.__setitem__('stypy_function_name', 'BroydenFirst.solve')
        BroydenFirst.solve.__dict__.__setitem__('stypy_param_names_list', ['f', 'tol'])
        BroydenFirst.solve.__dict__.__setitem__('stypy_varargs_param_name', None)
        BroydenFirst.solve.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BroydenFirst.solve.__dict__.__setitem__('stypy_call_defaults', defaults)
        BroydenFirst.solve.__dict__.__setitem__('stypy_call_varargs', varargs)
        BroydenFirst.solve.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BroydenFirst.solve.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BroydenFirst.solve', ['f', 'tol'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'solve', localization, ['f', 'tol'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'solve(...)' code ##################

        
        # Assigning a Call to a Name (line 977):
        
        # Assigning a Call to a Name (line 977):
        
        # Call to matvec(...): (line 977)
        # Processing the call arguments (line 977)
        # Getting the type of 'f' (line 977)
        f_175316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 27), 'f', False)
        # Processing the call keyword arguments (line 977)
        kwargs_175317 = {}
        # Getting the type of 'self' (line 977)
        self_175313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 12), 'self', False)
        # Obtaining the member 'Gm' of a type (line 977)
        Gm_175314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 977, 12), self_175313, 'Gm')
        # Obtaining the member 'matvec' of a type (line 977)
        matvec_175315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 977, 12), Gm_175314, 'matvec')
        # Calling matvec(args, kwargs) (line 977)
        matvec_call_result_175318 = invoke(stypy.reporting.localization.Localization(__file__, 977, 12), matvec_175315, *[f_175316], **kwargs_175317)
        
        # Assigning a type to the variable 'r' (line 977)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 977, 8), 'r', matvec_call_result_175318)
        
        
        
        # Call to all(...): (line 978)
        # Processing the call keyword arguments (line 978)
        kwargs_175325 = {}
        
        # Call to isfinite(...): (line 978)
        # Processing the call arguments (line 978)
        # Getting the type of 'r' (line 978)
        r_175321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 27), 'r', False)
        # Processing the call keyword arguments (line 978)
        kwargs_175322 = {}
        # Getting the type of 'np' (line 978)
        np_175319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 15), 'np', False)
        # Obtaining the member 'isfinite' of a type (line 978)
        isfinite_175320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 978, 15), np_175319, 'isfinite')
        # Calling isfinite(args, kwargs) (line 978)
        isfinite_call_result_175323 = invoke(stypy.reporting.localization.Localization(__file__, 978, 15), isfinite_175320, *[r_175321], **kwargs_175322)
        
        # Obtaining the member 'all' of a type (line 978)
        all_175324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 978, 15), isfinite_call_result_175323, 'all')
        # Calling all(args, kwargs) (line 978)
        all_call_result_175326 = invoke(stypy.reporting.localization.Localization(__file__, 978, 15), all_175324, *[], **kwargs_175325)
        
        # Applying the 'not' unary operator (line 978)
        result_not__175327 = python_operator(stypy.reporting.localization.Localization(__file__, 978, 11), 'not', all_call_result_175326)
        
        # Testing the type of an if condition (line 978)
        if_condition_175328 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 978, 8), result_not__175327)
        # Assigning a type to the variable 'if_condition_175328' (line 978)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 978, 8), 'if_condition_175328', if_condition_175328)
        # SSA begins for if statement (line 978)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to setup(...): (line 980)
        # Processing the call arguments (line 980)
        # Getting the type of 'self' (line 980)
        self_175331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 23), 'self', False)
        # Obtaining the member 'last_x' of a type (line 980)
        last_x_175332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 980, 23), self_175331, 'last_x')
        # Getting the type of 'self' (line 980)
        self_175333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 36), 'self', False)
        # Obtaining the member 'last_f' of a type (line 980)
        last_f_175334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 980, 36), self_175333, 'last_f')
        # Getting the type of 'self' (line 980)
        self_175335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 49), 'self', False)
        # Obtaining the member 'func' of a type (line 980)
        func_175336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 980, 49), self_175335, 'func')
        # Processing the call keyword arguments (line 980)
        kwargs_175337 = {}
        # Getting the type of 'self' (line 980)
        self_175329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 12), 'self', False)
        # Obtaining the member 'setup' of a type (line 980)
        setup_175330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 980, 12), self_175329, 'setup')
        # Calling setup(args, kwargs) (line 980)
        setup_call_result_175338 = invoke(stypy.reporting.localization.Localization(__file__, 980, 12), setup_175330, *[last_x_175332, last_f_175334, func_175336], **kwargs_175337)
        
        # SSA join for if statement (line 978)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to matvec(...): (line 981)
        # Processing the call arguments (line 981)
        # Getting the type of 'f' (line 981)
        f_175342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 30), 'f', False)
        # Processing the call keyword arguments (line 981)
        kwargs_175343 = {}
        # Getting the type of 'self' (line 981)
        self_175339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 15), 'self', False)
        # Obtaining the member 'Gm' of a type (line 981)
        Gm_175340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 981, 15), self_175339, 'Gm')
        # Obtaining the member 'matvec' of a type (line 981)
        matvec_175341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 981, 15), Gm_175340, 'matvec')
        # Calling matvec(args, kwargs) (line 981)
        matvec_call_result_175344 = invoke(stypy.reporting.localization.Localization(__file__, 981, 15), matvec_175341, *[f_175342], **kwargs_175343)
        
        # Assigning a type to the variable 'stypy_return_type' (line 981)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 981, 8), 'stypy_return_type', matvec_call_result_175344)
        
        # ################# End of 'solve(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'solve' in the type store
        # Getting the type of 'stypy_return_type' (line 976)
        stypy_return_type_175345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175345)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'solve'
        return stypy_return_type_175345


    @norecursion
    def matvec(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'matvec'
        module_type_store = module_type_store.open_function_context('matvec', 983, 4, False)
        # Assigning a type to the variable 'self' (line 984)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 984, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BroydenFirst.matvec.__dict__.__setitem__('stypy_localization', localization)
        BroydenFirst.matvec.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BroydenFirst.matvec.__dict__.__setitem__('stypy_type_store', module_type_store)
        BroydenFirst.matvec.__dict__.__setitem__('stypy_function_name', 'BroydenFirst.matvec')
        BroydenFirst.matvec.__dict__.__setitem__('stypy_param_names_list', ['f'])
        BroydenFirst.matvec.__dict__.__setitem__('stypy_varargs_param_name', None)
        BroydenFirst.matvec.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BroydenFirst.matvec.__dict__.__setitem__('stypy_call_defaults', defaults)
        BroydenFirst.matvec.__dict__.__setitem__('stypy_call_varargs', varargs)
        BroydenFirst.matvec.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BroydenFirst.matvec.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BroydenFirst.matvec', ['f'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'matvec', localization, ['f'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'matvec(...)' code ##################

        
        # Call to solve(...): (line 984)
        # Processing the call arguments (line 984)
        # Getting the type of 'f' (line 984)
        f_175349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 29), 'f', False)
        # Processing the call keyword arguments (line 984)
        kwargs_175350 = {}
        # Getting the type of 'self' (line 984)
        self_175346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 15), 'self', False)
        # Obtaining the member 'Gm' of a type (line 984)
        Gm_175347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 984, 15), self_175346, 'Gm')
        # Obtaining the member 'solve' of a type (line 984)
        solve_175348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 984, 15), Gm_175347, 'solve')
        # Calling solve(args, kwargs) (line 984)
        solve_call_result_175351 = invoke(stypy.reporting.localization.Localization(__file__, 984, 15), solve_175348, *[f_175349], **kwargs_175350)
        
        # Assigning a type to the variable 'stypy_return_type' (line 984)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 984, 8), 'stypy_return_type', solve_call_result_175351)
        
        # ################# End of 'matvec(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'matvec' in the type store
        # Getting the type of 'stypy_return_type' (line 983)
        stypy_return_type_175352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175352)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'matvec'
        return stypy_return_type_175352


    @norecursion
    def rsolve(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_175353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 986, 28), 'int')
        defaults = [int_175353]
        # Create a new context for function 'rsolve'
        module_type_store = module_type_store.open_function_context('rsolve', 986, 4, False)
        # Assigning a type to the variable 'self' (line 987)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 987, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BroydenFirst.rsolve.__dict__.__setitem__('stypy_localization', localization)
        BroydenFirst.rsolve.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BroydenFirst.rsolve.__dict__.__setitem__('stypy_type_store', module_type_store)
        BroydenFirst.rsolve.__dict__.__setitem__('stypy_function_name', 'BroydenFirst.rsolve')
        BroydenFirst.rsolve.__dict__.__setitem__('stypy_param_names_list', ['f', 'tol'])
        BroydenFirst.rsolve.__dict__.__setitem__('stypy_varargs_param_name', None)
        BroydenFirst.rsolve.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BroydenFirst.rsolve.__dict__.__setitem__('stypy_call_defaults', defaults)
        BroydenFirst.rsolve.__dict__.__setitem__('stypy_call_varargs', varargs)
        BroydenFirst.rsolve.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BroydenFirst.rsolve.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BroydenFirst.rsolve', ['f', 'tol'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rsolve', localization, ['f', 'tol'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rsolve(...)' code ##################

        
        # Call to rmatvec(...): (line 987)
        # Processing the call arguments (line 987)
        # Getting the type of 'f' (line 987)
        f_175357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 31), 'f', False)
        # Processing the call keyword arguments (line 987)
        kwargs_175358 = {}
        # Getting the type of 'self' (line 987)
        self_175354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 15), 'self', False)
        # Obtaining the member 'Gm' of a type (line 987)
        Gm_175355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 987, 15), self_175354, 'Gm')
        # Obtaining the member 'rmatvec' of a type (line 987)
        rmatvec_175356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 987, 15), Gm_175355, 'rmatvec')
        # Calling rmatvec(args, kwargs) (line 987)
        rmatvec_call_result_175359 = invoke(stypy.reporting.localization.Localization(__file__, 987, 15), rmatvec_175356, *[f_175357], **kwargs_175358)
        
        # Assigning a type to the variable 'stypy_return_type' (line 987)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 987, 8), 'stypy_return_type', rmatvec_call_result_175359)
        
        # ################# End of 'rsolve(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rsolve' in the type store
        # Getting the type of 'stypy_return_type' (line 986)
        stypy_return_type_175360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175360)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rsolve'
        return stypy_return_type_175360


    @norecursion
    def rmatvec(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'rmatvec'
        module_type_store = module_type_store.open_function_context('rmatvec', 989, 4, False)
        # Assigning a type to the variable 'self' (line 990)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 990, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BroydenFirst.rmatvec.__dict__.__setitem__('stypy_localization', localization)
        BroydenFirst.rmatvec.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BroydenFirst.rmatvec.__dict__.__setitem__('stypy_type_store', module_type_store)
        BroydenFirst.rmatvec.__dict__.__setitem__('stypy_function_name', 'BroydenFirst.rmatvec')
        BroydenFirst.rmatvec.__dict__.__setitem__('stypy_param_names_list', ['f'])
        BroydenFirst.rmatvec.__dict__.__setitem__('stypy_varargs_param_name', None)
        BroydenFirst.rmatvec.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BroydenFirst.rmatvec.__dict__.__setitem__('stypy_call_defaults', defaults)
        BroydenFirst.rmatvec.__dict__.__setitem__('stypy_call_varargs', varargs)
        BroydenFirst.rmatvec.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BroydenFirst.rmatvec.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BroydenFirst.rmatvec', ['f'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rmatvec', localization, ['f'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rmatvec(...)' code ##################

        
        # Call to rsolve(...): (line 990)
        # Processing the call arguments (line 990)
        # Getting the type of 'f' (line 990)
        f_175364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 30), 'f', False)
        # Processing the call keyword arguments (line 990)
        kwargs_175365 = {}
        # Getting the type of 'self' (line 990)
        self_175361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 15), 'self', False)
        # Obtaining the member 'Gm' of a type (line 990)
        Gm_175362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 990, 15), self_175361, 'Gm')
        # Obtaining the member 'rsolve' of a type (line 990)
        rsolve_175363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 990, 15), Gm_175362, 'rsolve')
        # Calling rsolve(args, kwargs) (line 990)
        rsolve_call_result_175366 = invoke(stypy.reporting.localization.Localization(__file__, 990, 15), rsolve_175363, *[f_175364], **kwargs_175365)
        
        # Assigning a type to the variable 'stypy_return_type' (line 990)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 990, 8), 'stypy_return_type', rsolve_call_result_175366)
        
        # ################# End of 'rmatvec(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rmatvec' in the type store
        # Getting the type of 'stypy_return_type' (line 989)
        stypy_return_type_175367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175367)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rmatvec'
        return stypy_return_type_175367


    @norecursion
    def _update(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update'
        module_type_store = module_type_store.open_function_context('_update', 992, 4, False)
        # Assigning a type to the variable 'self' (line 993)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 993, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BroydenFirst._update.__dict__.__setitem__('stypy_localization', localization)
        BroydenFirst._update.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BroydenFirst._update.__dict__.__setitem__('stypy_type_store', module_type_store)
        BroydenFirst._update.__dict__.__setitem__('stypy_function_name', 'BroydenFirst._update')
        BroydenFirst._update.__dict__.__setitem__('stypy_param_names_list', ['x', 'f', 'dx', 'df', 'dx_norm', 'df_norm'])
        BroydenFirst._update.__dict__.__setitem__('stypy_varargs_param_name', None)
        BroydenFirst._update.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BroydenFirst._update.__dict__.__setitem__('stypy_call_defaults', defaults)
        BroydenFirst._update.__dict__.__setitem__('stypy_call_varargs', varargs)
        BroydenFirst._update.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BroydenFirst._update.__dict__.__setitem__('stypy_declared_arg_number', 7)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BroydenFirst._update', ['x', 'f', 'dx', 'df', 'dx_norm', 'df_norm'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update', localization, ['x', 'f', 'dx', 'df', 'dx_norm', 'df_norm'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update(...)' code ##################

        
        # Call to _reduce(...): (line 993)
        # Processing the call keyword arguments (line 993)
        kwargs_175370 = {}
        # Getting the type of 'self' (line 993)
        self_175368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 8), 'self', False)
        # Obtaining the member '_reduce' of a type (line 993)
        _reduce_175369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 993, 8), self_175368, '_reduce')
        # Calling _reduce(args, kwargs) (line 993)
        _reduce_call_result_175371 = invoke(stypy.reporting.localization.Localization(__file__, 993, 8), _reduce_175369, *[], **kwargs_175370)
        
        
        # Assigning a Call to a Name (line 995):
        
        # Assigning a Call to a Name (line 995):
        
        # Call to rmatvec(...): (line 995)
        # Processing the call arguments (line 995)
        # Getting the type of 'dx' (line 995)
        dx_175375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 28), 'dx', False)
        # Processing the call keyword arguments (line 995)
        kwargs_175376 = {}
        # Getting the type of 'self' (line 995)
        self_175372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 12), 'self', False)
        # Obtaining the member 'Gm' of a type (line 995)
        Gm_175373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 12), self_175372, 'Gm')
        # Obtaining the member 'rmatvec' of a type (line 995)
        rmatvec_175374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 12), Gm_175373, 'rmatvec')
        # Calling rmatvec(args, kwargs) (line 995)
        rmatvec_call_result_175377 = invoke(stypy.reporting.localization.Localization(__file__, 995, 12), rmatvec_175374, *[dx_175375], **kwargs_175376)
        
        # Assigning a type to the variable 'v' (line 995)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 995, 8), 'v', rmatvec_call_result_175377)
        
        # Assigning a BinOp to a Name (line 996):
        
        # Assigning a BinOp to a Name (line 996):
        # Getting the type of 'dx' (line 996)
        dx_175378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 12), 'dx')
        
        # Call to matvec(...): (line 996)
        # Processing the call arguments (line 996)
        # Getting the type of 'df' (line 996)
        df_175382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 32), 'df', False)
        # Processing the call keyword arguments (line 996)
        kwargs_175383 = {}
        # Getting the type of 'self' (line 996)
        self_175379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 17), 'self', False)
        # Obtaining the member 'Gm' of a type (line 996)
        Gm_175380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 996, 17), self_175379, 'Gm')
        # Obtaining the member 'matvec' of a type (line 996)
        matvec_175381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 996, 17), Gm_175380, 'matvec')
        # Calling matvec(args, kwargs) (line 996)
        matvec_call_result_175384 = invoke(stypy.reporting.localization.Localization(__file__, 996, 17), matvec_175381, *[df_175382], **kwargs_175383)
        
        # Applying the binary operator '-' (line 996)
        result_sub_175385 = python_operator(stypy.reporting.localization.Localization(__file__, 996, 12), '-', dx_175378, matvec_call_result_175384)
        
        # Assigning a type to the variable 'c' (line 996)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 996, 8), 'c', result_sub_175385)
        
        # Assigning a BinOp to a Name (line 997):
        
        # Assigning a BinOp to a Name (line 997):
        # Getting the type of 'v' (line 997)
        v_175386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 12), 'v')
        
        # Call to vdot(...): (line 997)
        # Processing the call arguments (line 997)
        # Getting the type of 'df' (line 997)
        df_175388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 21), 'df', False)
        # Getting the type of 'v' (line 997)
        v_175389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 25), 'v', False)
        # Processing the call keyword arguments (line 997)
        kwargs_175390 = {}
        # Getting the type of 'vdot' (line 997)
        vdot_175387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 16), 'vdot', False)
        # Calling vdot(args, kwargs) (line 997)
        vdot_call_result_175391 = invoke(stypy.reporting.localization.Localization(__file__, 997, 16), vdot_175387, *[df_175388, v_175389], **kwargs_175390)
        
        # Applying the binary operator 'div' (line 997)
        result_div_175392 = python_operator(stypy.reporting.localization.Localization(__file__, 997, 12), 'div', v_175386, vdot_call_result_175391)
        
        # Assigning a type to the variable 'd' (line 997)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 997, 8), 'd', result_div_175392)
        
        # Call to append(...): (line 999)
        # Processing the call arguments (line 999)
        # Getting the type of 'c' (line 999)
        c_175396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 23), 'c', False)
        # Getting the type of 'd' (line 999)
        d_175397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 26), 'd', False)
        # Processing the call keyword arguments (line 999)
        kwargs_175398 = {}
        # Getting the type of 'self' (line 999)
        self_175393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 8), 'self', False)
        # Obtaining the member 'Gm' of a type (line 999)
        Gm_175394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 999, 8), self_175393, 'Gm')
        # Obtaining the member 'append' of a type (line 999)
        append_175395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 999, 8), Gm_175394, 'append')
        # Calling append(args, kwargs) (line 999)
        append_call_result_175399 = invoke(stypy.reporting.localization.Localization(__file__, 999, 8), append_175395, *[c_175396, d_175397], **kwargs_175398)
        
        
        # ################# End of '_update(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update' in the type store
        # Getting the type of 'stypy_return_type' (line 992)
        stypy_return_type_175400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175400)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update'
        return stypy_return_type_175400


# Assigning a type to the variable 'BroydenFirst' (line 909)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 909, 0), 'BroydenFirst', BroydenFirst)
# Declaration of the 'BroydenSecond' class
# Getting the type of 'BroydenFirst' (line 1002)
BroydenFirst_175401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 20), 'BroydenFirst')

class BroydenSecond(BroydenFirst_175401, ):
    str_175402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1031, (-1)), 'str', '\n    Find a root of a function, using Broyden\'s second Jacobian approximation.\n\n    This method is also known as "Broyden\'s bad method".\n\n    Parameters\n    ----------\n    %(params_basic)s\n    %(broyden_params)s\n    %(params_extra)s\n\n    Notes\n    -----\n    This algorithm implements the inverse Jacobian Quasi-Newton update\n\n    .. math:: H_+ = H + (dx - H df) df^\\dagger / ( df^\\dagger df)\n\n    corresponding to Broyden\'s second method.\n\n    References\n    ----------\n    .. [1] B.A. van der Rotten, PhD thesis,\n       "A limited memory Broyden method to solve high-dimensional\n       systems of nonlinear equations". Mathematisch Instituut,\n       Universiteit Leiden, The Netherlands (2003).\n\n       http://www.math.leidenuniv.nl/scripties/Rotten.pdf\n\n    ')

    @norecursion
    def _update(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update'
        module_type_store = module_type_store.open_function_context('_update', 1033, 4, False)
        # Assigning a type to the variable 'self' (line 1034)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1034, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BroydenSecond._update.__dict__.__setitem__('stypy_localization', localization)
        BroydenSecond._update.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BroydenSecond._update.__dict__.__setitem__('stypy_type_store', module_type_store)
        BroydenSecond._update.__dict__.__setitem__('stypy_function_name', 'BroydenSecond._update')
        BroydenSecond._update.__dict__.__setitem__('stypy_param_names_list', ['x', 'f', 'dx', 'df', 'dx_norm', 'df_norm'])
        BroydenSecond._update.__dict__.__setitem__('stypy_varargs_param_name', None)
        BroydenSecond._update.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BroydenSecond._update.__dict__.__setitem__('stypy_call_defaults', defaults)
        BroydenSecond._update.__dict__.__setitem__('stypy_call_varargs', varargs)
        BroydenSecond._update.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BroydenSecond._update.__dict__.__setitem__('stypy_declared_arg_number', 7)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BroydenSecond._update', ['x', 'f', 'dx', 'df', 'dx_norm', 'df_norm'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update', localization, ['x', 'f', 'dx', 'df', 'dx_norm', 'df_norm'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update(...)' code ##################

        
        # Call to _reduce(...): (line 1034)
        # Processing the call keyword arguments (line 1034)
        kwargs_175405 = {}
        # Getting the type of 'self' (line 1034)
        self_175403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 8), 'self', False)
        # Obtaining the member '_reduce' of a type (line 1034)
        _reduce_175404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1034, 8), self_175403, '_reduce')
        # Calling _reduce(args, kwargs) (line 1034)
        _reduce_call_result_175406 = invoke(stypy.reporting.localization.Localization(__file__, 1034, 8), _reduce_175404, *[], **kwargs_175405)
        
        
        # Assigning a Name to a Name (line 1036):
        
        # Assigning a Name to a Name (line 1036):
        # Getting the type of 'df' (line 1036)
        df_175407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 12), 'df')
        # Assigning a type to the variable 'v' (line 1036)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1036, 8), 'v', df_175407)
        
        # Assigning a BinOp to a Name (line 1037):
        
        # Assigning a BinOp to a Name (line 1037):
        # Getting the type of 'dx' (line 1037)
        dx_175408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 12), 'dx')
        
        # Call to matvec(...): (line 1037)
        # Processing the call arguments (line 1037)
        # Getting the type of 'df' (line 1037)
        df_175412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 32), 'df', False)
        # Processing the call keyword arguments (line 1037)
        kwargs_175413 = {}
        # Getting the type of 'self' (line 1037)
        self_175409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 17), 'self', False)
        # Obtaining the member 'Gm' of a type (line 1037)
        Gm_175410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 17), self_175409, 'Gm')
        # Obtaining the member 'matvec' of a type (line 1037)
        matvec_175411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 17), Gm_175410, 'matvec')
        # Calling matvec(args, kwargs) (line 1037)
        matvec_call_result_175414 = invoke(stypy.reporting.localization.Localization(__file__, 1037, 17), matvec_175411, *[df_175412], **kwargs_175413)
        
        # Applying the binary operator '-' (line 1037)
        result_sub_175415 = python_operator(stypy.reporting.localization.Localization(__file__, 1037, 12), '-', dx_175408, matvec_call_result_175414)
        
        # Assigning a type to the variable 'c' (line 1037)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1037, 8), 'c', result_sub_175415)
        
        # Assigning a BinOp to a Name (line 1038):
        
        # Assigning a BinOp to a Name (line 1038):
        # Getting the type of 'v' (line 1038)
        v_175416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 12), 'v')
        # Getting the type of 'df_norm' (line 1038)
        df_norm_175417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 16), 'df_norm')
        int_175418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1038, 25), 'int')
        # Applying the binary operator '**' (line 1038)
        result_pow_175419 = python_operator(stypy.reporting.localization.Localization(__file__, 1038, 16), '**', df_norm_175417, int_175418)
        
        # Applying the binary operator 'div' (line 1038)
        result_div_175420 = python_operator(stypy.reporting.localization.Localization(__file__, 1038, 12), 'div', v_175416, result_pow_175419)
        
        # Assigning a type to the variable 'd' (line 1038)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1038, 8), 'd', result_div_175420)
        
        # Call to append(...): (line 1039)
        # Processing the call arguments (line 1039)
        # Getting the type of 'c' (line 1039)
        c_175424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 23), 'c', False)
        # Getting the type of 'd' (line 1039)
        d_175425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 26), 'd', False)
        # Processing the call keyword arguments (line 1039)
        kwargs_175426 = {}
        # Getting the type of 'self' (line 1039)
        self_175421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 8), 'self', False)
        # Obtaining the member 'Gm' of a type (line 1039)
        Gm_175422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 8), self_175421, 'Gm')
        # Obtaining the member 'append' of a type (line 1039)
        append_175423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 8), Gm_175422, 'append')
        # Calling append(args, kwargs) (line 1039)
        append_call_result_175427 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 8), append_175423, *[c_175424, d_175425], **kwargs_175426)
        
        
        # ################# End of '_update(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update' in the type store
        # Getting the type of 'stypy_return_type' (line 1033)
        stypy_return_type_175428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175428)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update'
        return stypy_return_type_175428


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1002, 0, False)
        # Assigning a type to the variable 'self' (line 1003)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1003, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BroydenSecond.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'BroydenSecond' (line 1002)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1002, 0), 'BroydenSecond', BroydenSecond)
# Declaration of the 'Anderson' class
# Getting the type of 'GenericBroyden' (line 1046)
GenericBroyden_175429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 15), 'GenericBroyden')

class Anderson(GenericBroyden_175429, ):
    str_175430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1070, (-1)), 'str', "\n    Find a root of a function, using (extended) Anderson mixing.\n\n    The Jacobian is formed by for a 'best' solution in the space\n    spanned by last `M` vectors. As a result, only a MxM matrix\n    inversions and MxN multiplications are required. [Ey]_\n\n    Parameters\n    ----------\n    %(params_basic)s\n    alpha : float, optional\n        Initial guess for the Jacobian is (-1/alpha).\n    M : float, optional\n        Number of previous vectors to retain. Defaults to 5.\n    w0 : float, optional\n        Regularization parameter for numerical stability.\n        Compared to unity, good values of the order of 0.01.\n    %(params_extra)s\n\n    References\n    ----------\n    .. [Ey] V. Eyert, J. Comp. Phys., 124, 271 (1996).\n\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1097)
        None_175431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 29), 'None')
        float_175432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1097, 38), 'float')
        int_175433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1097, 46), 'int')
        defaults = [None_175431, float_175432, int_175433]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1097, 4, False)
        # Assigning a type to the variable 'self' (line 1098)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1098, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Anderson.__init__', ['alpha', 'w0', 'M'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['alpha', 'w0', 'M'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1098)
        # Processing the call arguments (line 1098)
        # Getting the type of 'self' (line 1098)
        self_175436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 32), 'self', False)
        # Processing the call keyword arguments (line 1098)
        kwargs_175437 = {}
        # Getting the type of 'GenericBroyden' (line 1098)
        GenericBroyden_175434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 8), 'GenericBroyden', False)
        # Obtaining the member '__init__' of a type (line 1098)
        init___175435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1098, 8), GenericBroyden_175434, '__init__')
        # Calling __init__(args, kwargs) (line 1098)
        init___call_result_175438 = invoke(stypy.reporting.localization.Localization(__file__, 1098, 8), init___175435, *[self_175436], **kwargs_175437)
        
        
        # Assigning a Name to a Attribute (line 1099):
        
        # Assigning a Name to a Attribute (line 1099):
        # Getting the type of 'alpha' (line 1099)
        alpha_175439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 21), 'alpha')
        # Getting the type of 'self' (line 1099)
        self_175440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 8), 'self')
        # Setting the type of the member 'alpha' of a type (line 1099)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1099, 8), self_175440, 'alpha', alpha_175439)
        
        # Assigning a Name to a Attribute (line 1100):
        
        # Assigning a Name to a Attribute (line 1100):
        # Getting the type of 'M' (line 1100)
        M_175441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1100, 17), 'M')
        # Getting the type of 'self' (line 1100)
        self_175442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1100, 8), 'self')
        # Setting the type of the member 'M' of a type (line 1100)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1100, 8), self_175442, 'M', M_175441)
        
        # Assigning a List to a Attribute (line 1101):
        
        # Assigning a List to a Attribute (line 1101):
        
        # Obtaining an instance of the builtin type 'list' (line 1101)
        list_175443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1101, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1101)
        
        # Getting the type of 'self' (line 1101)
        self_175444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 8), 'self')
        # Setting the type of the member 'dx' of a type (line 1101)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1101, 8), self_175444, 'dx', list_175443)
        
        # Assigning a List to a Attribute (line 1102):
        
        # Assigning a List to a Attribute (line 1102):
        
        # Obtaining an instance of the builtin type 'list' (line 1102)
        list_175445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1102, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1102)
        
        # Getting the type of 'self' (line 1102)
        self_175446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 8), 'self')
        # Setting the type of the member 'df' of a type (line 1102)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1102, 8), self_175446, 'df', list_175445)
        
        # Assigning a Name to a Attribute (line 1103):
        
        # Assigning a Name to a Attribute (line 1103):
        # Getting the type of 'None' (line 1103)
        None_175447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 21), 'None')
        # Getting the type of 'self' (line 1103)
        self_175448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 8), 'self')
        # Setting the type of the member 'gamma' of a type (line 1103)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 8), self_175448, 'gamma', None_175447)
        
        # Assigning a Name to a Attribute (line 1104):
        
        # Assigning a Name to a Attribute (line 1104):
        # Getting the type of 'w0' (line 1104)
        w0_175449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 18), 'w0')
        # Getting the type of 'self' (line 1104)
        self_175450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 8), 'self')
        # Setting the type of the member 'w0' of a type (line 1104)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1104, 8), self_175450, 'w0', w0_175449)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def solve(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_175451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1106, 27), 'int')
        defaults = [int_175451]
        # Create a new context for function 'solve'
        module_type_store = module_type_store.open_function_context('solve', 1106, 4, False)
        # Assigning a type to the variable 'self' (line 1107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1107, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Anderson.solve.__dict__.__setitem__('stypy_localization', localization)
        Anderson.solve.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Anderson.solve.__dict__.__setitem__('stypy_type_store', module_type_store)
        Anderson.solve.__dict__.__setitem__('stypy_function_name', 'Anderson.solve')
        Anderson.solve.__dict__.__setitem__('stypy_param_names_list', ['f', 'tol'])
        Anderson.solve.__dict__.__setitem__('stypy_varargs_param_name', None)
        Anderson.solve.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Anderson.solve.__dict__.__setitem__('stypy_call_defaults', defaults)
        Anderson.solve.__dict__.__setitem__('stypy_call_varargs', varargs)
        Anderson.solve.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Anderson.solve.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Anderson.solve', ['f', 'tol'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'solve', localization, ['f', 'tol'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'solve(...)' code ##################

        
        # Assigning a BinOp to a Name (line 1107):
        
        # Assigning a BinOp to a Name (line 1107):
        
        # Getting the type of 'self' (line 1107)
        self_175452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 14), 'self')
        # Obtaining the member 'alpha' of a type (line 1107)
        alpha_175453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1107, 14), self_175452, 'alpha')
        # Applying the 'usub' unary operator (line 1107)
        result___neg___175454 = python_operator(stypy.reporting.localization.Localization(__file__, 1107, 13), 'usub', alpha_175453)
        
        # Getting the type of 'f' (line 1107)
        f_175455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 25), 'f')
        # Applying the binary operator '*' (line 1107)
        result_mul_175456 = python_operator(stypy.reporting.localization.Localization(__file__, 1107, 13), '*', result___neg___175454, f_175455)
        
        # Assigning a type to the variable 'dx' (line 1107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1107, 8), 'dx', result_mul_175456)
        
        # Assigning a Call to a Name (line 1109):
        
        # Assigning a Call to a Name (line 1109):
        
        # Call to len(...): (line 1109)
        # Processing the call arguments (line 1109)
        # Getting the type of 'self' (line 1109)
        self_175458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 16), 'self', False)
        # Obtaining the member 'dx' of a type (line 1109)
        dx_175459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1109, 16), self_175458, 'dx')
        # Processing the call keyword arguments (line 1109)
        kwargs_175460 = {}
        # Getting the type of 'len' (line 1109)
        len_175457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 12), 'len', False)
        # Calling len(args, kwargs) (line 1109)
        len_call_result_175461 = invoke(stypy.reporting.localization.Localization(__file__, 1109, 12), len_175457, *[dx_175459], **kwargs_175460)
        
        # Assigning a type to the variable 'n' (line 1109)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1109, 8), 'n', len_call_result_175461)
        
        
        # Getting the type of 'n' (line 1110)
        n_175462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 11), 'n')
        int_175463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1110, 16), 'int')
        # Applying the binary operator '==' (line 1110)
        result_eq_175464 = python_operator(stypy.reporting.localization.Localization(__file__, 1110, 11), '==', n_175462, int_175463)
        
        # Testing the type of an if condition (line 1110)
        if_condition_175465 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1110, 8), result_eq_175464)
        # Assigning a type to the variable 'if_condition_175465' (line 1110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1110, 8), 'if_condition_175465', if_condition_175465)
        # SSA begins for if statement (line 1110)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'dx' (line 1111)
        dx_175466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 19), 'dx')
        # Assigning a type to the variable 'stypy_return_type' (line 1111)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1111, 12), 'stypy_return_type', dx_175466)
        # SSA join for if statement (line 1110)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1113):
        
        # Assigning a Call to a Name (line 1113):
        
        # Call to empty(...): (line 1113)
        # Processing the call arguments (line 1113)
        # Getting the type of 'n' (line 1113)
        n_175469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 24), 'n', False)
        # Processing the call keyword arguments (line 1113)
        # Getting the type of 'f' (line 1113)
        f_175470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 33), 'f', False)
        # Obtaining the member 'dtype' of a type (line 1113)
        dtype_175471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1113, 33), f_175470, 'dtype')
        keyword_175472 = dtype_175471
        kwargs_175473 = {'dtype': keyword_175472}
        # Getting the type of 'np' (line 1113)
        np_175467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 15), 'np', False)
        # Obtaining the member 'empty' of a type (line 1113)
        empty_175468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1113, 15), np_175467, 'empty')
        # Calling empty(args, kwargs) (line 1113)
        empty_call_result_175474 = invoke(stypy.reporting.localization.Localization(__file__, 1113, 15), empty_175468, *[n_175469], **kwargs_175473)
        
        # Assigning a type to the variable 'df_f' (line 1113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1113, 8), 'df_f', empty_call_result_175474)
        
        
        # Call to xrange(...): (line 1114)
        # Processing the call arguments (line 1114)
        # Getting the type of 'n' (line 1114)
        n_175476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 24), 'n', False)
        # Processing the call keyword arguments (line 1114)
        kwargs_175477 = {}
        # Getting the type of 'xrange' (line 1114)
        xrange_175475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 17), 'xrange', False)
        # Calling xrange(args, kwargs) (line 1114)
        xrange_call_result_175478 = invoke(stypy.reporting.localization.Localization(__file__, 1114, 17), xrange_175475, *[n_175476], **kwargs_175477)
        
        # Testing the type of a for loop iterable (line 1114)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1114, 8), xrange_call_result_175478)
        # Getting the type of the for loop variable (line 1114)
        for_loop_var_175479 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1114, 8), xrange_call_result_175478)
        # Assigning a type to the variable 'k' (line 1114)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1114, 8), 'k', for_loop_var_175479)
        # SSA begins for a for statement (line 1114)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Subscript (line 1115):
        
        # Assigning a Call to a Subscript (line 1115):
        
        # Call to vdot(...): (line 1115)
        # Processing the call arguments (line 1115)
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 1115)
        k_175481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 35), 'k', False)
        # Getting the type of 'self' (line 1115)
        self_175482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 27), 'self', False)
        # Obtaining the member 'df' of a type (line 1115)
        df_175483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1115, 27), self_175482, 'df')
        # Obtaining the member '__getitem__' of a type (line 1115)
        getitem___175484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1115, 27), df_175483, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1115)
        subscript_call_result_175485 = invoke(stypy.reporting.localization.Localization(__file__, 1115, 27), getitem___175484, k_175481)
        
        # Getting the type of 'f' (line 1115)
        f_175486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 39), 'f', False)
        # Processing the call keyword arguments (line 1115)
        kwargs_175487 = {}
        # Getting the type of 'vdot' (line 1115)
        vdot_175480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 22), 'vdot', False)
        # Calling vdot(args, kwargs) (line 1115)
        vdot_call_result_175488 = invoke(stypy.reporting.localization.Localization(__file__, 1115, 22), vdot_175480, *[subscript_call_result_175485, f_175486], **kwargs_175487)
        
        # Getting the type of 'df_f' (line 1115)
        df_f_175489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 12), 'df_f')
        # Getting the type of 'k' (line 1115)
        k_175490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 17), 'k')
        # Storing an element on a container (line 1115)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1115, 12), df_f_175489, (k_175490, vdot_call_result_175488))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 1117)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 1118):
        
        # Assigning a Call to a Name (line 1118):
        
        # Call to solve(...): (line 1118)
        # Processing the call arguments (line 1118)
        # Getting the type of 'self' (line 1118)
        self_175492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 26), 'self', False)
        # Obtaining the member 'a' of a type (line 1118)
        a_175493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 26), self_175492, 'a')
        # Getting the type of 'df_f' (line 1118)
        df_f_175494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 34), 'df_f', False)
        # Processing the call keyword arguments (line 1118)
        kwargs_175495 = {}
        # Getting the type of 'solve' (line 1118)
        solve_175491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 20), 'solve', False)
        # Calling solve(args, kwargs) (line 1118)
        solve_call_result_175496 = invoke(stypy.reporting.localization.Localization(__file__, 1118, 20), solve_175491, *[a_175493, df_f_175494], **kwargs_175495)
        
        # Assigning a type to the variable 'gamma' (line 1118)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1118, 12), 'gamma', solve_call_result_175496)
        # SSA branch for the except part of a try statement (line 1117)
        # SSA branch for the except 'LinAlgError' branch of a try statement (line 1117)
        module_type_store.open_ssa_branch('except')
        # Deleting a member
        # Getting the type of 'self' (line 1121)
        self_175497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 16), 'self')
        # Obtaining the member 'dx' of a type (line 1121)
        dx_175498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1121, 16), self_175497, 'dx')
        
        # Obtaining the type of the subscript
        slice_175499 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1121, 16), None, None, None)
        # Getting the type of 'self' (line 1121)
        self_175500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 16), 'self')
        # Obtaining the member 'dx' of a type (line 1121)
        dx_175501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1121, 16), self_175500, 'dx')
        # Obtaining the member '__getitem__' of a type (line 1121)
        getitem___175502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1121, 16), dx_175501, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1121)
        subscript_call_result_175503 = invoke(stypy.reporting.localization.Localization(__file__, 1121, 16), getitem___175502, slice_175499)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1121, 12), dx_175498, subscript_call_result_175503)
        # Deleting a member
        # Getting the type of 'self' (line 1122)
        self_175504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 16), 'self')
        # Obtaining the member 'df' of a type (line 1122)
        df_175505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1122, 16), self_175504, 'df')
        
        # Obtaining the type of the subscript
        slice_175506 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1122, 16), None, None, None)
        # Getting the type of 'self' (line 1122)
        self_175507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 16), 'self')
        # Obtaining the member 'df' of a type (line 1122)
        df_175508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1122, 16), self_175507, 'df')
        # Obtaining the member '__getitem__' of a type (line 1122)
        getitem___175509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1122, 16), df_175508, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1122)
        subscript_call_result_175510 = invoke(stypy.reporting.localization.Localization(__file__, 1122, 16), getitem___175509, slice_175506)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1122, 12), df_175505, subscript_call_result_175510)
        # Getting the type of 'dx' (line 1123)
        dx_175511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 19), 'dx')
        # Assigning a type to the variable 'stypy_return_type' (line 1123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1123, 12), 'stypy_return_type', dx_175511)
        # SSA join for try-except statement (line 1117)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to xrange(...): (line 1125)
        # Processing the call arguments (line 1125)
        # Getting the type of 'n' (line 1125)
        n_175513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 24), 'n', False)
        # Processing the call keyword arguments (line 1125)
        kwargs_175514 = {}
        # Getting the type of 'xrange' (line 1125)
        xrange_175512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 17), 'xrange', False)
        # Calling xrange(args, kwargs) (line 1125)
        xrange_call_result_175515 = invoke(stypy.reporting.localization.Localization(__file__, 1125, 17), xrange_175512, *[n_175513], **kwargs_175514)
        
        # Testing the type of a for loop iterable (line 1125)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1125, 8), xrange_call_result_175515)
        # Getting the type of the for loop variable (line 1125)
        for_loop_var_175516 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1125, 8), xrange_call_result_175515)
        # Assigning a type to the variable 'm' (line 1125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1125, 8), 'm', for_loop_var_175516)
        # SSA begins for a for statement (line 1125)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'dx' (line 1126)
        dx_175517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 12), 'dx')
        
        # Obtaining the type of the subscript
        # Getting the type of 'm' (line 1126)
        m_175518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 24), 'm')
        # Getting the type of 'gamma' (line 1126)
        gamma_175519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 18), 'gamma')
        # Obtaining the member '__getitem__' of a type (line 1126)
        getitem___175520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 18), gamma_175519, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1126)
        subscript_call_result_175521 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 18), getitem___175520, m_175518)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'm' (line 1126)
        m_175522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 36), 'm')
        # Getting the type of 'self' (line 1126)
        self_175523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 28), 'self')
        # Obtaining the member 'dx' of a type (line 1126)
        dx_175524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 28), self_175523, 'dx')
        # Obtaining the member '__getitem__' of a type (line 1126)
        getitem___175525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 28), dx_175524, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1126)
        subscript_call_result_175526 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 28), getitem___175525, m_175522)
        
        # Getting the type of 'self' (line 1126)
        self_175527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 41), 'self')
        # Obtaining the member 'alpha' of a type (line 1126)
        alpha_175528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 41), self_175527, 'alpha')
        
        # Obtaining the type of the subscript
        # Getting the type of 'm' (line 1126)
        m_175529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 60), 'm')
        # Getting the type of 'self' (line 1126)
        self_175530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 52), 'self')
        # Obtaining the member 'df' of a type (line 1126)
        df_175531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 52), self_175530, 'df')
        # Obtaining the member '__getitem__' of a type (line 1126)
        getitem___175532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 52), df_175531, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1126)
        subscript_call_result_175533 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 52), getitem___175532, m_175529)
        
        # Applying the binary operator '*' (line 1126)
        result_mul_175534 = python_operator(stypy.reporting.localization.Localization(__file__, 1126, 41), '*', alpha_175528, subscript_call_result_175533)
        
        # Applying the binary operator '+' (line 1126)
        result_add_175535 = python_operator(stypy.reporting.localization.Localization(__file__, 1126, 28), '+', subscript_call_result_175526, result_mul_175534)
        
        # Applying the binary operator '*' (line 1126)
        result_mul_175536 = python_operator(stypy.reporting.localization.Localization(__file__, 1126, 18), '*', subscript_call_result_175521, result_add_175535)
        
        # Applying the binary operator '+=' (line 1126)
        result_iadd_175537 = python_operator(stypy.reporting.localization.Localization(__file__, 1126, 12), '+=', dx_175517, result_mul_175536)
        # Assigning a type to the variable 'dx' (line 1126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 12), 'dx', result_iadd_175537)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'dx' (line 1127)
        dx_175538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 15), 'dx')
        # Assigning a type to the variable 'stypy_return_type' (line 1127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 8), 'stypy_return_type', dx_175538)
        
        # ################# End of 'solve(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'solve' in the type store
        # Getting the type of 'stypy_return_type' (line 1106)
        stypy_return_type_175539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175539)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'solve'
        return stypy_return_type_175539


    @norecursion
    def matvec(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'matvec'
        module_type_store = module_type_store.open_function_context('matvec', 1129, 4, False)
        # Assigning a type to the variable 'self' (line 1130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1130, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Anderson.matvec.__dict__.__setitem__('stypy_localization', localization)
        Anderson.matvec.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Anderson.matvec.__dict__.__setitem__('stypy_type_store', module_type_store)
        Anderson.matvec.__dict__.__setitem__('stypy_function_name', 'Anderson.matvec')
        Anderson.matvec.__dict__.__setitem__('stypy_param_names_list', ['f'])
        Anderson.matvec.__dict__.__setitem__('stypy_varargs_param_name', None)
        Anderson.matvec.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Anderson.matvec.__dict__.__setitem__('stypy_call_defaults', defaults)
        Anderson.matvec.__dict__.__setitem__('stypy_call_varargs', varargs)
        Anderson.matvec.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Anderson.matvec.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Anderson.matvec', ['f'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'matvec', localization, ['f'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'matvec(...)' code ##################

        
        # Assigning a BinOp to a Name (line 1130):
        
        # Assigning a BinOp to a Name (line 1130):
        
        # Getting the type of 'f' (line 1130)
        f_175540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 14), 'f')
        # Applying the 'usub' unary operator (line 1130)
        result___neg___175541 = python_operator(stypy.reporting.localization.Localization(__file__, 1130, 13), 'usub', f_175540)
        
        # Getting the type of 'self' (line 1130)
        self_175542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 16), 'self')
        # Obtaining the member 'alpha' of a type (line 1130)
        alpha_175543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1130, 16), self_175542, 'alpha')
        # Applying the binary operator 'div' (line 1130)
        result_div_175544 = python_operator(stypy.reporting.localization.Localization(__file__, 1130, 13), 'div', result___neg___175541, alpha_175543)
        
        # Assigning a type to the variable 'dx' (line 1130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1130, 8), 'dx', result_div_175544)
        
        # Assigning a Call to a Name (line 1132):
        
        # Assigning a Call to a Name (line 1132):
        
        # Call to len(...): (line 1132)
        # Processing the call arguments (line 1132)
        # Getting the type of 'self' (line 1132)
        self_175546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 16), 'self', False)
        # Obtaining the member 'dx' of a type (line 1132)
        dx_175547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1132, 16), self_175546, 'dx')
        # Processing the call keyword arguments (line 1132)
        kwargs_175548 = {}
        # Getting the type of 'len' (line 1132)
        len_175545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 12), 'len', False)
        # Calling len(args, kwargs) (line 1132)
        len_call_result_175549 = invoke(stypy.reporting.localization.Localization(__file__, 1132, 12), len_175545, *[dx_175547], **kwargs_175548)
        
        # Assigning a type to the variable 'n' (line 1132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 8), 'n', len_call_result_175549)
        
        
        # Getting the type of 'n' (line 1133)
        n_175550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 11), 'n')
        int_175551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1133, 16), 'int')
        # Applying the binary operator '==' (line 1133)
        result_eq_175552 = python_operator(stypy.reporting.localization.Localization(__file__, 1133, 11), '==', n_175550, int_175551)
        
        # Testing the type of an if condition (line 1133)
        if_condition_175553 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1133, 8), result_eq_175552)
        # Assigning a type to the variable 'if_condition_175553' (line 1133)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1133, 8), 'if_condition_175553', if_condition_175553)
        # SSA begins for if statement (line 1133)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'dx' (line 1134)
        dx_175554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 19), 'dx')
        # Assigning a type to the variable 'stypy_return_type' (line 1134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1134, 12), 'stypy_return_type', dx_175554)
        # SSA join for if statement (line 1133)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1136):
        
        # Assigning a Call to a Name (line 1136):
        
        # Call to empty(...): (line 1136)
        # Processing the call arguments (line 1136)
        # Getting the type of 'n' (line 1136)
        n_175557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 24), 'n', False)
        # Processing the call keyword arguments (line 1136)
        # Getting the type of 'f' (line 1136)
        f_175558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 33), 'f', False)
        # Obtaining the member 'dtype' of a type (line 1136)
        dtype_175559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1136, 33), f_175558, 'dtype')
        keyword_175560 = dtype_175559
        kwargs_175561 = {'dtype': keyword_175560}
        # Getting the type of 'np' (line 1136)
        np_175555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 15), 'np', False)
        # Obtaining the member 'empty' of a type (line 1136)
        empty_175556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1136, 15), np_175555, 'empty')
        # Calling empty(args, kwargs) (line 1136)
        empty_call_result_175562 = invoke(stypy.reporting.localization.Localization(__file__, 1136, 15), empty_175556, *[n_175557], **kwargs_175561)
        
        # Assigning a type to the variable 'df_f' (line 1136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1136, 8), 'df_f', empty_call_result_175562)
        
        
        # Call to xrange(...): (line 1137)
        # Processing the call arguments (line 1137)
        # Getting the type of 'n' (line 1137)
        n_175564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 24), 'n', False)
        # Processing the call keyword arguments (line 1137)
        kwargs_175565 = {}
        # Getting the type of 'xrange' (line 1137)
        xrange_175563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 17), 'xrange', False)
        # Calling xrange(args, kwargs) (line 1137)
        xrange_call_result_175566 = invoke(stypy.reporting.localization.Localization(__file__, 1137, 17), xrange_175563, *[n_175564], **kwargs_175565)
        
        # Testing the type of a for loop iterable (line 1137)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1137, 8), xrange_call_result_175566)
        # Getting the type of the for loop variable (line 1137)
        for_loop_var_175567 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1137, 8), xrange_call_result_175566)
        # Assigning a type to the variable 'k' (line 1137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1137, 8), 'k', for_loop_var_175567)
        # SSA begins for a for statement (line 1137)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Subscript (line 1138):
        
        # Assigning a Call to a Subscript (line 1138):
        
        # Call to vdot(...): (line 1138)
        # Processing the call arguments (line 1138)
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 1138)
        k_175569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 35), 'k', False)
        # Getting the type of 'self' (line 1138)
        self_175570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 27), 'self', False)
        # Obtaining the member 'df' of a type (line 1138)
        df_175571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 27), self_175570, 'df')
        # Obtaining the member '__getitem__' of a type (line 1138)
        getitem___175572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 27), df_175571, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1138)
        subscript_call_result_175573 = invoke(stypy.reporting.localization.Localization(__file__, 1138, 27), getitem___175572, k_175569)
        
        # Getting the type of 'f' (line 1138)
        f_175574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 39), 'f', False)
        # Processing the call keyword arguments (line 1138)
        kwargs_175575 = {}
        # Getting the type of 'vdot' (line 1138)
        vdot_175568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 22), 'vdot', False)
        # Calling vdot(args, kwargs) (line 1138)
        vdot_call_result_175576 = invoke(stypy.reporting.localization.Localization(__file__, 1138, 22), vdot_175568, *[subscript_call_result_175573, f_175574], **kwargs_175575)
        
        # Getting the type of 'df_f' (line 1138)
        df_f_175577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 12), 'df_f')
        # Getting the type of 'k' (line 1138)
        k_175578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 17), 'k')
        # Storing an element on a container (line 1138)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1138, 12), df_f_175577, (k_175578, vdot_call_result_175576))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1140):
        
        # Assigning a Call to a Name (line 1140):
        
        # Call to empty(...): (line 1140)
        # Processing the call arguments (line 1140)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1140)
        tuple_175581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1140, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1140)
        # Adding element type (line 1140)
        # Getting the type of 'n' (line 1140)
        n_175582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 22), 'n', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1140, 22), tuple_175581, n_175582)
        # Adding element type (line 1140)
        # Getting the type of 'n' (line 1140)
        n_175583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 25), 'n', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1140, 22), tuple_175581, n_175583)
        
        # Processing the call keyword arguments (line 1140)
        # Getting the type of 'f' (line 1140)
        f_175584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 35), 'f', False)
        # Obtaining the member 'dtype' of a type (line 1140)
        dtype_175585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1140, 35), f_175584, 'dtype')
        keyword_175586 = dtype_175585
        kwargs_175587 = {'dtype': keyword_175586}
        # Getting the type of 'np' (line 1140)
        np_175579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 12), 'np', False)
        # Obtaining the member 'empty' of a type (line 1140)
        empty_175580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1140, 12), np_175579, 'empty')
        # Calling empty(args, kwargs) (line 1140)
        empty_call_result_175588 = invoke(stypy.reporting.localization.Localization(__file__, 1140, 12), empty_175580, *[tuple_175581], **kwargs_175587)
        
        # Assigning a type to the variable 'b' (line 1140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1140, 8), 'b', empty_call_result_175588)
        
        
        # Call to xrange(...): (line 1141)
        # Processing the call arguments (line 1141)
        # Getting the type of 'n' (line 1141)
        n_175590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 24), 'n', False)
        # Processing the call keyword arguments (line 1141)
        kwargs_175591 = {}
        # Getting the type of 'xrange' (line 1141)
        xrange_175589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 17), 'xrange', False)
        # Calling xrange(args, kwargs) (line 1141)
        xrange_call_result_175592 = invoke(stypy.reporting.localization.Localization(__file__, 1141, 17), xrange_175589, *[n_175590], **kwargs_175591)
        
        # Testing the type of a for loop iterable (line 1141)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1141, 8), xrange_call_result_175592)
        # Getting the type of the for loop variable (line 1141)
        for_loop_var_175593 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1141, 8), xrange_call_result_175592)
        # Assigning a type to the variable 'i' (line 1141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 8), 'i', for_loop_var_175593)
        # SSA begins for a for statement (line 1141)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to xrange(...): (line 1142)
        # Processing the call arguments (line 1142)
        # Getting the type of 'n' (line 1142)
        n_175595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 28), 'n', False)
        # Processing the call keyword arguments (line 1142)
        kwargs_175596 = {}
        # Getting the type of 'xrange' (line 1142)
        xrange_175594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 21), 'xrange', False)
        # Calling xrange(args, kwargs) (line 1142)
        xrange_call_result_175597 = invoke(stypy.reporting.localization.Localization(__file__, 1142, 21), xrange_175594, *[n_175595], **kwargs_175596)
        
        # Testing the type of a for loop iterable (line 1142)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1142, 12), xrange_call_result_175597)
        # Getting the type of the for loop variable (line 1142)
        for_loop_var_175598 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1142, 12), xrange_call_result_175597)
        # Assigning a type to the variable 'j' (line 1142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1142, 12), 'j', for_loop_var_175598)
        # SSA begins for a for statement (line 1142)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Subscript (line 1143):
        
        # Assigning a Call to a Subscript (line 1143):
        
        # Call to vdot(...): (line 1143)
        # Processing the call arguments (line 1143)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1143)
        i_175600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 38), 'i', False)
        # Getting the type of 'self' (line 1143)
        self_175601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 30), 'self', False)
        # Obtaining the member 'df' of a type (line 1143)
        df_175602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1143, 30), self_175601, 'df')
        # Obtaining the member '__getitem__' of a type (line 1143)
        getitem___175603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1143, 30), df_175602, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1143)
        subscript_call_result_175604 = invoke(stypy.reporting.localization.Localization(__file__, 1143, 30), getitem___175603, i_175600)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'j' (line 1143)
        j_175605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 50), 'j', False)
        # Getting the type of 'self' (line 1143)
        self_175606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 42), 'self', False)
        # Obtaining the member 'dx' of a type (line 1143)
        dx_175607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1143, 42), self_175606, 'dx')
        # Obtaining the member '__getitem__' of a type (line 1143)
        getitem___175608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1143, 42), dx_175607, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1143)
        subscript_call_result_175609 = invoke(stypy.reporting.localization.Localization(__file__, 1143, 42), getitem___175608, j_175605)
        
        # Processing the call keyword arguments (line 1143)
        kwargs_175610 = {}
        # Getting the type of 'vdot' (line 1143)
        vdot_175599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 25), 'vdot', False)
        # Calling vdot(args, kwargs) (line 1143)
        vdot_call_result_175611 = invoke(stypy.reporting.localization.Localization(__file__, 1143, 25), vdot_175599, *[subscript_call_result_175604, subscript_call_result_175609], **kwargs_175610)
        
        # Getting the type of 'b' (line 1143)
        b_175612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 16), 'b')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1143)
        tuple_175613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1143, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1143)
        # Adding element type (line 1143)
        # Getting the type of 'i' (line 1143)
        i_175614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 18), 'i')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1143, 18), tuple_175613, i_175614)
        # Adding element type (line 1143)
        # Getting the type of 'j' (line 1143)
        j_175615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 20), 'j')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1143, 18), tuple_175613, j_175615)
        
        # Storing an element on a container (line 1143)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1143, 16), b_175612, (tuple_175613, vdot_call_result_175611))
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'i' (line 1144)
        i_175616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 19), 'i')
        # Getting the type of 'j' (line 1144)
        j_175617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 24), 'j')
        # Applying the binary operator '==' (line 1144)
        result_eq_175618 = python_operator(stypy.reporting.localization.Localization(__file__, 1144, 19), '==', i_175616, j_175617)
        
        
        # Getting the type of 'self' (line 1144)
        self_175619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 30), 'self')
        # Obtaining the member 'w0' of a type (line 1144)
        w0_175620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1144, 30), self_175619, 'w0')
        int_175621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1144, 41), 'int')
        # Applying the binary operator '!=' (line 1144)
        result_ne_175622 = python_operator(stypy.reporting.localization.Localization(__file__, 1144, 30), '!=', w0_175620, int_175621)
        
        # Applying the binary operator 'and' (line 1144)
        result_and_keyword_175623 = python_operator(stypy.reporting.localization.Localization(__file__, 1144, 19), 'and', result_eq_175618, result_ne_175622)
        
        # Testing the type of an if condition (line 1144)
        if_condition_175624 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1144, 16), result_and_keyword_175623)
        # Assigning a type to the variable 'if_condition_175624' (line 1144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1144, 16), 'if_condition_175624', if_condition_175624)
        # SSA begins for if statement (line 1144)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'b' (line 1145)
        b_175625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 20), 'b')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1145)
        tuple_175626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1145, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1145)
        # Adding element type (line 1145)
        # Getting the type of 'i' (line 1145)
        i_175627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 22), 'i')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1145, 22), tuple_175626, i_175627)
        # Adding element type (line 1145)
        # Getting the type of 'j' (line 1145)
        j_175628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 24), 'j')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1145, 22), tuple_175626, j_175628)
        
        # Getting the type of 'b' (line 1145)
        b_175629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 20), 'b')
        # Obtaining the member '__getitem__' of a type (line 1145)
        getitem___175630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1145, 20), b_175629, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1145)
        subscript_call_result_175631 = invoke(stypy.reporting.localization.Localization(__file__, 1145, 20), getitem___175630, tuple_175626)
        
        
        # Call to vdot(...): (line 1145)
        # Processing the call arguments (line 1145)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1145)
        i_175633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 43), 'i', False)
        # Getting the type of 'self' (line 1145)
        self_175634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 35), 'self', False)
        # Obtaining the member 'df' of a type (line 1145)
        df_175635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1145, 35), self_175634, 'df')
        # Obtaining the member '__getitem__' of a type (line 1145)
        getitem___175636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1145, 35), df_175635, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1145)
        subscript_call_result_175637 = invoke(stypy.reporting.localization.Localization(__file__, 1145, 35), getitem___175636, i_175633)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1145)
        i_175638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 55), 'i', False)
        # Getting the type of 'self' (line 1145)
        self_175639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 47), 'self', False)
        # Obtaining the member 'df' of a type (line 1145)
        df_175640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1145, 47), self_175639, 'df')
        # Obtaining the member '__getitem__' of a type (line 1145)
        getitem___175641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1145, 47), df_175640, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1145)
        subscript_call_result_175642 = invoke(stypy.reporting.localization.Localization(__file__, 1145, 47), getitem___175641, i_175638)
        
        # Processing the call keyword arguments (line 1145)
        kwargs_175643 = {}
        # Getting the type of 'vdot' (line 1145)
        vdot_175632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 30), 'vdot', False)
        # Calling vdot(args, kwargs) (line 1145)
        vdot_call_result_175644 = invoke(stypy.reporting.localization.Localization(__file__, 1145, 30), vdot_175632, *[subscript_call_result_175637, subscript_call_result_175642], **kwargs_175643)
        
        # Getting the type of 'self' (line 1145)
        self_175645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 59), 'self')
        # Obtaining the member 'w0' of a type (line 1145)
        w0_175646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1145, 59), self_175645, 'w0')
        int_175647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1145, 68), 'int')
        # Applying the binary operator '**' (line 1145)
        result_pow_175648 = python_operator(stypy.reporting.localization.Localization(__file__, 1145, 59), '**', w0_175646, int_175647)
        
        # Applying the binary operator '*' (line 1145)
        result_mul_175649 = python_operator(stypy.reporting.localization.Localization(__file__, 1145, 30), '*', vdot_call_result_175644, result_pow_175648)
        
        # Getting the type of 'self' (line 1145)
        self_175650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 70), 'self')
        # Obtaining the member 'alpha' of a type (line 1145)
        alpha_175651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1145, 70), self_175650, 'alpha')
        # Applying the binary operator '*' (line 1145)
        result_mul_175652 = python_operator(stypy.reporting.localization.Localization(__file__, 1145, 69), '*', result_mul_175649, alpha_175651)
        
        # Applying the binary operator '-=' (line 1145)
        result_isub_175653 = python_operator(stypy.reporting.localization.Localization(__file__, 1145, 20), '-=', subscript_call_result_175631, result_mul_175652)
        # Getting the type of 'b' (line 1145)
        b_175654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 20), 'b')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1145)
        tuple_175655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1145, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1145)
        # Adding element type (line 1145)
        # Getting the type of 'i' (line 1145)
        i_175656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 22), 'i')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1145, 22), tuple_175655, i_175656)
        # Adding element type (line 1145)
        # Getting the type of 'j' (line 1145)
        j_175657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 24), 'j')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1145, 22), tuple_175655, j_175657)
        
        # Storing an element on a container (line 1145)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1145, 20), b_175654, (tuple_175655, result_isub_175653))
        
        # SSA join for if statement (line 1144)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1146):
        
        # Assigning a Call to a Name (line 1146):
        
        # Call to solve(...): (line 1146)
        # Processing the call arguments (line 1146)
        # Getting the type of 'b' (line 1146)
        b_175659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 22), 'b', False)
        # Getting the type of 'df_f' (line 1146)
        df_f_175660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 25), 'df_f', False)
        # Processing the call keyword arguments (line 1146)
        kwargs_175661 = {}
        # Getting the type of 'solve' (line 1146)
        solve_175658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 16), 'solve', False)
        # Calling solve(args, kwargs) (line 1146)
        solve_call_result_175662 = invoke(stypy.reporting.localization.Localization(__file__, 1146, 16), solve_175658, *[b_175659, df_f_175660], **kwargs_175661)
        
        # Assigning a type to the variable 'gamma' (line 1146)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1146, 8), 'gamma', solve_call_result_175662)
        
        
        # Call to xrange(...): (line 1148)
        # Processing the call arguments (line 1148)
        # Getting the type of 'n' (line 1148)
        n_175664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 24), 'n', False)
        # Processing the call keyword arguments (line 1148)
        kwargs_175665 = {}
        # Getting the type of 'xrange' (line 1148)
        xrange_175663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 17), 'xrange', False)
        # Calling xrange(args, kwargs) (line 1148)
        xrange_call_result_175666 = invoke(stypy.reporting.localization.Localization(__file__, 1148, 17), xrange_175663, *[n_175664], **kwargs_175665)
        
        # Testing the type of a for loop iterable (line 1148)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1148, 8), xrange_call_result_175666)
        # Getting the type of the for loop variable (line 1148)
        for_loop_var_175667 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1148, 8), xrange_call_result_175666)
        # Assigning a type to the variable 'm' (line 1148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1148, 8), 'm', for_loop_var_175667)
        # SSA begins for a for statement (line 1148)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'dx' (line 1149)
        dx_175668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 12), 'dx')
        
        # Obtaining the type of the subscript
        # Getting the type of 'm' (line 1149)
        m_175669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 24), 'm')
        # Getting the type of 'gamma' (line 1149)
        gamma_175670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 18), 'gamma')
        # Obtaining the member '__getitem__' of a type (line 1149)
        getitem___175671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1149, 18), gamma_175670, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1149)
        subscript_call_result_175672 = invoke(stypy.reporting.localization.Localization(__file__, 1149, 18), getitem___175671, m_175669)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'm' (line 1149)
        m_175673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 36), 'm')
        # Getting the type of 'self' (line 1149)
        self_175674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 28), 'self')
        # Obtaining the member 'df' of a type (line 1149)
        df_175675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1149, 28), self_175674, 'df')
        # Obtaining the member '__getitem__' of a type (line 1149)
        getitem___175676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1149, 28), df_175675, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1149)
        subscript_call_result_175677 = invoke(stypy.reporting.localization.Localization(__file__, 1149, 28), getitem___175676, m_175673)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'm' (line 1149)
        m_175678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 49), 'm')
        # Getting the type of 'self' (line 1149)
        self_175679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 41), 'self')
        # Obtaining the member 'dx' of a type (line 1149)
        dx_175680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1149, 41), self_175679, 'dx')
        # Obtaining the member '__getitem__' of a type (line 1149)
        getitem___175681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1149, 41), dx_175680, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1149)
        subscript_call_result_175682 = invoke(stypy.reporting.localization.Localization(__file__, 1149, 41), getitem___175681, m_175678)
        
        # Getting the type of 'self' (line 1149)
        self_175683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 52), 'self')
        # Obtaining the member 'alpha' of a type (line 1149)
        alpha_175684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1149, 52), self_175683, 'alpha')
        # Applying the binary operator 'div' (line 1149)
        result_div_175685 = python_operator(stypy.reporting.localization.Localization(__file__, 1149, 41), 'div', subscript_call_result_175682, alpha_175684)
        
        # Applying the binary operator '+' (line 1149)
        result_add_175686 = python_operator(stypy.reporting.localization.Localization(__file__, 1149, 28), '+', subscript_call_result_175677, result_div_175685)
        
        # Applying the binary operator '*' (line 1149)
        result_mul_175687 = python_operator(stypy.reporting.localization.Localization(__file__, 1149, 18), '*', subscript_call_result_175672, result_add_175686)
        
        # Applying the binary operator '+=' (line 1149)
        result_iadd_175688 = python_operator(stypy.reporting.localization.Localization(__file__, 1149, 12), '+=', dx_175668, result_mul_175687)
        # Assigning a type to the variable 'dx' (line 1149)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1149, 12), 'dx', result_iadd_175688)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'dx' (line 1150)
        dx_175689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 15), 'dx')
        # Assigning a type to the variable 'stypy_return_type' (line 1150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 8), 'stypy_return_type', dx_175689)
        
        # ################# End of 'matvec(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'matvec' in the type store
        # Getting the type of 'stypy_return_type' (line 1129)
        stypy_return_type_175690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175690)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'matvec'
        return stypy_return_type_175690


    @norecursion
    def _update(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update'
        module_type_store = module_type_store.open_function_context('_update', 1152, 4, False)
        # Assigning a type to the variable 'self' (line 1153)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1153, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Anderson._update.__dict__.__setitem__('stypy_localization', localization)
        Anderson._update.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Anderson._update.__dict__.__setitem__('stypy_type_store', module_type_store)
        Anderson._update.__dict__.__setitem__('stypy_function_name', 'Anderson._update')
        Anderson._update.__dict__.__setitem__('stypy_param_names_list', ['x', 'f', 'dx', 'df', 'dx_norm', 'df_norm'])
        Anderson._update.__dict__.__setitem__('stypy_varargs_param_name', None)
        Anderson._update.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Anderson._update.__dict__.__setitem__('stypy_call_defaults', defaults)
        Anderson._update.__dict__.__setitem__('stypy_call_varargs', varargs)
        Anderson._update.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Anderson._update.__dict__.__setitem__('stypy_declared_arg_number', 7)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Anderson._update', ['x', 'f', 'dx', 'df', 'dx_norm', 'df_norm'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update', localization, ['x', 'f', 'dx', 'df', 'dx_norm', 'df_norm'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update(...)' code ##################

        
        
        # Getting the type of 'self' (line 1153)
        self_175691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 11), 'self')
        # Obtaining the member 'M' of a type (line 1153)
        M_175692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1153, 11), self_175691, 'M')
        int_175693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1153, 21), 'int')
        # Applying the binary operator '==' (line 1153)
        result_eq_175694 = python_operator(stypy.reporting.localization.Localization(__file__, 1153, 11), '==', M_175692, int_175693)
        
        # Testing the type of an if condition (line 1153)
        if_condition_175695 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1153, 8), result_eq_175694)
        # Assigning a type to the variable 'if_condition_175695' (line 1153)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1153, 8), 'if_condition_175695', if_condition_175695)
        # SSA begins for if statement (line 1153)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1154, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1153)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 1156)
        # Processing the call arguments (line 1156)
        # Getting the type of 'dx' (line 1156)
        dx_175699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 23), 'dx', False)
        # Processing the call keyword arguments (line 1156)
        kwargs_175700 = {}
        # Getting the type of 'self' (line 1156)
        self_175696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 8), 'self', False)
        # Obtaining the member 'dx' of a type (line 1156)
        dx_175697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1156, 8), self_175696, 'dx')
        # Obtaining the member 'append' of a type (line 1156)
        append_175698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1156, 8), dx_175697, 'append')
        # Calling append(args, kwargs) (line 1156)
        append_call_result_175701 = invoke(stypy.reporting.localization.Localization(__file__, 1156, 8), append_175698, *[dx_175699], **kwargs_175700)
        
        
        # Call to append(...): (line 1157)
        # Processing the call arguments (line 1157)
        # Getting the type of 'df' (line 1157)
        df_175705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 23), 'df', False)
        # Processing the call keyword arguments (line 1157)
        kwargs_175706 = {}
        # Getting the type of 'self' (line 1157)
        self_175702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 8), 'self', False)
        # Obtaining the member 'df' of a type (line 1157)
        df_175703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1157, 8), self_175702, 'df')
        # Obtaining the member 'append' of a type (line 1157)
        append_175704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1157, 8), df_175703, 'append')
        # Calling append(args, kwargs) (line 1157)
        append_call_result_175707 = invoke(stypy.reporting.localization.Localization(__file__, 1157, 8), append_175704, *[df_175705], **kwargs_175706)
        
        
        
        
        # Call to len(...): (line 1159)
        # Processing the call arguments (line 1159)
        # Getting the type of 'self' (line 1159)
        self_175709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 18), 'self', False)
        # Obtaining the member 'dx' of a type (line 1159)
        dx_175710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1159, 18), self_175709, 'dx')
        # Processing the call keyword arguments (line 1159)
        kwargs_175711 = {}
        # Getting the type of 'len' (line 1159)
        len_175708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 14), 'len', False)
        # Calling len(args, kwargs) (line 1159)
        len_call_result_175712 = invoke(stypy.reporting.localization.Localization(__file__, 1159, 14), len_175708, *[dx_175710], **kwargs_175711)
        
        # Getting the type of 'self' (line 1159)
        self_175713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 29), 'self')
        # Obtaining the member 'M' of a type (line 1159)
        M_175714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1159, 29), self_175713, 'M')
        # Applying the binary operator '>' (line 1159)
        result_gt_175715 = python_operator(stypy.reporting.localization.Localization(__file__, 1159, 14), '>', len_call_result_175712, M_175714)
        
        # Testing the type of an if condition (line 1159)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1159, 8), result_gt_175715)
        # SSA begins for while statement (line 1159)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Call to pop(...): (line 1160)
        # Processing the call arguments (line 1160)
        int_175719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1160, 24), 'int')
        # Processing the call keyword arguments (line 1160)
        kwargs_175720 = {}
        # Getting the type of 'self' (line 1160)
        self_175716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 12), 'self', False)
        # Obtaining the member 'dx' of a type (line 1160)
        dx_175717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1160, 12), self_175716, 'dx')
        # Obtaining the member 'pop' of a type (line 1160)
        pop_175718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1160, 12), dx_175717, 'pop')
        # Calling pop(args, kwargs) (line 1160)
        pop_call_result_175721 = invoke(stypy.reporting.localization.Localization(__file__, 1160, 12), pop_175718, *[int_175719], **kwargs_175720)
        
        
        # Call to pop(...): (line 1161)
        # Processing the call arguments (line 1161)
        int_175725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1161, 24), 'int')
        # Processing the call keyword arguments (line 1161)
        kwargs_175726 = {}
        # Getting the type of 'self' (line 1161)
        self_175722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 12), 'self', False)
        # Obtaining the member 'df' of a type (line 1161)
        df_175723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1161, 12), self_175722, 'df')
        # Obtaining the member 'pop' of a type (line 1161)
        pop_175724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1161, 12), df_175723, 'pop')
        # Calling pop(args, kwargs) (line 1161)
        pop_call_result_175727 = invoke(stypy.reporting.localization.Localization(__file__, 1161, 12), pop_175724, *[int_175725], **kwargs_175726)
        
        # SSA join for while statement (line 1159)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1163):
        
        # Assigning a Call to a Name (line 1163):
        
        # Call to len(...): (line 1163)
        # Processing the call arguments (line 1163)
        # Getting the type of 'self' (line 1163)
        self_175729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 16), 'self', False)
        # Obtaining the member 'dx' of a type (line 1163)
        dx_175730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 16), self_175729, 'dx')
        # Processing the call keyword arguments (line 1163)
        kwargs_175731 = {}
        # Getting the type of 'len' (line 1163)
        len_175728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 12), 'len', False)
        # Calling len(args, kwargs) (line 1163)
        len_call_result_175732 = invoke(stypy.reporting.localization.Localization(__file__, 1163, 12), len_175728, *[dx_175730], **kwargs_175731)
        
        # Assigning a type to the variable 'n' (line 1163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 8), 'n', len_call_result_175732)
        
        # Assigning a Call to a Name (line 1164):
        
        # Assigning a Call to a Name (line 1164):
        
        # Call to zeros(...): (line 1164)
        # Processing the call arguments (line 1164)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1164)
        tuple_175735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1164, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1164)
        # Adding element type (line 1164)
        # Getting the type of 'n' (line 1164)
        n_175736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 22), 'n', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1164, 22), tuple_175735, n_175736)
        # Adding element type (line 1164)
        # Getting the type of 'n' (line 1164)
        n_175737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 25), 'n', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1164, 22), tuple_175735, n_175737)
        
        # Processing the call keyword arguments (line 1164)
        # Getting the type of 'f' (line 1164)
        f_175738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 35), 'f', False)
        # Obtaining the member 'dtype' of a type (line 1164)
        dtype_175739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 35), f_175738, 'dtype')
        keyword_175740 = dtype_175739
        kwargs_175741 = {'dtype': keyword_175740}
        # Getting the type of 'np' (line 1164)
        np_175733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 12), 'np', False)
        # Obtaining the member 'zeros' of a type (line 1164)
        zeros_175734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 12), np_175733, 'zeros')
        # Calling zeros(args, kwargs) (line 1164)
        zeros_call_result_175742 = invoke(stypy.reporting.localization.Localization(__file__, 1164, 12), zeros_175734, *[tuple_175735], **kwargs_175741)
        
        # Assigning a type to the variable 'a' (line 1164)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1164, 8), 'a', zeros_call_result_175742)
        
        
        # Call to xrange(...): (line 1166)
        # Processing the call arguments (line 1166)
        # Getting the type of 'n' (line 1166)
        n_175744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 24), 'n', False)
        # Processing the call keyword arguments (line 1166)
        kwargs_175745 = {}
        # Getting the type of 'xrange' (line 1166)
        xrange_175743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 17), 'xrange', False)
        # Calling xrange(args, kwargs) (line 1166)
        xrange_call_result_175746 = invoke(stypy.reporting.localization.Localization(__file__, 1166, 17), xrange_175743, *[n_175744], **kwargs_175745)
        
        # Testing the type of a for loop iterable (line 1166)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1166, 8), xrange_call_result_175746)
        # Getting the type of the for loop variable (line 1166)
        for_loop_var_175747 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1166, 8), xrange_call_result_175746)
        # Assigning a type to the variable 'i' (line 1166)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1166, 8), 'i', for_loop_var_175747)
        # SSA begins for a for statement (line 1166)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to xrange(...): (line 1167)
        # Processing the call arguments (line 1167)
        # Getting the type of 'i' (line 1167)
        i_175749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 28), 'i', False)
        # Getting the type of 'n' (line 1167)
        n_175750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 31), 'n', False)
        # Processing the call keyword arguments (line 1167)
        kwargs_175751 = {}
        # Getting the type of 'xrange' (line 1167)
        xrange_175748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 21), 'xrange', False)
        # Calling xrange(args, kwargs) (line 1167)
        xrange_call_result_175752 = invoke(stypy.reporting.localization.Localization(__file__, 1167, 21), xrange_175748, *[i_175749, n_175750], **kwargs_175751)
        
        # Testing the type of a for loop iterable (line 1167)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1167, 12), xrange_call_result_175752)
        # Getting the type of the for loop variable (line 1167)
        for_loop_var_175753 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1167, 12), xrange_call_result_175752)
        # Assigning a type to the variable 'j' (line 1167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1167, 12), 'j', for_loop_var_175753)
        # SSA begins for a for statement (line 1167)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'i' (line 1168)
        i_175754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 19), 'i')
        # Getting the type of 'j' (line 1168)
        j_175755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 24), 'j')
        # Applying the binary operator '==' (line 1168)
        result_eq_175756 = python_operator(stypy.reporting.localization.Localization(__file__, 1168, 19), '==', i_175754, j_175755)
        
        # Testing the type of an if condition (line 1168)
        if_condition_175757 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1168, 16), result_eq_175756)
        # Assigning a type to the variable 'if_condition_175757' (line 1168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1168, 16), 'if_condition_175757', if_condition_175757)
        # SSA begins for if statement (line 1168)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1169):
        
        # Assigning a BinOp to a Name (line 1169):
        # Getting the type of 'self' (line 1169)
        self_175758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 25), 'self')
        # Obtaining the member 'w0' of a type (line 1169)
        w0_175759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1169, 25), self_175758, 'w0')
        int_175760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1169, 34), 'int')
        # Applying the binary operator '**' (line 1169)
        result_pow_175761 = python_operator(stypy.reporting.localization.Localization(__file__, 1169, 25), '**', w0_175759, int_175760)
        
        # Assigning a type to the variable 'wd' (line 1169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1169, 20), 'wd', result_pow_175761)
        # SSA branch for the else part of an if statement (line 1168)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Name (line 1171):
        
        # Assigning a Num to a Name (line 1171):
        int_175762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1171, 25), 'int')
        # Assigning a type to the variable 'wd' (line 1171)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1171, 20), 'wd', int_175762)
        # SSA join for if statement (line 1168)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Subscript (line 1172):
        
        # Assigning a BinOp to a Subscript (line 1172):
        int_175763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1172, 26), 'int')
        # Getting the type of 'wd' (line 1172)
        wd_175764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 28), 'wd')
        # Applying the binary operator '+' (line 1172)
        result_add_175765 = python_operator(stypy.reporting.localization.Localization(__file__, 1172, 26), '+', int_175763, wd_175764)
        
        
        # Call to vdot(...): (line 1172)
        # Processing the call arguments (line 1172)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1172)
        i_175767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 45), 'i', False)
        # Getting the type of 'self' (line 1172)
        self_175768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 37), 'self', False)
        # Obtaining the member 'df' of a type (line 1172)
        df_175769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1172, 37), self_175768, 'df')
        # Obtaining the member '__getitem__' of a type (line 1172)
        getitem___175770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1172, 37), df_175769, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1172)
        subscript_call_result_175771 = invoke(stypy.reporting.localization.Localization(__file__, 1172, 37), getitem___175770, i_175767)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'j' (line 1172)
        j_175772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 57), 'j', False)
        # Getting the type of 'self' (line 1172)
        self_175773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 49), 'self', False)
        # Obtaining the member 'df' of a type (line 1172)
        df_175774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1172, 49), self_175773, 'df')
        # Obtaining the member '__getitem__' of a type (line 1172)
        getitem___175775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1172, 49), df_175774, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1172)
        subscript_call_result_175776 = invoke(stypy.reporting.localization.Localization(__file__, 1172, 49), getitem___175775, j_175772)
        
        # Processing the call keyword arguments (line 1172)
        kwargs_175777 = {}
        # Getting the type of 'vdot' (line 1172)
        vdot_175766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 32), 'vdot', False)
        # Calling vdot(args, kwargs) (line 1172)
        vdot_call_result_175778 = invoke(stypy.reporting.localization.Localization(__file__, 1172, 32), vdot_175766, *[subscript_call_result_175771, subscript_call_result_175776], **kwargs_175777)
        
        # Applying the binary operator '*' (line 1172)
        result_mul_175779 = python_operator(stypy.reporting.localization.Localization(__file__, 1172, 25), '*', result_add_175765, vdot_call_result_175778)
        
        # Getting the type of 'a' (line 1172)
        a_175780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 16), 'a')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1172)
        tuple_175781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1172, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1172)
        # Adding element type (line 1172)
        # Getting the type of 'i' (line 1172)
        i_175782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 18), 'i')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1172, 18), tuple_175781, i_175782)
        # Adding element type (line 1172)
        # Getting the type of 'j' (line 1172)
        j_175783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 20), 'j')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1172, 18), tuple_175781, j_175783)
        
        # Storing an element on a container (line 1172)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1172, 16), a_175780, (tuple_175781, result_mul_175779))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'a' (line 1174)
        a_175784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 8), 'a')
        
        # Call to conj(...): (line 1174)
        # Processing the call keyword arguments (line 1174)
        kwargs_175793 = {}
        
        # Call to triu(...): (line 1174)
        # Processing the call arguments (line 1174)
        # Getting the type of 'a' (line 1174)
        a_175787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 21), 'a', False)
        int_175788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1174, 24), 'int')
        # Processing the call keyword arguments (line 1174)
        kwargs_175789 = {}
        # Getting the type of 'np' (line 1174)
        np_175785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 13), 'np', False)
        # Obtaining the member 'triu' of a type (line 1174)
        triu_175786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1174, 13), np_175785, 'triu')
        # Calling triu(args, kwargs) (line 1174)
        triu_call_result_175790 = invoke(stypy.reporting.localization.Localization(__file__, 1174, 13), triu_175786, *[a_175787, int_175788], **kwargs_175789)
        
        # Obtaining the member 'T' of a type (line 1174)
        T_175791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1174, 13), triu_call_result_175790, 'T')
        # Obtaining the member 'conj' of a type (line 1174)
        conj_175792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1174, 13), T_175791, 'conj')
        # Calling conj(args, kwargs) (line 1174)
        conj_call_result_175794 = invoke(stypy.reporting.localization.Localization(__file__, 1174, 13), conj_175792, *[], **kwargs_175793)
        
        # Applying the binary operator '+=' (line 1174)
        result_iadd_175795 = python_operator(stypy.reporting.localization.Localization(__file__, 1174, 8), '+=', a_175784, conj_call_result_175794)
        # Assigning a type to the variable 'a' (line 1174)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1174, 8), 'a', result_iadd_175795)
        
        
        # Assigning a Name to a Attribute (line 1175):
        
        # Assigning a Name to a Attribute (line 1175):
        # Getting the type of 'a' (line 1175)
        a_175796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 17), 'a')
        # Getting the type of 'self' (line 1175)
        self_175797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 8), 'self')
        # Setting the type of the member 'a' of a type (line 1175)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 8), self_175797, 'a', a_175796)
        
        # ################# End of '_update(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update' in the type store
        # Getting the type of 'stypy_return_type' (line 1152)
        stypy_return_type_175798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175798)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update'
        return stypy_return_type_175798


# Assigning a type to the variable 'Anderson' (line 1046)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1046, 0), 'Anderson', Anderson)
# Declaration of the 'DiagBroyden' class
# Getting the type of 'GenericBroyden' (line 1182)
GenericBroyden_175799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 18), 'GenericBroyden')

class DiagBroyden(GenericBroyden_175799, ):
    str_175800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1200, (-1)), 'str', '\n    Find a root of a function, using diagonal Broyden Jacobian approximation.\n\n    The Jacobian approximation is derived from previous iterations, by\n    retaining only the diagonal of Broyden matrices.\n\n    .. warning::\n\n       This algorithm may be useful for specific problems, but whether\n       it will work may depend strongly on the problem.\n\n    Parameters\n    ----------\n    %(params_basic)s\n    alpha : float, optional\n        Initial guess for the Jacobian is (-1/alpha).\n    %(params_extra)s\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1202)
        None_175801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 29), 'None')
        defaults = [None_175801]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1202, 4, False)
        # Assigning a type to the variable 'self' (line 1203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1203, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DiagBroyden.__init__', ['alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1203)
        # Processing the call arguments (line 1203)
        # Getting the type of 'self' (line 1203)
        self_175804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 32), 'self', False)
        # Processing the call keyword arguments (line 1203)
        kwargs_175805 = {}
        # Getting the type of 'GenericBroyden' (line 1203)
        GenericBroyden_175802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 8), 'GenericBroyden', False)
        # Obtaining the member '__init__' of a type (line 1203)
        init___175803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1203, 8), GenericBroyden_175802, '__init__')
        # Calling __init__(args, kwargs) (line 1203)
        init___call_result_175806 = invoke(stypy.reporting.localization.Localization(__file__, 1203, 8), init___175803, *[self_175804], **kwargs_175805)
        
        
        # Assigning a Name to a Attribute (line 1204):
        
        # Assigning a Name to a Attribute (line 1204):
        # Getting the type of 'alpha' (line 1204)
        alpha_175807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 21), 'alpha')
        # Getting the type of 'self' (line 1204)
        self_175808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 8), 'self')
        # Setting the type of the member 'alpha' of a type (line 1204)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1204, 8), self_175808, 'alpha', alpha_175807)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def setup(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'setup'
        module_type_store = module_type_store.open_function_context('setup', 1206, 4, False)
        # Assigning a type to the variable 'self' (line 1207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1207, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DiagBroyden.setup.__dict__.__setitem__('stypy_localization', localization)
        DiagBroyden.setup.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DiagBroyden.setup.__dict__.__setitem__('stypy_type_store', module_type_store)
        DiagBroyden.setup.__dict__.__setitem__('stypy_function_name', 'DiagBroyden.setup')
        DiagBroyden.setup.__dict__.__setitem__('stypy_param_names_list', ['x', 'F', 'func'])
        DiagBroyden.setup.__dict__.__setitem__('stypy_varargs_param_name', None)
        DiagBroyden.setup.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DiagBroyden.setup.__dict__.__setitem__('stypy_call_defaults', defaults)
        DiagBroyden.setup.__dict__.__setitem__('stypy_call_varargs', varargs)
        DiagBroyden.setup.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DiagBroyden.setup.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DiagBroyden.setup', ['x', 'F', 'func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'setup', localization, ['x', 'F', 'func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'setup(...)' code ##################

        
        # Call to setup(...): (line 1207)
        # Processing the call arguments (line 1207)
        # Getting the type of 'self' (line 1207)
        self_175811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 29), 'self', False)
        # Getting the type of 'x' (line 1207)
        x_175812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 35), 'x', False)
        # Getting the type of 'F' (line 1207)
        F_175813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 38), 'F', False)
        # Getting the type of 'func' (line 1207)
        func_175814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 41), 'func', False)
        # Processing the call keyword arguments (line 1207)
        kwargs_175815 = {}
        # Getting the type of 'GenericBroyden' (line 1207)
        GenericBroyden_175809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 8), 'GenericBroyden', False)
        # Obtaining the member 'setup' of a type (line 1207)
        setup_175810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1207, 8), GenericBroyden_175809, 'setup')
        # Calling setup(args, kwargs) (line 1207)
        setup_call_result_175816 = invoke(stypy.reporting.localization.Localization(__file__, 1207, 8), setup_175810, *[self_175811, x_175812, F_175813, func_175814], **kwargs_175815)
        
        
        # Assigning a BinOp to a Attribute (line 1208):
        
        # Assigning a BinOp to a Attribute (line 1208):
        
        # Call to ones(...): (line 1208)
        # Processing the call arguments (line 1208)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1208)
        tuple_175819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1208, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1208)
        # Adding element type (line 1208)
        
        # Obtaining the type of the subscript
        int_175820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1208, 37), 'int')
        # Getting the type of 'self' (line 1208)
        self_175821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 26), 'self', False)
        # Obtaining the member 'shape' of a type (line 1208)
        shape_175822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1208, 26), self_175821, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1208)
        getitem___175823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1208, 26), shape_175822, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1208)
        subscript_call_result_175824 = invoke(stypy.reporting.localization.Localization(__file__, 1208, 26), getitem___175823, int_175820)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1208, 26), tuple_175819, subscript_call_result_175824)
        
        # Processing the call keyword arguments (line 1208)
        # Getting the type of 'self' (line 1208)
        self_175825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 49), 'self', False)
        # Obtaining the member 'dtype' of a type (line 1208)
        dtype_175826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1208, 49), self_175825, 'dtype')
        keyword_175827 = dtype_175826
        kwargs_175828 = {'dtype': keyword_175827}
        # Getting the type of 'np' (line 1208)
        np_175817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 17), 'np', False)
        # Obtaining the member 'ones' of a type (line 1208)
        ones_175818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1208, 17), np_175817, 'ones')
        # Calling ones(args, kwargs) (line 1208)
        ones_call_result_175829 = invoke(stypy.reporting.localization.Localization(__file__, 1208, 17), ones_175818, *[tuple_175819], **kwargs_175828)
        
        # Getting the type of 'self' (line 1208)
        self_175830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 63), 'self')
        # Obtaining the member 'alpha' of a type (line 1208)
        alpha_175831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1208, 63), self_175830, 'alpha')
        # Applying the binary operator 'div' (line 1208)
        result_div_175832 = python_operator(stypy.reporting.localization.Localization(__file__, 1208, 17), 'div', ones_call_result_175829, alpha_175831)
        
        # Getting the type of 'self' (line 1208)
        self_175833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 8), 'self')
        # Setting the type of the member 'd' of a type (line 1208)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1208, 8), self_175833, 'd', result_div_175832)
        
        # ################# End of 'setup(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'setup' in the type store
        # Getting the type of 'stypy_return_type' (line 1206)
        stypy_return_type_175834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175834)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'setup'
        return stypy_return_type_175834


    @norecursion
    def solve(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_175835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1210, 27), 'int')
        defaults = [int_175835]
        # Create a new context for function 'solve'
        module_type_store = module_type_store.open_function_context('solve', 1210, 4, False)
        # Assigning a type to the variable 'self' (line 1211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1211, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DiagBroyden.solve.__dict__.__setitem__('stypy_localization', localization)
        DiagBroyden.solve.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DiagBroyden.solve.__dict__.__setitem__('stypy_type_store', module_type_store)
        DiagBroyden.solve.__dict__.__setitem__('stypy_function_name', 'DiagBroyden.solve')
        DiagBroyden.solve.__dict__.__setitem__('stypy_param_names_list', ['f', 'tol'])
        DiagBroyden.solve.__dict__.__setitem__('stypy_varargs_param_name', None)
        DiagBroyden.solve.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DiagBroyden.solve.__dict__.__setitem__('stypy_call_defaults', defaults)
        DiagBroyden.solve.__dict__.__setitem__('stypy_call_varargs', varargs)
        DiagBroyden.solve.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DiagBroyden.solve.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DiagBroyden.solve', ['f', 'tol'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'solve', localization, ['f', 'tol'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'solve(...)' code ##################

        
        # Getting the type of 'f' (line 1211)
        f_175836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 16), 'f')
        # Applying the 'usub' unary operator (line 1211)
        result___neg___175837 = python_operator(stypy.reporting.localization.Localization(__file__, 1211, 15), 'usub', f_175836)
        
        # Getting the type of 'self' (line 1211)
        self_175838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 20), 'self')
        # Obtaining the member 'd' of a type (line 1211)
        d_175839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1211, 20), self_175838, 'd')
        # Applying the binary operator 'div' (line 1211)
        result_div_175840 = python_operator(stypy.reporting.localization.Localization(__file__, 1211, 15), 'div', result___neg___175837, d_175839)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1211, 8), 'stypy_return_type', result_div_175840)
        
        # ################# End of 'solve(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'solve' in the type store
        # Getting the type of 'stypy_return_type' (line 1210)
        stypy_return_type_175841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175841)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'solve'
        return stypy_return_type_175841


    @norecursion
    def matvec(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'matvec'
        module_type_store = module_type_store.open_function_context('matvec', 1213, 4, False)
        # Assigning a type to the variable 'self' (line 1214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DiagBroyden.matvec.__dict__.__setitem__('stypy_localization', localization)
        DiagBroyden.matvec.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DiagBroyden.matvec.__dict__.__setitem__('stypy_type_store', module_type_store)
        DiagBroyden.matvec.__dict__.__setitem__('stypy_function_name', 'DiagBroyden.matvec')
        DiagBroyden.matvec.__dict__.__setitem__('stypy_param_names_list', ['f'])
        DiagBroyden.matvec.__dict__.__setitem__('stypy_varargs_param_name', None)
        DiagBroyden.matvec.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DiagBroyden.matvec.__dict__.__setitem__('stypy_call_defaults', defaults)
        DiagBroyden.matvec.__dict__.__setitem__('stypy_call_varargs', varargs)
        DiagBroyden.matvec.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DiagBroyden.matvec.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DiagBroyden.matvec', ['f'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'matvec', localization, ['f'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'matvec(...)' code ##################

        
        # Getting the type of 'f' (line 1214)
        f_175842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 16), 'f')
        # Applying the 'usub' unary operator (line 1214)
        result___neg___175843 = python_operator(stypy.reporting.localization.Localization(__file__, 1214, 15), 'usub', f_175842)
        
        # Getting the type of 'self' (line 1214)
        self_175844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 20), 'self')
        # Obtaining the member 'd' of a type (line 1214)
        d_175845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1214, 20), self_175844, 'd')
        # Applying the binary operator '*' (line 1214)
        result_mul_175846 = python_operator(stypy.reporting.localization.Localization(__file__, 1214, 15), '*', result___neg___175843, d_175845)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 8), 'stypy_return_type', result_mul_175846)
        
        # ################# End of 'matvec(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'matvec' in the type store
        # Getting the type of 'stypy_return_type' (line 1213)
        stypy_return_type_175847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175847)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'matvec'
        return stypy_return_type_175847


    @norecursion
    def rsolve(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_175848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1216, 28), 'int')
        defaults = [int_175848]
        # Create a new context for function 'rsolve'
        module_type_store = module_type_store.open_function_context('rsolve', 1216, 4, False)
        # Assigning a type to the variable 'self' (line 1217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1217, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DiagBroyden.rsolve.__dict__.__setitem__('stypy_localization', localization)
        DiagBroyden.rsolve.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DiagBroyden.rsolve.__dict__.__setitem__('stypy_type_store', module_type_store)
        DiagBroyden.rsolve.__dict__.__setitem__('stypy_function_name', 'DiagBroyden.rsolve')
        DiagBroyden.rsolve.__dict__.__setitem__('stypy_param_names_list', ['f', 'tol'])
        DiagBroyden.rsolve.__dict__.__setitem__('stypy_varargs_param_name', None)
        DiagBroyden.rsolve.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DiagBroyden.rsolve.__dict__.__setitem__('stypy_call_defaults', defaults)
        DiagBroyden.rsolve.__dict__.__setitem__('stypy_call_varargs', varargs)
        DiagBroyden.rsolve.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DiagBroyden.rsolve.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DiagBroyden.rsolve', ['f', 'tol'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rsolve', localization, ['f', 'tol'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rsolve(...)' code ##################

        
        # Getting the type of 'f' (line 1217)
        f_175849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 16), 'f')
        # Applying the 'usub' unary operator (line 1217)
        result___neg___175850 = python_operator(stypy.reporting.localization.Localization(__file__, 1217, 15), 'usub', f_175849)
        
        
        # Call to conj(...): (line 1217)
        # Processing the call keyword arguments (line 1217)
        kwargs_175854 = {}
        # Getting the type of 'self' (line 1217)
        self_175851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 20), 'self', False)
        # Obtaining the member 'd' of a type (line 1217)
        d_175852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1217, 20), self_175851, 'd')
        # Obtaining the member 'conj' of a type (line 1217)
        conj_175853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1217, 20), d_175852, 'conj')
        # Calling conj(args, kwargs) (line 1217)
        conj_call_result_175855 = invoke(stypy.reporting.localization.Localization(__file__, 1217, 20), conj_175853, *[], **kwargs_175854)
        
        # Applying the binary operator 'div' (line 1217)
        result_div_175856 = python_operator(stypy.reporting.localization.Localization(__file__, 1217, 15), 'div', result___neg___175850, conj_call_result_175855)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1217, 8), 'stypy_return_type', result_div_175856)
        
        # ################# End of 'rsolve(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rsolve' in the type store
        # Getting the type of 'stypy_return_type' (line 1216)
        stypy_return_type_175857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175857)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rsolve'
        return stypy_return_type_175857


    @norecursion
    def rmatvec(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'rmatvec'
        module_type_store = module_type_store.open_function_context('rmatvec', 1219, 4, False)
        # Assigning a type to the variable 'self' (line 1220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1220, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DiagBroyden.rmatvec.__dict__.__setitem__('stypy_localization', localization)
        DiagBroyden.rmatvec.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DiagBroyden.rmatvec.__dict__.__setitem__('stypy_type_store', module_type_store)
        DiagBroyden.rmatvec.__dict__.__setitem__('stypy_function_name', 'DiagBroyden.rmatvec')
        DiagBroyden.rmatvec.__dict__.__setitem__('stypy_param_names_list', ['f'])
        DiagBroyden.rmatvec.__dict__.__setitem__('stypy_varargs_param_name', None)
        DiagBroyden.rmatvec.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DiagBroyden.rmatvec.__dict__.__setitem__('stypy_call_defaults', defaults)
        DiagBroyden.rmatvec.__dict__.__setitem__('stypy_call_varargs', varargs)
        DiagBroyden.rmatvec.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DiagBroyden.rmatvec.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DiagBroyden.rmatvec', ['f'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rmatvec', localization, ['f'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rmatvec(...)' code ##################

        
        # Getting the type of 'f' (line 1220)
        f_175858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 16), 'f')
        # Applying the 'usub' unary operator (line 1220)
        result___neg___175859 = python_operator(stypy.reporting.localization.Localization(__file__, 1220, 15), 'usub', f_175858)
        
        
        # Call to conj(...): (line 1220)
        # Processing the call keyword arguments (line 1220)
        kwargs_175863 = {}
        # Getting the type of 'self' (line 1220)
        self_175860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 20), 'self', False)
        # Obtaining the member 'd' of a type (line 1220)
        d_175861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1220, 20), self_175860, 'd')
        # Obtaining the member 'conj' of a type (line 1220)
        conj_175862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1220, 20), d_175861, 'conj')
        # Calling conj(args, kwargs) (line 1220)
        conj_call_result_175864 = invoke(stypy.reporting.localization.Localization(__file__, 1220, 20), conj_175862, *[], **kwargs_175863)
        
        # Applying the binary operator '*' (line 1220)
        result_mul_175865 = python_operator(stypy.reporting.localization.Localization(__file__, 1220, 15), '*', result___neg___175859, conj_call_result_175864)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1220, 8), 'stypy_return_type', result_mul_175865)
        
        # ################# End of 'rmatvec(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rmatvec' in the type store
        # Getting the type of 'stypy_return_type' (line 1219)
        stypy_return_type_175866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1219, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175866)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rmatvec'
        return stypy_return_type_175866


    @norecursion
    def todense(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'todense'
        module_type_store = module_type_store.open_function_context('todense', 1222, 4, False)
        # Assigning a type to the variable 'self' (line 1223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1223, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DiagBroyden.todense.__dict__.__setitem__('stypy_localization', localization)
        DiagBroyden.todense.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DiagBroyden.todense.__dict__.__setitem__('stypy_type_store', module_type_store)
        DiagBroyden.todense.__dict__.__setitem__('stypy_function_name', 'DiagBroyden.todense')
        DiagBroyden.todense.__dict__.__setitem__('stypy_param_names_list', [])
        DiagBroyden.todense.__dict__.__setitem__('stypy_varargs_param_name', None)
        DiagBroyden.todense.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DiagBroyden.todense.__dict__.__setitem__('stypy_call_defaults', defaults)
        DiagBroyden.todense.__dict__.__setitem__('stypy_call_varargs', varargs)
        DiagBroyden.todense.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DiagBroyden.todense.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DiagBroyden.todense', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'todense', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'todense(...)' code ##################

        
        # Call to diag(...): (line 1223)
        # Processing the call arguments (line 1223)
        
        # Getting the type of 'self' (line 1223)
        self_175869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 24), 'self', False)
        # Obtaining the member 'd' of a type (line 1223)
        d_175870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1223, 24), self_175869, 'd')
        # Applying the 'usub' unary operator (line 1223)
        result___neg___175871 = python_operator(stypy.reporting.localization.Localization(__file__, 1223, 23), 'usub', d_175870)
        
        # Processing the call keyword arguments (line 1223)
        kwargs_175872 = {}
        # Getting the type of 'np' (line 1223)
        np_175867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 15), 'np', False)
        # Obtaining the member 'diag' of a type (line 1223)
        diag_175868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1223, 15), np_175867, 'diag')
        # Calling diag(args, kwargs) (line 1223)
        diag_call_result_175873 = invoke(stypy.reporting.localization.Localization(__file__, 1223, 15), diag_175868, *[result___neg___175871], **kwargs_175872)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1223, 8), 'stypy_return_type', diag_call_result_175873)
        
        # ################# End of 'todense(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'todense' in the type store
        # Getting the type of 'stypy_return_type' (line 1222)
        stypy_return_type_175874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175874)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'todense'
        return stypy_return_type_175874


    @norecursion
    def _update(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update'
        module_type_store = module_type_store.open_function_context('_update', 1225, 4, False)
        # Assigning a type to the variable 'self' (line 1226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1226, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DiagBroyden._update.__dict__.__setitem__('stypy_localization', localization)
        DiagBroyden._update.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DiagBroyden._update.__dict__.__setitem__('stypy_type_store', module_type_store)
        DiagBroyden._update.__dict__.__setitem__('stypy_function_name', 'DiagBroyden._update')
        DiagBroyden._update.__dict__.__setitem__('stypy_param_names_list', ['x', 'f', 'dx', 'df', 'dx_norm', 'df_norm'])
        DiagBroyden._update.__dict__.__setitem__('stypy_varargs_param_name', None)
        DiagBroyden._update.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DiagBroyden._update.__dict__.__setitem__('stypy_call_defaults', defaults)
        DiagBroyden._update.__dict__.__setitem__('stypy_call_varargs', varargs)
        DiagBroyden._update.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DiagBroyden._update.__dict__.__setitem__('stypy_declared_arg_number', 7)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DiagBroyden._update', ['x', 'f', 'dx', 'df', 'dx_norm', 'df_norm'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update', localization, ['x', 'f', 'dx', 'df', 'dx_norm', 'df_norm'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update(...)' code ##################

        
        # Getting the type of 'self' (line 1226)
        self_175875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 8), 'self')
        # Obtaining the member 'd' of a type (line 1226)
        d_175876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1226, 8), self_175875, 'd')
        # Getting the type of 'df' (line 1226)
        df_175877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 19), 'df')
        # Getting the type of 'self' (line 1226)
        self_175878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 24), 'self')
        # Obtaining the member 'd' of a type (line 1226)
        d_175879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1226, 24), self_175878, 'd')
        # Getting the type of 'dx' (line 1226)
        dx_175880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 31), 'dx')
        # Applying the binary operator '*' (line 1226)
        result_mul_175881 = python_operator(stypy.reporting.localization.Localization(__file__, 1226, 24), '*', d_175879, dx_175880)
        
        # Applying the binary operator '+' (line 1226)
        result_add_175882 = python_operator(stypy.reporting.localization.Localization(__file__, 1226, 19), '+', df_175877, result_mul_175881)
        
        # Getting the type of 'dx' (line 1226)
        dx_175883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 35), 'dx')
        # Applying the binary operator '*' (line 1226)
        result_mul_175884 = python_operator(stypy.reporting.localization.Localization(__file__, 1226, 18), '*', result_add_175882, dx_175883)
        
        # Getting the type of 'dx_norm' (line 1226)
        dx_norm_175885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 38), 'dx_norm')
        int_175886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1226, 47), 'int')
        # Applying the binary operator '**' (line 1226)
        result_pow_175887 = python_operator(stypy.reporting.localization.Localization(__file__, 1226, 38), '**', dx_norm_175885, int_175886)
        
        # Applying the binary operator 'div' (line 1226)
        result_div_175888 = python_operator(stypy.reporting.localization.Localization(__file__, 1226, 37), 'div', result_mul_175884, result_pow_175887)
        
        # Applying the binary operator '-=' (line 1226)
        result_isub_175889 = python_operator(stypy.reporting.localization.Localization(__file__, 1226, 8), '-=', d_175876, result_div_175888)
        # Getting the type of 'self' (line 1226)
        self_175890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 8), 'self')
        # Setting the type of the member 'd' of a type (line 1226)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1226, 8), self_175890, 'd', result_isub_175889)
        
        
        # ################# End of '_update(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update' in the type store
        # Getting the type of 'stypy_return_type' (line 1225)
        stypy_return_type_175891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175891)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update'
        return stypy_return_type_175891


# Assigning a type to the variable 'DiagBroyden' (line 1182)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1182, 0), 'DiagBroyden', DiagBroyden)
# Declaration of the 'LinearMixing' class
# Getting the type of 'GenericBroyden' (line 1229)
GenericBroyden_175892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 19), 'GenericBroyden')

class LinearMixing(GenericBroyden_175892, ):
    str_175893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1244, (-1)), 'str', '\n    Find a root of a function, using a scalar Jacobian approximation.\n\n    .. warning::\n\n       This algorithm may be useful for specific problems, but whether\n       it will work may depend strongly on the problem.\n\n    Parameters\n    ----------\n    %(params_basic)s\n    alpha : float, optional\n        The Jacobian approximation is (-1/alpha).\n    %(params_extra)s\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1246)
        None_175894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 29), 'None')
        defaults = [None_175894]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1246, 4, False)
        # Assigning a type to the variable 'self' (line 1247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1247, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearMixing.__init__', ['alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1247)
        # Processing the call arguments (line 1247)
        # Getting the type of 'self' (line 1247)
        self_175897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 32), 'self', False)
        # Processing the call keyword arguments (line 1247)
        kwargs_175898 = {}
        # Getting the type of 'GenericBroyden' (line 1247)
        GenericBroyden_175895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 8), 'GenericBroyden', False)
        # Obtaining the member '__init__' of a type (line 1247)
        init___175896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1247, 8), GenericBroyden_175895, '__init__')
        # Calling __init__(args, kwargs) (line 1247)
        init___call_result_175899 = invoke(stypy.reporting.localization.Localization(__file__, 1247, 8), init___175896, *[self_175897], **kwargs_175898)
        
        
        # Assigning a Name to a Attribute (line 1248):
        
        # Assigning a Name to a Attribute (line 1248):
        # Getting the type of 'alpha' (line 1248)
        alpha_175900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 21), 'alpha')
        # Getting the type of 'self' (line 1248)
        self_175901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 8), 'self')
        # Setting the type of the member 'alpha' of a type (line 1248)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1248, 8), self_175901, 'alpha', alpha_175900)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def solve(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_175902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1250, 27), 'int')
        defaults = [int_175902]
        # Create a new context for function 'solve'
        module_type_store = module_type_store.open_function_context('solve', 1250, 4, False)
        # Assigning a type to the variable 'self' (line 1251)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1251, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinearMixing.solve.__dict__.__setitem__('stypy_localization', localization)
        LinearMixing.solve.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinearMixing.solve.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearMixing.solve.__dict__.__setitem__('stypy_function_name', 'LinearMixing.solve')
        LinearMixing.solve.__dict__.__setitem__('stypy_param_names_list', ['f', 'tol'])
        LinearMixing.solve.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinearMixing.solve.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinearMixing.solve.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearMixing.solve.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearMixing.solve.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearMixing.solve.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearMixing.solve', ['f', 'tol'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'solve', localization, ['f', 'tol'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'solve(...)' code ##################

        
        # Getting the type of 'f' (line 1251)
        f_175903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 16), 'f')
        # Applying the 'usub' unary operator (line 1251)
        result___neg___175904 = python_operator(stypy.reporting.localization.Localization(__file__, 1251, 15), 'usub', f_175903)
        
        # Getting the type of 'self' (line 1251)
        self_175905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 18), 'self')
        # Obtaining the member 'alpha' of a type (line 1251)
        alpha_175906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1251, 18), self_175905, 'alpha')
        # Applying the binary operator '*' (line 1251)
        result_mul_175907 = python_operator(stypy.reporting.localization.Localization(__file__, 1251, 15), '*', result___neg___175904, alpha_175906)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1251)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1251, 8), 'stypy_return_type', result_mul_175907)
        
        # ################# End of 'solve(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'solve' in the type store
        # Getting the type of 'stypy_return_type' (line 1250)
        stypy_return_type_175908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175908)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'solve'
        return stypy_return_type_175908


    @norecursion
    def matvec(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'matvec'
        module_type_store = module_type_store.open_function_context('matvec', 1253, 4, False)
        # Assigning a type to the variable 'self' (line 1254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1254, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinearMixing.matvec.__dict__.__setitem__('stypy_localization', localization)
        LinearMixing.matvec.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinearMixing.matvec.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearMixing.matvec.__dict__.__setitem__('stypy_function_name', 'LinearMixing.matvec')
        LinearMixing.matvec.__dict__.__setitem__('stypy_param_names_list', ['f'])
        LinearMixing.matvec.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinearMixing.matvec.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinearMixing.matvec.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearMixing.matvec.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearMixing.matvec.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearMixing.matvec.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearMixing.matvec', ['f'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'matvec', localization, ['f'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'matvec(...)' code ##################

        
        # Getting the type of 'f' (line 1254)
        f_175909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 16), 'f')
        # Applying the 'usub' unary operator (line 1254)
        result___neg___175910 = python_operator(stypy.reporting.localization.Localization(__file__, 1254, 15), 'usub', f_175909)
        
        # Getting the type of 'self' (line 1254)
        self_175911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 18), 'self')
        # Obtaining the member 'alpha' of a type (line 1254)
        alpha_175912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1254, 18), self_175911, 'alpha')
        # Applying the binary operator 'div' (line 1254)
        result_div_175913 = python_operator(stypy.reporting.localization.Localization(__file__, 1254, 15), 'div', result___neg___175910, alpha_175912)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1254, 8), 'stypy_return_type', result_div_175913)
        
        # ################# End of 'matvec(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'matvec' in the type store
        # Getting the type of 'stypy_return_type' (line 1253)
        stypy_return_type_175914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175914)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'matvec'
        return stypy_return_type_175914


    @norecursion
    def rsolve(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_175915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1256, 28), 'int')
        defaults = [int_175915]
        # Create a new context for function 'rsolve'
        module_type_store = module_type_store.open_function_context('rsolve', 1256, 4, False)
        # Assigning a type to the variable 'self' (line 1257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1257, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinearMixing.rsolve.__dict__.__setitem__('stypy_localization', localization)
        LinearMixing.rsolve.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinearMixing.rsolve.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearMixing.rsolve.__dict__.__setitem__('stypy_function_name', 'LinearMixing.rsolve')
        LinearMixing.rsolve.__dict__.__setitem__('stypy_param_names_list', ['f', 'tol'])
        LinearMixing.rsolve.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinearMixing.rsolve.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinearMixing.rsolve.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearMixing.rsolve.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearMixing.rsolve.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearMixing.rsolve.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearMixing.rsolve', ['f', 'tol'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rsolve', localization, ['f', 'tol'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rsolve(...)' code ##################

        
        # Getting the type of 'f' (line 1257)
        f_175916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 16), 'f')
        # Applying the 'usub' unary operator (line 1257)
        result___neg___175917 = python_operator(stypy.reporting.localization.Localization(__file__, 1257, 15), 'usub', f_175916)
        
        
        # Call to conj(...): (line 1257)
        # Processing the call arguments (line 1257)
        # Getting the type of 'self' (line 1257)
        self_175920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 26), 'self', False)
        # Obtaining the member 'alpha' of a type (line 1257)
        alpha_175921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1257, 26), self_175920, 'alpha')
        # Processing the call keyword arguments (line 1257)
        kwargs_175922 = {}
        # Getting the type of 'np' (line 1257)
        np_175918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 18), 'np', False)
        # Obtaining the member 'conj' of a type (line 1257)
        conj_175919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1257, 18), np_175918, 'conj')
        # Calling conj(args, kwargs) (line 1257)
        conj_call_result_175923 = invoke(stypy.reporting.localization.Localization(__file__, 1257, 18), conj_175919, *[alpha_175921], **kwargs_175922)
        
        # Applying the binary operator '*' (line 1257)
        result_mul_175924 = python_operator(stypy.reporting.localization.Localization(__file__, 1257, 15), '*', result___neg___175917, conj_call_result_175923)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1257, 8), 'stypy_return_type', result_mul_175924)
        
        # ################# End of 'rsolve(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rsolve' in the type store
        # Getting the type of 'stypy_return_type' (line 1256)
        stypy_return_type_175925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175925)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rsolve'
        return stypy_return_type_175925


    @norecursion
    def rmatvec(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'rmatvec'
        module_type_store = module_type_store.open_function_context('rmatvec', 1259, 4, False)
        # Assigning a type to the variable 'self' (line 1260)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1260, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinearMixing.rmatvec.__dict__.__setitem__('stypy_localization', localization)
        LinearMixing.rmatvec.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinearMixing.rmatvec.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearMixing.rmatvec.__dict__.__setitem__('stypy_function_name', 'LinearMixing.rmatvec')
        LinearMixing.rmatvec.__dict__.__setitem__('stypy_param_names_list', ['f'])
        LinearMixing.rmatvec.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinearMixing.rmatvec.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinearMixing.rmatvec.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearMixing.rmatvec.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearMixing.rmatvec.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearMixing.rmatvec.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearMixing.rmatvec', ['f'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rmatvec', localization, ['f'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rmatvec(...)' code ##################

        
        # Getting the type of 'f' (line 1260)
        f_175926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 16), 'f')
        # Applying the 'usub' unary operator (line 1260)
        result___neg___175927 = python_operator(stypy.reporting.localization.Localization(__file__, 1260, 15), 'usub', f_175926)
        
        
        # Call to conj(...): (line 1260)
        # Processing the call arguments (line 1260)
        # Getting the type of 'self' (line 1260)
        self_175930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 26), 'self', False)
        # Obtaining the member 'alpha' of a type (line 1260)
        alpha_175931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1260, 26), self_175930, 'alpha')
        # Processing the call keyword arguments (line 1260)
        kwargs_175932 = {}
        # Getting the type of 'np' (line 1260)
        np_175928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 18), 'np', False)
        # Obtaining the member 'conj' of a type (line 1260)
        conj_175929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1260, 18), np_175928, 'conj')
        # Calling conj(args, kwargs) (line 1260)
        conj_call_result_175933 = invoke(stypy.reporting.localization.Localization(__file__, 1260, 18), conj_175929, *[alpha_175931], **kwargs_175932)
        
        # Applying the binary operator 'div' (line 1260)
        result_div_175934 = python_operator(stypy.reporting.localization.Localization(__file__, 1260, 15), 'div', result___neg___175927, conj_call_result_175933)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1260)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1260, 8), 'stypy_return_type', result_div_175934)
        
        # ################# End of 'rmatvec(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rmatvec' in the type store
        # Getting the type of 'stypy_return_type' (line 1259)
        stypy_return_type_175935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175935)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rmatvec'
        return stypy_return_type_175935


    @norecursion
    def todense(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'todense'
        module_type_store = module_type_store.open_function_context('todense', 1262, 4, False)
        # Assigning a type to the variable 'self' (line 1263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1263, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinearMixing.todense.__dict__.__setitem__('stypy_localization', localization)
        LinearMixing.todense.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinearMixing.todense.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearMixing.todense.__dict__.__setitem__('stypy_function_name', 'LinearMixing.todense')
        LinearMixing.todense.__dict__.__setitem__('stypy_param_names_list', [])
        LinearMixing.todense.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinearMixing.todense.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinearMixing.todense.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearMixing.todense.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearMixing.todense.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearMixing.todense.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearMixing.todense', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'todense', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'todense(...)' code ##################

        
        # Call to diag(...): (line 1263)
        # Processing the call arguments (line 1263)
        
        
        # Call to ones(...): (line 1263)
        # Processing the call arguments (line 1263)
        
        # Obtaining the type of the subscript
        int_175940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1263, 43), 'int')
        # Getting the type of 'self' (line 1263)
        self_175941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 32), 'self', False)
        # Obtaining the member 'shape' of a type (line 1263)
        shape_175942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1263, 32), self_175941, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1263)
        getitem___175943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1263, 32), shape_175942, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1263)
        subscript_call_result_175944 = invoke(stypy.reporting.localization.Localization(__file__, 1263, 32), getitem___175943, int_175940)
        
        # Processing the call keyword arguments (line 1263)
        kwargs_175945 = {}
        # Getting the type of 'np' (line 1263)
        np_175938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 24), 'np', False)
        # Obtaining the member 'ones' of a type (line 1263)
        ones_175939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1263, 24), np_175938, 'ones')
        # Calling ones(args, kwargs) (line 1263)
        ones_call_result_175946 = invoke(stypy.reporting.localization.Localization(__file__, 1263, 24), ones_175939, *[subscript_call_result_175944], **kwargs_175945)
        
        # Applying the 'usub' unary operator (line 1263)
        result___neg___175947 = python_operator(stypy.reporting.localization.Localization(__file__, 1263, 23), 'usub', ones_call_result_175946)
        
        # Getting the type of 'self' (line 1263)
        self_175948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 47), 'self', False)
        # Obtaining the member 'alpha' of a type (line 1263)
        alpha_175949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1263, 47), self_175948, 'alpha')
        # Applying the binary operator 'div' (line 1263)
        result_div_175950 = python_operator(stypy.reporting.localization.Localization(__file__, 1263, 23), 'div', result___neg___175947, alpha_175949)
        
        # Processing the call keyword arguments (line 1263)
        kwargs_175951 = {}
        # Getting the type of 'np' (line 1263)
        np_175936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 15), 'np', False)
        # Obtaining the member 'diag' of a type (line 1263)
        diag_175937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1263, 15), np_175936, 'diag')
        # Calling diag(args, kwargs) (line 1263)
        diag_call_result_175952 = invoke(stypy.reporting.localization.Localization(__file__, 1263, 15), diag_175937, *[result_div_175950], **kwargs_175951)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1263, 8), 'stypy_return_type', diag_call_result_175952)
        
        # ################# End of 'todense(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'todense' in the type store
        # Getting the type of 'stypy_return_type' (line 1262)
        stypy_return_type_175953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175953)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'todense'
        return stypy_return_type_175953


    @norecursion
    def _update(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update'
        module_type_store = module_type_store.open_function_context('_update', 1265, 4, False)
        # Assigning a type to the variable 'self' (line 1266)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1266, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinearMixing._update.__dict__.__setitem__('stypy_localization', localization)
        LinearMixing._update.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinearMixing._update.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearMixing._update.__dict__.__setitem__('stypy_function_name', 'LinearMixing._update')
        LinearMixing._update.__dict__.__setitem__('stypy_param_names_list', ['x', 'f', 'dx', 'df', 'dx_norm', 'df_norm'])
        LinearMixing._update.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinearMixing._update.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinearMixing._update.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearMixing._update.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearMixing._update.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearMixing._update.__dict__.__setitem__('stypy_declared_arg_number', 7)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearMixing._update', ['x', 'f', 'dx', 'df', 'dx_norm', 'df_norm'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update', localization, ['x', 'f', 'dx', 'df', 'dx_norm', 'df_norm'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update(...)' code ##################

        pass
        
        # ################# End of '_update(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update' in the type store
        # Getting the type of 'stypy_return_type' (line 1265)
        stypy_return_type_175954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175954)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update'
        return stypy_return_type_175954


# Assigning a type to the variable 'LinearMixing' (line 1229)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1229, 0), 'LinearMixing', LinearMixing)
# Declaration of the 'ExcitingMixing' class
# Getting the type of 'GenericBroyden' (line 1269)
GenericBroyden_175955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 21), 'GenericBroyden')

class ExcitingMixing(GenericBroyden_175955, ):
    str_175956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1289, (-1)), 'str', '\n    Find a root of a function, using a tuned diagonal Jacobian approximation.\n\n    The Jacobian matrix is diagonal and is tuned on each iteration.\n\n    .. warning::\n\n       This algorithm may be useful for specific problems, but whether\n       it will work may depend strongly on the problem.\n\n    Parameters\n    ----------\n    %(params_basic)s\n    alpha : float, optional\n        Initial Jacobian approximation is (-1/alpha).\n    alphamax : float, optional\n        The entries of the diagonal Jacobian are kept in the range\n        ``[alpha, alphamax]``.\n    %(params_extra)s\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1291)
        None_175957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 29), 'None')
        float_175958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1291, 44), 'float')
        defaults = [None_175957, float_175958]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1291, 4, False)
        # Assigning a type to the variable 'self' (line 1292)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1292, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ExcitingMixing.__init__', ['alpha', 'alphamax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['alpha', 'alphamax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1292)
        # Processing the call arguments (line 1292)
        # Getting the type of 'self' (line 1292)
        self_175961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 32), 'self', False)
        # Processing the call keyword arguments (line 1292)
        kwargs_175962 = {}
        # Getting the type of 'GenericBroyden' (line 1292)
        GenericBroyden_175959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 8), 'GenericBroyden', False)
        # Obtaining the member '__init__' of a type (line 1292)
        init___175960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1292, 8), GenericBroyden_175959, '__init__')
        # Calling __init__(args, kwargs) (line 1292)
        init___call_result_175963 = invoke(stypy.reporting.localization.Localization(__file__, 1292, 8), init___175960, *[self_175961], **kwargs_175962)
        
        
        # Assigning a Name to a Attribute (line 1293):
        
        # Assigning a Name to a Attribute (line 1293):
        # Getting the type of 'alpha' (line 1293)
        alpha_175964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 21), 'alpha')
        # Getting the type of 'self' (line 1293)
        self_175965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 8), 'self')
        # Setting the type of the member 'alpha' of a type (line 1293)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1293, 8), self_175965, 'alpha', alpha_175964)
        
        # Assigning a Name to a Attribute (line 1294):
        
        # Assigning a Name to a Attribute (line 1294):
        # Getting the type of 'alphamax' (line 1294)
        alphamax_175966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 24), 'alphamax')
        # Getting the type of 'self' (line 1294)
        self_175967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 8), 'self')
        # Setting the type of the member 'alphamax' of a type (line 1294)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 8), self_175967, 'alphamax', alphamax_175966)
        
        # Assigning a Name to a Attribute (line 1295):
        
        # Assigning a Name to a Attribute (line 1295):
        # Getting the type of 'None' (line 1295)
        None_175968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 20), 'None')
        # Getting the type of 'self' (line 1295)
        self_175969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 8), 'self')
        # Setting the type of the member 'beta' of a type (line 1295)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1295, 8), self_175969, 'beta', None_175968)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def setup(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'setup'
        module_type_store = module_type_store.open_function_context('setup', 1297, 4, False)
        # Assigning a type to the variable 'self' (line 1298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1298, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ExcitingMixing.setup.__dict__.__setitem__('stypy_localization', localization)
        ExcitingMixing.setup.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ExcitingMixing.setup.__dict__.__setitem__('stypy_type_store', module_type_store)
        ExcitingMixing.setup.__dict__.__setitem__('stypy_function_name', 'ExcitingMixing.setup')
        ExcitingMixing.setup.__dict__.__setitem__('stypy_param_names_list', ['x', 'F', 'func'])
        ExcitingMixing.setup.__dict__.__setitem__('stypy_varargs_param_name', None)
        ExcitingMixing.setup.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ExcitingMixing.setup.__dict__.__setitem__('stypy_call_defaults', defaults)
        ExcitingMixing.setup.__dict__.__setitem__('stypy_call_varargs', varargs)
        ExcitingMixing.setup.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ExcitingMixing.setup.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ExcitingMixing.setup', ['x', 'F', 'func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'setup', localization, ['x', 'F', 'func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'setup(...)' code ##################

        
        # Call to setup(...): (line 1298)
        # Processing the call arguments (line 1298)
        # Getting the type of 'self' (line 1298)
        self_175972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 29), 'self', False)
        # Getting the type of 'x' (line 1298)
        x_175973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 35), 'x', False)
        # Getting the type of 'F' (line 1298)
        F_175974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 38), 'F', False)
        # Getting the type of 'func' (line 1298)
        func_175975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 41), 'func', False)
        # Processing the call keyword arguments (line 1298)
        kwargs_175976 = {}
        # Getting the type of 'GenericBroyden' (line 1298)
        GenericBroyden_175970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 8), 'GenericBroyden', False)
        # Obtaining the member 'setup' of a type (line 1298)
        setup_175971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 8), GenericBroyden_175970, 'setup')
        # Calling setup(args, kwargs) (line 1298)
        setup_call_result_175977 = invoke(stypy.reporting.localization.Localization(__file__, 1298, 8), setup_175971, *[self_175972, x_175973, F_175974, func_175975], **kwargs_175976)
        
        
        # Assigning a BinOp to a Attribute (line 1299):
        
        # Assigning a BinOp to a Attribute (line 1299):
        # Getting the type of 'self' (line 1299)
        self_175978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 20), 'self')
        # Obtaining the member 'alpha' of a type (line 1299)
        alpha_175979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 20), self_175978, 'alpha')
        
        # Call to ones(...): (line 1299)
        # Processing the call arguments (line 1299)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1299)
        tuple_175982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1299, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1299)
        # Adding element type (line 1299)
        
        # Obtaining the type of the subscript
        int_175983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1299, 53), 'int')
        # Getting the type of 'self' (line 1299)
        self_175984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 42), 'self', False)
        # Obtaining the member 'shape' of a type (line 1299)
        shape_175985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 42), self_175984, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1299)
        getitem___175986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 42), shape_175985, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1299)
        subscript_call_result_175987 = invoke(stypy.reporting.localization.Localization(__file__, 1299, 42), getitem___175986, int_175983)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1299, 42), tuple_175982, subscript_call_result_175987)
        
        # Processing the call keyword arguments (line 1299)
        # Getting the type of 'self' (line 1299)
        self_175988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 65), 'self', False)
        # Obtaining the member 'dtype' of a type (line 1299)
        dtype_175989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 65), self_175988, 'dtype')
        keyword_175990 = dtype_175989
        kwargs_175991 = {'dtype': keyword_175990}
        # Getting the type of 'np' (line 1299)
        np_175980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 33), 'np', False)
        # Obtaining the member 'ones' of a type (line 1299)
        ones_175981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 33), np_175980, 'ones')
        # Calling ones(args, kwargs) (line 1299)
        ones_call_result_175992 = invoke(stypy.reporting.localization.Localization(__file__, 1299, 33), ones_175981, *[tuple_175982], **kwargs_175991)
        
        # Applying the binary operator '*' (line 1299)
        result_mul_175993 = python_operator(stypy.reporting.localization.Localization(__file__, 1299, 20), '*', alpha_175979, ones_call_result_175992)
        
        # Getting the type of 'self' (line 1299)
        self_175994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 8), 'self')
        # Setting the type of the member 'beta' of a type (line 1299)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 8), self_175994, 'beta', result_mul_175993)
        
        # ################# End of 'setup(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'setup' in the type store
        # Getting the type of 'stypy_return_type' (line 1297)
        stypy_return_type_175995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_175995)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'setup'
        return stypy_return_type_175995


    @norecursion
    def solve(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_175996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1301, 27), 'int')
        defaults = [int_175996]
        # Create a new context for function 'solve'
        module_type_store = module_type_store.open_function_context('solve', 1301, 4, False)
        # Assigning a type to the variable 'self' (line 1302)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1302, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ExcitingMixing.solve.__dict__.__setitem__('stypy_localization', localization)
        ExcitingMixing.solve.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ExcitingMixing.solve.__dict__.__setitem__('stypy_type_store', module_type_store)
        ExcitingMixing.solve.__dict__.__setitem__('stypy_function_name', 'ExcitingMixing.solve')
        ExcitingMixing.solve.__dict__.__setitem__('stypy_param_names_list', ['f', 'tol'])
        ExcitingMixing.solve.__dict__.__setitem__('stypy_varargs_param_name', None)
        ExcitingMixing.solve.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ExcitingMixing.solve.__dict__.__setitem__('stypy_call_defaults', defaults)
        ExcitingMixing.solve.__dict__.__setitem__('stypy_call_varargs', varargs)
        ExcitingMixing.solve.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ExcitingMixing.solve.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ExcitingMixing.solve', ['f', 'tol'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'solve', localization, ['f', 'tol'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'solve(...)' code ##################

        
        # Getting the type of 'f' (line 1302)
        f_175997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 16), 'f')
        # Applying the 'usub' unary operator (line 1302)
        result___neg___175998 = python_operator(stypy.reporting.localization.Localization(__file__, 1302, 15), 'usub', f_175997)
        
        # Getting the type of 'self' (line 1302)
        self_175999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 18), 'self')
        # Obtaining the member 'beta' of a type (line 1302)
        beta_176000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 18), self_175999, 'beta')
        # Applying the binary operator '*' (line 1302)
        result_mul_176001 = python_operator(stypy.reporting.localization.Localization(__file__, 1302, 15), '*', result___neg___175998, beta_176000)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1302)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1302, 8), 'stypy_return_type', result_mul_176001)
        
        # ################# End of 'solve(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'solve' in the type store
        # Getting the type of 'stypy_return_type' (line 1301)
        stypy_return_type_176002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_176002)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'solve'
        return stypy_return_type_176002


    @norecursion
    def matvec(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'matvec'
        module_type_store = module_type_store.open_function_context('matvec', 1304, 4, False)
        # Assigning a type to the variable 'self' (line 1305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1305, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ExcitingMixing.matvec.__dict__.__setitem__('stypy_localization', localization)
        ExcitingMixing.matvec.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ExcitingMixing.matvec.__dict__.__setitem__('stypy_type_store', module_type_store)
        ExcitingMixing.matvec.__dict__.__setitem__('stypy_function_name', 'ExcitingMixing.matvec')
        ExcitingMixing.matvec.__dict__.__setitem__('stypy_param_names_list', ['f'])
        ExcitingMixing.matvec.__dict__.__setitem__('stypy_varargs_param_name', None)
        ExcitingMixing.matvec.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ExcitingMixing.matvec.__dict__.__setitem__('stypy_call_defaults', defaults)
        ExcitingMixing.matvec.__dict__.__setitem__('stypy_call_varargs', varargs)
        ExcitingMixing.matvec.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ExcitingMixing.matvec.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ExcitingMixing.matvec', ['f'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'matvec', localization, ['f'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'matvec(...)' code ##################

        
        # Getting the type of 'f' (line 1305)
        f_176003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 16), 'f')
        # Applying the 'usub' unary operator (line 1305)
        result___neg___176004 = python_operator(stypy.reporting.localization.Localization(__file__, 1305, 15), 'usub', f_176003)
        
        # Getting the type of 'self' (line 1305)
        self_176005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 18), 'self')
        # Obtaining the member 'beta' of a type (line 1305)
        beta_176006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 18), self_176005, 'beta')
        # Applying the binary operator 'div' (line 1305)
        result_div_176007 = python_operator(stypy.reporting.localization.Localization(__file__, 1305, 15), 'div', result___neg___176004, beta_176006)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1305, 8), 'stypy_return_type', result_div_176007)
        
        # ################# End of 'matvec(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'matvec' in the type store
        # Getting the type of 'stypy_return_type' (line 1304)
        stypy_return_type_176008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_176008)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'matvec'
        return stypy_return_type_176008


    @norecursion
    def rsolve(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_176009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1307, 28), 'int')
        defaults = [int_176009]
        # Create a new context for function 'rsolve'
        module_type_store = module_type_store.open_function_context('rsolve', 1307, 4, False)
        # Assigning a type to the variable 'self' (line 1308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1308, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ExcitingMixing.rsolve.__dict__.__setitem__('stypy_localization', localization)
        ExcitingMixing.rsolve.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ExcitingMixing.rsolve.__dict__.__setitem__('stypy_type_store', module_type_store)
        ExcitingMixing.rsolve.__dict__.__setitem__('stypy_function_name', 'ExcitingMixing.rsolve')
        ExcitingMixing.rsolve.__dict__.__setitem__('stypy_param_names_list', ['f', 'tol'])
        ExcitingMixing.rsolve.__dict__.__setitem__('stypy_varargs_param_name', None)
        ExcitingMixing.rsolve.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ExcitingMixing.rsolve.__dict__.__setitem__('stypy_call_defaults', defaults)
        ExcitingMixing.rsolve.__dict__.__setitem__('stypy_call_varargs', varargs)
        ExcitingMixing.rsolve.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ExcitingMixing.rsolve.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ExcitingMixing.rsolve', ['f', 'tol'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rsolve', localization, ['f', 'tol'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rsolve(...)' code ##################

        
        # Getting the type of 'f' (line 1308)
        f_176010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 16), 'f')
        # Applying the 'usub' unary operator (line 1308)
        result___neg___176011 = python_operator(stypy.reporting.localization.Localization(__file__, 1308, 15), 'usub', f_176010)
        
        
        # Call to conj(...): (line 1308)
        # Processing the call keyword arguments (line 1308)
        kwargs_176015 = {}
        # Getting the type of 'self' (line 1308)
        self_176012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 18), 'self', False)
        # Obtaining the member 'beta' of a type (line 1308)
        beta_176013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1308, 18), self_176012, 'beta')
        # Obtaining the member 'conj' of a type (line 1308)
        conj_176014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1308, 18), beta_176013, 'conj')
        # Calling conj(args, kwargs) (line 1308)
        conj_call_result_176016 = invoke(stypy.reporting.localization.Localization(__file__, 1308, 18), conj_176014, *[], **kwargs_176015)
        
        # Applying the binary operator '*' (line 1308)
        result_mul_176017 = python_operator(stypy.reporting.localization.Localization(__file__, 1308, 15), '*', result___neg___176011, conj_call_result_176016)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1308, 8), 'stypy_return_type', result_mul_176017)
        
        # ################# End of 'rsolve(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rsolve' in the type store
        # Getting the type of 'stypy_return_type' (line 1307)
        stypy_return_type_176018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_176018)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rsolve'
        return stypy_return_type_176018


    @norecursion
    def rmatvec(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'rmatvec'
        module_type_store = module_type_store.open_function_context('rmatvec', 1310, 4, False)
        # Assigning a type to the variable 'self' (line 1311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1311, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ExcitingMixing.rmatvec.__dict__.__setitem__('stypy_localization', localization)
        ExcitingMixing.rmatvec.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ExcitingMixing.rmatvec.__dict__.__setitem__('stypy_type_store', module_type_store)
        ExcitingMixing.rmatvec.__dict__.__setitem__('stypy_function_name', 'ExcitingMixing.rmatvec')
        ExcitingMixing.rmatvec.__dict__.__setitem__('stypy_param_names_list', ['f'])
        ExcitingMixing.rmatvec.__dict__.__setitem__('stypy_varargs_param_name', None)
        ExcitingMixing.rmatvec.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ExcitingMixing.rmatvec.__dict__.__setitem__('stypy_call_defaults', defaults)
        ExcitingMixing.rmatvec.__dict__.__setitem__('stypy_call_varargs', varargs)
        ExcitingMixing.rmatvec.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ExcitingMixing.rmatvec.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ExcitingMixing.rmatvec', ['f'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rmatvec', localization, ['f'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rmatvec(...)' code ##################

        
        # Getting the type of 'f' (line 1311)
        f_176019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 16), 'f')
        # Applying the 'usub' unary operator (line 1311)
        result___neg___176020 = python_operator(stypy.reporting.localization.Localization(__file__, 1311, 15), 'usub', f_176019)
        
        
        # Call to conj(...): (line 1311)
        # Processing the call keyword arguments (line 1311)
        kwargs_176024 = {}
        # Getting the type of 'self' (line 1311)
        self_176021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 18), 'self', False)
        # Obtaining the member 'beta' of a type (line 1311)
        beta_176022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1311, 18), self_176021, 'beta')
        # Obtaining the member 'conj' of a type (line 1311)
        conj_176023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1311, 18), beta_176022, 'conj')
        # Calling conj(args, kwargs) (line 1311)
        conj_call_result_176025 = invoke(stypy.reporting.localization.Localization(__file__, 1311, 18), conj_176023, *[], **kwargs_176024)
        
        # Applying the binary operator 'div' (line 1311)
        result_div_176026 = python_operator(stypy.reporting.localization.Localization(__file__, 1311, 15), 'div', result___neg___176020, conj_call_result_176025)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1311, 8), 'stypy_return_type', result_div_176026)
        
        # ################# End of 'rmatvec(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rmatvec' in the type store
        # Getting the type of 'stypy_return_type' (line 1310)
        stypy_return_type_176027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_176027)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rmatvec'
        return stypy_return_type_176027


    @norecursion
    def todense(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'todense'
        module_type_store = module_type_store.open_function_context('todense', 1313, 4, False)
        # Assigning a type to the variable 'self' (line 1314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1314, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ExcitingMixing.todense.__dict__.__setitem__('stypy_localization', localization)
        ExcitingMixing.todense.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ExcitingMixing.todense.__dict__.__setitem__('stypy_type_store', module_type_store)
        ExcitingMixing.todense.__dict__.__setitem__('stypy_function_name', 'ExcitingMixing.todense')
        ExcitingMixing.todense.__dict__.__setitem__('stypy_param_names_list', [])
        ExcitingMixing.todense.__dict__.__setitem__('stypy_varargs_param_name', None)
        ExcitingMixing.todense.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ExcitingMixing.todense.__dict__.__setitem__('stypy_call_defaults', defaults)
        ExcitingMixing.todense.__dict__.__setitem__('stypy_call_varargs', varargs)
        ExcitingMixing.todense.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ExcitingMixing.todense.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ExcitingMixing.todense', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'todense', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'todense(...)' code ##################

        
        # Call to diag(...): (line 1314)
        # Processing the call arguments (line 1314)
        int_176030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1314, 23), 'int')
        # Getting the type of 'self' (line 1314)
        self_176031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 26), 'self', False)
        # Obtaining the member 'beta' of a type (line 1314)
        beta_176032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1314, 26), self_176031, 'beta')
        # Applying the binary operator 'div' (line 1314)
        result_div_176033 = python_operator(stypy.reporting.localization.Localization(__file__, 1314, 23), 'div', int_176030, beta_176032)
        
        # Processing the call keyword arguments (line 1314)
        kwargs_176034 = {}
        # Getting the type of 'np' (line 1314)
        np_176028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 15), 'np', False)
        # Obtaining the member 'diag' of a type (line 1314)
        diag_176029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1314, 15), np_176028, 'diag')
        # Calling diag(args, kwargs) (line 1314)
        diag_call_result_176035 = invoke(stypy.reporting.localization.Localization(__file__, 1314, 15), diag_176029, *[result_div_176033], **kwargs_176034)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1314, 8), 'stypy_return_type', diag_call_result_176035)
        
        # ################# End of 'todense(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'todense' in the type store
        # Getting the type of 'stypy_return_type' (line 1313)
        stypy_return_type_176036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_176036)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'todense'
        return stypy_return_type_176036


    @norecursion
    def _update(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update'
        module_type_store = module_type_store.open_function_context('_update', 1316, 4, False)
        # Assigning a type to the variable 'self' (line 1317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1317, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ExcitingMixing._update.__dict__.__setitem__('stypy_localization', localization)
        ExcitingMixing._update.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ExcitingMixing._update.__dict__.__setitem__('stypy_type_store', module_type_store)
        ExcitingMixing._update.__dict__.__setitem__('stypy_function_name', 'ExcitingMixing._update')
        ExcitingMixing._update.__dict__.__setitem__('stypy_param_names_list', ['x', 'f', 'dx', 'df', 'dx_norm', 'df_norm'])
        ExcitingMixing._update.__dict__.__setitem__('stypy_varargs_param_name', None)
        ExcitingMixing._update.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ExcitingMixing._update.__dict__.__setitem__('stypy_call_defaults', defaults)
        ExcitingMixing._update.__dict__.__setitem__('stypy_call_varargs', varargs)
        ExcitingMixing._update.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ExcitingMixing._update.__dict__.__setitem__('stypy_declared_arg_number', 7)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ExcitingMixing._update', ['x', 'f', 'dx', 'df', 'dx_norm', 'df_norm'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update', localization, ['x', 'f', 'dx', 'df', 'dx_norm', 'df_norm'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update(...)' code ##################

        
        # Assigning a Compare to a Name (line 1317):
        
        # Assigning a Compare to a Name (line 1317):
        
        # Getting the type of 'f' (line 1317)
        f_176037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 15), 'f')
        # Getting the type of 'self' (line 1317)
        self_176038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 17), 'self')
        # Obtaining the member 'last_f' of a type (line 1317)
        last_f_176039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1317, 17), self_176038, 'last_f')
        # Applying the binary operator '*' (line 1317)
        result_mul_176040 = python_operator(stypy.reporting.localization.Localization(__file__, 1317, 15), '*', f_176037, last_f_176039)
        
        int_176041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1317, 31), 'int')
        # Applying the binary operator '>' (line 1317)
        result_gt_176042 = python_operator(stypy.reporting.localization.Localization(__file__, 1317, 15), '>', result_mul_176040, int_176041)
        
        # Assigning a type to the variable 'incr' (line 1317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1317, 8), 'incr', result_gt_176042)
        
        # Getting the type of 'self' (line 1318)
        self_176043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 8), 'self')
        # Obtaining the member 'beta' of a type (line 1318)
        beta_176044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 8), self_176043, 'beta')
        
        # Obtaining the type of the subscript
        # Getting the type of 'incr' (line 1318)
        incr_176045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 18), 'incr')
        # Getting the type of 'self' (line 1318)
        self_176046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 8), 'self')
        # Obtaining the member 'beta' of a type (line 1318)
        beta_176047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 8), self_176046, 'beta')
        # Obtaining the member '__getitem__' of a type (line 1318)
        getitem___176048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 8), beta_176047, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1318)
        subscript_call_result_176049 = invoke(stypy.reporting.localization.Localization(__file__, 1318, 8), getitem___176048, incr_176045)
        
        # Getting the type of 'self' (line 1318)
        self_176050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 27), 'self')
        # Obtaining the member 'alpha' of a type (line 1318)
        alpha_176051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 27), self_176050, 'alpha')
        # Applying the binary operator '+=' (line 1318)
        result_iadd_176052 = python_operator(stypy.reporting.localization.Localization(__file__, 1318, 8), '+=', subscript_call_result_176049, alpha_176051)
        # Getting the type of 'self' (line 1318)
        self_176053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 8), 'self')
        # Obtaining the member 'beta' of a type (line 1318)
        beta_176054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 8), self_176053, 'beta')
        # Getting the type of 'incr' (line 1318)
        incr_176055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 18), 'incr')
        # Storing an element on a container (line 1318)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1318, 8), beta_176054, (incr_176055, result_iadd_176052))
        
        
        # Assigning a Attribute to a Subscript (line 1319):
        
        # Assigning a Attribute to a Subscript (line 1319):
        # Getting the type of 'self' (line 1319)
        self_176056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 27), 'self')
        # Obtaining the member 'alpha' of a type (line 1319)
        alpha_176057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1319, 27), self_176056, 'alpha')
        # Getting the type of 'self' (line 1319)
        self_176058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 8), 'self')
        # Obtaining the member 'beta' of a type (line 1319)
        beta_176059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1319, 8), self_176058, 'beta')
        
        # Getting the type of 'incr' (line 1319)
        incr_176060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 19), 'incr')
        # Applying the '~' unary operator (line 1319)
        result_inv_176061 = python_operator(stypy.reporting.localization.Localization(__file__, 1319, 18), '~', incr_176060)
        
        # Storing an element on a container (line 1319)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1319, 8), beta_176059, (result_inv_176061, alpha_176057))
        
        # Call to clip(...): (line 1320)
        # Processing the call arguments (line 1320)
        # Getting the type of 'self' (line 1320)
        self_176064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 16), 'self', False)
        # Obtaining the member 'beta' of a type (line 1320)
        beta_176065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 16), self_176064, 'beta')
        int_176066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1320, 27), 'int')
        # Getting the type of 'self' (line 1320)
        self_176067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 30), 'self', False)
        # Obtaining the member 'alphamax' of a type (line 1320)
        alphamax_176068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 30), self_176067, 'alphamax')
        # Processing the call keyword arguments (line 1320)
        # Getting the type of 'self' (line 1320)
        self_176069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 49), 'self', False)
        # Obtaining the member 'beta' of a type (line 1320)
        beta_176070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 49), self_176069, 'beta')
        keyword_176071 = beta_176070
        kwargs_176072 = {'out': keyword_176071}
        # Getting the type of 'np' (line 1320)
        np_176062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 8), 'np', False)
        # Obtaining the member 'clip' of a type (line 1320)
        clip_176063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 8), np_176062, 'clip')
        # Calling clip(args, kwargs) (line 1320)
        clip_call_result_176073 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 8), clip_176063, *[beta_176065, int_176066, alphamax_176068], **kwargs_176072)
        
        
        # ################# End of '_update(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update' in the type store
        # Getting the type of 'stypy_return_type' (line 1316)
        stypy_return_type_176074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_176074)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update'
        return stypy_return_type_176074


# Assigning a type to the variable 'ExcitingMixing' (line 1269)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 0), 'ExcitingMixing', ExcitingMixing)
# Declaration of the 'KrylovJacobian' class
# Getting the type of 'Jacobian' (line 1327)
Jacobian_176075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 21), 'Jacobian')

class KrylovJacobian(Jacobian_176075, ):
    str_176076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1399, (-1)), 'str', '\n    Find a root of a function, using Krylov approximation for inverse Jacobian.\n\n    This method is suitable for solving large-scale problems.\n\n    Parameters\n    ----------\n    %(params_basic)s\n    rdiff : float, optional\n        Relative step size to use in numerical differentiation.\n    method : {\'lgmres\', \'gmres\', \'bicgstab\', \'cgs\', \'minres\'} or function\n        Krylov method to use to approximate the Jacobian.\n        Can be a string, or a function implementing the same interface as\n        the iterative solvers in `scipy.sparse.linalg`.\n\n        The default is `scipy.sparse.linalg.lgmres`.\n    inner_M : LinearOperator or InverseJacobian\n        Preconditioner for the inner Krylov iteration.\n        Note that you can use also inverse Jacobians as (adaptive)\n        preconditioners. For example,\n\n        >>> from scipy.optimize.nonlin import BroydenFirst, KrylovJacobian\n        >>> from scipy.optimize.nonlin import InverseJacobian\n        >>> jac = BroydenFirst()\n        >>> kjac = KrylovJacobian(inner_M=InverseJacobian(jac))\n\n        If the preconditioner has a method named \'update\', it will be called\n        as ``update(x, f)`` after each nonlinear step, with ``x`` giving\n        the current point, and ``f`` the current function value.\n    inner_tol, inner_maxiter, ...\n        Parameters to pass on to the \\"inner\\" Krylov solver.\n        See `scipy.sparse.linalg.gmres` for details.\n    outer_k : int, optional\n        Size of the subspace kept across LGMRES nonlinear iterations.\n        See `scipy.sparse.linalg.lgmres` for details.\n    %(params_extra)s\n\n    See Also\n    --------\n    scipy.sparse.linalg.gmres\n    scipy.sparse.linalg.lgmres\n\n    Notes\n    -----\n    This function implements a Newton-Krylov solver. The basic idea is\n    to compute the inverse of the Jacobian with an iterative Krylov\n    method. These methods require only evaluating the Jacobian-vector\n    products, which are conveniently approximated by a finite difference:\n\n    .. math:: J v \\approx (f(x + \\omega*v/|v|) - f(x)) / \\omega\n\n    Due to the use of iterative matrix inverses, these methods can\n    deal with large nonlinear problems.\n\n    Scipy\'s `scipy.sparse.linalg` module offers a selection of Krylov\n    solvers to choose from. The default here is `lgmres`, which is a\n    variant of restarted GMRES iteration that reuses some of the\n    information obtained in the previous Newton steps to invert\n    Jacobians in subsequent steps.\n\n    For a review on Newton-Krylov methods, see for example [1]_,\n    and for the LGMRES sparse inverse method, see [2]_.\n\n    References\n    ----------\n    .. [1] D.A. Knoll and D.E. Keyes, J. Comp. Phys. 193, 357 (2004).\n           :doi:`10.1016/j.jcp.2003.08.010`\n    .. [2] A.H. Baker and E.R. Jessup and T. Manteuffel,\n           SIAM J. Matrix Anal. Appl. 26, 962 (2005).\n           :doi:`10.1137/S0895479803422014`\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1401)
        None_176077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 29), 'None')
        str_176078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 42), 'str', 'lgmres')
        int_176079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 66), 'int')
        # Getting the type of 'None' (line 1402)
        None_176080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1402, 25), 'None')
        int_176081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1402, 39), 'int')
        defaults = [None_176077, str_176078, int_176079, None_176080, int_176081]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1401, 4, False)
        # Assigning a type to the variable 'self' (line 1402)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1402, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'KrylovJacobian.__init__', ['rdiff', 'method', 'inner_maxiter', 'inner_M', 'outer_k'], None, 'kw', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['rdiff', 'method', 'inner_maxiter', 'inner_M', 'outer_k'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1403):
        
        # Assigning a Name to a Attribute (line 1403):
        # Getting the type of 'inner_M' (line 1403)
        inner_M_176082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 30), 'inner_M')
        # Getting the type of 'self' (line 1403)
        self_176083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 8), 'self')
        # Setting the type of the member 'preconditioner' of a type (line 1403)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1403, 8), self_176083, 'preconditioner', inner_M_176082)
        
        # Assigning a Name to a Attribute (line 1404):
        
        # Assigning a Name to a Attribute (line 1404):
        # Getting the type of 'rdiff' (line 1404)
        rdiff_176084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 21), 'rdiff')
        # Getting the type of 'self' (line 1404)
        self_176085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 8), 'self')
        # Setting the type of the member 'rdiff' of a type (line 1404)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1404, 8), self_176085, 'rdiff', rdiff_176084)
        
        # Assigning a Call to a Attribute (line 1405):
        
        # Assigning a Call to a Attribute (line 1405):
        
        # Call to get(...): (line 1405)
        # Processing the call arguments (line 1405)
        # Getting the type of 'method' (line 1411)
        method_176115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 18), 'method', False)
        # Getting the type of 'method' (line 1411)
        method_176116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 26), 'method', False)
        # Processing the call keyword arguments (line 1405)
        kwargs_176117 = {}
        
        # Call to dict(...): (line 1405)
        # Processing the call keyword arguments (line 1405)
        # Getting the type of 'scipy' (line 1406)
        scipy_176087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 21), 'scipy', False)
        # Obtaining the member 'sparse' of a type (line 1406)
        sparse_176088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1406, 21), scipy_176087, 'sparse')
        # Obtaining the member 'linalg' of a type (line 1406)
        linalg_176089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1406, 21), sparse_176088, 'linalg')
        # Obtaining the member 'bicgstab' of a type (line 1406)
        bicgstab_176090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1406, 21), linalg_176089, 'bicgstab')
        keyword_176091 = bicgstab_176090
        # Getting the type of 'scipy' (line 1407)
        scipy_176092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 18), 'scipy', False)
        # Obtaining the member 'sparse' of a type (line 1407)
        sparse_176093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1407, 18), scipy_176092, 'sparse')
        # Obtaining the member 'linalg' of a type (line 1407)
        linalg_176094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1407, 18), sparse_176093, 'linalg')
        # Obtaining the member 'gmres' of a type (line 1407)
        gmres_176095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1407, 18), linalg_176094, 'gmres')
        keyword_176096 = gmres_176095
        # Getting the type of 'scipy' (line 1408)
        scipy_176097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 19), 'scipy', False)
        # Obtaining the member 'sparse' of a type (line 1408)
        sparse_176098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1408, 19), scipy_176097, 'sparse')
        # Obtaining the member 'linalg' of a type (line 1408)
        linalg_176099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1408, 19), sparse_176098, 'linalg')
        # Obtaining the member 'lgmres' of a type (line 1408)
        lgmres_176100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1408, 19), linalg_176099, 'lgmres')
        keyword_176101 = lgmres_176100
        # Getting the type of 'scipy' (line 1409)
        scipy_176102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 16), 'scipy', False)
        # Obtaining the member 'sparse' of a type (line 1409)
        sparse_176103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1409, 16), scipy_176102, 'sparse')
        # Obtaining the member 'linalg' of a type (line 1409)
        linalg_176104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1409, 16), sparse_176103, 'linalg')
        # Obtaining the member 'cgs' of a type (line 1409)
        cgs_176105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1409, 16), linalg_176104, 'cgs')
        keyword_176106 = cgs_176105
        # Getting the type of 'scipy' (line 1410)
        scipy_176107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 19), 'scipy', False)
        # Obtaining the member 'sparse' of a type (line 1410)
        sparse_176108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1410, 19), scipy_176107, 'sparse')
        # Obtaining the member 'linalg' of a type (line 1410)
        linalg_176109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1410, 19), sparse_176108, 'linalg')
        # Obtaining the member 'minres' of a type (line 1410)
        minres_176110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1410, 19), linalg_176109, 'minres')
        keyword_176111 = minres_176110
        kwargs_176112 = {'lgmres': keyword_176101, 'bicgstab': keyword_176091, 'cgs': keyword_176106, 'minres': keyword_176111, 'gmres': keyword_176096}
        # Getting the type of 'dict' (line 1405)
        dict_176086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 22), 'dict', False)
        # Calling dict(args, kwargs) (line 1405)
        dict_call_result_176113 = invoke(stypy.reporting.localization.Localization(__file__, 1405, 22), dict_176086, *[], **kwargs_176112)
        
        # Obtaining the member 'get' of a type (line 1405)
        get_176114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1405, 22), dict_call_result_176113, 'get')
        # Calling get(args, kwargs) (line 1405)
        get_call_result_176118 = invoke(stypy.reporting.localization.Localization(__file__, 1405, 22), get_176114, *[method_176115, method_176116], **kwargs_176117)
        
        # Getting the type of 'self' (line 1405)
        self_176119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 8), 'self')
        # Setting the type of the member 'method' of a type (line 1405)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1405, 8), self_176119, 'method', get_call_result_176118)
        
        # Assigning a Call to a Attribute (line 1413):
        
        # Assigning a Call to a Attribute (line 1413):
        
        # Call to dict(...): (line 1413)
        # Processing the call keyword arguments (line 1413)
        # Getting the type of 'inner_maxiter' (line 1413)
        inner_maxiter_176121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 38), 'inner_maxiter', False)
        keyword_176122 = inner_maxiter_176121
        # Getting the type of 'self' (line 1413)
        self_176123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 55), 'self', False)
        # Obtaining the member 'preconditioner' of a type (line 1413)
        preconditioner_176124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1413, 55), self_176123, 'preconditioner')
        keyword_176125 = preconditioner_176124
        kwargs_176126 = {'M': keyword_176125, 'maxiter': keyword_176122}
        # Getting the type of 'dict' (line 1413)
        dict_176120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 25), 'dict', False)
        # Calling dict(args, kwargs) (line 1413)
        dict_call_result_176127 = invoke(stypy.reporting.localization.Localization(__file__, 1413, 25), dict_176120, *[], **kwargs_176126)
        
        # Getting the type of 'self' (line 1413)
        self_176128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 8), 'self')
        # Setting the type of the member 'method_kw' of a type (line 1413)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1413, 8), self_176128, 'method_kw', dict_call_result_176127)
        
        
        # Getting the type of 'self' (line 1415)
        self_176129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 11), 'self')
        # Obtaining the member 'method' of a type (line 1415)
        method_176130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1415, 11), self_176129, 'method')
        # Getting the type of 'scipy' (line 1415)
        scipy_176131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 26), 'scipy')
        # Obtaining the member 'sparse' of a type (line 1415)
        sparse_176132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1415, 26), scipy_176131, 'sparse')
        # Obtaining the member 'linalg' of a type (line 1415)
        linalg_176133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1415, 26), sparse_176132, 'linalg')
        # Obtaining the member 'gmres' of a type (line 1415)
        gmres_176134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1415, 26), linalg_176133, 'gmres')
        # Applying the binary operator 'is' (line 1415)
        result_is__176135 = python_operator(stypy.reporting.localization.Localization(__file__, 1415, 11), 'is', method_176130, gmres_176134)
        
        # Testing the type of an if condition (line 1415)
        if_condition_176136 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1415, 8), result_is__176135)
        # Assigning a type to the variable 'if_condition_176136' (line 1415)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1415, 8), 'if_condition_176136', if_condition_176136)
        # SSA begins for if statement (line 1415)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Subscript (line 1417):
        
        # Assigning a Name to a Subscript (line 1417):
        # Getting the type of 'inner_maxiter' (line 1417)
        inner_maxiter_176137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 39), 'inner_maxiter')
        # Getting the type of 'self' (line 1417)
        self_176138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 12), 'self')
        # Obtaining the member 'method_kw' of a type (line 1417)
        method_kw_176139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1417, 12), self_176138, 'method_kw')
        str_176140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1417, 27), 'str', 'restrt')
        # Storing an element on a container (line 1417)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1417, 12), method_kw_176139, (str_176140, inner_maxiter_176137))
        
        # Assigning a Num to a Subscript (line 1418):
        
        # Assigning a Num to a Subscript (line 1418):
        int_176141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1418, 40), 'int')
        # Getting the type of 'self' (line 1418)
        self_176142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 12), 'self')
        # Obtaining the member 'method_kw' of a type (line 1418)
        method_kw_176143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1418, 12), self_176142, 'method_kw')
        str_176144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1418, 27), 'str', 'maxiter')
        # Storing an element on a container (line 1418)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1418, 12), method_kw_176143, (str_176144, int_176141))
        # SSA branch for the else part of an if statement (line 1415)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 1419)
        self_176145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 13), 'self')
        # Obtaining the member 'method' of a type (line 1419)
        method_176146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1419, 13), self_176145, 'method')
        # Getting the type of 'scipy' (line 1419)
        scipy_176147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 28), 'scipy')
        # Obtaining the member 'sparse' of a type (line 1419)
        sparse_176148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1419, 28), scipy_176147, 'sparse')
        # Obtaining the member 'linalg' of a type (line 1419)
        linalg_176149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1419, 28), sparse_176148, 'linalg')
        # Obtaining the member 'lgmres' of a type (line 1419)
        lgmres_176150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1419, 28), linalg_176149, 'lgmres')
        # Applying the binary operator 'is' (line 1419)
        result_is__176151 = python_operator(stypy.reporting.localization.Localization(__file__, 1419, 13), 'is', method_176146, lgmres_176150)
        
        # Testing the type of an if condition (line 1419)
        if_condition_176152 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1419, 13), result_is__176151)
        # Assigning a type to the variable 'if_condition_176152' (line 1419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1419, 13), 'if_condition_176152', if_condition_176152)
        # SSA begins for if statement (line 1419)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Subscript (line 1420):
        
        # Assigning a Name to a Subscript (line 1420):
        # Getting the type of 'outer_k' (line 1420)
        outer_k_176153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 40), 'outer_k')
        # Getting the type of 'self' (line 1420)
        self_176154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 12), 'self')
        # Obtaining the member 'method_kw' of a type (line 1420)
        method_kw_176155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 12), self_176154, 'method_kw')
        str_176156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1420, 27), 'str', 'outer_k')
        # Storing an element on a container (line 1420)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1420, 12), method_kw_176155, (str_176156, outer_k_176153))
        
        # Assigning a Num to a Subscript (line 1422):
        
        # Assigning a Num to a Subscript (line 1422):
        int_176157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1422, 40), 'int')
        # Getting the type of 'self' (line 1422)
        self_176158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 12), 'self')
        # Obtaining the member 'method_kw' of a type (line 1422)
        method_kw_176159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1422, 12), self_176158, 'method_kw')
        str_176160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1422, 27), 'str', 'maxiter')
        # Storing an element on a container (line 1422)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1422, 12), method_kw_176159, (str_176160, int_176157))
        
        # Call to setdefault(...): (line 1424)
        # Processing the call arguments (line 1424)
        str_176164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1424, 38), 'str', 'outer_v')
        
        # Obtaining an instance of the builtin type 'list' (line 1424)
        list_176165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1424, 49), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1424)
        
        # Processing the call keyword arguments (line 1424)
        kwargs_176166 = {}
        # Getting the type of 'self' (line 1424)
        self_176161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 12), 'self', False)
        # Obtaining the member 'method_kw' of a type (line 1424)
        method_kw_176162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1424, 12), self_176161, 'method_kw')
        # Obtaining the member 'setdefault' of a type (line 1424)
        setdefault_176163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1424, 12), method_kw_176162, 'setdefault')
        # Calling setdefault(args, kwargs) (line 1424)
        setdefault_call_result_176167 = invoke(stypy.reporting.localization.Localization(__file__, 1424, 12), setdefault_176163, *[str_176164, list_176165], **kwargs_176166)
        
        
        # Call to setdefault(...): (line 1425)
        # Processing the call arguments (line 1425)
        str_176171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1425, 38), 'str', 'prepend_outer_v')
        # Getting the type of 'True' (line 1425)
        True_176172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 57), 'True', False)
        # Processing the call keyword arguments (line 1425)
        kwargs_176173 = {}
        # Getting the type of 'self' (line 1425)
        self_176168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 12), 'self', False)
        # Obtaining the member 'method_kw' of a type (line 1425)
        method_kw_176169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1425, 12), self_176168, 'method_kw')
        # Obtaining the member 'setdefault' of a type (line 1425)
        setdefault_176170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1425, 12), method_kw_176169, 'setdefault')
        # Calling setdefault(args, kwargs) (line 1425)
        setdefault_call_result_176174 = invoke(stypy.reporting.localization.Localization(__file__, 1425, 12), setdefault_176170, *[str_176171, True_176172], **kwargs_176173)
        
        
        # Call to setdefault(...): (line 1432)
        # Processing the call arguments (line 1432)
        str_176178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1432, 38), 'str', 'store_outer_Av')
        # Getting the type of 'False' (line 1432)
        False_176179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 56), 'False', False)
        # Processing the call keyword arguments (line 1432)
        kwargs_176180 = {}
        # Getting the type of 'self' (line 1432)
        self_176175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 12), 'self', False)
        # Obtaining the member 'method_kw' of a type (line 1432)
        method_kw_176176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1432, 12), self_176175, 'method_kw')
        # Obtaining the member 'setdefault' of a type (line 1432)
        setdefault_176177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1432, 12), method_kw_176176, 'setdefault')
        # Calling setdefault(args, kwargs) (line 1432)
        setdefault_call_result_176181 = invoke(stypy.reporting.localization.Localization(__file__, 1432, 12), setdefault_176177, *[str_176178, False_176179], **kwargs_176180)
        
        # SSA join for if statement (line 1419)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1415)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to items(...): (line 1434)
        # Processing the call keyword arguments (line 1434)
        kwargs_176184 = {}
        # Getting the type of 'kw' (line 1434)
        kw_176182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 26), 'kw', False)
        # Obtaining the member 'items' of a type (line 1434)
        items_176183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1434, 26), kw_176182, 'items')
        # Calling items(args, kwargs) (line 1434)
        items_call_result_176185 = invoke(stypy.reporting.localization.Localization(__file__, 1434, 26), items_176183, *[], **kwargs_176184)
        
        # Testing the type of a for loop iterable (line 1434)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1434, 8), items_call_result_176185)
        # Getting the type of the for loop variable (line 1434)
        for_loop_var_176186 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1434, 8), items_call_result_176185)
        # Assigning a type to the variable 'key' (line 1434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1434, 8), 'key', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1434, 8), for_loop_var_176186))
        # Assigning a type to the variable 'value' (line 1434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1434, 8), 'value', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1434, 8), for_loop_var_176186))
        # SSA begins for a for statement (line 1434)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        
        # Call to startswith(...): (line 1435)
        # Processing the call arguments (line 1435)
        str_176189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1435, 34), 'str', 'inner_')
        # Processing the call keyword arguments (line 1435)
        kwargs_176190 = {}
        # Getting the type of 'key' (line 1435)
        key_176187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1435, 19), 'key', False)
        # Obtaining the member 'startswith' of a type (line 1435)
        startswith_176188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1435, 19), key_176187, 'startswith')
        # Calling startswith(args, kwargs) (line 1435)
        startswith_call_result_176191 = invoke(stypy.reporting.localization.Localization(__file__, 1435, 19), startswith_176188, *[str_176189], **kwargs_176190)
        
        # Applying the 'not' unary operator (line 1435)
        result_not__176192 = python_operator(stypy.reporting.localization.Localization(__file__, 1435, 15), 'not', startswith_call_result_176191)
        
        # Testing the type of an if condition (line 1435)
        if_condition_176193 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1435, 12), result_not__176192)
        # Assigning a type to the variable 'if_condition_176193' (line 1435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1435, 12), 'if_condition_176193', if_condition_176193)
        # SSA begins for if statement (line 1435)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1436)
        # Processing the call arguments (line 1436)
        str_176195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1436, 33), 'str', 'Unknown parameter %s')
        # Getting the type of 'key' (line 1436)
        key_176196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 58), 'key', False)
        # Applying the binary operator '%' (line 1436)
        result_mod_176197 = python_operator(stypy.reporting.localization.Localization(__file__, 1436, 33), '%', str_176195, key_176196)
        
        # Processing the call keyword arguments (line 1436)
        kwargs_176198 = {}
        # Getting the type of 'ValueError' (line 1436)
        ValueError_176194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1436)
        ValueError_call_result_176199 = invoke(stypy.reporting.localization.Localization(__file__, 1436, 22), ValueError_176194, *[result_mod_176197], **kwargs_176198)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1436, 16), ValueError_call_result_176199, 'raise parameter', BaseException)
        # SSA join for if statement (line 1435)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Subscript (line 1437):
        
        # Assigning a Name to a Subscript (line 1437):
        # Getting the type of 'value' (line 1437)
        value_176200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 38), 'value')
        # Getting the type of 'self' (line 1437)
        self_176201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 12), 'self')
        # Obtaining the member 'method_kw' of a type (line 1437)
        method_kw_176202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 12), self_176201, 'method_kw')
        
        # Obtaining the type of the subscript
        int_176203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1437, 31), 'int')
        slice_176204 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1437, 27), int_176203, None, None)
        # Getting the type of 'key' (line 1437)
        key_176205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 27), 'key')
        # Obtaining the member '__getitem__' of a type (line 1437)
        getitem___176206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 27), key_176205, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1437)
        subscript_call_result_176207 = invoke(stypy.reporting.localization.Localization(__file__, 1437, 27), getitem___176206, slice_176204)
        
        # Storing an element on a container (line 1437)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1437, 12), method_kw_176202, (subscript_call_result_176207, value_176200))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _update_diff_step(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update_diff_step'
        module_type_store = module_type_store.open_function_context('_update_diff_step', 1439, 4, False)
        # Assigning a type to the variable 'self' (line 1440)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1440, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        KrylovJacobian._update_diff_step.__dict__.__setitem__('stypy_localization', localization)
        KrylovJacobian._update_diff_step.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        KrylovJacobian._update_diff_step.__dict__.__setitem__('stypy_type_store', module_type_store)
        KrylovJacobian._update_diff_step.__dict__.__setitem__('stypy_function_name', 'KrylovJacobian._update_diff_step')
        KrylovJacobian._update_diff_step.__dict__.__setitem__('stypy_param_names_list', [])
        KrylovJacobian._update_diff_step.__dict__.__setitem__('stypy_varargs_param_name', None)
        KrylovJacobian._update_diff_step.__dict__.__setitem__('stypy_kwargs_param_name', None)
        KrylovJacobian._update_diff_step.__dict__.__setitem__('stypy_call_defaults', defaults)
        KrylovJacobian._update_diff_step.__dict__.__setitem__('stypy_call_varargs', varargs)
        KrylovJacobian._update_diff_step.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        KrylovJacobian._update_diff_step.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'KrylovJacobian._update_diff_step', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_diff_step', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_diff_step(...)' code ##################

        
        # Assigning a Call to a Name (line 1440):
        
        # Assigning a Call to a Name (line 1440):
        
        # Call to max(...): (line 1440)
        # Processing the call keyword arguments (line 1440)
        kwargs_176214 = {}
        
        # Call to abs(...): (line 1440)
        # Processing the call arguments (line 1440)
        # Getting the type of 'self' (line 1440)
        self_176209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 17), 'self', False)
        # Obtaining the member 'x0' of a type (line 1440)
        x0_176210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1440, 17), self_176209, 'x0')
        # Processing the call keyword arguments (line 1440)
        kwargs_176211 = {}
        # Getting the type of 'abs' (line 1440)
        abs_176208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 13), 'abs', False)
        # Calling abs(args, kwargs) (line 1440)
        abs_call_result_176212 = invoke(stypy.reporting.localization.Localization(__file__, 1440, 13), abs_176208, *[x0_176210], **kwargs_176211)
        
        # Obtaining the member 'max' of a type (line 1440)
        max_176213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1440, 13), abs_call_result_176212, 'max')
        # Calling max(args, kwargs) (line 1440)
        max_call_result_176215 = invoke(stypy.reporting.localization.Localization(__file__, 1440, 13), max_176213, *[], **kwargs_176214)
        
        # Assigning a type to the variable 'mx' (line 1440)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1440, 8), 'mx', max_call_result_176215)
        
        # Assigning a Call to a Name (line 1441):
        
        # Assigning a Call to a Name (line 1441):
        
        # Call to max(...): (line 1441)
        # Processing the call keyword arguments (line 1441)
        kwargs_176222 = {}
        
        # Call to abs(...): (line 1441)
        # Processing the call arguments (line 1441)
        # Getting the type of 'self' (line 1441)
        self_176217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 17), 'self', False)
        # Obtaining the member 'f0' of a type (line 1441)
        f0_176218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1441, 17), self_176217, 'f0')
        # Processing the call keyword arguments (line 1441)
        kwargs_176219 = {}
        # Getting the type of 'abs' (line 1441)
        abs_176216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 13), 'abs', False)
        # Calling abs(args, kwargs) (line 1441)
        abs_call_result_176220 = invoke(stypy.reporting.localization.Localization(__file__, 1441, 13), abs_176216, *[f0_176218], **kwargs_176219)
        
        # Obtaining the member 'max' of a type (line 1441)
        max_176221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1441, 13), abs_call_result_176220, 'max')
        # Calling max(args, kwargs) (line 1441)
        max_call_result_176223 = invoke(stypy.reporting.localization.Localization(__file__, 1441, 13), max_176221, *[], **kwargs_176222)
        
        # Assigning a type to the variable 'mf' (line 1441)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1441, 8), 'mf', max_call_result_176223)
        
        # Assigning a BinOp to a Attribute (line 1442):
        
        # Assigning a BinOp to a Attribute (line 1442):
        # Getting the type of 'self' (line 1442)
        self_176224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 21), 'self')
        # Obtaining the member 'rdiff' of a type (line 1442)
        rdiff_176225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1442, 21), self_176224, 'rdiff')
        
        # Call to max(...): (line 1442)
        # Processing the call arguments (line 1442)
        int_176227 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1442, 38), 'int')
        # Getting the type of 'mx' (line 1442)
        mx_176228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 41), 'mx', False)
        # Processing the call keyword arguments (line 1442)
        kwargs_176229 = {}
        # Getting the type of 'max' (line 1442)
        max_176226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 34), 'max', False)
        # Calling max(args, kwargs) (line 1442)
        max_call_result_176230 = invoke(stypy.reporting.localization.Localization(__file__, 1442, 34), max_176226, *[int_176227, mx_176228], **kwargs_176229)
        
        # Applying the binary operator '*' (line 1442)
        result_mul_176231 = python_operator(stypy.reporting.localization.Localization(__file__, 1442, 21), '*', rdiff_176225, max_call_result_176230)
        
        
        # Call to max(...): (line 1442)
        # Processing the call arguments (line 1442)
        int_176233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1442, 51), 'int')
        # Getting the type of 'mf' (line 1442)
        mf_176234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 54), 'mf', False)
        # Processing the call keyword arguments (line 1442)
        kwargs_176235 = {}
        # Getting the type of 'max' (line 1442)
        max_176232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 47), 'max', False)
        # Calling max(args, kwargs) (line 1442)
        max_call_result_176236 = invoke(stypy.reporting.localization.Localization(__file__, 1442, 47), max_176232, *[int_176233, mf_176234], **kwargs_176235)
        
        # Applying the binary operator 'div' (line 1442)
        result_div_176237 = python_operator(stypy.reporting.localization.Localization(__file__, 1442, 45), 'div', result_mul_176231, max_call_result_176236)
        
        # Getting the type of 'self' (line 1442)
        self_176238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 8), 'self')
        # Setting the type of the member 'omega' of a type (line 1442)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1442, 8), self_176238, 'omega', result_div_176237)
        
        # ################# End of '_update_diff_step(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_diff_step' in the type store
        # Getting the type of 'stypy_return_type' (line 1439)
        stypy_return_type_176239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_176239)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_diff_step'
        return stypy_return_type_176239


    @norecursion
    def matvec(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'matvec'
        module_type_store = module_type_store.open_function_context('matvec', 1444, 4, False)
        # Assigning a type to the variable 'self' (line 1445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1445, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        KrylovJacobian.matvec.__dict__.__setitem__('stypy_localization', localization)
        KrylovJacobian.matvec.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        KrylovJacobian.matvec.__dict__.__setitem__('stypy_type_store', module_type_store)
        KrylovJacobian.matvec.__dict__.__setitem__('stypy_function_name', 'KrylovJacobian.matvec')
        KrylovJacobian.matvec.__dict__.__setitem__('stypy_param_names_list', ['v'])
        KrylovJacobian.matvec.__dict__.__setitem__('stypy_varargs_param_name', None)
        KrylovJacobian.matvec.__dict__.__setitem__('stypy_kwargs_param_name', None)
        KrylovJacobian.matvec.__dict__.__setitem__('stypy_call_defaults', defaults)
        KrylovJacobian.matvec.__dict__.__setitem__('stypy_call_varargs', varargs)
        KrylovJacobian.matvec.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        KrylovJacobian.matvec.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'KrylovJacobian.matvec', ['v'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'matvec', localization, ['v'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'matvec(...)' code ##################

        
        # Assigning a Call to a Name (line 1445):
        
        # Assigning a Call to a Name (line 1445):
        
        # Call to norm(...): (line 1445)
        # Processing the call arguments (line 1445)
        # Getting the type of 'v' (line 1445)
        v_176241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 18), 'v', False)
        # Processing the call keyword arguments (line 1445)
        kwargs_176242 = {}
        # Getting the type of 'norm' (line 1445)
        norm_176240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 13), 'norm', False)
        # Calling norm(args, kwargs) (line 1445)
        norm_call_result_176243 = invoke(stypy.reporting.localization.Localization(__file__, 1445, 13), norm_176240, *[v_176241], **kwargs_176242)
        
        # Assigning a type to the variable 'nv' (line 1445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1445, 8), 'nv', norm_call_result_176243)
        
        
        # Getting the type of 'nv' (line 1446)
        nv_176244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 11), 'nv')
        int_176245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1446, 17), 'int')
        # Applying the binary operator '==' (line 1446)
        result_eq_176246 = python_operator(stypy.reporting.localization.Localization(__file__, 1446, 11), '==', nv_176244, int_176245)
        
        # Testing the type of an if condition (line 1446)
        if_condition_176247 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1446, 8), result_eq_176246)
        # Assigning a type to the variable 'if_condition_176247' (line 1446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1446, 8), 'if_condition_176247', if_condition_176247)
        # SSA begins for if statement (line 1446)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        int_176248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1447, 19), 'int')
        # Getting the type of 'v' (line 1447)
        v_176249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 21), 'v')
        # Applying the binary operator '*' (line 1447)
        result_mul_176250 = python_operator(stypy.reporting.localization.Localization(__file__, 1447, 19), '*', int_176248, v_176249)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1447, 12), 'stypy_return_type', result_mul_176250)
        # SSA join for if statement (line 1446)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 1448):
        
        # Assigning a BinOp to a Name (line 1448):
        # Getting the type of 'self' (line 1448)
        self_176251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 13), 'self')
        # Obtaining the member 'omega' of a type (line 1448)
        omega_176252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1448, 13), self_176251, 'omega')
        # Getting the type of 'nv' (line 1448)
        nv_176253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 26), 'nv')
        # Applying the binary operator 'div' (line 1448)
        result_div_176254 = python_operator(stypy.reporting.localization.Localization(__file__, 1448, 13), 'div', omega_176252, nv_176253)
        
        # Assigning a type to the variable 'sc' (line 1448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1448, 8), 'sc', result_div_176254)
        
        # Assigning a BinOp to a Name (line 1449):
        
        # Assigning a BinOp to a Name (line 1449):
        
        # Call to func(...): (line 1449)
        # Processing the call arguments (line 1449)
        # Getting the type of 'self' (line 1449)
        self_176257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 23), 'self', False)
        # Obtaining the member 'x0' of a type (line 1449)
        x0_176258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1449, 23), self_176257, 'x0')
        # Getting the type of 'sc' (line 1449)
        sc_176259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 33), 'sc', False)
        # Getting the type of 'v' (line 1449)
        v_176260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 36), 'v', False)
        # Applying the binary operator '*' (line 1449)
        result_mul_176261 = python_operator(stypy.reporting.localization.Localization(__file__, 1449, 33), '*', sc_176259, v_176260)
        
        # Applying the binary operator '+' (line 1449)
        result_add_176262 = python_operator(stypy.reporting.localization.Localization(__file__, 1449, 23), '+', x0_176258, result_mul_176261)
        
        # Processing the call keyword arguments (line 1449)
        kwargs_176263 = {}
        # Getting the type of 'self' (line 1449)
        self_176255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 13), 'self', False)
        # Obtaining the member 'func' of a type (line 1449)
        func_176256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1449, 13), self_176255, 'func')
        # Calling func(args, kwargs) (line 1449)
        func_call_result_176264 = invoke(stypy.reporting.localization.Localization(__file__, 1449, 13), func_176256, *[result_add_176262], **kwargs_176263)
        
        # Getting the type of 'self' (line 1449)
        self_176265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 41), 'self')
        # Obtaining the member 'f0' of a type (line 1449)
        f0_176266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1449, 41), self_176265, 'f0')
        # Applying the binary operator '-' (line 1449)
        result_sub_176267 = python_operator(stypy.reporting.localization.Localization(__file__, 1449, 13), '-', func_call_result_176264, f0_176266)
        
        # Getting the type of 'sc' (line 1449)
        sc_176268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 52), 'sc')
        # Applying the binary operator 'div' (line 1449)
        result_div_176269 = python_operator(stypy.reporting.localization.Localization(__file__, 1449, 12), 'div', result_sub_176267, sc_176268)
        
        # Assigning a type to the variable 'r' (line 1449)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1449, 8), 'r', result_div_176269)
        
        
        # Evaluating a boolean operation
        
        
        # Call to all(...): (line 1450)
        # Processing the call arguments (line 1450)
        
        # Call to isfinite(...): (line 1450)
        # Processing the call arguments (line 1450)
        # Getting the type of 'r' (line 1450)
        r_176274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 34), 'r', False)
        # Processing the call keyword arguments (line 1450)
        kwargs_176275 = {}
        # Getting the type of 'np' (line 1450)
        np_176272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 22), 'np', False)
        # Obtaining the member 'isfinite' of a type (line 1450)
        isfinite_176273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1450, 22), np_176272, 'isfinite')
        # Calling isfinite(args, kwargs) (line 1450)
        isfinite_call_result_176276 = invoke(stypy.reporting.localization.Localization(__file__, 1450, 22), isfinite_176273, *[r_176274], **kwargs_176275)
        
        # Processing the call keyword arguments (line 1450)
        kwargs_176277 = {}
        # Getting the type of 'np' (line 1450)
        np_176270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 15), 'np', False)
        # Obtaining the member 'all' of a type (line 1450)
        all_176271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1450, 15), np_176270, 'all')
        # Calling all(args, kwargs) (line 1450)
        all_call_result_176278 = invoke(stypy.reporting.localization.Localization(__file__, 1450, 15), all_176271, *[isfinite_call_result_176276], **kwargs_176277)
        
        # Applying the 'not' unary operator (line 1450)
        result_not__176279 = python_operator(stypy.reporting.localization.Localization(__file__, 1450, 11), 'not', all_call_result_176278)
        
        
        # Call to all(...): (line 1450)
        # Processing the call arguments (line 1450)
        
        # Call to isfinite(...): (line 1450)
        # Processing the call arguments (line 1450)
        # Getting the type of 'v' (line 1450)
        v_176284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 61), 'v', False)
        # Processing the call keyword arguments (line 1450)
        kwargs_176285 = {}
        # Getting the type of 'np' (line 1450)
        np_176282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 49), 'np', False)
        # Obtaining the member 'isfinite' of a type (line 1450)
        isfinite_176283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1450, 49), np_176282, 'isfinite')
        # Calling isfinite(args, kwargs) (line 1450)
        isfinite_call_result_176286 = invoke(stypy.reporting.localization.Localization(__file__, 1450, 49), isfinite_176283, *[v_176284], **kwargs_176285)
        
        # Processing the call keyword arguments (line 1450)
        kwargs_176287 = {}
        # Getting the type of 'np' (line 1450)
        np_176280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 42), 'np', False)
        # Obtaining the member 'all' of a type (line 1450)
        all_176281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1450, 42), np_176280, 'all')
        # Calling all(args, kwargs) (line 1450)
        all_call_result_176288 = invoke(stypy.reporting.localization.Localization(__file__, 1450, 42), all_176281, *[isfinite_call_result_176286], **kwargs_176287)
        
        # Applying the binary operator 'and' (line 1450)
        result_and_keyword_176289 = python_operator(stypy.reporting.localization.Localization(__file__, 1450, 11), 'and', result_not__176279, all_call_result_176288)
        
        # Testing the type of an if condition (line 1450)
        if_condition_176290 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1450, 8), result_and_keyword_176289)
        # Assigning a type to the variable 'if_condition_176290' (line 1450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1450, 8), 'if_condition_176290', if_condition_176290)
        # SSA begins for if statement (line 1450)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1451)
        # Processing the call arguments (line 1451)
        str_176292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1451, 29), 'str', 'Function returned non-finite results')
        # Processing the call keyword arguments (line 1451)
        kwargs_176293 = {}
        # Getting the type of 'ValueError' (line 1451)
        ValueError_176291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1451)
        ValueError_call_result_176294 = invoke(stypy.reporting.localization.Localization(__file__, 1451, 18), ValueError_176291, *[str_176292], **kwargs_176293)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1451, 12), ValueError_call_result_176294, 'raise parameter', BaseException)
        # SSA join for if statement (line 1450)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'r' (line 1452)
        r_176295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 15), 'r')
        # Assigning a type to the variable 'stypy_return_type' (line 1452)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1452, 8), 'stypy_return_type', r_176295)
        
        # ################# End of 'matvec(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'matvec' in the type store
        # Getting the type of 'stypy_return_type' (line 1444)
        stypy_return_type_176296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_176296)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'matvec'
        return stypy_return_type_176296


    @norecursion
    def solve(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_176297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1454, 29), 'int')
        defaults = [int_176297]
        # Create a new context for function 'solve'
        module_type_store = module_type_store.open_function_context('solve', 1454, 4, False)
        # Assigning a type to the variable 'self' (line 1455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1455, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        KrylovJacobian.solve.__dict__.__setitem__('stypy_localization', localization)
        KrylovJacobian.solve.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        KrylovJacobian.solve.__dict__.__setitem__('stypy_type_store', module_type_store)
        KrylovJacobian.solve.__dict__.__setitem__('stypy_function_name', 'KrylovJacobian.solve')
        KrylovJacobian.solve.__dict__.__setitem__('stypy_param_names_list', ['rhs', 'tol'])
        KrylovJacobian.solve.__dict__.__setitem__('stypy_varargs_param_name', None)
        KrylovJacobian.solve.__dict__.__setitem__('stypy_kwargs_param_name', None)
        KrylovJacobian.solve.__dict__.__setitem__('stypy_call_defaults', defaults)
        KrylovJacobian.solve.__dict__.__setitem__('stypy_call_varargs', varargs)
        KrylovJacobian.solve.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        KrylovJacobian.solve.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'KrylovJacobian.solve', ['rhs', 'tol'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'solve', localization, ['rhs', 'tol'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'solve(...)' code ##################

        
        
        str_176298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1455, 11), 'str', 'tol')
        # Getting the type of 'self' (line 1455)
        self_176299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 20), 'self')
        # Obtaining the member 'method_kw' of a type (line 1455)
        method_kw_176300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1455, 20), self_176299, 'method_kw')
        # Applying the binary operator 'in' (line 1455)
        result_contains_176301 = python_operator(stypy.reporting.localization.Localization(__file__, 1455, 11), 'in', str_176298, method_kw_176300)
        
        # Testing the type of an if condition (line 1455)
        if_condition_176302 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1455, 8), result_contains_176301)
        # Assigning a type to the variable 'if_condition_176302' (line 1455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1455, 8), 'if_condition_176302', if_condition_176302)
        # SSA begins for if statement (line 1455)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 1456):
        
        # Assigning a Subscript to a Name (line 1456):
        
        # Obtaining the type of the subscript
        int_176303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1456, 12), 'int')
        
        # Call to method(...): (line 1456)
        # Processing the call arguments (line 1456)
        # Getting the type of 'self' (line 1456)
        self_176306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 36), 'self', False)
        # Obtaining the member 'op' of a type (line 1456)
        op_176307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 36), self_176306, 'op')
        # Getting the type of 'rhs' (line 1456)
        rhs_176308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 45), 'rhs', False)
        # Processing the call keyword arguments (line 1456)
        # Getting the type of 'self' (line 1456)
        self_176309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 52), 'self', False)
        # Obtaining the member 'method_kw' of a type (line 1456)
        method_kw_176310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 52), self_176309, 'method_kw')
        kwargs_176311 = {'method_kw_176310': method_kw_176310}
        # Getting the type of 'self' (line 1456)
        self_176304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 24), 'self', False)
        # Obtaining the member 'method' of a type (line 1456)
        method_176305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 24), self_176304, 'method')
        # Calling method(args, kwargs) (line 1456)
        method_call_result_176312 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 24), method_176305, *[op_176307, rhs_176308], **kwargs_176311)
        
        # Obtaining the member '__getitem__' of a type (line 1456)
        getitem___176313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 12), method_call_result_176312, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1456)
        subscript_call_result_176314 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 12), getitem___176313, int_176303)
        
        # Assigning a type to the variable 'tuple_var_assignment_173011' (line 1456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 12), 'tuple_var_assignment_173011', subscript_call_result_176314)
        
        # Assigning a Subscript to a Name (line 1456):
        
        # Obtaining the type of the subscript
        int_176315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1456, 12), 'int')
        
        # Call to method(...): (line 1456)
        # Processing the call arguments (line 1456)
        # Getting the type of 'self' (line 1456)
        self_176318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 36), 'self', False)
        # Obtaining the member 'op' of a type (line 1456)
        op_176319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 36), self_176318, 'op')
        # Getting the type of 'rhs' (line 1456)
        rhs_176320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 45), 'rhs', False)
        # Processing the call keyword arguments (line 1456)
        # Getting the type of 'self' (line 1456)
        self_176321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 52), 'self', False)
        # Obtaining the member 'method_kw' of a type (line 1456)
        method_kw_176322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 52), self_176321, 'method_kw')
        kwargs_176323 = {'method_kw_176322': method_kw_176322}
        # Getting the type of 'self' (line 1456)
        self_176316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 24), 'self', False)
        # Obtaining the member 'method' of a type (line 1456)
        method_176317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 24), self_176316, 'method')
        # Calling method(args, kwargs) (line 1456)
        method_call_result_176324 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 24), method_176317, *[op_176319, rhs_176320], **kwargs_176323)
        
        # Obtaining the member '__getitem__' of a type (line 1456)
        getitem___176325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 12), method_call_result_176324, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1456)
        subscript_call_result_176326 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 12), getitem___176325, int_176315)
        
        # Assigning a type to the variable 'tuple_var_assignment_173012' (line 1456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 12), 'tuple_var_assignment_173012', subscript_call_result_176326)
        
        # Assigning a Name to a Name (line 1456):
        # Getting the type of 'tuple_var_assignment_173011' (line 1456)
        tuple_var_assignment_173011_176327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 12), 'tuple_var_assignment_173011')
        # Assigning a type to the variable 'sol' (line 1456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 12), 'sol', tuple_var_assignment_173011_176327)
        
        # Assigning a Name to a Name (line 1456):
        # Getting the type of 'tuple_var_assignment_173012' (line 1456)
        tuple_var_assignment_173012_176328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 12), 'tuple_var_assignment_173012')
        # Assigning a type to the variable 'info' (line 1456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 17), 'info', tuple_var_assignment_173012_176328)
        # SSA branch for the else part of an if statement (line 1455)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 1458):
        
        # Assigning a Subscript to a Name (line 1458):
        
        # Obtaining the type of the subscript
        int_176329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1458, 12), 'int')
        
        # Call to method(...): (line 1458)
        # Processing the call arguments (line 1458)
        # Getting the type of 'self' (line 1458)
        self_176332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 36), 'self', False)
        # Obtaining the member 'op' of a type (line 1458)
        op_176333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1458, 36), self_176332, 'op')
        # Getting the type of 'rhs' (line 1458)
        rhs_176334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 45), 'rhs', False)
        # Processing the call keyword arguments (line 1458)
        # Getting the type of 'tol' (line 1458)
        tol_176335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 54), 'tol', False)
        keyword_176336 = tol_176335
        # Getting the type of 'self' (line 1458)
        self_176337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 61), 'self', False)
        # Obtaining the member 'method_kw' of a type (line 1458)
        method_kw_176338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1458, 61), self_176337, 'method_kw')
        kwargs_176339 = {'tol': keyword_176336, 'method_kw_176338': method_kw_176338}
        # Getting the type of 'self' (line 1458)
        self_176330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 24), 'self', False)
        # Obtaining the member 'method' of a type (line 1458)
        method_176331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1458, 24), self_176330, 'method')
        # Calling method(args, kwargs) (line 1458)
        method_call_result_176340 = invoke(stypy.reporting.localization.Localization(__file__, 1458, 24), method_176331, *[op_176333, rhs_176334], **kwargs_176339)
        
        # Obtaining the member '__getitem__' of a type (line 1458)
        getitem___176341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1458, 12), method_call_result_176340, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1458)
        subscript_call_result_176342 = invoke(stypy.reporting.localization.Localization(__file__, 1458, 12), getitem___176341, int_176329)
        
        # Assigning a type to the variable 'tuple_var_assignment_173013' (line 1458)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1458, 12), 'tuple_var_assignment_173013', subscript_call_result_176342)
        
        # Assigning a Subscript to a Name (line 1458):
        
        # Obtaining the type of the subscript
        int_176343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1458, 12), 'int')
        
        # Call to method(...): (line 1458)
        # Processing the call arguments (line 1458)
        # Getting the type of 'self' (line 1458)
        self_176346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 36), 'self', False)
        # Obtaining the member 'op' of a type (line 1458)
        op_176347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1458, 36), self_176346, 'op')
        # Getting the type of 'rhs' (line 1458)
        rhs_176348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 45), 'rhs', False)
        # Processing the call keyword arguments (line 1458)
        # Getting the type of 'tol' (line 1458)
        tol_176349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 54), 'tol', False)
        keyword_176350 = tol_176349
        # Getting the type of 'self' (line 1458)
        self_176351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 61), 'self', False)
        # Obtaining the member 'method_kw' of a type (line 1458)
        method_kw_176352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1458, 61), self_176351, 'method_kw')
        kwargs_176353 = {'method_kw_176352': method_kw_176352, 'tol': keyword_176350}
        # Getting the type of 'self' (line 1458)
        self_176344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 24), 'self', False)
        # Obtaining the member 'method' of a type (line 1458)
        method_176345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1458, 24), self_176344, 'method')
        # Calling method(args, kwargs) (line 1458)
        method_call_result_176354 = invoke(stypy.reporting.localization.Localization(__file__, 1458, 24), method_176345, *[op_176347, rhs_176348], **kwargs_176353)
        
        # Obtaining the member '__getitem__' of a type (line 1458)
        getitem___176355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1458, 12), method_call_result_176354, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1458)
        subscript_call_result_176356 = invoke(stypy.reporting.localization.Localization(__file__, 1458, 12), getitem___176355, int_176343)
        
        # Assigning a type to the variable 'tuple_var_assignment_173014' (line 1458)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1458, 12), 'tuple_var_assignment_173014', subscript_call_result_176356)
        
        # Assigning a Name to a Name (line 1458):
        # Getting the type of 'tuple_var_assignment_173013' (line 1458)
        tuple_var_assignment_173013_176357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 12), 'tuple_var_assignment_173013')
        # Assigning a type to the variable 'sol' (line 1458)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1458, 12), 'sol', tuple_var_assignment_173013_176357)
        
        # Assigning a Name to a Name (line 1458):
        # Getting the type of 'tuple_var_assignment_173014' (line 1458)
        tuple_var_assignment_173014_176358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 12), 'tuple_var_assignment_173014')
        # Assigning a type to the variable 'info' (line 1458)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1458, 17), 'info', tuple_var_assignment_173014_176358)
        # SSA join for if statement (line 1455)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'sol' (line 1459)
        sol_176359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 15), 'sol')
        # Assigning a type to the variable 'stypy_return_type' (line 1459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1459, 8), 'stypy_return_type', sol_176359)
        
        # ################# End of 'solve(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'solve' in the type store
        # Getting the type of 'stypy_return_type' (line 1454)
        stypy_return_type_176360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_176360)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'solve'
        return stypy_return_type_176360


    @norecursion
    def update(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update'
        module_type_store = module_type_store.open_function_context('update', 1461, 4, False)
        # Assigning a type to the variable 'self' (line 1462)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1462, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        KrylovJacobian.update.__dict__.__setitem__('stypy_localization', localization)
        KrylovJacobian.update.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        KrylovJacobian.update.__dict__.__setitem__('stypy_type_store', module_type_store)
        KrylovJacobian.update.__dict__.__setitem__('stypy_function_name', 'KrylovJacobian.update')
        KrylovJacobian.update.__dict__.__setitem__('stypy_param_names_list', ['x', 'f'])
        KrylovJacobian.update.__dict__.__setitem__('stypy_varargs_param_name', None)
        KrylovJacobian.update.__dict__.__setitem__('stypy_kwargs_param_name', None)
        KrylovJacobian.update.__dict__.__setitem__('stypy_call_defaults', defaults)
        KrylovJacobian.update.__dict__.__setitem__('stypy_call_varargs', varargs)
        KrylovJacobian.update.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        KrylovJacobian.update.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'KrylovJacobian.update', ['x', 'f'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update', localization, ['x', 'f'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1462):
        
        # Assigning a Name to a Attribute (line 1462):
        # Getting the type of 'x' (line 1462)
        x_176361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 18), 'x')
        # Getting the type of 'self' (line 1462)
        self_176362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 8), 'self')
        # Setting the type of the member 'x0' of a type (line 1462)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1462, 8), self_176362, 'x0', x_176361)
        
        # Assigning a Name to a Attribute (line 1463):
        
        # Assigning a Name to a Attribute (line 1463):
        # Getting the type of 'f' (line 1463)
        f_176363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 18), 'f')
        # Getting the type of 'self' (line 1463)
        self_176364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 8), 'self')
        # Setting the type of the member 'f0' of a type (line 1463)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1463, 8), self_176364, 'f0', f_176363)
        
        # Call to _update_diff_step(...): (line 1464)
        # Processing the call keyword arguments (line 1464)
        kwargs_176367 = {}
        # Getting the type of 'self' (line 1464)
        self_176365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 8), 'self', False)
        # Obtaining the member '_update_diff_step' of a type (line 1464)
        _update_diff_step_176366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1464, 8), self_176365, '_update_diff_step')
        # Calling _update_diff_step(args, kwargs) (line 1464)
        _update_diff_step_call_result_176368 = invoke(stypy.reporting.localization.Localization(__file__, 1464, 8), _update_diff_step_176366, *[], **kwargs_176367)
        
        
        
        # Getting the type of 'self' (line 1467)
        self_176369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 11), 'self')
        # Obtaining the member 'preconditioner' of a type (line 1467)
        preconditioner_176370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1467, 11), self_176369, 'preconditioner')
        # Getting the type of 'None' (line 1467)
        None_176371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 38), 'None')
        # Applying the binary operator 'isnot' (line 1467)
        result_is_not_176372 = python_operator(stypy.reporting.localization.Localization(__file__, 1467, 11), 'isnot', preconditioner_176370, None_176371)
        
        # Testing the type of an if condition (line 1467)
        if_condition_176373 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1467, 8), result_is_not_176372)
        # Assigning a type to the variable 'if_condition_176373' (line 1467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1467, 8), 'if_condition_176373', if_condition_176373)
        # SSA begins for if statement (line 1467)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 1468)
        str_176374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1468, 44), 'str', 'update')
        # Getting the type of 'self' (line 1468)
        self_176375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 23), 'self')
        # Obtaining the member 'preconditioner' of a type (line 1468)
        preconditioner_176376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1468, 23), self_176375, 'preconditioner')
        
        (may_be_176377, more_types_in_union_176378) = may_provide_member(str_176374, preconditioner_176376)

        if may_be_176377:

            if more_types_in_union_176378:
                # Runtime conditional SSA (line 1468)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'self' (line 1468)
            self_176379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 12), 'self')
            # Obtaining the member 'preconditioner' of a type (line 1468)
            preconditioner_176380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1468, 12), self_176379, 'preconditioner')
            # Setting the type of the member 'preconditioner' of a type (line 1468)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1468, 12), self_176379, 'preconditioner', remove_not_member_provider_from_union(preconditioner_176376, 'update'))
            
            # Call to update(...): (line 1469)
            # Processing the call arguments (line 1469)
            # Getting the type of 'x' (line 1469)
            x_176384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 43), 'x', False)
            # Getting the type of 'f' (line 1469)
            f_176385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 46), 'f', False)
            # Processing the call keyword arguments (line 1469)
            kwargs_176386 = {}
            # Getting the type of 'self' (line 1469)
            self_176381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 16), 'self', False)
            # Obtaining the member 'preconditioner' of a type (line 1469)
            preconditioner_176382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1469, 16), self_176381, 'preconditioner')
            # Obtaining the member 'update' of a type (line 1469)
            update_176383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1469, 16), preconditioner_176382, 'update')
            # Calling update(args, kwargs) (line 1469)
            update_call_result_176387 = invoke(stypy.reporting.localization.Localization(__file__, 1469, 16), update_176383, *[x_176384, f_176385], **kwargs_176386)
            

            if more_types_in_union_176378:
                # SSA join for if statement (line 1468)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 1467)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'update(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update' in the type store
        # Getting the type of 'stypy_return_type' (line 1461)
        stypy_return_type_176388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_176388)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update'
        return stypy_return_type_176388


    @norecursion
    def setup(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'setup'
        module_type_store = module_type_store.open_function_context('setup', 1471, 4, False)
        # Assigning a type to the variable 'self' (line 1472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1472, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        KrylovJacobian.setup.__dict__.__setitem__('stypy_localization', localization)
        KrylovJacobian.setup.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        KrylovJacobian.setup.__dict__.__setitem__('stypy_type_store', module_type_store)
        KrylovJacobian.setup.__dict__.__setitem__('stypy_function_name', 'KrylovJacobian.setup')
        KrylovJacobian.setup.__dict__.__setitem__('stypy_param_names_list', ['x', 'f', 'func'])
        KrylovJacobian.setup.__dict__.__setitem__('stypy_varargs_param_name', None)
        KrylovJacobian.setup.__dict__.__setitem__('stypy_kwargs_param_name', None)
        KrylovJacobian.setup.__dict__.__setitem__('stypy_call_defaults', defaults)
        KrylovJacobian.setup.__dict__.__setitem__('stypy_call_varargs', varargs)
        KrylovJacobian.setup.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        KrylovJacobian.setup.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'KrylovJacobian.setup', ['x', 'f', 'func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'setup', localization, ['x', 'f', 'func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'setup(...)' code ##################

        
        # Call to setup(...): (line 1472)
        # Processing the call arguments (line 1472)
        # Getting the type of 'self' (line 1472)
        self_176391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 23), 'self', False)
        # Getting the type of 'x' (line 1472)
        x_176392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 29), 'x', False)
        # Getting the type of 'f' (line 1472)
        f_176393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 32), 'f', False)
        # Getting the type of 'func' (line 1472)
        func_176394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 35), 'func', False)
        # Processing the call keyword arguments (line 1472)
        kwargs_176395 = {}
        # Getting the type of 'Jacobian' (line 1472)
        Jacobian_176389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 8), 'Jacobian', False)
        # Obtaining the member 'setup' of a type (line 1472)
        setup_176390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 8), Jacobian_176389, 'setup')
        # Calling setup(args, kwargs) (line 1472)
        setup_call_result_176396 = invoke(stypy.reporting.localization.Localization(__file__, 1472, 8), setup_176390, *[self_176391, x_176392, f_176393, func_176394], **kwargs_176395)
        
        
        # Assigning a Name to a Attribute (line 1473):
        
        # Assigning a Name to a Attribute (line 1473):
        # Getting the type of 'x' (line 1473)
        x_176397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 18), 'x')
        # Getting the type of 'self' (line 1473)
        self_176398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 8), 'self')
        # Setting the type of the member 'x0' of a type (line 1473)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 8), self_176398, 'x0', x_176397)
        
        # Assigning a Name to a Attribute (line 1474):
        
        # Assigning a Name to a Attribute (line 1474):
        # Getting the type of 'f' (line 1474)
        f_176399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 18), 'f')
        # Getting the type of 'self' (line 1474)
        self_176400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 8), 'self')
        # Setting the type of the member 'f0' of a type (line 1474)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1474, 8), self_176400, 'f0', f_176399)
        
        # Assigning a Call to a Attribute (line 1475):
        
        # Assigning a Call to a Attribute (line 1475):
        
        # Call to aslinearoperator(...): (line 1475)
        # Processing the call arguments (line 1475)
        # Getting the type of 'self' (line 1475)
        self_176405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 55), 'self', False)
        # Processing the call keyword arguments (line 1475)
        kwargs_176406 = {}
        # Getting the type of 'scipy' (line 1475)
        scipy_176401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 18), 'scipy', False)
        # Obtaining the member 'sparse' of a type (line 1475)
        sparse_176402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1475, 18), scipy_176401, 'sparse')
        # Obtaining the member 'linalg' of a type (line 1475)
        linalg_176403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1475, 18), sparse_176402, 'linalg')
        # Obtaining the member 'aslinearoperator' of a type (line 1475)
        aslinearoperator_176404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1475, 18), linalg_176403, 'aslinearoperator')
        # Calling aslinearoperator(args, kwargs) (line 1475)
        aslinearoperator_call_result_176407 = invoke(stypy.reporting.localization.Localization(__file__, 1475, 18), aslinearoperator_176404, *[self_176405], **kwargs_176406)
        
        # Getting the type of 'self' (line 1475)
        self_176408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 8), 'self')
        # Setting the type of the member 'op' of a type (line 1475)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1475, 8), self_176408, 'op', aslinearoperator_call_result_176407)
        
        # Type idiom detected: calculating its left and rigth part (line 1477)
        # Getting the type of 'self' (line 1477)
        self_176409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 11), 'self')
        # Obtaining the member 'rdiff' of a type (line 1477)
        rdiff_176410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1477, 11), self_176409, 'rdiff')
        # Getting the type of 'None' (line 1477)
        None_176411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 25), 'None')
        
        (may_be_176412, more_types_in_union_176413) = may_be_none(rdiff_176410, None_176411)

        if may_be_176412:

            if more_types_in_union_176413:
                # Runtime conditional SSA (line 1477)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a BinOp to a Attribute (line 1478):
            
            # Assigning a BinOp to a Attribute (line 1478):
            
            # Call to finfo(...): (line 1478)
            # Processing the call arguments (line 1478)
            # Getting the type of 'x' (line 1478)
            x_176416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 34), 'x', False)
            # Obtaining the member 'dtype' of a type (line 1478)
            dtype_176417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1478, 34), x_176416, 'dtype')
            # Processing the call keyword arguments (line 1478)
            kwargs_176418 = {}
            # Getting the type of 'np' (line 1478)
            np_176414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 25), 'np', False)
            # Obtaining the member 'finfo' of a type (line 1478)
            finfo_176415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1478, 25), np_176414, 'finfo')
            # Calling finfo(args, kwargs) (line 1478)
            finfo_call_result_176419 = invoke(stypy.reporting.localization.Localization(__file__, 1478, 25), finfo_176415, *[dtype_176417], **kwargs_176418)
            
            # Obtaining the member 'eps' of a type (line 1478)
            eps_176420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1478, 25), finfo_call_result_176419, 'eps')
            float_176421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1478, 51), 'float')
            int_176422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1478, 54), 'int')
            # Applying the binary operator 'div' (line 1478)
            result_div_176423 = python_operator(stypy.reporting.localization.Localization(__file__, 1478, 51), 'div', float_176421, int_176422)
            
            # Applying the binary operator '**' (line 1478)
            result_pow_176424 = python_operator(stypy.reporting.localization.Localization(__file__, 1478, 25), '**', eps_176420, result_div_176423)
            
            # Getting the type of 'self' (line 1478)
            self_176425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 12), 'self')
            # Setting the type of the member 'rdiff' of a type (line 1478)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1478, 12), self_176425, 'rdiff', result_pow_176424)

            if more_types_in_union_176413:
                # SSA join for if statement (line 1477)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to _update_diff_step(...): (line 1480)
        # Processing the call keyword arguments (line 1480)
        kwargs_176428 = {}
        # Getting the type of 'self' (line 1480)
        self_176426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 8), 'self', False)
        # Obtaining the member '_update_diff_step' of a type (line 1480)
        _update_diff_step_176427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1480, 8), self_176426, '_update_diff_step')
        # Calling _update_diff_step(args, kwargs) (line 1480)
        _update_diff_step_call_result_176429 = invoke(stypy.reporting.localization.Localization(__file__, 1480, 8), _update_diff_step_176427, *[], **kwargs_176428)
        
        
        
        # Getting the type of 'self' (line 1483)
        self_176430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 11), 'self')
        # Obtaining the member 'preconditioner' of a type (line 1483)
        preconditioner_176431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1483, 11), self_176430, 'preconditioner')
        # Getting the type of 'None' (line 1483)
        None_176432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 38), 'None')
        # Applying the binary operator 'isnot' (line 1483)
        result_is_not_176433 = python_operator(stypy.reporting.localization.Localization(__file__, 1483, 11), 'isnot', preconditioner_176431, None_176432)
        
        # Testing the type of an if condition (line 1483)
        if_condition_176434 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1483, 8), result_is_not_176433)
        # Assigning a type to the variable 'if_condition_176434' (line 1483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1483, 8), 'if_condition_176434', if_condition_176434)
        # SSA begins for if statement (line 1483)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 1484)
        str_176435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1484, 44), 'str', 'setup')
        # Getting the type of 'self' (line 1484)
        self_176436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 23), 'self')
        # Obtaining the member 'preconditioner' of a type (line 1484)
        preconditioner_176437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1484, 23), self_176436, 'preconditioner')
        
        (may_be_176438, more_types_in_union_176439) = may_provide_member(str_176435, preconditioner_176437)

        if may_be_176438:

            if more_types_in_union_176439:
                # Runtime conditional SSA (line 1484)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'self' (line 1484)
            self_176440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 12), 'self')
            # Obtaining the member 'preconditioner' of a type (line 1484)
            preconditioner_176441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1484, 12), self_176440, 'preconditioner')
            # Setting the type of the member 'preconditioner' of a type (line 1484)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1484, 12), self_176440, 'preconditioner', remove_not_member_provider_from_union(preconditioner_176437, 'setup'))
            
            # Call to setup(...): (line 1485)
            # Processing the call arguments (line 1485)
            # Getting the type of 'x' (line 1485)
            x_176445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 42), 'x', False)
            # Getting the type of 'f' (line 1485)
            f_176446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 45), 'f', False)
            # Getting the type of 'func' (line 1485)
            func_176447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 48), 'func', False)
            # Processing the call keyword arguments (line 1485)
            kwargs_176448 = {}
            # Getting the type of 'self' (line 1485)
            self_176442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 16), 'self', False)
            # Obtaining the member 'preconditioner' of a type (line 1485)
            preconditioner_176443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1485, 16), self_176442, 'preconditioner')
            # Obtaining the member 'setup' of a type (line 1485)
            setup_176444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1485, 16), preconditioner_176443, 'setup')
            # Calling setup(args, kwargs) (line 1485)
            setup_call_result_176449 = invoke(stypy.reporting.localization.Localization(__file__, 1485, 16), setup_176444, *[x_176445, f_176446, func_176447], **kwargs_176448)
            

            if more_types_in_union_176439:
                # SSA join for if statement (line 1484)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 1483)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'setup(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'setup' in the type store
        # Getting the type of 'stypy_return_type' (line 1471)
        stypy_return_type_176450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_176450)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'setup'
        return stypy_return_type_176450


# Assigning a type to the variable 'KrylovJacobian' (line 1327)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1327, 0), 'KrylovJacobian', KrylovJacobian)

@norecursion
def _nonlin_wrapper(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_nonlin_wrapper'
    module_type_store = module_type_store.open_function_context('_nonlin_wrapper', 1492, 0, False)
    
    # Passed parameters checking function
    _nonlin_wrapper.stypy_localization = localization
    _nonlin_wrapper.stypy_type_of_self = None
    _nonlin_wrapper.stypy_type_store = module_type_store
    _nonlin_wrapper.stypy_function_name = '_nonlin_wrapper'
    _nonlin_wrapper.stypy_param_names_list = ['name', 'jac']
    _nonlin_wrapper.stypy_varargs_param_name = None
    _nonlin_wrapper.stypy_kwargs_param_name = None
    _nonlin_wrapper.stypy_call_defaults = defaults
    _nonlin_wrapper.stypy_call_varargs = varargs
    _nonlin_wrapper.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_nonlin_wrapper', ['name', 'jac'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_nonlin_wrapper', localization, ['name', 'jac'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_nonlin_wrapper(...)' code ##################

    str_176451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1500, (-1)), 'str', '\n    Construct a solver wrapper with given name and jacobian approx.\n\n    It inspects the keyword arguments of ``jac.__init__``, and allows to\n    use the same arguments in the wrapper function, in addition to the\n    keyword arguments of `nonlin_solve`\n\n    ')
    
    # Assigning a Call to a Tuple (line 1501):
    
    # Assigning a Subscript to a Name (line 1501):
    
    # Obtaining the type of the subscript
    int_176452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1501, 4), 'int')
    
    # Call to _getargspec(...): (line 1501)
    # Processing the call arguments (line 1501)
    # Getting the type of 'jac' (line 1501)
    jac_176454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 49), 'jac', False)
    # Obtaining the member '__init__' of a type (line 1501)
    init___176455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1501, 49), jac_176454, '__init__')
    # Processing the call keyword arguments (line 1501)
    kwargs_176456 = {}
    # Getting the type of '_getargspec' (line 1501)
    _getargspec_176453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 37), '_getargspec', False)
    # Calling _getargspec(args, kwargs) (line 1501)
    _getargspec_call_result_176457 = invoke(stypy.reporting.localization.Localization(__file__, 1501, 37), _getargspec_176453, *[init___176455], **kwargs_176456)
    
    # Obtaining the member '__getitem__' of a type (line 1501)
    getitem___176458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1501, 4), _getargspec_call_result_176457, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1501)
    subscript_call_result_176459 = invoke(stypy.reporting.localization.Localization(__file__, 1501, 4), getitem___176458, int_176452)
    
    # Assigning a type to the variable 'tuple_var_assignment_173015' (line 1501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1501, 4), 'tuple_var_assignment_173015', subscript_call_result_176459)
    
    # Assigning a Subscript to a Name (line 1501):
    
    # Obtaining the type of the subscript
    int_176460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1501, 4), 'int')
    
    # Call to _getargspec(...): (line 1501)
    # Processing the call arguments (line 1501)
    # Getting the type of 'jac' (line 1501)
    jac_176462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 49), 'jac', False)
    # Obtaining the member '__init__' of a type (line 1501)
    init___176463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1501, 49), jac_176462, '__init__')
    # Processing the call keyword arguments (line 1501)
    kwargs_176464 = {}
    # Getting the type of '_getargspec' (line 1501)
    _getargspec_176461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 37), '_getargspec', False)
    # Calling _getargspec(args, kwargs) (line 1501)
    _getargspec_call_result_176465 = invoke(stypy.reporting.localization.Localization(__file__, 1501, 37), _getargspec_176461, *[init___176463], **kwargs_176464)
    
    # Obtaining the member '__getitem__' of a type (line 1501)
    getitem___176466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1501, 4), _getargspec_call_result_176465, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1501)
    subscript_call_result_176467 = invoke(stypy.reporting.localization.Localization(__file__, 1501, 4), getitem___176466, int_176460)
    
    # Assigning a type to the variable 'tuple_var_assignment_173016' (line 1501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1501, 4), 'tuple_var_assignment_173016', subscript_call_result_176467)
    
    # Assigning a Subscript to a Name (line 1501):
    
    # Obtaining the type of the subscript
    int_176468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1501, 4), 'int')
    
    # Call to _getargspec(...): (line 1501)
    # Processing the call arguments (line 1501)
    # Getting the type of 'jac' (line 1501)
    jac_176470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 49), 'jac', False)
    # Obtaining the member '__init__' of a type (line 1501)
    init___176471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1501, 49), jac_176470, '__init__')
    # Processing the call keyword arguments (line 1501)
    kwargs_176472 = {}
    # Getting the type of '_getargspec' (line 1501)
    _getargspec_176469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 37), '_getargspec', False)
    # Calling _getargspec(args, kwargs) (line 1501)
    _getargspec_call_result_176473 = invoke(stypy.reporting.localization.Localization(__file__, 1501, 37), _getargspec_176469, *[init___176471], **kwargs_176472)
    
    # Obtaining the member '__getitem__' of a type (line 1501)
    getitem___176474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1501, 4), _getargspec_call_result_176473, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1501)
    subscript_call_result_176475 = invoke(stypy.reporting.localization.Localization(__file__, 1501, 4), getitem___176474, int_176468)
    
    # Assigning a type to the variable 'tuple_var_assignment_173017' (line 1501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1501, 4), 'tuple_var_assignment_173017', subscript_call_result_176475)
    
    # Assigning a Subscript to a Name (line 1501):
    
    # Obtaining the type of the subscript
    int_176476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1501, 4), 'int')
    
    # Call to _getargspec(...): (line 1501)
    # Processing the call arguments (line 1501)
    # Getting the type of 'jac' (line 1501)
    jac_176478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 49), 'jac', False)
    # Obtaining the member '__init__' of a type (line 1501)
    init___176479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1501, 49), jac_176478, '__init__')
    # Processing the call keyword arguments (line 1501)
    kwargs_176480 = {}
    # Getting the type of '_getargspec' (line 1501)
    _getargspec_176477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 37), '_getargspec', False)
    # Calling _getargspec(args, kwargs) (line 1501)
    _getargspec_call_result_176481 = invoke(stypy.reporting.localization.Localization(__file__, 1501, 37), _getargspec_176477, *[init___176479], **kwargs_176480)
    
    # Obtaining the member '__getitem__' of a type (line 1501)
    getitem___176482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1501, 4), _getargspec_call_result_176481, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1501)
    subscript_call_result_176483 = invoke(stypy.reporting.localization.Localization(__file__, 1501, 4), getitem___176482, int_176476)
    
    # Assigning a type to the variable 'tuple_var_assignment_173018' (line 1501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1501, 4), 'tuple_var_assignment_173018', subscript_call_result_176483)
    
    # Assigning a Name to a Name (line 1501):
    # Getting the type of 'tuple_var_assignment_173015' (line 1501)
    tuple_var_assignment_173015_176484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 4), 'tuple_var_assignment_173015')
    # Assigning a type to the variable 'args' (line 1501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1501, 4), 'args', tuple_var_assignment_173015_176484)
    
    # Assigning a Name to a Name (line 1501):
    # Getting the type of 'tuple_var_assignment_173016' (line 1501)
    tuple_var_assignment_173016_176485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 4), 'tuple_var_assignment_173016')
    # Assigning a type to the variable 'varargs' (line 1501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1501, 10), 'varargs', tuple_var_assignment_173016_176485)
    
    # Assigning a Name to a Name (line 1501):
    # Getting the type of 'tuple_var_assignment_173017' (line 1501)
    tuple_var_assignment_173017_176486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 4), 'tuple_var_assignment_173017')
    # Assigning a type to the variable 'varkw' (line 1501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1501, 19), 'varkw', tuple_var_assignment_173017_176486)
    
    # Assigning a Name to a Name (line 1501):
    # Getting the type of 'tuple_var_assignment_173018' (line 1501)
    tuple_var_assignment_173018_176487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 4), 'tuple_var_assignment_173018')
    # Assigning a type to the variable 'defaults' (line 1501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1501, 26), 'defaults', tuple_var_assignment_173018_176487)
    
    # Assigning a Call to a Name (line 1502):
    
    # Assigning a Call to a Name (line 1502):
    
    # Call to list(...): (line 1502)
    # Processing the call arguments (line 1502)
    
    # Call to zip(...): (line 1502)
    # Processing the call arguments (line 1502)
    
    # Obtaining the type of the subscript
    
    
    # Call to len(...): (line 1502)
    # Processing the call arguments (line 1502)
    # Getting the type of 'defaults' (line 1502)
    defaults_176491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 32), 'defaults', False)
    # Processing the call keyword arguments (line 1502)
    kwargs_176492 = {}
    # Getting the type of 'len' (line 1502)
    len_176490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 28), 'len', False)
    # Calling len(args, kwargs) (line 1502)
    len_call_result_176493 = invoke(stypy.reporting.localization.Localization(__file__, 1502, 28), len_176490, *[defaults_176491], **kwargs_176492)
    
    # Applying the 'usub' unary operator (line 1502)
    result___neg___176494 = python_operator(stypy.reporting.localization.Localization(__file__, 1502, 27), 'usub', len_call_result_176493)
    
    slice_176495 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1502, 22), result___neg___176494, None, None)
    # Getting the type of 'args' (line 1502)
    args_176496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 22), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 1502)
    getitem___176497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1502, 22), args_176496, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1502)
    subscript_call_result_176498 = invoke(stypy.reporting.localization.Localization(__file__, 1502, 22), getitem___176497, slice_176495)
    
    # Getting the type of 'defaults' (line 1502)
    defaults_176499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 45), 'defaults', False)
    # Processing the call keyword arguments (line 1502)
    kwargs_176500 = {}
    # Getting the type of 'zip' (line 1502)
    zip_176489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 18), 'zip', False)
    # Calling zip(args, kwargs) (line 1502)
    zip_call_result_176501 = invoke(stypy.reporting.localization.Localization(__file__, 1502, 18), zip_176489, *[subscript_call_result_176498, defaults_176499], **kwargs_176500)
    
    # Processing the call keyword arguments (line 1502)
    kwargs_176502 = {}
    # Getting the type of 'list' (line 1502)
    list_176488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 13), 'list', False)
    # Calling list(args, kwargs) (line 1502)
    list_call_result_176503 = invoke(stypy.reporting.localization.Localization(__file__, 1502, 13), list_176488, *[zip_call_result_176501], **kwargs_176502)
    
    # Assigning a type to the variable 'kwargs' (line 1502)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1502, 4), 'kwargs', list_call_result_176503)
    
    # Assigning a Call to a Name (line 1503):
    
    # Assigning a Call to a Name (line 1503):
    
    # Call to join(...): (line 1503)
    # Processing the call arguments (line 1503)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'kwargs' (line 1503)
    kwargs_176511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 53), 'kwargs', False)
    comprehension_176512 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1503, 24), kwargs_176511)
    # Assigning a type to the variable 'k' (line 1503)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1503, 24), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1503, 24), comprehension_176512))
    # Assigning a type to the variable 'v' (line 1503)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1503, 24), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1503, 24), comprehension_176512))
    str_176506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1503, 24), 'str', '%s=%r')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1503)
    tuple_176507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1503, 35), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1503)
    # Adding element type (line 1503)
    # Getting the type of 'k' (line 1503)
    k_176508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 35), 'k', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1503, 35), tuple_176507, k_176508)
    # Adding element type (line 1503)
    # Getting the type of 'v' (line 1503)
    v_176509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 38), 'v', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1503, 35), tuple_176507, v_176509)
    
    # Applying the binary operator '%' (line 1503)
    result_mod_176510 = python_operator(stypy.reporting.localization.Localization(__file__, 1503, 24), '%', str_176506, tuple_176507)
    
    list_176513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1503, 24), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1503, 24), list_176513, result_mod_176510)
    # Processing the call keyword arguments (line 1503)
    kwargs_176514 = {}
    str_176504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1503, 13), 'str', ', ')
    # Obtaining the member 'join' of a type (line 1503)
    join_176505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1503, 13), str_176504, 'join')
    # Calling join(args, kwargs) (line 1503)
    join_call_result_176515 = invoke(stypy.reporting.localization.Localization(__file__, 1503, 13), join_176505, *[list_176513], **kwargs_176514)
    
    # Assigning a type to the variable 'kw_str' (line 1503)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1503, 4), 'kw_str', join_call_result_176515)
    
    # Getting the type of 'kw_str' (line 1504)
    kw_str_176516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 7), 'kw_str')
    # Testing the type of an if condition (line 1504)
    if_condition_176517 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1504, 4), kw_str_176516)
    # Assigning a type to the variable 'if_condition_176517' (line 1504)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1504, 4), 'if_condition_176517', if_condition_176517)
    # SSA begins for if statement (line 1504)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1505):
    
    # Assigning a BinOp to a Name (line 1505):
    str_176518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1505, 17), 'str', ', ')
    # Getting the type of 'kw_str' (line 1505)
    kw_str_176519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 24), 'kw_str')
    # Applying the binary operator '+' (line 1505)
    result_add_176520 = python_operator(stypy.reporting.localization.Localization(__file__, 1505, 17), '+', str_176518, kw_str_176519)
    
    # Assigning a type to the variable 'kw_str' (line 1505)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1505, 8), 'kw_str', result_add_176520)
    # SSA join for if statement (line 1504)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1506):
    
    # Assigning a Call to a Name (line 1506):
    
    # Call to join(...): (line 1506)
    # Processing the call arguments (line 1506)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'kwargs' (line 1506)
    kwargs_176528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 55), 'kwargs', False)
    comprehension_176529 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1506, 26), kwargs_176528)
    # Assigning a type to the variable 'k' (line 1506)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1506, 26), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1506, 26), comprehension_176529))
    # Assigning a type to the variable 'v' (line 1506)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1506, 26), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1506, 26), comprehension_176529))
    str_176523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1506, 26), 'str', '%s=%s')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1506)
    tuple_176524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1506, 37), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1506)
    # Adding element type (line 1506)
    # Getting the type of 'k' (line 1506)
    k_176525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 37), 'k', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1506, 37), tuple_176524, k_176525)
    # Adding element type (line 1506)
    # Getting the type of 'k' (line 1506)
    k_176526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 40), 'k', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1506, 37), tuple_176524, k_176526)
    
    # Applying the binary operator '%' (line 1506)
    result_mod_176527 = python_operator(stypy.reporting.localization.Localization(__file__, 1506, 26), '%', str_176523, tuple_176524)
    
    list_176530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1506, 26), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1506, 26), list_176530, result_mod_176527)
    # Processing the call keyword arguments (line 1506)
    kwargs_176531 = {}
    str_176521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1506, 15), 'str', ', ')
    # Obtaining the member 'join' of a type (line 1506)
    join_176522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1506, 15), str_176521, 'join')
    # Calling join(args, kwargs) (line 1506)
    join_call_result_176532 = invoke(stypy.reporting.localization.Localization(__file__, 1506, 15), join_176522, *[list_176530], **kwargs_176531)
    
    # Assigning a type to the variable 'kwkw_str' (line 1506)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1506, 4), 'kwkw_str', join_call_result_176532)
    
    # Getting the type of 'kwkw_str' (line 1507)
    kwkw_str_176533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 7), 'kwkw_str')
    # Testing the type of an if condition (line 1507)
    if_condition_176534 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1507, 4), kwkw_str_176533)
    # Assigning a type to the variable 'if_condition_176534' (line 1507)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1507, 4), 'if_condition_176534', if_condition_176534)
    # SSA begins for if statement (line 1507)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1508):
    
    # Assigning a BinOp to a Name (line 1508):
    # Getting the type of 'kwkw_str' (line 1508)
    kwkw_str_176535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 19), 'kwkw_str')
    str_176536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1508, 30), 'str', ', ')
    # Applying the binary operator '+' (line 1508)
    result_add_176537 = python_operator(stypy.reporting.localization.Localization(__file__, 1508, 19), '+', kwkw_str_176535, str_176536)
    
    # Assigning a type to the variable 'kwkw_str' (line 1508)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1508, 8), 'kwkw_str', result_add_176537)
    # SSA join for if statement (line 1507)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Str to a Name (line 1512):
    
    # Assigning a Str to a Name (line 1512):
    str_176538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1520, (-1)), 'str', "\ndef %(name)s(F, xin, iter=None %(kw)s, verbose=False, maxiter=None,\n             f_tol=None, f_rtol=None, x_tol=None, x_rtol=None,\n             tol_norm=None, line_search='armijo', callback=None, **kw):\n    jac = %(jac)s(%(kwkw)s **kw)\n    return nonlin_solve(F, xin, jac, iter, verbose, maxiter,\n                        f_tol, f_rtol, x_tol, x_rtol, tol_norm, line_search,\n                        callback)\n")
    # Assigning a type to the variable 'wrapper' (line 1512)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1512, 4), 'wrapper', str_176538)
    
    # Assigning a BinOp to a Name (line 1522):
    
    # Assigning a BinOp to a Name (line 1522):
    # Getting the type of 'wrapper' (line 1522)
    wrapper_176539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 14), 'wrapper')
    
    # Call to dict(...): (line 1522)
    # Processing the call keyword arguments (line 1522)
    # Getting the type of 'name' (line 1522)
    name_176541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 34), 'name', False)
    keyword_176542 = name_176541
    # Getting the type of 'kw_str' (line 1522)
    kw_str_176543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 43), 'kw_str', False)
    keyword_176544 = kw_str_176543
    # Getting the type of 'jac' (line 1522)
    jac_176545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 55), 'jac', False)
    # Obtaining the member '__name__' of a type (line 1522)
    name___176546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1522, 55), jac_176545, '__name__')
    keyword_176547 = name___176546
    # Getting the type of 'kwkw_str' (line 1523)
    kwkw_str_176548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 34), 'kwkw_str', False)
    keyword_176549 = kwkw_str_176548
    kwargs_176550 = {'kwkw': keyword_176549, 'kw': keyword_176544, 'name': keyword_176542, 'jac': keyword_176547}
    # Getting the type of 'dict' (line 1522)
    dict_176540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 24), 'dict', False)
    # Calling dict(args, kwargs) (line 1522)
    dict_call_result_176551 = invoke(stypy.reporting.localization.Localization(__file__, 1522, 24), dict_176540, *[], **kwargs_176550)
    
    # Applying the binary operator '%' (line 1522)
    result_mod_176552 = python_operator(stypy.reporting.localization.Localization(__file__, 1522, 14), '%', wrapper_176539, dict_call_result_176551)
    
    # Assigning a type to the variable 'wrapper' (line 1522)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1522, 4), 'wrapper', result_mod_176552)
    
    # Assigning a Dict to a Name (line 1524):
    
    # Assigning a Dict to a Name (line 1524):
    
    # Obtaining an instance of the builtin type 'dict' (line 1524)
    dict_176553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1524, 9), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 1524)
    
    # Assigning a type to the variable 'ns' (line 1524)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1524, 4), 'ns', dict_176553)
    
    # Call to update(...): (line 1525)
    # Processing the call arguments (line 1525)
    
    # Call to globals(...): (line 1525)
    # Processing the call keyword arguments (line 1525)
    kwargs_176557 = {}
    # Getting the type of 'globals' (line 1525)
    globals_176556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 14), 'globals', False)
    # Calling globals(args, kwargs) (line 1525)
    globals_call_result_176558 = invoke(stypy.reporting.localization.Localization(__file__, 1525, 14), globals_176556, *[], **kwargs_176557)
    
    # Processing the call keyword arguments (line 1525)
    kwargs_176559 = {}
    # Getting the type of 'ns' (line 1525)
    ns_176554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 4), 'ns', False)
    # Obtaining the member 'update' of a type (line 1525)
    update_176555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1525, 4), ns_176554, 'update')
    # Calling update(args, kwargs) (line 1525)
    update_call_result_176560 = invoke(stypy.reporting.localization.Localization(__file__, 1525, 4), update_176555, *[globals_call_result_176558], **kwargs_176559)
    
    
    # Call to exec_(...): (line 1526)
    # Processing the call arguments (line 1526)
    # Getting the type of 'wrapper' (line 1526)
    wrapper_176562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 10), 'wrapper', False)
    # Getting the type of 'ns' (line 1526)
    ns_176563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 19), 'ns', False)
    # Processing the call keyword arguments (line 1526)
    kwargs_176564 = {}
    # Getting the type of 'exec_' (line 1526)
    exec__176561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 4), 'exec_', False)
    # Calling exec_(args, kwargs) (line 1526)
    exec__call_result_176565 = invoke(stypy.reporting.localization.Localization(__file__, 1526, 4), exec__176561, *[wrapper_176562, ns_176563], **kwargs_176564)
    
    
    # Assigning a Subscript to a Name (line 1527):
    
    # Assigning a Subscript to a Name (line 1527):
    
    # Obtaining the type of the subscript
    # Getting the type of 'name' (line 1527)
    name_176566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 14), 'name')
    # Getting the type of 'ns' (line 1527)
    ns_176567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 11), 'ns')
    # Obtaining the member '__getitem__' of a type (line 1527)
    getitem___176568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 11), ns_176567, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1527)
    subscript_call_result_176569 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 11), getitem___176568, name_176566)
    
    # Assigning a type to the variable 'func' (line 1527)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1527, 4), 'func', subscript_call_result_176569)
    
    # Assigning a Attribute to a Attribute (line 1528):
    
    # Assigning a Attribute to a Attribute (line 1528):
    # Getting the type of 'jac' (line 1528)
    jac_176570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 19), 'jac')
    # Obtaining the member '__doc__' of a type (line 1528)
    doc___176571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1528, 19), jac_176570, '__doc__')
    # Getting the type of 'func' (line 1528)
    func_176572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 4), 'func')
    # Setting the type of the member '__doc__' of a type (line 1528)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1528, 4), func_176572, '__doc__', doc___176571)
    
    # Call to _set_doc(...): (line 1529)
    # Processing the call arguments (line 1529)
    # Getting the type of 'func' (line 1529)
    func_176574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 13), 'func', False)
    # Processing the call keyword arguments (line 1529)
    kwargs_176575 = {}
    # Getting the type of '_set_doc' (line 1529)
    _set_doc_176573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), '_set_doc', False)
    # Calling _set_doc(args, kwargs) (line 1529)
    _set_doc_call_result_176576 = invoke(stypy.reporting.localization.Localization(__file__, 1529, 4), _set_doc_176573, *[func_176574], **kwargs_176575)
    
    # Getting the type of 'func' (line 1530)
    func_176577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 11), 'func')
    # Assigning a type to the variable 'stypy_return_type' (line 1530)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1530, 4), 'stypy_return_type', func_176577)
    
    # ################# End of '_nonlin_wrapper(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_nonlin_wrapper' in the type store
    # Getting the type of 'stypy_return_type' (line 1492)
    stypy_return_type_176578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_176578)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_nonlin_wrapper'
    return stypy_return_type_176578

# Assigning a type to the variable '_nonlin_wrapper' (line 1492)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 0), '_nonlin_wrapper', _nonlin_wrapper)

# Assigning a Call to a Name (line 1532):

# Assigning a Call to a Name (line 1532):

# Call to _nonlin_wrapper(...): (line 1532)
# Processing the call arguments (line 1532)
str_176580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1532, 27), 'str', 'broyden1')
# Getting the type of 'BroydenFirst' (line 1532)
BroydenFirst_176581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 39), 'BroydenFirst', False)
# Processing the call keyword arguments (line 1532)
kwargs_176582 = {}
# Getting the type of '_nonlin_wrapper' (line 1532)
_nonlin_wrapper_176579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 11), '_nonlin_wrapper', False)
# Calling _nonlin_wrapper(args, kwargs) (line 1532)
_nonlin_wrapper_call_result_176583 = invoke(stypy.reporting.localization.Localization(__file__, 1532, 11), _nonlin_wrapper_176579, *[str_176580, BroydenFirst_176581], **kwargs_176582)

# Assigning a type to the variable 'broyden1' (line 1532)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 0), 'broyden1', _nonlin_wrapper_call_result_176583)

# Assigning a Call to a Name (line 1533):

# Assigning a Call to a Name (line 1533):

# Call to _nonlin_wrapper(...): (line 1533)
# Processing the call arguments (line 1533)
str_176585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1533, 27), 'str', 'broyden2')
# Getting the type of 'BroydenSecond' (line 1533)
BroydenSecond_176586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 39), 'BroydenSecond', False)
# Processing the call keyword arguments (line 1533)
kwargs_176587 = {}
# Getting the type of '_nonlin_wrapper' (line 1533)
_nonlin_wrapper_176584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 11), '_nonlin_wrapper', False)
# Calling _nonlin_wrapper(args, kwargs) (line 1533)
_nonlin_wrapper_call_result_176588 = invoke(stypy.reporting.localization.Localization(__file__, 1533, 11), _nonlin_wrapper_176584, *[str_176585, BroydenSecond_176586], **kwargs_176587)

# Assigning a type to the variable 'broyden2' (line 1533)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1533, 0), 'broyden2', _nonlin_wrapper_call_result_176588)

# Assigning a Call to a Name (line 1534):

# Assigning a Call to a Name (line 1534):

# Call to _nonlin_wrapper(...): (line 1534)
# Processing the call arguments (line 1534)
str_176590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1534, 27), 'str', 'anderson')
# Getting the type of 'Anderson' (line 1534)
Anderson_176591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 39), 'Anderson', False)
# Processing the call keyword arguments (line 1534)
kwargs_176592 = {}
# Getting the type of '_nonlin_wrapper' (line 1534)
_nonlin_wrapper_176589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 11), '_nonlin_wrapper', False)
# Calling _nonlin_wrapper(args, kwargs) (line 1534)
_nonlin_wrapper_call_result_176593 = invoke(stypy.reporting.localization.Localization(__file__, 1534, 11), _nonlin_wrapper_176589, *[str_176590, Anderson_176591], **kwargs_176592)

# Assigning a type to the variable 'anderson' (line 1534)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1534, 0), 'anderson', _nonlin_wrapper_call_result_176593)

# Assigning a Call to a Name (line 1535):

# Assigning a Call to a Name (line 1535):

# Call to _nonlin_wrapper(...): (line 1535)
# Processing the call arguments (line 1535)
str_176595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1535, 31), 'str', 'linearmixing')
# Getting the type of 'LinearMixing' (line 1535)
LinearMixing_176596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 47), 'LinearMixing', False)
# Processing the call keyword arguments (line 1535)
kwargs_176597 = {}
# Getting the type of '_nonlin_wrapper' (line 1535)
_nonlin_wrapper_176594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 15), '_nonlin_wrapper', False)
# Calling _nonlin_wrapper(args, kwargs) (line 1535)
_nonlin_wrapper_call_result_176598 = invoke(stypy.reporting.localization.Localization(__file__, 1535, 15), _nonlin_wrapper_176594, *[str_176595, LinearMixing_176596], **kwargs_176597)

# Assigning a type to the variable 'linearmixing' (line 1535)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1535, 0), 'linearmixing', _nonlin_wrapper_call_result_176598)

# Assigning a Call to a Name (line 1536):

# Assigning a Call to a Name (line 1536):

# Call to _nonlin_wrapper(...): (line 1536)
# Processing the call arguments (line 1536)
str_176600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1536, 30), 'str', 'diagbroyden')
# Getting the type of 'DiagBroyden' (line 1536)
DiagBroyden_176601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 45), 'DiagBroyden', False)
# Processing the call keyword arguments (line 1536)
kwargs_176602 = {}
# Getting the type of '_nonlin_wrapper' (line 1536)
_nonlin_wrapper_176599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 14), '_nonlin_wrapper', False)
# Calling _nonlin_wrapper(args, kwargs) (line 1536)
_nonlin_wrapper_call_result_176603 = invoke(stypy.reporting.localization.Localization(__file__, 1536, 14), _nonlin_wrapper_176599, *[str_176600, DiagBroyden_176601], **kwargs_176602)

# Assigning a type to the variable 'diagbroyden' (line 1536)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1536, 0), 'diagbroyden', _nonlin_wrapper_call_result_176603)

# Assigning a Call to a Name (line 1537):

# Assigning a Call to a Name (line 1537):

# Call to _nonlin_wrapper(...): (line 1537)
# Processing the call arguments (line 1537)
str_176605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1537, 33), 'str', 'excitingmixing')
# Getting the type of 'ExcitingMixing' (line 1537)
ExcitingMixing_176606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 51), 'ExcitingMixing', False)
# Processing the call keyword arguments (line 1537)
kwargs_176607 = {}
# Getting the type of '_nonlin_wrapper' (line 1537)
_nonlin_wrapper_176604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 17), '_nonlin_wrapper', False)
# Calling _nonlin_wrapper(args, kwargs) (line 1537)
_nonlin_wrapper_call_result_176608 = invoke(stypy.reporting.localization.Localization(__file__, 1537, 17), _nonlin_wrapper_176604, *[str_176605, ExcitingMixing_176606], **kwargs_176607)

# Assigning a type to the variable 'excitingmixing' (line 1537)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1537, 0), 'excitingmixing', _nonlin_wrapper_call_result_176608)

# Assigning a Call to a Name (line 1538):

# Assigning a Call to a Name (line 1538):

# Call to _nonlin_wrapper(...): (line 1538)
# Processing the call arguments (line 1538)
str_176610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1538, 32), 'str', 'newton_krylov')
# Getting the type of 'KrylovJacobian' (line 1538)
KrylovJacobian_176611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 49), 'KrylovJacobian', False)
# Processing the call keyword arguments (line 1538)
kwargs_176612 = {}
# Getting the type of '_nonlin_wrapper' (line 1538)
_nonlin_wrapper_176609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 16), '_nonlin_wrapper', False)
# Calling _nonlin_wrapper(args, kwargs) (line 1538)
_nonlin_wrapper_call_result_176613 = invoke(stypy.reporting.localization.Localization(__file__, 1538, 16), _nonlin_wrapper_176609, *[str_176610, KrylovJacobian_176611], **kwargs_176612)

# Assigning a type to the variable 'newton_krylov' (line 1538)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 0), 'newton_krylov', _nonlin_wrapper_call_result_176613)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
