
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: An interior-point method for linear programming.
3: '''
4: # Author: Matt Haberland
5: 
6: from __future__ import print_function, division, absolute_import
7: import numpy as np
8: import scipy as sp
9: import scipy.sparse as sps
10: from warnings import warn
11: from scipy.linalg import LinAlgError
12: from .optimize import OptimizeResult, OptimizeWarning, _check_unknown_options
13: from scipy.optimize._remove_redundancy import _remove_redundancy
14: from scipy.optimize._remove_redundancy import _remove_redundancy_sparse
15: from scipy.optimize._remove_redundancy import _remove_redundancy_dense
16: 
17: 
18: def _clean_inputs(
19:         c,
20:         A_ub=None,
21:         b_ub=None,
22:         A_eq=None,
23:         b_eq=None,
24:         bounds=None):
25:     '''
26:     Given user inputs for a linear programming problem, return the
27:     objective vector, upper bound constraints, equality constraints,
28:     and simple bounds in a preferred format.
29: 
30:     Parameters
31:     ----------
32:     c : array_like
33:         Coefficients of the linear objective function to be minimized.
34:     A_ub : array_like, optional
35:         2-D array which, when matrix-multiplied by ``x``, gives the values of
36:         the upper-bound inequality constraints at ``x``.
37:     b_ub : array_like, optional
38:         1-D array of values representing the upper-bound of each inequality
39:         constraint (row) in ``A_ub``.
40:     A_eq : array_like, optional
41:         2-D array which, when matrix-multiplied by ``x``, gives the values of
42:         the equality constraints at ``x``.
43:     b_eq : array_like, optional
44:         1-D array of values representing the RHS of each equality constraint
45:         (row) in ``A_eq``.
46:     bounds : sequence, optional
47:         ``(min, max)`` pairs for each element in ``x``, defining
48:         the bounds on that parameter. Use None for one of ``min`` or
49:         ``max`` when there is no bound in that direction. By default
50:         bounds are ``(0, None)`` (non-negative)
51:         If a sequence containing a single tuple is provided, then ``min`` and
52:         ``max`` will be applied to all variables in the problem.
53: 
54:     Returns
55:     -------
56:     c : 1-D array
57:         Coefficients of the linear objective function to be minimized.
58:     A_ub : 2-D array
59:         2-D array which, when matrix-multiplied by ``x``, gives the values of
60:         the upper-bound inequality constraints at ``x``.
61:     b_ub : 1-D array
62:         1-D array of values representing the upper-bound of each inequality
63:         constraint (row) in ``A_ub``.
64:     A_eq : 2-D array
65:         2-D array which, when matrix-multiplied by ``x``, gives the values of
66:         the equality constraints at ``x``.
67:     b_eq : 1-D array
68:         1-D array of values representing the RHS of each equality constraint
69:         (row) in ``A_eq``.
70:     bounds : sequence of tuples
71:         ``(min, max)`` pairs for each element in ``x``, defining
72:         the bounds on that parameter. Use None for each of ``min`` or
73:         ``max`` when there is no bound in that direction. By default
74:         bounds are ``(0, None)`` (non-negative)
75: 
76:     '''
77: 
78:     try:
79:         if c is None:
80:             raise TypeError
81:         try:
82:             c = np.asarray(c, dtype=float).copy().squeeze()
83:         except BaseException:  # typically a ValueError and shouldn't be, IMO
84:             raise TypeError
85:         if c.size == 1:
86:             c = c.reshape((-1))
87:         n_x = len(c)
88:         if n_x == 0 or len(c.shape) != 1:
89:             raise ValueError(
90:                 "Invalid input for linprog: c should be a 1D array; it must "
91:                 "not have more than one non-singleton dimension")
92:         if not(np.isfinite(c).all()):
93:             raise ValueError(
94:                 "Invalid input for linprog: c must not contain values "
95:                 "inf, nan, or None")
96:     except TypeError:
97:         raise TypeError(
98:             "Invalid input for linprog: c must be a 1D array of numerical "
99:             "coefficients")
100: 
101:     try:
102:         try:
103:             if sps.issparse(A_eq) or sps.issparse(A_ub):
104:                 A_ub = sps.coo_matrix(
105:                     (0, n_x), dtype=float) if A_ub is None else sps.coo_matrix(
106:                     A_ub, dtype=float).copy()
107:             else:
108:                 A_ub = np.zeros(
109:                     (0, n_x), dtype=float) if A_ub is None else np.asarray(
110:                     A_ub, dtype=float).copy()
111:         except BaseException:
112:             raise TypeError
113:         n_ub = A_ub.shape[0]
114:         if len(A_ub.shape) != 2 or A_ub.shape[1] != len(c):
115:             raise ValueError(
116:                 "Invalid input for linprog: A_ub must have exactly two "
117:                 "dimensions, and the number of columns in A_ub must be "
118:                 "equal to the size of c ")
119:         if (sps.issparse(A_ub) and not np.isfinite(A_ub.data).all()
120:                 or not sps.issparse(A_ub) and not np.isfinite(A_ub).all()):
121:             raise ValueError(
122:                 "Invalid input for linprog: A_ub must not contain values "
123:                 "inf, nan, or None")
124:     except TypeError:
125:         raise TypeError(
126:             "Invalid input for linprog: A_ub must be a numerical 2D array "
127:             "with each row representing an upper bound inequality constraint")
128: 
129:     try:
130:         try:
131:             b_ub = np.array(
132:                 [], dtype=float) if b_ub is None else np.asarray(
133:                 b_ub, dtype=float).copy().squeeze()
134:         except BaseException:
135:             raise TypeError
136:         if b_ub.size == 1:
137:             b_ub = b_ub.reshape((-1))
138:         if len(b_ub.shape) != 1:
139:             raise ValueError(
140:                 "Invalid input for linprog: b_ub should be a 1D array; it "
141:                 "must not have more than one non-singleton dimension")
142:         if len(b_ub) != n_ub:
143:             raise ValueError(
144:                 "Invalid input for linprog: The number of rows in A_ub must "
145:                 "be equal to the number of values in b_ub")
146:         if not(np.isfinite(b_ub).all()):
147:             raise ValueError(
148:                 "Invalid input for linprog: b_ub must not contain values "
149:                 "inf, nan, or None")
150:     except TypeError:
151:         raise TypeError(
152:             "Invalid input for linprog: b_ub must be a 1D array of "
153:             "numerical values, each representing the upper bound of an "
154:             "inequality constraint (row) in A_ub")
155: 
156:     try:
157:         try:
158:             if sps.issparse(A_eq) or sps.issparse(A_ub):
159:                 A_eq = sps.coo_matrix(
160:                     (0, n_x), dtype=float) if A_eq is None else sps.coo_matrix(
161:                     A_eq, dtype=float).copy()
162:             else:
163:                 A_eq = np.zeros(
164:                     (0, n_x), dtype=float) if A_eq is None else np.asarray(
165:                     A_eq, dtype=float).copy()
166:         except BaseException:
167:             raise TypeError
168:         n_eq = A_eq.shape[0]
169:         if len(A_eq.shape) != 2 or A_eq.shape[1] != len(c):
170:             raise ValueError(
171:                 "Invalid input for linprog: A_eq must have exactly two "
172:                 "dimensions, and the number of columns in A_eq must be "
173:                 "equal to the size of c ")
174: 
175:         if (sps.issparse(A_eq) and not np.isfinite(A_eq.data).all()
176:                 or not sps.issparse(A_eq) and not np.isfinite(A_eq).all()):
177:             raise ValueError(
178:                 "Invalid input for linprog: A_eq must not contain values "
179:                 "inf, nan, or None")
180:     except TypeError:
181:         raise TypeError(
182:             "Invalid input for linprog: A_eq must be a 2D array with each "
183:             "row representing an equality constraint")
184: 
185:     try:
186:         try:
187:             b_eq = np.array(
188:                 [], dtype=float) if b_eq is None else np.asarray(
189:                 b_eq, dtype=float).copy().squeeze()
190:         except BaseException:
191:             raise TypeError
192:         if b_eq.size == 1:
193:             b_eq = b_eq.reshape((-1))
194:         if len(b_eq.shape) != 1:
195:             raise ValueError(
196:                 "Invalid input for linprog: b_eq should be a 1D array; it "
197:                 "must not have more than one non-singleton dimension")
198:         if len(b_eq) != n_eq:
199:             raise ValueError(
200:                 "Invalid input for linprog: the number of rows in A_eq "
201:                 "must be equal to the number of values in b_eq")
202:         if not(np.isfinite(b_eq).all()):
203:             raise ValueError(
204:                 "Invalid input for linprog: b_eq must not contain values "
205:                 "inf, nan, or None")
206:     except TypeError:
207:         raise TypeError(
208:             "Invalid input for linprog: b_eq must be a 1D array of "
209:             "numerical values, each representing the right hand side of an "
210:             "equality constraints (row) in A_eq")
211: 
212:     # "If a sequence containing a single tuple is provided, then min and max
213:     # will be applied to all variables in the problem."
214:     # linprog doesn't treat this right: it didn't accept a list with one tuple
215:     # in it
216:     try:
217:         if isinstance(bounds, str):
218:             raise TypeError
219:         if bounds is None or len(bounds) == 0:
220:             bounds = [(0, None)] * n_x
221:         elif len(bounds) == 1:
222:             b = bounds[0]
223:             if len(b) != 2:
224:                 raise ValueError(
225:                     "Invalid input for linprog: exactly one lower bound and "
226:                     "one upper bound must be specified for each element of x")
227:             bounds = [b] * n_x
228:         elif len(bounds) == n_x:
229:             try:
230:                 len(bounds[0])
231:             except BaseException:
232:                 bounds = [(bounds[0], bounds[1])] * n_x
233:             for i, b in enumerate(bounds):
234:                 if len(b) != 2:
235:                     raise ValueError(
236:                         "Invalid input for linprog, bound " +
237:                         str(i) +
238:                         " " +
239:                         str(b) +
240:                         ": exactly one lower bound and one upper bound must "
241:                         "be specified for each element of x")
242:         elif (len(bounds) == 2 and np.isreal(bounds[0])
243:                 and np.isreal(bounds[1])):
244:             bounds = [(bounds[0], bounds[1])] * n_x
245:         else:
246:             raise ValueError(
247:                 "Invalid input for linprog: exactly one lower bound and one "
248:                 "upper bound must be specified for each element of x")
249: 
250:         clean_bounds = []  # also creates a copy so user's object isn't changed
251:         for i, b in enumerate(bounds):
252:             if b[0] is not None and b[1] is not None and b[0] > b[1]:
253:                 raise ValueError(
254:                     "Invalid input for linprog, bound " +
255:                     str(i) +
256:                     " " +
257:                     str(b) +
258:                     ": a lower bound must be less than or equal to the "
259:                     "corresponding upper bound")
260:             if b[0] == np.inf:
261:                 raise ValueError(
262:                     "Invalid input for linprog, bound " +
263:                     str(i) +
264:                     " " +
265:                     str(b) +
266:                     ": infinity is not a valid lower bound")
267:             if b[1] == -np.inf:
268:                 raise ValueError(
269:                     "Invalid input for linprog, bound " +
270:                     str(i) +
271:                     " " +
272:                     str(b) +
273:                     ": negative infinity is not a valid upper bound")
274:             lb = float(b[0]) if b[0] is not None and b[0] != -np.inf else None
275:             ub = float(b[1]) if b[1] is not None and b[1] != np.inf else None
276:             clean_bounds.append((lb, ub))
277:         bounds = clean_bounds
278:     except ValueError as e:
279:         if "could not convert string to float" in e.args[0]:
280:             raise TypeError
281:         else:
282:             raise e
283:     except TypeError as e:
284:         print(e)
285:         raise TypeError(
286:             "Invalid input for linprog: bounds must be a sequence of "
287:             "(min,max) pairs, each defining bounds on an element of x ")
288: 
289:     return c, A_ub, b_ub, A_eq, b_eq, bounds
290: 
291: 
292: def _presolve(c, A_ub, b_ub, A_eq, b_eq, bounds, rr):
293:     '''
294:     Given inputs for a linear programming problem in preferred format,
295:     presolve the problem: identify trivial infeasibilities, redundancies,
296:     and unboundedness, tighten bounds where possible, and eliminate fixed
297:     variables.
298: 
299:     Parameters
300:     ----------
301:     c : 1-D array
302:         Coefficients of the linear objective function to be minimized.
303:     A_ub : 2-D array
304:         2-D array which, when matrix-multiplied by ``x``, gives the values of
305:         the upper-bound inequality constraints at ``x``.
306:     b_ub : 1-D array
307:         1-D array of values representing the upper-bound of each inequality
308:         constraint (row) in ``A_ub``.
309:     A_eq : 2-D array
310:         2-D array which, when matrix-multiplied by ``x``, gives the values of
311:         the equality constraints at ``x``.
312:     b_eq : 1-D array
313:         1-D array of values representing the RHS of each equality constraint
314:         (row) in ``A_eq``.
315:     bounds : sequence of tuples
316:         ``(min, max)`` pairs for each element in ``x``, defining
317:         the bounds on that parameter. Use None for each of ``min`` or
318:         ``max`` when there is no bound in that direction.
319: 
320:     Returns
321:     -------
322:     c : 1-D array
323:         Coefficients of the linear objective function to be minimized.
324:     c0 : 1-D array
325:         Constant term in objective function due to fixed (and eliminated)
326:         variables.
327:     A_ub : 2-D array
328:         2-D array which, when matrix-multiplied by ``x``, gives the values of
329:         the upper-bound inequality constraints at ``x``. Unnecessary
330:         rows/columns have been removed.
331:     b_ub : 1-D array
332:         1-D array of values representing the upper-bound of each inequality
333:         constraint (row) in ``A_ub``. Unnecessary elements have been removed.
334:     A_eq : 2-D array
335:         2-D array which, when matrix-multiplied by ``x``, gives the values of
336:         the equality constraints at ``x``. Unnecessary rows/columns have been
337:         removed.
338:     b_eq : 1-D array
339:         1-D array of values representing the RHS of each equality constraint
340:         (row) in ``A_eq``. Unnecessary elements have been removed.
341:     bounds : sequence of tuples
342:         ``(min, max)`` pairs for each element in ``x``, defining
343:         the bounds on that parameter. Use None for each of ``min`` or
344:         ``max`` when there is no bound in that direction. Bounds have been
345:         tightened where possible.
346:     x : 1-D array
347:         Solution vector (when the solution is trivial and can be determined
348:         in presolve)
349:     undo: list of tuples
350:         (index, value) pairs that record the original index and fixed value
351:         for each variable removed from the problem
352:     complete: bool
353:         Whether the solution is complete (solved or determined to be infeasible
354:         or unbounded in presolve)
355:     status : int
356:         An integer representing the exit status of the optimization::
357: 
358:          0 : Optimization terminated successfully
359:          1 : Iteration limit reached
360:          2 : Problem appears to be infeasible
361:          3 : Problem appears to be unbounded
362: 
363:     message : str
364:         A string descriptor of the exit status of the optimization.
365: 
366:     References
367:     ----------
368:     .. [2] Andersen, Erling D. "Finding all linearly dependent rows in
369:            large-scale linear programming." Optimization Methods and Software
370:            6.3 (1995): 219-227.
371:     .. [5] Andersen, Erling D., and Knud D. Andersen. "Presolving in linear
372:        programming." Mathematical Programming 71.2 (1995): 221-245.
373: 
374:     '''
375:     # ideas from Reference [5] by Andersen and Andersen
376:     # however, unlike the reference, this is performed before converting
377:     # problem to standard form
378:     # There are a few advantages:
379:     #  * artificial variables have not been added, so matrices are smaller
380:     #  * bounds have not been converted to constraints yet. (It is better to
381:     #    do that after presolve because presolve may adjust the simple bounds.)
382:     # There are many improvements that can be made, namely:
383:     #  * implement remaining checks from [5]
384:     #  * loop presolve until no additional changes are made
385:     #  * implement additional efficiency improvements in redundancy removal [2]
386: 
387:     tol = 1e-9    # tolerance for equality. should this be exposed to user?
388: 
389:     undo = []               # record of variables eliminated from problem
390:     # constant term in cost function may be added if variables are eliminated
391:     c0 = 0
392:     complete = False        # complete is True if detected infeasible/unbounded
393:     x = np.zeros(c.shape)   # this is solution vector if completed in presolve
394: 
395:     status = 0              # all OK unless determined otherwise
396:     message = ""
397: 
398:     # Standard form for bounds (from _clean_inputs) is list of tuples
399:     # but numpy array is more convenient here
400:     # In retrospect, numpy array should have been the standard
401:     bounds = np.array(bounds)
402:     lb = bounds[:, 0]
403:     ub = bounds[:, 1]
404:     lb[np.equal(lb, None)] = -np.inf
405:     ub[np.equal(ub, None)] = np.inf
406:     bounds = bounds.astype(float)
407:     lb = lb.astype(float)
408:     ub = ub.astype(float)
409: 
410:     m_eq, n = A_eq.shape
411:     m_ub, n = A_ub.shape
412: 
413:     if (sps.issparse(A_eq)):
414:         A_eq = A_eq.tolil()
415:         A_ub = A_ub.tolil()
416: 
417:         def where(A):
418:             return A.nonzero()
419: 
420:         vstack = sps.vstack
421:     else:
422:         where = np.where
423:         vstack = np.vstack
424: 
425:     # zero row in equality constraints
426:     zero_row = np.array(np.sum(A_eq != 0, axis=1) == 0).flatten()
427:     if np.any(zero_row):
428:         if np.any(
429:             np.logical_and(
430:                 zero_row,
431:                 np.abs(b_eq) > tol)):  # test_zero_row_1
432:             # infeasible if RHS is not zero
433:             status = 2
434:             message = ("The problem is (trivially) infeasible due to a row "
435:                        "of zeros in the equality constraint matrix with a "
436:                        "nonzero corresponding constraint value.")
437:             complete = True
438:             return (c, c0, A_ub, b_ub, A_eq, b_eq, bounds,
439:                     x, undo, complete, status, message)
440:         else:  # test_zero_row_2
441:             # if RHS is zero, we can eliminate this equation entirely
442:             A_eq = A_eq[np.logical_not(zero_row), :]
443:             b_eq = b_eq[np.logical_not(zero_row)]
444: 
445:     # zero row in inequality constraints
446:     zero_row = np.array(np.sum(A_ub != 0, axis=1) == 0).flatten()
447:     if np.any(zero_row):
448:         if np.any(np.logical_and(zero_row, b_ub < -tol)):  # test_zero_row_1
449:             # infeasible if RHS is less than zero (because LHS is zero)
450:             status = 2
451:             message = ("The problem is (trivially) infeasible due to a row "
452:                        "of zeros in the equality constraint matrix with a "
453:                        "nonzero corresponding  constraint value.")
454:             complete = True
455:             return (c, c0, A_ub, b_ub, A_eq, b_eq, bounds,
456:                     x, undo, complete, status, message)
457:         else:  # test_zero_row_2
458:             # if LHS is >= 0, we can eliminate this constraint entirely
459:             A_ub = A_ub[np.logical_not(zero_row), :]
460:             b_ub = b_ub[np.logical_not(zero_row)]
461: 
462:     # zero column in (both) constraints
463:     # this indicates that a variable isn't constrained and can be removed
464:     A = vstack((A_eq, A_ub))
465:     if A.shape[0] > 0:
466:         zero_col = np.array(np.sum(A != 0, axis=0) == 0).flatten()
467:         # variable will be at upper or lower bound, depending on objective
468:         x[np.logical_and(zero_col, c < 0)] = ub[
469:             np.logical_and(zero_col, c < 0)]
470:         x[np.logical_and(zero_col, c > 0)] = lb[
471:             np.logical_and(zero_col, c > 0)]
472:         if np.any(np.isinf(x)):  # if an unconstrained variable has no bound
473:             status = 3
474:             message = ("If feasible, the problem is (trivially) unbounded "
475:                        "due  to a zero column in the constraint matrices. If "
476:                        "you wish to check whether the problem is infeasible, "
477:                        "turn presolve off.")
478:             complete = True
479:             return (c, c0, A_ub, b_ub, A_eq, b_eq, bounds,
480:                     x, undo, complete, status, message)
481:         # variables will equal upper/lower bounds will be removed later
482:         lb[np.logical_and(zero_col, c < 0)] = ub[
483:             np.logical_and(zero_col, c < 0)]
484:         ub[np.logical_and(zero_col, c > 0)] = lb[
485:             np.logical_and(zero_col, c > 0)]
486: 
487:     # row singleton in equality constraints
488:     # this fixes a variable and removes the constraint
489:     singleton_row = np.array(np.sum(A_eq != 0, axis=1) == 1).flatten()
490:     rows = where(singleton_row)[0]
491:     cols = where(A_eq[rows, :])[1]
492:     if len(rows) > 0:
493:         for row, col in zip(rows, cols):
494:             val = b_eq[row] / A_eq[row, col]
495:             if not lb[col] - tol <= val <= ub[col] + tol:
496:                 # infeasible if fixed value is not within bounds
497:                 status = 2
498:                 message = ("The problem is (trivially) infeasible because a "
499:                            "singleton row in the equality constraints is "
500:                            "inconsistent with the bounds.")
501:                 complete = True
502:                 return (c, c0, A_ub, b_ub, A_eq, b_eq, bounds,
503:                         x, undo, complete, status, message)
504:             else:
505:                 # sets upper and lower bounds at that fixed value - variable
506:                 # will be removed later
507:                 lb[col] = val
508:                 ub[col] = val
509:         A_eq = A_eq[np.logical_not(singleton_row), :]
510:         b_eq = b_eq[np.logical_not(singleton_row)]
511: 
512:     # row singleton in inequality constraints
513:     # this indicates a simple bound and the constraint can be removed
514:     # simple bounds may be adjusted here
515:     # After all of the simple bound information is combined here, get_Abc will
516:     # turn the simple bounds into constraints
517:     singleton_row = np.array(np.sum(A_ub != 0, axis=1) == 1).flatten()
518:     cols = where(A_ub[singleton_row, :])[1]
519:     rows = where(singleton_row)[0]
520:     if len(rows) > 0:
521:         for row, col in zip(rows, cols):
522:             val = b_ub[row] / A_ub[row, col]
523:             if A_ub[row, col] > 0:  # upper bound
524:                 if val < lb[col] - tol:  # infeasible
525:                     complete = True
526:                 elif val < ub[col]:  # new upper bound
527:                     ub[col] = val
528:             else:  # lower bound
529:                 if val > ub[col] + tol:  # infeasible
530:                     complete = True
531:                 elif val > lb[col]:  # new lower bound
532:                     lb[col] = val
533:             if complete:
534:                 status = 2
535:                 message = ("The problem is (trivially) infeasible because a "
536:                            "singleton row in the upper bound constraints is "
537:                            "inconsistent with the bounds.")
538:                 return (c, c0, A_ub, b_ub, A_eq, b_eq, bounds,
539:                         x, undo, complete, status, message)
540:         A_ub = A_ub[np.logical_not(singleton_row), :]
541:         b_ub = b_ub[np.logical_not(singleton_row)]
542: 
543:     # identical bounds indicate that variable can be removed
544:     i_f = np.abs(lb - ub) < tol   # indices of "fixed" variables
545:     i_nf = np.logical_not(i_f)  # indices of "not fixed" variables
546:     if np.any(i_f):
547:         c0 += c[i_f].dot(lb[i_f])
548:         b_eq = b_eq - A_eq[:, i_f].dot(lb[i_f])
549:         b_ub = b_ub - A_ub[:, i_f].dot(lb[i_f])
550:         c = c[i_nf]
551:         x = x[i_nf]
552:         A_eq = A_eq[:, i_nf]
553:         A_ub = A_ub[:, i_nf]
554:         # record of variables to be added back in
555:         undo = [np.where(i_f)[0], lb[i_f]]
556:         # don't remove these entries from bounds; they'll be used later.
557: 
558:     # no constraints indicates that problem is trivial
559:     if A_eq.size == 0 and A_ub.size == 0:
560:         b_eq = np.array([])
561:         b_ub = np.array([])
562:         # test_empty_constraint_1
563:         if c.size == 0:
564:             status = 0
565:             message = ("The solution was determined in presolve as there are"
566:                        "no non-trivial constraints.")
567:         elif (np.any(np.logical_and(c < 0, ub == np.inf)) or
568:                 np.any(np.logical_and(c > 0, lb == -np.inf))):
569:                 # test_no_constraints()
570:             status = 3
571:             message = ("If feasible, the problem is (trivially) unbounded "
572:                        "because there are no constraints and at least one "
573:                        " element of c is negative. If you wish to check "
574:                        " whether the problem is infeasible, turn presolve "
575:                        "off.")
576:         else:  # test_empty_constraint_2
577:             status = 0
578:             message = ("The solution was determined in presolve as there are "
579:                        "no non-trivial constraints.")
580:         complete = True
581:         x[c < 0] = ub[c < 0]
582:         x[c > 0] = lb[c > 0]
583:         # if this is not the last step of presolve, should convert bounds back
584:         # to array and return here
585: 
586:     # *sigh* - convert bounds back to their standard form (list of tuples)
587:     # again, in retrospect, numpy array would be standard form
588:     lb[np.equal(lb, -np.inf)] = None
589:     ub[np.equal(ub, np.inf)] = None
590:     bounds = np.hstack((lb[:, np.newaxis], ub[:, np.newaxis]))
591:     bounds = bounds.tolist()
592:     for i, row in enumerate(bounds):
593:         for j, col in enumerate(row):
594:             if str(
595:                     col) == "nan":  # comparing col to float("nan") and
596:                                     # np.nan doesn't work. should use np.isnan
597:                 bounds[i][j] = None
598: 
599:     # remove redundant (linearly dependent) rows from equality constraints
600:     n_rows_A = A_eq.shape[0]
601:     redundancy_warning = ("A_eq does not appear to be of full row rank. To "
602:                           "improve performance, check the problem formulation "
603:                           "for redundant equality constraints.")
604:     if (sps.issparse(A_eq)):
605:         if rr and A_eq.size > 0:  # TODO: Fast sparse rank check?
606:             A_eq, b_eq, status, message = _remove_redundancy_sparse(A_eq, b_eq)
607:             if A_eq.shape[0] < n_rows_A:
608:                 warn(redundancy_warning, OptimizeWarning)
609:             if status != 0:
610:                 complete = True
611:         return (c, c0, A_ub, b_ub, A_eq, b_eq, bounds,
612:                 x, undo, complete, status, message)
613: 
614:     # This is a wild guess for which redundancy removal algorithm will be
615:     # faster. More testing would be good.
616:     small_nullspace = 5
617:     if rr and A_eq.size > 0:
618:         try:  # TODO: instead use results of first SVD in _remove_redundancy
619:             rank = np.linalg.matrix_rank(A_eq)
620:         except:  # oh well, we'll have to go with _remove_redundancy_dense
621:             rank = 0
622:     if rr and A_eq.size > 0 and rank < A_eq.shape[0]:
623:         warn(redundancy_warning, OptimizeWarning)
624:         dim_row_nullspace = A_eq.shape[0]-rank
625:         if dim_row_nullspace <= small_nullspace:
626:             A_eq, b_eq, status, message = _remove_redundancy(A_eq, b_eq)
627:         if dim_row_nullspace > small_nullspace or status == 4:
628:             A_eq, b_eq, status, message = _remove_redundancy_dense(A_eq, b_eq)
629:         if A_eq.shape[0] < rank:
630:             message = ("Due to numerical issues, redundant equality "
631:                        "constraints could not be removed automatically. "
632:                        "Try providing your constraint matrices as sparse "
633:                        "matrices to activate sparse presolve, try turning "
634:                        "off redundancy removal, or try turning off presolve "
635:                        "altogether.")
636:             status = 4
637:         if status != 0:
638:             complete = True
639:     return (c, c0, A_ub, b_ub, A_eq, b_eq, bounds,
640:             x, undo, complete, status, message)
641: 
642: 
643: def _get_Abc(
644:         c,
645:         c0=0,
646:         A_ub=None,
647:         b_ub=None,
648:         A_eq=None,
649:         b_eq=None,
650:         bounds=None,
651:         undo=[]):
652:     '''
653:     Given a linear programming problem of the form:
654: 
655:     minimize:     c^T * x
656: 
657:     subject to:   A_ub * x <= b_ub
658:                   A_eq * x == b_eq
659:                   bounds[i][0] < x_i < bounds[i][1]
660: 
661:     return the problem in standard form:
662:     minimize:     c'^T * x'
663: 
664:     subject to:   A * x' == b
665:                   0 < x' < oo
666: 
667:     by adding slack variables and making variable substitutions as necessary.
668: 
669:     Parameters
670:     ----------
671:     c : 1-D array
672:         Coefficients of the linear objective function to be minimized.
673:         Components corresponding with fixed variables have been eliminated.
674:     c0 : float
675:         Constant term in objective function due to fixed (and eliminated)
676:         variables.
677:     A_ub : 2-D array
678:         2-D array which, when matrix-multiplied by ``x``, gives the values of
679:         the upper-bound inequality constraints at ``x``. Unnecessary
680:         rows/columns have been removed.
681:     b_ub : 1-D array
682:         1-D array of values representing the upper-bound of each inequality
683:         constraint (row) in ``A_ub``. Unnecessary elements have been removed.
684:     A_eq : 2-D array
685:         2-D array which, when matrix-multiplied by ``x``, gives the values of
686:         the equality constraints at ``x``. Unnecessary rows/columns have been
687:         removed.
688:     b_eq : 1-D array
689:         1-D array of values representing the RHS of each equality constraint
690:         (row) in ``A_eq``. Unnecessary elements have been removed.
691:     bounds : sequence of tuples
692:         ``(min, max)`` pairs for each element in ``x``, defining
693:         the bounds on that parameter. Use None for each of ``min`` or
694:         ``max`` when there is no bound in that direction. Bounds have been
695:         tightened where possible.
696:     undo: list of tuples
697:         (`index`, `value`) pairs that record the original index and fixed value
698:         for each variable removed from the problem
699: 
700:     Returns
701:     -------
702:     A : 2-D array
703:         2-D array which, when matrix-multiplied by x, gives the values of the
704:         equality constraints at x (for standard form problem).
705:     b : 1-D array
706:         1-D array of values representing the RHS of each equality constraint
707:         (row) in A (for standard form problem).
708:     c : 1-D array
709:         Coefficients of the linear objective function to be minimized (for
710:         standard form problem).
711:     c0 : float
712:         Constant term in objective function due to fixed (and eliminated)
713:         variables.
714: 
715:     References
716:     ----------
717:     .. [6] Bertsimas, Dimitris, and J. Tsitsiklis. "Introduction to linear
718:            programming." Athena Scientific 1 (1997): 997.
719: 
720:     '''
721: 
722:     if sps.issparse(A_eq):
723:         sparse = True
724:         A_eq = sps.lil_matrix(A_eq)
725:         A_ub = sps.lil_matrix(A_ub)
726: 
727:         def hstack(blocks):
728:             return sps.hstack(blocks, format="lil")
729: 
730:         def vstack(blocks):
731:             return sps.vstack(blocks, format="lil")
732: 
733:         zeros = sps.lil_matrix
734:         eye = sps.eye
735:     else:
736:         sparse = False
737:         hstack = np.hstack
738:         vstack = np.vstack
739:         zeros = np.zeros
740:         eye = np.eye
741: 
742:     fixed_x = set()
743:     if len(undo) > 0:
744:         # these are indices of variables removed from the problem
745:         # however, their bounds are still part of the bounds list
746:         fixed_x = set(undo[0])
747:     # they are needed elsewhere, but not here
748:     bounds = [bounds[i] for i in range(len(bounds)) if i not in fixed_x]
749:     # in retrospect, the standard form of bounds should have been an n x 2
750:     # array. maybe change it someday.
751: 
752:     # modify problem such that all variables have only non-negativity bounds
753: 
754:     bounds = np.array(bounds)
755:     lbs = bounds[:, 0]
756:     ubs = bounds[:, 1]
757:     m_ub, n_ub = A_ub.shape
758: 
759:     lb_none = np.equal(lbs, None)
760:     ub_none = np.equal(ubs, None)
761:     lb_some = np.logical_not(lb_none)
762:     ub_some = np.logical_not(ub_none)
763: 
764:     # if preprocessing is on, lb == ub can't happen
765:     # if preprocessing is off, then it would be best to convert that
766:     # to an equality constraint, but it's tricky to make the other
767:     # required modifications from inside here.
768: 
769:     # unbounded below: substitute xi = -xi' (unbounded above)
770:     l_nolb_someub = np.logical_and(lb_none, ub_some)
771:     i_nolb = np.where(l_nolb_someub)[0]
772:     lbs[l_nolb_someub], ubs[l_nolb_someub] = (
773:         -ubs[l_nolb_someub], lbs[l_nolb_someub])
774:     lb_none = np.equal(lbs, None)
775:     ub_none = np.equal(ubs, None)
776:     lb_some = np.logical_not(lb_none)
777:     ub_some = np.logical_not(ub_none)
778:     c[i_nolb] *= -1
779:     if len(i_nolb) > 0:
780:         if A_ub.shape[0] > 0:  # sometimes needed for sparse arrays... weird
781:             A_ub[:, i_nolb] *= -1
782:         if A_eq.shape[0] > 0:
783:             A_eq[:, i_nolb] *= -1
784: 
785:     # upper bound: add inequality constraint
786:     i_newub = np.where(ub_some)[0]
787:     ub_newub = ubs[ub_some]
788:     n_bounds = np.count_nonzero(ub_some)
789:     A_ub = vstack((A_ub, zeros((n_bounds, A_ub.shape[1]))))
790:     b_ub = np.concatenate((b_ub, np.zeros(n_bounds)))
791:     A_ub[range(m_ub, A_ub.shape[0]), i_newub] = 1
792:     b_ub[m_ub:] = ub_newub
793: 
794:     A1 = vstack((A_ub, A_eq))
795:     b = np.concatenate((b_ub, b_eq))
796:     c = np.concatenate((c, np.zeros((A_ub.shape[0],))))
797: 
798:     # unbounded: substitute xi = xi+ + xi-
799:     l_free = np.logical_and(lb_none, ub_none)
800:     i_free = np.where(l_free)[0]
801:     n_free = len(i_free)
802:     A1 = hstack((A1, zeros((A1.shape[0], n_free))))
803:     c = np.concatenate((c, np.zeros(n_free)))
804:     A1[:, range(n_ub, A1.shape[1])] = -A1[:, i_free]
805:     c[np.arange(n_ub, A1.shape[1])] = -c[i_free]
806: 
807:     # add slack variables
808:     A2 = vstack([eye(A_ub.shape[0]), zeros((A_eq.shape[0], A_ub.shape[0]))])
809:     A = hstack([A1, A2])
810: 
811:     # lower bound: substitute xi = xi' + lb
812:     # now there is a constant term in objective
813:     i_shift = np.where(lb_some)[0]
814:     lb_shift = lbs[lb_some].astype(float)
815:     c0 += np.sum(lb_shift * c[i_shift])
816:     if sparse:
817:         b = b.reshape(-1, 1)
818:         A = A.tocsc()
819:         b -= (A[:, i_shift] * sps.diags(lb_shift)).sum(axis=1)
820:         b = b.ravel()
821:     else:
822:         b -= (A[:, i_shift] * lb_shift).sum(axis=1)
823: 
824:     return A, b, c, c0
825: 
826: 
827: def _postprocess(
828:         x,
829:         c,
830:         A_ub=None,
831:         b_ub=None,
832:         A_eq=None,
833:         b_eq=None,
834:         bounds=None,
835:         complete=False,
836:         undo=[],
837:         status=0,
838:         message=""):
839:     '''
840:     Given solution x to presolved, standard form linear program x, add
841:     fixed variables back into the problem and undo the variable substitutions
842:     to get solution to original linear program. Also, calculate the objective
843:     function value, slack in original upper bound constraints, and residuals
844:     in original equality constraints.
845: 
846:     Parameters
847:     ----------
848:     x : 1-D array
849:         Solution vector to the standard-form problem.
850:     c : 1-D array
851:         Original coefficients of the linear objective function to be minimized.
852:     A_ub : 2-D array
853:         Original upper bound constraint matrix.
854:     b_ub : 1-D array
855:         Original upper bound constraint vector.
856:     A_eq : 2-D array
857:         Original equality constraint matrix.
858:     b_eq : 1-D array
859:         Original equality constraint vector.
860:     bounds : sequence of tuples
861:         Bounds, as modified in presolve
862:     complete : bool
863:         Whether the solution is was determined in presolve (``True`` if so)
864:     undo: list of tuples
865:         (`index`, `value`) pairs that record the original index and fixed value
866:         for each variable removed from the problem
867:     status : int
868:         An integer representing the exit status of the optimization::
869: 
870:              0 : Optimization terminated successfully
871:              1 : Iteration limit reached
872:              2 : Problem appears to be infeasible
873:              3 : Problem appears to be unbounded
874:              4 : Serious numerical difficulties encountered
875: 
876:     message : str
877:         A string descriptor of the exit status of the optimization.
878: 
879:     Returns
880:     -------
881:     x : 1-D array
882:         Solution vector to original linear programming problem
883:     fun: float
884:         optimal objective value for original problem
885:     slack: 1-D array
886:         The (non-negative) slack in the upper bound constraints, that is,
887:         ``b_ub - A_ub * x``
888:     con : 1-D array
889:         The (nominally zero) residuals of the equality constraints, that is,
890:         ``b - A_eq * x``
891:     status : int
892:         An integer representing the exit status of the optimization::
893: 
894:              0 : Optimization terminated successfully
895:              1 : Iteration limit reached
896:              2 : Problem appears to be infeasible
897:              3 : Problem appears to be unbounded
898:              4 : Serious numerical difficulties encountered
899: 
900:     message : str
901:         A string descriptor of the exit status of the optimization.
902: 
903:     '''
904:     # note that all the inputs are the ORIGINAL, unmodified versions
905:     # no rows, columns have been removed
906:     # the only exception is bounds; it has been modified
907:     # we need these modified values to undo the variable substitutions
908:     # in retrospect, perhaps this could have been simplified if the "undo"
909:     # variable also contained information for undoing variable substitutions
910: 
911:     n_x = len(c)
912: 
913:     # we don't have to undo variable substitutions for fixed variables that
914:     # were removed from the problem
915:     no_adjust = set()
916: 
917:     # if there were variables removed from the problem, add them back into the
918:     # solution vector
919:     if len(undo) > 0:
920:         no_adjust = set(undo[0])
921:         x = x.tolist()
922:         for i, val in zip(undo[0], undo[1]):
923:             x.insert(i, val)
924:         x = np.array(x)
925: 
926:     # now undo variable substitutions
927:     # if "complete", problem was solved in presolve; don't do anything here
928:     if not complete and bounds is not None:  # bounds are never none, probably
929:         n_unbounded = 0
930:         for i, b in enumerate(bounds):
931:             if i in no_adjust:
932:                 continue
933:             lb, ub = b
934:             if lb is None and ub is None:
935:                 n_unbounded += 1
936:                 x[i] = x[i] - x[n_x + n_unbounded - 1]
937:             else:
938:                 if lb is None:
939:                     x[i] = ub - x[i]
940:                 else:
941:                     x[i] += lb
942: 
943:     n_x = len(c)
944:     x = x[:n_x]  # all the rest of the variables were artificial
945:     fun = x.dot(c)
946:     slack = b_ub - A_ub.dot(x)  # report slack for ORIGINAL UB constraints
947:     # report residuals of ORIGINAL EQ constraints
948:     con = b_eq - A_eq.dot(x)
949: 
950:     if status == 0 and (np.isnan(x).any() or np.isnan(fun) or
951:                         np.isnan(slack).any() or np.isnan(con).any()):
952:         status = 4
953:         message = ("Numerical difficulties were encountered but no errors "
954:                    "were raised. This is known to occur if the 'presolve' "
955:                    "option is False, 'sparse' is True, and A_eq includes "
956:                    "redundant rows. If you encounter this under different "
957:                    "circumstances, please submit a bug report. Otherwise, "
958:                    "remove linearly dependent equations from your equality "
959:                    "constraints or enable presolve.")
960: 
961:     return x, fun, slack, con, status, message
962: 
963: 
964: def _get_solver(sparse=False, lstsq=False, sym_pos=True, cholesky=True):
965:     '''
966:     Given solver options, return a handle to the appropriate linear system
967:     solver.
968: 
969:     Parameters
970:     ----------
971:     sparse : bool
972:         True if the system to be solved is sparse. This is typically set
973:         True when the original ``A_ub`` and ``A_eq`` arrays are sparse.
974:     lstsq : bool
975:         True if the system is ill-conditioned and/or (nearly) singular and
976:         thus a more robust least-squares solver is desired. This is sometimes
977:         needed as the solution is approached.
978:     sym_pos : bool
979:         True if the system matrix is symmetric positive definite
980:         Sometimes this needs to be set false as the solution is approached,
981:         even when the system should be symmetric positive definite, due to
982:         numerical difficulties.
983:     cholesky : bool
984:         True if the system is to be solved by Cholesky, rather than LU,
985:         decomposition. This is typically faster unless the problem is very
986:         small or prone to numerical difficulties.
987: 
988:     Returns
989:     -------
990:     solve : function
991:         Handle to the appropriate solver function
992: 
993:     '''
994:     if sparse:
995:         if lstsq or not(sym_pos):
996:             def solve(M, r, sym_pos=False):
997:                 return sps.linalg.lsqr(M, r)[0]
998:         else:
999:             # this is not currently used; it is replaced by splu solve
1000:             # TODO: expose use of this as an option
1001:             def solve(M, r):
1002:                 return sps.linalg.spsolve(M, r, permc_spec="MMD_AT_PLUS_A")
1003: 
1004:     else:
1005:         if lstsq:  # sometimes necessary as solution is approached
1006:             def solve(M, r):
1007:                 return sp.linalg.lstsq(M, r)[0]
1008:         elif cholesky:
1009:             solve = sp.linalg.cho_solve
1010:         else:
1011:             # this seems to cache the matrix factorization, so solving
1012:             # with multiple right hand sides is much faster
1013:             def solve(M, r, sym_pos=sym_pos):
1014:                 return sp.linalg.solve(M, r, sym_pos=sym_pos)
1015: 
1016:     return solve
1017: 
1018: 
1019: def _get_delta(
1020:     A,
1021:     b,
1022:     c,
1023:     x,
1024:     y,
1025:     z,
1026:     tau,
1027:     kappa,
1028:     gamma,
1029:     eta,
1030:     sparse=False,
1031:     lstsq=False,
1032:     sym_pos=True,
1033:     cholesky=True,
1034:     pc=True,
1035:     ip=False,
1036:         permc_spec='MMD_AT_PLUS_A'):
1037:     '''
1038:     Given standard form problem defined by ``A``, ``b``, and ``c``;
1039:     current variable estimates ``x``, ``y``, ``z``, ``tau``, and ``kappa``;
1040:     algorithmic parameters ``gamma and ``eta;
1041:     and options ``sparse``, ``lstsq``, ``sym_pos``, ``cholesky``, ``pc``
1042:     (predictor-corrector), and ``ip`` (initial point improvement),
1043:     get the search direction for increments to the variable estimates.
1044: 
1045:     Parameters
1046:     ----------
1047:     As defined in [1], except:
1048:     sparse : bool
1049:         True if the system to be solved is sparse. This is typically set
1050:         True when the original ``A_ub`` and ``A_eq`` arrays are sparse.
1051:     lstsq : bool
1052:         True if the system is ill-conditioned and/or (nearly) singular and
1053:         thus a more robust least-squares solver is desired. This is sometimes
1054:         needed as the solution is approached.
1055:     sym_pos : bool
1056:         True if the system matrix is symmetric positive definite
1057:         Sometimes this needs to be set false as the solution is approached,
1058:         even when the system should be symmetric positive definite, due to
1059:         numerical difficulties.
1060:     cholesky : bool
1061:         True if the system is to be solved by Cholesky, rather than LU,
1062:         decomposition. This is typically faster unless the problem is very
1063:         small or prone to numerical difficulties.
1064:     pc : bool
1065:         True if the predictor-corrector method of Mehrota is to be used. This
1066:         is almost always (if not always) beneficial. Even though it requires
1067:         the solution of an additional linear system, the factorization
1068:         is typically (implicitly) reused so solution is efficient, and the
1069:         number of algorithm iterations is typically reduced.
1070:     ip : bool
1071:         True if the improved initial point suggestion due to [1] section 4.3
1072:         is desired. It's unclear whether this is beneficial.
1073:     permc_spec : str (default = 'MMD_AT_PLUS_A')
1074:         (Has effect only with ``sparse = True``, ``lstsq = False``, ``sym_pos =
1075:         True``.) A matrix is factorized in each iteration of the algorithm.
1076:         This option specifies how to permute the columns of the matrix for
1077:         sparsity preservation. Acceptable values are:
1078: 
1079:         - ``NATURAL``: natural ordering.
1080:         - ``MMD_ATA``: minimum degree ordering on the structure of A^T A.
1081:         - ``MMD_AT_PLUS_A``: minimum degree ordering on the structure of A^T+A.
1082:         - ``COLAMD``: approximate minimum degree column ordering.
1083: 
1084:         This option can impact the convergence of the
1085:         interior point algorithm; test different values to determine which
1086:         performs best for your problem. For more information, refer to
1087:         ``scipy.sparse.linalg.splu``.
1088: 
1089:     Returns
1090:     -------
1091:     Search directions as defined in [1]
1092: 
1093:     References
1094:     ----------
1095:     .. [1] Andersen, Erling D., and Knud D. Andersen. "The MOSEK interior point
1096:            optimizer for linear programming: an implementation of the
1097:            homogeneous algorithm." High performance optimization. Springer US,
1098:            2000. 197-232.
1099: 
1100:     '''
1101: 
1102:     if A.shape[0] == 0:
1103:         # If there are no constraints, some solvers fail (understandably)
1104:         # rather than returning empty solution. This gets the job done.
1105:         sparse, lstsq, sym_pos, cholesky = False, False, True, False
1106:     solve = _get_solver(sparse, lstsq, sym_pos, cholesky)
1107:     n_x = len(x)
1108: 
1109:     # [1] Equation 8.8
1110:     r_P = b * tau - A.dot(x)
1111:     r_D = c * tau - A.T.dot(y) - z
1112:     r_G = c.dot(x) - b.transpose().dot(y) + kappa
1113:     mu = (x.dot(z) + tau * kappa) / (n_x + 1)
1114: 
1115:     #  Assemble M from [1] Equation 8.31
1116:     Dinv = x / z
1117:     splu = False
1118:     if sparse and not lstsq:
1119:         # sparse requires Dinv to be diag matrix
1120:         M = A.dot(sps.diags(Dinv, 0, format="csc").dot(A.T))
1121:         try:
1122:             # TODO: should use linalg.factorized instead, but I don't have
1123:             #       umfpack and therefore cannot test its performance
1124:             solve = sps.linalg.splu(M, permc_spec=permc_spec).solve
1125:             splu = True
1126:         except:
1127:             lstsq = True
1128:             solve = _get_solver(sparse, lstsq, sym_pos, cholesky)
1129:     else:
1130:         # dense does not; use broadcasting
1131:         M = A.dot(Dinv.reshape(-1, 1) * A.T)
1132: 
1133:     # For some small problems, calling sp.linalg.solve w/ sym_pos = True
1134:     # may be faster. I am pretty certain it caches the factorization for
1135:     # multiple uses and checks the incoming matrix to see if it's the same as
1136:     # the one it already factorized. (I can't explain the speed otherwise.)
1137:     if cholesky:
1138:         try:
1139:             L = sp.linalg.cho_factor(M)
1140:         except:
1141:             cholesky = False
1142:             solve = _get_solver(sparse, lstsq, sym_pos, cholesky)
1143: 
1144:     # pc: "predictor-corrector" [1] Section 4.1
1145:     # In development this option could be turned off
1146:     # but it always seems to improve performance substantially
1147:     n_corrections = 1 if pc else 0
1148: 
1149:     i = 0
1150:     alpha, d_x, d_z, d_tau, d_kappa = 0, 0, 0, 0, 0
1151:     while i <= n_corrections:
1152:         # Reference [1] Eq. 8.6
1153:         rhatp = eta(gamma) * r_P
1154:         rhatd = eta(gamma) * r_D
1155:         rhatg = np.array(eta(gamma) * r_G).reshape((1,))
1156: 
1157:         # Reference [1] Eq. 8.7
1158:         rhatxs = gamma * mu - x * z
1159:         rhattk = np.array(gamma * mu - tau * kappa).reshape((1,))
1160: 
1161:         if i == 1:
1162:             if ip:  # if the correction is to get "initial point"
1163:                 # Reference [1] Eq. 8.23
1164:                 rhatxs = ((1 - alpha) * gamma * mu -
1165:                           x * z - alpha**2 * d_x * d_z)
1166:                 rhattk = np.array(
1167:                     (1 -
1168:                      alpha) *
1169:                     gamma *
1170:                     mu -
1171:                     tau *
1172:                     kappa -
1173:                     alpha**2 *
1174:                     d_tau *
1175:                     d_kappa).reshape(
1176:                     (1,
1177:                      ))
1178:             else:  # if the correction is for "predictor-corrector"
1179:                 # Reference [1] Eq. 8.13
1180:                 rhatxs -= d_x * d_z
1181:                 rhattk -= d_tau * d_kappa
1182: 
1183:         # sometimes numerical difficulties arise as the solution is approached
1184:         # this loop tries to solve the equations using a sequence of functions
1185:         # for solve. For dense systems, the order is:
1186:         # 1. scipy.linalg.cho_factor/scipy.linalg.cho_solve,
1187:         # 2. scipy.linalg.solve w/ sym_pos = True,
1188:         # 3. scipy.linalg.solve w/ sym_pos = False, and if all else fails
1189:         # 4. scipy.linalg.lstsq
1190:         # For sparse systems, the order is:
1191:         # 1. scipy.sparse.linalg.splu
1192:         # 2. scipy.sparse.linalg.lsqr
1193:         # TODO: if umfpack is installed, use factorized instead of splu.
1194:         #       Can't do that now because factorized doesn't pass permc_spec
1195:         #       to splu if umfpack isn't installed. Also, umfpack not tested.
1196:         solved = False
1197:         while(not solved):
1198:             try:
1199:                 solve_this = L if cholesky else M
1200:                 # [1] Equation 8.28
1201:                 p, q = _sym_solve(Dinv, solve_this, A, c, b, solve, splu)
1202:                 # [1] Equation 8.29
1203:                 u, v = _sym_solve(Dinv, solve_this, A, rhatd -
1204:                                   (1 / x) * rhatxs, rhatp, solve, splu)
1205:                 if np.any(np.isnan(p)) or np.any(np.isnan(q)):
1206:                     raise LinAlgError
1207:                 solved = True
1208:             except (LinAlgError, ValueError) as e:
1209:                 # Usually this doesn't happen. If it does, it happens when
1210:                 # there are redundant constraints or when approaching the
1211:                 # solution. If so, change solver.
1212:                 cholesky = False
1213:                 if not lstsq:
1214:                     if sym_pos:
1215:                         warn(
1216:                             "Solving system with option 'sym_pos':True "
1217:                             "failed. It is normal for this to happen "
1218:                             "occasionally, especially as the solution is "
1219:                             "approached. However, if you see this frequently, "
1220:                             "consider setting option 'sym_pos' to False.",
1221:                             OptimizeWarning)
1222:                         sym_pos = False
1223:                     else:
1224:                         warn(
1225:                             "Solving system with option 'sym_pos':False "
1226:                             "failed. This may happen occasionally, "
1227:                             "especially as the solution is "
1228:                             "approached. However, if you see this frequently, "
1229:                             "your problem may be numerically challenging. "
1230:                             "If you cannot improve the formulation, consider "
1231:                             "setting 'lstsq' to True.", OptimizeWarning)
1232:                         lstsq = True
1233:                 else:
1234:                     raise e
1235:                 solve = _get_solver(sparse, lstsq, sym_pos)
1236:         # [1] Results after 8.29
1237:         d_tau = ((rhatg + 1 / tau * rhattk - (-c.dot(u) + b.dot(v))) /
1238:                  (1 / tau * kappa + (-c.dot(p) + b.dot(q))))
1239:         d_x = u + p * d_tau
1240:         d_y = v + q * d_tau
1241: 
1242:         # [1] Relations between  after 8.25 and 8.26
1243:         d_z = (1 / x) * (rhatxs - z * d_x)
1244:         d_kappa = 1 / tau * (rhattk - kappa * d_tau)
1245: 
1246:         # [1] 8.12 and "Let alpha be the maximal possible step..." before 8.23
1247:         alpha = _get_step(x, d_x, z, d_z, tau, d_tau, kappa, d_kappa, 1)
1248:         if ip:  # initial point - see [1] 4.4
1249:             gamma = 10
1250:         else:  # predictor-corrector, [1] definition after 8.12
1251:             beta1 = 0.1  # [1] pg. 220 (Table 8.1)
1252:             gamma = (1 - alpha)**2 * min(beta1, (1 - alpha))
1253:         i += 1
1254: 
1255:     return d_x, d_y, d_z, d_tau, d_kappa
1256: 
1257: 
1258: def _sym_solve(Dinv, M, A, r1, r2, solve, splu=False):
1259:     '''
1260:     An implementation of [1] equation 8.31 and 8.32
1261: 
1262:     References
1263:     ----------
1264:     .. [1] Andersen, Erling D., and Knud D. Andersen. "The MOSEK interior point
1265:            optimizer for linear programming: an implementation of the
1266:            homogeneous algorithm." High performance optimization. Springer US,
1267:            2000. 197-232.
1268: 
1269:     '''
1270:     # [1] 8.31
1271:     r = r2 + A.dot(Dinv * r1)
1272:     if splu:
1273:         v = solve(r)
1274:     else:
1275:         v = solve(M, r)
1276:     # [1] 8.32
1277:     u = Dinv * (A.T.dot(v) - r1)
1278:     return u, v
1279: 
1280: 
1281: def _get_step(x, d_x, z, d_z, tau, d_tau, kappa, d_kappa, alpha0):
1282:     '''
1283:     An implementation of [1] equation 8.21
1284: 
1285:     References
1286:     ----------
1287:     .. [1] Andersen, Erling D., and Knud D. Andersen. "The MOSEK interior point
1288:            optimizer for linear programming: an implementation of the
1289:            homogeneous algorithm." High performance optimization. Springer US,
1290:            2000. 197-232.
1291: 
1292:     '''
1293:     # [1] 4.3 Equation 8.21, ignoring 8.20 requirement
1294:     # same step is taken in primal and dual spaces
1295:     # alpha0 is basically beta3 from [1] Table 8.1, but instead of beta3
1296:     # the value 1 is used in Mehrota corrector and initial point correction
1297:     i_x = d_x < 0
1298:     i_z = d_z < 0
1299:     alpha_x = alpha0 * np.min(x[i_x] / -d_x[i_x]) if np.any(i_x) else 1
1300:     alpha_tau = alpha0 * tau / -d_tau if d_tau < 0 else 1
1301:     alpha_z = alpha0 * np.min(z[i_z] / -d_z[i_z]) if np.any(i_z) else 1
1302:     alpha_kappa = alpha0 * kappa / -d_kappa if d_kappa < 0 else 1
1303:     alpha = np.min([1, alpha_x, alpha_tau, alpha_z, alpha_kappa])
1304:     return alpha
1305: 
1306: 
1307: def _get_message(status):
1308:     '''
1309:     Given problem status code, return a more detailed message.
1310: 
1311:     Parameters
1312:     ----------
1313:     status : int
1314:         An integer representing the exit status of the optimization::
1315: 
1316:          0 : Optimization terminated successfully
1317:          1 : Iteration limit reached
1318:          2 : Problem appears to be infeasible
1319:          3 : Problem appears to be unbounded
1320:          4 : Serious numerical difficulties encountered.
1321: 
1322:     Returns
1323:     -------
1324:     message : str
1325:         A string descriptor of the exit status of the optimization.
1326: 
1327:     '''
1328:     messages = (
1329:         ["Optimization terminated successfully.",
1330:          "The iteration limit was reached before the algorithm converged.",
1331:          "The algorithm terminated successfully and determined that the "
1332:          "problem is infeasible.",
1333:          "The algorithm terminated successfully and determined that the "
1334:          "problem is unbounded.",
1335:          "Numerical difficulties were encountered before the problem "
1336:          "converged. Please check your problem formulation for errors, "
1337:          "independence of linear equality constraints, and reasonable "
1338:          "scaling and matrix condition numbers. If you continue to "
1339:          "encounter this error, please submit a bug report."
1340:          ])
1341:     return messages[status]
1342: 
1343: 
1344: def _do_step(x, y, z, tau, kappa, d_x, d_y, d_z, d_tau, d_kappa, alpha):
1345:     '''
1346:     An implementation of [1] Equation 8.9
1347: 
1348:     References
1349:     ----------
1350:     .. [1] Andersen, Erling D., and Knud D. Andersen. "The MOSEK interior point
1351:            optimizer for linear programming: an implementation of the
1352:            homogeneous algorithm." High performance optimization. Springer US,
1353:            2000. 197-232.
1354: 
1355:     '''
1356:     x = x + alpha * d_x
1357:     tau = tau + alpha * d_tau
1358:     z = z + alpha * d_z
1359:     kappa = kappa + alpha * d_kappa
1360:     y = y + alpha * d_y
1361:     return x, y, z, tau, kappa
1362: 
1363: 
1364: def _get_blind_start(shape):
1365:     '''
1366:     Return the starting point from [1] 4.4
1367: 
1368:     References
1369:     ----------
1370:     .. [1] Andersen, Erling D., and Knud D. Andersen. "The MOSEK interior point
1371:            optimizer for linear programming: an implementation of the
1372:            homogeneous algorithm." High performance optimization. Springer US,
1373:            2000. 197-232.
1374: 
1375:     '''
1376:     m, n = shape
1377:     x0 = np.ones(n)
1378:     y0 = np.zeros(m)
1379:     z0 = np.ones(n)
1380:     tau0 = 1
1381:     kappa0 = 1
1382:     return x0, y0, z0, tau0, kappa0
1383: 
1384: 
1385: def _indicators(A, b, c, c0, x, y, z, tau, kappa):
1386:     '''
1387:     Implementation of several equations from [1] used as indicators of
1388:     the status of optimization.
1389: 
1390:     References
1391:     ----------
1392:     .. [1] Andersen, Erling D., and Knud D. Andersen. "The MOSEK interior point
1393:            optimizer for linear programming: an implementation of the
1394:            homogeneous algorithm." High performance optimization. Springer US,
1395:            2000. 197-232.
1396: 
1397:     '''
1398: 
1399:     # residuals for termination are relative to initial values
1400:     x0, y0, z0, tau0, kappa0 = _get_blind_start(A.shape)
1401: 
1402:     # See [1], Section 4 - The Homogeneous Algorithm, Equation 8.8
1403:     def r_p(x, tau):
1404:         return b * tau - A.dot(x)
1405: 
1406:     def r_d(y, z, tau):
1407:         return c * tau - A.T.dot(y) - z
1408: 
1409:     def r_g(x, y, kappa):
1410:         return kappa + c.dot(x) - b.dot(y)
1411: 
1412:     # np.dot unpacks if they are arrays of size one
1413:     def mu(x, tau, z, kappa):
1414:         return (x.dot(z) + np.dot(tau, kappa)) / (len(x) + 1)
1415: 
1416:     obj = c.dot(x / tau) + c0
1417: 
1418:     def norm(a):
1419:         return np.linalg.norm(a)
1420: 
1421:     # See [1], Section 4.5 - The Stopping Criteria
1422:     r_p0 = r_p(x0, tau0)
1423:     r_d0 = r_d(y0, z0, tau0)
1424:     r_g0 = r_g(x0, y0, kappa0)
1425:     mu_0 = mu(x0, tau0, z0, kappa0)
1426:     rho_A = norm(c.T.dot(x) - b.T.dot(y)) / (tau + norm(b.T.dot(y)))
1427:     rho_p = norm(r_p(x, tau)) / max(1, norm(r_p0))
1428:     rho_d = norm(r_d(y, z, tau)) / max(1, norm(r_d0))
1429:     rho_g = norm(r_g(x, y, kappa)) / max(1, norm(r_g0))
1430:     rho_mu = mu(x, tau, z, kappa) / mu_0
1431:     return rho_p, rho_d, rho_A, rho_g, rho_mu, obj
1432: 
1433: 
1434: def _display_iter(rho_p, rho_d, rho_g, alpha, rho_mu, obj, header=False):
1435:     '''
1436:     Print indicators of optimization status to the console.
1437: 
1438:     Parameters
1439:     ----------
1440:     rho_p : float
1441:         The (normalized) primal feasibility, see [1] 4.5
1442:     rho_d : float
1443:         The (normalized) dual feasibility, see [1] 4.5
1444:     rho_g : float
1445:         The (normalized) duality gap, see [1] 4.5
1446:     alpha : float
1447:         The step size, see [1] 4.3
1448:     rho_mu : float
1449:         The (normalized) path parameter, see [1] 4.5
1450:     obj : float
1451:         The objective function value of the current iterate
1452:     header : bool
1453:         True if a header is to be printed
1454: 
1455:     References
1456:     ----------
1457:     .. [1] Andersen, Erling D., and Knud D. Andersen. "The MOSEK interior point
1458:            optimizer for linear programming: an implementation of the
1459:            homogeneous algorithm." High performance optimization. Springer US,
1460:            2000. 197-232.
1461: 
1462:     '''
1463:     if header:
1464:         print("Primal Feasibility ",
1465:               "Dual Feasibility   ",
1466:               "Duality Gap        ",
1467:               "Step            ",
1468:               "Path Parameter     ",
1469:               "Objective          ")
1470: 
1471:     # no clue why this works
1472:     fmt = '{0:<20.13}{1:<20.13}{2:<20.13}{3:<17.13}{4:<20.13}{5:<20.13}'
1473:     print(fmt.format(
1474:         rho_p,
1475:         rho_d,
1476:         rho_g,
1477:         alpha,
1478:         rho_mu,
1479:         obj))
1480: 
1481: 
1482: def _ip_hsd(A, b, c, c0, alpha0, beta, maxiter, disp, tol,
1483:             sparse, lstsq, sym_pos, cholesky, pc, ip, permc_spec):
1484:     r'''
1485:     Solve a linear programming problem in standard form:
1486: 
1487:     minimize:     c'^T * x'
1488: 
1489:     subject to:   A * x' == b
1490:                   0 < x' < oo
1491: 
1492:     using the interior point method of [1].
1493: 
1494:     Parameters
1495:     ----------
1496:     A : 2-D array
1497:         2-D array which, when matrix-multiplied by ``x``, gives the values of
1498:         the equality constraints at ``x`` (for standard form problem).
1499:     b : 1-D array
1500:         1-D array of values representing the RHS of each equality constraint
1501:         (row) in ``A`` (for standard form problem).
1502:     c : 1-D array
1503:         Coefficients of the linear objective function to be minimized (for
1504:         standard form problem).
1505:     c0 : float
1506:         Constant term in objective function due to fixed (and eliminated)
1507:         variables. (Purely for display.)
1508:     alpha0 : float
1509:         The maximal step size for Mehrota's predictor-corrector search
1510:         direction; see :math:`\beta_3`of [1] Table 8.1
1511:     beta : float
1512:         The desired reduction of the path parameter :math:`\mu` (see  [3]_)
1513:     maxiter : int
1514:         The maximum number of iterations of the algorithm.
1515:     disp : bool
1516:         Set to ``True`` if indicators of optimization status are to be printed
1517:         to the console each iteration.
1518:     tol : float
1519:         Termination tolerance; see [1]_ Section 4.5.
1520:     sparse : bool
1521:         Set to ``True`` if the problem is to be treated as sparse. However,
1522:         the inputs ``A_eq`` and ``A_ub`` should nonetheless be provided as
1523:         (dense) arrays rather than sparse matrices.
1524:     lstsq : bool
1525:         Set to ``True`` if the problem is expected to be very poorly
1526:         conditioned. This should always be left as ``False`` unless severe
1527:         numerical difficulties are frequently encountered, and a better option
1528:         would be to improve the formulation of the problem.
1529:     sym_pos : bool
1530:         Leave ``True`` if the problem is expected to yield a well conditioned
1531:         symmetric positive definite normal equation matrix (almost always).
1532:     cholesky : bool
1533:         Set to ``True`` if the normal equations are to be solved by explicit
1534:         Cholesky decomposition followed by explicit forward/backward
1535:         substitution. This is typically faster for moderate, dense problems
1536:         that are numerically well-behaved.
1537:     pc : bool
1538:         Leave ``True`` if the predictor-corrector method of Mehrota is to be
1539:         used. This is almost always (if not always) beneficial.
1540:     ip : bool
1541:         Set to ``True`` if the improved initial point suggestion due to [1]_
1542:         Section 4.3 is desired. It's unclear whether this is beneficial.
1543:     permc_spec : str (default = 'MMD_AT_PLUS_A')
1544:         (Has effect only with ``sparse = True``, ``lstsq = False``, ``sym_pos =
1545:         True``.) A matrix is factorized in each iteration of the algorithm.
1546:         This option specifies how to permute the columns of the matrix for
1547:         sparsity preservation. Acceptable values are:
1548: 
1549:         - ``NATURAL``: natural ordering.
1550:         - ``MMD_ATA``: minimum degree ordering on the structure of A^T A.
1551:         - ``MMD_AT_PLUS_A``: minimum degree ordering on the structure of A^T+A.
1552:         - ``COLAMD``: approximate minimum degree column ordering.
1553: 
1554:         This option can impact the convergence of the
1555:         interior point algorithm; test different values to determine which
1556:         performs best for your problem. For more information, refer to
1557:         ``scipy.sparse.linalg.splu``.
1558: 
1559:     Returns
1560:     -------
1561:     x_hat : float
1562:         Solution vector (for standard form problem).
1563:     status : int
1564:         An integer representing the exit status of the optimization::
1565: 
1566:          0 : Optimization terminated successfully
1567:          1 : Iteration limit reached
1568:          2 : Problem appears to be infeasible
1569:          3 : Problem appears to be unbounded
1570:          4 : Serious numerical difficulties encountered.
1571: 
1572:     message : str
1573:         A string descriptor of the exit status of the optimization.
1574:     iteration : int
1575:         The number of iterations taken to solve the problem
1576: 
1577:     References
1578:     ----------
1579:     .. [1] Andersen, Erling D., and Knud D. Andersen. "The MOSEK interior point
1580:            optimizer for linear programming: an implementation of the
1581:            homogeneous algorithm." High performance optimization. Springer US,
1582:            2000. 197-232.
1583:     .. [3] Freund, Robert M. "Primal-Dual Interior-Point Methods for Linear
1584:            Programming based on Newton's Method." Unpublished Course Notes,
1585:            March 2004. Available 2/25/2017 at:
1586:            https://ocw.mit.edu/courses/sloan-school-of-management/15-084j-nonlinear-programming-spring-2004/lecture-notes/lec14_int_pt_mthd.pdf
1587: 
1588:     '''
1589: 
1590:     iteration = 0
1591: 
1592:     # default initial point
1593:     x, y, z, tau, kappa = _get_blind_start(A.shape)
1594: 
1595:     # first iteration is special improvement of initial point
1596:     ip = ip if pc else False
1597: 
1598:     # [1] 4.5
1599:     rho_p, rho_d, rho_A, rho_g, rho_mu, obj = _indicators(
1600:         A, b, c, c0, x, y, z, tau, kappa)
1601:     go = rho_p > tol or rho_d > tol or rho_A > tol  # we might get lucky : )
1602: 
1603:     if disp:
1604:         _display_iter(rho_p, rho_d, rho_g, "-", rho_mu, obj, header=True)
1605: 
1606:     status = 0
1607:     message = "Optimization terminated successfully."
1608: 
1609:     if sparse:
1610:         A = sps.csc_matrix(A)
1611:         A.T = A.transpose()  # A.T is defined for sparse matrices but is slow
1612:         # Redefine it to avoid calculating again
1613:         # This is fine as long as A doesn't change
1614: 
1615:     while go:
1616: 
1617:         iteration += 1
1618: 
1619:         if ip:  # initial point
1620:             # [1] Section 4.4
1621:             gamma = 1
1622: 
1623:             def eta(g):
1624:                 return 1
1625:         else:
1626:             # gamma = 0 in predictor step according to [1] 4.1
1627:             # if predictor/corrector is off, use mean of complementarity [3]
1628:             # 5.1 / [4] Below Figure 10-4
1629:             gamma = 0 if pc else beta * np.mean(z * x)
1630:             # [1] Section 4.1
1631: 
1632:             def eta(g=gamma):
1633:                 return 1 - g
1634: 
1635:         try:
1636:             # Solve [1] 8.6 and 8.7/8.13/8.23
1637:             d_x, d_y, d_z, d_tau, d_kappa = _get_delta(
1638:                 A, b, c, x, y, z, tau, kappa, gamma, eta,
1639:                 sparse, lstsq, sym_pos, cholesky, pc, ip, permc_spec)
1640: 
1641:             if ip:  # initial point
1642:                 # [1] 4.4
1643:                 # Formula after 8.23 takes a full step regardless if this will
1644:                 # take it negative
1645:                 alpha = 1.0
1646:                 x, y, z, tau, kappa = _do_step(
1647:                     x, y, z, tau, kappa, d_x, d_y,
1648:                     d_z, d_tau, d_kappa, alpha)
1649:                 x[x < 1] = 1
1650:                 z[z < 1] = 1
1651:                 tau = max(1, tau)
1652:                 kappa = max(1, kappa)
1653:                 ip = False  # done with initial point
1654:             else:
1655:                 # [1] Section 4.3
1656:                 alpha = _get_step(x, d_x, z, d_z, tau,
1657:                                   d_tau, kappa, d_kappa, alpha0)
1658:                 # [1] Equation 8.9
1659:                 x, y, z, tau, kappa = _do_step(
1660:                     x, y, z, tau, kappa, d_x, d_y, d_z, d_tau, d_kappa, alpha)
1661: 
1662:         except (LinAlgError, FloatingPointError):
1663:             # this can happen when sparse solver is used and presolve
1664:             # is turned off. I've never seen it otherwise.
1665:             status = 4
1666:             message = _get_message(status)
1667:             break
1668: 
1669:         # [1] 4.5
1670:         rho_p, rho_d, rho_A, rho_g, rho_mu, obj = _indicators(
1671:             A, b, c, c0, x, y, z, tau, kappa)
1672:         go = rho_p > tol or rho_d > tol or rho_A > tol
1673: 
1674:         if disp:
1675:             _display_iter(rho_p, rho_d, rho_g, alpha, float(rho_mu), obj)
1676: 
1677:         # [1] 4.5
1678:         inf1 = (rho_p < tol and rho_d < tol and rho_g < tol and tau < tol *
1679:                 max(1, kappa))
1680:         inf2 = rho_mu < tol and tau < tol * min(1, kappa)
1681:         if inf1 or inf2:
1682:             # [1] Lemma 8.4 / Theorem 8.3
1683:             if b.transpose().dot(y) > tol:
1684:                 status = 2
1685:             else:  # elif c.T.dot(x) < tol: ? Probably not necessary.
1686:                 status = 3
1687:             message = _get_message(status)
1688:             break
1689:         elif iteration >= maxiter:
1690:             status = 1
1691:             message = _get_message(status)
1692:             break
1693: 
1694:     if disp:
1695:         print(message)
1696: 
1697:     x_hat = x / tau
1698:     # [1] Statement after Theorem 8.2
1699:     return x_hat, status, message, iteration
1700: 
1701: 
1702: def _linprog_ip(
1703:         c,
1704:         A_ub=None,
1705:         b_ub=None,
1706:         A_eq=None,
1707:         b_eq=None,
1708:         bounds=None,
1709:         callback=None,
1710:         alpha0=.99995,
1711:         beta=0.1,
1712:         maxiter=1000,
1713:         disp=False,
1714:         tol=1e-8,
1715:         sparse=False,
1716:         lstsq=False,
1717:         sym_pos=True,
1718:         cholesky=None,
1719:         pc=True,
1720:         ip=False,
1721:         presolve=True,
1722:         permc_spec='MMD_AT_PLUS_A',
1723:         rr=True,
1724:         _sparse_presolve=False,
1725:         **unknown_options):
1726:     r'''
1727:     Minimize a linear objective function subject to linear
1728:     equality constraints, linear inequality constraints, and simple bounds
1729:     using the interior point method of [1]_.
1730: 
1731:     Linear programming is intended to solve problems of the following form::
1732: 
1733:         Minimize:     c^T * x
1734: 
1735:         Subject to:   A_ub * x <= b_ub
1736:                       A_eq * x == b_eq
1737:                       bounds[i][0] < x_i < bounds[i][1]
1738: 
1739:     Parameters
1740:     ----------
1741:     c : array_like
1742:         Coefficients of the linear objective function to be minimized.
1743:     A_ub : array_like, optional
1744:         2-D array which, when matrix-multiplied by ``x``, gives the values of
1745:         the upper-bound inequality constraints at ``x``.
1746:     b_ub : array_like, optional
1747:         1-D array of values representing the upper-bound of each inequality
1748:         constraint (row) in ``A_ub``.
1749:     A_eq : array_like, optional
1750:         2-D array which, when matrix-multiplied by ``x``, gives the values of
1751:         the equality constraints at ``x``.
1752:     b_eq : array_like, optional
1753:         1-D array of values representing the right hand side of each equality
1754:         constraint (row) in ``A_eq``.
1755:     bounds : sequence, optional
1756:         ``(min, max)`` pairs for each element in ``x``, defining
1757:         the bounds on that parameter. Use ``None`` for one of ``min`` or
1758:         ``max`` when there is no bound in that direction. By default
1759:         bounds are ``(0, None)`` (non-negative).
1760:         If a sequence containing a single tuple is provided, then ``min`` and
1761:         ``max`` will be applied to all variables in the problem.
1762: 
1763:     Options
1764:     -------
1765:     maxiter : int (default = 1000)
1766:         The maximum number of iterations of the algorithm.
1767:     disp : bool (default = False)
1768:         Set to ``True`` if indicators of optimization status are to be printed
1769:         to the console each iteration.
1770:     tol : float (default = 1e-8)
1771:         Termination tolerance to be used for all termination criteria;
1772:         see [1]_ Section 4.5.
1773:     alpha0 : float (default = 0.99995)
1774:         The maximal step size for Mehrota's predictor-corrector search
1775:         direction; see :math:`\beta_{3}` of [1]_ Table 8.1.
1776:     beta : float (default = 0.1)
1777:         The desired reduction of the path parameter :math:`\mu` (see [3]_)
1778:         when Mehrota's predictor-corrector is not in use (uncommon).
1779:     sparse : bool (default = False)
1780:         Set to ``True`` if the problem is to be treated as sparse after
1781:         presolve. If either ``A_eq`` or ``A_ub`` is a sparse matrix,
1782:         this option will automatically be set ``True``, and the problem
1783:         will be treated as sparse even during presolve. If your constraint
1784:         matrices contain mostly zeros and the problem is not very small (less
1785:         than about 100 constraints or variables), consider setting ``True``
1786:         or providing ``A_eq`` and ``A_ub`` as sparse matrices.
1787:     lstsq : bool (default = False)
1788:         Set to ``True`` if the problem is expected to be very poorly
1789:         conditioned. This should always be left ``False`` unless severe
1790:         numerical difficulties are encountered. Leave this at the default
1791:         unless you receive a warning message suggesting otherwise.
1792:     sym_pos : bool (default = True)
1793:         Leave ``True`` if the problem is expected to yield a well conditioned
1794:         symmetric positive definite normal equation matrix
1795:         (almost always). Leave this at the default unless you receive
1796:         a warning message suggesting otherwise.
1797:     cholesky : bool (default = True)
1798:         Set to ``True`` if the normal equations are to be solved by explicit
1799:         Cholesky decomposition followed by explicit forward/backward
1800:         substitution. This is typically faster for moderate, dense problems
1801:         that are numerically well-behaved.
1802:     pc : bool (default = True)
1803:         Leave ``True`` if the predictor-corrector method of Mehrota is to be
1804:         used. This is almost always (if not always) beneficial.
1805:     ip : bool (default = False)
1806:         Set to ``True`` if the improved initial point suggestion due to [1]_
1807:         Section 4.3 is desired. Whether this is beneficial or not
1808:         depends on the problem.
1809:     presolve : bool (default = True)
1810:         Leave ``True`` if presolve routine should be run. The presolve routine
1811:         is almost always useful because it can detect trivial infeasibilities
1812:         and unboundedness, eliminate fixed variables, and remove redundancies.
1813:         One circumstance in which it might be turned off (set ``False``) is
1814:         when it detects that the problem is trivially unbounded; it is possible
1815:         that that the problem is truly infeasibile but this has not been
1816:         detected.
1817:     rr : bool (default = True)
1818:         Default ``True`` attempts to eliminate any redundant rows in ``A_eq``.
1819:         Set ``False`` if ``A_eq`` is known to be of full row rank, or if you
1820:         are looking for a potential speedup (at the expense of reliability).
1821:     permc_spec : str (default = 'MMD_AT_PLUS_A')
1822:         (Has effect only with ``sparse = True``, ``lstsq = False``, ``sym_pos =
1823:         True``.) A matrix is factorized in each iteration of the algorithm.
1824:         This option specifies how to permute the columns of the matrix for
1825:         sparsity preservation. Acceptable values are:
1826: 
1827:         - ``NATURAL``: natural ordering.
1828:         - ``MMD_ATA``: minimum degree ordering on the structure of A^T A.
1829:         - ``MMD_AT_PLUS_A``: minimum degree ordering on the structure of A^T+A.
1830:         - ``COLAMD``: approximate minimum degree column ordering.
1831: 
1832:         This option can impact the convergence of the
1833:         interior point algorithm; test different values to determine which
1834:         performs best for your problem. For more information, refer to
1835:         ``scipy.sparse.linalg.splu``.
1836: 
1837:     Returns
1838:     -------
1839:     A ``scipy.optimize.OptimizeResult`` consisting of the following fields:
1840: 
1841:         x : ndarray
1842:             The independent variable vector which optimizes the linear
1843:             programming problem.
1844:         fun : float
1845:             The optimal value of the objective function
1846:         con : float
1847:             The residuals of the equality constraints (nominally zero).
1848:         slack : ndarray
1849:             The values of the slack variables.  Each slack variable corresponds
1850:             to an inequality constraint.  If the slack is zero, then the
1851:             corresponding constraint is active.
1852:         success : bool
1853:             Returns True if the algorithm succeeded in finding an optimal
1854:             solution.
1855:         status : int
1856:             An integer representing the exit status of the optimization::
1857: 
1858:                  0 : Optimization terminated successfully
1859:                  1 : Iteration limit reached
1860:                  2 : Problem appears to be infeasible
1861:                  3 : Problem appears to be unbounded
1862:                  4 : Serious numerical difficulties encountered
1863: 
1864:         nit : int
1865:             The number of iterations performed.
1866:         message : str
1867:             A string descriptor of the exit status of the optimization.
1868: 
1869:     Notes
1870:     -----
1871: 
1872:     This method implements the algorithm outlined in [1]_ with ideas from [5]_
1873:     and a structure inspired by the simpler methods of [3]_ and [4]_.
1874: 
1875:     First, a presolve procedure based on [5]_ attempts to identify trivial
1876:     infeasibilities, trivial unboundedness, and potential problem
1877:     simplifications. Specifically, it checks for:
1878: 
1879:     - rows of zeros in ``A_eq`` or ``A_ub``, representing trivial constraints;
1880:     - columns of zeros in ``A_eq`` `and` ``A_ub``, representing unconstrained
1881:       variables;
1882:     - column singletons in ``A_eq``, representing fixed variables; and
1883:     - column singletons in ``A_ub``, representing simple bounds.
1884: 
1885:     If presolve reveals that the problem is unbounded (e.g. an unconstrained
1886:     and unbounded variable has negative cost) or infeasible (e.g. a row of
1887:     zeros in ``A_eq`` corresponds with a nonzero in ``b_eq``), the solver
1888:     terminates with the appropriate status code. Note that presolve terminates
1889:     as soon as any sign of unboundedness is detected; consequently, a problem
1890:     may be reported as unbounded when in reality the problem is infeasible
1891:     (but infeasibility has not been detected yet). Therefore, if the output
1892:     message states that unboundedness is detected in presolve and it is
1893:     necessary to know whether the problem is actually infeasible, set option
1894:     ``presolve=False``.
1895: 
1896:     If neither infeasibility nor unboundedness are detected in a single pass
1897:     of the presolve check, bounds are tightened where possible and fixed
1898:     variables are removed from the problem. Then, linearly dependent rows
1899:     of the ``A_eq`` matrix are removed, (unless they represent an
1900:     infeasibility) to avoid numerical difficulties in the primary solve
1901:     routine. Note that rows that are nearly linearly dependent (within a
1902:     prescibed tolerance) may also be removed, which can change the optimal
1903:     solution in rare cases. If this is a concern, eliminate redundancy from
1904:     your problem formulation and run with option ``rr=False`` or
1905:     ``presolve=False``.
1906: 
1907:     Several potential improvements can be made here: additional presolve
1908:     checks outlined in [5]_ should be implemented, the presolve routine should
1909:     be run multiple times (until no further simplifications can be made), and
1910:     more of the efficiency improvements from [2]_ should be implemented in the
1911:     redundancy removal routines.
1912: 
1913:     After presolve, the problem is transformed to standard form by converting
1914:     the (tightened) simple bounds to upper bound constraints, introducing
1915:     non-negative slack variables for inequality constraints, and expressing
1916:     unbounded variables as the difference between two non-negative variables.
1917: 
1918:     The primal-dual path following method begins with initial 'guesses' of
1919:     the primal and dual variables of the standard form problem and iteratively
1920:     attempts to solve the (nonlinear) Karush-Kuhn-Tucker conditions for the
1921:     problem with a gradually reduced logarithmic barrier term added to the
1922:     objective. This particular implementation uses a homogeneous self-dual
1923:     formulation, which provides certificates of infeasibility or unboundedness
1924:     where applicable.
1925: 
1926:     The default initial point for the primal and dual variables is that
1927:     defined in [1]_ Section 4.4 Equation 8.22. Optionally (by setting initial
1928:     point option ``ip=True``), an alternate (potentially improved) starting
1929:     point can be calculated according to the additional recommendations of
1930:     [1]_ Section 4.4.
1931: 
1932:     A search direction is calculated using the predictor-corrector method
1933:     (single correction) proposed by Mehrota and detailed in [1]_ Section 4.1.
1934:     (A potential improvement would be to implement the method of multiple
1935:     corrections described in [1]_ Section 4.2.) In practice, this is
1936:     accomplished by solving the normal equations, [1]_ Section 5.1 Equations
1937:     8.31 and 8.32, derived from the Newton equations [1]_ Section 5 Equations
1938:     8.25 (compare to [1]_ Section 4 Equations 8.6-8.8). The advantage of
1939:     solving the normal equations rather than 8.25 directly is that the
1940:     matrices involved are symmetric positive definite, so Cholesky
1941:     decomposition can be used rather than the more expensive LU factorization.
1942: 
1943:     With the default ``cholesky=True``, this is accomplished using
1944:     ``scipy.linalg.cho_factor`` followed by forward/backward substitutions
1945:     via ``scipy.linalg.cho_solve``. With ``cholesky=False`` and
1946:     ``sym_pos=True``, Cholesky decomposition is performed instead by
1947:     ``scipy.linalg.solve``. Based on speed tests, this also appears to retain
1948:     the Cholesky decomposition of the matrix for later use, which is beneficial
1949:     as the same system is solved four times with different right hand sides
1950:     in each iteration of the algorithm.
1951: 
1952:     In problems with redundancy (e.g. if presolve is turned off with option
1953:     ``presolve=False``) or if the matrices become ill-conditioned (e.g. as the
1954:     solution is approached and some decision variables approach zero),
1955:     Cholesky decomposition can fail. Should this occur, successively more
1956:     robust solvers (``scipy.linalg.solve`` with ``sym_pos=False`` then
1957:     ``scipy.linalg.lstsq``) are tried, at the cost of computational efficiency.
1958:     These solvers can be used from the outset by setting the options
1959:     ``sym_pos=False`` and ``lstsq=True``, respectively.
1960: 
1961:     Note that with the option ``sparse=True``, the normal equations are solved
1962:     using ``scipy.sparse.linalg.spsolve``. Unfortunately, this uses the more
1963:     expensive LU decomposition from the outset, but for large, sparse problems,
1964:     the use of sparse linear algebra techniques improves the solve speed
1965:     despite the use of LU rather than Cholesky decomposition. A simple
1966:     improvement would be to use the sparse Cholesky decomposition of
1967:     ``CHOLMOD`` via ``scikit-sparse`` when available.
1968: 
1969:     Other potential improvements for combatting issues associated with dense
1970:     columns in otherwise sparse problems are outlined in [1]_ Section 5.3 and
1971:     [7]_ Section 4.1-4.2; the latter also discusses the alleviation of
1972:     accuracy issues associated with the substitution approach to free
1973:     variables.
1974: 
1975:     After calculating the search direction, the maximum possible step size
1976:     that does not activate the non-negativity constraints is calculated, and
1977:     the smaller of this step size and unity is applied (as in [1]_ Section
1978:     4.1.) [1]_ Section 4.3 suggests improvements for choosing the step size.
1979: 
1980:     The new point is tested according to the termination conditions of [1]_
1981:     Section 4.5. The same tolerance, which can be set using the ``tol`` option,
1982:     is used for all checks. (A potential improvement would be to expose
1983:     the different tolerances to be set independently.) If optimality,
1984:     unboundedness, or infeasibility is detected, the solve procedure
1985:     terminates; otherwise it repeats.
1986: 
1987:     If optimality is achieved, a postsolve procedure undoes transformations
1988:     associated with presolve and converting to standard form. It then
1989:     calculates the residuals (equality constraint violations, which should
1990:     be very small) and slacks (difference between the left and right hand
1991:     sides of the upper bound constraints) of the original problem, which are
1992:     returned with the solution in an ``OptimizeResult`` object.
1993: 
1994:     References
1995:     ----------
1996:     .. [1] Andersen, Erling D., and Knud D. Andersen. "The MOSEK interior point
1997:            optimizer for linear programming: an implementation of the
1998:            homogeneous algorithm." High performance optimization. Springer US,
1999:            2000. 197-232.
2000:     .. [2] Andersen, Erling D. "Finding all linearly dependent rows in
2001:            large-scale linear programming." Optimization Methods and Software
2002:            6.3 (1995): 219-227.
2003:     .. [3] Freund, Robert M. "Primal-Dual Interior-Point Methods for Linear
2004:            Programming based on Newton's Method." Unpublished Course Notes,
2005:            March 2004. Available 2/25/2017 at
2006:            https://ocw.mit.edu/courses/sloan-school-of-management/15-084j-nonlinear-programming-spring-2004/lecture-notes/lec14_int_pt_mthd.pdf
2007:     .. [4] Fourer, Robert. "Solving Linear Programs by Interior-Point Methods."
2008:            Unpublished Course Notes, August 26, 2005. Available 2/25/2017 at
2009:            http://www.4er.org/CourseNotes/Book%20B/B-III.pdf
2010:     .. [5] Andersen, Erling D., and Knud D. Andersen. "Presolving in linear
2011:            programming." Mathematical Programming 71.2 (1995): 221-245.
2012:     .. [6] Bertsimas, Dimitris, and J. Tsitsiklis. "Introduction to linear
2013:            programming." Athena Scientific 1 (1997): 997.
2014:     .. [7] Andersen, Erling D., et al. Implementation of interior point methods
2015:            for large scale linear programming. HEC/Universite de Geneve, 1996.
2016: 
2017:     '''
2018: 
2019:     _check_unknown_options(unknown_options)
2020: 
2021:     if callback is not None:
2022:         raise NotImplementedError("method 'interior-point' does not support "
2023:                                   "callback functions.")
2024: 
2025:     # This is an undocumented option for unit testing sparse presolve
2026:     if _sparse_presolve and A_eq is not None:
2027:         A_eq = sp.sparse.coo_matrix(A_eq)
2028:     if _sparse_presolve and A_ub is not None:
2029:         A_ub = sp.sparse.coo_matrix(A_ub)
2030: 
2031:     # These should be warnings, not errors
2032:     if not sparse and (sp.sparse.issparse(A_eq) or sp.sparse.issparse(A_ub)):
2033:         sparse = True
2034:         warn("Sparse constraint matrix detected; setting 'sparse':True.",
2035:              OptimizeWarning)
2036: 
2037:     if sparse and lstsq:
2038:         warn("Invalid option combination 'sparse':True "
2039:              "and 'lstsq':True; Sparse least squares is not recommended.",
2040:              OptimizeWarning)
2041: 
2042:     if sparse and not sym_pos:
2043:         warn("Invalid option combination 'sparse':True "
2044:              "and 'sym_pos':False; the effect is the same as sparse least "
2045:              "squares, which is not recommended.",
2046:              OptimizeWarning)
2047: 
2048:     if sparse and cholesky:
2049:         # Cholesky decomposition is not available for sparse problems
2050:         warn("Invalid option combination 'sparse':True "
2051:              "and 'cholesky':True; sparse Colesky decomposition is not "
2052:              "available.",
2053:              OptimizeWarning)
2054: 
2055:     if lstsq and cholesky:
2056:         warn("Invalid option combination 'lstsq':True "
2057:              "and 'cholesky':True; option 'cholesky' has no effect when "
2058:              "'lstsq' is set True.",
2059:              OptimizeWarning)
2060: 
2061:     valid_permc_spec = ('NATURAL', 'MMD_ATA', 'MMD_AT_PLUS_A', 'COLAMD')
2062:     if permc_spec.upper() not in valid_permc_spec:
2063:         warn("Invalid permc_spec option: '" + str(permc_spec) + "'. "
2064:              "Acceptable values are 'NATURAL', 'MMD_ATA', 'MMD_AT_PLUS_A', "
2065:              "and 'COLAMD'. Reverting to default.",
2066:              OptimizeWarning)
2067:         permc_spec = 'MMD_AT_PLUS_A'
2068: 
2069:     # This can be an error
2070:     if not sym_pos and cholesky:
2071:         raise ValueError(
2072:             "Invalid option combination 'sym_pos':False "
2073:             "and 'cholesky':True: Cholesky decomposition is only possible "
2074:             "for symmetric positive definite matrices.")
2075: 
2076:     cholesky = cholesky is None and sym_pos and not sparse and not lstsq
2077: 
2078:     iteration = 0
2079:     complete = False    # will become True if solved in presolve
2080:     undo = []
2081: 
2082:     # Convert lists to numpy arrays, etc...
2083:     c, A_ub, b_ub, A_eq, b_eq, bounds = _clean_inputs(
2084:         c, A_ub, b_ub, A_eq, b_eq, bounds)
2085: 
2086:     # Keep the original arrays to calculate slack/residuals for original
2087:     # problem.
2088:     c_o, A_ub_o, b_ub_o, A_eq_o, b_eq_o = c.copy(
2089:     ), A_ub.copy(), b_ub.copy(), A_eq.copy(), b_eq.copy()
2090: 
2091:     # Solve trivial problem, eliminate variables, tighten bounds, etc...
2092:     c0 = 0  # we might get a constant term in the objective
2093:     if presolve is True:
2094:         (c, c0, A_ub, b_ub, A_eq, b_eq, bounds, x, undo, complete, status,
2095:             message) = _presolve(c, A_ub, b_ub, A_eq, b_eq, bounds, rr)
2096: 
2097:     # If not solved in presolve, solve it
2098:     if not complete:
2099:         # Convert problem to standard form
2100:         A, b, c, c0 = _get_Abc(c, c0, A_ub, b_ub, A_eq, b_eq, bounds, undo)
2101:         # Solve the problem
2102:         x, status, message, iteration = _ip_hsd(A, b, c, c0, alpha0, beta,
2103:                                                 maxiter, disp, tol, sparse,
2104:                                                 lstsq, sym_pos, cholesky,
2105:                                                 pc, ip, permc_spec)
2106: 
2107:     # Eliminate artificial variables, re-introduce presolved variables, etc...
2108:     # need modified bounds here to translate variables appropriately
2109:     x, fun, slack, con, status, message = _postprocess(
2110:         x, c_o, A_ub_o, b_ub_o, A_eq_o, b_eq_o,
2111:         bounds, complete, undo, status, message)
2112: 
2113:     sol = {
2114:         'x': x,
2115:         'fun': fun,
2116:         'slack': slack,
2117:         'con': con,
2118:         'status': status,
2119:         'message': message,
2120:         'nit': iteration,
2121:         "success": status == 0}
2122: 
2123:     return OptimizeResult(sol)
2124: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

str_192668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3, (-1)), 'str', '\nAn interior-point method for linear programming.\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 7, 0))

# 'import numpy' statement (line 7)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_192669 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'numpy')

if (type(import_192669) is not StypyTypeError):

    if (import_192669 != 'pyd_module'):
        __import__(import_192669)
        sys_modules_192670 = sys.modules[import_192669]
        import_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'np', sys_modules_192670.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 7)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7, 0), 'numpy', import_192669)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 8, 0))

# 'import scipy' statement (line 8)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_192671 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'scipy')

if (type(import_192671) is not StypyTypeError):

    if (import_192671 != 'pyd_module'):
        __import__(import_192671)
        sys_modules_192672 = sys.modules[import_192671]
        import_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'sp', sys_modules_192672.module_type_store, module_type_store)
    else:
        import scipy as sp

        import_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'sp', scipy, module_type_store)

else:
    # Assigning a type to the variable 'scipy' (line 8)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 8, 0), 'scipy', import_192671)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 9, 0))

# 'import scipy.sparse' statement (line 9)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_192673 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'scipy.sparse')

if (type(import_192673) is not StypyTypeError):

    if (import_192673 != 'pyd_module'):
        __import__(import_192673)
        sys_modules_192674 = sys.modules[import_192673]
        import_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'sps', sys_modules_192674.module_type_store, module_type_store)
    else:
        import scipy.sparse as sps

        import_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'sps', scipy.sparse, module_type_store)

else:
    # Assigning a type to the variable 'scipy.sparse' (line 9)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 9, 0), 'scipy.sparse', import_192673)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 10, 0))

# 'from warnings import warn' statement (line 10)
try:
    from warnings import warn

except:
    warn = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'warnings', None, module_type_store, ['warn'], [warn])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 11, 0))

# 'from scipy.linalg import LinAlgError' statement (line 11)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_192675 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'scipy.linalg')

if (type(import_192675) is not StypyTypeError):

    if (import_192675 != 'pyd_module'):
        __import__(import_192675)
        sys_modules_192676 = sys.modules[import_192675]
        import_from_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'scipy.linalg', sys_modules_192676.module_type_store, module_type_store, ['LinAlgError'])
        nest_module(stypy.reporting.localization.Localization(__file__, 11, 0), __file__, sys_modules_192676, sys_modules_192676.module_type_store, module_type_store)
    else:
        from scipy.linalg import LinAlgError

        import_from_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'scipy.linalg', None, module_type_store, ['LinAlgError'], [LinAlgError])

else:
    # Assigning a type to the variable 'scipy.linalg' (line 11)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 11, 0), 'scipy.linalg', import_192675)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 12, 0))

# 'from scipy.optimize.optimize import OptimizeResult, OptimizeWarning, _check_unknown_options' statement (line 12)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_192677 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'scipy.optimize.optimize')

if (type(import_192677) is not StypyTypeError):

    if (import_192677 != 'pyd_module'):
        __import__(import_192677)
        sys_modules_192678 = sys.modules[import_192677]
        import_from_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'scipy.optimize.optimize', sys_modules_192678.module_type_store, module_type_store, ['OptimizeResult', 'OptimizeWarning', '_check_unknown_options'])
        nest_module(stypy.reporting.localization.Localization(__file__, 12, 0), __file__, sys_modules_192678, sys_modules_192678.module_type_store, module_type_store)
    else:
        from scipy.optimize.optimize import OptimizeResult, OptimizeWarning, _check_unknown_options

        import_from_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'scipy.optimize.optimize', None, module_type_store, ['OptimizeResult', 'OptimizeWarning', '_check_unknown_options'], [OptimizeResult, OptimizeWarning, _check_unknown_options])

else:
    # Assigning a type to the variable 'scipy.optimize.optimize' (line 12)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 12, 0), 'scipy.optimize.optimize', import_192677)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 13, 0))

# 'from scipy.optimize._remove_redundancy import _remove_redundancy' statement (line 13)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_192679 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'scipy.optimize._remove_redundancy')

if (type(import_192679) is not StypyTypeError):

    if (import_192679 != 'pyd_module'):
        __import__(import_192679)
        sys_modules_192680 = sys.modules[import_192679]
        import_from_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'scipy.optimize._remove_redundancy', sys_modules_192680.module_type_store, module_type_store, ['_remove_redundancy'])
        nest_module(stypy.reporting.localization.Localization(__file__, 13, 0), __file__, sys_modules_192680, sys_modules_192680.module_type_store, module_type_store)
    else:
        from scipy.optimize._remove_redundancy import _remove_redundancy

        import_from_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'scipy.optimize._remove_redundancy', None, module_type_store, ['_remove_redundancy'], [_remove_redundancy])

else:
    # Assigning a type to the variable 'scipy.optimize._remove_redundancy' (line 13)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 13, 0), 'scipy.optimize._remove_redundancy', import_192679)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'from scipy.optimize._remove_redundancy import _remove_redundancy_sparse' statement (line 14)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_192681 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy.optimize._remove_redundancy')

if (type(import_192681) is not StypyTypeError):

    if (import_192681 != 'pyd_module'):
        __import__(import_192681)
        sys_modules_192682 = sys.modules[import_192681]
        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy.optimize._remove_redundancy', sys_modules_192682.module_type_store, module_type_store, ['_remove_redundancy_sparse'])
        nest_module(stypy.reporting.localization.Localization(__file__, 14, 0), __file__, sys_modules_192682, sys_modules_192682.module_type_store, module_type_store)
    else:
        from scipy.optimize._remove_redundancy import _remove_redundancy_sparse

        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy.optimize._remove_redundancy', None, module_type_store, ['_remove_redundancy_sparse'], [_remove_redundancy_sparse])

else:
    # Assigning a type to the variable 'scipy.optimize._remove_redundancy' (line 14)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy.optimize._remove_redundancy', import_192681)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 15, 0))

# 'from scipy.optimize._remove_redundancy import _remove_redundancy_dense' statement (line 15)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/optimize/')
import_192683 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'scipy.optimize._remove_redundancy')

if (type(import_192683) is not StypyTypeError):

    if (import_192683 != 'pyd_module'):
        __import__(import_192683)
        sys_modules_192684 = sys.modules[import_192683]
        import_from_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'scipy.optimize._remove_redundancy', sys_modules_192684.module_type_store, module_type_store, ['_remove_redundancy_dense'])
        nest_module(stypy.reporting.localization.Localization(__file__, 15, 0), __file__, sys_modules_192684, sys_modules_192684.module_type_store, module_type_store)
    else:
        from scipy.optimize._remove_redundancy import _remove_redundancy_dense

        import_from_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'scipy.optimize._remove_redundancy', None, module_type_store, ['_remove_redundancy_dense'], [_remove_redundancy_dense])

else:
    # Assigning a type to the variable 'scipy.optimize._remove_redundancy' (line 15)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 15, 0), 'scipy.optimize._remove_redundancy', import_192683)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/optimize/')


@norecursion
def _clean_inputs(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 20)
    None_192685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 20, 13), 'None')
    # Getting the type of 'None' (line 21)
    None_192686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 21, 13), 'None')
    # Getting the type of 'None' (line 22)
    None_192687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 22, 13), 'None')
    # Getting the type of 'None' (line 23)
    None_192688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 23, 13), 'None')
    # Getting the type of 'None' (line 24)
    None_192689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 24, 15), 'None')
    defaults = [None_192685, None_192686, None_192687, None_192688, None_192689]
    # Create a new context for function '_clean_inputs'
    module_type_store = module_type_store.open_function_context('_clean_inputs', 18, 0, False)
    
    # Passed parameters checking function
    _clean_inputs.stypy_localization = localization
    _clean_inputs.stypy_type_of_self = None
    _clean_inputs.stypy_type_store = module_type_store
    _clean_inputs.stypy_function_name = '_clean_inputs'
    _clean_inputs.stypy_param_names_list = ['c', 'A_ub', 'b_ub', 'A_eq', 'b_eq', 'bounds']
    _clean_inputs.stypy_varargs_param_name = None
    _clean_inputs.stypy_kwargs_param_name = None
    _clean_inputs.stypy_call_defaults = defaults
    _clean_inputs.stypy_call_varargs = varargs
    _clean_inputs.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_clean_inputs', ['c', 'A_ub', 'b_ub', 'A_eq', 'b_eq', 'bounds'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_clean_inputs', localization, ['c', 'A_ub', 'b_ub', 'A_eq', 'b_eq', 'bounds'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_clean_inputs(...)' code ##################

    str_192690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 76, (-1)), 'str', '\n    Given user inputs for a linear programming problem, return the\n    objective vector, upper bound constraints, equality constraints,\n    and simple bounds in a preferred format.\n\n    Parameters\n    ----------\n    c : array_like\n        Coefficients of the linear objective function to be minimized.\n    A_ub : array_like, optional\n        2-D array which, when matrix-multiplied by ``x``, gives the values of\n        the upper-bound inequality constraints at ``x``.\n    b_ub : array_like, optional\n        1-D array of values representing the upper-bound of each inequality\n        constraint (row) in ``A_ub``.\n    A_eq : array_like, optional\n        2-D array which, when matrix-multiplied by ``x``, gives the values of\n        the equality constraints at ``x``.\n    b_eq : array_like, optional\n        1-D array of values representing the RHS of each equality constraint\n        (row) in ``A_eq``.\n    bounds : sequence, optional\n        ``(min, max)`` pairs for each element in ``x``, defining\n        the bounds on that parameter. Use None for one of ``min`` or\n        ``max`` when there is no bound in that direction. By default\n        bounds are ``(0, None)`` (non-negative)\n        If a sequence containing a single tuple is provided, then ``min`` and\n        ``max`` will be applied to all variables in the problem.\n\n    Returns\n    -------\n    c : 1-D array\n        Coefficients of the linear objective function to be minimized.\n    A_ub : 2-D array\n        2-D array which, when matrix-multiplied by ``x``, gives the values of\n        the upper-bound inequality constraints at ``x``.\n    b_ub : 1-D array\n        1-D array of values representing the upper-bound of each inequality\n        constraint (row) in ``A_ub``.\n    A_eq : 2-D array\n        2-D array which, when matrix-multiplied by ``x``, gives the values of\n        the equality constraints at ``x``.\n    b_eq : 1-D array\n        1-D array of values representing the RHS of each equality constraint\n        (row) in ``A_eq``.\n    bounds : sequence of tuples\n        ``(min, max)`` pairs for each element in ``x``, defining\n        the bounds on that parameter. Use None for each of ``min`` or\n        ``max`` when there is no bound in that direction. By default\n        bounds are ``(0, None)`` (non-negative)\n\n    ')
    
    
    # SSA begins for try-except statement (line 78)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Type idiom detected: calculating its left and rigth part (line 79)
    # Getting the type of 'c' (line 79)
    c_192691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 79, 11), 'c')
    # Getting the type of 'None' (line 79)
    None_192692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 79, 16), 'None')
    
    (may_be_192693, more_types_in_union_192694) = may_be_none(c_192691, None_192692)

    if may_be_192693:

        if more_types_in_union_192694:
            # Runtime conditional SSA (line 79)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Getting the type of 'TypeError' (line 80)
        TypeError_192695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 18), 'TypeError')
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 80, 12), TypeError_192695, 'raise parameter', BaseException)

        if more_types_in_union_192694:
            # SSA join for if statement (line 79)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # SSA begins for try-except statement (line 81)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 82):
    
    # Assigning a Call to a Name (line 82):
    
    # Call to squeeze(...): (line 82)
    # Processing the call keyword arguments (line 82)
    kwargs_192707 = {}
    
    # Call to copy(...): (line 82)
    # Processing the call keyword arguments (line 82)
    kwargs_192704 = {}
    
    # Call to asarray(...): (line 82)
    # Processing the call arguments (line 82)
    # Getting the type of 'c' (line 82)
    c_192698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 27), 'c', False)
    # Processing the call keyword arguments (line 82)
    # Getting the type of 'float' (line 82)
    float_192699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 36), 'float', False)
    keyword_192700 = float_192699
    kwargs_192701 = {'dtype': keyword_192700}
    # Getting the type of 'np' (line 82)
    np_192696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 16), 'np', False)
    # Obtaining the member 'asarray' of a type (line 82)
    asarray_192697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 82, 16), np_192696, 'asarray')
    # Calling asarray(args, kwargs) (line 82)
    asarray_call_result_192702 = invoke(stypy.reporting.localization.Localization(__file__, 82, 16), asarray_192697, *[c_192698], **kwargs_192701)
    
    # Obtaining the member 'copy' of a type (line 82)
    copy_192703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 82, 16), asarray_call_result_192702, 'copy')
    # Calling copy(args, kwargs) (line 82)
    copy_call_result_192705 = invoke(stypy.reporting.localization.Localization(__file__, 82, 16), copy_192703, *[], **kwargs_192704)
    
    # Obtaining the member 'squeeze' of a type (line 82)
    squeeze_192706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 82, 16), copy_call_result_192705, 'squeeze')
    # Calling squeeze(args, kwargs) (line 82)
    squeeze_call_result_192708 = invoke(stypy.reporting.localization.Localization(__file__, 82, 16), squeeze_192706, *[], **kwargs_192707)
    
    # Assigning a type to the variable 'c' (line 82)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 82, 12), 'c', squeeze_call_result_192708)
    # SSA branch for the except part of a try statement (line 81)
    # SSA branch for the except 'BaseException' branch of a try statement (line 81)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'TypeError' (line 84)
    TypeError_192709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 18), 'TypeError')
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 84, 12), TypeError_192709, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 81)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'c' (line 85)
    c_192710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 11), 'c')
    # Obtaining the member 'size' of a type (line 85)
    size_192711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 85, 11), c_192710, 'size')
    int_192712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 21), 'int')
    # Applying the binary operator '==' (line 85)
    result_eq_192713 = python_operator(stypy.reporting.localization.Localization(__file__, 85, 11), '==', size_192711, int_192712)
    
    # Testing the type of an if condition (line 85)
    if_condition_192714 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 85, 8), result_eq_192713)
    # Assigning a type to the variable 'if_condition_192714' (line 85)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 85, 8), 'if_condition_192714', if_condition_192714)
    # SSA begins for if statement (line 85)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 86):
    
    # Assigning a Call to a Name (line 86):
    
    # Call to reshape(...): (line 86)
    # Processing the call arguments (line 86)
    int_192717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 86, 27), 'int')
    # Processing the call keyword arguments (line 86)
    kwargs_192718 = {}
    # Getting the type of 'c' (line 86)
    c_192715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 16), 'c', False)
    # Obtaining the member 'reshape' of a type (line 86)
    reshape_192716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 86, 16), c_192715, 'reshape')
    # Calling reshape(args, kwargs) (line 86)
    reshape_call_result_192719 = invoke(stypy.reporting.localization.Localization(__file__, 86, 16), reshape_192716, *[int_192717], **kwargs_192718)
    
    # Assigning a type to the variable 'c' (line 86)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 86, 12), 'c', reshape_call_result_192719)
    # SSA join for if statement (line 85)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 87):
    
    # Assigning a Call to a Name (line 87):
    
    # Call to len(...): (line 87)
    # Processing the call arguments (line 87)
    # Getting the type of 'c' (line 87)
    c_192721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 87, 18), 'c', False)
    # Processing the call keyword arguments (line 87)
    kwargs_192722 = {}
    # Getting the type of 'len' (line 87)
    len_192720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 87, 14), 'len', False)
    # Calling len(args, kwargs) (line 87)
    len_call_result_192723 = invoke(stypy.reporting.localization.Localization(__file__, 87, 14), len_192720, *[c_192721], **kwargs_192722)
    
    # Assigning a type to the variable 'n_x' (line 87)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 87, 8), 'n_x', len_call_result_192723)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'n_x' (line 88)
    n_x_192724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 88, 11), 'n_x')
    int_192725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 88, 18), 'int')
    # Applying the binary operator '==' (line 88)
    result_eq_192726 = python_operator(stypy.reporting.localization.Localization(__file__, 88, 11), '==', n_x_192724, int_192725)
    
    
    
    # Call to len(...): (line 88)
    # Processing the call arguments (line 88)
    # Getting the type of 'c' (line 88)
    c_192728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 88, 27), 'c', False)
    # Obtaining the member 'shape' of a type (line 88)
    shape_192729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 88, 27), c_192728, 'shape')
    # Processing the call keyword arguments (line 88)
    kwargs_192730 = {}
    # Getting the type of 'len' (line 88)
    len_192727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 88, 23), 'len', False)
    # Calling len(args, kwargs) (line 88)
    len_call_result_192731 = invoke(stypy.reporting.localization.Localization(__file__, 88, 23), len_192727, *[shape_192729], **kwargs_192730)
    
    int_192732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 88, 39), 'int')
    # Applying the binary operator '!=' (line 88)
    result_ne_192733 = python_operator(stypy.reporting.localization.Localization(__file__, 88, 23), '!=', len_call_result_192731, int_192732)
    
    # Applying the binary operator 'or' (line 88)
    result_or_keyword_192734 = python_operator(stypy.reporting.localization.Localization(__file__, 88, 11), 'or', result_eq_192726, result_ne_192733)
    
    # Testing the type of an if condition (line 88)
    if_condition_192735 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 88, 8), result_or_keyword_192734)
    # Assigning a type to the variable 'if_condition_192735' (line 88)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 88, 8), 'if_condition_192735', if_condition_192735)
    # SSA begins for if statement (line 88)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 89)
    # Processing the call arguments (line 89)
    str_192737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 90, 16), 'str', 'Invalid input for linprog: c should be a 1D array; it must not have more than one non-singleton dimension')
    # Processing the call keyword arguments (line 89)
    kwargs_192738 = {}
    # Getting the type of 'ValueError' (line 89)
    ValueError_192736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 89)
    ValueError_call_result_192739 = invoke(stypy.reporting.localization.Localization(__file__, 89, 18), ValueError_192736, *[str_192737], **kwargs_192738)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 89, 12), ValueError_call_result_192739, 'raise parameter', BaseException)
    # SSA join for if statement (line 88)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to all(...): (line 92)
    # Processing the call keyword arguments (line 92)
    kwargs_192746 = {}
    
    # Call to isfinite(...): (line 92)
    # Processing the call arguments (line 92)
    # Getting the type of 'c' (line 92)
    c_192742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 27), 'c', False)
    # Processing the call keyword arguments (line 92)
    kwargs_192743 = {}
    # Getting the type of 'np' (line 92)
    np_192740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 15), 'np', False)
    # Obtaining the member 'isfinite' of a type (line 92)
    isfinite_192741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 92, 15), np_192740, 'isfinite')
    # Calling isfinite(args, kwargs) (line 92)
    isfinite_call_result_192744 = invoke(stypy.reporting.localization.Localization(__file__, 92, 15), isfinite_192741, *[c_192742], **kwargs_192743)
    
    # Obtaining the member 'all' of a type (line 92)
    all_192745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 92, 15), isfinite_call_result_192744, 'all')
    # Calling all(args, kwargs) (line 92)
    all_call_result_192747 = invoke(stypy.reporting.localization.Localization(__file__, 92, 15), all_192745, *[], **kwargs_192746)
    
    # Applying the 'not' unary operator (line 92)
    result_not__192748 = python_operator(stypy.reporting.localization.Localization(__file__, 92, 11), 'not', all_call_result_192747)
    
    # Testing the type of an if condition (line 92)
    if_condition_192749 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 92, 8), result_not__192748)
    # Assigning a type to the variable 'if_condition_192749' (line 92)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 92, 8), 'if_condition_192749', if_condition_192749)
    # SSA begins for if statement (line 92)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 93)
    # Processing the call arguments (line 93)
    str_192751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 16), 'str', 'Invalid input for linprog: c must not contain values inf, nan, or None')
    # Processing the call keyword arguments (line 93)
    kwargs_192752 = {}
    # Getting the type of 'ValueError' (line 93)
    ValueError_192750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 93)
    ValueError_call_result_192753 = invoke(stypy.reporting.localization.Localization(__file__, 93, 18), ValueError_192750, *[str_192751], **kwargs_192752)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 93, 12), ValueError_call_result_192753, 'raise parameter', BaseException)
    # SSA join for if statement (line 92)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 78)
    # SSA branch for the except 'TypeError' branch of a try statement (line 78)
    module_type_store.open_ssa_branch('except')
    
    # Call to TypeError(...): (line 97)
    # Processing the call arguments (line 97)
    str_192755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 12), 'str', 'Invalid input for linprog: c must be a 1D array of numerical coefficients')
    # Processing the call keyword arguments (line 97)
    kwargs_192756 = {}
    # Getting the type of 'TypeError' (line 97)
    TypeError_192754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 97)
    TypeError_call_result_192757 = invoke(stypy.reporting.localization.Localization(__file__, 97, 14), TypeError_192754, *[str_192755], **kwargs_192756)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 97, 8), TypeError_call_result_192757, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 78)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 101)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    
    # SSA begins for try-except statement (line 102)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    
    # Evaluating a boolean operation
    
    # Call to issparse(...): (line 103)
    # Processing the call arguments (line 103)
    # Getting the type of 'A_eq' (line 103)
    A_eq_192760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 28), 'A_eq', False)
    # Processing the call keyword arguments (line 103)
    kwargs_192761 = {}
    # Getting the type of 'sps' (line 103)
    sps_192758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 15), 'sps', False)
    # Obtaining the member 'issparse' of a type (line 103)
    issparse_192759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 103, 15), sps_192758, 'issparse')
    # Calling issparse(args, kwargs) (line 103)
    issparse_call_result_192762 = invoke(stypy.reporting.localization.Localization(__file__, 103, 15), issparse_192759, *[A_eq_192760], **kwargs_192761)
    
    
    # Call to issparse(...): (line 103)
    # Processing the call arguments (line 103)
    # Getting the type of 'A_ub' (line 103)
    A_ub_192765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 50), 'A_ub', False)
    # Processing the call keyword arguments (line 103)
    kwargs_192766 = {}
    # Getting the type of 'sps' (line 103)
    sps_192763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 37), 'sps', False)
    # Obtaining the member 'issparse' of a type (line 103)
    issparse_192764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 103, 37), sps_192763, 'issparse')
    # Calling issparse(args, kwargs) (line 103)
    issparse_call_result_192767 = invoke(stypy.reporting.localization.Localization(__file__, 103, 37), issparse_192764, *[A_ub_192765], **kwargs_192766)
    
    # Applying the binary operator 'or' (line 103)
    result_or_keyword_192768 = python_operator(stypy.reporting.localization.Localization(__file__, 103, 15), 'or', issparse_call_result_192762, issparse_call_result_192767)
    
    # Testing the type of an if condition (line 103)
    if_condition_192769 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 103, 12), result_or_keyword_192768)
    # Assigning a type to the variable 'if_condition_192769' (line 103)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 103, 12), 'if_condition_192769', if_condition_192769)
    # SSA begins for if statement (line 103)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a IfExp to a Name (line 104):
    
    # Assigning a IfExp to a Name (line 104):
    
    
    # Getting the type of 'A_ub' (line 105)
    A_ub_192770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 46), 'A_ub')
    # Getting the type of 'None' (line 105)
    None_192771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 54), 'None')
    # Applying the binary operator 'is' (line 105)
    result_is__192772 = python_operator(stypy.reporting.localization.Localization(__file__, 105, 46), 'is', A_ub_192770, None_192771)
    
    # Testing the type of an if expression (line 104)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 104, 23), result_is__192772)
    # SSA begins for if expression (line 104)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    
    # Call to coo_matrix(...): (line 104)
    # Processing the call arguments (line 104)
    
    # Obtaining an instance of the builtin type 'tuple' (line 105)
    tuple_192775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 105)
    # Adding element type (line 105)
    int_192776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 21), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 105, 21), tuple_192775, int_192776)
    # Adding element type (line 105)
    # Getting the type of 'n_x' (line 105)
    n_x_192777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 24), 'n_x', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 105, 21), tuple_192775, n_x_192777)
    
    # Processing the call keyword arguments (line 104)
    # Getting the type of 'float' (line 105)
    float_192778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 36), 'float', False)
    keyword_192779 = float_192778
    kwargs_192780 = {'dtype': keyword_192779}
    # Getting the type of 'sps' (line 104)
    sps_192773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 23), 'sps', False)
    # Obtaining the member 'coo_matrix' of a type (line 104)
    coo_matrix_192774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 104, 23), sps_192773, 'coo_matrix')
    # Calling coo_matrix(args, kwargs) (line 104)
    coo_matrix_call_result_192781 = invoke(stypy.reporting.localization.Localization(__file__, 104, 23), coo_matrix_192774, *[tuple_192775], **kwargs_192780)
    
    # SSA branch for the else part of an if expression (line 104)
    module_type_store.open_ssa_branch('if expression else')
    
    # Call to copy(...): (line 105)
    # Processing the call keyword arguments (line 105)
    kwargs_192790 = {}
    
    # Call to coo_matrix(...): (line 105)
    # Processing the call arguments (line 105)
    # Getting the type of 'A_ub' (line 106)
    A_ub_192784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 20), 'A_ub', False)
    # Processing the call keyword arguments (line 105)
    # Getting the type of 'float' (line 106)
    float_192785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 32), 'float', False)
    keyword_192786 = float_192785
    kwargs_192787 = {'dtype': keyword_192786}
    # Getting the type of 'sps' (line 105)
    sps_192782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 64), 'sps', False)
    # Obtaining the member 'coo_matrix' of a type (line 105)
    coo_matrix_192783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 105, 64), sps_192782, 'coo_matrix')
    # Calling coo_matrix(args, kwargs) (line 105)
    coo_matrix_call_result_192788 = invoke(stypy.reporting.localization.Localization(__file__, 105, 64), coo_matrix_192783, *[A_ub_192784], **kwargs_192787)
    
    # Obtaining the member 'copy' of a type (line 105)
    copy_192789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 105, 64), coo_matrix_call_result_192788, 'copy')
    # Calling copy(args, kwargs) (line 105)
    copy_call_result_192791 = invoke(stypy.reporting.localization.Localization(__file__, 105, 64), copy_192789, *[], **kwargs_192790)
    
    # SSA join for if expression (line 104)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_192792 = union_type.UnionType.add(coo_matrix_call_result_192781, copy_call_result_192791)
    
    # Assigning a type to the variable 'A_ub' (line 104)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 16), 'A_ub', if_exp_192792)
    # SSA branch for the else part of an if statement (line 103)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a IfExp to a Name (line 108):
    
    # Assigning a IfExp to a Name (line 108):
    
    
    # Getting the type of 'A_ub' (line 109)
    A_ub_192793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 46), 'A_ub')
    # Getting the type of 'None' (line 109)
    None_192794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 54), 'None')
    # Applying the binary operator 'is' (line 109)
    result_is__192795 = python_operator(stypy.reporting.localization.Localization(__file__, 109, 46), 'is', A_ub_192793, None_192794)
    
    # Testing the type of an if expression (line 108)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 108, 23), result_is__192795)
    # SSA begins for if expression (line 108)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    
    # Call to zeros(...): (line 108)
    # Processing the call arguments (line 108)
    
    # Obtaining an instance of the builtin type 'tuple' (line 109)
    tuple_192798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 109, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 109)
    # Adding element type (line 109)
    int_192799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 109, 21), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 109, 21), tuple_192798, int_192799)
    # Adding element type (line 109)
    # Getting the type of 'n_x' (line 109)
    n_x_192800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 24), 'n_x', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 109, 21), tuple_192798, n_x_192800)
    
    # Processing the call keyword arguments (line 108)
    # Getting the type of 'float' (line 109)
    float_192801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 36), 'float', False)
    keyword_192802 = float_192801
    kwargs_192803 = {'dtype': keyword_192802}
    # Getting the type of 'np' (line 108)
    np_192796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 23), 'np', False)
    # Obtaining the member 'zeros' of a type (line 108)
    zeros_192797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 108, 23), np_192796, 'zeros')
    # Calling zeros(args, kwargs) (line 108)
    zeros_call_result_192804 = invoke(stypy.reporting.localization.Localization(__file__, 108, 23), zeros_192797, *[tuple_192798], **kwargs_192803)
    
    # SSA branch for the else part of an if expression (line 108)
    module_type_store.open_ssa_branch('if expression else')
    
    # Call to copy(...): (line 109)
    # Processing the call keyword arguments (line 109)
    kwargs_192813 = {}
    
    # Call to asarray(...): (line 109)
    # Processing the call arguments (line 109)
    # Getting the type of 'A_ub' (line 110)
    A_ub_192807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 20), 'A_ub', False)
    # Processing the call keyword arguments (line 109)
    # Getting the type of 'float' (line 110)
    float_192808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 32), 'float', False)
    keyword_192809 = float_192808
    kwargs_192810 = {'dtype': keyword_192809}
    # Getting the type of 'np' (line 109)
    np_192805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 64), 'np', False)
    # Obtaining the member 'asarray' of a type (line 109)
    asarray_192806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 109, 64), np_192805, 'asarray')
    # Calling asarray(args, kwargs) (line 109)
    asarray_call_result_192811 = invoke(stypy.reporting.localization.Localization(__file__, 109, 64), asarray_192806, *[A_ub_192807], **kwargs_192810)
    
    # Obtaining the member 'copy' of a type (line 109)
    copy_192812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 109, 64), asarray_call_result_192811, 'copy')
    # Calling copy(args, kwargs) (line 109)
    copy_call_result_192814 = invoke(stypy.reporting.localization.Localization(__file__, 109, 64), copy_192812, *[], **kwargs_192813)
    
    # SSA join for if expression (line 108)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_192815 = union_type.UnionType.add(zeros_call_result_192804, copy_call_result_192814)
    
    # Assigning a type to the variable 'A_ub' (line 108)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 108, 16), 'A_ub', if_exp_192815)
    # SSA join for if statement (line 103)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 102)
    # SSA branch for the except 'BaseException' branch of a try statement (line 102)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'TypeError' (line 112)
    TypeError_192816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 18), 'TypeError')
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 112, 12), TypeError_192816, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 102)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 113):
    
    # Assigning a Subscript to a Name (line 113):
    
    # Obtaining the type of the subscript
    int_192817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 113, 26), 'int')
    # Getting the type of 'A_ub' (line 113)
    A_ub_192818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 15), 'A_ub')
    # Obtaining the member 'shape' of a type (line 113)
    shape_192819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 113, 15), A_ub_192818, 'shape')
    # Obtaining the member '__getitem__' of a type (line 113)
    getitem___192820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 113, 15), shape_192819, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 113)
    subscript_call_result_192821 = invoke(stypy.reporting.localization.Localization(__file__, 113, 15), getitem___192820, int_192817)
    
    # Assigning a type to the variable 'n_ub' (line 113)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 8), 'n_ub', subscript_call_result_192821)
    
    
    # Evaluating a boolean operation
    
    
    # Call to len(...): (line 114)
    # Processing the call arguments (line 114)
    # Getting the type of 'A_ub' (line 114)
    A_ub_192823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 15), 'A_ub', False)
    # Obtaining the member 'shape' of a type (line 114)
    shape_192824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 114, 15), A_ub_192823, 'shape')
    # Processing the call keyword arguments (line 114)
    kwargs_192825 = {}
    # Getting the type of 'len' (line 114)
    len_192822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 11), 'len', False)
    # Calling len(args, kwargs) (line 114)
    len_call_result_192826 = invoke(stypy.reporting.localization.Localization(__file__, 114, 11), len_192822, *[shape_192824], **kwargs_192825)
    
    int_192827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 114, 30), 'int')
    # Applying the binary operator '!=' (line 114)
    result_ne_192828 = python_operator(stypy.reporting.localization.Localization(__file__, 114, 11), '!=', len_call_result_192826, int_192827)
    
    
    
    # Obtaining the type of the subscript
    int_192829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 114, 46), 'int')
    # Getting the type of 'A_ub' (line 114)
    A_ub_192830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 35), 'A_ub')
    # Obtaining the member 'shape' of a type (line 114)
    shape_192831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 114, 35), A_ub_192830, 'shape')
    # Obtaining the member '__getitem__' of a type (line 114)
    getitem___192832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 114, 35), shape_192831, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 114)
    subscript_call_result_192833 = invoke(stypy.reporting.localization.Localization(__file__, 114, 35), getitem___192832, int_192829)
    
    
    # Call to len(...): (line 114)
    # Processing the call arguments (line 114)
    # Getting the type of 'c' (line 114)
    c_192835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 56), 'c', False)
    # Processing the call keyword arguments (line 114)
    kwargs_192836 = {}
    # Getting the type of 'len' (line 114)
    len_192834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 52), 'len', False)
    # Calling len(args, kwargs) (line 114)
    len_call_result_192837 = invoke(stypy.reporting.localization.Localization(__file__, 114, 52), len_192834, *[c_192835], **kwargs_192836)
    
    # Applying the binary operator '!=' (line 114)
    result_ne_192838 = python_operator(stypy.reporting.localization.Localization(__file__, 114, 35), '!=', subscript_call_result_192833, len_call_result_192837)
    
    # Applying the binary operator 'or' (line 114)
    result_or_keyword_192839 = python_operator(stypy.reporting.localization.Localization(__file__, 114, 11), 'or', result_ne_192828, result_ne_192838)
    
    # Testing the type of an if condition (line 114)
    if_condition_192840 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 114, 8), result_or_keyword_192839)
    # Assigning a type to the variable 'if_condition_192840' (line 114)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 114, 8), 'if_condition_192840', if_condition_192840)
    # SSA begins for if statement (line 114)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 115)
    # Processing the call arguments (line 115)
    str_192842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 116, 16), 'str', 'Invalid input for linprog: A_ub must have exactly two dimensions, and the number of columns in A_ub must be equal to the size of c ')
    # Processing the call keyword arguments (line 115)
    kwargs_192843 = {}
    # Getting the type of 'ValueError' (line 115)
    ValueError_192841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 115)
    ValueError_call_result_192844 = invoke(stypy.reporting.localization.Localization(__file__, 115, 18), ValueError_192841, *[str_192842], **kwargs_192843)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 115, 12), ValueError_call_result_192844, 'raise parameter', BaseException)
    # SSA join for if statement (line 114)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Evaluating a boolean operation
    
    # Call to issparse(...): (line 119)
    # Processing the call arguments (line 119)
    # Getting the type of 'A_ub' (line 119)
    A_ub_192847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 25), 'A_ub', False)
    # Processing the call keyword arguments (line 119)
    kwargs_192848 = {}
    # Getting the type of 'sps' (line 119)
    sps_192845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 12), 'sps', False)
    # Obtaining the member 'issparse' of a type (line 119)
    issparse_192846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 119, 12), sps_192845, 'issparse')
    # Calling issparse(args, kwargs) (line 119)
    issparse_call_result_192849 = invoke(stypy.reporting.localization.Localization(__file__, 119, 12), issparse_192846, *[A_ub_192847], **kwargs_192848)
    
    
    
    # Call to all(...): (line 119)
    # Processing the call keyword arguments (line 119)
    kwargs_192857 = {}
    
    # Call to isfinite(...): (line 119)
    # Processing the call arguments (line 119)
    # Getting the type of 'A_ub' (line 119)
    A_ub_192852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 51), 'A_ub', False)
    # Obtaining the member 'data' of a type (line 119)
    data_192853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 119, 51), A_ub_192852, 'data')
    # Processing the call keyword arguments (line 119)
    kwargs_192854 = {}
    # Getting the type of 'np' (line 119)
    np_192850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 39), 'np', False)
    # Obtaining the member 'isfinite' of a type (line 119)
    isfinite_192851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 119, 39), np_192850, 'isfinite')
    # Calling isfinite(args, kwargs) (line 119)
    isfinite_call_result_192855 = invoke(stypy.reporting.localization.Localization(__file__, 119, 39), isfinite_192851, *[data_192853], **kwargs_192854)
    
    # Obtaining the member 'all' of a type (line 119)
    all_192856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 119, 39), isfinite_call_result_192855, 'all')
    # Calling all(args, kwargs) (line 119)
    all_call_result_192858 = invoke(stypy.reporting.localization.Localization(__file__, 119, 39), all_192856, *[], **kwargs_192857)
    
    # Applying the 'not' unary operator (line 119)
    result_not__192859 = python_operator(stypy.reporting.localization.Localization(__file__, 119, 35), 'not', all_call_result_192858)
    
    # Applying the binary operator 'and' (line 119)
    result_and_keyword_192860 = python_operator(stypy.reporting.localization.Localization(__file__, 119, 12), 'and', issparse_call_result_192849, result_not__192859)
    
    
    # Evaluating a boolean operation
    
    
    # Call to issparse(...): (line 120)
    # Processing the call arguments (line 120)
    # Getting the type of 'A_ub' (line 120)
    A_ub_192863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 36), 'A_ub', False)
    # Processing the call keyword arguments (line 120)
    kwargs_192864 = {}
    # Getting the type of 'sps' (line 120)
    sps_192861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 23), 'sps', False)
    # Obtaining the member 'issparse' of a type (line 120)
    issparse_192862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 120, 23), sps_192861, 'issparse')
    # Calling issparse(args, kwargs) (line 120)
    issparse_call_result_192865 = invoke(stypy.reporting.localization.Localization(__file__, 120, 23), issparse_192862, *[A_ub_192863], **kwargs_192864)
    
    # Applying the 'not' unary operator (line 120)
    result_not__192866 = python_operator(stypy.reporting.localization.Localization(__file__, 120, 19), 'not', issparse_call_result_192865)
    
    
    
    # Call to all(...): (line 120)
    # Processing the call keyword arguments (line 120)
    kwargs_192873 = {}
    
    # Call to isfinite(...): (line 120)
    # Processing the call arguments (line 120)
    # Getting the type of 'A_ub' (line 120)
    A_ub_192869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 62), 'A_ub', False)
    # Processing the call keyword arguments (line 120)
    kwargs_192870 = {}
    # Getting the type of 'np' (line 120)
    np_192867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 50), 'np', False)
    # Obtaining the member 'isfinite' of a type (line 120)
    isfinite_192868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 120, 50), np_192867, 'isfinite')
    # Calling isfinite(args, kwargs) (line 120)
    isfinite_call_result_192871 = invoke(stypy.reporting.localization.Localization(__file__, 120, 50), isfinite_192868, *[A_ub_192869], **kwargs_192870)
    
    # Obtaining the member 'all' of a type (line 120)
    all_192872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 120, 50), isfinite_call_result_192871, 'all')
    # Calling all(args, kwargs) (line 120)
    all_call_result_192874 = invoke(stypy.reporting.localization.Localization(__file__, 120, 50), all_192872, *[], **kwargs_192873)
    
    # Applying the 'not' unary operator (line 120)
    result_not__192875 = python_operator(stypy.reporting.localization.Localization(__file__, 120, 46), 'not', all_call_result_192874)
    
    # Applying the binary operator 'and' (line 120)
    result_and_keyword_192876 = python_operator(stypy.reporting.localization.Localization(__file__, 120, 19), 'and', result_not__192866, result_not__192875)
    
    # Applying the binary operator 'or' (line 119)
    result_or_keyword_192877 = python_operator(stypy.reporting.localization.Localization(__file__, 119, 12), 'or', result_and_keyword_192860, result_and_keyword_192876)
    
    # Testing the type of an if condition (line 119)
    if_condition_192878 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 119, 8), result_or_keyword_192877)
    # Assigning a type to the variable 'if_condition_192878' (line 119)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 119, 8), 'if_condition_192878', if_condition_192878)
    # SSA begins for if statement (line 119)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 121)
    # Processing the call arguments (line 121)
    str_192880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 122, 16), 'str', 'Invalid input for linprog: A_ub must not contain values inf, nan, or None')
    # Processing the call keyword arguments (line 121)
    kwargs_192881 = {}
    # Getting the type of 'ValueError' (line 121)
    ValueError_192879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 121)
    ValueError_call_result_192882 = invoke(stypy.reporting.localization.Localization(__file__, 121, 18), ValueError_192879, *[str_192880], **kwargs_192881)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 121, 12), ValueError_call_result_192882, 'raise parameter', BaseException)
    # SSA join for if statement (line 119)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 101)
    # SSA branch for the except 'TypeError' branch of a try statement (line 101)
    module_type_store.open_ssa_branch('except')
    
    # Call to TypeError(...): (line 125)
    # Processing the call arguments (line 125)
    str_192884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, 12), 'str', 'Invalid input for linprog: A_ub must be a numerical 2D array with each row representing an upper bound inequality constraint')
    # Processing the call keyword arguments (line 125)
    kwargs_192885 = {}
    # Getting the type of 'TypeError' (line 125)
    TypeError_192883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 125)
    TypeError_call_result_192886 = invoke(stypy.reporting.localization.Localization(__file__, 125, 14), TypeError_192883, *[str_192884], **kwargs_192885)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 125, 8), TypeError_call_result_192886, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 101)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 129)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    
    # SSA begins for try-except statement (line 130)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a IfExp to a Name (line 131):
    
    # Assigning a IfExp to a Name (line 131):
    
    
    # Getting the type of 'b_ub' (line 132)
    b_ub_192887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 36), 'b_ub')
    # Getting the type of 'None' (line 132)
    None_192888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 44), 'None')
    # Applying the binary operator 'is' (line 132)
    result_is__192889 = python_operator(stypy.reporting.localization.Localization(__file__, 132, 36), 'is', b_ub_192887, None_192888)
    
    # Testing the type of an if expression (line 131)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 131, 19), result_is__192889)
    # SSA begins for if expression (line 131)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    
    # Call to array(...): (line 131)
    # Processing the call arguments (line 131)
    
    # Obtaining an instance of the builtin type 'list' (line 132)
    list_192892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 132, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 132)
    
    # Processing the call keyword arguments (line 131)
    # Getting the type of 'float' (line 132)
    float_192893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 26), 'float', False)
    keyword_192894 = float_192893
    kwargs_192895 = {'dtype': keyword_192894}
    # Getting the type of 'np' (line 131)
    np_192890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 19), 'np', False)
    # Obtaining the member 'array' of a type (line 131)
    array_192891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 131, 19), np_192890, 'array')
    # Calling array(args, kwargs) (line 131)
    array_call_result_192896 = invoke(stypy.reporting.localization.Localization(__file__, 131, 19), array_192891, *[list_192892], **kwargs_192895)
    
    # SSA branch for the else part of an if expression (line 131)
    module_type_store.open_ssa_branch('if expression else')
    
    # Call to squeeze(...): (line 132)
    # Processing the call keyword arguments (line 132)
    kwargs_192908 = {}
    
    # Call to copy(...): (line 132)
    # Processing the call keyword arguments (line 132)
    kwargs_192905 = {}
    
    # Call to asarray(...): (line 132)
    # Processing the call arguments (line 132)
    # Getting the type of 'b_ub' (line 133)
    b_ub_192899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 16), 'b_ub', False)
    # Processing the call keyword arguments (line 132)
    # Getting the type of 'float' (line 133)
    float_192900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 28), 'float', False)
    keyword_192901 = float_192900
    kwargs_192902 = {'dtype': keyword_192901}
    # Getting the type of 'np' (line 132)
    np_192897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 54), 'np', False)
    # Obtaining the member 'asarray' of a type (line 132)
    asarray_192898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 132, 54), np_192897, 'asarray')
    # Calling asarray(args, kwargs) (line 132)
    asarray_call_result_192903 = invoke(stypy.reporting.localization.Localization(__file__, 132, 54), asarray_192898, *[b_ub_192899], **kwargs_192902)
    
    # Obtaining the member 'copy' of a type (line 132)
    copy_192904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 132, 54), asarray_call_result_192903, 'copy')
    # Calling copy(args, kwargs) (line 132)
    copy_call_result_192906 = invoke(stypy.reporting.localization.Localization(__file__, 132, 54), copy_192904, *[], **kwargs_192905)
    
    # Obtaining the member 'squeeze' of a type (line 132)
    squeeze_192907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 132, 54), copy_call_result_192906, 'squeeze')
    # Calling squeeze(args, kwargs) (line 132)
    squeeze_call_result_192909 = invoke(stypy.reporting.localization.Localization(__file__, 132, 54), squeeze_192907, *[], **kwargs_192908)
    
    # SSA join for if expression (line 131)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_192910 = union_type.UnionType.add(array_call_result_192896, squeeze_call_result_192909)
    
    # Assigning a type to the variable 'b_ub' (line 131)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 131, 12), 'b_ub', if_exp_192910)
    # SSA branch for the except part of a try statement (line 130)
    # SSA branch for the except 'BaseException' branch of a try statement (line 130)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'TypeError' (line 135)
    TypeError_192911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 18), 'TypeError')
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 135, 12), TypeError_192911, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 130)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'b_ub' (line 136)
    b_ub_192912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 11), 'b_ub')
    # Obtaining the member 'size' of a type (line 136)
    size_192913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 136, 11), b_ub_192912, 'size')
    int_192914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 136, 24), 'int')
    # Applying the binary operator '==' (line 136)
    result_eq_192915 = python_operator(stypy.reporting.localization.Localization(__file__, 136, 11), '==', size_192913, int_192914)
    
    # Testing the type of an if condition (line 136)
    if_condition_192916 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 136, 8), result_eq_192915)
    # Assigning a type to the variable 'if_condition_192916' (line 136)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 136, 8), 'if_condition_192916', if_condition_192916)
    # SSA begins for if statement (line 136)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 137):
    
    # Assigning a Call to a Name (line 137):
    
    # Call to reshape(...): (line 137)
    # Processing the call arguments (line 137)
    int_192919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 137, 33), 'int')
    # Processing the call keyword arguments (line 137)
    kwargs_192920 = {}
    # Getting the type of 'b_ub' (line 137)
    b_ub_192917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 19), 'b_ub', False)
    # Obtaining the member 'reshape' of a type (line 137)
    reshape_192918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 137, 19), b_ub_192917, 'reshape')
    # Calling reshape(args, kwargs) (line 137)
    reshape_call_result_192921 = invoke(stypy.reporting.localization.Localization(__file__, 137, 19), reshape_192918, *[int_192919], **kwargs_192920)
    
    # Assigning a type to the variable 'b_ub' (line 137)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 137, 12), 'b_ub', reshape_call_result_192921)
    # SSA join for if statement (line 136)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 138)
    # Processing the call arguments (line 138)
    # Getting the type of 'b_ub' (line 138)
    b_ub_192923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 15), 'b_ub', False)
    # Obtaining the member 'shape' of a type (line 138)
    shape_192924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 138, 15), b_ub_192923, 'shape')
    # Processing the call keyword arguments (line 138)
    kwargs_192925 = {}
    # Getting the type of 'len' (line 138)
    len_192922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 11), 'len', False)
    # Calling len(args, kwargs) (line 138)
    len_call_result_192926 = invoke(stypy.reporting.localization.Localization(__file__, 138, 11), len_192922, *[shape_192924], **kwargs_192925)
    
    int_192927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 138, 30), 'int')
    # Applying the binary operator '!=' (line 138)
    result_ne_192928 = python_operator(stypy.reporting.localization.Localization(__file__, 138, 11), '!=', len_call_result_192926, int_192927)
    
    # Testing the type of an if condition (line 138)
    if_condition_192929 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 138, 8), result_ne_192928)
    # Assigning a type to the variable 'if_condition_192929' (line 138)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 138, 8), 'if_condition_192929', if_condition_192929)
    # SSA begins for if statement (line 138)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 139)
    # Processing the call arguments (line 139)
    str_192931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 140, 16), 'str', 'Invalid input for linprog: b_ub should be a 1D array; it must not have more than one non-singleton dimension')
    # Processing the call keyword arguments (line 139)
    kwargs_192932 = {}
    # Getting the type of 'ValueError' (line 139)
    ValueError_192930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 139)
    ValueError_call_result_192933 = invoke(stypy.reporting.localization.Localization(__file__, 139, 18), ValueError_192930, *[str_192931], **kwargs_192932)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 139, 12), ValueError_call_result_192933, 'raise parameter', BaseException)
    # SSA join for if statement (line 138)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 142)
    # Processing the call arguments (line 142)
    # Getting the type of 'b_ub' (line 142)
    b_ub_192935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 15), 'b_ub', False)
    # Processing the call keyword arguments (line 142)
    kwargs_192936 = {}
    # Getting the type of 'len' (line 142)
    len_192934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 11), 'len', False)
    # Calling len(args, kwargs) (line 142)
    len_call_result_192937 = invoke(stypy.reporting.localization.Localization(__file__, 142, 11), len_192934, *[b_ub_192935], **kwargs_192936)
    
    # Getting the type of 'n_ub' (line 142)
    n_ub_192938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 24), 'n_ub')
    # Applying the binary operator '!=' (line 142)
    result_ne_192939 = python_operator(stypy.reporting.localization.Localization(__file__, 142, 11), '!=', len_call_result_192937, n_ub_192938)
    
    # Testing the type of an if condition (line 142)
    if_condition_192940 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 142, 8), result_ne_192939)
    # Assigning a type to the variable 'if_condition_192940' (line 142)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 142, 8), 'if_condition_192940', if_condition_192940)
    # SSA begins for if statement (line 142)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 143)
    # Processing the call arguments (line 143)
    str_192942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 144, 16), 'str', 'Invalid input for linprog: The number of rows in A_ub must be equal to the number of values in b_ub')
    # Processing the call keyword arguments (line 143)
    kwargs_192943 = {}
    # Getting the type of 'ValueError' (line 143)
    ValueError_192941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 143)
    ValueError_call_result_192944 = invoke(stypy.reporting.localization.Localization(__file__, 143, 18), ValueError_192941, *[str_192942], **kwargs_192943)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 143, 12), ValueError_call_result_192944, 'raise parameter', BaseException)
    # SSA join for if statement (line 142)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to all(...): (line 146)
    # Processing the call keyword arguments (line 146)
    kwargs_192951 = {}
    
    # Call to isfinite(...): (line 146)
    # Processing the call arguments (line 146)
    # Getting the type of 'b_ub' (line 146)
    b_ub_192947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 27), 'b_ub', False)
    # Processing the call keyword arguments (line 146)
    kwargs_192948 = {}
    # Getting the type of 'np' (line 146)
    np_192945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 15), 'np', False)
    # Obtaining the member 'isfinite' of a type (line 146)
    isfinite_192946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 146, 15), np_192945, 'isfinite')
    # Calling isfinite(args, kwargs) (line 146)
    isfinite_call_result_192949 = invoke(stypy.reporting.localization.Localization(__file__, 146, 15), isfinite_192946, *[b_ub_192947], **kwargs_192948)
    
    # Obtaining the member 'all' of a type (line 146)
    all_192950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 146, 15), isfinite_call_result_192949, 'all')
    # Calling all(args, kwargs) (line 146)
    all_call_result_192952 = invoke(stypy.reporting.localization.Localization(__file__, 146, 15), all_192950, *[], **kwargs_192951)
    
    # Applying the 'not' unary operator (line 146)
    result_not__192953 = python_operator(stypy.reporting.localization.Localization(__file__, 146, 11), 'not', all_call_result_192952)
    
    # Testing the type of an if condition (line 146)
    if_condition_192954 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 146, 8), result_not__192953)
    # Assigning a type to the variable 'if_condition_192954' (line 146)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 146, 8), 'if_condition_192954', if_condition_192954)
    # SSA begins for if statement (line 146)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 147)
    # Processing the call arguments (line 147)
    str_192956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 16), 'str', 'Invalid input for linprog: b_ub must not contain values inf, nan, or None')
    # Processing the call keyword arguments (line 147)
    kwargs_192957 = {}
    # Getting the type of 'ValueError' (line 147)
    ValueError_192955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 147)
    ValueError_call_result_192958 = invoke(stypy.reporting.localization.Localization(__file__, 147, 18), ValueError_192955, *[str_192956], **kwargs_192957)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 147, 12), ValueError_call_result_192958, 'raise parameter', BaseException)
    # SSA join for if statement (line 146)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 129)
    # SSA branch for the except 'TypeError' branch of a try statement (line 129)
    module_type_store.open_ssa_branch('except')
    
    # Call to TypeError(...): (line 151)
    # Processing the call arguments (line 151)
    str_192960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 152, 12), 'str', 'Invalid input for linprog: b_ub must be a 1D array of numerical values, each representing the upper bound of an inequality constraint (row) in A_ub')
    # Processing the call keyword arguments (line 151)
    kwargs_192961 = {}
    # Getting the type of 'TypeError' (line 151)
    TypeError_192959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 151)
    TypeError_call_result_192962 = invoke(stypy.reporting.localization.Localization(__file__, 151, 14), TypeError_192959, *[str_192960], **kwargs_192961)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 151, 8), TypeError_call_result_192962, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 129)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 156)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    
    # SSA begins for try-except statement (line 157)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    
    # Evaluating a boolean operation
    
    # Call to issparse(...): (line 158)
    # Processing the call arguments (line 158)
    # Getting the type of 'A_eq' (line 158)
    A_eq_192965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 28), 'A_eq', False)
    # Processing the call keyword arguments (line 158)
    kwargs_192966 = {}
    # Getting the type of 'sps' (line 158)
    sps_192963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 15), 'sps', False)
    # Obtaining the member 'issparse' of a type (line 158)
    issparse_192964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 15), sps_192963, 'issparse')
    # Calling issparse(args, kwargs) (line 158)
    issparse_call_result_192967 = invoke(stypy.reporting.localization.Localization(__file__, 158, 15), issparse_192964, *[A_eq_192965], **kwargs_192966)
    
    
    # Call to issparse(...): (line 158)
    # Processing the call arguments (line 158)
    # Getting the type of 'A_ub' (line 158)
    A_ub_192970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 50), 'A_ub', False)
    # Processing the call keyword arguments (line 158)
    kwargs_192971 = {}
    # Getting the type of 'sps' (line 158)
    sps_192968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 37), 'sps', False)
    # Obtaining the member 'issparse' of a type (line 158)
    issparse_192969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 37), sps_192968, 'issparse')
    # Calling issparse(args, kwargs) (line 158)
    issparse_call_result_192972 = invoke(stypy.reporting.localization.Localization(__file__, 158, 37), issparse_192969, *[A_ub_192970], **kwargs_192971)
    
    # Applying the binary operator 'or' (line 158)
    result_or_keyword_192973 = python_operator(stypy.reporting.localization.Localization(__file__, 158, 15), 'or', issparse_call_result_192967, issparse_call_result_192972)
    
    # Testing the type of an if condition (line 158)
    if_condition_192974 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 158, 12), result_or_keyword_192973)
    # Assigning a type to the variable 'if_condition_192974' (line 158)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 12), 'if_condition_192974', if_condition_192974)
    # SSA begins for if statement (line 158)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a IfExp to a Name (line 159):
    
    # Assigning a IfExp to a Name (line 159):
    
    
    # Getting the type of 'A_eq' (line 160)
    A_eq_192975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 46), 'A_eq')
    # Getting the type of 'None' (line 160)
    None_192976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 54), 'None')
    # Applying the binary operator 'is' (line 160)
    result_is__192977 = python_operator(stypy.reporting.localization.Localization(__file__, 160, 46), 'is', A_eq_192975, None_192976)
    
    # Testing the type of an if expression (line 159)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 159, 23), result_is__192977)
    # SSA begins for if expression (line 159)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    
    # Call to coo_matrix(...): (line 159)
    # Processing the call arguments (line 159)
    
    # Obtaining an instance of the builtin type 'tuple' (line 160)
    tuple_192980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 160)
    # Adding element type (line 160)
    int_192981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, 21), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 160, 21), tuple_192980, int_192981)
    # Adding element type (line 160)
    # Getting the type of 'n_x' (line 160)
    n_x_192982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 24), 'n_x', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 160, 21), tuple_192980, n_x_192982)
    
    # Processing the call keyword arguments (line 159)
    # Getting the type of 'float' (line 160)
    float_192983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 36), 'float', False)
    keyword_192984 = float_192983
    kwargs_192985 = {'dtype': keyword_192984}
    # Getting the type of 'sps' (line 159)
    sps_192978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 23), 'sps', False)
    # Obtaining the member 'coo_matrix' of a type (line 159)
    coo_matrix_192979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 23), sps_192978, 'coo_matrix')
    # Calling coo_matrix(args, kwargs) (line 159)
    coo_matrix_call_result_192986 = invoke(stypy.reporting.localization.Localization(__file__, 159, 23), coo_matrix_192979, *[tuple_192980], **kwargs_192985)
    
    # SSA branch for the else part of an if expression (line 159)
    module_type_store.open_ssa_branch('if expression else')
    
    # Call to copy(...): (line 160)
    # Processing the call keyword arguments (line 160)
    kwargs_192995 = {}
    
    # Call to coo_matrix(...): (line 160)
    # Processing the call arguments (line 160)
    # Getting the type of 'A_eq' (line 161)
    A_eq_192989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 20), 'A_eq', False)
    # Processing the call keyword arguments (line 160)
    # Getting the type of 'float' (line 161)
    float_192990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 32), 'float', False)
    keyword_192991 = float_192990
    kwargs_192992 = {'dtype': keyword_192991}
    # Getting the type of 'sps' (line 160)
    sps_192987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 64), 'sps', False)
    # Obtaining the member 'coo_matrix' of a type (line 160)
    coo_matrix_192988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 160, 64), sps_192987, 'coo_matrix')
    # Calling coo_matrix(args, kwargs) (line 160)
    coo_matrix_call_result_192993 = invoke(stypy.reporting.localization.Localization(__file__, 160, 64), coo_matrix_192988, *[A_eq_192989], **kwargs_192992)
    
    # Obtaining the member 'copy' of a type (line 160)
    copy_192994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 160, 64), coo_matrix_call_result_192993, 'copy')
    # Calling copy(args, kwargs) (line 160)
    copy_call_result_192996 = invoke(stypy.reporting.localization.Localization(__file__, 160, 64), copy_192994, *[], **kwargs_192995)
    
    # SSA join for if expression (line 159)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_192997 = union_type.UnionType.add(coo_matrix_call_result_192986, copy_call_result_192996)
    
    # Assigning a type to the variable 'A_eq' (line 159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 16), 'A_eq', if_exp_192997)
    # SSA branch for the else part of an if statement (line 158)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a IfExp to a Name (line 163):
    
    # Assigning a IfExp to a Name (line 163):
    
    
    # Getting the type of 'A_eq' (line 164)
    A_eq_192998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 46), 'A_eq')
    # Getting the type of 'None' (line 164)
    None_192999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 54), 'None')
    # Applying the binary operator 'is' (line 164)
    result_is__193000 = python_operator(stypy.reporting.localization.Localization(__file__, 164, 46), 'is', A_eq_192998, None_192999)
    
    # Testing the type of an if expression (line 163)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 163, 23), result_is__193000)
    # SSA begins for if expression (line 163)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    
    # Call to zeros(...): (line 163)
    # Processing the call arguments (line 163)
    
    # Obtaining an instance of the builtin type 'tuple' (line 164)
    tuple_193003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 164)
    # Adding element type (line 164)
    int_193004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 21), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 164, 21), tuple_193003, int_193004)
    # Adding element type (line 164)
    # Getting the type of 'n_x' (line 164)
    n_x_193005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 24), 'n_x', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 164, 21), tuple_193003, n_x_193005)
    
    # Processing the call keyword arguments (line 163)
    # Getting the type of 'float' (line 164)
    float_193006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 36), 'float', False)
    keyword_193007 = float_193006
    kwargs_193008 = {'dtype': keyword_193007}
    # Getting the type of 'np' (line 163)
    np_193001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 23), 'np', False)
    # Obtaining the member 'zeros' of a type (line 163)
    zeros_193002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 163, 23), np_193001, 'zeros')
    # Calling zeros(args, kwargs) (line 163)
    zeros_call_result_193009 = invoke(stypy.reporting.localization.Localization(__file__, 163, 23), zeros_193002, *[tuple_193003], **kwargs_193008)
    
    # SSA branch for the else part of an if expression (line 163)
    module_type_store.open_ssa_branch('if expression else')
    
    # Call to copy(...): (line 164)
    # Processing the call keyword arguments (line 164)
    kwargs_193018 = {}
    
    # Call to asarray(...): (line 164)
    # Processing the call arguments (line 164)
    # Getting the type of 'A_eq' (line 165)
    A_eq_193012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 20), 'A_eq', False)
    # Processing the call keyword arguments (line 164)
    # Getting the type of 'float' (line 165)
    float_193013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 32), 'float', False)
    keyword_193014 = float_193013
    kwargs_193015 = {'dtype': keyword_193014}
    # Getting the type of 'np' (line 164)
    np_193010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 64), 'np', False)
    # Obtaining the member 'asarray' of a type (line 164)
    asarray_193011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 164, 64), np_193010, 'asarray')
    # Calling asarray(args, kwargs) (line 164)
    asarray_call_result_193016 = invoke(stypy.reporting.localization.Localization(__file__, 164, 64), asarray_193011, *[A_eq_193012], **kwargs_193015)
    
    # Obtaining the member 'copy' of a type (line 164)
    copy_193017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 164, 64), asarray_call_result_193016, 'copy')
    # Calling copy(args, kwargs) (line 164)
    copy_call_result_193019 = invoke(stypy.reporting.localization.Localization(__file__, 164, 64), copy_193017, *[], **kwargs_193018)
    
    # SSA join for if expression (line 163)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_193020 = union_type.UnionType.add(zeros_call_result_193009, copy_call_result_193019)
    
    # Assigning a type to the variable 'A_eq' (line 163)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 163, 16), 'A_eq', if_exp_193020)
    # SSA join for if statement (line 158)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 157)
    # SSA branch for the except 'BaseException' branch of a try statement (line 157)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'TypeError' (line 167)
    TypeError_193021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 18), 'TypeError')
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 167, 12), TypeError_193021, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 157)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 168):
    
    # Assigning a Subscript to a Name (line 168):
    
    # Obtaining the type of the subscript
    int_193022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 168, 26), 'int')
    # Getting the type of 'A_eq' (line 168)
    A_eq_193023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 15), 'A_eq')
    # Obtaining the member 'shape' of a type (line 168)
    shape_193024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 168, 15), A_eq_193023, 'shape')
    # Obtaining the member '__getitem__' of a type (line 168)
    getitem___193025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 168, 15), shape_193024, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 168)
    subscript_call_result_193026 = invoke(stypy.reporting.localization.Localization(__file__, 168, 15), getitem___193025, int_193022)
    
    # Assigning a type to the variable 'n_eq' (line 168)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 8), 'n_eq', subscript_call_result_193026)
    
    
    # Evaluating a boolean operation
    
    
    # Call to len(...): (line 169)
    # Processing the call arguments (line 169)
    # Getting the type of 'A_eq' (line 169)
    A_eq_193028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 15), 'A_eq', False)
    # Obtaining the member 'shape' of a type (line 169)
    shape_193029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 15), A_eq_193028, 'shape')
    # Processing the call keyword arguments (line 169)
    kwargs_193030 = {}
    # Getting the type of 'len' (line 169)
    len_193027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 11), 'len', False)
    # Calling len(args, kwargs) (line 169)
    len_call_result_193031 = invoke(stypy.reporting.localization.Localization(__file__, 169, 11), len_193027, *[shape_193029], **kwargs_193030)
    
    int_193032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 30), 'int')
    # Applying the binary operator '!=' (line 169)
    result_ne_193033 = python_operator(stypy.reporting.localization.Localization(__file__, 169, 11), '!=', len_call_result_193031, int_193032)
    
    
    
    # Obtaining the type of the subscript
    int_193034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 46), 'int')
    # Getting the type of 'A_eq' (line 169)
    A_eq_193035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 35), 'A_eq')
    # Obtaining the member 'shape' of a type (line 169)
    shape_193036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 35), A_eq_193035, 'shape')
    # Obtaining the member '__getitem__' of a type (line 169)
    getitem___193037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 35), shape_193036, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 169)
    subscript_call_result_193038 = invoke(stypy.reporting.localization.Localization(__file__, 169, 35), getitem___193037, int_193034)
    
    
    # Call to len(...): (line 169)
    # Processing the call arguments (line 169)
    # Getting the type of 'c' (line 169)
    c_193040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 56), 'c', False)
    # Processing the call keyword arguments (line 169)
    kwargs_193041 = {}
    # Getting the type of 'len' (line 169)
    len_193039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 52), 'len', False)
    # Calling len(args, kwargs) (line 169)
    len_call_result_193042 = invoke(stypy.reporting.localization.Localization(__file__, 169, 52), len_193039, *[c_193040], **kwargs_193041)
    
    # Applying the binary operator '!=' (line 169)
    result_ne_193043 = python_operator(stypy.reporting.localization.Localization(__file__, 169, 35), '!=', subscript_call_result_193038, len_call_result_193042)
    
    # Applying the binary operator 'or' (line 169)
    result_or_keyword_193044 = python_operator(stypy.reporting.localization.Localization(__file__, 169, 11), 'or', result_ne_193033, result_ne_193043)
    
    # Testing the type of an if condition (line 169)
    if_condition_193045 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 169, 8), result_or_keyword_193044)
    # Assigning a type to the variable 'if_condition_193045' (line 169)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 8), 'if_condition_193045', if_condition_193045)
    # SSA begins for if statement (line 169)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 170)
    # Processing the call arguments (line 170)
    str_193047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 171, 16), 'str', 'Invalid input for linprog: A_eq must have exactly two dimensions, and the number of columns in A_eq must be equal to the size of c ')
    # Processing the call keyword arguments (line 170)
    kwargs_193048 = {}
    # Getting the type of 'ValueError' (line 170)
    ValueError_193046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 170)
    ValueError_call_result_193049 = invoke(stypy.reporting.localization.Localization(__file__, 170, 18), ValueError_193046, *[str_193047], **kwargs_193048)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 170, 12), ValueError_call_result_193049, 'raise parameter', BaseException)
    # SSA join for if statement (line 169)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Evaluating a boolean operation
    
    # Call to issparse(...): (line 175)
    # Processing the call arguments (line 175)
    # Getting the type of 'A_eq' (line 175)
    A_eq_193052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 25), 'A_eq', False)
    # Processing the call keyword arguments (line 175)
    kwargs_193053 = {}
    # Getting the type of 'sps' (line 175)
    sps_193050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 12), 'sps', False)
    # Obtaining the member 'issparse' of a type (line 175)
    issparse_193051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 175, 12), sps_193050, 'issparse')
    # Calling issparse(args, kwargs) (line 175)
    issparse_call_result_193054 = invoke(stypy.reporting.localization.Localization(__file__, 175, 12), issparse_193051, *[A_eq_193052], **kwargs_193053)
    
    
    
    # Call to all(...): (line 175)
    # Processing the call keyword arguments (line 175)
    kwargs_193062 = {}
    
    # Call to isfinite(...): (line 175)
    # Processing the call arguments (line 175)
    # Getting the type of 'A_eq' (line 175)
    A_eq_193057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 51), 'A_eq', False)
    # Obtaining the member 'data' of a type (line 175)
    data_193058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 175, 51), A_eq_193057, 'data')
    # Processing the call keyword arguments (line 175)
    kwargs_193059 = {}
    # Getting the type of 'np' (line 175)
    np_193055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 39), 'np', False)
    # Obtaining the member 'isfinite' of a type (line 175)
    isfinite_193056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 175, 39), np_193055, 'isfinite')
    # Calling isfinite(args, kwargs) (line 175)
    isfinite_call_result_193060 = invoke(stypy.reporting.localization.Localization(__file__, 175, 39), isfinite_193056, *[data_193058], **kwargs_193059)
    
    # Obtaining the member 'all' of a type (line 175)
    all_193061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 175, 39), isfinite_call_result_193060, 'all')
    # Calling all(args, kwargs) (line 175)
    all_call_result_193063 = invoke(stypy.reporting.localization.Localization(__file__, 175, 39), all_193061, *[], **kwargs_193062)
    
    # Applying the 'not' unary operator (line 175)
    result_not__193064 = python_operator(stypy.reporting.localization.Localization(__file__, 175, 35), 'not', all_call_result_193063)
    
    # Applying the binary operator 'and' (line 175)
    result_and_keyword_193065 = python_operator(stypy.reporting.localization.Localization(__file__, 175, 12), 'and', issparse_call_result_193054, result_not__193064)
    
    
    # Evaluating a boolean operation
    
    
    # Call to issparse(...): (line 176)
    # Processing the call arguments (line 176)
    # Getting the type of 'A_eq' (line 176)
    A_eq_193068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 36), 'A_eq', False)
    # Processing the call keyword arguments (line 176)
    kwargs_193069 = {}
    # Getting the type of 'sps' (line 176)
    sps_193066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 23), 'sps', False)
    # Obtaining the member 'issparse' of a type (line 176)
    issparse_193067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 23), sps_193066, 'issparse')
    # Calling issparse(args, kwargs) (line 176)
    issparse_call_result_193070 = invoke(stypy.reporting.localization.Localization(__file__, 176, 23), issparse_193067, *[A_eq_193068], **kwargs_193069)
    
    # Applying the 'not' unary operator (line 176)
    result_not__193071 = python_operator(stypy.reporting.localization.Localization(__file__, 176, 19), 'not', issparse_call_result_193070)
    
    
    
    # Call to all(...): (line 176)
    # Processing the call keyword arguments (line 176)
    kwargs_193078 = {}
    
    # Call to isfinite(...): (line 176)
    # Processing the call arguments (line 176)
    # Getting the type of 'A_eq' (line 176)
    A_eq_193074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 62), 'A_eq', False)
    # Processing the call keyword arguments (line 176)
    kwargs_193075 = {}
    # Getting the type of 'np' (line 176)
    np_193072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 50), 'np', False)
    # Obtaining the member 'isfinite' of a type (line 176)
    isfinite_193073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 50), np_193072, 'isfinite')
    # Calling isfinite(args, kwargs) (line 176)
    isfinite_call_result_193076 = invoke(stypy.reporting.localization.Localization(__file__, 176, 50), isfinite_193073, *[A_eq_193074], **kwargs_193075)
    
    # Obtaining the member 'all' of a type (line 176)
    all_193077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 50), isfinite_call_result_193076, 'all')
    # Calling all(args, kwargs) (line 176)
    all_call_result_193079 = invoke(stypy.reporting.localization.Localization(__file__, 176, 50), all_193077, *[], **kwargs_193078)
    
    # Applying the 'not' unary operator (line 176)
    result_not__193080 = python_operator(stypy.reporting.localization.Localization(__file__, 176, 46), 'not', all_call_result_193079)
    
    # Applying the binary operator 'and' (line 176)
    result_and_keyword_193081 = python_operator(stypy.reporting.localization.Localization(__file__, 176, 19), 'and', result_not__193071, result_not__193080)
    
    # Applying the binary operator 'or' (line 175)
    result_or_keyword_193082 = python_operator(stypy.reporting.localization.Localization(__file__, 175, 12), 'or', result_and_keyword_193065, result_and_keyword_193081)
    
    # Testing the type of an if condition (line 175)
    if_condition_193083 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 175, 8), result_or_keyword_193082)
    # Assigning a type to the variable 'if_condition_193083' (line 175)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 175, 8), 'if_condition_193083', if_condition_193083)
    # SSA begins for if statement (line 175)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 177)
    # Processing the call arguments (line 177)
    str_193085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 178, 16), 'str', 'Invalid input for linprog: A_eq must not contain values inf, nan, or None')
    # Processing the call keyword arguments (line 177)
    kwargs_193086 = {}
    # Getting the type of 'ValueError' (line 177)
    ValueError_193084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 177)
    ValueError_call_result_193087 = invoke(stypy.reporting.localization.Localization(__file__, 177, 18), ValueError_193084, *[str_193085], **kwargs_193086)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 177, 12), ValueError_call_result_193087, 'raise parameter', BaseException)
    # SSA join for if statement (line 175)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 156)
    # SSA branch for the except 'TypeError' branch of a try statement (line 156)
    module_type_store.open_ssa_branch('except')
    
    # Call to TypeError(...): (line 181)
    # Processing the call arguments (line 181)
    str_193089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 182, 12), 'str', 'Invalid input for linprog: A_eq must be a 2D array with each row representing an equality constraint')
    # Processing the call keyword arguments (line 181)
    kwargs_193090 = {}
    # Getting the type of 'TypeError' (line 181)
    TypeError_193088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 181)
    TypeError_call_result_193091 = invoke(stypy.reporting.localization.Localization(__file__, 181, 14), TypeError_193088, *[str_193089], **kwargs_193090)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 181, 8), TypeError_call_result_193091, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 156)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 185)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    
    # SSA begins for try-except statement (line 186)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a IfExp to a Name (line 187):
    
    # Assigning a IfExp to a Name (line 187):
    
    
    # Getting the type of 'b_eq' (line 188)
    b_eq_193092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 36), 'b_eq')
    # Getting the type of 'None' (line 188)
    None_193093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 44), 'None')
    # Applying the binary operator 'is' (line 188)
    result_is__193094 = python_operator(stypy.reporting.localization.Localization(__file__, 188, 36), 'is', b_eq_193092, None_193093)
    
    # Testing the type of an if expression (line 187)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 187, 19), result_is__193094)
    # SSA begins for if expression (line 187)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    
    # Call to array(...): (line 187)
    # Processing the call arguments (line 187)
    
    # Obtaining an instance of the builtin type 'list' (line 188)
    list_193097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 188)
    
    # Processing the call keyword arguments (line 187)
    # Getting the type of 'float' (line 188)
    float_193098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 26), 'float', False)
    keyword_193099 = float_193098
    kwargs_193100 = {'dtype': keyword_193099}
    # Getting the type of 'np' (line 187)
    np_193095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 19), 'np', False)
    # Obtaining the member 'array' of a type (line 187)
    array_193096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 187, 19), np_193095, 'array')
    # Calling array(args, kwargs) (line 187)
    array_call_result_193101 = invoke(stypy.reporting.localization.Localization(__file__, 187, 19), array_193096, *[list_193097], **kwargs_193100)
    
    # SSA branch for the else part of an if expression (line 187)
    module_type_store.open_ssa_branch('if expression else')
    
    # Call to squeeze(...): (line 188)
    # Processing the call keyword arguments (line 188)
    kwargs_193113 = {}
    
    # Call to copy(...): (line 188)
    # Processing the call keyword arguments (line 188)
    kwargs_193110 = {}
    
    # Call to asarray(...): (line 188)
    # Processing the call arguments (line 188)
    # Getting the type of 'b_eq' (line 189)
    b_eq_193104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 16), 'b_eq', False)
    # Processing the call keyword arguments (line 188)
    # Getting the type of 'float' (line 189)
    float_193105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 28), 'float', False)
    keyword_193106 = float_193105
    kwargs_193107 = {'dtype': keyword_193106}
    # Getting the type of 'np' (line 188)
    np_193102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 54), 'np', False)
    # Obtaining the member 'asarray' of a type (line 188)
    asarray_193103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 54), np_193102, 'asarray')
    # Calling asarray(args, kwargs) (line 188)
    asarray_call_result_193108 = invoke(stypy.reporting.localization.Localization(__file__, 188, 54), asarray_193103, *[b_eq_193104], **kwargs_193107)
    
    # Obtaining the member 'copy' of a type (line 188)
    copy_193109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 54), asarray_call_result_193108, 'copy')
    # Calling copy(args, kwargs) (line 188)
    copy_call_result_193111 = invoke(stypy.reporting.localization.Localization(__file__, 188, 54), copy_193109, *[], **kwargs_193110)
    
    # Obtaining the member 'squeeze' of a type (line 188)
    squeeze_193112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 54), copy_call_result_193111, 'squeeze')
    # Calling squeeze(args, kwargs) (line 188)
    squeeze_call_result_193114 = invoke(stypy.reporting.localization.Localization(__file__, 188, 54), squeeze_193112, *[], **kwargs_193113)
    
    # SSA join for if expression (line 187)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_193115 = union_type.UnionType.add(array_call_result_193101, squeeze_call_result_193114)
    
    # Assigning a type to the variable 'b_eq' (line 187)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 187, 12), 'b_eq', if_exp_193115)
    # SSA branch for the except part of a try statement (line 186)
    # SSA branch for the except 'BaseException' branch of a try statement (line 186)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'TypeError' (line 191)
    TypeError_193116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 18), 'TypeError')
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 191, 12), TypeError_193116, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 186)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'b_eq' (line 192)
    b_eq_193117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 11), 'b_eq')
    # Obtaining the member 'size' of a type (line 192)
    size_193118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 11), b_eq_193117, 'size')
    int_193119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 24), 'int')
    # Applying the binary operator '==' (line 192)
    result_eq_193120 = python_operator(stypy.reporting.localization.Localization(__file__, 192, 11), '==', size_193118, int_193119)
    
    # Testing the type of an if condition (line 192)
    if_condition_193121 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 192, 8), result_eq_193120)
    # Assigning a type to the variable 'if_condition_193121' (line 192)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 192, 8), 'if_condition_193121', if_condition_193121)
    # SSA begins for if statement (line 192)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 193):
    
    # Assigning a Call to a Name (line 193):
    
    # Call to reshape(...): (line 193)
    # Processing the call arguments (line 193)
    int_193124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 33), 'int')
    # Processing the call keyword arguments (line 193)
    kwargs_193125 = {}
    # Getting the type of 'b_eq' (line 193)
    b_eq_193122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 19), 'b_eq', False)
    # Obtaining the member 'reshape' of a type (line 193)
    reshape_193123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 193, 19), b_eq_193122, 'reshape')
    # Calling reshape(args, kwargs) (line 193)
    reshape_call_result_193126 = invoke(stypy.reporting.localization.Localization(__file__, 193, 19), reshape_193123, *[int_193124], **kwargs_193125)
    
    # Assigning a type to the variable 'b_eq' (line 193)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 193, 12), 'b_eq', reshape_call_result_193126)
    # SSA join for if statement (line 192)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 194)
    # Processing the call arguments (line 194)
    # Getting the type of 'b_eq' (line 194)
    b_eq_193128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 15), 'b_eq', False)
    # Obtaining the member 'shape' of a type (line 194)
    shape_193129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 15), b_eq_193128, 'shape')
    # Processing the call keyword arguments (line 194)
    kwargs_193130 = {}
    # Getting the type of 'len' (line 194)
    len_193127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 11), 'len', False)
    # Calling len(args, kwargs) (line 194)
    len_call_result_193131 = invoke(stypy.reporting.localization.Localization(__file__, 194, 11), len_193127, *[shape_193129], **kwargs_193130)
    
    int_193132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, 30), 'int')
    # Applying the binary operator '!=' (line 194)
    result_ne_193133 = python_operator(stypy.reporting.localization.Localization(__file__, 194, 11), '!=', len_call_result_193131, int_193132)
    
    # Testing the type of an if condition (line 194)
    if_condition_193134 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 194, 8), result_ne_193133)
    # Assigning a type to the variable 'if_condition_193134' (line 194)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 194, 8), 'if_condition_193134', if_condition_193134)
    # SSA begins for if statement (line 194)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 195)
    # Processing the call arguments (line 195)
    str_193136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 196, 16), 'str', 'Invalid input for linprog: b_eq should be a 1D array; it must not have more than one non-singleton dimension')
    # Processing the call keyword arguments (line 195)
    kwargs_193137 = {}
    # Getting the type of 'ValueError' (line 195)
    ValueError_193135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 195)
    ValueError_call_result_193138 = invoke(stypy.reporting.localization.Localization(__file__, 195, 18), ValueError_193135, *[str_193136], **kwargs_193137)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 195, 12), ValueError_call_result_193138, 'raise parameter', BaseException)
    # SSA join for if statement (line 194)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 198)
    # Processing the call arguments (line 198)
    # Getting the type of 'b_eq' (line 198)
    b_eq_193140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 15), 'b_eq', False)
    # Processing the call keyword arguments (line 198)
    kwargs_193141 = {}
    # Getting the type of 'len' (line 198)
    len_193139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 11), 'len', False)
    # Calling len(args, kwargs) (line 198)
    len_call_result_193142 = invoke(stypy.reporting.localization.Localization(__file__, 198, 11), len_193139, *[b_eq_193140], **kwargs_193141)
    
    # Getting the type of 'n_eq' (line 198)
    n_eq_193143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 24), 'n_eq')
    # Applying the binary operator '!=' (line 198)
    result_ne_193144 = python_operator(stypy.reporting.localization.Localization(__file__, 198, 11), '!=', len_call_result_193142, n_eq_193143)
    
    # Testing the type of an if condition (line 198)
    if_condition_193145 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 198, 8), result_ne_193144)
    # Assigning a type to the variable 'if_condition_193145' (line 198)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 198, 8), 'if_condition_193145', if_condition_193145)
    # SSA begins for if statement (line 198)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 199)
    # Processing the call arguments (line 199)
    str_193147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 200, 16), 'str', 'Invalid input for linprog: the number of rows in A_eq must be equal to the number of values in b_eq')
    # Processing the call keyword arguments (line 199)
    kwargs_193148 = {}
    # Getting the type of 'ValueError' (line 199)
    ValueError_193146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 199)
    ValueError_call_result_193149 = invoke(stypy.reporting.localization.Localization(__file__, 199, 18), ValueError_193146, *[str_193147], **kwargs_193148)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 199, 12), ValueError_call_result_193149, 'raise parameter', BaseException)
    # SSA join for if statement (line 198)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to all(...): (line 202)
    # Processing the call keyword arguments (line 202)
    kwargs_193156 = {}
    
    # Call to isfinite(...): (line 202)
    # Processing the call arguments (line 202)
    # Getting the type of 'b_eq' (line 202)
    b_eq_193152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 27), 'b_eq', False)
    # Processing the call keyword arguments (line 202)
    kwargs_193153 = {}
    # Getting the type of 'np' (line 202)
    np_193150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 15), 'np', False)
    # Obtaining the member 'isfinite' of a type (line 202)
    isfinite_193151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 15), np_193150, 'isfinite')
    # Calling isfinite(args, kwargs) (line 202)
    isfinite_call_result_193154 = invoke(stypy.reporting.localization.Localization(__file__, 202, 15), isfinite_193151, *[b_eq_193152], **kwargs_193153)
    
    # Obtaining the member 'all' of a type (line 202)
    all_193155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 15), isfinite_call_result_193154, 'all')
    # Calling all(args, kwargs) (line 202)
    all_call_result_193157 = invoke(stypy.reporting.localization.Localization(__file__, 202, 15), all_193155, *[], **kwargs_193156)
    
    # Applying the 'not' unary operator (line 202)
    result_not__193158 = python_operator(stypy.reporting.localization.Localization(__file__, 202, 11), 'not', all_call_result_193157)
    
    # Testing the type of an if condition (line 202)
    if_condition_193159 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 202, 8), result_not__193158)
    # Assigning a type to the variable 'if_condition_193159' (line 202)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 202, 8), 'if_condition_193159', if_condition_193159)
    # SSA begins for if statement (line 202)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 203)
    # Processing the call arguments (line 203)
    str_193161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 204, 16), 'str', 'Invalid input for linprog: b_eq must not contain values inf, nan, or None')
    # Processing the call keyword arguments (line 203)
    kwargs_193162 = {}
    # Getting the type of 'ValueError' (line 203)
    ValueError_193160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 203)
    ValueError_call_result_193163 = invoke(stypy.reporting.localization.Localization(__file__, 203, 18), ValueError_193160, *[str_193161], **kwargs_193162)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 203, 12), ValueError_call_result_193163, 'raise parameter', BaseException)
    # SSA join for if statement (line 202)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 185)
    # SSA branch for the except 'TypeError' branch of a try statement (line 185)
    module_type_store.open_ssa_branch('except')
    
    # Call to TypeError(...): (line 207)
    # Processing the call arguments (line 207)
    str_193165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 208, 12), 'str', 'Invalid input for linprog: b_eq must be a 1D array of numerical values, each representing the right hand side of an equality constraints (row) in A_eq')
    # Processing the call keyword arguments (line 207)
    kwargs_193166 = {}
    # Getting the type of 'TypeError' (line 207)
    TypeError_193164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 207)
    TypeError_call_result_193167 = invoke(stypy.reporting.localization.Localization(__file__, 207, 14), TypeError_193164, *[str_193165], **kwargs_193166)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 207, 8), TypeError_call_result_193167, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 185)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 216)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Type idiom detected: calculating its left and rigth part (line 217)
    # Getting the type of 'str' (line 217)
    str_193168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 30), 'str')
    # Getting the type of 'bounds' (line 217)
    bounds_193169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 22), 'bounds')
    
    (may_be_193170, more_types_in_union_193171) = may_be_subtype(str_193168, bounds_193169)

    if may_be_193170:

        if more_types_in_union_193171:
            # Runtime conditional SSA (line 217)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'bounds' (line 217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 8), 'bounds', remove_not_subtype_from_union(bounds_193169, str))
        # Getting the type of 'TypeError' (line 218)
        TypeError_193172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 18), 'TypeError')
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 218, 12), TypeError_193172, 'raise parameter', BaseException)

        if more_types_in_union_193171:
            # SSA join for if statement (line 217)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'bounds' (line 219)
    bounds_193173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 11), 'bounds')
    # Getting the type of 'None' (line 219)
    None_193174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 21), 'None')
    # Applying the binary operator 'is' (line 219)
    result_is__193175 = python_operator(stypy.reporting.localization.Localization(__file__, 219, 11), 'is', bounds_193173, None_193174)
    
    
    
    # Call to len(...): (line 219)
    # Processing the call arguments (line 219)
    # Getting the type of 'bounds' (line 219)
    bounds_193177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 33), 'bounds', False)
    # Processing the call keyword arguments (line 219)
    kwargs_193178 = {}
    # Getting the type of 'len' (line 219)
    len_193176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 29), 'len', False)
    # Calling len(args, kwargs) (line 219)
    len_call_result_193179 = invoke(stypy.reporting.localization.Localization(__file__, 219, 29), len_193176, *[bounds_193177], **kwargs_193178)
    
    int_193180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, 44), 'int')
    # Applying the binary operator '==' (line 219)
    result_eq_193181 = python_operator(stypy.reporting.localization.Localization(__file__, 219, 29), '==', len_call_result_193179, int_193180)
    
    # Applying the binary operator 'or' (line 219)
    result_or_keyword_193182 = python_operator(stypy.reporting.localization.Localization(__file__, 219, 11), 'or', result_is__193175, result_eq_193181)
    
    # Testing the type of an if condition (line 219)
    if_condition_193183 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 219, 8), result_or_keyword_193182)
    # Assigning a type to the variable 'if_condition_193183' (line 219)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 219, 8), 'if_condition_193183', if_condition_193183)
    # SSA begins for if statement (line 219)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 220):
    
    # Assigning a BinOp to a Name (line 220):
    
    # Obtaining an instance of the builtin type 'list' (line 220)
    list_193184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 220, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 220)
    # Adding element type (line 220)
    
    # Obtaining an instance of the builtin type 'tuple' (line 220)
    tuple_193185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 220, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 220)
    # Adding element type (line 220)
    int_193186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 220, 23), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 220, 23), tuple_193185, int_193186)
    # Adding element type (line 220)
    # Getting the type of 'None' (line 220)
    None_193187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 26), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 220, 23), tuple_193185, None_193187)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 220, 21), list_193184, tuple_193185)
    
    # Getting the type of 'n_x' (line 220)
    n_x_193188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 35), 'n_x')
    # Applying the binary operator '*' (line 220)
    result_mul_193189 = python_operator(stypy.reporting.localization.Localization(__file__, 220, 21), '*', list_193184, n_x_193188)
    
    # Assigning a type to the variable 'bounds' (line 220)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 220, 12), 'bounds', result_mul_193189)
    # SSA branch for the else part of an if statement (line 219)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Call to len(...): (line 221)
    # Processing the call arguments (line 221)
    # Getting the type of 'bounds' (line 221)
    bounds_193191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 17), 'bounds', False)
    # Processing the call keyword arguments (line 221)
    kwargs_193192 = {}
    # Getting the type of 'len' (line 221)
    len_193190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 13), 'len', False)
    # Calling len(args, kwargs) (line 221)
    len_call_result_193193 = invoke(stypy.reporting.localization.Localization(__file__, 221, 13), len_193190, *[bounds_193191], **kwargs_193192)
    
    int_193194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 221, 28), 'int')
    # Applying the binary operator '==' (line 221)
    result_eq_193195 = python_operator(stypy.reporting.localization.Localization(__file__, 221, 13), '==', len_call_result_193193, int_193194)
    
    # Testing the type of an if condition (line 221)
    if_condition_193196 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 221, 13), result_eq_193195)
    # Assigning a type to the variable 'if_condition_193196' (line 221)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 221, 13), 'if_condition_193196', if_condition_193196)
    # SSA begins for if statement (line 221)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 222):
    
    # Assigning a Subscript to a Name (line 222):
    
    # Obtaining the type of the subscript
    int_193197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 222, 23), 'int')
    # Getting the type of 'bounds' (line 222)
    bounds_193198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 16), 'bounds')
    # Obtaining the member '__getitem__' of a type (line 222)
    getitem___193199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 16), bounds_193198, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 222)
    subscript_call_result_193200 = invoke(stypy.reporting.localization.Localization(__file__, 222, 16), getitem___193199, int_193197)
    
    # Assigning a type to the variable 'b' (line 222)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 12), 'b', subscript_call_result_193200)
    
    
    
    # Call to len(...): (line 223)
    # Processing the call arguments (line 223)
    # Getting the type of 'b' (line 223)
    b_193202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 19), 'b', False)
    # Processing the call keyword arguments (line 223)
    kwargs_193203 = {}
    # Getting the type of 'len' (line 223)
    len_193201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 15), 'len', False)
    # Calling len(args, kwargs) (line 223)
    len_call_result_193204 = invoke(stypy.reporting.localization.Localization(__file__, 223, 15), len_193201, *[b_193202], **kwargs_193203)
    
    int_193205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 223, 25), 'int')
    # Applying the binary operator '!=' (line 223)
    result_ne_193206 = python_operator(stypy.reporting.localization.Localization(__file__, 223, 15), '!=', len_call_result_193204, int_193205)
    
    # Testing the type of an if condition (line 223)
    if_condition_193207 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 223, 12), result_ne_193206)
    # Assigning a type to the variable 'if_condition_193207' (line 223)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 223, 12), 'if_condition_193207', if_condition_193207)
    # SSA begins for if statement (line 223)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 224)
    # Processing the call arguments (line 224)
    str_193209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 20), 'str', 'Invalid input for linprog: exactly one lower bound and one upper bound must be specified for each element of x')
    # Processing the call keyword arguments (line 224)
    kwargs_193210 = {}
    # Getting the type of 'ValueError' (line 224)
    ValueError_193208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 22), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 224)
    ValueError_call_result_193211 = invoke(stypy.reporting.localization.Localization(__file__, 224, 22), ValueError_193208, *[str_193209], **kwargs_193210)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 224, 16), ValueError_call_result_193211, 'raise parameter', BaseException)
    # SSA join for if statement (line 223)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 227):
    
    # Assigning a BinOp to a Name (line 227):
    
    # Obtaining an instance of the builtin type 'list' (line 227)
    list_193212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 227)
    # Adding element type (line 227)
    # Getting the type of 'b' (line 227)
    b_193213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 22), 'b')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 227, 21), list_193212, b_193213)
    
    # Getting the type of 'n_x' (line 227)
    n_x_193214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 27), 'n_x')
    # Applying the binary operator '*' (line 227)
    result_mul_193215 = python_operator(stypy.reporting.localization.Localization(__file__, 227, 21), '*', list_193212, n_x_193214)
    
    # Assigning a type to the variable 'bounds' (line 227)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 227, 12), 'bounds', result_mul_193215)
    # SSA branch for the else part of an if statement (line 221)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Call to len(...): (line 228)
    # Processing the call arguments (line 228)
    # Getting the type of 'bounds' (line 228)
    bounds_193217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 17), 'bounds', False)
    # Processing the call keyword arguments (line 228)
    kwargs_193218 = {}
    # Getting the type of 'len' (line 228)
    len_193216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 13), 'len', False)
    # Calling len(args, kwargs) (line 228)
    len_call_result_193219 = invoke(stypy.reporting.localization.Localization(__file__, 228, 13), len_193216, *[bounds_193217], **kwargs_193218)
    
    # Getting the type of 'n_x' (line 228)
    n_x_193220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 28), 'n_x')
    # Applying the binary operator '==' (line 228)
    result_eq_193221 = python_operator(stypy.reporting.localization.Localization(__file__, 228, 13), '==', len_call_result_193219, n_x_193220)
    
    # Testing the type of an if condition (line 228)
    if_condition_193222 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 228, 13), result_eq_193221)
    # Assigning a type to the variable 'if_condition_193222' (line 228)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 228, 13), 'if_condition_193222', if_condition_193222)
    # SSA begins for if statement (line 228)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 229)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to len(...): (line 230)
    # Processing the call arguments (line 230)
    
    # Obtaining the type of the subscript
    int_193224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 230, 27), 'int')
    # Getting the type of 'bounds' (line 230)
    bounds_193225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 20), 'bounds', False)
    # Obtaining the member '__getitem__' of a type (line 230)
    getitem___193226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 230, 20), bounds_193225, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 230)
    subscript_call_result_193227 = invoke(stypy.reporting.localization.Localization(__file__, 230, 20), getitem___193226, int_193224)
    
    # Processing the call keyword arguments (line 230)
    kwargs_193228 = {}
    # Getting the type of 'len' (line 230)
    len_193223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 16), 'len', False)
    # Calling len(args, kwargs) (line 230)
    len_call_result_193229 = invoke(stypy.reporting.localization.Localization(__file__, 230, 16), len_193223, *[subscript_call_result_193227], **kwargs_193228)
    
    # SSA branch for the except part of a try statement (line 229)
    # SSA branch for the except 'BaseException' branch of a try statement (line 229)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a BinOp to a Name (line 232):
    
    # Assigning a BinOp to a Name (line 232):
    
    # Obtaining an instance of the builtin type 'list' (line 232)
    list_193230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 232, 25), 'list')
    # Adding type elements to the builtin type 'list' instance (line 232)
    # Adding element type (line 232)
    
    # Obtaining an instance of the builtin type 'tuple' (line 232)
    tuple_193231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 232, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 232)
    # Adding element type (line 232)
    
    # Obtaining the type of the subscript
    int_193232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 232, 34), 'int')
    # Getting the type of 'bounds' (line 232)
    bounds_193233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 27), 'bounds')
    # Obtaining the member '__getitem__' of a type (line 232)
    getitem___193234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 232, 27), bounds_193233, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 232)
    subscript_call_result_193235 = invoke(stypy.reporting.localization.Localization(__file__, 232, 27), getitem___193234, int_193232)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 232, 27), tuple_193231, subscript_call_result_193235)
    # Adding element type (line 232)
    
    # Obtaining the type of the subscript
    int_193236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 232, 45), 'int')
    # Getting the type of 'bounds' (line 232)
    bounds_193237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 38), 'bounds')
    # Obtaining the member '__getitem__' of a type (line 232)
    getitem___193238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 232, 38), bounds_193237, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 232)
    subscript_call_result_193239 = invoke(stypy.reporting.localization.Localization(__file__, 232, 38), getitem___193238, int_193236)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 232, 27), tuple_193231, subscript_call_result_193239)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 232, 25), list_193230, tuple_193231)
    
    # Getting the type of 'n_x' (line 232)
    n_x_193240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 52), 'n_x')
    # Applying the binary operator '*' (line 232)
    result_mul_193241 = python_operator(stypy.reporting.localization.Localization(__file__, 232, 25), '*', list_193230, n_x_193240)
    
    # Assigning a type to the variable 'bounds' (line 232)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 232, 16), 'bounds', result_mul_193241)
    # SSA join for try-except statement (line 229)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to enumerate(...): (line 233)
    # Processing the call arguments (line 233)
    # Getting the type of 'bounds' (line 233)
    bounds_193243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 34), 'bounds', False)
    # Processing the call keyword arguments (line 233)
    kwargs_193244 = {}
    # Getting the type of 'enumerate' (line 233)
    enumerate_193242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 24), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 233)
    enumerate_call_result_193245 = invoke(stypy.reporting.localization.Localization(__file__, 233, 24), enumerate_193242, *[bounds_193243], **kwargs_193244)
    
    # Testing the type of a for loop iterable (line 233)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 233, 12), enumerate_call_result_193245)
    # Getting the type of the for loop variable (line 233)
    for_loop_var_193246 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 233, 12), enumerate_call_result_193245)
    # Assigning a type to the variable 'i' (line 233)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 233, 12), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 233, 12), for_loop_var_193246))
    # Assigning a type to the variable 'b' (line 233)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 233, 12), 'b', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 233, 12), for_loop_var_193246))
    # SSA begins for a for statement (line 233)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to len(...): (line 234)
    # Processing the call arguments (line 234)
    # Getting the type of 'b' (line 234)
    b_193248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 23), 'b', False)
    # Processing the call keyword arguments (line 234)
    kwargs_193249 = {}
    # Getting the type of 'len' (line 234)
    len_193247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 19), 'len', False)
    # Calling len(args, kwargs) (line 234)
    len_call_result_193250 = invoke(stypy.reporting.localization.Localization(__file__, 234, 19), len_193247, *[b_193248], **kwargs_193249)
    
    int_193251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 234, 29), 'int')
    # Applying the binary operator '!=' (line 234)
    result_ne_193252 = python_operator(stypy.reporting.localization.Localization(__file__, 234, 19), '!=', len_call_result_193250, int_193251)
    
    # Testing the type of an if condition (line 234)
    if_condition_193253 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 234, 16), result_ne_193252)
    # Assigning a type to the variable 'if_condition_193253' (line 234)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 234, 16), 'if_condition_193253', if_condition_193253)
    # SSA begins for if statement (line 234)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 235)
    # Processing the call arguments (line 235)
    str_193255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 236, 24), 'str', 'Invalid input for linprog, bound ')
    
    # Call to str(...): (line 237)
    # Processing the call arguments (line 237)
    # Getting the type of 'i' (line 237)
    i_193257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 28), 'i', False)
    # Processing the call keyword arguments (line 237)
    kwargs_193258 = {}
    # Getting the type of 'str' (line 237)
    str_193256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 24), 'str', False)
    # Calling str(args, kwargs) (line 237)
    str_call_result_193259 = invoke(stypy.reporting.localization.Localization(__file__, 237, 24), str_193256, *[i_193257], **kwargs_193258)
    
    # Applying the binary operator '+' (line 236)
    result_add_193260 = python_operator(stypy.reporting.localization.Localization(__file__, 236, 24), '+', str_193255, str_call_result_193259)
    
    str_193261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 238, 24), 'str', ' ')
    # Applying the binary operator '+' (line 237)
    result_add_193262 = python_operator(stypy.reporting.localization.Localization(__file__, 237, 31), '+', result_add_193260, str_193261)
    
    
    # Call to str(...): (line 239)
    # Processing the call arguments (line 239)
    # Getting the type of 'b' (line 239)
    b_193264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 28), 'b', False)
    # Processing the call keyword arguments (line 239)
    kwargs_193265 = {}
    # Getting the type of 'str' (line 239)
    str_193263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 24), 'str', False)
    # Calling str(args, kwargs) (line 239)
    str_call_result_193266 = invoke(stypy.reporting.localization.Localization(__file__, 239, 24), str_193263, *[b_193264], **kwargs_193265)
    
    # Applying the binary operator '+' (line 238)
    result_add_193267 = python_operator(stypy.reporting.localization.Localization(__file__, 238, 28), '+', result_add_193262, str_call_result_193266)
    
    str_193268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 240, 24), 'str', ': exactly one lower bound and one upper bound must be specified for each element of x')
    # Applying the binary operator '+' (line 239)
    result_add_193269 = python_operator(stypy.reporting.localization.Localization(__file__, 239, 31), '+', result_add_193267, str_193268)
    
    # Processing the call keyword arguments (line 235)
    kwargs_193270 = {}
    # Getting the type of 'ValueError' (line 235)
    ValueError_193254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 26), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 235)
    ValueError_call_result_193271 = invoke(stypy.reporting.localization.Localization(__file__, 235, 26), ValueError_193254, *[result_add_193269], **kwargs_193270)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 235, 20), ValueError_call_result_193271, 'raise parameter', BaseException)
    # SSA join for if statement (line 234)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 228)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    
    # Call to len(...): (line 242)
    # Processing the call arguments (line 242)
    # Getting the type of 'bounds' (line 242)
    bounds_193273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 18), 'bounds', False)
    # Processing the call keyword arguments (line 242)
    kwargs_193274 = {}
    # Getting the type of 'len' (line 242)
    len_193272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 14), 'len', False)
    # Calling len(args, kwargs) (line 242)
    len_call_result_193275 = invoke(stypy.reporting.localization.Localization(__file__, 242, 14), len_193272, *[bounds_193273], **kwargs_193274)
    
    int_193276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 242, 29), 'int')
    # Applying the binary operator '==' (line 242)
    result_eq_193277 = python_operator(stypy.reporting.localization.Localization(__file__, 242, 14), '==', len_call_result_193275, int_193276)
    
    
    # Call to isreal(...): (line 242)
    # Processing the call arguments (line 242)
    
    # Obtaining the type of the subscript
    int_193280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 242, 52), 'int')
    # Getting the type of 'bounds' (line 242)
    bounds_193281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 45), 'bounds', False)
    # Obtaining the member '__getitem__' of a type (line 242)
    getitem___193282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 242, 45), bounds_193281, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 242)
    subscript_call_result_193283 = invoke(stypy.reporting.localization.Localization(__file__, 242, 45), getitem___193282, int_193280)
    
    # Processing the call keyword arguments (line 242)
    kwargs_193284 = {}
    # Getting the type of 'np' (line 242)
    np_193278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 35), 'np', False)
    # Obtaining the member 'isreal' of a type (line 242)
    isreal_193279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 242, 35), np_193278, 'isreal')
    # Calling isreal(args, kwargs) (line 242)
    isreal_call_result_193285 = invoke(stypy.reporting.localization.Localization(__file__, 242, 35), isreal_193279, *[subscript_call_result_193283], **kwargs_193284)
    
    # Applying the binary operator 'and' (line 242)
    result_and_keyword_193286 = python_operator(stypy.reporting.localization.Localization(__file__, 242, 14), 'and', result_eq_193277, isreal_call_result_193285)
    
    # Call to isreal(...): (line 243)
    # Processing the call arguments (line 243)
    
    # Obtaining the type of the subscript
    int_193289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 243, 37), 'int')
    # Getting the type of 'bounds' (line 243)
    bounds_193290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 30), 'bounds', False)
    # Obtaining the member '__getitem__' of a type (line 243)
    getitem___193291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 243, 30), bounds_193290, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 243)
    subscript_call_result_193292 = invoke(stypy.reporting.localization.Localization(__file__, 243, 30), getitem___193291, int_193289)
    
    # Processing the call keyword arguments (line 243)
    kwargs_193293 = {}
    # Getting the type of 'np' (line 243)
    np_193287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 20), 'np', False)
    # Obtaining the member 'isreal' of a type (line 243)
    isreal_193288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 243, 20), np_193287, 'isreal')
    # Calling isreal(args, kwargs) (line 243)
    isreal_call_result_193294 = invoke(stypy.reporting.localization.Localization(__file__, 243, 20), isreal_193288, *[subscript_call_result_193292], **kwargs_193293)
    
    # Applying the binary operator 'and' (line 242)
    result_and_keyword_193295 = python_operator(stypy.reporting.localization.Localization(__file__, 242, 14), 'and', result_and_keyword_193286, isreal_call_result_193294)
    
    # Testing the type of an if condition (line 242)
    if_condition_193296 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 242, 13), result_and_keyword_193295)
    # Assigning a type to the variable 'if_condition_193296' (line 242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 13), 'if_condition_193296', if_condition_193296)
    # SSA begins for if statement (line 242)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 244):
    
    # Assigning a BinOp to a Name (line 244):
    
    # Obtaining an instance of the builtin type 'list' (line 244)
    list_193297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 244)
    # Adding element type (line 244)
    
    # Obtaining an instance of the builtin type 'tuple' (line 244)
    tuple_193298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 244)
    # Adding element type (line 244)
    
    # Obtaining the type of the subscript
    int_193299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 30), 'int')
    # Getting the type of 'bounds' (line 244)
    bounds_193300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 23), 'bounds')
    # Obtaining the member '__getitem__' of a type (line 244)
    getitem___193301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 244, 23), bounds_193300, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 244)
    subscript_call_result_193302 = invoke(stypy.reporting.localization.Localization(__file__, 244, 23), getitem___193301, int_193299)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 244, 23), tuple_193298, subscript_call_result_193302)
    # Adding element type (line 244)
    
    # Obtaining the type of the subscript
    int_193303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 41), 'int')
    # Getting the type of 'bounds' (line 244)
    bounds_193304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 34), 'bounds')
    # Obtaining the member '__getitem__' of a type (line 244)
    getitem___193305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 244, 34), bounds_193304, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 244)
    subscript_call_result_193306 = invoke(stypy.reporting.localization.Localization(__file__, 244, 34), getitem___193305, int_193303)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 244, 23), tuple_193298, subscript_call_result_193306)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 244, 21), list_193297, tuple_193298)
    
    # Getting the type of 'n_x' (line 244)
    n_x_193307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 48), 'n_x')
    # Applying the binary operator '*' (line 244)
    result_mul_193308 = python_operator(stypy.reporting.localization.Localization(__file__, 244, 21), '*', list_193297, n_x_193307)
    
    # Assigning a type to the variable 'bounds' (line 244)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 12), 'bounds', result_mul_193308)
    # SSA branch for the else part of an if statement (line 242)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 246)
    # Processing the call arguments (line 246)
    str_193310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, 16), 'str', 'Invalid input for linprog: exactly one lower bound and one upper bound must be specified for each element of x')
    # Processing the call keyword arguments (line 246)
    kwargs_193311 = {}
    # Getting the type of 'ValueError' (line 246)
    ValueError_193309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 246)
    ValueError_call_result_193312 = invoke(stypy.reporting.localization.Localization(__file__, 246, 18), ValueError_193309, *[str_193310], **kwargs_193311)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 246, 12), ValueError_call_result_193312, 'raise parameter', BaseException)
    # SSA join for if statement (line 242)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 228)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 221)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 219)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 250):
    
    # Assigning a List to a Name (line 250):
    
    # Obtaining an instance of the builtin type 'list' (line 250)
    list_193313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 250, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 250)
    
    # Assigning a type to the variable 'clean_bounds' (line 250)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 250, 8), 'clean_bounds', list_193313)
    
    
    # Call to enumerate(...): (line 251)
    # Processing the call arguments (line 251)
    # Getting the type of 'bounds' (line 251)
    bounds_193315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 30), 'bounds', False)
    # Processing the call keyword arguments (line 251)
    kwargs_193316 = {}
    # Getting the type of 'enumerate' (line 251)
    enumerate_193314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 20), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 251)
    enumerate_call_result_193317 = invoke(stypy.reporting.localization.Localization(__file__, 251, 20), enumerate_193314, *[bounds_193315], **kwargs_193316)
    
    # Testing the type of a for loop iterable (line 251)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 251, 8), enumerate_call_result_193317)
    # Getting the type of the for loop variable (line 251)
    for_loop_var_193318 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 251, 8), enumerate_call_result_193317)
    # Assigning a type to the variable 'i' (line 251)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 251, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 8), for_loop_var_193318))
    # Assigning a type to the variable 'b' (line 251)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 251, 8), 'b', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 8), for_loop_var_193318))
    # SSA begins for a for statement (line 251)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    int_193319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 252, 17), 'int')
    # Getting the type of 'b' (line 252)
    b_193320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 15), 'b')
    # Obtaining the member '__getitem__' of a type (line 252)
    getitem___193321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 252, 15), b_193320, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 252)
    subscript_call_result_193322 = invoke(stypy.reporting.localization.Localization(__file__, 252, 15), getitem___193321, int_193319)
    
    # Getting the type of 'None' (line 252)
    None_193323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 27), 'None')
    # Applying the binary operator 'isnot' (line 252)
    result_is_not_193324 = python_operator(stypy.reporting.localization.Localization(__file__, 252, 15), 'isnot', subscript_call_result_193322, None_193323)
    
    
    
    # Obtaining the type of the subscript
    int_193325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 252, 38), 'int')
    # Getting the type of 'b' (line 252)
    b_193326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 36), 'b')
    # Obtaining the member '__getitem__' of a type (line 252)
    getitem___193327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 252, 36), b_193326, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 252)
    subscript_call_result_193328 = invoke(stypy.reporting.localization.Localization(__file__, 252, 36), getitem___193327, int_193325)
    
    # Getting the type of 'None' (line 252)
    None_193329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 48), 'None')
    # Applying the binary operator 'isnot' (line 252)
    result_is_not_193330 = python_operator(stypy.reporting.localization.Localization(__file__, 252, 36), 'isnot', subscript_call_result_193328, None_193329)
    
    # Applying the binary operator 'and' (line 252)
    result_and_keyword_193331 = python_operator(stypy.reporting.localization.Localization(__file__, 252, 15), 'and', result_is_not_193324, result_is_not_193330)
    
    
    # Obtaining the type of the subscript
    int_193332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 252, 59), 'int')
    # Getting the type of 'b' (line 252)
    b_193333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 57), 'b')
    # Obtaining the member '__getitem__' of a type (line 252)
    getitem___193334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 252, 57), b_193333, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 252)
    subscript_call_result_193335 = invoke(stypy.reporting.localization.Localization(__file__, 252, 57), getitem___193334, int_193332)
    
    
    # Obtaining the type of the subscript
    int_193336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 252, 66), 'int')
    # Getting the type of 'b' (line 252)
    b_193337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 64), 'b')
    # Obtaining the member '__getitem__' of a type (line 252)
    getitem___193338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 252, 64), b_193337, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 252)
    subscript_call_result_193339 = invoke(stypy.reporting.localization.Localization(__file__, 252, 64), getitem___193338, int_193336)
    
    # Applying the binary operator '>' (line 252)
    result_gt_193340 = python_operator(stypy.reporting.localization.Localization(__file__, 252, 57), '>', subscript_call_result_193335, subscript_call_result_193339)
    
    # Applying the binary operator 'and' (line 252)
    result_and_keyword_193341 = python_operator(stypy.reporting.localization.Localization(__file__, 252, 15), 'and', result_and_keyword_193331, result_gt_193340)
    
    # Testing the type of an if condition (line 252)
    if_condition_193342 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 252, 12), result_and_keyword_193341)
    # Assigning a type to the variable 'if_condition_193342' (line 252)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 12), 'if_condition_193342', if_condition_193342)
    # SSA begins for if statement (line 252)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 253)
    # Processing the call arguments (line 253)
    str_193344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 254, 20), 'str', 'Invalid input for linprog, bound ')
    
    # Call to str(...): (line 255)
    # Processing the call arguments (line 255)
    # Getting the type of 'i' (line 255)
    i_193346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 24), 'i', False)
    # Processing the call keyword arguments (line 255)
    kwargs_193347 = {}
    # Getting the type of 'str' (line 255)
    str_193345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 20), 'str', False)
    # Calling str(args, kwargs) (line 255)
    str_call_result_193348 = invoke(stypy.reporting.localization.Localization(__file__, 255, 20), str_193345, *[i_193346], **kwargs_193347)
    
    # Applying the binary operator '+' (line 254)
    result_add_193349 = python_operator(stypy.reporting.localization.Localization(__file__, 254, 20), '+', str_193344, str_call_result_193348)
    
    str_193350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 20), 'str', ' ')
    # Applying the binary operator '+' (line 255)
    result_add_193351 = python_operator(stypy.reporting.localization.Localization(__file__, 255, 27), '+', result_add_193349, str_193350)
    
    
    # Call to str(...): (line 257)
    # Processing the call arguments (line 257)
    # Getting the type of 'b' (line 257)
    b_193353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 24), 'b', False)
    # Processing the call keyword arguments (line 257)
    kwargs_193354 = {}
    # Getting the type of 'str' (line 257)
    str_193352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 20), 'str', False)
    # Calling str(args, kwargs) (line 257)
    str_call_result_193355 = invoke(stypy.reporting.localization.Localization(__file__, 257, 20), str_193352, *[b_193353], **kwargs_193354)
    
    # Applying the binary operator '+' (line 256)
    result_add_193356 = python_operator(stypy.reporting.localization.Localization(__file__, 256, 24), '+', result_add_193351, str_call_result_193355)
    
    str_193357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 258, 20), 'str', ': a lower bound must be less than or equal to the corresponding upper bound')
    # Applying the binary operator '+' (line 257)
    result_add_193358 = python_operator(stypy.reporting.localization.Localization(__file__, 257, 27), '+', result_add_193356, str_193357)
    
    # Processing the call keyword arguments (line 253)
    kwargs_193359 = {}
    # Getting the type of 'ValueError' (line 253)
    ValueError_193343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 22), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 253)
    ValueError_call_result_193360 = invoke(stypy.reporting.localization.Localization(__file__, 253, 22), ValueError_193343, *[result_add_193358], **kwargs_193359)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 253, 16), ValueError_call_result_193360, 'raise parameter', BaseException)
    # SSA join for if statement (line 252)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_193361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 260, 17), 'int')
    # Getting the type of 'b' (line 260)
    b_193362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 15), 'b')
    # Obtaining the member '__getitem__' of a type (line 260)
    getitem___193363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 260, 15), b_193362, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 260)
    subscript_call_result_193364 = invoke(stypy.reporting.localization.Localization(__file__, 260, 15), getitem___193363, int_193361)
    
    # Getting the type of 'np' (line 260)
    np_193365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 23), 'np')
    # Obtaining the member 'inf' of a type (line 260)
    inf_193366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 260, 23), np_193365, 'inf')
    # Applying the binary operator '==' (line 260)
    result_eq_193367 = python_operator(stypy.reporting.localization.Localization(__file__, 260, 15), '==', subscript_call_result_193364, inf_193366)
    
    # Testing the type of an if condition (line 260)
    if_condition_193368 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 260, 12), result_eq_193367)
    # Assigning a type to the variable 'if_condition_193368' (line 260)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 260, 12), 'if_condition_193368', if_condition_193368)
    # SSA begins for if statement (line 260)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 261)
    # Processing the call arguments (line 261)
    str_193370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 262, 20), 'str', 'Invalid input for linprog, bound ')
    
    # Call to str(...): (line 263)
    # Processing the call arguments (line 263)
    # Getting the type of 'i' (line 263)
    i_193372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 24), 'i', False)
    # Processing the call keyword arguments (line 263)
    kwargs_193373 = {}
    # Getting the type of 'str' (line 263)
    str_193371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 20), 'str', False)
    # Calling str(args, kwargs) (line 263)
    str_call_result_193374 = invoke(stypy.reporting.localization.Localization(__file__, 263, 20), str_193371, *[i_193372], **kwargs_193373)
    
    # Applying the binary operator '+' (line 262)
    result_add_193375 = python_operator(stypy.reporting.localization.Localization(__file__, 262, 20), '+', str_193370, str_call_result_193374)
    
    str_193376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 264, 20), 'str', ' ')
    # Applying the binary operator '+' (line 263)
    result_add_193377 = python_operator(stypy.reporting.localization.Localization(__file__, 263, 27), '+', result_add_193375, str_193376)
    
    
    # Call to str(...): (line 265)
    # Processing the call arguments (line 265)
    # Getting the type of 'b' (line 265)
    b_193379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 24), 'b', False)
    # Processing the call keyword arguments (line 265)
    kwargs_193380 = {}
    # Getting the type of 'str' (line 265)
    str_193378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 20), 'str', False)
    # Calling str(args, kwargs) (line 265)
    str_call_result_193381 = invoke(stypy.reporting.localization.Localization(__file__, 265, 20), str_193378, *[b_193379], **kwargs_193380)
    
    # Applying the binary operator '+' (line 264)
    result_add_193382 = python_operator(stypy.reporting.localization.Localization(__file__, 264, 24), '+', result_add_193377, str_call_result_193381)
    
    str_193383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 266, 20), 'str', ': infinity is not a valid lower bound')
    # Applying the binary operator '+' (line 265)
    result_add_193384 = python_operator(stypy.reporting.localization.Localization(__file__, 265, 27), '+', result_add_193382, str_193383)
    
    # Processing the call keyword arguments (line 261)
    kwargs_193385 = {}
    # Getting the type of 'ValueError' (line 261)
    ValueError_193369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 22), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 261)
    ValueError_call_result_193386 = invoke(stypy.reporting.localization.Localization(__file__, 261, 22), ValueError_193369, *[result_add_193384], **kwargs_193385)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 261, 16), ValueError_call_result_193386, 'raise parameter', BaseException)
    # SSA join for if statement (line 260)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_193387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 267, 17), 'int')
    # Getting the type of 'b' (line 267)
    b_193388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 15), 'b')
    # Obtaining the member '__getitem__' of a type (line 267)
    getitem___193389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 267, 15), b_193388, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 267)
    subscript_call_result_193390 = invoke(stypy.reporting.localization.Localization(__file__, 267, 15), getitem___193389, int_193387)
    
    
    # Getting the type of 'np' (line 267)
    np_193391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 24), 'np')
    # Obtaining the member 'inf' of a type (line 267)
    inf_193392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 267, 24), np_193391, 'inf')
    # Applying the 'usub' unary operator (line 267)
    result___neg___193393 = python_operator(stypy.reporting.localization.Localization(__file__, 267, 23), 'usub', inf_193392)
    
    # Applying the binary operator '==' (line 267)
    result_eq_193394 = python_operator(stypy.reporting.localization.Localization(__file__, 267, 15), '==', subscript_call_result_193390, result___neg___193393)
    
    # Testing the type of an if condition (line 267)
    if_condition_193395 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 267, 12), result_eq_193394)
    # Assigning a type to the variable 'if_condition_193395' (line 267)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 267, 12), 'if_condition_193395', if_condition_193395)
    # SSA begins for if statement (line 267)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 268)
    # Processing the call arguments (line 268)
    str_193397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 269, 20), 'str', 'Invalid input for linprog, bound ')
    
    # Call to str(...): (line 270)
    # Processing the call arguments (line 270)
    # Getting the type of 'i' (line 270)
    i_193399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 24), 'i', False)
    # Processing the call keyword arguments (line 270)
    kwargs_193400 = {}
    # Getting the type of 'str' (line 270)
    str_193398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 20), 'str', False)
    # Calling str(args, kwargs) (line 270)
    str_call_result_193401 = invoke(stypy.reporting.localization.Localization(__file__, 270, 20), str_193398, *[i_193399], **kwargs_193400)
    
    # Applying the binary operator '+' (line 269)
    result_add_193402 = python_operator(stypy.reporting.localization.Localization(__file__, 269, 20), '+', str_193397, str_call_result_193401)
    
    str_193403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, 20), 'str', ' ')
    # Applying the binary operator '+' (line 270)
    result_add_193404 = python_operator(stypy.reporting.localization.Localization(__file__, 270, 27), '+', result_add_193402, str_193403)
    
    
    # Call to str(...): (line 272)
    # Processing the call arguments (line 272)
    # Getting the type of 'b' (line 272)
    b_193406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 24), 'b', False)
    # Processing the call keyword arguments (line 272)
    kwargs_193407 = {}
    # Getting the type of 'str' (line 272)
    str_193405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 20), 'str', False)
    # Calling str(args, kwargs) (line 272)
    str_call_result_193408 = invoke(stypy.reporting.localization.Localization(__file__, 272, 20), str_193405, *[b_193406], **kwargs_193407)
    
    # Applying the binary operator '+' (line 271)
    result_add_193409 = python_operator(stypy.reporting.localization.Localization(__file__, 271, 24), '+', result_add_193404, str_call_result_193408)
    
    str_193410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 20), 'str', ': negative infinity is not a valid upper bound')
    # Applying the binary operator '+' (line 272)
    result_add_193411 = python_operator(stypy.reporting.localization.Localization(__file__, 272, 27), '+', result_add_193409, str_193410)
    
    # Processing the call keyword arguments (line 268)
    kwargs_193412 = {}
    # Getting the type of 'ValueError' (line 268)
    ValueError_193396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 22), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 268)
    ValueError_call_result_193413 = invoke(stypy.reporting.localization.Localization(__file__, 268, 22), ValueError_193396, *[result_add_193411], **kwargs_193412)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 268, 16), ValueError_call_result_193413, 'raise parameter', BaseException)
    # SSA join for if statement (line 267)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a IfExp to a Name (line 274):
    
    # Assigning a IfExp to a Name (line 274):
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    int_193414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 274, 34), 'int')
    # Getting the type of 'b' (line 274)
    b_193415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 32), 'b')
    # Obtaining the member '__getitem__' of a type (line 274)
    getitem___193416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 274, 32), b_193415, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 274)
    subscript_call_result_193417 = invoke(stypy.reporting.localization.Localization(__file__, 274, 32), getitem___193416, int_193414)
    
    # Getting the type of 'None' (line 274)
    None_193418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 44), 'None')
    # Applying the binary operator 'isnot' (line 274)
    result_is_not_193419 = python_operator(stypy.reporting.localization.Localization(__file__, 274, 32), 'isnot', subscript_call_result_193417, None_193418)
    
    
    
    # Obtaining the type of the subscript
    int_193420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 274, 55), 'int')
    # Getting the type of 'b' (line 274)
    b_193421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 53), 'b')
    # Obtaining the member '__getitem__' of a type (line 274)
    getitem___193422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 274, 53), b_193421, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 274)
    subscript_call_result_193423 = invoke(stypy.reporting.localization.Localization(__file__, 274, 53), getitem___193422, int_193420)
    
    
    # Getting the type of 'np' (line 274)
    np_193424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 62), 'np')
    # Obtaining the member 'inf' of a type (line 274)
    inf_193425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 274, 62), np_193424, 'inf')
    # Applying the 'usub' unary operator (line 274)
    result___neg___193426 = python_operator(stypy.reporting.localization.Localization(__file__, 274, 61), 'usub', inf_193425)
    
    # Applying the binary operator '!=' (line 274)
    result_ne_193427 = python_operator(stypy.reporting.localization.Localization(__file__, 274, 53), '!=', subscript_call_result_193423, result___neg___193426)
    
    # Applying the binary operator 'and' (line 274)
    result_and_keyword_193428 = python_operator(stypy.reporting.localization.Localization(__file__, 274, 32), 'and', result_is_not_193419, result_ne_193427)
    
    # Testing the type of an if expression (line 274)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 274, 17), result_and_keyword_193428)
    # SSA begins for if expression (line 274)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    
    # Call to float(...): (line 274)
    # Processing the call arguments (line 274)
    
    # Obtaining the type of the subscript
    int_193430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 274, 25), 'int')
    # Getting the type of 'b' (line 274)
    b_193431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 23), 'b', False)
    # Obtaining the member '__getitem__' of a type (line 274)
    getitem___193432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 274, 23), b_193431, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 274)
    subscript_call_result_193433 = invoke(stypy.reporting.localization.Localization(__file__, 274, 23), getitem___193432, int_193430)
    
    # Processing the call keyword arguments (line 274)
    kwargs_193434 = {}
    # Getting the type of 'float' (line 274)
    float_193429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 17), 'float', False)
    # Calling float(args, kwargs) (line 274)
    float_call_result_193435 = invoke(stypy.reporting.localization.Localization(__file__, 274, 17), float_193429, *[subscript_call_result_193433], **kwargs_193434)
    
    # SSA branch for the else part of an if expression (line 274)
    module_type_store.open_ssa_branch('if expression else')
    # Getting the type of 'None' (line 274)
    None_193436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 74), 'None')
    # SSA join for if expression (line 274)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_193437 = union_type.UnionType.add(float_call_result_193435, None_193436)
    
    # Assigning a type to the variable 'lb' (line 274)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 274, 12), 'lb', if_exp_193437)
    
    # Assigning a IfExp to a Name (line 275):
    
    # Assigning a IfExp to a Name (line 275):
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    int_193438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 275, 34), 'int')
    # Getting the type of 'b' (line 275)
    b_193439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 32), 'b')
    # Obtaining the member '__getitem__' of a type (line 275)
    getitem___193440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 275, 32), b_193439, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 275)
    subscript_call_result_193441 = invoke(stypy.reporting.localization.Localization(__file__, 275, 32), getitem___193440, int_193438)
    
    # Getting the type of 'None' (line 275)
    None_193442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 44), 'None')
    # Applying the binary operator 'isnot' (line 275)
    result_is_not_193443 = python_operator(stypy.reporting.localization.Localization(__file__, 275, 32), 'isnot', subscript_call_result_193441, None_193442)
    
    
    
    # Obtaining the type of the subscript
    int_193444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 275, 55), 'int')
    # Getting the type of 'b' (line 275)
    b_193445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 53), 'b')
    # Obtaining the member '__getitem__' of a type (line 275)
    getitem___193446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 275, 53), b_193445, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 275)
    subscript_call_result_193447 = invoke(stypy.reporting.localization.Localization(__file__, 275, 53), getitem___193446, int_193444)
    
    # Getting the type of 'np' (line 275)
    np_193448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 61), 'np')
    # Obtaining the member 'inf' of a type (line 275)
    inf_193449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 275, 61), np_193448, 'inf')
    # Applying the binary operator '!=' (line 275)
    result_ne_193450 = python_operator(stypy.reporting.localization.Localization(__file__, 275, 53), '!=', subscript_call_result_193447, inf_193449)
    
    # Applying the binary operator 'and' (line 275)
    result_and_keyword_193451 = python_operator(stypy.reporting.localization.Localization(__file__, 275, 32), 'and', result_is_not_193443, result_ne_193450)
    
    # Testing the type of an if expression (line 275)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 275, 17), result_and_keyword_193451)
    # SSA begins for if expression (line 275)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    
    # Call to float(...): (line 275)
    # Processing the call arguments (line 275)
    
    # Obtaining the type of the subscript
    int_193453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 275, 25), 'int')
    # Getting the type of 'b' (line 275)
    b_193454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 23), 'b', False)
    # Obtaining the member '__getitem__' of a type (line 275)
    getitem___193455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 275, 23), b_193454, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 275)
    subscript_call_result_193456 = invoke(stypy.reporting.localization.Localization(__file__, 275, 23), getitem___193455, int_193453)
    
    # Processing the call keyword arguments (line 275)
    kwargs_193457 = {}
    # Getting the type of 'float' (line 275)
    float_193452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 17), 'float', False)
    # Calling float(args, kwargs) (line 275)
    float_call_result_193458 = invoke(stypy.reporting.localization.Localization(__file__, 275, 17), float_193452, *[subscript_call_result_193456], **kwargs_193457)
    
    # SSA branch for the else part of an if expression (line 275)
    module_type_store.open_ssa_branch('if expression else')
    # Getting the type of 'None' (line 275)
    None_193459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 73), 'None')
    # SSA join for if expression (line 275)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_193460 = union_type.UnionType.add(float_call_result_193458, None_193459)
    
    # Assigning a type to the variable 'ub' (line 275)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 275, 12), 'ub', if_exp_193460)
    
    # Call to append(...): (line 276)
    # Processing the call arguments (line 276)
    
    # Obtaining an instance of the builtin type 'tuple' (line 276)
    tuple_193463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 276, 33), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 276)
    # Adding element type (line 276)
    # Getting the type of 'lb' (line 276)
    lb_193464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 33), 'lb', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 276, 33), tuple_193463, lb_193464)
    # Adding element type (line 276)
    # Getting the type of 'ub' (line 276)
    ub_193465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 37), 'ub', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 276, 33), tuple_193463, ub_193465)
    
    # Processing the call keyword arguments (line 276)
    kwargs_193466 = {}
    # Getting the type of 'clean_bounds' (line 276)
    clean_bounds_193461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 12), 'clean_bounds', False)
    # Obtaining the member 'append' of a type (line 276)
    append_193462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 276, 12), clean_bounds_193461, 'append')
    # Calling append(args, kwargs) (line 276)
    append_call_result_193467 = invoke(stypy.reporting.localization.Localization(__file__, 276, 12), append_193462, *[tuple_193463], **kwargs_193466)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 277):
    
    # Assigning a Name to a Name (line 277):
    # Getting the type of 'clean_bounds' (line 277)
    clean_bounds_193468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 17), 'clean_bounds')
    # Assigning a type to the variable 'bounds' (line 277)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 8), 'bounds', clean_bounds_193468)
    # SSA branch for the except part of a try statement (line 216)
    # SSA branch for the except 'ValueError' branch of a try statement (line 216)
    # Storing handler type
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'ValueError' (line 278)
    ValueError_193469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 11), 'ValueError')
    # Assigning a type to the variable 'e' (line 278)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 278, 4), 'e', ValueError_193469)
    
    
    str_193470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 11), 'str', 'could not convert string to float')
    
    # Obtaining the type of the subscript
    int_193471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 57), 'int')
    # Getting the type of 'e' (line 279)
    e_193472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 50), 'e')
    # Obtaining the member 'args' of a type (line 279)
    args_193473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 279, 50), e_193472, 'args')
    # Obtaining the member '__getitem__' of a type (line 279)
    getitem___193474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 279, 50), args_193473, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 279)
    subscript_call_result_193475 = invoke(stypy.reporting.localization.Localization(__file__, 279, 50), getitem___193474, int_193471)
    
    # Applying the binary operator 'in' (line 279)
    result_contains_193476 = python_operator(stypy.reporting.localization.Localization(__file__, 279, 11), 'in', str_193470, subscript_call_result_193475)
    
    # Testing the type of an if condition (line 279)
    if_condition_193477 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 279, 8), result_contains_193476)
    # Assigning a type to the variable 'if_condition_193477' (line 279)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 279, 8), 'if_condition_193477', if_condition_193477)
    # SSA begins for if statement (line 279)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'TypeError' (line 280)
    TypeError_193478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 18), 'TypeError')
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 280, 12), TypeError_193478, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 279)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'e' (line 282)
    e_193479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 18), 'e')
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 282, 12), e_193479, 'raise parameter', BaseException)
    # SSA join for if statement (line 279)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except 'TypeError' branch of a try statement (line 216)
    # Storing handler type
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'TypeError' (line 283)
    TypeError_193480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 11), 'TypeError')
    # Assigning a type to the variable 'e' (line 283)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 283, 4), 'e', TypeError_193480)
    
    # Call to print(...): (line 284)
    # Processing the call arguments (line 284)
    # Getting the type of 'e' (line 284)
    e_193482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 14), 'e', False)
    # Processing the call keyword arguments (line 284)
    kwargs_193483 = {}
    # Getting the type of 'print' (line 284)
    print_193481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 8), 'print', False)
    # Calling print(args, kwargs) (line 284)
    print_call_result_193484 = invoke(stypy.reporting.localization.Localization(__file__, 284, 8), print_193481, *[e_193482], **kwargs_193483)
    
    
    # Call to TypeError(...): (line 285)
    # Processing the call arguments (line 285)
    str_193486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 286, 12), 'str', 'Invalid input for linprog: bounds must be a sequence of (min,max) pairs, each defining bounds on an element of x ')
    # Processing the call keyword arguments (line 285)
    kwargs_193487 = {}
    # Getting the type of 'TypeError' (line 285)
    TypeError_193485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 285)
    TypeError_call_result_193488 = invoke(stypy.reporting.localization.Localization(__file__, 285, 14), TypeError_193485, *[str_193486], **kwargs_193487)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 285, 8), TypeError_call_result_193488, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 216)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 289)
    tuple_193489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 289)
    # Adding element type (line 289)
    # Getting the type of 'c' (line 289)
    c_193490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 11), 'c')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 289, 11), tuple_193489, c_193490)
    # Adding element type (line 289)
    # Getting the type of 'A_ub' (line 289)
    A_ub_193491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 14), 'A_ub')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 289, 11), tuple_193489, A_ub_193491)
    # Adding element type (line 289)
    # Getting the type of 'b_ub' (line 289)
    b_ub_193492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 20), 'b_ub')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 289, 11), tuple_193489, b_ub_193492)
    # Adding element type (line 289)
    # Getting the type of 'A_eq' (line 289)
    A_eq_193493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 26), 'A_eq')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 289, 11), tuple_193489, A_eq_193493)
    # Adding element type (line 289)
    # Getting the type of 'b_eq' (line 289)
    b_eq_193494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 32), 'b_eq')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 289, 11), tuple_193489, b_eq_193494)
    # Adding element type (line 289)
    # Getting the type of 'bounds' (line 289)
    bounds_193495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 38), 'bounds')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 289, 11), tuple_193489, bounds_193495)
    
    # Assigning a type to the variable 'stypy_return_type' (line 289)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 289, 4), 'stypy_return_type', tuple_193489)
    
    # ################# End of '_clean_inputs(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_clean_inputs' in the type store
    # Getting the type of 'stypy_return_type' (line 18)
    stypy_return_type_193496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 18, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_193496)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_clean_inputs'
    return stypy_return_type_193496

# Assigning a type to the variable '_clean_inputs' (line 18)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 18, 0), '_clean_inputs', _clean_inputs)

@norecursion
def _presolve(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_presolve'
    module_type_store = module_type_store.open_function_context('_presolve', 292, 0, False)
    
    # Passed parameters checking function
    _presolve.stypy_localization = localization
    _presolve.stypy_type_of_self = None
    _presolve.stypy_type_store = module_type_store
    _presolve.stypy_function_name = '_presolve'
    _presolve.stypy_param_names_list = ['c', 'A_ub', 'b_ub', 'A_eq', 'b_eq', 'bounds', 'rr']
    _presolve.stypy_varargs_param_name = None
    _presolve.stypy_kwargs_param_name = None
    _presolve.stypy_call_defaults = defaults
    _presolve.stypy_call_varargs = varargs
    _presolve.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_presolve', ['c', 'A_ub', 'b_ub', 'A_eq', 'b_eq', 'bounds', 'rr'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_presolve', localization, ['c', 'A_ub', 'b_ub', 'A_eq', 'b_eq', 'bounds', 'rr'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_presolve(...)' code ##################

    str_193497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 374, (-1)), 'str', '\n    Given inputs for a linear programming problem in preferred format,\n    presolve the problem: identify trivial infeasibilities, redundancies,\n    and unboundedness, tighten bounds where possible, and eliminate fixed\n    variables.\n\n    Parameters\n    ----------\n    c : 1-D array\n        Coefficients of the linear objective function to be minimized.\n    A_ub : 2-D array\n        2-D array which, when matrix-multiplied by ``x``, gives the values of\n        the upper-bound inequality constraints at ``x``.\n    b_ub : 1-D array\n        1-D array of values representing the upper-bound of each inequality\n        constraint (row) in ``A_ub``.\n    A_eq : 2-D array\n        2-D array which, when matrix-multiplied by ``x``, gives the values of\n        the equality constraints at ``x``.\n    b_eq : 1-D array\n        1-D array of values representing the RHS of each equality constraint\n        (row) in ``A_eq``.\n    bounds : sequence of tuples\n        ``(min, max)`` pairs for each element in ``x``, defining\n        the bounds on that parameter. Use None for each of ``min`` or\n        ``max`` when there is no bound in that direction.\n\n    Returns\n    -------\n    c : 1-D array\n        Coefficients of the linear objective function to be minimized.\n    c0 : 1-D array\n        Constant term in objective function due to fixed (and eliminated)\n        variables.\n    A_ub : 2-D array\n        2-D array which, when matrix-multiplied by ``x``, gives the values of\n        the upper-bound inequality constraints at ``x``. Unnecessary\n        rows/columns have been removed.\n    b_ub : 1-D array\n        1-D array of values representing the upper-bound of each inequality\n        constraint (row) in ``A_ub``. Unnecessary elements have been removed.\n    A_eq : 2-D array\n        2-D array which, when matrix-multiplied by ``x``, gives the values of\n        the equality constraints at ``x``. Unnecessary rows/columns have been\n        removed.\n    b_eq : 1-D array\n        1-D array of values representing the RHS of each equality constraint\n        (row) in ``A_eq``. Unnecessary elements have been removed.\n    bounds : sequence of tuples\n        ``(min, max)`` pairs for each element in ``x``, defining\n        the bounds on that parameter. Use None for each of ``min`` or\n        ``max`` when there is no bound in that direction. Bounds have been\n        tightened where possible.\n    x : 1-D array\n        Solution vector (when the solution is trivial and can be determined\n        in presolve)\n    undo: list of tuples\n        (index, value) pairs that record the original index and fixed value\n        for each variable removed from the problem\n    complete: bool\n        Whether the solution is complete (solved or determined to be infeasible\n        or unbounded in presolve)\n    status : int\n        An integer representing the exit status of the optimization::\n\n         0 : Optimization terminated successfully\n         1 : Iteration limit reached\n         2 : Problem appears to be infeasible\n         3 : Problem appears to be unbounded\n\n    message : str\n        A string descriptor of the exit status of the optimization.\n\n    References\n    ----------\n    .. [2] Andersen, Erling D. "Finding all linearly dependent rows in\n           large-scale linear programming." Optimization Methods and Software\n           6.3 (1995): 219-227.\n    .. [5] Andersen, Erling D., and Knud D. Andersen. "Presolving in linear\n       programming." Mathematical Programming 71.2 (1995): 221-245.\n\n    ')
    
    # Assigning a Num to a Name (line 387):
    
    # Assigning a Num to a Name (line 387):
    float_193498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 387, 10), 'float')
    # Assigning a type to the variable 'tol' (line 387)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 387, 4), 'tol', float_193498)
    
    # Assigning a List to a Name (line 389):
    
    # Assigning a List to a Name (line 389):
    
    # Obtaining an instance of the builtin type 'list' (line 389)
    list_193499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 389, 11), 'list')
    # Adding type elements to the builtin type 'list' instance (line 389)
    
    # Assigning a type to the variable 'undo' (line 389)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 4), 'undo', list_193499)
    
    # Assigning a Num to a Name (line 391):
    
    # Assigning a Num to a Name (line 391):
    int_193500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 391, 9), 'int')
    # Assigning a type to the variable 'c0' (line 391)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 4), 'c0', int_193500)
    
    # Assigning a Name to a Name (line 392):
    
    # Assigning a Name to a Name (line 392):
    # Getting the type of 'False' (line 392)
    False_193501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 15), 'False')
    # Assigning a type to the variable 'complete' (line 392)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 392, 4), 'complete', False_193501)
    
    # Assigning a Call to a Name (line 393):
    
    # Assigning a Call to a Name (line 393):
    
    # Call to zeros(...): (line 393)
    # Processing the call arguments (line 393)
    # Getting the type of 'c' (line 393)
    c_193504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 17), 'c', False)
    # Obtaining the member 'shape' of a type (line 393)
    shape_193505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 17), c_193504, 'shape')
    # Processing the call keyword arguments (line 393)
    kwargs_193506 = {}
    # Getting the type of 'np' (line 393)
    np_193502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 8), 'np', False)
    # Obtaining the member 'zeros' of a type (line 393)
    zeros_193503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 8), np_193502, 'zeros')
    # Calling zeros(args, kwargs) (line 393)
    zeros_call_result_193507 = invoke(stypy.reporting.localization.Localization(__file__, 393, 8), zeros_193503, *[shape_193505], **kwargs_193506)
    
    # Assigning a type to the variable 'x' (line 393)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 4), 'x', zeros_call_result_193507)
    
    # Assigning a Num to a Name (line 395):
    
    # Assigning a Num to a Name (line 395):
    int_193508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 395, 13), 'int')
    # Assigning a type to the variable 'status' (line 395)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 395, 4), 'status', int_193508)
    
    # Assigning a Str to a Name (line 396):
    
    # Assigning a Str to a Name (line 396):
    str_193509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 396, 14), 'str', '')
    # Assigning a type to the variable 'message' (line 396)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 396, 4), 'message', str_193509)
    
    # Assigning a Call to a Name (line 401):
    
    # Assigning a Call to a Name (line 401):
    
    # Call to array(...): (line 401)
    # Processing the call arguments (line 401)
    # Getting the type of 'bounds' (line 401)
    bounds_193512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 22), 'bounds', False)
    # Processing the call keyword arguments (line 401)
    kwargs_193513 = {}
    # Getting the type of 'np' (line 401)
    np_193510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 13), 'np', False)
    # Obtaining the member 'array' of a type (line 401)
    array_193511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 401, 13), np_193510, 'array')
    # Calling array(args, kwargs) (line 401)
    array_call_result_193514 = invoke(stypy.reporting.localization.Localization(__file__, 401, 13), array_193511, *[bounds_193512], **kwargs_193513)
    
    # Assigning a type to the variable 'bounds' (line 401)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 401, 4), 'bounds', array_call_result_193514)
    
    # Assigning a Subscript to a Name (line 402):
    
    # Assigning a Subscript to a Name (line 402):
    
    # Obtaining the type of the subscript
    slice_193515 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 402, 9), None, None, None)
    int_193516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 402, 19), 'int')
    # Getting the type of 'bounds' (line 402)
    bounds_193517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 9), 'bounds')
    # Obtaining the member '__getitem__' of a type (line 402)
    getitem___193518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 402, 9), bounds_193517, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 402)
    subscript_call_result_193519 = invoke(stypy.reporting.localization.Localization(__file__, 402, 9), getitem___193518, (slice_193515, int_193516))
    
    # Assigning a type to the variable 'lb' (line 402)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 402, 4), 'lb', subscript_call_result_193519)
    
    # Assigning a Subscript to a Name (line 403):
    
    # Assigning a Subscript to a Name (line 403):
    
    # Obtaining the type of the subscript
    slice_193520 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 403, 9), None, None, None)
    int_193521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 19), 'int')
    # Getting the type of 'bounds' (line 403)
    bounds_193522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 9), 'bounds')
    # Obtaining the member '__getitem__' of a type (line 403)
    getitem___193523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 403, 9), bounds_193522, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 403)
    subscript_call_result_193524 = invoke(stypy.reporting.localization.Localization(__file__, 403, 9), getitem___193523, (slice_193520, int_193521))
    
    # Assigning a type to the variable 'ub' (line 403)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 4), 'ub', subscript_call_result_193524)
    
    # Assigning a UnaryOp to a Subscript (line 404):
    
    # Assigning a UnaryOp to a Subscript (line 404):
    
    # Getting the type of 'np' (line 404)
    np_193525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 30), 'np')
    # Obtaining the member 'inf' of a type (line 404)
    inf_193526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 404, 30), np_193525, 'inf')
    # Applying the 'usub' unary operator (line 404)
    result___neg___193527 = python_operator(stypy.reporting.localization.Localization(__file__, 404, 29), 'usub', inf_193526)
    
    # Getting the type of 'lb' (line 404)
    lb_193528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 4), 'lb')
    
    # Call to equal(...): (line 404)
    # Processing the call arguments (line 404)
    # Getting the type of 'lb' (line 404)
    lb_193531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 16), 'lb', False)
    # Getting the type of 'None' (line 404)
    None_193532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 20), 'None', False)
    # Processing the call keyword arguments (line 404)
    kwargs_193533 = {}
    # Getting the type of 'np' (line 404)
    np_193529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 7), 'np', False)
    # Obtaining the member 'equal' of a type (line 404)
    equal_193530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 404, 7), np_193529, 'equal')
    # Calling equal(args, kwargs) (line 404)
    equal_call_result_193534 = invoke(stypy.reporting.localization.Localization(__file__, 404, 7), equal_193530, *[lb_193531, None_193532], **kwargs_193533)
    
    # Storing an element on a container (line 404)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 404, 4), lb_193528, (equal_call_result_193534, result___neg___193527))
    
    # Assigning a Attribute to a Subscript (line 405):
    
    # Assigning a Attribute to a Subscript (line 405):
    # Getting the type of 'np' (line 405)
    np_193535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 29), 'np')
    # Obtaining the member 'inf' of a type (line 405)
    inf_193536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 405, 29), np_193535, 'inf')
    # Getting the type of 'ub' (line 405)
    ub_193537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 4), 'ub')
    
    # Call to equal(...): (line 405)
    # Processing the call arguments (line 405)
    # Getting the type of 'ub' (line 405)
    ub_193540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 16), 'ub', False)
    # Getting the type of 'None' (line 405)
    None_193541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 20), 'None', False)
    # Processing the call keyword arguments (line 405)
    kwargs_193542 = {}
    # Getting the type of 'np' (line 405)
    np_193538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 7), 'np', False)
    # Obtaining the member 'equal' of a type (line 405)
    equal_193539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 405, 7), np_193538, 'equal')
    # Calling equal(args, kwargs) (line 405)
    equal_call_result_193543 = invoke(stypy.reporting.localization.Localization(__file__, 405, 7), equal_193539, *[ub_193540, None_193541], **kwargs_193542)
    
    # Storing an element on a container (line 405)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 405, 4), ub_193537, (equal_call_result_193543, inf_193536))
    
    # Assigning a Call to a Name (line 406):
    
    # Assigning a Call to a Name (line 406):
    
    # Call to astype(...): (line 406)
    # Processing the call arguments (line 406)
    # Getting the type of 'float' (line 406)
    float_193546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 27), 'float', False)
    # Processing the call keyword arguments (line 406)
    kwargs_193547 = {}
    # Getting the type of 'bounds' (line 406)
    bounds_193544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 13), 'bounds', False)
    # Obtaining the member 'astype' of a type (line 406)
    astype_193545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 406, 13), bounds_193544, 'astype')
    # Calling astype(args, kwargs) (line 406)
    astype_call_result_193548 = invoke(stypy.reporting.localization.Localization(__file__, 406, 13), astype_193545, *[float_193546], **kwargs_193547)
    
    # Assigning a type to the variable 'bounds' (line 406)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 406, 4), 'bounds', astype_call_result_193548)
    
    # Assigning a Call to a Name (line 407):
    
    # Assigning a Call to a Name (line 407):
    
    # Call to astype(...): (line 407)
    # Processing the call arguments (line 407)
    # Getting the type of 'float' (line 407)
    float_193551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 19), 'float', False)
    # Processing the call keyword arguments (line 407)
    kwargs_193552 = {}
    # Getting the type of 'lb' (line 407)
    lb_193549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 9), 'lb', False)
    # Obtaining the member 'astype' of a type (line 407)
    astype_193550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 407, 9), lb_193549, 'astype')
    # Calling astype(args, kwargs) (line 407)
    astype_call_result_193553 = invoke(stypy.reporting.localization.Localization(__file__, 407, 9), astype_193550, *[float_193551], **kwargs_193552)
    
    # Assigning a type to the variable 'lb' (line 407)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 407, 4), 'lb', astype_call_result_193553)
    
    # Assigning a Call to a Name (line 408):
    
    # Assigning a Call to a Name (line 408):
    
    # Call to astype(...): (line 408)
    # Processing the call arguments (line 408)
    # Getting the type of 'float' (line 408)
    float_193556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 19), 'float', False)
    # Processing the call keyword arguments (line 408)
    kwargs_193557 = {}
    # Getting the type of 'ub' (line 408)
    ub_193554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 9), 'ub', False)
    # Obtaining the member 'astype' of a type (line 408)
    astype_193555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 408, 9), ub_193554, 'astype')
    # Calling astype(args, kwargs) (line 408)
    astype_call_result_193558 = invoke(stypy.reporting.localization.Localization(__file__, 408, 9), astype_193555, *[float_193556], **kwargs_193557)
    
    # Assigning a type to the variable 'ub' (line 408)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 408, 4), 'ub', astype_call_result_193558)
    
    # Assigning a Attribute to a Tuple (line 410):
    
    # Assigning a Subscript to a Name (line 410):
    
    # Obtaining the type of the subscript
    int_193559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 410, 4), 'int')
    # Getting the type of 'A_eq' (line 410)
    A_eq_193560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 14), 'A_eq')
    # Obtaining the member 'shape' of a type (line 410)
    shape_193561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 14), A_eq_193560, 'shape')
    # Obtaining the member '__getitem__' of a type (line 410)
    getitem___193562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 4), shape_193561, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 410)
    subscript_call_result_193563 = invoke(stypy.reporting.localization.Localization(__file__, 410, 4), getitem___193562, int_193559)
    
    # Assigning a type to the variable 'tuple_var_assignment_192557' (line 410)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 4), 'tuple_var_assignment_192557', subscript_call_result_193563)
    
    # Assigning a Subscript to a Name (line 410):
    
    # Obtaining the type of the subscript
    int_193564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 410, 4), 'int')
    # Getting the type of 'A_eq' (line 410)
    A_eq_193565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 14), 'A_eq')
    # Obtaining the member 'shape' of a type (line 410)
    shape_193566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 14), A_eq_193565, 'shape')
    # Obtaining the member '__getitem__' of a type (line 410)
    getitem___193567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 4), shape_193566, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 410)
    subscript_call_result_193568 = invoke(stypy.reporting.localization.Localization(__file__, 410, 4), getitem___193567, int_193564)
    
    # Assigning a type to the variable 'tuple_var_assignment_192558' (line 410)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 4), 'tuple_var_assignment_192558', subscript_call_result_193568)
    
    # Assigning a Name to a Name (line 410):
    # Getting the type of 'tuple_var_assignment_192557' (line 410)
    tuple_var_assignment_192557_193569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 4), 'tuple_var_assignment_192557')
    # Assigning a type to the variable 'm_eq' (line 410)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 4), 'm_eq', tuple_var_assignment_192557_193569)
    
    # Assigning a Name to a Name (line 410):
    # Getting the type of 'tuple_var_assignment_192558' (line 410)
    tuple_var_assignment_192558_193570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 4), 'tuple_var_assignment_192558')
    # Assigning a type to the variable 'n' (line 410)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 10), 'n', tuple_var_assignment_192558_193570)
    
    # Assigning a Attribute to a Tuple (line 411):
    
    # Assigning a Subscript to a Name (line 411):
    
    # Obtaining the type of the subscript
    int_193571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 411, 4), 'int')
    # Getting the type of 'A_ub' (line 411)
    A_ub_193572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 14), 'A_ub')
    # Obtaining the member 'shape' of a type (line 411)
    shape_193573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 14), A_ub_193572, 'shape')
    # Obtaining the member '__getitem__' of a type (line 411)
    getitem___193574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 4), shape_193573, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 411)
    subscript_call_result_193575 = invoke(stypy.reporting.localization.Localization(__file__, 411, 4), getitem___193574, int_193571)
    
    # Assigning a type to the variable 'tuple_var_assignment_192559' (line 411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 4), 'tuple_var_assignment_192559', subscript_call_result_193575)
    
    # Assigning a Subscript to a Name (line 411):
    
    # Obtaining the type of the subscript
    int_193576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 411, 4), 'int')
    # Getting the type of 'A_ub' (line 411)
    A_ub_193577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 14), 'A_ub')
    # Obtaining the member 'shape' of a type (line 411)
    shape_193578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 14), A_ub_193577, 'shape')
    # Obtaining the member '__getitem__' of a type (line 411)
    getitem___193579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 4), shape_193578, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 411)
    subscript_call_result_193580 = invoke(stypy.reporting.localization.Localization(__file__, 411, 4), getitem___193579, int_193576)
    
    # Assigning a type to the variable 'tuple_var_assignment_192560' (line 411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 4), 'tuple_var_assignment_192560', subscript_call_result_193580)
    
    # Assigning a Name to a Name (line 411):
    # Getting the type of 'tuple_var_assignment_192559' (line 411)
    tuple_var_assignment_192559_193581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 4), 'tuple_var_assignment_192559')
    # Assigning a type to the variable 'm_ub' (line 411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 4), 'm_ub', tuple_var_assignment_192559_193581)
    
    # Assigning a Name to a Name (line 411):
    # Getting the type of 'tuple_var_assignment_192560' (line 411)
    tuple_var_assignment_192560_193582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 4), 'tuple_var_assignment_192560')
    # Assigning a type to the variable 'n' (line 411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 10), 'n', tuple_var_assignment_192560_193582)
    
    
    # Call to issparse(...): (line 413)
    # Processing the call arguments (line 413)
    # Getting the type of 'A_eq' (line 413)
    A_eq_193585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 21), 'A_eq', False)
    # Processing the call keyword arguments (line 413)
    kwargs_193586 = {}
    # Getting the type of 'sps' (line 413)
    sps_193583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 8), 'sps', False)
    # Obtaining the member 'issparse' of a type (line 413)
    issparse_193584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 413, 8), sps_193583, 'issparse')
    # Calling issparse(args, kwargs) (line 413)
    issparse_call_result_193587 = invoke(stypy.reporting.localization.Localization(__file__, 413, 8), issparse_193584, *[A_eq_193585], **kwargs_193586)
    
    # Testing the type of an if condition (line 413)
    if_condition_193588 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 413, 4), issparse_call_result_193587)
    # Assigning a type to the variable 'if_condition_193588' (line 413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 413, 4), 'if_condition_193588', if_condition_193588)
    # SSA begins for if statement (line 413)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 414):
    
    # Assigning a Call to a Name (line 414):
    
    # Call to tolil(...): (line 414)
    # Processing the call keyword arguments (line 414)
    kwargs_193591 = {}
    # Getting the type of 'A_eq' (line 414)
    A_eq_193589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 15), 'A_eq', False)
    # Obtaining the member 'tolil' of a type (line 414)
    tolil_193590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 15), A_eq_193589, 'tolil')
    # Calling tolil(args, kwargs) (line 414)
    tolil_call_result_193592 = invoke(stypy.reporting.localization.Localization(__file__, 414, 15), tolil_193590, *[], **kwargs_193591)
    
    # Assigning a type to the variable 'A_eq' (line 414)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 414, 8), 'A_eq', tolil_call_result_193592)
    
    # Assigning a Call to a Name (line 415):
    
    # Assigning a Call to a Name (line 415):
    
    # Call to tolil(...): (line 415)
    # Processing the call keyword arguments (line 415)
    kwargs_193595 = {}
    # Getting the type of 'A_ub' (line 415)
    A_ub_193593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 15), 'A_ub', False)
    # Obtaining the member 'tolil' of a type (line 415)
    tolil_193594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 415, 15), A_ub_193593, 'tolil')
    # Calling tolil(args, kwargs) (line 415)
    tolil_call_result_193596 = invoke(stypy.reporting.localization.Localization(__file__, 415, 15), tolil_193594, *[], **kwargs_193595)
    
    # Assigning a type to the variable 'A_ub' (line 415)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 415, 8), 'A_ub', tolil_call_result_193596)

    @norecursion
    def where(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'where'
        module_type_store = module_type_store.open_function_context('where', 417, 8, False)
        
        # Passed parameters checking function
        where.stypy_localization = localization
        where.stypy_type_of_self = None
        where.stypy_type_store = module_type_store
        where.stypy_function_name = 'where'
        where.stypy_param_names_list = ['A']
        where.stypy_varargs_param_name = None
        where.stypy_kwargs_param_name = None
        where.stypy_call_defaults = defaults
        where.stypy_call_varargs = varargs
        where.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'where', ['A'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'where', localization, ['A'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'where(...)' code ##################

        
        # Call to nonzero(...): (line 418)
        # Processing the call keyword arguments (line 418)
        kwargs_193599 = {}
        # Getting the type of 'A' (line 418)
        A_193597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 19), 'A', False)
        # Obtaining the member 'nonzero' of a type (line 418)
        nonzero_193598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 418, 19), A_193597, 'nonzero')
        # Calling nonzero(args, kwargs) (line 418)
        nonzero_call_result_193600 = invoke(stypy.reporting.localization.Localization(__file__, 418, 19), nonzero_193598, *[], **kwargs_193599)
        
        # Assigning a type to the variable 'stypy_return_type' (line 418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 418, 12), 'stypy_return_type', nonzero_call_result_193600)
        
        # ################# End of 'where(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'where' in the type store
        # Getting the type of 'stypy_return_type' (line 417)
        stypy_return_type_193601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 8), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_193601)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'where'
        return stypy_return_type_193601

    # Assigning a type to the variable 'where' (line 417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 417, 8), 'where', where)
    
    # Assigning a Attribute to a Name (line 420):
    
    # Assigning a Attribute to a Name (line 420):
    # Getting the type of 'sps' (line 420)
    sps_193602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 17), 'sps')
    # Obtaining the member 'vstack' of a type (line 420)
    vstack_193603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 420, 17), sps_193602, 'vstack')
    # Assigning a type to the variable 'vstack' (line 420)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 420, 8), 'vstack', vstack_193603)
    # SSA branch for the else part of an if statement (line 413)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Attribute to a Name (line 422):
    
    # Assigning a Attribute to a Name (line 422):
    # Getting the type of 'np' (line 422)
    np_193604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 16), 'np')
    # Obtaining the member 'where' of a type (line 422)
    where_193605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 422, 16), np_193604, 'where')
    # Assigning a type to the variable 'where' (line 422)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 422, 8), 'where', where_193605)
    
    # Assigning a Attribute to a Name (line 423):
    
    # Assigning a Attribute to a Name (line 423):
    # Getting the type of 'np' (line 423)
    np_193606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 17), 'np')
    # Obtaining the member 'vstack' of a type (line 423)
    vstack_193607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 423, 17), np_193606, 'vstack')
    # Assigning a type to the variable 'vstack' (line 423)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 423, 8), 'vstack', vstack_193607)
    # SSA join for if statement (line 413)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 426):
    
    # Assigning a Call to a Name (line 426):
    
    # Call to flatten(...): (line 426)
    # Processing the call keyword arguments (line 426)
    kwargs_193624 = {}
    
    # Call to array(...): (line 426)
    # Processing the call arguments (line 426)
    
    
    # Call to sum(...): (line 426)
    # Processing the call arguments (line 426)
    
    # Getting the type of 'A_eq' (line 426)
    A_eq_193612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 31), 'A_eq', False)
    int_193613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 39), 'int')
    # Applying the binary operator '!=' (line 426)
    result_ne_193614 = python_operator(stypy.reporting.localization.Localization(__file__, 426, 31), '!=', A_eq_193612, int_193613)
    
    # Processing the call keyword arguments (line 426)
    int_193615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 47), 'int')
    keyword_193616 = int_193615
    kwargs_193617 = {'axis': keyword_193616}
    # Getting the type of 'np' (line 426)
    np_193610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 24), 'np', False)
    # Obtaining the member 'sum' of a type (line 426)
    sum_193611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 426, 24), np_193610, 'sum')
    # Calling sum(args, kwargs) (line 426)
    sum_call_result_193618 = invoke(stypy.reporting.localization.Localization(__file__, 426, 24), sum_193611, *[result_ne_193614], **kwargs_193617)
    
    int_193619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 53), 'int')
    # Applying the binary operator '==' (line 426)
    result_eq_193620 = python_operator(stypy.reporting.localization.Localization(__file__, 426, 24), '==', sum_call_result_193618, int_193619)
    
    # Processing the call keyword arguments (line 426)
    kwargs_193621 = {}
    # Getting the type of 'np' (line 426)
    np_193608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 15), 'np', False)
    # Obtaining the member 'array' of a type (line 426)
    array_193609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 426, 15), np_193608, 'array')
    # Calling array(args, kwargs) (line 426)
    array_call_result_193622 = invoke(stypy.reporting.localization.Localization(__file__, 426, 15), array_193609, *[result_eq_193620], **kwargs_193621)
    
    # Obtaining the member 'flatten' of a type (line 426)
    flatten_193623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 426, 15), array_call_result_193622, 'flatten')
    # Calling flatten(args, kwargs) (line 426)
    flatten_call_result_193625 = invoke(stypy.reporting.localization.Localization(__file__, 426, 15), flatten_193623, *[], **kwargs_193624)
    
    # Assigning a type to the variable 'zero_row' (line 426)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 426, 4), 'zero_row', flatten_call_result_193625)
    
    
    # Call to any(...): (line 427)
    # Processing the call arguments (line 427)
    # Getting the type of 'zero_row' (line 427)
    zero_row_193628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 14), 'zero_row', False)
    # Processing the call keyword arguments (line 427)
    kwargs_193629 = {}
    # Getting the type of 'np' (line 427)
    np_193626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 7), 'np', False)
    # Obtaining the member 'any' of a type (line 427)
    any_193627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 427, 7), np_193626, 'any')
    # Calling any(args, kwargs) (line 427)
    any_call_result_193630 = invoke(stypy.reporting.localization.Localization(__file__, 427, 7), any_193627, *[zero_row_193628], **kwargs_193629)
    
    # Testing the type of an if condition (line 427)
    if_condition_193631 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 427, 4), any_call_result_193630)
    # Assigning a type to the variable 'if_condition_193631' (line 427)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 4), 'if_condition_193631', if_condition_193631)
    # SSA begins for if statement (line 427)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to any(...): (line 428)
    # Processing the call arguments (line 428)
    
    # Call to logical_and(...): (line 429)
    # Processing the call arguments (line 429)
    # Getting the type of 'zero_row' (line 430)
    zero_row_193636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 16), 'zero_row', False)
    
    
    # Call to abs(...): (line 431)
    # Processing the call arguments (line 431)
    # Getting the type of 'b_eq' (line 431)
    b_eq_193639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 23), 'b_eq', False)
    # Processing the call keyword arguments (line 431)
    kwargs_193640 = {}
    # Getting the type of 'np' (line 431)
    np_193637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 16), 'np', False)
    # Obtaining the member 'abs' of a type (line 431)
    abs_193638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 431, 16), np_193637, 'abs')
    # Calling abs(args, kwargs) (line 431)
    abs_call_result_193641 = invoke(stypy.reporting.localization.Localization(__file__, 431, 16), abs_193638, *[b_eq_193639], **kwargs_193640)
    
    # Getting the type of 'tol' (line 431)
    tol_193642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 31), 'tol', False)
    # Applying the binary operator '>' (line 431)
    result_gt_193643 = python_operator(stypy.reporting.localization.Localization(__file__, 431, 16), '>', abs_call_result_193641, tol_193642)
    
    # Processing the call keyword arguments (line 429)
    kwargs_193644 = {}
    # Getting the type of 'np' (line 429)
    np_193634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 12), 'np', False)
    # Obtaining the member 'logical_and' of a type (line 429)
    logical_and_193635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 429, 12), np_193634, 'logical_and')
    # Calling logical_and(args, kwargs) (line 429)
    logical_and_call_result_193645 = invoke(stypy.reporting.localization.Localization(__file__, 429, 12), logical_and_193635, *[zero_row_193636, result_gt_193643], **kwargs_193644)
    
    # Processing the call keyword arguments (line 428)
    kwargs_193646 = {}
    # Getting the type of 'np' (line 428)
    np_193632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 11), 'np', False)
    # Obtaining the member 'any' of a type (line 428)
    any_193633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 11), np_193632, 'any')
    # Calling any(args, kwargs) (line 428)
    any_call_result_193647 = invoke(stypy.reporting.localization.Localization(__file__, 428, 11), any_193633, *[logical_and_call_result_193645], **kwargs_193646)
    
    # Testing the type of an if condition (line 428)
    if_condition_193648 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 428, 8), any_call_result_193647)
    # Assigning a type to the variable 'if_condition_193648' (line 428)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 8), 'if_condition_193648', if_condition_193648)
    # SSA begins for if statement (line 428)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 433):
    
    # Assigning a Num to a Name (line 433):
    int_193649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 433, 21), 'int')
    # Assigning a type to the variable 'status' (line 433)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 433, 12), 'status', int_193649)
    
    # Assigning a Str to a Name (line 434):
    
    # Assigning a Str to a Name (line 434):
    str_193650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 434, 23), 'str', 'The problem is (trivially) infeasible due to a row of zeros in the equality constraint matrix with a nonzero corresponding constraint value.')
    # Assigning a type to the variable 'message' (line 434)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 12), 'message', str_193650)
    
    # Assigning a Name to a Name (line 437):
    
    # Assigning a Name to a Name (line 437):
    # Getting the type of 'True' (line 437)
    True_193651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 23), 'True')
    # Assigning a type to the variable 'complete' (line 437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 437, 12), 'complete', True_193651)
    
    # Obtaining an instance of the builtin type 'tuple' (line 438)
    tuple_193652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 438, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 438)
    # Adding element type (line 438)
    # Getting the type of 'c' (line 438)
    c_193653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 20), 'c')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 438, 20), tuple_193652, c_193653)
    # Adding element type (line 438)
    # Getting the type of 'c0' (line 438)
    c0_193654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 23), 'c0')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 438, 20), tuple_193652, c0_193654)
    # Adding element type (line 438)
    # Getting the type of 'A_ub' (line 438)
    A_ub_193655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 27), 'A_ub')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 438, 20), tuple_193652, A_ub_193655)
    # Adding element type (line 438)
    # Getting the type of 'b_ub' (line 438)
    b_ub_193656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 33), 'b_ub')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 438, 20), tuple_193652, b_ub_193656)
    # Adding element type (line 438)
    # Getting the type of 'A_eq' (line 438)
    A_eq_193657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 39), 'A_eq')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 438, 20), tuple_193652, A_eq_193657)
    # Adding element type (line 438)
    # Getting the type of 'b_eq' (line 438)
    b_eq_193658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 45), 'b_eq')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 438, 20), tuple_193652, b_eq_193658)
    # Adding element type (line 438)
    # Getting the type of 'bounds' (line 438)
    bounds_193659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 51), 'bounds')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 438, 20), tuple_193652, bounds_193659)
    # Adding element type (line 438)
    # Getting the type of 'x' (line 439)
    x_193660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 20), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 438, 20), tuple_193652, x_193660)
    # Adding element type (line 438)
    # Getting the type of 'undo' (line 439)
    undo_193661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 23), 'undo')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 438, 20), tuple_193652, undo_193661)
    # Adding element type (line 438)
    # Getting the type of 'complete' (line 439)
    complete_193662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 29), 'complete')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 438, 20), tuple_193652, complete_193662)
    # Adding element type (line 438)
    # Getting the type of 'status' (line 439)
    status_193663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 39), 'status')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 438, 20), tuple_193652, status_193663)
    # Adding element type (line 438)
    # Getting the type of 'message' (line 439)
    message_193664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 47), 'message')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 438, 20), tuple_193652, message_193664)
    
    # Assigning a type to the variable 'stypy_return_type' (line 438)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 438, 12), 'stypy_return_type', tuple_193652)
    # SSA branch for the else part of an if statement (line 428)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Subscript to a Name (line 442):
    
    # Assigning a Subscript to a Name (line 442):
    
    # Obtaining the type of the subscript
    
    # Call to logical_not(...): (line 442)
    # Processing the call arguments (line 442)
    # Getting the type of 'zero_row' (line 442)
    zero_row_193667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 39), 'zero_row', False)
    # Processing the call keyword arguments (line 442)
    kwargs_193668 = {}
    # Getting the type of 'np' (line 442)
    np_193665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 24), 'np', False)
    # Obtaining the member 'logical_not' of a type (line 442)
    logical_not_193666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 442, 24), np_193665, 'logical_not')
    # Calling logical_not(args, kwargs) (line 442)
    logical_not_call_result_193669 = invoke(stypy.reporting.localization.Localization(__file__, 442, 24), logical_not_193666, *[zero_row_193667], **kwargs_193668)
    
    slice_193670 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 442, 19), None, None, None)
    # Getting the type of 'A_eq' (line 442)
    A_eq_193671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 19), 'A_eq')
    # Obtaining the member '__getitem__' of a type (line 442)
    getitem___193672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 442, 19), A_eq_193671, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 442)
    subscript_call_result_193673 = invoke(stypy.reporting.localization.Localization(__file__, 442, 19), getitem___193672, (logical_not_call_result_193669, slice_193670))
    
    # Assigning a type to the variable 'A_eq' (line 442)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 442, 12), 'A_eq', subscript_call_result_193673)
    
    # Assigning a Subscript to a Name (line 443):
    
    # Assigning a Subscript to a Name (line 443):
    
    # Obtaining the type of the subscript
    
    # Call to logical_not(...): (line 443)
    # Processing the call arguments (line 443)
    # Getting the type of 'zero_row' (line 443)
    zero_row_193676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 39), 'zero_row', False)
    # Processing the call keyword arguments (line 443)
    kwargs_193677 = {}
    # Getting the type of 'np' (line 443)
    np_193674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 24), 'np', False)
    # Obtaining the member 'logical_not' of a type (line 443)
    logical_not_193675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 443, 24), np_193674, 'logical_not')
    # Calling logical_not(args, kwargs) (line 443)
    logical_not_call_result_193678 = invoke(stypy.reporting.localization.Localization(__file__, 443, 24), logical_not_193675, *[zero_row_193676], **kwargs_193677)
    
    # Getting the type of 'b_eq' (line 443)
    b_eq_193679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 19), 'b_eq')
    # Obtaining the member '__getitem__' of a type (line 443)
    getitem___193680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 443, 19), b_eq_193679, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 443)
    subscript_call_result_193681 = invoke(stypy.reporting.localization.Localization(__file__, 443, 19), getitem___193680, logical_not_call_result_193678)
    
    # Assigning a type to the variable 'b_eq' (line 443)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 443, 12), 'b_eq', subscript_call_result_193681)
    # SSA join for if statement (line 428)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 427)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 446):
    
    # Assigning a Call to a Name (line 446):
    
    # Call to flatten(...): (line 446)
    # Processing the call keyword arguments (line 446)
    kwargs_193698 = {}
    
    # Call to array(...): (line 446)
    # Processing the call arguments (line 446)
    
    
    # Call to sum(...): (line 446)
    # Processing the call arguments (line 446)
    
    # Getting the type of 'A_ub' (line 446)
    A_ub_193686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 31), 'A_ub', False)
    int_193687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 446, 39), 'int')
    # Applying the binary operator '!=' (line 446)
    result_ne_193688 = python_operator(stypy.reporting.localization.Localization(__file__, 446, 31), '!=', A_ub_193686, int_193687)
    
    # Processing the call keyword arguments (line 446)
    int_193689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 446, 47), 'int')
    keyword_193690 = int_193689
    kwargs_193691 = {'axis': keyword_193690}
    # Getting the type of 'np' (line 446)
    np_193684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 24), 'np', False)
    # Obtaining the member 'sum' of a type (line 446)
    sum_193685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 24), np_193684, 'sum')
    # Calling sum(args, kwargs) (line 446)
    sum_call_result_193692 = invoke(stypy.reporting.localization.Localization(__file__, 446, 24), sum_193685, *[result_ne_193688], **kwargs_193691)
    
    int_193693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 446, 53), 'int')
    # Applying the binary operator '==' (line 446)
    result_eq_193694 = python_operator(stypy.reporting.localization.Localization(__file__, 446, 24), '==', sum_call_result_193692, int_193693)
    
    # Processing the call keyword arguments (line 446)
    kwargs_193695 = {}
    # Getting the type of 'np' (line 446)
    np_193682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 15), 'np', False)
    # Obtaining the member 'array' of a type (line 446)
    array_193683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 15), np_193682, 'array')
    # Calling array(args, kwargs) (line 446)
    array_call_result_193696 = invoke(stypy.reporting.localization.Localization(__file__, 446, 15), array_193683, *[result_eq_193694], **kwargs_193695)
    
    # Obtaining the member 'flatten' of a type (line 446)
    flatten_193697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 15), array_call_result_193696, 'flatten')
    # Calling flatten(args, kwargs) (line 446)
    flatten_call_result_193699 = invoke(stypy.reporting.localization.Localization(__file__, 446, 15), flatten_193697, *[], **kwargs_193698)
    
    # Assigning a type to the variable 'zero_row' (line 446)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 4), 'zero_row', flatten_call_result_193699)
    
    
    # Call to any(...): (line 447)
    # Processing the call arguments (line 447)
    # Getting the type of 'zero_row' (line 447)
    zero_row_193702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 14), 'zero_row', False)
    # Processing the call keyword arguments (line 447)
    kwargs_193703 = {}
    # Getting the type of 'np' (line 447)
    np_193700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 7), 'np', False)
    # Obtaining the member 'any' of a type (line 447)
    any_193701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 447, 7), np_193700, 'any')
    # Calling any(args, kwargs) (line 447)
    any_call_result_193704 = invoke(stypy.reporting.localization.Localization(__file__, 447, 7), any_193701, *[zero_row_193702], **kwargs_193703)
    
    # Testing the type of an if condition (line 447)
    if_condition_193705 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 447, 4), any_call_result_193704)
    # Assigning a type to the variable 'if_condition_193705' (line 447)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 447, 4), 'if_condition_193705', if_condition_193705)
    # SSA begins for if statement (line 447)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to any(...): (line 448)
    # Processing the call arguments (line 448)
    
    # Call to logical_and(...): (line 448)
    # Processing the call arguments (line 448)
    # Getting the type of 'zero_row' (line 448)
    zero_row_193710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 33), 'zero_row', False)
    
    # Getting the type of 'b_ub' (line 448)
    b_ub_193711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 43), 'b_ub', False)
    
    # Getting the type of 'tol' (line 448)
    tol_193712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 51), 'tol', False)
    # Applying the 'usub' unary operator (line 448)
    result___neg___193713 = python_operator(stypy.reporting.localization.Localization(__file__, 448, 50), 'usub', tol_193712)
    
    # Applying the binary operator '<' (line 448)
    result_lt_193714 = python_operator(stypy.reporting.localization.Localization(__file__, 448, 43), '<', b_ub_193711, result___neg___193713)
    
    # Processing the call keyword arguments (line 448)
    kwargs_193715 = {}
    # Getting the type of 'np' (line 448)
    np_193708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 18), 'np', False)
    # Obtaining the member 'logical_and' of a type (line 448)
    logical_and_193709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 448, 18), np_193708, 'logical_and')
    # Calling logical_and(args, kwargs) (line 448)
    logical_and_call_result_193716 = invoke(stypy.reporting.localization.Localization(__file__, 448, 18), logical_and_193709, *[zero_row_193710, result_lt_193714], **kwargs_193715)
    
    # Processing the call keyword arguments (line 448)
    kwargs_193717 = {}
    # Getting the type of 'np' (line 448)
    np_193706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 11), 'np', False)
    # Obtaining the member 'any' of a type (line 448)
    any_193707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 448, 11), np_193706, 'any')
    # Calling any(args, kwargs) (line 448)
    any_call_result_193718 = invoke(stypy.reporting.localization.Localization(__file__, 448, 11), any_193707, *[logical_and_call_result_193716], **kwargs_193717)
    
    # Testing the type of an if condition (line 448)
    if_condition_193719 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 448, 8), any_call_result_193718)
    # Assigning a type to the variable 'if_condition_193719' (line 448)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 448, 8), 'if_condition_193719', if_condition_193719)
    # SSA begins for if statement (line 448)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 450):
    
    # Assigning a Num to a Name (line 450):
    int_193720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 450, 21), 'int')
    # Assigning a type to the variable 'status' (line 450)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 450, 12), 'status', int_193720)
    
    # Assigning a Str to a Name (line 451):
    
    # Assigning a Str to a Name (line 451):
    str_193721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 451, 23), 'str', 'The problem is (trivially) infeasible due to a row of zeros in the equality constraint matrix with a nonzero corresponding  constraint value.')
    # Assigning a type to the variable 'message' (line 451)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 451, 12), 'message', str_193721)
    
    # Assigning a Name to a Name (line 454):
    
    # Assigning a Name to a Name (line 454):
    # Getting the type of 'True' (line 454)
    True_193722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 23), 'True')
    # Assigning a type to the variable 'complete' (line 454)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 454, 12), 'complete', True_193722)
    
    # Obtaining an instance of the builtin type 'tuple' (line 455)
    tuple_193723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 455, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 455)
    # Adding element type (line 455)
    # Getting the type of 'c' (line 455)
    c_193724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 20), 'c')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 455, 20), tuple_193723, c_193724)
    # Adding element type (line 455)
    # Getting the type of 'c0' (line 455)
    c0_193725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 23), 'c0')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 455, 20), tuple_193723, c0_193725)
    # Adding element type (line 455)
    # Getting the type of 'A_ub' (line 455)
    A_ub_193726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 27), 'A_ub')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 455, 20), tuple_193723, A_ub_193726)
    # Adding element type (line 455)
    # Getting the type of 'b_ub' (line 455)
    b_ub_193727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 33), 'b_ub')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 455, 20), tuple_193723, b_ub_193727)
    # Adding element type (line 455)
    # Getting the type of 'A_eq' (line 455)
    A_eq_193728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 39), 'A_eq')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 455, 20), tuple_193723, A_eq_193728)
    # Adding element type (line 455)
    # Getting the type of 'b_eq' (line 455)
    b_eq_193729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 45), 'b_eq')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 455, 20), tuple_193723, b_eq_193729)
    # Adding element type (line 455)
    # Getting the type of 'bounds' (line 455)
    bounds_193730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 51), 'bounds')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 455, 20), tuple_193723, bounds_193730)
    # Adding element type (line 455)
    # Getting the type of 'x' (line 456)
    x_193731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 20), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 455, 20), tuple_193723, x_193731)
    # Adding element type (line 455)
    # Getting the type of 'undo' (line 456)
    undo_193732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 23), 'undo')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 455, 20), tuple_193723, undo_193732)
    # Adding element type (line 455)
    # Getting the type of 'complete' (line 456)
    complete_193733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 29), 'complete')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 455, 20), tuple_193723, complete_193733)
    # Adding element type (line 455)
    # Getting the type of 'status' (line 456)
    status_193734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 39), 'status')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 455, 20), tuple_193723, status_193734)
    # Adding element type (line 455)
    # Getting the type of 'message' (line 456)
    message_193735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 47), 'message')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 455, 20), tuple_193723, message_193735)
    
    # Assigning a type to the variable 'stypy_return_type' (line 455)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 455, 12), 'stypy_return_type', tuple_193723)
    # SSA branch for the else part of an if statement (line 448)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Subscript to a Name (line 459):
    
    # Assigning a Subscript to a Name (line 459):
    
    # Obtaining the type of the subscript
    
    # Call to logical_not(...): (line 459)
    # Processing the call arguments (line 459)
    # Getting the type of 'zero_row' (line 459)
    zero_row_193738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 39), 'zero_row', False)
    # Processing the call keyword arguments (line 459)
    kwargs_193739 = {}
    # Getting the type of 'np' (line 459)
    np_193736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 24), 'np', False)
    # Obtaining the member 'logical_not' of a type (line 459)
    logical_not_193737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 459, 24), np_193736, 'logical_not')
    # Calling logical_not(args, kwargs) (line 459)
    logical_not_call_result_193740 = invoke(stypy.reporting.localization.Localization(__file__, 459, 24), logical_not_193737, *[zero_row_193738], **kwargs_193739)
    
    slice_193741 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 459, 19), None, None, None)
    # Getting the type of 'A_ub' (line 459)
    A_ub_193742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 19), 'A_ub')
    # Obtaining the member '__getitem__' of a type (line 459)
    getitem___193743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 459, 19), A_ub_193742, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 459)
    subscript_call_result_193744 = invoke(stypy.reporting.localization.Localization(__file__, 459, 19), getitem___193743, (logical_not_call_result_193740, slice_193741))
    
    # Assigning a type to the variable 'A_ub' (line 459)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 459, 12), 'A_ub', subscript_call_result_193744)
    
    # Assigning a Subscript to a Name (line 460):
    
    # Assigning a Subscript to a Name (line 460):
    
    # Obtaining the type of the subscript
    
    # Call to logical_not(...): (line 460)
    # Processing the call arguments (line 460)
    # Getting the type of 'zero_row' (line 460)
    zero_row_193747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 39), 'zero_row', False)
    # Processing the call keyword arguments (line 460)
    kwargs_193748 = {}
    # Getting the type of 'np' (line 460)
    np_193745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 24), 'np', False)
    # Obtaining the member 'logical_not' of a type (line 460)
    logical_not_193746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 24), np_193745, 'logical_not')
    # Calling logical_not(args, kwargs) (line 460)
    logical_not_call_result_193749 = invoke(stypy.reporting.localization.Localization(__file__, 460, 24), logical_not_193746, *[zero_row_193747], **kwargs_193748)
    
    # Getting the type of 'b_ub' (line 460)
    b_ub_193750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 19), 'b_ub')
    # Obtaining the member '__getitem__' of a type (line 460)
    getitem___193751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 19), b_ub_193750, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 460)
    subscript_call_result_193752 = invoke(stypy.reporting.localization.Localization(__file__, 460, 19), getitem___193751, logical_not_call_result_193749)
    
    # Assigning a type to the variable 'b_ub' (line 460)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 460, 12), 'b_ub', subscript_call_result_193752)
    # SSA join for if statement (line 448)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 447)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 464):
    
    # Assigning a Call to a Name (line 464):
    
    # Call to vstack(...): (line 464)
    # Processing the call arguments (line 464)
    
    # Obtaining an instance of the builtin type 'tuple' (line 464)
    tuple_193754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 16), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 464)
    # Adding element type (line 464)
    # Getting the type of 'A_eq' (line 464)
    A_eq_193755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 16), 'A_eq', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 464, 16), tuple_193754, A_eq_193755)
    # Adding element type (line 464)
    # Getting the type of 'A_ub' (line 464)
    A_ub_193756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 22), 'A_ub', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 464, 16), tuple_193754, A_ub_193756)
    
    # Processing the call keyword arguments (line 464)
    kwargs_193757 = {}
    # Getting the type of 'vstack' (line 464)
    vstack_193753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 8), 'vstack', False)
    # Calling vstack(args, kwargs) (line 464)
    vstack_call_result_193758 = invoke(stypy.reporting.localization.Localization(__file__, 464, 8), vstack_193753, *[tuple_193754], **kwargs_193757)
    
    # Assigning a type to the variable 'A' (line 464)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 4), 'A', vstack_call_result_193758)
    
    
    
    # Obtaining the type of the subscript
    int_193759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 465, 15), 'int')
    # Getting the type of 'A' (line 465)
    A_193760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 7), 'A')
    # Obtaining the member 'shape' of a type (line 465)
    shape_193761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 465, 7), A_193760, 'shape')
    # Obtaining the member '__getitem__' of a type (line 465)
    getitem___193762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 465, 7), shape_193761, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 465)
    subscript_call_result_193763 = invoke(stypy.reporting.localization.Localization(__file__, 465, 7), getitem___193762, int_193759)
    
    int_193764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 465, 20), 'int')
    # Applying the binary operator '>' (line 465)
    result_gt_193765 = python_operator(stypy.reporting.localization.Localization(__file__, 465, 7), '>', subscript_call_result_193763, int_193764)
    
    # Testing the type of an if condition (line 465)
    if_condition_193766 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 465, 4), result_gt_193765)
    # Assigning a type to the variable 'if_condition_193766' (line 465)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 465, 4), 'if_condition_193766', if_condition_193766)
    # SSA begins for if statement (line 465)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 466):
    
    # Assigning a Call to a Name (line 466):
    
    # Call to flatten(...): (line 466)
    # Processing the call keyword arguments (line 466)
    kwargs_193783 = {}
    
    # Call to array(...): (line 466)
    # Processing the call arguments (line 466)
    
    
    # Call to sum(...): (line 466)
    # Processing the call arguments (line 466)
    
    # Getting the type of 'A' (line 466)
    A_193771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 35), 'A', False)
    int_193772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 466, 40), 'int')
    # Applying the binary operator '!=' (line 466)
    result_ne_193773 = python_operator(stypy.reporting.localization.Localization(__file__, 466, 35), '!=', A_193771, int_193772)
    
    # Processing the call keyword arguments (line 466)
    int_193774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 466, 48), 'int')
    keyword_193775 = int_193774
    kwargs_193776 = {'axis': keyword_193775}
    # Getting the type of 'np' (line 466)
    np_193769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 28), 'np', False)
    # Obtaining the member 'sum' of a type (line 466)
    sum_193770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 28), np_193769, 'sum')
    # Calling sum(args, kwargs) (line 466)
    sum_call_result_193777 = invoke(stypy.reporting.localization.Localization(__file__, 466, 28), sum_193770, *[result_ne_193773], **kwargs_193776)
    
    int_193778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 466, 54), 'int')
    # Applying the binary operator '==' (line 466)
    result_eq_193779 = python_operator(stypy.reporting.localization.Localization(__file__, 466, 28), '==', sum_call_result_193777, int_193778)
    
    # Processing the call keyword arguments (line 466)
    kwargs_193780 = {}
    # Getting the type of 'np' (line 466)
    np_193767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 19), 'np', False)
    # Obtaining the member 'array' of a type (line 466)
    array_193768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 19), np_193767, 'array')
    # Calling array(args, kwargs) (line 466)
    array_call_result_193781 = invoke(stypy.reporting.localization.Localization(__file__, 466, 19), array_193768, *[result_eq_193779], **kwargs_193780)
    
    # Obtaining the member 'flatten' of a type (line 466)
    flatten_193782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 19), array_call_result_193781, 'flatten')
    # Calling flatten(args, kwargs) (line 466)
    flatten_call_result_193784 = invoke(stypy.reporting.localization.Localization(__file__, 466, 19), flatten_193782, *[], **kwargs_193783)
    
    # Assigning a type to the variable 'zero_col' (line 466)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 466, 8), 'zero_col', flatten_call_result_193784)
    
    # Assigning a Subscript to a Subscript (line 468):
    
    # Assigning a Subscript to a Subscript (line 468):
    
    # Obtaining the type of the subscript
    
    # Call to logical_and(...): (line 469)
    # Processing the call arguments (line 469)
    # Getting the type of 'zero_col' (line 469)
    zero_col_193787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 27), 'zero_col', False)
    
    # Getting the type of 'c' (line 469)
    c_193788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 37), 'c', False)
    int_193789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 469, 41), 'int')
    # Applying the binary operator '<' (line 469)
    result_lt_193790 = python_operator(stypy.reporting.localization.Localization(__file__, 469, 37), '<', c_193788, int_193789)
    
    # Processing the call keyword arguments (line 469)
    kwargs_193791 = {}
    # Getting the type of 'np' (line 469)
    np_193785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 12), 'np', False)
    # Obtaining the member 'logical_and' of a type (line 469)
    logical_and_193786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 469, 12), np_193785, 'logical_and')
    # Calling logical_and(args, kwargs) (line 469)
    logical_and_call_result_193792 = invoke(stypy.reporting.localization.Localization(__file__, 469, 12), logical_and_193786, *[zero_col_193787, result_lt_193790], **kwargs_193791)
    
    # Getting the type of 'ub' (line 468)
    ub_193793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 45), 'ub')
    # Obtaining the member '__getitem__' of a type (line 468)
    getitem___193794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 45), ub_193793, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 468)
    subscript_call_result_193795 = invoke(stypy.reporting.localization.Localization(__file__, 468, 45), getitem___193794, logical_and_call_result_193792)
    
    # Getting the type of 'x' (line 468)
    x_193796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 8), 'x')
    
    # Call to logical_and(...): (line 468)
    # Processing the call arguments (line 468)
    # Getting the type of 'zero_col' (line 468)
    zero_col_193799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 25), 'zero_col', False)
    
    # Getting the type of 'c' (line 468)
    c_193800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 35), 'c', False)
    int_193801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 468, 39), 'int')
    # Applying the binary operator '<' (line 468)
    result_lt_193802 = python_operator(stypy.reporting.localization.Localization(__file__, 468, 35), '<', c_193800, int_193801)
    
    # Processing the call keyword arguments (line 468)
    kwargs_193803 = {}
    # Getting the type of 'np' (line 468)
    np_193797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 10), 'np', False)
    # Obtaining the member 'logical_and' of a type (line 468)
    logical_and_193798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 10), np_193797, 'logical_and')
    # Calling logical_and(args, kwargs) (line 468)
    logical_and_call_result_193804 = invoke(stypy.reporting.localization.Localization(__file__, 468, 10), logical_and_193798, *[zero_col_193799, result_lt_193802], **kwargs_193803)
    
    # Storing an element on a container (line 468)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 468, 8), x_193796, (logical_and_call_result_193804, subscript_call_result_193795))
    
    # Assigning a Subscript to a Subscript (line 470):
    
    # Assigning a Subscript to a Subscript (line 470):
    
    # Obtaining the type of the subscript
    
    # Call to logical_and(...): (line 471)
    # Processing the call arguments (line 471)
    # Getting the type of 'zero_col' (line 471)
    zero_col_193807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 27), 'zero_col', False)
    
    # Getting the type of 'c' (line 471)
    c_193808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 37), 'c', False)
    int_193809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 471, 41), 'int')
    # Applying the binary operator '>' (line 471)
    result_gt_193810 = python_operator(stypy.reporting.localization.Localization(__file__, 471, 37), '>', c_193808, int_193809)
    
    # Processing the call keyword arguments (line 471)
    kwargs_193811 = {}
    # Getting the type of 'np' (line 471)
    np_193805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 12), 'np', False)
    # Obtaining the member 'logical_and' of a type (line 471)
    logical_and_193806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 471, 12), np_193805, 'logical_and')
    # Calling logical_and(args, kwargs) (line 471)
    logical_and_call_result_193812 = invoke(stypy.reporting.localization.Localization(__file__, 471, 12), logical_and_193806, *[zero_col_193807, result_gt_193810], **kwargs_193811)
    
    # Getting the type of 'lb' (line 470)
    lb_193813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 45), 'lb')
    # Obtaining the member '__getitem__' of a type (line 470)
    getitem___193814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 470, 45), lb_193813, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 470)
    subscript_call_result_193815 = invoke(stypy.reporting.localization.Localization(__file__, 470, 45), getitem___193814, logical_and_call_result_193812)
    
    # Getting the type of 'x' (line 470)
    x_193816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 8), 'x')
    
    # Call to logical_and(...): (line 470)
    # Processing the call arguments (line 470)
    # Getting the type of 'zero_col' (line 470)
    zero_col_193819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 25), 'zero_col', False)
    
    # Getting the type of 'c' (line 470)
    c_193820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 35), 'c', False)
    int_193821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 470, 39), 'int')
    # Applying the binary operator '>' (line 470)
    result_gt_193822 = python_operator(stypy.reporting.localization.Localization(__file__, 470, 35), '>', c_193820, int_193821)
    
    # Processing the call keyword arguments (line 470)
    kwargs_193823 = {}
    # Getting the type of 'np' (line 470)
    np_193817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 10), 'np', False)
    # Obtaining the member 'logical_and' of a type (line 470)
    logical_and_193818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 470, 10), np_193817, 'logical_and')
    # Calling logical_and(args, kwargs) (line 470)
    logical_and_call_result_193824 = invoke(stypy.reporting.localization.Localization(__file__, 470, 10), logical_and_193818, *[zero_col_193819, result_gt_193822], **kwargs_193823)
    
    # Storing an element on a container (line 470)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 470, 8), x_193816, (logical_and_call_result_193824, subscript_call_result_193815))
    
    
    # Call to any(...): (line 472)
    # Processing the call arguments (line 472)
    
    # Call to isinf(...): (line 472)
    # Processing the call arguments (line 472)
    # Getting the type of 'x' (line 472)
    x_193829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 27), 'x', False)
    # Processing the call keyword arguments (line 472)
    kwargs_193830 = {}
    # Getting the type of 'np' (line 472)
    np_193827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 18), 'np', False)
    # Obtaining the member 'isinf' of a type (line 472)
    isinf_193828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 472, 18), np_193827, 'isinf')
    # Calling isinf(args, kwargs) (line 472)
    isinf_call_result_193831 = invoke(stypy.reporting.localization.Localization(__file__, 472, 18), isinf_193828, *[x_193829], **kwargs_193830)
    
    # Processing the call keyword arguments (line 472)
    kwargs_193832 = {}
    # Getting the type of 'np' (line 472)
    np_193825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 11), 'np', False)
    # Obtaining the member 'any' of a type (line 472)
    any_193826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 472, 11), np_193825, 'any')
    # Calling any(args, kwargs) (line 472)
    any_call_result_193833 = invoke(stypy.reporting.localization.Localization(__file__, 472, 11), any_193826, *[isinf_call_result_193831], **kwargs_193832)
    
    # Testing the type of an if condition (line 472)
    if_condition_193834 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 472, 8), any_call_result_193833)
    # Assigning a type to the variable 'if_condition_193834' (line 472)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 472, 8), 'if_condition_193834', if_condition_193834)
    # SSA begins for if statement (line 472)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 473):
    
    # Assigning a Num to a Name (line 473):
    int_193835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 21), 'int')
    # Assigning a type to the variable 'status' (line 473)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 12), 'status', int_193835)
    
    # Assigning a Str to a Name (line 474):
    
    # Assigning a Str to a Name (line 474):
    str_193836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 474, 23), 'str', 'If feasible, the problem is (trivially) unbounded due  to a zero column in the constraint matrices. If you wish to check whether the problem is infeasible, turn presolve off.')
    # Assigning a type to the variable 'message' (line 474)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 12), 'message', str_193836)
    
    # Assigning a Name to a Name (line 478):
    
    # Assigning a Name to a Name (line 478):
    # Getting the type of 'True' (line 478)
    True_193837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 23), 'True')
    # Assigning a type to the variable 'complete' (line 478)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 12), 'complete', True_193837)
    
    # Obtaining an instance of the builtin type 'tuple' (line 479)
    tuple_193838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 479, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 479)
    # Adding element type (line 479)
    # Getting the type of 'c' (line 479)
    c_193839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 20), 'c')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 479, 20), tuple_193838, c_193839)
    # Adding element type (line 479)
    # Getting the type of 'c0' (line 479)
    c0_193840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 23), 'c0')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 479, 20), tuple_193838, c0_193840)
    # Adding element type (line 479)
    # Getting the type of 'A_ub' (line 479)
    A_ub_193841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 27), 'A_ub')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 479, 20), tuple_193838, A_ub_193841)
    # Adding element type (line 479)
    # Getting the type of 'b_ub' (line 479)
    b_ub_193842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 33), 'b_ub')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 479, 20), tuple_193838, b_ub_193842)
    # Adding element type (line 479)
    # Getting the type of 'A_eq' (line 479)
    A_eq_193843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 39), 'A_eq')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 479, 20), tuple_193838, A_eq_193843)
    # Adding element type (line 479)
    # Getting the type of 'b_eq' (line 479)
    b_eq_193844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 45), 'b_eq')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 479, 20), tuple_193838, b_eq_193844)
    # Adding element type (line 479)
    # Getting the type of 'bounds' (line 479)
    bounds_193845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 51), 'bounds')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 479, 20), tuple_193838, bounds_193845)
    # Adding element type (line 479)
    # Getting the type of 'x' (line 480)
    x_193846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 20), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 479, 20), tuple_193838, x_193846)
    # Adding element type (line 479)
    # Getting the type of 'undo' (line 480)
    undo_193847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 23), 'undo')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 479, 20), tuple_193838, undo_193847)
    # Adding element type (line 479)
    # Getting the type of 'complete' (line 480)
    complete_193848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 29), 'complete')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 479, 20), tuple_193838, complete_193848)
    # Adding element type (line 479)
    # Getting the type of 'status' (line 480)
    status_193849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 39), 'status')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 479, 20), tuple_193838, status_193849)
    # Adding element type (line 479)
    # Getting the type of 'message' (line 480)
    message_193850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 47), 'message')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 479, 20), tuple_193838, message_193850)
    
    # Assigning a type to the variable 'stypy_return_type' (line 479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 479, 12), 'stypy_return_type', tuple_193838)
    # SSA join for if statement (line 472)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Subscript (line 482):
    
    # Assigning a Subscript to a Subscript (line 482):
    
    # Obtaining the type of the subscript
    
    # Call to logical_and(...): (line 483)
    # Processing the call arguments (line 483)
    # Getting the type of 'zero_col' (line 483)
    zero_col_193853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 27), 'zero_col', False)
    
    # Getting the type of 'c' (line 483)
    c_193854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 37), 'c', False)
    int_193855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 41), 'int')
    # Applying the binary operator '<' (line 483)
    result_lt_193856 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 37), '<', c_193854, int_193855)
    
    # Processing the call keyword arguments (line 483)
    kwargs_193857 = {}
    # Getting the type of 'np' (line 483)
    np_193851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 12), 'np', False)
    # Obtaining the member 'logical_and' of a type (line 483)
    logical_and_193852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 483, 12), np_193851, 'logical_and')
    # Calling logical_and(args, kwargs) (line 483)
    logical_and_call_result_193858 = invoke(stypy.reporting.localization.Localization(__file__, 483, 12), logical_and_193852, *[zero_col_193853, result_lt_193856], **kwargs_193857)
    
    # Getting the type of 'ub' (line 482)
    ub_193859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 46), 'ub')
    # Obtaining the member '__getitem__' of a type (line 482)
    getitem___193860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 46), ub_193859, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 482)
    subscript_call_result_193861 = invoke(stypy.reporting.localization.Localization(__file__, 482, 46), getitem___193860, logical_and_call_result_193858)
    
    # Getting the type of 'lb' (line 482)
    lb_193862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 8), 'lb')
    
    # Call to logical_and(...): (line 482)
    # Processing the call arguments (line 482)
    # Getting the type of 'zero_col' (line 482)
    zero_col_193865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 26), 'zero_col', False)
    
    # Getting the type of 'c' (line 482)
    c_193866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 36), 'c', False)
    int_193867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 482, 40), 'int')
    # Applying the binary operator '<' (line 482)
    result_lt_193868 = python_operator(stypy.reporting.localization.Localization(__file__, 482, 36), '<', c_193866, int_193867)
    
    # Processing the call keyword arguments (line 482)
    kwargs_193869 = {}
    # Getting the type of 'np' (line 482)
    np_193863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 11), 'np', False)
    # Obtaining the member 'logical_and' of a type (line 482)
    logical_and_193864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 11), np_193863, 'logical_and')
    # Calling logical_and(args, kwargs) (line 482)
    logical_and_call_result_193870 = invoke(stypy.reporting.localization.Localization(__file__, 482, 11), logical_and_193864, *[zero_col_193865, result_lt_193868], **kwargs_193869)
    
    # Storing an element on a container (line 482)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 482, 8), lb_193862, (logical_and_call_result_193870, subscript_call_result_193861))
    
    # Assigning a Subscript to a Subscript (line 484):
    
    # Assigning a Subscript to a Subscript (line 484):
    
    # Obtaining the type of the subscript
    
    # Call to logical_and(...): (line 485)
    # Processing the call arguments (line 485)
    # Getting the type of 'zero_col' (line 485)
    zero_col_193873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 27), 'zero_col', False)
    
    # Getting the type of 'c' (line 485)
    c_193874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 37), 'c', False)
    int_193875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 41), 'int')
    # Applying the binary operator '>' (line 485)
    result_gt_193876 = python_operator(stypy.reporting.localization.Localization(__file__, 485, 37), '>', c_193874, int_193875)
    
    # Processing the call keyword arguments (line 485)
    kwargs_193877 = {}
    # Getting the type of 'np' (line 485)
    np_193871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 12), 'np', False)
    # Obtaining the member 'logical_and' of a type (line 485)
    logical_and_193872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 12), np_193871, 'logical_and')
    # Calling logical_and(args, kwargs) (line 485)
    logical_and_call_result_193878 = invoke(stypy.reporting.localization.Localization(__file__, 485, 12), logical_and_193872, *[zero_col_193873, result_gt_193876], **kwargs_193877)
    
    # Getting the type of 'lb' (line 484)
    lb_193879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 46), 'lb')
    # Obtaining the member '__getitem__' of a type (line 484)
    getitem___193880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 46), lb_193879, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 484)
    subscript_call_result_193881 = invoke(stypy.reporting.localization.Localization(__file__, 484, 46), getitem___193880, logical_and_call_result_193878)
    
    # Getting the type of 'ub' (line 484)
    ub_193882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 8), 'ub')
    
    # Call to logical_and(...): (line 484)
    # Processing the call arguments (line 484)
    # Getting the type of 'zero_col' (line 484)
    zero_col_193885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 26), 'zero_col', False)
    
    # Getting the type of 'c' (line 484)
    c_193886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 36), 'c', False)
    int_193887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 484, 40), 'int')
    # Applying the binary operator '>' (line 484)
    result_gt_193888 = python_operator(stypy.reporting.localization.Localization(__file__, 484, 36), '>', c_193886, int_193887)
    
    # Processing the call keyword arguments (line 484)
    kwargs_193889 = {}
    # Getting the type of 'np' (line 484)
    np_193883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 11), 'np', False)
    # Obtaining the member 'logical_and' of a type (line 484)
    logical_and_193884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 11), np_193883, 'logical_and')
    # Calling logical_and(args, kwargs) (line 484)
    logical_and_call_result_193890 = invoke(stypy.reporting.localization.Localization(__file__, 484, 11), logical_and_193884, *[zero_col_193885, result_gt_193888], **kwargs_193889)
    
    # Storing an element on a container (line 484)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 484, 8), ub_193882, (logical_and_call_result_193890, subscript_call_result_193881))
    # SSA join for if statement (line 465)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 489):
    
    # Assigning a Call to a Name (line 489):
    
    # Call to flatten(...): (line 489)
    # Processing the call keyword arguments (line 489)
    kwargs_193907 = {}
    
    # Call to array(...): (line 489)
    # Processing the call arguments (line 489)
    
    
    # Call to sum(...): (line 489)
    # Processing the call arguments (line 489)
    
    # Getting the type of 'A_eq' (line 489)
    A_eq_193895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 36), 'A_eq', False)
    int_193896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 489, 44), 'int')
    # Applying the binary operator '!=' (line 489)
    result_ne_193897 = python_operator(stypy.reporting.localization.Localization(__file__, 489, 36), '!=', A_eq_193895, int_193896)
    
    # Processing the call keyword arguments (line 489)
    int_193898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 489, 52), 'int')
    keyword_193899 = int_193898
    kwargs_193900 = {'axis': keyword_193899}
    # Getting the type of 'np' (line 489)
    np_193893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 29), 'np', False)
    # Obtaining the member 'sum' of a type (line 489)
    sum_193894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 29), np_193893, 'sum')
    # Calling sum(args, kwargs) (line 489)
    sum_call_result_193901 = invoke(stypy.reporting.localization.Localization(__file__, 489, 29), sum_193894, *[result_ne_193897], **kwargs_193900)
    
    int_193902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 489, 58), 'int')
    # Applying the binary operator '==' (line 489)
    result_eq_193903 = python_operator(stypy.reporting.localization.Localization(__file__, 489, 29), '==', sum_call_result_193901, int_193902)
    
    # Processing the call keyword arguments (line 489)
    kwargs_193904 = {}
    # Getting the type of 'np' (line 489)
    np_193891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 20), 'np', False)
    # Obtaining the member 'array' of a type (line 489)
    array_193892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 20), np_193891, 'array')
    # Calling array(args, kwargs) (line 489)
    array_call_result_193905 = invoke(stypy.reporting.localization.Localization(__file__, 489, 20), array_193892, *[result_eq_193903], **kwargs_193904)
    
    # Obtaining the member 'flatten' of a type (line 489)
    flatten_193906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 20), array_call_result_193905, 'flatten')
    # Calling flatten(args, kwargs) (line 489)
    flatten_call_result_193908 = invoke(stypy.reporting.localization.Localization(__file__, 489, 20), flatten_193906, *[], **kwargs_193907)
    
    # Assigning a type to the variable 'singleton_row' (line 489)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 489, 4), 'singleton_row', flatten_call_result_193908)
    
    # Assigning a Subscript to a Name (line 490):
    
    # Assigning a Subscript to a Name (line 490):
    
    # Obtaining the type of the subscript
    int_193909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 490, 32), 'int')
    
    # Call to where(...): (line 490)
    # Processing the call arguments (line 490)
    # Getting the type of 'singleton_row' (line 490)
    singleton_row_193911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 17), 'singleton_row', False)
    # Processing the call keyword arguments (line 490)
    kwargs_193912 = {}
    # Getting the type of 'where' (line 490)
    where_193910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 11), 'where', False)
    # Calling where(args, kwargs) (line 490)
    where_call_result_193913 = invoke(stypy.reporting.localization.Localization(__file__, 490, 11), where_193910, *[singleton_row_193911], **kwargs_193912)
    
    # Obtaining the member '__getitem__' of a type (line 490)
    getitem___193914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 490, 11), where_call_result_193913, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 490)
    subscript_call_result_193915 = invoke(stypy.reporting.localization.Localization(__file__, 490, 11), getitem___193914, int_193909)
    
    # Assigning a type to the variable 'rows' (line 490)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 490, 4), 'rows', subscript_call_result_193915)
    
    # Assigning a Subscript to a Name (line 491):
    
    # Assigning a Subscript to a Name (line 491):
    
    # Obtaining the type of the subscript
    int_193916 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 491, 32), 'int')
    
    # Call to where(...): (line 491)
    # Processing the call arguments (line 491)
    
    # Obtaining the type of the subscript
    # Getting the type of 'rows' (line 491)
    rows_193918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 22), 'rows', False)
    slice_193919 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 491, 17), None, None, None)
    # Getting the type of 'A_eq' (line 491)
    A_eq_193920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 17), 'A_eq', False)
    # Obtaining the member '__getitem__' of a type (line 491)
    getitem___193921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 17), A_eq_193920, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 491)
    subscript_call_result_193922 = invoke(stypy.reporting.localization.Localization(__file__, 491, 17), getitem___193921, (rows_193918, slice_193919))
    
    # Processing the call keyword arguments (line 491)
    kwargs_193923 = {}
    # Getting the type of 'where' (line 491)
    where_193917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 11), 'where', False)
    # Calling where(args, kwargs) (line 491)
    where_call_result_193924 = invoke(stypy.reporting.localization.Localization(__file__, 491, 11), where_193917, *[subscript_call_result_193922], **kwargs_193923)
    
    # Obtaining the member '__getitem__' of a type (line 491)
    getitem___193925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 11), where_call_result_193924, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 491)
    subscript_call_result_193926 = invoke(stypy.reporting.localization.Localization(__file__, 491, 11), getitem___193925, int_193916)
    
    # Assigning a type to the variable 'cols' (line 491)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 491, 4), 'cols', subscript_call_result_193926)
    
    
    
    # Call to len(...): (line 492)
    # Processing the call arguments (line 492)
    # Getting the type of 'rows' (line 492)
    rows_193928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 11), 'rows', False)
    # Processing the call keyword arguments (line 492)
    kwargs_193929 = {}
    # Getting the type of 'len' (line 492)
    len_193927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 7), 'len', False)
    # Calling len(args, kwargs) (line 492)
    len_call_result_193930 = invoke(stypy.reporting.localization.Localization(__file__, 492, 7), len_193927, *[rows_193928], **kwargs_193929)
    
    int_193931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 492, 19), 'int')
    # Applying the binary operator '>' (line 492)
    result_gt_193932 = python_operator(stypy.reporting.localization.Localization(__file__, 492, 7), '>', len_call_result_193930, int_193931)
    
    # Testing the type of an if condition (line 492)
    if_condition_193933 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 492, 4), result_gt_193932)
    # Assigning a type to the variable 'if_condition_193933' (line 492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 492, 4), 'if_condition_193933', if_condition_193933)
    # SSA begins for if statement (line 492)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to zip(...): (line 493)
    # Processing the call arguments (line 493)
    # Getting the type of 'rows' (line 493)
    rows_193935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 28), 'rows', False)
    # Getting the type of 'cols' (line 493)
    cols_193936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 34), 'cols', False)
    # Processing the call keyword arguments (line 493)
    kwargs_193937 = {}
    # Getting the type of 'zip' (line 493)
    zip_193934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 24), 'zip', False)
    # Calling zip(args, kwargs) (line 493)
    zip_call_result_193938 = invoke(stypy.reporting.localization.Localization(__file__, 493, 24), zip_193934, *[rows_193935, cols_193936], **kwargs_193937)
    
    # Testing the type of a for loop iterable (line 493)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 493, 8), zip_call_result_193938)
    # Getting the type of the for loop variable (line 493)
    for_loop_var_193939 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 493, 8), zip_call_result_193938)
    # Assigning a type to the variable 'row' (line 493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 493, 8), 'row', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 493, 8), for_loop_var_193939))
    # Assigning a type to the variable 'col' (line 493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 493, 8), 'col', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 493, 8), for_loop_var_193939))
    # SSA begins for a for statement (line 493)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Name (line 494):
    
    # Assigning a BinOp to a Name (line 494):
    
    # Obtaining the type of the subscript
    # Getting the type of 'row' (line 494)
    row_193940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 23), 'row')
    # Getting the type of 'b_eq' (line 494)
    b_eq_193941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 18), 'b_eq')
    # Obtaining the member '__getitem__' of a type (line 494)
    getitem___193942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 18), b_eq_193941, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 494)
    subscript_call_result_193943 = invoke(stypy.reporting.localization.Localization(__file__, 494, 18), getitem___193942, row_193940)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 494)
    tuple_193944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 494, 35), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 494)
    # Adding element type (line 494)
    # Getting the type of 'row' (line 494)
    row_193945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 35), 'row')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 494, 35), tuple_193944, row_193945)
    # Adding element type (line 494)
    # Getting the type of 'col' (line 494)
    col_193946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 40), 'col')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 494, 35), tuple_193944, col_193946)
    
    # Getting the type of 'A_eq' (line 494)
    A_eq_193947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 30), 'A_eq')
    # Obtaining the member '__getitem__' of a type (line 494)
    getitem___193948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 30), A_eq_193947, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 494)
    subscript_call_result_193949 = invoke(stypy.reporting.localization.Localization(__file__, 494, 30), getitem___193948, tuple_193944)
    
    # Applying the binary operator 'div' (line 494)
    result_div_193950 = python_operator(stypy.reporting.localization.Localization(__file__, 494, 18), 'div', subscript_call_result_193943, subscript_call_result_193949)
    
    # Assigning a type to the variable 'val' (line 494)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 494, 12), 'val', result_div_193950)
    
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'col' (line 495)
    col_193951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 22), 'col')
    # Getting the type of 'lb' (line 495)
    lb_193952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 19), 'lb')
    # Obtaining the member '__getitem__' of a type (line 495)
    getitem___193953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 495, 19), lb_193952, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 495)
    subscript_call_result_193954 = invoke(stypy.reporting.localization.Localization(__file__, 495, 19), getitem___193953, col_193951)
    
    # Getting the type of 'tol' (line 495)
    tol_193955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 29), 'tol')
    # Applying the binary operator '-' (line 495)
    result_sub_193956 = python_operator(stypy.reporting.localization.Localization(__file__, 495, 19), '-', subscript_call_result_193954, tol_193955)
    
    # Getting the type of 'val' (line 495)
    val_193957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 36), 'val')
    # Applying the binary operator '<=' (line 495)
    result_le_193958 = python_operator(stypy.reporting.localization.Localization(__file__, 495, 19), '<=', result_sub_193956, val_193957)
    
    # Obtaining the type of the subscript
    # Getting the type of 'col' (line 495)
    col_193959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 46), 'col')
    # Getting the type of 'ub' (line 495)
    ub_193960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 43), 'ub')
    # Obtaining the member '__getitem__' of a type (line 495)
    getitem___193961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 495, 43), ub_193960, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 495)
    subscript_call_result_193962 = invoke(stypy.reporting.localization.Localization(__file__, 495, 43), getitem___193961, col_193959)
    
    # Getting the type of 'tol' (line 495)
    tol_193963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 53), 'tol')
    # Applying the binary operator '+' (line 495)
    result_add_193964 = python_operator(stypy.reporting.localization.Localization(__file__, 495, 43), '+', subscript_call_result_193962, tol_193963)
    
    # Applying the binary operator '<=' (line 495)
    result_le_193965 = python_operator(stypy.reporting.localization.Localization(__file__, 495, 19), '<=', val_193957, result_add_193964)
    # Applying the binary operator '&' (line 495)
    result_and__193966 = python_operator(stypy.reporting.localization.Localization(__file__, 495, 19), '&', result_le_193958, result_le_193965)
    
    # Applying the 'not' unary operator (line 495)
    result_not__193967 = python_operator(stypy.reporting.localization.Localization(__file__, 495, 15), 'not', result_and__193966)
    
    # Testing the type of an if condition (line 495)
    if_condition_193968 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 495, 12), result_not__193967)
    # Assigning a type to the variable 'if_condition_193968' (line 495)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 495, 12), 'if_condition_193968', if_condition_193968)
    # SSA begins for if statement (line 495)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 497):
    
    # Assigning a Num to a Name (line 497):
    int_193969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 497, 25), 'int')
    # Assigning a type to the variable 'status' (line 497)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 16), 'status', int_193969)
    
    # Assigning a Str to a Name (line 498):
    
    # Assigning a Str to a Name (line 498):
    str_193970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 498, 27), 'str', 'The problem is (trivially) infeasible because a singleton row in the equality constraints is inconsistent with the bounds.')
    # Assigning a type to the variable 'message' (line 498)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 16), 'message', str_193970)
    
    # Assigning a Name to a Name (line 501):
    
    # Assigning a Name to a Name (line 501):
    # Getting the type of 'True' (line 501)
    True_193971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 27), 'True')
    # Assigning a type to the variable 'complete' (line 501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 501, 16), 'complete', True_193971)
    
    # Obtaining an instance of the builtin type 'tuple' (line 502)
    tuple_193972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 502)
    # Adding element type (line 502)
    # Getting the type of 'c' (line 502)
    c_193973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 24), 'c')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 24), tuple_193972, c_193973)
    # Adding element type (line 502)
    # Getting the type of 'c0' (line 502)
    c0_193974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 27), 'c0')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 24), tuple_193972, c0_193974)
    # Adding element type (line 502)
    # Getting the type of 'A_ub' (line 502)
    A_ub_193975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 31), 'A_ub')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 24), tuple_193972, A_ub_193975)
    # Adding element type (line 502)
    # Getting the type of 'b_ub' (line 502)
    b_ub_193976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 37), 'b_ub')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 24), tuple_193972, b_ub_193976)
    # Adding element type (line 502)
    # Getting the type of 'A_eq' (line 502)
    A_eq_193977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 43), 'A_eq')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 24), tuple_193972, A_eq_193977)
    # Adding element type (line 502)
    # Getting the type of 'b_eq' (line 502)
    b_eq_193978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 49), 'b_eq')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 24), tuple_193972, b_eq_193978)
    # Adding element type (line 502)
    # Getting the type of 'bounds' (line 502)
    bounds_193979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 55), 'bounds')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 24), tuple_193972, bounds_193979)
    # Adding element type (line 502)
    # Getting the type of 'x' (line 503)
    x_193980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 24), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 24), tuple_193972, x_193980)
    # Adding element type (line 502)
    # Getting the type of 'undo' (line 503)
    undo_193981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 27), 'undo')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 24), tuple_193972, undo_193981)
    # Adding element type (line 502)
    # Getting the type of 'complete' (line 503)
    complete_193982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 33), 'complete')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 24), tuple_193972, complete_193982)
    # Adding element type (line 502)
    # Getting the type of 'status' (line 503)
    status_193983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 43), 'status')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 24), tuple_193972, status_193983)
    # Adding element type (line 502)
    # Getting the type of 'message' (line 503)
    message_193984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 51), 'message')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 502, 24), tuple_193972, message_193984)
    
    # Assigning a type to the variable 'stypy_return_type' (line 502)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 502, 16), 'stypy_return_type', tuple_193972)
    # SSA branch for the else part of an if statement (line 495)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Subscript (line 507):
    
    # Assigning a Name to a Subscript (line 507):
    # Getting the type of 'val' (line 507)
    val_193985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 26), 'val')
    # Getting the type of 'lb' (line 507)
    lb_193986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 16), 'lb')
    # Getting the type of 'col' (line 507)
    col_193987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 19), 'col')
    # Storing an element on a container (line 507)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 507, 16), lb_193986, (col_193987, val_193985))
    
    # Assigning a Name to a Subscript (line 508):
    
    # Assigning a Name to a Subscript (line 508):
    # Getting the type of 'val' (line 508)
    val_193988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 26), 'val')
    # Getting the type of 'ub' (line 508)
    ub_193989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 16), 'ub')
    # Getting the type of 'col' (line 508)
    col_193990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 19), 'col')
    # Storing an element on a container (line 508)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 508, 16), ub_193989, (col_193990, val_193988))
    # SSA join for if statement (line 495)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 509):
    
    # Assigning a Subscript to a Name (line 509):
    
    # Obtaining the type of the subscript
    
    # Call to logical_not(...): (line 509)
    # Processing the call arguments (line 509)
    # Getting the type of 'singleton_row' (line 509)
    singleton_row_193993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 35), 'singleton_row', False)
    # Processing the call keyword arguments (line 509)
    kwargs_193994 = {}
    # Getting the type of 'np' (line 509)
    np_193991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 20), 'np', False)
    # Obtaining the member 'logical_not' of a type (line 509)
    logical_not_193992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 509, 20), np_193991, 'logical_not')
    # Calling logical_not(args, kwargs) (line 509)
    logical_not_call_result_193995 = invoke(stypy.reporting.localization.Localization(__file__, 509, 20), logical_not_193992, *[singleton_row_193993], **kwargs_193994)
    
    slice_193996 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 509, 15), None, None, None)
    # Getting the type of 'A_eq' (line 509)
    A_eq_193997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 15), 'A_eq')
    # Obtaining the member '__getitem__' of a type (line 509)
    getitem___193998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 509, 15), A_eq_193997, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 509)
    subscript_call_result_193999 = invoke(stypy.reporting.localization.Localization(__file__, 509, 15), getitem___193998, (logical_not_call_result_193995, slice_193996))
    
    # Assigning a type to the variable 'A_eq' (line 509)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 509, 8), 'A_eq', subscript_call_result_193999)
    
    # Assigning a Subscript to a Name (line 510):
    
    # Assigning a Subscript to a Name (line 510):
    
    # Obtaining the type of the subscript
    
    # Call to logical_not(...): (line 510)
    # Processing the call arguments (line 510)
    # Getting the type of 'singleton_row' (line 510)
    singleton_row_194002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 35), 'singleton_row', False)
    # Processing the call keyword arguments (line 510)
    kwargs_194003 = {}
    # Getting the type of 'np' (line 510)
    np_194000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 20), 'np', False)
    # Obtaining the member 'logical_not' of a type (line 510)
    logical_not_194001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 20), np_194000, 'logical_not')
    # Calling logical_not(args, kwargs) (line 510)
    logical_not_call_result_194004 = invoke(stypy.reporting.localization.Localization(__file__, 510, 20), logical_not_194001, *[singleton_row_194002], **kwargs_194003)
    
    # Getting the type of 'b_eq' (line 510)
    b_eq_194005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 15), 'b_eq')
    # Obtaining the member '__getitem__' of a type (line 510)
    getitem___194006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 15), b_eq_194005, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 510)
    subscript_call_result_194007 = invoke(stypy.reporting.localization.Localization(__file__, 510, 15), getitem___194006, logical_not_call_result_194004)
    
    # Assigning a type to the variable 'b_eq' (line 510)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 8), 'b_eq', subscript_call_result_194007)
    # SSA join for if statement (line 492)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 517):
    
    # Assigning a Call to a Name (line 517):
    
    # Call to flatten(...): (line 517)
    # Processing the call keyword arguments (line 517)
    kwargs_194024 = {}
    
    # Call to array(...): (line 517)
    # Processing the call arguments (line 517)
    
    
    # Call to sum(...): (line 517)
    # Processing the call arguments (line 517)
    
    # Getting the type of 'A_ub' (line 517)
    A_ub_194012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 36), 'A_ub', False)
    int_194013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 517, 44), 'int')
    # Applying the binary operator '!=' (line 517)
    result_ne_194014 = python_operator(stypy.reporting.localization.Localization(__file__, 517, 36), '!=', A_ub_194012, int_194013)
    
    # Processing the call keyword arguments (line 517)
    int_194015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 517, 52), 'int')
    keyword_194016 = int_194015
    kwargs_194017 = {'axis': keyword_194016}
    # Getting the type of 'np' (line 517)
    np_194010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 29), 'np', False)
    # Obtaining the member 'sum' of a type (line 517)
    sum_194011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 517, 29), np_194010, 'sum')
    # Calling sum(args, kwargs) (line 517)
    sum_call_result_194018 = invoke(stypy.reporting.localization.Localization(__file__, 517, 29), sum_194011, *[result_ne_194014], **kwargs_194017)
    
    int_194019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 517, 58), 'int')
    # Applying the binary operator '==' (line 517)
    result_eq_194020 = python_operator(stypy.reporting.localization.Localization(__file__, 517, 29), '==', sum_call_result_194018, int_194019)
    
    # Processing the call keyword arguments (line 517)
    kwargs_194021 = {}
    # Getting the type of 'np' (line 517)
    np_194008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 20), 'np', False)
    # Obtaining the member 'array' of a type (line 517)
    array_194009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 517, 20), np_194008, 'array')
    # Calling array(args, kwargs) (line 517)
    array_call_result_194022 = invoke(stypy.reporting.localization.Localization(__file__, 517, 20), array_194009, *[result_eq_194020], **kwargs_194021)
    
    # Obtaining the member 'flatten' of a type (line 517)
    flatten_194023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 517, 20), array_call_result_194022, 'flatten')
    # Calling flatten(args, kwargs) (line 517)
    flatten_call_result_194025 = invoke(stypy.reporting.localization.Localization(__file__, 517, 20), flatten_194023, *[], **kwargs_194024)
    
    # Assigning a type to the variable 'singleton_row' (line 517)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 4), 'singleton_row', flatten_call_result_194025)
    
    # Assigning a Subscript to a Name (line 518):
    
    # Assigning a Subscript to a Name (line 518):
    
    # Obtaining the type of the subscript
    int_194026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 518, 41), 'int')
    
    # Call to where(...): (line 518)
    # Processing the call arguments (line 518)
    
    # Obtaining the type of the subscript
    # Getting the type of 'singleton_row' (line 518)
    singleton_row_194028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 22), 'singleton_row', False)
    slice_194029 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 518, 17), None, None, None)
    # Getting the type of 'A_ub' (line 518)
    A_ub_194030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 17), 'A_ub', False)
    # Obtaining the member '__getitem__' of a type (line 518)
    getitem___194031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 17), A_ub_194030, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 518)
    subscript_call_result_194032 = invoke(stypy.reporting.localization.Localization(__file__, 518, 17), getitem___194031, (singleton_row_194028, slice_194029))
    
    # Processing the call keyword arguments (line 518)
    kwargs_194033 = {}
    # Getting the type of 'where' (line 518)
    where_194027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 11), 'where', False)
    # Calling where(args, kwargs) (line 518)
    where_call_result_194034 = invoke(stypy.reporting.localization.Localization(__file__, 518, 11), where_194027, *[subscript_call_result_194032], **kwargs_194033)
    
    # Obtaining the member '__getitem__' of a type (line 518)
    getitem___194035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 11), where_call_result_194034, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 518)
    subscript_call_result_194036 = invoke(stypy.reporting.localization.Localization(__file__, 518, 11), getitem___194035, int_194026)
    
    # Assigning a type to the variable 'cols' (line 518)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 4), 'cols', subscript_call_result_194036)
    
    # Assigning a Subscript to a Name (line 519):
    
    # Assigning a Subscript to a Name (line 519):
    
    # Obtaining the type of the subscript
    int_194037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 519, 32), 'int')
    
    # Call to where(...): (line 519)
    # Processing the call arguments (line 519)
    # Getting the type of 'singleton_row' (line 519)
    singleton_row_194039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 17), 'singleton_row', False)
    # Processing the call keyword arguments (line 519)
    kwargs_194040 = {}
    # Getting the type of 'where' (line 519)
    where_194038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 11), 'where', False)
    # Calling where(args, kwargs) (line 519)
    where_call_result_194041 = invoke(stypy.reporting.localization.Localization(__file__, 519, 11), where_194038, *[singleton_row_194039], **kwargs_194040)
    
    # Obtaining the member '__getitem__' of a type (line 519)
    getitem___194042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 11), where_call_result_194041, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 519)
    subscript_call_result_194043 = invoke(stypy.reporting.localization.Localization(__file__, 519, 11), getitem___194042, int_194037)
    
    # Assigning a type to the variable 'rows' (line 519)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 4), 'rows', subscript_call_result_194043)
    
    
    
    # Call to len(...): (line 520)
    # Processing the call arguments (line 520)
    # Getting the type of 'rows' (line 520)
    rows_194045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 11), 'rows', False)
    # Processing the call keyword arguments (line 520)
    kwargs_194046 = {}
    # Getting the type of 'len' (line 520)
    len_194044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 7), 'len', False)
    # Calling len(args, kwargs) (line 520)
    len_call_result_194047 = invoke(stypy.reporting.localization.Localization(__file__, 520, 7), len_194044, *[rows_194045], **kwargs_194046)
    
    int_194048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 520, 19), 'int')
    # Applying the binary operator '>' (line 520)
    result_gt_194049 = python_operator(stypy.reporting.localization.Localization(__file__, 520, 7), '>', len_call_result_194047, int_194048)
    
    # Testing the type of an if condition (line 520)
    if_condition_194050 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 520, 4), result_gt_194049)
    # Assigning a type to the variable 'if_condition_194050' (line 520)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 520, 4), 'if_condition_194050', if_condition_194050)
    # SSA begins for if statement (line 520)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to zip(...): (line 521)
    # Processing the call arguments (line 521)
    # Getting the type of 'rows' (line 521)
    rows_194052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 28), 'rows', False)
    # Getting the type of 'cols' (line 521)
    cols_194053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 34), 'cols', False)
    # Processing the call keyword arguments (line 521)
    kwargs_194054 = {}
    # Getting the type of 'zip' (line 521)
    zip_194051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 24), 'zip', False)
    # Calling zip(args, kwargs) (line 521)
    zip_call_result_194055 = invoke(stypy.reporting.localization.Localization(__file__, 521, 24), zip_194051, *[rows_194052, cols_194053], **kwargs_194054)
    
    # Testing the type of a for loop iterable (line 521)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 521, 8), zip_call_result_194055)
    # Getting the type of the for loop variable (line 521)
    for_loop_var_194056 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 521, 8), zip_call_result_194055)
    # Assigning a type to the variable 'row' (line 521)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 521, 8), 'row', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 521, 8), for_loop_var_194056))
    # Assigning a type to the variable 'col' (line 521)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 521, 8), 'col', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 521, 8), for_loop_var_194056))
    # SSA begins for a for statement (line 521)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Name (line 522):
    
    # Assigning a BinOp to a Name (line 522):
    
    # Obtaining the type of the subscript
    # Getting the type of 'row' (line 522)
    row_194057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 23), 'row')
    # Getting the type of 'b_ub' (line 522)
    b_ub_194058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 18), 'b_ub')
    # Obtaining the member '__getitem__' of a type (line 522)
    getitem___194059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 18), b_ub_194058, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 522)
    subscript_call_result_194060 = invoke(stypy.reporting.localization.Localization(__file__, 522, 18), getitem___194059, row_194057)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 522)
    tuple_194061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 522, 35), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 522)
    # Adding element type (line 522)
    # Getting the type of 'row' (line 522)
    row_194062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 35), 'row')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 522, 35), tuple_194061, row_194062)
    # Adding element type (line 522)
    # Getting the type of 'col' (line 522)
    col_194063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 40), 'col')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 522, 35), tuple_194061, col_194063)
    
    # Getting the type of 'A_ub' (line 522)
    A_ub_194064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 30), 'A_ub')
    # Obtaining the member '__getitem__' of a type (line 522)
    getitem___194065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 30), A_ub_194064, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 522)
    subscript_call_result_194066 = invoke(stypy.reporting.localization.Localization(__file__, 522, 30), getitem___194065, tuple_194061)
    
    # Applying the binary operator 'div' (line 522)
    result_div_194067 = python_operator(stypy.reporting.localization.Localization(__file__, 522, 18), 'div', subscript_call_result_194060, subscript_call_result_194066)
    
    # Assigning a type to the variable 'val' (line 522)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 12), 'val', result_div_194067)
    
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 523)
    tuple_194068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 523, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 523)
    # Adding element type (line 523)
    # Getting the type of 'row' (line 523)
    row_194069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 20), 'row')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 523, 20), tuple_194068, row_194069)
    # Adding element type (line 523)
    # Getting the type of 'col' (line 523)
    col_194070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 25), 'col')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 523, 20), tuple_194068, col_194070)
    
    # Getting the type of 'A_ub' (line 523)
    A_ub_194071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 15), 'A_ub')
    # Obtaining the member '__getitem__' of a type (line 523)
    getitem___194072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 15), A_ub_194071, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 523)
    subscript_call_result_194073 = invoke(stypy.reporting.localization.Localization(__file__, 523, 15), getitem___194072, tuple_194068)
    
    int_194074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 523, 32), 'int')
    # Applying the binary operator '>' (line 523)
    result_gt_194075 = python_operator(stypy.reporting.localization.Localization(__file__, 523, 15), '>', subscript_call_result_194073, int_194074)
    
    # Testing the type of an if condition (line 523)
    if_condition_194076 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 523, 12), result_gt_194075)
    # Assigning a type to the variable 'if_condition_194076' (line 523)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 12), 'if_condition_194076', if_condition_194076)
    # SSA begins for if statement (line 523)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'val' (line 524)
    val_194077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 19), 'val')
    
    # Obtaining the type of the subscript
    # Getting the type of 'col' (line 524)
    col_194078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 28), 'col')
    # Getting the type of 'lb' (line 524)
    lb_194079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 25), 'lb')
    # Obtaining the member '__getitem__' of a type (line 524)
    getitem___194080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 25), lb_194079, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 524)
    subscript_call_result_194081 = invoke(stypy.reporting.localization.Localization(__file__, 524, 25), getitem___194080, col_194078)
    
    # Getting the type of 'tol' (line 524)
    tol_194082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 35), 'tol')
    # Applying the binary operator '-' (line 524)
    result_sub_194083 = python_operator(stypy.reporting.localization.Localization(__file__, 524, 25), '-', subscript_call_result_194081, tol_194082)
    
    # Applying the binary operator '<' (line 524)
    result_lt_194084 = python_operator(stypy.reporting.localization.Localization(__file__, 524, 19), '<', val_194077, result_sub_194083)
    
    # Testing the type of an if condition (line 524)
    if_condition_194085 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 524, 16), result_lt_194084)
    # Assigning a type to the variable 'if_condition_194085' (line 524)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 16), 'if_condition_194085', if_condition_194085)
    # SSA begins for if statement (line 524)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 525):
    
    # Assigning a Name to a Name (line 525):
    # Getting the type of 'True' (line 525)
    True_194086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 31), 'True')
    # Assigning a type to the variable 'complete' (line 525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 525, 20), 'complete', True_194086)
    # SSA branch for the else part of an if statement (line 524)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'val' (line 526)
    val_194087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 21), 'val')
    
    # Obtaining the type of the subscript
    # Getting the type of 'col' (line 526)
    col_194088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 30), 'col')
    # Getting the type of 'ub' (line 526)
    ub_194089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 27), 'ub')
    # Obtaining the member '__getitem__' of a type (line 526)
    getitem___194090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 27), ub_194089, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 526)
    subscript_call_result_194091 = invoke(stypy.reporting.localization.Localization(__file__, 526, 27), getitem___194090, col_194088)
    
    # Applying the binary operator '<' (line 526)
    result_lt_194092 = python_operator(stypy.reporting.localization.Localization(__file__, 526, 21), '<', val_194087, subscript_call_result_194091)
    
    # Testing the type of an if condition (line 526)
    if_condition_194093 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 526, 21), result_lt_194092)
    # Assigning a type to the variable 'if_condition_194093' (line 526)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 21), 'if_condition_194093', if_condition_194093)
    # SSA begins for if statement (line 526)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 527):
    
    # Assigning a Name to a Subscript (line 527):
    # Getting the type of 'val' (line 527)
    val_194094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 30), 'val')
    # Getting the type of 'ub' (line 527)
    ub_194095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 20), 'ub')
    # Getting the type of 'col' (line 527)
    col_194096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 23), 'col')
    # Storing an element on a container (line 527)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 527, 20), ub_194095, (col_194096, val_194094))
    # SSA join for if statement (line 526)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 524)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 523)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'val' (line 529)
    val_194097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 19), 'val')
    
    # Obtaining the type of the subscript
    # Getting the type of 'col' (line 529)
    col_194098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 28), 'col')
    # Getting the type of 'ub' (line 529)
    ub_194099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 25), 'ub')
    # Obtaining the member '__getitem__' of a type (line 529)
    getitem___194100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 529, 25), ub_194099, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 529)
    subscript_call_result_194101 = invoke(stypy.reporting.localization.Localization(__file__, 529, 25), getitem___194100, col_194098)
    
    # Getting the type of 'tol' (line 529)
    tol_194102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 35), 'tol')
    # Applying the binary operator '+' (line 529)
    result_add_194103 = python_operator(stypy.reporting.localization.Localization(__file__, 529, 25), '+', subscript_call_result_194101, tol_194102)
    
    # Applying the binary operator '>' (line 529)
    result_gt_194104 = python_operator(stypy.reporting.localization.Localization(__file__, 529, 19), '>', val_194097, result_add_194103)
    
    # Testing the type of an if condition (line 529)
    if_condition_194105 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 529, 16), result_gt_194104)
    # Assigning a type to the variable 'if_condition_194105' (line 529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 16), 'if_condition_194105', if_condition_194105)
    # SSA begins for if statement (line 529)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 530):
    
    # Assigning a Name to a Name (line 530):
    # Getting the type of 'True' (line 530)
    True_194106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 31), 'True')
    # Assigning a type to the variable 'complete' (line 530)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 530, 20), 'complete', True_194106)
    # SSA branch for the else part of an if statement (line 529)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'val' (line 531)
    val_194107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 21), 'val')
    
    # Obtaining the type of the subscript
    # Getting the type of 'col' (line 531)
    col_194108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 30), 'col')
    # Getting the type of 'lb' (line 531)
    lb_194109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 27), 'lb')
    # Obtaining the member '__getitem__' of a type (line 531)
    getitem___194110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 531, 27), lb_194109, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 531)
    subscript_call_result_194111 = invoke(stypy.reporting.localization.Localization(__file__, 531, 27), getitem___194110, col_194108)
    
    # Applying the binary operator '>' (line 531)
    result_gt_194112 = python_operator(stypy.reporting.localization.Localization(__file__, 531, 21), '>', val_194107, subscript_call_result_194111)
    
    # Testing the type of an if condition (line 531)
    if_condition_194113 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 531, 21), result_gt_194112)
    # Assigning a type to the variable 'if_condition_194113' (line 531)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 531, 21), 'if_condition_194113', if_condition_194113)
    # SSA begins for if statement (line 531)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 532):
    
    # Assigning a Name to a Subscript (line 532):
    # Getting the type of 'val' (line 532)
    val_194114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 30), 'val')
    # Getting the type of 'lb' (line 532)
    lb_194115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 20), 'lb')
    # Getting the type of 'col' (line 532)
    col_194116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 23), 'col')
    # Storing an element on a container (line 532)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 532, 20), lb_194115, (col_194116, val_194114))
    # SSA join for if statement (line 531)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 529)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 523)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'complete' (line 533)
    complete_194117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 15), 'complete')
    # Testing the type of an if condition (line 533)
    if_condition_194118 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 533, 12), complete_194117)
    # Assigning a type to the variable 'if_condition_194118' (line 533)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 533, 12), 'if_condition_194118', if_condition_194118)
    # SSA begins for if statement (line 533)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 534):
    
    # Assigning a Num to a Name (line 534):
    int_194119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 534, 25), 'int')
    # Assigning a type to the variable 'status' (line 534)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 16), 'status', int_194119)
    
    # Assigning a Str to a Name (line 535):
    
    # Assigning a Str to a Name (line 535):
    str_194120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 27), 'str', 'The problem is (trivially) infeasible because a singleton row in the upper bound constraints is inconsistent with the bounds.')
    # Assigning a type to the variable 'message' (line 535)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 535, 16), 'message', str_194120)
    
    # Obtaining an instance of the builtin type 'tuple' (line 538)
    tuple_194121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 538, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 538)
    # Adding element type (line 538)
    # Getting the type of 'c' (line 538)
    c_194122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 24), 'c')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 538, 24), tuple_194121, c_194122)
    # Adding element type (line 538)
    # Getting the type of 'c0' (line 538)
    c0_194123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 27), 'c0')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 538, 24), tuple_194121, c0_194123)
    # Adding element type (line 538)
    # Getting the type of 'A_ub' (line 538)
    A_ub_194124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 31), 'A_ub')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 538, 24), tuple_194121, A_ub_194124)
    # Adding element type (line 538)
    # Getting the type of 'b_ub' (line 538)
    b_ub_194125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 37), 'b_ub')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 538, 24), tuple_194121, b_ub_194125)
    # Adding element type (line 538)
    # Getting the type of 'A_eq' (line 538)
    A_eq_194126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 43), 'A_eq')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 538, 24), tuple_194121, A_eq_194126)
    # Adding element type (line 538)
    # Getting the type of 'b_eq' (line 538)
    b_eq_194127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 49), 'b_eq')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 538, 24), tuple_194121, b_eq_194127)
    # Adding element type (line 538)
    # Getting the type of 'bounds' (line 538)
    bounds_194128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 55), 'bounds')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 538, 24), tuple_194121, bounds_194128)
    # Adding element type (line 538)
    # Getting the type of 'x' (line 539)
    x_194129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 24), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 538, 24), tuple_194121, x_194129)
    # Adding element type (line 538)
    # Getting the type of 'undo' (line 539)
    undo_194130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 27), 'undo')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 538, 24), tuple_194121, undo_194130)
    # Adding element type (line 538)
    # Getting the type of 'complete' (line 539)
    complete_194131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 33), 'complete')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 538, 24), tuple_194121, complete_194131)
    # Adding element type (line 538)
    # Getting the type of 'status' (line 539)
    status_194132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 43), 'status')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 538, 24), tuple_194121, status_194132)
    # Adding element type (line 538)
    # Getting the type of 'message' (line 539)
    message_194133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 51), 'message')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 538, 24), tuple_194121, message_194133)
    
    # Assigning a type to the variable 'stypy_return_type' (line 538)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 16), 'stypy_return_type', tuple_194121)
    # SSA join for if statement (line 533)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 540):
    
    # Assigning a Subscript to a Name (line 540):
    
    # Obtaining the type of the subscript
    
    # Call to logical_not(...): (line 540)
    # Processing the call arguments (line 540)
    # Getting the type of 'singleton_row' (line 540)
    singleton_row_194136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 35), 'singleton_row', False)
    # Processing the call keyword arguments (line 540)
    kwargs_194137 = {}
    # Getting the type of 'np' (line 540)
    np_194134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 20), 'np', False)
    # Obtaining the member 'logical_not' of a type (line 540)
    logical_not_194135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 540, 20), np_194134, 'logical_not')
    # Calling logical_not(args, kwargs) (line 540)
    logical_not_call_result_194138 = invoke(stypy.reporting.localization.Localization(__file__, 540, 20), logical_not_194135, *[singleton_row_194136], **kwargs_194137)
    
    slice_194139 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 540, 15), None, None, None)
    # Getting the type of 'A_ub' (line 540)
    A_ub_194140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 15), 'A_ub')
    # Obtaining the member '__getitem__' of a type (line 540)
    getitem___194141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 540, 15), A_ub_194140, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 540)
    subscript_call_result_194142 = invoke(stypy.reporting.localization.Localization(__file__, 540, 15), getitem___194141, (logical_not_call_result_194138, slice_194139))
    
    # Assigning a type to the variable 'A_ub' (line 540)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 540, 8), 'A_ub', subscript_call_result_194142)
    
    # Assigning a Subscript to a Name (line 541):
    
    # Assigning a Subscript to a Name (line 541):
    
    # Obtaining the type of the subscript
    
    # Call to logical_not(...): (line 541)
    # Processing the call arguments (line 541)
    # Getting the type of 'singleton_row' (line 541)
    singleton_row_194145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 35), 'singleton_row', False)
    # Processing the call keyword arguments (line 541)
    kwargs_194146 = {}
    # Getting the type of 'np' (line 541)
    np_194143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 20), 'np', False)
    # Obtaining the member 'logical_not' of a type (line 541)
    logical_not_194144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 20), np_194143, 'logical_not')
    # Calling logical_not(args, kwargs) (line 541)
    logical_not_call_result_194147 = invoke(stypy.reporting.localization.Localization(__file__, 541, 20), logical_not_194144, *[singleton_row_194145], **kwargs_194146)
    
    # Getting the type of 'b_ub' (line 541)
    b_ub_194148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 15), 'b_ub')
    # Obtaining the member '__getitem__' of a type (line 541)
    getitem___194149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 15), b_ub_194148, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 541)
    subscript_call_result_194150 = invoke(stypy.reporting.localization.Localization(__file__, 541, 15), getitem___194149, logical_not_call_result_194147)
    
    # Assigning a type to the variable 'b_ub' (line 541)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 8), 'b_ub', subscript_call_result_194150)
    # SSA join for if statement (line 520)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Compare to a Name (line 544):
    
    # Assigning a Compare to a Name (line 544):
    
    
    # Call to abs(...): (line 544)
    # Processing the call arguments (line 544)
    # Getting the type of 'lb' (line 544)
    lb_194153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 17), 'lb', False)
    # Getting the type of 'ub' (line 544)
    ub_194154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 22), 'ub', False)
    # Applying the binary operator '-' (line 544)
    result_sub_194155 = python_operator(stypy.reporting.localization.Localization(__file__, 544, 17), '-', lb_194153, ub_194154)
    
    # Processing the call keyword arguments (line 544)
    kwargs_194156 = {}
    # Getting the type of 'np' (line 544)
    np_194151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 10), 'np', False)
    # Obtaining the member 'abs' of a type (line 544)
    abs_194152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 10), np_194151, 'abs')
    # Calling abs(args, kwargs) (line 544)
    abs_call_result_194157 = invoke(stypy.reporting.localization.Localization(__file__, 544, 10), abs_194152, *[result_sub_194155], **kwargs_194156)
    
    # Getting the type of 'tol' (line 544)
    tol_194158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 28), 'tol')
    # Applying the binary operator '<' (line 544)
    result_lt_194159 = python_operator(stypy.reporting.localization.Localization(__file__, 544, 10), '<', abs_call_result_194157, tol_194158)
    
    # Assigning a type to the variable 'i_f' (line 544)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 544, 4), 'i_f', result_lt_194159)
    
    # Assigning a Call to a Name (line 545):
    
    # Assigning a Call to a Name (line 545):
    
    # Call to logical_not(...): (line 545)
    # Processing the call arguments (line 545)
    # Getting the type of 'i_f' (line 545)
    i_f_194162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 26), 'i_f', False)
    # Processing the call keyword arguments (line 545)
    kwargs_194163 = {}
    # Getting the type of 'np' (line 545)
    np_194160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 11), 'np', False)
    # Obtaining the member 'logical_not' of a type (line 545)
    logical_not_194161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 11), np_194160, 'logical_not')
    # Calling logical_not(args, kwargs) (line 545)
    logical_not_call_result_194164 = invoke(stypy.reporting.localization.Localization(__file__, 545, 11), logical_not_194161, *[i_f_194162], **kwargs_194163)
    
    # Assigning a type to the variable 'i_nf' (line 545)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 545, 4), 'i_nf', logical_not_call_result_194164)
    
    
    # Call to any(...): (line 546)
    # Processing the call arguments (line 546)
    # Getting the type of 'i_f' (line 546)
    i_f_194167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 14), 'i_f', False)
    # Processing the call keyword arguments (line 546)
    kwargs_194168 = {}
    # Getting the type of 'np' (line 546)
    np_194165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 7), 'np', False)
    # Obtaining the member 'any' of a type (line 546)
    any_194166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 546, 7), np_194165, 'any')
    # Calling any(args, kwargs) (line 546)
    any_call_result_194169 = invoke(stypy.reporting.localization.Localization(__file__, 546, 7), any_194166, *[i_f_194167], **kwargs_194168)
    
    # Testing the type of an if condition (line 546)
    if_condition_194170 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 546, 4), any_call_result_194169)
    # Assigning a type to the variable 'if_condition_194170' (line 546)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 546, 4), 'if_condition_194170', if_condition_194170)
    # SSA begins for if statement (line 546)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'c0' (line 547)
    c0_194171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 8), 'c0')
    
    # Call to dot(...): (line 547)
    # Processing the call arguments (line 547)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i_f' (line 547)
    i_f_194177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 28), 'i_f', False)
    # Getting the type of 'lb' (line 547)
    lb_194178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 25), 'lb', False)
    # Obtaining the member '__getitem__' of a type (line 547)
    getitem___194179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 547, 25), lb_194178, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 547)
    subscript_call_result_194180 = invoke(stypy.reporting.localization.Localization(__file__, 547, 25), getitem___194179, i_f_194177)
    
    # Processing the call keyword arguments (line 547)
    kwargs_194181 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'i_f' (line 547)
    i_f_194172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 16), 'i_f', False)
    # Getting the type of 'c' (line 547)
    c_194173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 14), 'c', False)
    # Obtaining the member '__getitem__' of a type (line 547)
    getitem___194174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 547, 14), c_194173, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 547)
    subscript_call_result_194175 = invoke(stypy.reporting.localization.Localization(__file__, 547, 14), getitem___194174, i_f_194172)
    
    # Obtaining the member 'dot' of a type (line 547)
    dot_194176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 547, 14), subscript_call_result_194175, 'dot')
    # Calling dot(args, kwargs) (line 547)
    dot_call_result_194182 = invoke(stypy.reporting.localization.Localization(__file__, 547, 14), dot_194176, *[subscript_call_result_194180], **kwargs_194181)
    
    # Applying the binary operator '+=' (line 547)
    result_iadd_194183 = python_operator(stypy.reporting.localization.Localization(__file__, 547, 8), '+=', c0_194171, dot_call_result_194182)
    # Assigning a type to the variable 'c0' (line 547)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 8), 'c0', result_iadd_194183)
    
    
    # Assigning a BinOp to a Name (line 548):
    
    # Assigning a BinOp to a Name (line 548):
    # Getting the type of 'b_eq' (line 548)
    b_eq_194184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 15), 'b_eq')
    
    # Call to dot(...): (line 548)
    # Processing the call arguments (line 548)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i_f' (line 548)
    i_f_194191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 42), 'i_f', False)
    # Getting the type of 'lb' (line 548)
    lb_194192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 39), 'lb', False)
    # Obtaining the member '__getitem__' of a type (line 548)
    getitem___194193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 39), lb_194192, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 548)
    subscript_call_result_194194 = invoke(stypy.reporting.localization.Localization(__file__, 548, 39), getitem___194193, i_f_194191)
    
    # Processing the call keyword arguments (line 548)
    kwargs_194195 = {}
    
    # Obtaining the type of the subscript
    slice_194185 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 548, 22), None, None, None)
    # Getting the type of 'i_f' (line 548)
    i_f_194186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 30), 'i_f', False)
    # Getting the type of 'A_eq' (line 548)
    A_eq_194187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 22), 'A_eq', False)
    # Obtaining the member '__getitem__' of a type (line 548)
    getitem___194188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 22), A_eq_194187, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 548)
    subscript_call_result_194189 = invoke(stypy.reporting.localization.Localization(__file__, 548, 22), getitem___194188, (slice_194185, i_f_194186))
    
    # Obtaining the member 'dot' of a type (line 548)
    dot_194190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 22), subscript_call_result_194189, 'dot')
    # Calling dot(args, kwargs) (line 548)
    dot_call_result_194196 = invoke(stypy.reporting.localization.Localization(__file__, 548, 22), dot_194190, *[subscript_call_result_194194], **kwargs_194195)
    
    # Applying the binary operator '-' (line 548)
    result_sub_194197 = python_operator(stypy.reporting.localization.Localization(__file__, 548, 15), '-', b_eq_194184, dot_call_result_194196)
    
    # Assigning a type to the variable 'b_eq' (line 548)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 548, 8), 'b_eq', result_sub_194197)
    
    # Assigning a BinOp to a Name (line 549):
    
    # Assigning a BinOp to a Name (line 549):
    # Getting the type of 'b_ub' (line 549)
    b_ub_194198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 15), 'b_ub')
    
    # Call to dot(...): (line 549)
    # Processing the call arguments (line 549)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i_f' (line 549)
    i_f_194205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 42), 'i_f', False)
    # Getting the type of 'lb' (line 549)
    lb_194206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 39), 'lb', False)
    # Obtaining the member '__getitem__' of a type (line 549)
    getitem___194207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 549, 39), lb_194206, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 549)
    subscript_call_result_194208 = invoke(stypy.reporting.localization.Localization(__file__, 549, 39), getitem___194207, i_f_194205)
    
    # Processing the call keyword arguments (line 549)
    kwargs_194209 = {}
    
    # Obtaining the type of the subscript
    slice_194199 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 549, 22), None, None, None)
    # Getting the type of 'i_f' (line 549)
    i_f_194200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 30), 'i_f', False)
    # Getting the type of 'A_ub' (line 549)
    A_ub_194201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 22), 'A_ub', False)
    # Obtaining the member '__getitem__' of a type (line 549)
    getitem___194202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 549, 22), A_ub_194201, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 549)
    subscript_call_result_194203 = invoke(stypy.reporting.localization.Localization(__file__, 549, 22), getitem___194202, (slice_194199, i_f_194200))
    
    # Obtaining the member 'dot' of a type (line 549)
    dot_194204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 549, 22), subscript_call_result_194203, 'dot')
    # Calling dot(args, kwargs) (line 549)
    dot_call_result_194210 = invoke(stypy.reporting.localization.Localization(__file__, 549, 22), dot_194204, *[subscript_call_result_194208], **kwargs_194209)
    
    # Applying the binary operator '-' (line 549)
    result_sub_194211 = python_operator(stypy.reporting.localization.Localization(__file__, 549, 15), '-', b_ub_194198, dot_call_result_194210)
    
    # Assigning a type to the variable 'b_ub' (line 549)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 8), 'b_ub', result_sub_194211)
    
    # Assigning a Subscript to a Name (line 550):
    
    # Assigning a Subscript to a Name (line 550):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i_nf' (line 550)
    i_nf_194212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 14), 'i_nf')
    # Getting the type of 'c' (line 550)
    c_194213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 12), 'c')
    # Obtaining the member '__getitem__' of a type (line 550)
    getitem___194214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 550, 12), c_194213, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 550)
    subscript_call_result_194215 = invoke(stypy.reporting.localization.Localization(__file__, 550, 12), getitem___194214, i_nf_194212)
    
    # Assigning a type to the variable 'c' (line 550)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 550, 8), 'c', subscript_call_result_194215)
    
    # Assigning a Subscript to a Name (line 551):
    
    # Assigning a Subscript to a Name (line 551):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i_nf' (line 551)
    i_nf_194216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 14), 'i_nf')
    # Getting the type of 'x' (line 551)
    x_194217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 12), 'x')
    # Obtaining the member '__getitem__' of a type (line 551)
    getitem___194218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 12), x_194217, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 551)
    subscript_call_result_194219 = invoke(stypy.reporting.localization.Localization(__file__, 551, 12), getitem___194218, i_nf_194216)
    
    # Assigning a type to the variable 'x' (line 551)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 8), 'x', subscript_call_result_194219)
    
    # Assigning a Subscript to a Name (line 552):
    
    # Assigning a Subscript to a Name (line 552):
    
    # Obtaining the type of the subscript
    slice_194220 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 552, 15), None, None, None)
    # Getting the type of 'i_nf' (line 552)
    i_nf_194221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 23), 'i_nf')
    # Getting the type of 'A_eq' (line 552)
    A_eq_194222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 15), 'A_eq')
    # Obtaining the member '__getitem__' of a type (line 552)
    getitem___194223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 15), A_eq_194222, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 552)
    subscript_call_result_194224 = invoke(stypy.reporting.localization.Localization(__file__, 552, 15), getitem___194223, (slice_194220, i_nf_194221))
    
    # Assigning a type to the variable 'A_eq' (line 552)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 8), 'A_eq', subscript_call_result_194224)
    
    # Assigning a Subscript to a Name (line 553):
    
    # Assigning a Subscript to a Name (line 553):
    
    # Obtaining the type of the subscript
    slice_194225 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 553, 15), None, None, None)
    # Getting the type of 'i_nf' (line 553)
    i_nf_194226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 23), 'i_nf')
    # Getting the type of 'A_ub' (line 553)
    A_ub_194227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 15), 'A_ub')
    # Obtaining the member '__getitem__' of a type (line 553)
    getitem___194228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 15), A_ub_194227, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 553)
    subscript_call_result_194229 = invoke(stypy.reporting.localization.Localization(__file__, 553, 15), getitem___194228, (slice_194225, i_nf_194226))
    
    # Assigning a type to the variable 'A_ub' (line 553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 8), 'A_ub', subscript_call_result_194229)
    
    # Assigning a List to a Name (line 555):
    
    # Assigning a List to a Name (line 555):
    
    # Obtaining an instance of the builtin type 'list' (line 555)
    list_194230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 555, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 555)
    # Adding element type (line 555)
    
    # Obtaining the type of the subscript
    int_194231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 555, 30), 'int')
    
    # Call to where(...): (line 555)
    # Processing the call arguments (line 555)
    # Getting the type of 'i_f' (line 555)
    i_f_194234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 25), 'i_f', False)
    # Processing the call keyword arguments (line 555)
    kwargs_194235 = {}
    # Getting the type of 'np' (line 555)
    np_194232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 16), 'np', False)
    # Obtaining the member 'where' of a type (line 555)
    where_194233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 16), np_194232, 'where')
    # Calling where(args, kwargs) (line 555)
    where_call_result_194236 = invoke(stypy.reporting.localization.Localization(__file__, 555, 16), where_194233, *[i_f_194234], **kwargs_194235)
    
    # Obtaining the member '__getitem__' of a type (line 555)
    getitem___194237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 16), where_call_result_194236, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 555)
    subscript_call_result_194238 = invoke(stypy.reporting.localization.Localization(__file__, 555, 16), getitem___194237, int_194231)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 555, 15), list_194230, subscript_call_result_194238)
    # Adding element type (line 555)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i_f' (line 555)
    i_f_194239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 37), 'i_f')
    # Getting the type of 'lb' (line 555)
    lb_194240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 34), 'lb')
    # Obtaining the member '__getitem__' of a type (line 555)
    getitem___194241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 34), lb_194240, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 555)
    subscript_call_result_194242 = invoke(stypy.reporting.localization.Localization(__file__, 555, 34), getitem___194241, i_f_194239)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 555, 15), list_194230, subscript_call_result_194242)
    
    # Assigning a type to the variable 'undo' (line 555)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 555, 8), 'undo', list_194230)
    # SSA join for if statement (line 546)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'A_eq' (line 559)
    A_eq_194243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 7), 'A_eq')
    # Obtaining the member 'size' of a type (line 559)
    size_194244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 7), A_eq_194243, 'size')
    int_194245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 20), 'int')
    # Applying the binary operator '==' (line 559)
    result_eq_194246 = python_operator(stypy.reporting.localization.Localization(__file__, 559, 7), '==', size_194244, int_194245)
    
    
    # Getting the type of 'A_ub' (line 559)
    A_ub_194247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 26), 'A_ub')
    # Obtaining the member 'size' of a type (line 559)
    size_194248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 26), A_ub_194247, 'size')
    int_194249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 39), 'int')
    # Applying the binary operator '==' (line 559)
    result_eq_194250 = python_operator(stypy.reporting.localization.Localization(__file__, 559, 26), '==', size_194248, int_194249)
    
    # Applying the binary operator 'and' (line 559)
    result_and_keyword_194251 = python_operator(stypy.reporting.localization.Localization(__file__, 559, 7), 'and', result_eq_194246, result_eq_194250)
    
    # Testing the type of an if condition (line 559)
    if_condition_194252 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 559, 4), result_and_keyword_194251)
    # Assigning a type to the variable 'if_condition_194252' (line 559)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 559, 4), 'if_condition_194252', if_condition_194252)
    # SSA begins for if statement (line 559)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 560):
    
    # Assigning a Call to a Name (line 560):
    
    # Call to array(...): (line 560)
    # Processing the call arguments (line 560)
    
    # Obtaining an instance of the builtin type 'list' (line 560)
    list_194255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 560)
    
    # Processing the call keyword arguments (line 560)
    kwargs_194256 = {}
    # Getting the type of 'np' (line 560)
    np_194253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 15), 'np', False)
    # Obtaining the member 'array' of a type (line 560)
    array_194254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 15), np_194253, 'array')
    # Calling array(args, kwargs) (line 560)
    array_call_result_194257 = invoke(stypy.reporting.localization.Localization(__file__, 560, 15), array_194254, *[list_194255], **kwargs_194256)
    
    # Assigning a type to the variable 'b_eq' (line 560)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'b_eq', array_call_result_194257)
    
    # Assigning a Call to a Name (line 561):
    
    # Assigning a Call to a Name (line 561):
    
    # Call to array(...): (line 561)
    # Processing the call arguments (line 561)
    
    # Obtaining an instance of the builtin type 'list' (line 561)
    list_194260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 561)
    
    # Processing the call keyword arguments (line 561)
    kwargs_194261 = {}
    # Getting the type of 'np' (line 561)
    np_194258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 15), 'np', False)
    # Obtaining the member 'array' of a type (line 561)
    array_194259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 15), np_194258, 'array')
    # Calling array(args, kwargs) (line 561)
    array_call_result_194262 = invoke(stypy.reporting.localization.Localization(__file__, 561, 15), array_194259, *[list_194260], **kwargs_194261)
    
    # Assigning a type to the variable 'b_ub' (line 561)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 561, 8), 'b_ub', array_call_result_194262)
    
    
    # Getting the type of 'c' (line 563)
    c_194263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 11), 'c')
    # Obtaining the member 'size' of a type (line 563)
    size_194264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 11), c_194263, 'size')
    int_194265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 563, 21), 'int')
    # Applying the binary operator '==' (line 563)
    result_eq_194266 = python_operator(stypy.reporting.localization.Localization(__file__, 563, 11), '==', size_194264, int_194265)
    
    # Testing the type of an if condition (line 563)
    if_condition_194267 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 563, 8), result_eq_194266)
    # Assigning a type to the variable 'if_condition_194267' (line 563)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 563, 8), 'if_condition_194267', if_condition_194267)
    # SSA begins for if statement (line 563)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 564):
    
    # Assigning a Num to a Name (line 564):
    int_194268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 564, 21), 'int')
    # Assigning a type to the variable 'status' (line 564)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 564, 12), 'status', int_194268)
    
    # Assigning a Str to a Name (line 565):
    
    # Assigning a Str to a Name (line 565):
    str_194269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 565, 23), 'str', 'The solution was determined in presolve as there areno non-trivial constraints.')
    # Assigning a type to the variable 'message' (line 565)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 12), 'message', str_194269)
    # SSA branch for the else part of an if statement (line 563)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    # Call to any(...): (line 567)
    # Processing the call arguments (line 567)
    
    # Call to logical_and(...): (line 567)
    # Processing the call arguments (line 567)
    
    # Getting the type of 'c' (line 567)
    c_194274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 36), 'c', False)
    int_194275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 567, 40), 'int')
    # Applying the binary operator '<' (line 567)
    result_lt_194276 = python_operator(stypy.reporting.localization.Localization(__file__, 567, 36), '<', c_194274, int_194275)
    
    
    # Getting the type of 'ub' (line 567)
    ub_194277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 43), 'ub', False)
    # Getting the type of 'np' (line 567)
    np_194278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 49), 'np', False)
    # Obtaining the member 'inf' of a type (line 567)
    inf_194279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 49), np_194278, 'inf')
    # Applying the binary operator '==' (line 567)
    result_eq_194280 = python_operator(stypy.reporting.localization.Localization(__file__, 567, 43), '==', ub_194277, inf_194279)
    
    # Processing the call keyword arguments (line 567)
    kwargs_194281 = {}
    # Getting the type of 'np' (line 567)
    np_194272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 21), 'np', False)
    # Obtaining the member 'logical_and' of a type (line 567)
    logical_and_194273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 21), np_194272, 'logical_and')
    # Calling logical_and(args, kwargs) (line 567)
    logical_and_call_result_194282 = invoke(stypy.reporting.localization.Localization(__file__, 567, 21), logical_and_194273, *[result_lt_194276, result_eq_194280], **kwargs_194281)
    
    # Processing the call keyword arguments (line 567)
    kwargs_194283 = {}
    # Getting the type of 'np' (line 567)
    np_194270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 14), 'np', False)
    # Obtaining the member 'any' of a type (line 567)
    any_194271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 14), np_194270, 'any')
    # Calling any(args, kwargs) (line 567)
    any_call_result_194284 = invoke(stypy.reporting.localization.Localization(__file__, 567, 14), any_194271, *[logical_and_call_result_194282], **kwargs_194283)
    
    
    # Call to any(...): (line 568)
    # Processing the call arguments (line 568)
    
    # Call to logical_and(...): (line 568)
    # Processing the call arguments (line 568)
    
    # Getting the type of 'c' (line 568)
    c_194289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 38), 'c', False)
    int_194290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 568, 42), 'int')
    # Applying the binary operator '>' (line 568)
    result_gt_194291 = python_operator(stypy.reporting.localization.Localization(__file__, 568, 38), '>', c_194289, int_194290)
    
    
    # Getting the type of 'lb' (line 568)
    lb_194292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 45), 'lb', False)
    
    # Getting the type of 'np' (line 568)
    np_194293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 52), 'np', False)
    # Obtaining the member 'inf' of a type (line 568)
    inf_194294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 568, 52), np_194293, 'inf')
    # Applying the 'usub' unary operator (line 568)
    result___neg___194295 = python_operator(stypy.reporting.localization.Localization(__file__, 568, 51), 'usub', inf_194294)
    
    # Applying the binary operator '==' (line 568)
    result_eq_194296 = python_operator(stypy.reporting.localization.Localization(__file__, 568, 45), '==', lb_194292, result___neg___194295)
    
    # Processing the call keyword arguments (line 568)
    kwargs_194297 = {}
    # Getting the type of 'np' (line 568)
    np_194287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 23), 'np', False)
    # Obtaining the member 'logical_and' of a type (line 568)
    logical_and_194288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 568, 23), np_194287, 'logical_and')
    # Calling logical_and(args, kwargs) (line 568)
    logical_and_call_result_194298 = invoke(stypy.reporting.localization.Localization(__file__, 568, 23), logical_and_194288, *[result_gt_194291, result_eq_194296], **kwargs_194297)
    
    # Processing the call keyword arguments (line 568)
    kwargs_194299 = {}
    # Getting the type of 'np' (line 568)
    np_194285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 16), 'np', False)
    # Obtaining the member 'any' of a type (line 568)
    any_194286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 568, 16), np_194285, 'any')
    # Calling any(args, kwargs) (line 568)
    any_call_result_194300 = invoke(stypy.reporting.localization.Localization(__file__, 568, 16), any_194286, *[logical_and_call_result_194298], **kwargs_194299)
    
    # Applying the binary operator 'or' (line 567)
    result_or_keyword_194301 = python_operator(stypy.reporting.localization.Localization(__file__, 567, 14), 'or', any_call_result_194284, any_call_result_194300)
    
    # Testing the type of an if condition (line 567)
    if_condition_194302 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 567, 13), result_or_keyword_194301)
    # Assigning a type to the variable 'if_condition_194302' (line 567)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 13), 'if_condition_194302', if_condition_194302)
    # SSA begins for if statement (line 567)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 570):
    
    # Assigning a Num to a Name (line 570):
    int_194303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 570, 21), 'int')
    # Assigning a type to the variable 'status' (line 570)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 570, 12), 'status', int_194303)
    
    # Assigning a Str to a Name (line 571):
    
    # Assigning a Str to a Name (line 571):
    str_194304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 571, 23), 'str', 'If feasible, the problem is (trivially) unbounded because there are no constraints and at least one  element of c is negative. If you wish to check  whether the problem is infeasible, turn presolve off.')
    # Assigning a type to the variable 'message' (line 571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 12), 'message', str_194304)
    # SSA branch for the else part of an if statement (line 567)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Name (line 577):
    
    # Assigning a Num to a Name (line 577):
    int_194305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 21), 'int')
    # Assigning a type to the variable 'status' (line 577)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 12), 'status', int_194305)
    
    # Assigning a Str to a Name (line 578):
    
    # Assigning a Str to a Name (line 578):
    str_194306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, 23), 'str', 'The solution was determined in presolve as there are no non-trivial constraints.')
    # Assigning a type to the variable 'message' (line 578)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 12), 'message', str_194306)
    # SSA join for if statement (line 567)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 563)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 580):
    
    # Assigning a Name to a Name (line 580):
    # Getting the type of 'True' (line 580)
    True_194307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 19), 'True')
    # Assigning a type to the variable 'complete' (line 580)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 580, 8), 'complete', True_194307)
    
    # Assigning a Subscript to a Subscript (line 581):
    
    # Assigning a Subscript to a Subscript (line 581):
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'c' (line 581)
    c_194308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 22), 'c')
    int_194309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 581, 26), 'int')
    # Applying the binary operator '<' (line 581)
    result_lt_194310 = python_operator(stypy.reporting.localization.Localization(__file__, 581, 22), '<', c_194308, int_194309)
    
    # Getting the type of 'ub' (line 581)
    ub_194311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 19), 'ub')
    # Obtaining the member '__getitem__' of a type (line 581)
    getitem___194312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 19), ub_194311, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 581)
    subscript_call_result_194313 = invoke(stypy.reporting.localization.Localization(__file__, 581, 19), getitem___194312, result_lt_194310)
    
    # Getting the type of 'x' (line 581)
    x_194314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 8), 'x')
    
    # Getting the type of 'c' (line 581)
    c_194315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 10), 'c')
    int_194316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 581, 14), 'int')
    # Applying the binary operator '<' (line 581)
    result_lt_194317 = python_operator(stypy.reporting.localization.Localization(__file__, 581, 10), '<', c_194315, int_194316)
    
    # Storing an element on a container (line 581)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 581, 8), x_194314, (result_lt_194317, subscript_call_result_194313))
    
    # Assigning a Subscript to a Subscript (line 582):
    
    # Assigning a Subscript to a Subscript (line 582):
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'c' (line 582)
    c_194318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 22), 'c')
    int_194319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 582, 26), 'int')
    # Applying the binary operator '>' (line 582)
    result_gt_194320 = python_operator(stypy.reporting.localization.Localization(__file__, 582, 22), '>', c_194318, int_194319)
    
    # Getting the type of 'lb' (line 582)
    lb_194321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 19), 'lb')
    # Obtaining the member '__getitem__' of a type (line 582)
    getitem___194322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 19), lb_194321, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 582)
    subscript_call_result_194323 = invoke(stypy.reporting.localization.Localization(__file__, 582, 19), getitem___194322, result_gt_194320)
    
    # Getting the type of 'x' (line 582)
    x_194324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 8), 'x')
    
    # Getting the type of 'c' (line 582)
    c_194325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 10), 'c')
    int_194326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 582, 14), 'int')
    # Applying the binary operator '>' (line 582)
    result_gt_194327 = python_operator(stypy.reporting.localization.Localization(__file__, 582, 10), '>', c_194325, int_194326)
    
    # Storing an element on a container (line 582)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 582, 8), x_194324, (result_gt_194327, subscript_call_result_194323))
    # SSA join for if statement (line 559)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Subscript (line 588):
    
    # Assigning a Name to a Subscript (line 588):
    # Getting the type of 'None' (line 588)
    None_194328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 32), 'None')
    # Getting the type of 'lb' (line 588)
    lb_194329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 4), 'lb')
    
    # Call to equal(...): (line 588)
    # Processing the call arguments (line 588)
    # Getting the type of 'lb' (line 588)
    lb_194332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 16), 'lb', False)
    
    # Getting the type of 'np' (line 588)
    np_194333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 21), 'np', False)
    # Obtaining the member 'inf' of a type (line 588)
    inf_194334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 21), np_194333, 'inf')
    # Applying the 'usub' unary operator (line 588)
    result___neg___194335 = python_operator(stypy.reporting.localization.Localization(__file__, 588, 20), 'usub', inf_194334)
    
    # Processing the call keyword arguments (line 588)
    kwargs_194336 = {}
    # Getting the type of 'np' (line 588)
    np_194330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 7), 'np', False)
    # Obtaining the member 'equal' of a type (line 588)
    equal_194331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 7), np_194330, 'equal')
    # Calling equal(args, kwargs) (line 588)
    equal_call_result_194337 = invoke(stypy.reporting.localization.Localization(__file__, 588, 7), equal_194331, *[lb_194332, result___neg___194335], **kwargs_194336)
    
    # Storing an element on a container (line 588)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 588, 4), lb_194329, (equal_call_result_194337, None_194328))
    
    # Assigning a Name to a Subscript (line 589):
    
    # Assigning a Name to a Subscript (line 589):
    # Getting the type of 'None' (line 589)
    None_194338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 31), 'None')
    # Getting the type of 'ub' (line 589)
    ub_194339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 4), 'ub')
    
    # Call to equal(...): (line 589)
    # Processing the call arguments (line 589)
    # Getting the type of 'ub' (line 589)
    ub_194342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 16), 'ub', False)
    # Getting the type of 'np' (line 589)
    np_194343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 20), 'np', False)
    # Obtaining the member 'inf' of a type (line 589)
    inf_194344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 20), np_194343, 'inf')
    # Processing the call keyword arguments (line 589)
    kwargs_194345 = {}
    # Getting the type of 'np' (line 589)
    np_194340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 7), 'np', False)
    # Obtaining the member 'equal' of a type (line 589)
    equal_194341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 7), np_194340, 'equal')
    # Calling equal(args, kwargs) (line 589)
    equal_call_result_194346 = invoke(stypy.reporting.localization.Localization(__file__, 589, 7), equal_194341, *[ub_194342, inf_194344], **kwargs_194345)
    
    # Storing an element on a container (line 589)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 589, 4), ub_194339, (equal_call_result_194346, None_194338))
    
    # Assigning a Call to a Name (line 590):
    
    # Assigning a Call to a Name (line 590):
    
    # Call to hstack(...): (line 590)
    # Processing the call arguments (line 590)
    
    # Obtaining an instance of the builtin type 'tuple' (line 590)
    tuple_194349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 590)
    # Adding element type (line 590)
    
    # Obtaining the type of the subscript
    slice_194350 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 590, 24), None, None, None)
    # Getting the type of 'np' (line 590)
    np_194351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 30), 'np', False)
    # Obtaining the member 'newaxis' of a type (line 590)
    newaxis_194352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 30), np_194351, 'newaxis')
    # Getting the type of 'lb' (line 590)
    lb_194353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 24), 'lb', False)
    # Obtaining the member '__getitem__' of a type (line 590)
    getitem___194354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 24), lb_194353, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 590)
    subscript_call_result_194355 = invoke(stypy.reporting.localization.Localization(__file__, 590, 24), getitem___194354, (slice_194350, newaxis_194352))
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 590, 24), tuple_194349, subscript_call_result_194355)
    # Adding element type (line 590)
    
    # Obtaining the type of the subscript
    slice_194356 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 590, 43), None, None, None)
    # Getting the type of 'np' (line 590)
    np_194357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 49), 'np', False)
    # Obtaining the member 'newaxis' of a type (line 590)
    newaxis_194358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 49), np_194357, 'newaxis')
    # Getting the type of 'ub' (line 590)
    ub_194359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 43), 'ub', False)
    # Obtaining the member '__getitem__' of a type (line 590)
    getitem___194360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 43), ub_194359, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 590)
    subscript_call_result_194361 = invoke(stypy.reporting.localization.Localization(__file__, 590, 43), getitem___194360, (slice_194356, newaxis_194358))
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 590, 24), tuple_194349, subscript_call_result_194361)
    
    # Processing the call keyword arguments (line 590)
    kwargs_194362 = {}
    # Getting the type of 'np' (line 590)
    np_194347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 13), 'np', False)
    # Obtaining the member 'hstack' of a type (line 590)
    hstack_194348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 13), np_194347, 'hstack')
    # Calling hstack(args, kwargs) (line 590)
    hstack_call_result_194363 = invoke(stypy.reporting.localization.Localization(__file__, 590, 13), hstack_194348, *[tuple_194349], **kwargs_194362)
    
    # Assigning a type to the variable 'bounds' (line 590)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 590, 4), 'bounds', hstack_call_result_194363)
    
    # Assigning a Call to a Name (line 591):
    
    # Assigning a Call to a Name (line 591):
    
    # Call to tolist(...): (line 591)
    # Processing the call keyword arguments (line 591)
    kwargs_194366 = {}
    # Getting the type of 'bounds' (line 591)
    bounds_194364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 13), 'bounds', False)
    # Obtaining the member 'tolist' of a type (line 591)
    tolist_194365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 13), bounds_194364, 'tolist')
    # Calling tolist(args, kwargs) (line 591)
    tolist_call_result_194367 = invoke(stypy.reporting.localization.Localization(__file__, 591, 13), tolist_194365, *[], **kwargs_194366)
    
    # Assigning a type to the variable 'bounds' (line 591)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 591, 4), 'bounds', tolist_call_result_194367)
    
    
    # Call to enumerate(...): (line 592)
    # Processing the call arguments (line 592)
    # Getting the type of 'bounds' (line 592)
    bounds_194369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 28), 'bounds', False)
    # Processing the call keyword arguments (line 592)
    kwargs_194370 = {}
    # Getting the type of 'enumerate' (line 592)
    enumerate_194368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 18), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 592)
    enumerate_call_result_194371 = invoke(stypy.reporting.localization.Localization(__file__, 592, 18), enumerate_194368, *[bounds_194369], **kwargs_194370)
    
    # Testing the type of a for loop iterable (line 592)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 592, 4), enumerate_call_result_194371)
    # Getting the type of the for loop variable (line 592)
    for_loop_var_194372 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 592, 4), enumerate_call_result_194371)
    # Assigning a type to the variable 'i' (line 592)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 592, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 592, 4), for_loop_var_194372))
    # Assigning a type to the variable 'row' (line 592)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 592, 4), 'row', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 592, 4), for_loop_var_194372))
    # SSA begins for a for statement (line 592)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to enumerate(...): (line 593)
    # Processing the call arguments (line 593)
    # Getting the type of 'row' (line 593)
    row_194374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 32), 'row', False)
    # Processing the call keyword arguments (line 593)
    kwargs_194375 = {}
    # Getting the type of 'enumerate' (line 593)
    enumerate_194373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 22), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 593)
    enumerate_call_result_194376 = invoke(stypy.reporting.localization.Localization(__file__, 593, 22), enumerate_194373, *[row_194374], **kwargs_194375)
    
    # Testing the type of a for loop iterable (line 593)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 593, 8), enumerate_call_result_194376)
    # Getting the type of the for loop variable (line 593)
    for_loop_var_194377 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 593, 8), enumerate_call_result_194376)
    # Assigning a type to the variable 'j' (line 593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 8), 'j', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 593, 8), for_loop_var_194377))
    # Assigning a type to the variable 'col' (line 593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 8), 'col', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 593, 8), for_loop_var_194377))
    # SSA begins for a for statement (line 593)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to str(...): (line 594)
    # Processing the call arguments (line 594)
    # Getting the type of 'col' (line 595)
    col_194379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 20), 'col', False)
    # Processing the call keyword arguments (line 594)
    kwargs_194380 = {}
    # Getting the type of 'str' (line 594)
    str_194378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 15), 'str', False)
    # Calling str(args, kwargs) (line 594)
    str_call_result_194381 = invoke(stypy.reporting.localization.Localization(__file__, 594, 15), str_194378, *[col_194379], **kwargs_194380)
    
    str_194382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 595, 28), 'str', 'nan')
    # Applying the binary operator '==' (line 594)
    result_eq_194383 = python_operator(stypy.reporting.localization.Localization(__file__, 594, 15), '==', str_call_result_194381, str_194382)
    
    # Testing the type of an if condition (line 594)
    if_condition_194384 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 594, 12), result_eq_194383)
    # Assigning a type to the variable 'if_condition_194384' (line 594)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 12), 'if_condition_194384', if_condition_194384)
    # SSA begins for if statement (line 594)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 597):
    
    # Assigning a Name to a Subscript (line 597):
    # Getting the type of 'None' (line 597)
    None_194385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 31), 'None')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 597)
    i_194386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 23), 'i')
    # Getting the type of 'bounds' (line 597)
    bounds_194387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 16), 'bounds')
    # Obtaining the member '__getitem__' of a type (line 597)
    getitem___194388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 16), bounds_194387, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 597)
    subscript_call_result_194389 = invoke(stypy.reporting.localization.Localization(__file__, 597, 16), getitem___194388, i_194386)
    
    # Getting the type of 'j' (line 597)
    j_194390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 26), 'j')
    # Storing an element on a container (line 597)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 597, 16), subscript_call_result_194389, (j_194390, None_194385))
    # SSA join for if statement (line 594)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 600):
    
    # Assigning a Subscript to a Name (line 600):
    
    # Obtaining the type of the subscript
    int_194391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 600, 26), 'int')
    # Getting the type of 'A_eq' (line 600)
    A_eq_194392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 15), 'A_eq')
    # Obtaining the member 'shape' of a type (line 600)
    shape_194393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 600, 15), A_eq_194392, 'shape')
    # Obtaining the member '__getitem__' of a type (line 600)
    getitem___194394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 600, 15), shape_194393, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 600)
    subscript_call_result_194395 = invoke(stypy.reporting.localization.Localization(__file__, 600, 15), getitem___194394, int_194391)
    
    # Assigning a type to the variable 'n_rows_A' (line 600)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 600, 4), 'n_rows_A', subscript_call_result_194395)
    
    # Assigning a Str to a Name (line 601):
    
    # Assigning a Str to a Name (line 601):
    str_194396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 601, 26), 'str', 'A_eq does not appear to be of full row rank. To improve performance, check the problem formulation for redundant equality constraints.')
    # Assigning a type to the variable 'redundancy_warning' (line 601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 601, 4), 'redundancy_warning', str_194396)
    
    
    # Call to issparse(...): (line 604)
    # Processing the call arguments (line 604)
    # Getting the type of 'A_eq' (line 604)
    A_eq_194399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 21), 'A_eq', False)
    # Processing the call keyword arguments (line 604)
    kwargs_194400 = {}
    # Getting the type of 'sps' (line 604)
    sps_194397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 8), 'sps', False)
    # Obtaining the member 'issparse' of a type (line 604)
    issparse_194398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 604, 8), sps_194397, 'issparse')
    # Calling issparse(args, kwargs) (line 604)
    issparse_call_result_194401 = invoke(stypy.reporting.localization.Localization(__file__, 604, 8), issparse_194398, *[A_eq_194399], **kwargs_194400)
    
    # Testing the type of an if condition (line 604)
    if_condition_194402 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 604, 4), issparse_call_result_194401)
    # Assigning a type to the variable 'if_condition_194402' (line 604)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 604, 4), 'if_condition_194402', if_condition_194402)
    # SSA begins for if statement (line 604)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    # Getting the type of 'rr' (line 605)
    rr_194403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 11), 'rr')
    
    # Getting the type of 'A_eq' (line 605)
    A_eq_194404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 18), 'A_eq')
    # Obtaining the member 'size' of a type (line 605)
    size_194405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 18), A_eq_194404, 'size')
    int_194406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 30), 'int')
    # Applying the binary operator '>' (line 605)
    result_gt_194407 = python_operator(stypy.reporting.localization.Localization(__file__, 605, 18), '>', size_194405, int_194406)
    
    # Applying the binary operator 'and' (line 605)
    result_and_keyword_194408 = python_operator(stypy.reporting.localization.Localization(__file__, 605, 11), 'and', rr_194403, result_gt_194407)
    
    # Testing the type of an if condition (line 605)
    if_condition_194409 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 605, 8), result_and_keyword_194408)
    # Assigning a type to the variable 'if_condition_194409' (line 605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 8), 'if_condition_194409', if_condition_194409)
    # SSA begins for if statement (line 605)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 606):
    
    # Assigning a Subscript to a Name (line 606):
    
    # Obtaining the type of the subscript
    int_194410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 606, 12), 'int')
    
    # Call to _remove_redundancy_sparse(...): (line 606)
    # Processing the call arguments (line 606)
    # Getting the type of 'A_eq' (line 606)
    A_eq_194412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 68), 'A_eq', False)
    # Getting the type of 'b_eq' (line 606)
    b_eq_194413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 74), 'b_eq', False)
    # Processing the call keyword arguments (line 606)
    kwargs_194414 = {}
    # Getting the type of '_remove_redundancy_sparse' (line 606)
    _remove_redundancy_sparse_194411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 42), '_remove_redundancy_sparse', False)
    # Calling _remove_redundancy_sparse(args, kwargs) (line 606)
    _remove_redundancy_sparse_call_result_194415 = invoke(stypy.reporting.localization.Localization(__file__, 606, 42), _remove_redundancy_sparse_194411, *[A_eq_194412, b_eq_194413], **kwargs_194414)
    
    # Obtaining the member '__getitem__' of a type (line 606)
    getitem___194416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 12), _remove_redundancy_sparse_call_result_194415, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 606)
    subscript_call_result_194417 = invoke(stypy.reporting.localization.Localization(__file__, 606, 12), getitem___194416, int_194410)
    
    # Assigning a type to the variable 'tuple_var_assignment_192561' (line 606)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 12), 'tuple_var_assignment_192561', subscript_call_result_194417)
    
    # Assigning a Subscript to a Name (line 606):
    
    # Obtaining the type of the subscript
    int_194418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 606, 12), 'int')
    
    # Call to _remove_redundancy_sparse(...): (line 606)
    # Processing the call arguments (line 606)
    # Getting the type of 'A_eq' (line 606)
    A_eq_194420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 68), 'A_eq', False)
    # Getting the type of 'b_eq' (line 606)
    b_eq_194421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 74), 'b_eq', False)
    # Processing the call keyword arguments (line 606)
    kwargs_194422 = {}
    # Getting the type of '_remove_redundancy_sparse' (line 606)
    _remove_redundancy_sparse_194419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 42), '_remove_redundancy_sparse', False)
    # Calling _remove_redundancy_sparse(args, kwargs) (line 606)
    _remove_redundancy_sparse_call_result_194423 = invoke(stypy.reporting.localization.Localization(__file__, 606, 42), _remove_redundancy_sparse_194419, *[A_eq_194420, b_eq_194421], **kwargs_194422)
    
    # Obtaining the member '__getitem__' of a type (line 606)
    getitem___194424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 12), _remove_redundancy_sparse_call_result_194423, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 606)
    subscript_call_result_194425 = invoke(stypy.reporting.localization.Localization(__file__, 606, 12), getitem___194424, int_194418)
    
    # Assigning a type to the variable 'tuple_var_assignment_192562' (line 606)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 12), 'tuple_var_assignment_192562', subscript_call_result_194425)
    
    # Assigning a Subscript to a Name (line 606):
    
    # Obtaining the type of the subscript
    int_194426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 606, 12), 'int')
    
    # Call to _remove_redundancy_sparse(...): (line 606)
    # Processing the call arguments (line 606)
    # Getting the type of 'A_eq' (line 606)
    A_eq_194428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 68), 'A_eq', False)
    # Getting the type of 'b_eq' (line 606)
    b_eq_194429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 74), 'b_eq', False)
    # Processing the call keyword arguments (line 606)
    kwargs_194430 = {}
    # Getting the type of '_remove_redundancy_sparse' (line 606)
    _remove_redundancy_sparse_194427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 42), '_remove_redundancy_sparse', False)
    # Calling _remove_redundancy_sparse(args, kwargs) (line 606)
    _remove_redundancy_sparse_call_result_194431 = invoke(stypy.reporting.localization.Localization(__file__, 606, 42), _remove_redundancy_sparse_194427, *[A_eq_194428, b_eq_194429], **kwargs_194430)
    
    # Obtaining the member '__getitem__' of a type (line 606)
    getitem___194432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 12), _remove_redundancy_sparse_call_result_194431, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 606)
    subscript_call_result_194433 = invoke(stypy.reporting.localization.Localization(__file__, 606, 12), getitem___194432, int_194426)
    
    # Assigning a type to the variable 'tuple_var_assignment_192563' (line 606)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 12), 'tuple_var_assignment_192563', subscript_call_result_194433)
    
    # Assigning a Subscript to a Name (line 606):
    
    # Obtaining the type of the subscript
    int_194434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 606, 12), 'int')
    
    # Call to _remove_redundancy_sparse(...): (line 606)
    # Processing the call arguments (line 606)
    # Getting the type of 'A_eq' (line 606)
    A_eq_194436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 68), 'A_eq', False)
    # Getting the type of 'b_eq' (line 606)
    b_eq_194437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 74), 'b_eq', False)
    # Processing the call keyword arguments (line 606)
    kwargs_194438 = {}
    # Getting the type of '_remove_redundancy_sparse' (line 606)
    _remove_redundancy_sparse_194435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 42), '_remove_redundancy_sparse', False)
    # Calling _remove_redundancy_sparse(args, kwargs) (line 606)
    _remove_redundancy_sparse_call_result_194439 = invoke(stypy.reporting.localization.Localization(__file__, 606, 42), _remove_redundancy_sparse_194435, *[A_eq_194436, b_eq_194437], **kwargs_194438)
    
    # Obtaining the member '__getitem__' of a type (line 606)
    getitem___194440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 12), _remove_redundancy_sparse_call_result_194439, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 606)
    subscript_call_result_194441 = invoke(stypy.reporting.localization.Localization(__file__, 606, 12), getitem___194440, int_194434)
    
    # Assigning a type to the variable 'tuple_var_assignment_192564' (line 606)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 12), 'tuple_var_assignment_192564', subscript_call_result_194441)
    
    # Assigning a Name to a Name (line 606):
    # Getting the type of 'tuple_var_assignment_192561' (line 606)
    tuple_var_assignment_192561_194442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 12), 'tuple_var_assignment_192561')
    # Assigning a type to the variable 'A_eq' (line 606)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 12), 'A_eq', tuple_var_assignment_192561_194442)
    
    # Assigning a Name to a Name (line 606):
    # Getting the type of 'tuple_var_assignment_192562' (line 606)
    tuple_var_assignment_192562_194443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 12), 'tuple_var_assignment_192562')
    # Assigning a type to the variable 'b_eq' (line 606)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 18), 'b_eq', tuple_var_assignment_192562_194443)
    
    # Assigning a Name to a Name (line 606):
    # Getting the type of 'tuple_var_assignment_192563' (line 606)
    tuple_var_assignment_192563_194444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 12), 'tuple_var_assignment_192563')
    # Assigning a type to the variable 'status' (line 606)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 24), 'status', tuple_var_assignment_192563_194444)
    
    # Assigning a Name to a Name (line 606):
    # Getting the type of 'tuple_var_assignment_192564' (line 606)
    tuple_var_assignment_192564_194445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 12), 'tuple_var_assignment_192564')
    # Assigning a type to the variable 'message' (line 606)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 32), 'message', tuple_var_assignment_192564_194445)
    
    
    
    # Obtaining the type of the subscript
    int_194446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 607, 26), 'int')
    # Getting the type of 'A_eq' (line 607)
    A_eq_194447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 15), 'A_eq')
    # Obtaining the member 'shape' of a type (line 607)
    shape_194448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 15), A_eq_194447, 'shape')
    # Obtaining the member '__getitem__' of a type (line 607)
    getitem___194449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 15), shape_194448, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 607)
    subscript_call_result_194450 = invoke(stypy.reporting.localization.Localization(__file__, 607, 15), getitem___194449, int_194446)
    
    # Getting the type of 'n_rows_A' (line 607)
    n_rows_A_194451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 31), 'n_rows_A')
    # Applying the binary operator '<' (line 607)
    result_lt_194452 = python_operator(stypy.reporting.localization.Localization(__file__, 607, 15), '<', subscript_call_result_194450, n_rows_A_194451)
    
    # Testing the type of an if condition (line 607)
    if_condition_194453 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 607, 12), result_lt_194452)
    # Assigning a type to the variable 'if_condition_194453' (line 607)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 12), 'if_condition_194453', if_condition_194453)
    # SSA begins for if statement (line 607)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 608)
    # Processing the call arguments (line 608)
    # Getting the type of 'redundancy_warning' (line 608)
    redundancy_warning_194455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 21), 'redundancy_warning', False)
    # Getting the type of 'OptimizeWarning' (line 608)
    OptimizeWarning_194456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 41), 'OptimizeWarning', False)
    # Processing the call keyword arguments (line 608)
    kwargs_194457 = {}
    # Getting the type of 'warn' (line 608)
    warn_194454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 16), 'warn', False)
    # Calling warn(args, kwargs) (line 608)
    warn_call_result_194458 = invoke(stypy.reporting.localization.Localization(__file__, 608, 16), warn_194454, *[redundancy_warning_194455, OptimizeWarning_194456], **kwargs_194457)
    
    # SSA join for if statement (line 607)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'status' (line 609)
    status_194459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 15), 'status')
    int_194460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 609, 25), 'int')
    # Applying the binary operator '!=' (line 609)
    result_ne_194461 = python_operator(stypy.reporting.localization.Localization(__file__, 609, 15), '!=', status_194459, int_194460)
    
    # Testing the type of an if condition (line 609)
    if_condition_194462 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 609, 12), result_ne_194461)
    # Assigning a type to the variable 'if_condition_194462' (line 609)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 609, 12), 'if_condition_194462', if_condition_194462)
    # SSA begins for if statement (line 609)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 610):
    
    # Assigning a Name to a Name (line 610):
    # Getting the type of 'True' (line 610)
    True_194463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 27), 'True')
    # Assigning a type to the variable 'complete' (line 610)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 610, 16), 'complete', True_194463)
    # SSA join for if statement (line 609)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 605)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 611)
    tuple_194464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 611, 16), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 611)
    # Adding element type (line 611)
    # Getting the type of 'c' (line 611)
    c_194465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 16), 'c')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 611, 16), tuple_194464, c_194465)
    # Adding element type (line 611)
    # Getting the type of 'c0' (line 611)
    c0_194466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 19), 'c0')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 611, 16), tuple_194464, c0_194466)
    # Adding element type (line 611)
    # Getting the type of 'A_ub' (line 611)
    A_ub_194467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 23), 'A_ub')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 611, 16), tuple_194464, A_ub_194467)
    # Adding element type (line 611)
    # Getting the type of 'b_ub' (line 611)
    b_ub_194468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 29), 'b_ub')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 611, 16), tuple_194464, b_ub_194468)
    # Adding element type (line 611)
    # Getting the type of 'A_eq' (line 611)
    A_eq_194469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 35), 'A_eq')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 611, 16), tuple_194464, A_eq_194469)
    # Adding element type (line 611)
    # Getting the type of 'b_eq' (line 611)
    b_eq_194470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 41), 'b_eq')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 611, 16), tuple_194464, b_eq_194470)
    # Adding element type (line 611)
    # Getting the type of 'bounds' (line 611)
    bounds_194471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 47), 'bounds')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 611, 16), tuple_194464, bounds_194471)
    # Adding element type (line 611)
    # Getting the type of 'x' (line 612)
    x_194472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 16), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 611, 16), tuple_194464, x_194472)
    # Adding element type (line 611)
    # Getting the type of 'undo' (line 612)
    undo_194473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 19), 'undo')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 611, 16), tuple_194464, undo_194473)
    # Adding element type (line 611)
    # Getting the type of 'complete' (line 612)
    complete_194474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 25), 'complete')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 611, 16), tuple_194464, complete_194474)
    # Adding element type (line 611)
    # Getting the type of 'status' (line 612)
    status_194475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 35), 'status')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 611, 16), tuple_194464, status_194475)
    # Adding element type (line 611)
    # Getting the type of 'message' (line 612)
    message_194476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 43), 'message')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 611, 16), tuple_194464, message_194476)
    
    # Assigning a type to the variable 'stypy_return_type' (line 611)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 611, 8), 'stypy_return_type', tuple_194464)
    # SSA join for if statement (line 604)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 616):
    
    # Assigning a Num to a Name (line 616):
    int_194477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 22), 'int')
    # Assigning a type to the variable 'small_nullspace' (line 616)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 616, 4), 'small_nullspace', int_194477)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'rr' (line 617)
    rr_194478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 7), 'rr')
    
    # Getting the type of 'A_eq' (line 617)
    A_eq_194479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 14), 'A_eq')
    # Obtaining the member 'size' of a type (line 617)
    size_194480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 14), A_eq_194479, 'size')
    int_194481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 617, 26), 'int')
    # Applying the binary operator '>' (line 617)
    result_gt_194482 = python_operator(stypy.reporting.localization.Localization(__file__, 617, 14), '>', size_194480, int_194481)
    
    # Applying the binary operator 'and' (line 617)
    result_and_keyword_194483 = python_operator(stypy.reporting.localization.Localization(__file__, 617, 7), 'and', rr_194478, result_gt_194482)
    
    # Testing the type of an if condition (line 617)
    if_condition_194484 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 617, 4), result_and_keyword_194483)
    # Assigning a type to the variable 'if_condition_194484' (line 617)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 617, 4), 'if_condition_194484', if_condition_194484)
    # SSA begins for if statement (line 617)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 618)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 619):
    
    # Assigning a Call to a Name (line 619):
    
    # Call to matrix_rank(...): (line 619)
    # Processing the call arguments (line 619)
    # Getting the type of 'A_eq' (line 619)
    A_eq_194488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 41), 'A_eq', False)
    # Processing the call keyword arguments (line 619)
    kwargs_194489 = {}
    # Getting the type of 'np' (line 619)
    np_194485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 19), 'np', False)
    # Obtaining the member 'linalg' of a type (line 619)
    linalg_194486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 619, 19), np_194485, 'linalg')
    # Obtaining the member 'matrix_rank' of a type (line 619)
    matrix_rank_194487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 619, 19), linalg_194486, 'matrix_rank')
    # Calling matrix_rank(args, kwargs) (line 619)
    matrix_rank_call_result_194490 = invoke(stypy.reporting.localization.Localization(__file__, 619, 19), matrix_rank_194487, *[A_eq_194488], **kwargs_194489)
    
    # Assigning a type to the variable 'rank' (line 619)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 619, 12), 'rank', matrix_rank_call_result_194490)
    # SSA branch for the except part of a try statement (line 618)
    # SSA branch for the except '<any exception>' branch of a try statement (line 618)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Num to a Name (line 621):
    
    # Assigning a Num to a Name (line 621):
    int_194491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 621, 19), 'int')
    # Assigning a type to the variable 'rank' (line 621)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 621, 12), 'rank', int_194491)
    # SSA join for try-except statement (line 618)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 617)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    # Getting the type of 'rr' (line 622)
    rr_194492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 7), 'rr')
    
    # Getting the type of 'A_eq' (line 622)
    A_eq_194493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 14), 'A_eq')
    # Obtaining the member 'size' of a type (line 622)
    size_194494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 622, 14), A_eq_194493, 'size')
    int_194495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 622, 26), 'int')
    # Applying the binary operator '>' (line 622)
    result_gt_194496 = python_operator(stypy.reporting.localization.Localization(__file__, 622, 14), '>', size_194494, int_194495)
    
    # Applying the binary operator 'and' (line 622)
    result_and_keyword_194497 = python_operator(stypy.reporting.localization.Localization(__file__, 622, 7), 'and', rr_194492, result_gt_194496)
    
    # Getting the type of 'rank' (line 622)
    rank_194498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 32), 'rank')
    
    # Obtaining the type of the subscript
    int_194499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 622, 50), 'int')
    # Getting the type of 'A_eq' (line 622)
    A_eq_194500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 39), 'A_eq')
    # Obtaining the member 'shape' of a type (line 622)
    shape_194501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 622, 39), A_eq_194500, 'shape')
    # Obtaining the member '__getitem__' of a type (line 622)
    getitem___194502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 622, 39), shape_194501, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 622)
    subscript_call_result_194503 = invoke(stypy.reporting.localization.Localization(__file__, 622, 39), getitem___194502, int_194499)
    
    # Applying the binary operator '<' (line 622)
    result_lt_194504 = python_operator(stypy.reporting.localization.Localization(__file__, 622, 32), '<', rank_194498, subscript_call_result_194503)
    
    # Applying the binary operator 'and' (line 622)
    result_and_keyword_194505 = python_operator(stypy.reporting.localization.Localization(__file__, 622, 7), 'and', result_and_keyword_194497, result_lt_194504)
    
    # Testing the type of an if condition (line 622)
    if_condition_194506 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 622, 4), result_and_keyword_194505)
    # Assigning a type to the variable 'if_condition_194506' (line 622)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 622, 4), 'if_condition_194506', if_condition_194506)
    # SSA begins for if statement (line 622)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 623)
    # Processing the call arguments (line 623)
    # Getting the type of 'redundancy_warning' (line 623)
    redundancy_warning_194508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 13), 'redundancy_warning', False)
    # Getting the type of 'OptimizeWarning' (line 623)
    OptimizeWarning_194509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 33), 'OptimizeWarning', False)
    # Processing the call keyword arguments (line 623)
    kwargs_194510 = {}
    # Getting the type of 'warn' (line 623)
    warn_194507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 8), 'warn', False)
    # Calling warn(args, kwargs) (line 623)
    warn_call_result_194511 = invoke(stypy.reporting.localization.Localization(__file__, 623, 8), warn_194507, *[redundancy_warning_194508, OptimizeWarning_194509], **kwargs_194510)
    
    
    # Assigning a BinOp to a Name (line 624):
    
    # Assigning a BinOp to a Name (line 624):
    
    # Obtaining the type of the subscript
    int_194512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 624, 39), 'int')
    # Getting the type of 'A_eq' (line 624)
    A_eq_194513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 28), 'A_eq')
    # Obtaining the member 'shape' of a type (line 624)
    shape_194514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 624, 28), A_eq_194513, 'shape')
    # Obtaining the member '__getitem__' of a type (line 624)
    getitem___194515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 624, 28), shape_194514, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 624)
    subscript_call_result_194516 = invoke(stypy.reporting.localization.Localization(__file__, 624, 28), getitem___194515, int_194512)
    
    # Getting the type of 'rank' (line 624)
    rank_194517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 42), 'rank')
    # Applying the binary operator '-' (line 624)
    result_sub_194518 = python_operator(stypy.reporting.localization.Localization(__file__, 624, 28), '-', subscript_call_result_194516, rank_194517)
    
    # Assigning a type to the variable 'dim_row_nullspace' (line 624)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 624, 8), 'dim_row_nullspace', result_sub_194518)
    
    
    # Getting the type of 'dim_row_nullspace' (line 625)
    dim_row_nullspace_194519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 11), 'dim_row_nullspace')
    # Getting the type of 'small_nullspace' (line 625)
    small_nullspace_194520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 32), 'small_nullspace')
    # Applying the binary operator '<=' (line 625)
    result_le_194521 = python_operator(stypy.reporting.localization.Localization(__file__, 625, 11), '<=', dim_row_nullspace_194519, small_nullspace_194520)
    
    # Testing the type of an if condition (line 625)
    if_condition_194522 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 625, 8), result_le_194521)
    # Assigning a type to the variable 'if_condition_194522' (line 625)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 8), 'if_condition_194522', if_condition_194522)
    # SSA begins for if statement (line 625)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 626):
    
    # Assigning a Subscript to a Name (line 626):
    
    # Obtaining the type of the subscript
    int_194523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 12), 'int')
    
    # Call to _remove_redundancy(...): (line 626)
    # Processing the call arguments (line 626)
    # Getting the type of 'A_eq' (line 626)
    A_eq_194525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 61), 'A_eq', False)
    # Getting the type of 'b_eq' (line 626)
    b_eq_194526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 67), 'b_eq', False)
    # Processing the call keyword arguments (line 626)
    kwargs_194527 = {}
    # Getting the type of '_remove_redundancy' (line 626)
    _remove_redundancy_194524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 42), '_remove_redundancy', False)
    # Calling _remove_redundancy(args, kwargs) (line 626)
    _remove_redundancy_call_result_194528 = invoke(stypy.reporting.localization.Localization(__file__, 626, 42), _remove_redundancy_194524, *[A_eq_194525, b_eq_194526], **kwargs_194527)
    
    # Obtaining the member '__getitem__' of a type (line 626)
    getitem___194529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 12), _remove_redundancy_call_result_194528, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 626)
    subscript_call_result_194530 = invoke(stypy.reporting.localization.Localization(__file__, 626, 12), getitem___194529, int_194523)
    
    # Assigning a type to the variable 'tuple_var_assignment_192565' (line 626)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 12), 'tuple_var_assignment_192565', subscript_call_result_194530)
    
    # Assigning a Subscript to a Name (line 626):
    
    # Obtaining the type of the subscript
    int_194531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 12), 'int')
    
    # Call to _remove_redundancy(...): (line 626)
    # Processing the call arguments (line 626)
    # Getting the type of 'A_eq' (line 626)
    A_eq_194533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 61), 'A_eq', False)
    # Getting the type of 'b_eq' (line 626)
    b_eq_194534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 67), 'b_eq', False)
    # Processing the call keyword arguments (line 626)
    kwargs_194535 = {}
    # Getting the type of '_remove_redundancy' (line 626)
    _remove_redundancy_194532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 42), '_remove_redundancy', False)
    # Calling _remove_redundancy(args, kwargs) (line 626)
    _remove_redundancy_call_result_194536 = invoke(stypy.reporting.localization.Localization(__file__, 626, 42), _remove_redundancy_194532, *[A_eq_194533, b_eq_194534], **kwargs_194535)
    
    # Obtaining the member '__getitem__' of a type (line 626)
    getitem___194537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 12), _remove_redundancy_call_result_194536, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 626)
    subscript_call_result_194538 = invoke(stypy.reporting.localization.Localization(__file__, 626, 12), getitem___194537, int_194531)
    
    # Assigning a type to the variable 'tuple_var_assignment_192566' (line 626)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 12), 'tuple_var_assignment_192566', subscript_call_result_194538)
    
    # Assigning a Subscript to a Name (line 626):
    
    # Obtaining the type of the subscript
    int_194539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 12), 'int')
    
    # Call to _remove_redundancy(...): (line 626)
    # Processing the call arguments (line 626)
    # Getting the type of 'A_eq' (line 626)
    A_eq_194541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 61), 'A_eq', False)
    # Getting the type of 'b_eq' (line 626)
    b_eq_194542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 67), 'b_eq', False)
    # Processing the call keyword arguments (line 626)
    kwargs_194543 = {}
    # Getting the type of '_remove_redundancy' (line 626)
    _remove_redundancy_194540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 42), '_remove_redundancy', False)
    # Calling _remove_redundancy(args, kwargs) (line 626)
    _remove_redundancy_call_result_194544 = invoke(stypy.reporting.localization.Localization(__file__, 626, 42), _remove_redundancy_194540, *[A_eq_194541, b_eq_194542], **kwargs_194543)
    
    # Obtaining the member '__getitem__' of a type (line 626)
    getitem___194545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 12), _remove_redundancy_call_result_194544, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 626)
    subscript_call_result_194546 = invoke(stypy.reporting.localization.Localization(__file__, 626, 12), getitem___194545, int_194539)
    
    # Assigning a type to the variable 'tuple_var_assignment_192567' (line 626)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 12), 'tuple_var_assignment_192567', subscript_call_result_194546)
    
    # Assigning a Subscript to a Name (line 626):
    
    # Obtaining the type of the subscript
    int_194547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 12), 'int')
    
    # Call to _remove_redundancy(...): (line 626)
    # Processing the call arguments (line 626)
    # Getting the type of 'A_eq' (line 626)
    A_eq_194549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 61), 'A_eq', False)
    # Getting the type of 'b_eq' (line 626)
    b_eq_194550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 67), 'b_eq', False)
    # Processing the call keyword arguments (line 626)
    kwargs_194551 = {}
    # Getting the type of '_remove_redundancy' (line 626)
    _remove_redundancy_194548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 42), '_remove_redundancy', False)
    # Calling _remove_redundancy(args, kwargs) (line 626)
    _remove_redundancy_call_result_194552 = invoke(stypy.reporting.localization.Localization(__file__, 626, 42), _remove_redundancy_194548, *[A_eq_194549, b_eq_194550], **kwargs_194551)
    
    # Obtaining the member '__getitem__' of a type (line 626)
    getitem___194553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 12), _remove_redundancy_call_result_194552, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 626)
    subscript_call_result_194554 = invoke(stypy.reporting.localization.Localization(__file__, 626, 12), getitem___194553, int_194547)
    
    # Assigning a type to the variable 'tuple_var_assignment_192568' (line 626)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 12), 'tuple_var_assignment_192568', subscript_call_result_194554)
    
    # Assigning a Name to a Name (line 626):
    # Getting the type of 'tuple_var_assignment_192565' (line 626)
    tuple_var_assignment_192565_194555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 12), 'tuple_var_assignment_192565')
    # Assigning a type to the variable 'A_eq' (line 626)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 12), 'A_eq', tuple_var_assignment_192565_194555)
    
    # Assigning a Name to a Name (line 626):
    # Getting the type of 'tuple_var_assignment_192566' (line 626)
    tuple_var_assignment_192566_194556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 12), 'tuple_var_assignment_192566')
    # Assigning a type to the variable 'b_eq' (line 626)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 18), 'b_eq', tuple_var_assignment_192566_194556)
    
    # Assigning a Name to a Name (line 626):
    # Getting the type of 'tuple_var_assignment_192567' (line 626)
    tuple_var_assignment_192567_194557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 12), 'tuple_var_assignment_192567')
    # Assigning a type to the variable 'status' (line 626)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 24), 'status', tuple_var_assignment_192567_194557)
    
    # Assigning a Name to a Name (line 626):
    # Getting the type of 'tuple_var_assignment_192568' (line 626)
    tuple_var_assignment_192568_194558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 12), 'tuple_var_assignment_192568')
    # Assigning a type to the variable 'message' (line 626)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 32), 'message', tuple_var_assignment_192568_194558)
    # SSA join for if statement (line 625)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'dim_row_nullspace' (line 627)
    dim_row_nullspace_194559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 11), 'dim_row_nullspace')
    # Getting the type of 'small_nullspace' (line 627)
    small_nullspace_194560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 31), 'small_nullspace')
    # Applying the binary operator '>' (line 627)
    result_gt_194561 = python_operator(stypy.reporting.localization.Localization(__file__, 627, 11), '>', dim_row_nullspace_194559, small_nullspace_194560)
    
    
    # Getting the type of 'status' (line 627)
    status_194562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 50), 'status')
    int_194563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 627, 60), 'int')
    # Applying the binary operator '==' (line 627)
    result_eq_194564 = python_operator(stypy.reporting.localization.Localization(__file__, 627, 50), '==', status_194562, int_194563)
    
    # Applying the binary operator 'or' (line 627)
    result_or_keyword_194565 = python_operator(stypy.reporting.localization.Localization(__file__, 627, 11), 'or', result_gt_194561, result_eq_194564)
    
    # Testing the type of an if condition (line 627)
    if_condition_194566 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 627, 8), result_or_keyword_194565)
    # Assigning a type to the variable 'if_condition_194566' (line 627)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 8), 'if_condition_194566', if_condition_194566)
    # SSA begins for if statement (line 627)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 628):
    
    # Assigning a Subscript to a Name (line 628):
    
    # Obtaining the type of the subscript
    int_194567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, 12), 'int')
    
    # Call to _remove_redundancy_dense(...): (line 628)
    # Processing the call arguments (line 628)
    # Getting the type of 'A_eq' (line 628)
    A_eq_194569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 67), 'A_eq', False)
    # Getting the type of 'b_eq' (line 628)
    b_eq_194570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 73), 'b_eq', False)
    # Processing the call keyword arguments (line 628)
    kwargs_194571 = {}
    # Getting the type of '_remove_redundancy_dense' (line 628)
    _remove_redundancy_dense_194568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 42), '_remove_redundancy_dense', False)
    # Calling _remove_redundancy_dense(args, kwargs) (line 628)
    _remove_redundancy_dense_call_result_194572 = invoke(stypy.reporting.localization.Localization(__file__, 628, 42), _remove_redundancy_dense_194568, *[A_eq_194569, b_eq_194570], **kwargs_194571)
    
    # Obtaining the member '__getitem__' of a type (line 628)
    getitem___194573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 12), _remove_redundancy_dense_call_result_194572, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 628)
    subscript_call_result_194574 = invoke(stypy.reporting.localization.Localization(__file__, 628, 12), getitem___194573, int_194567)
    
    # Assigning a type to the variable 'tuple_var_assignment_192569' (line 628)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 12), 'tuple_var_assignment_192569', subscript_call_result_194574)
    
    # Assigning a Subscript to a Name (line 628):
    
    # Obtaining the type of the subscript
    int_194575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, 12), 'int')
    
    # Call to _remove_redundancy_dense(...): (line 628)
    # Processing the call arguments (line 628)
    # Getting the type of 'A_eq' (line 628)
    A_eq_194577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 67), 'A_eq', False)
    # Getting the type of 'b_eq' (line 628)
    b_eq_194578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 73), 'b_eq', False)
    # Processing the call keyword arguments (line 628)
    kwargs_194579 = {}
    # Getting the type of '_remove_redundancy_dense' (line 628)
    _remove_redundancy_dense_194576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 42), '_remove_redundancy_dense', False)
    # Calling _remove_redundancy_dense(args, kwargs) (line 628)
    _remove_redundancy_dense_call_result_194580 = invoke(stypy.reporting.localization.Localization(__file__, 628, 42), _remove_redundancy_dense_194576, *[A_eq_194577, b_eq_194578], **kwargs_194579)
    
    # Obtaining the member '__getitem__' of a type (line 628)
    getitem___194581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 12), _remove_redundancy_dense_call_result_194580, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 628)
    subscript_call_result_194582 = invoke(stypy.reporting.localization.Localization(__file__, 628, 12), getitem___194581, int_194575)
    
    # Assigning a type to the variable 'tuple_var_assignment_192570' (line 628)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 12), 'tuple_var_assignment_192570', subscript_call_result_194582)
    
    # Assigning a Subscript to a Name (line 628):
    
    # Obtaining the type of the subscript
    int_194583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, 12), 'int')
    
    # Call to _remove_redundancy_dense(...): (line 628)
    # Processing the call arguments (line 628)
    # Getting the type of 'A_eq' (line 628)
    A_eq_194585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 67), 'A_eq', False)
    # Getting the type of 'b_eq' (line 628)
    b_eq_194586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 73), 'b_eq', False)
    # Processing the call keyword arguments (line 628)
    kwargs_194587 = {}
    # Getting the type of '_remove_redundancy_dense' (line 628)
    _remove_redundancy_dense_194584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 42), '_remove_redundancy_dense', False)
    # Calling _remove_redundancy_dense(args, kwargs) (line 628)
    _remove_redundancy_dense_call_result_194588 = invoke(stypy.reporting.localization.Localization(__file__, 628, 42), _remove_redundancy_dense_194584, *[A_eq_194585, b_eq_194586], **kwargs_194587)
    
    # Obtaining the member '__getitem__' of a type (line 628)
    getitem___194589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 12), _remove_redundancy_dense_call_result_194588, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 628)
    subscript_call_result_194590 = invoke(stypy.reporting.localization.Localization(__file__, 628, 12), getitem___194589, int_194583)
    
    # Assigning a type to the variable 'tuple_var_assignment_192571' (line 628)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 12), 'tuple_var_assignment_192571', subscript_call_result_194590)
    
    # Assigning a Subscript to a Name (line 628):
    
    # Obtaining the type of the subscript
    int_194591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, 12), 'int')
    
    # Call to _remove_redundancy_dense(...): (line 628)
    # Processing the call arguments (line 628)
    # Getting the type of 'A_eq' (line 628)
    A_eq_194593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 67), 'A_eq', False)
    # Getting the type of 'b_eq' (line 628)
    b_eq_194594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 73), 'b_eq', False)
    # Processing the call keyword arguments (line 628)
    kwargs_194595 = {}
    # Getting the type of '_remove_redundancy_dense' (line 628)
    _remove_redundancy_dense_194592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 42), '_remove_redundancy_dense', False)
    # Calling _remove_redundancy_dense(args, kwargs) (line 628)
    _remove_redundancy_dense_call_result_194596 = invoke(stypy.reporting.localization.Localization(__file__, 628, 42), _remove_redundancy_dense_194592, *[A_eq_194593, b_eq_194594], **kwargs_194595)
    
    # Obtaining the member '__getitem__' of a type (line 628)
    getitem___194597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 12), _remove_redundancy_dense_call_result_194596, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 628)
    subscript_call_result_194598 = invoke(stypy.reporting.localization.Localization(__file__, 628, 12), getitem___194597, int_194591)
    
    # Assigning a type to the variable 'tuple_var_assignment_192572' (line 628)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 12), 'tuple_var_assignment_192572', subscript_call_result_194598)
    
    # Assigning a Name to a Name (line 628):
    # Getting the type of 'tuple_var_assignment_192569' (line 628)
    tuple_var_assignment_192569_194599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 12), 'tuple_var_assignment_192569')
    # Assigning a type to the variable 'A_eq' (line 628)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 12), 'A_eq', tuple_var_assignment_192569_194599)
    
    # Assigning a Name to a Name (line 628):
    # Getting the type of 'tuple_var_assignment_192570' (line 628)
    tuple_var_assignment_192570_194600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 12), 'tuple_var_assignment_192570')
    # Assigning a type to the variable 'b_eq' (line 628)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 18), 'b_eq', tuple_var_assignment_192570_194600)
    
    # Assigning a Name to a Name (line 628):
    # Getting the type of 'tuple_var_assignment_192571' (line 628)
    tuple_var_assignment_192571_194601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 12), 'tuple_var_assignment_192571')
    # Assigning a type to the variable 'status' (line 628)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 24), 'status', tuple_var_assignment_192571_194601)
    
    # Assigning a Name to a Name (line 628):
    # Getting the type of 'tuple_var_assignment_192572' (line 628)
    tuple_var_assignment_192572_194602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 12), 'tuple_var_assignment_192572')
    # Assigning a type to the variable 'message' (line 628)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 32), 'message', tuple_var_assignment_192572_194602)
    # SSA join for if statement (line 627)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_194603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 22), 'int')
    # Getting the type of 'A_eq' (line 629)
    A_eq_194604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 11), 'A_eq')
    # Obtaining the member 'shape' of a type (line 629)
    shape_194605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 629, 11), A_eq_194604, 'shape')
    # Obtaining the member '__getitem__' of a type (line 629)
    getitem___194606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 629, 11), shape_194605, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 629)
    subscript_call_result_194607 = invoke(stypy.reporting.localization.Localization(__file__, 629, 11), getitem___194606, int_194603)
    
    # Getting the type of 'rank' (line 629)
    rank_194608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 27), 'rank')
    # Applying the binary operator '<' (line 629)
    result_lt_194609 = python_operator(stypy.reporting.localization.Localization(__file__, 629, 11), '<', subscript_call_result_194607, rank_194608)
    
    # Testing the type of an if condition (line 629)
    if_condition_194610 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 629, 8), result_lt_194609)
    # Assigning a type to the variable 'if_condition_194610' (line 629)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 629, 8), 'if_condition_194610', if_condition_194610)
    # SSA begins for if statement (line 629)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 630):
    
    # Assigning a Str to a Name (line 630):
    str_194611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 630, 23), 'str', 'Due to numerical issues, redundant equality constraints could not be removed automatically. Try providing your constraint matrices as sparse matrices to activate sparse presolve, try turning off redundancy removal, or try turning off presolve altogether.')
    # Assigning a type to the variable 'message' (line 630)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 630, 12), 'message', str_194611)
    
    # Assigning a Num to a Name (line 636):
    
    # Assigning a Num to a Name (line 636):
    int_194612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 21), 'int')
    # Assigning a type to the variable 'status' (line 636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 636, 12), 'status', int_194612)
    # SSA join for if statement (line 629)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'status' (line 637)
    status_194613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 11), 'status')
    int_194614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, 21), 'int')
    # Applying the binary operator '!=' (line 637)
    result_ne_194615 = python_operator(stypy.reporting.localization.Localization(__file__, 637, 11), '!=', status_194613, int_194614)
    
    # Testing the type of an if condition (line 637)
    if_condition_194616 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 637, 8), result_ne_194615)
    # Assigning a type to the variable 'if_condition_194616' (line 637)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 637, 8), 'if_condition_194616', if_condition_194616)
    # SSA begins for if statement (line 637)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 638):
    
    # Assigning a Name to a Name (line 638):
    # Getting the type of 'True' (line 638)
    True_194617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 23), 'True')
    # Assigning a type to the variable 'complete' (line 638)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 638, 12), 'complete', True_194617)
    # SSA join for if statement (line 637)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 622)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 639)
    tuple_194618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 639)
    # Adding element type (line 639)
    # Getting the type of 'c' (line 639)
    c_194619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 12), 'c')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 12), tuple_194618, c_194619)
    # Adding element type (line 639)
    # Getting the type of 'c0' (line 639)
    c0_194620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 15), 'c0')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 12), tuple_194618, c0_194620)
    # Adding element type (line 639)
    # Getting the type of 'A_ub' (line 639)
    A_ub_194621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 19), 'A_ub')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 12), tuple_194618, A_ub_194621)
    # Adding element type (line 639)
    # Getting the type of 'b_ub' (line 639)
    b_ub_194622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 25), 'b_ub')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 12), tuple_194618, b_ub_194622)
    # Adding element type (line 639)
    # Getting the type of 'A_eq' (line 639)
    A_eq_194623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 31), 'A_eq')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 12), tuple_194618, A_eq_194623)
    # Adding element type (line 639)
    # Getting the type of 'b_eq' (line 639)
    b_eq_194624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 37), 'b_eq')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 12), tuple_194618, b_eq_194624)
    # Adding element type (line 639)
    # Getting the type of 'bounds' (line 639)
    bounds_194625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 43), 'bounds')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 12), tuple_194618, bounds_194625)
    # Adding element type (line 639)
    # Getting the type of 'x' (line 640)
    x_194626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 12), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 12), tuple_194618, x_194626)
    # Adding element type (line 639)
    # Getting the type of 'undo' (line 640)
    undo_194627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 15), 'undo')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 12), tuple_194618, undo_194627)
    # Adding element type (line 639)
    # Getting the type of 'complete' (line 640)
    complete_194628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 21), 'complete')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 12), tuple_194618, complete_194628)
    # Adding element type (line 639)
    # Getting the type of 'status' (line 640)
    status_194629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 31), 'status')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 12), tuple_194618, status_194629)
    # Adding element type (line 639)
    # Getting the type of 'message' (line 640)
    message_194630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 39), 'message')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 12), tuple_194618, message_194630)
    
    # Assigning a type to the variable 'stypy_return_type' (line 639)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 639, 4), 'stypy_return_type', tuple_194618)
    
    # ################# End of '_presolve(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_presolve' in the type store
    # Getting the type of 'stypy_return_type' (line 292)
    stypy_return_type_194631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_194631)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_presolve'
    return stypy_return_type_194631

# Assigning a type to the variable '_presolve' (line 292)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 292, 0), '_presolve', _presolve)

@norecursion
def _get_Abc(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_194632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 645, 11), 'int')
    # Getting the type of 'None' (line 646)
    None_194633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 13), 'None')
    # Getting the type of 'None' (line 647)
    None_194634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 13), 'None')
    # Getting the type of 'None' (line 648)
    None_194635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 13), 'None')
    # Getting the type of 'None' (line 649)
    None_194636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 13), 'None')
    # Getting the type of 'None' (line 650)
    None_194637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 15), 'None')
    
    # Obtaining an instance of the builtin type 'list' (line 651)
    list_194638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 651, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 651)
    
    defaults = [int_194632, None_194633, None_194634, None_194635, None_194636, None_194637, list_194638]
    # Create a new context for function '_get_Abc'
    module_type_store = module_type_store.open_function_context('_get_Abc', 643, 0, False)
    
    # Passed parameters checking function
    _get_Abc.stypy_localization = localization
    _get_Abc.stypy_type_of_self = None
    _get_Abc.stypy_type_store = module_type_store
    _get_Abc.stypy_function_name = '_get_Abc'
    _get_Abc.stypy_param_names_list = ['c', 'c0', 'A_ub', 'b_ub', 'A_eq', 'b_eq', 'bounds', 'undo']
    _get_Abc.stypy_varargs_param_name = None
    _get_Abc.stypy_kwargs_param_name = None
    _get_Abc.stypy_call_defaults = defaults
    _get_Abc.stypy_call_varargs = varargs
    _get_Abc.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_Abc', ['c', 'c0', 'A_ub', 'b_ub', 'A_eq', 'b_eq', 'bounds', 'undo'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_Abc', localization, ['c', 'c0', 'A_ub', 'b_ub', 'A_eq', 'b_eq', 'bounds', 'undo'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_Abc(...)' code ##################

    str_194639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 720, (-1)), 'str', '\n    Given a linear programming problem of the form:\n\n    minimize:     c^T * x\n\n    subject to:   A_ub * x <= b_ub\n                  A_eq * x == b_eq\n                  bounds[i][0] < x_i < bounds[i][1]\n\n    return the problem in standard form:\n    minimize:     c\'^T * x\'\n\n    subject to:   A * x\' == b\n                  0 < x\' < oo\n\n    by adding slack variables and making variable substitutions as necessary.\n\n    Parameters\n    ----------\n    c : 1-D array\n        Coefficients of the linear objective function to be minimized.\n        Components corresponding with fixed variables have been eliminated.\n    c0 : float\n        Constant term in objective function due to fixed (and eliminated)\n        variables.\n    A_ub : 2-D array\n        2-D array which, when matrix-multiplied by ``x``, gives the values of\n        the upper-bound inequality constraints at ``x``. Unnecessary\n        rows/columns have been removed.\n    b_ub : 1-D array\n        1-D array of values representing the upper-bound of each inequality\n        constraint (row) in ``A_ub``. Unnecessary elements have been removed.\n    A_eq : 2-D array\n        2-D array which, when matrix-multiplied by ``x``, gives the values of\n        the equality constraints at ``x``. Unnecessary rows/columns have been\n        removed.\n    b_eq : 1-D array\n        1-D array of values representing the RHS of each equality constraint\n        (row) in ``A_eq``. Unnecessary elements have been removed.\n    bounds : sequence of tuples\n        ``(min, max)`` pairs for each element in ``x``, defining\n        the bounds on that parameter. Use None for each of ``min`` or\n        ``max`` when there is no bound in that direction. Bounds have been\n        tightened where possible.\n    undo: list of tuples\n        (`index`, `value`) pairs that record the original index and fixed value\n        for each variable removed from the problem\n\n    Returns\n    -------\n    A : 2-D array\n        2-D array which, when matrix-multiplied by x, gives the values of the\n        equality constraints at x (for standard form problem).\n    b : 1-D array\n        1-D array of values representing the RHS of each equality constraint\n        (row) in A (for standard form problem).\n    c : 1-D array\n        Coefficients of the linear objective function to be minimized (for\n        standard form problem).\n    c0 : float\n        Constant term in objective function due to fixed (and eliminated)\n        variables.\n\n    References\n    ----------\n    .. [6] Bertsimas, Dimitris, and J. Tsitsiklis. "Introduction to linear\n           programming." Athena Scientific 1 (1997): 997.\n\n    ')
    
    
    # Call to issparse(...): (line 722)
    # Processing the call arguments (line 722)
    # Getting the type of 'A_eq' (line 722)
    A_eq_194642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 20), 'A_eq', False)
    # Processing the call keyword arguments (line 722)
    kwargs_194643 = {}
    # Getting the type of 'sps' (line 722)
    sps_194640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 7), 'sps', False)
    # Obtaining the member 'issparse' of a type (line 722)
    issparse_194641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 722, 7), sps_194640, 'issparse')
    # Calling issparse(args, kwargs) (line 722)
    issparse_call_result_194644 = invoke(stypy.reporting.localization.Localization(__file__, 722, 7), issparse_194641, *[A_eq_194642], **kwargs_194643)
    
    # Testing the type of an if condition (line 722)
    if_condition_194645 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 722, 4), issparse_call_result_194644)
    # Assigning a type to the variable 'if_condition_194645' (line 722)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 722, 4), 'if_condition_194645', if_condition_194645)
    # SSA begins for if statement (line 722)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 723):
    
    # Assigning a Name to a Name (line 723):
    # Getting the type of 'True' (line 723)
    True_194646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 17), 'True')
    # Assigning a type to the variable 'sparse' (line 723)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 723, 8), 'sparse', True_194646)
    
    # Assigning a Call to a Name (line 724):
    
    # Assigning a Call to a Name (line 724):
    
    # Call to lil_matrix(...): (line 724)
    # Processing the call arguments (line 724)
    # Getting the type of 'A_eq' (line 724)
    A_eq_194649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 30), 'A_eq', False)
    # Processing the call keyword arguments (line 724)
    kwargs_194650 = {}
    # Getting the type of 'sps' (line 724)
    sps_194647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 15), 'sps', False)
    # Obtaining the member 'lil_matrix' of a type (line 724)
    lil_matrix_194648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 724, 15), sps_194647, 'lil_matrix')
    # Calling lil_matrix(args, kwargs) (line 724)
    lil_matrix_call_result_194651 = invoke(stypy.reporting.localization.Localization(__file__, 724, 15), lil_matrix_194648, *[A_eq_194649], **kwargs_194650)
    
    # Assigning a type to the variable 'A_eq' (line 724)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 724, 8), 'A_eq', lil_matrix_call_result_194651)
    
    # Assigning a Call to a Name (line 725):
    
    # Assigning a Call to a Name (line 725):
    
    # Call to lil_matrix(...): (line 725)
    # Processing the call arguments (line 725)
    # Getting the type of 'A_ub' (line 725)
    A_ub_194654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 30), 'A_ub', False)
    # Processing the call keyword arguments (line 725)
    kwargs_194655 = {}
    # Getting the type of 'sps' (line 725)
    sps_194652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 15), 'sps', False)
    # Obtaining the member 'lil_matrix' of a type (line 725)
    lil_matrix_194653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 15), sps_194652, 'lil_matrix')
    # Calling lil_matrix(args, kwargs) (line 725)
    lil_matrix_call_result_194656 = invoke(stypy.reporting.localization.Localization(__file__, 725, 15), lil_matrix_194653, *[A_ub_194654], **kwargs_194655)
    
    # Assigning a type to the variable 'A_ub' (line 725)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 725, 8), 'A_ub', lil_matrix_call_result_194656)

    @norecursion
    def hstack(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'hstack'
        module_type_store = module_type_store.open_function_context('hstack', 727, 8, False)
        
        # Passed parameters checking function
        hstack.stypy_localization = localization
        hstack.stypy_type_of_self = None
        hstack.stypy_type_store = module_type_store
        hstack.stypy_function_name = 'hstack'
        hstack.stypy_param_names_list = ['blocks']
        hstack.stypy_varargs_param_name = None
        hstack.stypy_kwargs_param_name = None
        hstack.stypy_call_defaults = defaults
        hstack.stypy_call_varargs = varargs
        hstack.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'hstack', ['blocks'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'hstack', localization, ['blocks'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'hstack(...)' code ##################

        
        # Call to hstack(...): (line 728)
        # Processing the call arguments (line 728)
        # Getting the type of 'blocks' (line 728)
        blocks_194659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 30), 'blocks', False)
        # Processing the call keyword arguments (line 728)
        str_194660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 728, 45), 'str', 'lil')
        keyword_194661 = str_194660
        kwargs_194662 = {'format': keyword_194661}
        # Getting the type of 'sps' (line 728)
        sps_194657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 19), 'sps', False)
        # Obtaining the member 'hstack' of a type (line 728)
        hstack_194658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 19), sps_194657, 'hstack')
        # Calling hstack(args, kwargs) (line 728)
        hstack_call_result_194663 = invoke(stypy.reporting.localization.Localization(__file__, 728, 19), hstack_194658, *[blocks_194659], **kwargs_194662)
        
        # Assigning a type to the variable 'stypy_return_type' (line 728)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 12), 'stypy_return_type', hstack_call_result_194663)
        
        # ################# End of 'hstack(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'hstack' in the type store
        # Getting the type of 'stypy_return_type' (line 727)
        stypy_return_type_194664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 8), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_194664)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'hstack'
        return stypy_return_type_194664

    # Assigning a type to the variable 'hstack' (line 727)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 8), 'hstack', hstack)

    @norecursion
    def vstack(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'vstack'
        module_type_store = module_type_store.open_function_context('vstack', 730, 8, False)
        
        # Passed parameters checking function
        vstack.stypy_localization = localization
        vstack.stypy_type_of_self = None
        vstack.stypy_type_store = module_type_store
        vstack.stypy_function_name = 'vstack'
        vstack.stypy_param_names_list = ['blocks']
        vstack.stypy_varargs_param_name = None
        vstack.stypy_kwargs_param_name = None
        vstack.stypy_call_defaults = defaults
        vstack.stypy_call_varargs = varargs
        vstack.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'vstack', ['blocks'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'vstack', localization, ['blocks'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'vstack(...)' code ##################

        
        # Call to vstack(...): (line 731)
        # Processing the call arguments (line 731)
        # Getting the type of 'blocks' (line 731)
        blocks_194667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 30), 'blocks', False)
        # Processing the call keyword arguments (line 731)
        str_194668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 45), 'str', 'lil')
        keyword_194669 = str_194668
        kwargs_194670 = {'format': keyword_194669}
        # Getting the type of 'sps' (line 731)
        sps_194665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 19), 'sps', False)
        # Obtaining the member 'vstack' of a type (line 731)
        vstack_194666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 731, 19), sps_194665, 'vstack')
        # Calling vstack(args, kwargs) (line 731)
        vstack_call_result_194671 = invoke(stypy.reporting.localization.Localization(__file__, 731, 19), vstack_194666, *[blocks_194667], **kwargs_194670)
        
        # Assigning a type to the variable 'stypy_return_type' (line 731)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 731, 12), 'stypy_return_type', vstack_call_result_194671)
        
        # ################# End of 'vstack(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'vstack' in the type store
        # Getting the type of 'stypy_return_type' (line 730)
        stypy_return_type_194672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 8), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_194672)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'vstack'
        return stypy_return_type_194672

    # Assigning a type to the variable 'vstack' (line 730)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 8), 'vstack', vstack)
    
    # Assigning a Attribute to a Name (line 733):
    
    # Assigning a Attribute to a Name (line 733):
    # Getting the type of 'sps' (line 733)
    sps_194673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 16), 'sps')
    # Obtaining the member 'lil_matrix' of a type (line 733)
    lil_matrix_194674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 733, 16), sps_194673, 'lil_matrix')
    # Assigning a type to the variable 'zeros' (line 733)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 733, 8), 'zeros', lil_matrix_194674)
    
    # Assigning a Attribute to a Name (line 734):
    
    # Assigning a Attribute to a Name (line 734):
    # Getting the type of 'sps' (line 734)
    sps_194675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 14), 'sps')
    # Obtaining the member 'eye' of a type (line 734)
    eye_194676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 14), sps_194675, 'eye')
    # Assigning a type to the variable 'eye' (line 734)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'eye', eye_194676)
    # SSA branch for the else part of an if statement (line 722)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 736):
    
    # Assigning a Name to a Name (line 736):
    # Getting the type of 'False' (line 736)
    False_194677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 17), 'False')
    # Assigning a type to the variable 'sparse' (line 736)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 8), 'sparse', False_194677)
    
    # Assigning a Attribute to a Name (line 737):
    
    # Assigning a Attribute to a Name (line 737):
    # Getting the type of 'np' (line 737)
    np_194678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 17), 'np')
    # Obtaining the member 'hstack' of a type (line 737)
    hstack_194679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 17), np_194678, 'hstack')
    # Assigning a type to the variable 'hstack' (line 737)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 737, 8), 'hstack', hstack_194679)
    
    # Assigning a Attribute to a Name (line 738):
    
    # Assigning a Attribute to a Name (line 738):
    # Getting the type of 'np' (line 738)
    np_194680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 17), 'np')
    # Obtaining the member 'vstack' of a type (line 738)
    vstack_194681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 738, 17), np_194680, 'vstack')
    # Assigning a type to the variable 'vstack' (line 738)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 738, 8), 'vstack', vstack_194681)
    
    # Assigning a Attribute to a Name (line 739):
    
    # Assigning a Attribute to a Name (line 739):
    # Getting the type of 'np' (line 739)
    np_194682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 16), 'np')
    # Obtaining the member 'zeros' of a type (line 739)
    zeros_194683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 739, 16), np_194682, 'zeros')
    # Assigning a type to the variable 'zeros' (line 739)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 739, 8), 'zeros', zeros_194683)
    
    # Assigning a Attribute to a Name (line 740):
    
    # Assigning a Attribute to a Name (line 740):
    # Getting the type of 'np' (line 740)
    np_194684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 14), 'np')
    # Obtaining the member 'eye' of a type (line 740)
    eye_194685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 14), np_194684, 'eye')
    # Assigning a type to the variable 'eye' (line 740)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 740, 8), 'eye', eye_194685)
    # SSA join for if statement (line 722)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 742):
    
    # Assigning a Call to a Name (line 742):
    
    # Call to set(...): (line 742)
    # Processing the call keyword arguments (line 742)
    kwargs_194687 = {}
    # Getting the type of 'set' (line 742)
    set_194686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 14), 'set', False)
    # Calling set(args, kwargs) (line 742)
    set_call_result_194688 = invoke(stypy.reporting.localization.Localization(__file__, 742, 14), set_194686, *[], **kwargs_194687)
    
    # Assigning a type to the variable 'fixed_x' (line 742)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 742, 4), 'fixed_x', set_call_result_194688)
    
    
    
    # Call to len(...): (line 743)
    # Processing the call arguments (line 743)
    # Getting the type of 'undo' (line 743)
    undo_194690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 11), 'undo', False)
    # Processing the call keyword arguments (line 743)
    kwargs_194691 = {}
    # Getting the type of 'len' (line 743)
    len_194689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 7), 'len', False)
    # Calling len(args, kwargs) (line 743)
    len_call_result_194692 = invoke(stypy.reporting.localization.Localization(__file__, 743, 7), len_194689, *[undo_194690], **kwargs_194691)
    
    int_194693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 743, 19), 'int')
    # Applying the binary operator '>' (line 743)
    result_gt_194694 = python_operator(stypy.reporting.localization.Localization(__file__, 743, 7), '>', len_call_result_194692, int_194693)
    
    # Testing the type of an if condition (line 743)
    if_condition_194695 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 743, 4), result_gt_194694)
    # Assigning a type to the variable 'if_condition_194695' (line 743)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 743, 4), 'if_condition_194695', if_condition_194695)
    # SSA begins for if statement (line 743)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 746):
    
    # Assigning a Call to a Name (line 746):
    
    # Call to set(...): (line 746)
    # Processing the call arguments (line 746)
    
    # Obtaining the type of the subscript
    int_194697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 746, 27), 'int')
    # Getting the type of 'undo' (line 746)
    undo_194698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 22), 'undo', False)
    # Obtaining the member '__getitem__' of a type (line 746)
    getitem___194699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 746, 22), undo_194698, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 746)
    subscript_call_result_194700 = invoke(stypy.reporting.localization.Localization(__file__, 746, 22), getitem___194699, int_194697)
    
    # Processing the call keyword arguments (line 746)
    kwargs_194701 = {}
    # Getting the type of 'set' (line 746)
    set_194696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 18), 'set', False)
    # Calling set(args, kwargs) (line 746)
    set_call_result_194702 = invoke(stypy.reporting.localization.Localization(__file__, 746, 18), set_194696, *[subscript_call_result_194700], **kwargs_194701)
    
    # Assigning a type to the variable 'fixed_x' (line 746)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 746, 8), 'fixed_x', set_call_result_194702)
    # SSA join for if statement (line 743)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a ListComp to a Name (line 748):
    
    # Assigning a ListComp to a Name (line 748):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to range(...): (line 748)
    # Processing the call arguments (line 748)
    
    # Call to len(...): (line 748)
    # Processing the call arguments (line 748)
    # Getting the type of 'bounds' (line 748)
    bounds_194712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 43), 'bounds', False)
    # Processing the call keyword arguments (line 748)
    kwargs_194713 = {}
    # Getting the type of 'len' (line 748)
    len_194711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 39), 'len', False)
    # Calling len(args, kwargs) (line 748)
    len_call_result_194714 = invoke(stypy.reporting.localization.Localization(__file__, 748, 39), len_194711, *[bounds_194712], **kwargs_194713)
    
    # Processing the call keyword arguments (line 748)
    kwargs_194715 = {}
    # Getting the type of 'range' (line 748)
    range_194710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 33), 'range', False)
    # Calling range(args, kwargs) (line 748)
    range_call_result_194716 = invoke(stypy.reporting.localization.Localization(__file__, 748, 33), range_194710, *[len_call_result_194714], **kwargs_194715)
    
    comprehension_194717 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 748, 14), range_call_result_194716)
    # Assigning a type to the variable 'i' (line 748)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 748, 14), 'i', comprehension_194717)
    
    # Getting the type of 'i' (line 748)
    i_194707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 55), 'i')
    # Getting the type of 'fixed_x' (line 748)
    fixed_x_194708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 64), 'fixed_x')
    # Applying the binary operator 'notin' (line 748)
    result_contains_194709 = python_operator(stypy.reporting.localization.Localization(__file__, 748, 55), 'notin', i_194707, fixed_x_194708)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 748)
    i_194703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 21), 'i')
    # Getting the type of 'bounds' (line 748)
    bounds_194704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 14), 'bounds')
    # Obtaining the member '__getitem__' of a type (line 748)
    getitem___194705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 14), bounds_194704, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 748)
    subscript_call_result_194706 = invoke(stypy.reporting.localization.Localization(__file__, 748, 14), getitem___194705, i_194703)
    
    list_194718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 748, 14), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 748, 14), list_194718, subscript_call_result_194706)
    # Assigning a type to the variable 'bounds' (line 748)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 748, 4), 'bounds', list_194718)
    
    # Assigning a Call to a Name (line 754):
    
    # Assigning a Call to a Name (line 754):
    
    # Call to array(...): (line 754)
    # Processing the call arguments (line 754)
    # Getting the type of 'bounds' (line 754)
    bounds_194721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 22), 'bounds', False)
    # Processing the call keyword arguments (line 754)
    kwargs_194722 = {}
    # Getting the type of 'np' (line 754)
    np_194719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 13), 'np', False)
    # Obtaining the member 'array' of a type (line 754)
    array_194720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 754, 13), np_194719, 'array')
    # Calling array(args, kwargs) (line 754)
    array_call_result_194723 = invoke(stypy.reporting.localization.Localization(__file__, 754, 13), array_194720, *[bounds_194721], **kwargs_194722)
    
    # Assigning a type to the variable 'bounds' (line 754)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 754, 4), 'bounds', array_call_result_194723)
    
    # Assigning a Subscript to a Name (line 755):
    
    # Assigning a Subscript to a Name (line 755):
    
    # Obtaining the type of the subscript
    slice_194724 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 755, 10), None, None, None)
    int_194725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 755, 20), 'int')
    # Getting the type of 'bounds' (line 755)
    bounds_194726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 10), 'bounds')
    # Obtaining the member '__getitem__' of a type (line 755)
    getitem___194727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 755, 10), bounds_194726, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 755)
    subscript_call_result_194728 = invoke(stypy.reporting.localization.Localization(__file__, 755, 10), getitem___194727, (slice_194724, int_194725))
    
    # Assigning a type to the variable 'lbs' (line 755)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 4), 'lbs', subscript_call_result_194728)
    
    # Assigning a Subscript to a Name (line 756):
    
    # Assigning a Subscript to a Name (line 756):
    
    # Obtaining the type of the subscript
    slice_194729 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 756, 10), None, None, None)
    int_194730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 20), 'int')
    # Getting the type of 'bounds' (line 756)
    bounds_194731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 10), 'bounds')
    # Obtaining the member '__getitem__' of a type (line 756)
    getitem___194732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 10), bounds_194731, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 756)
    subscript_call_result_194733 = invoke(stypy.reporting.localization.Localization(__file__, 756, 10), getitem___194732, (slice_194729, int_194730))
    
    # Assigning a type to the variable 'ubs' (line 756)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 4), 'ubs', subscript_call_result_194733)
    
    # Assigning a Attribute to a Tuple (line 757):
    
    # Assigning a Subscript to a Name (line 757):
    
    # Obtaining the type of the subscript
    int_194734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 757, 4), 'int')
    # Getting the type of 'A_ub' (line 757)
    A_ub_194735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 17), 'A_ub')
    # Obtaining the member 'shape' of a type (line 757)
    shape_194736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 17), A_ub_194735, 'shape')
    # Obtaining the member '__getitem__' of a type (line 757)
    getitem___194737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 4), shape_194736, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 757)
    subscript_call_result_194738 = invoke(stypy.reporting.localization.Localization(__file__, 757, 4), getitem___194737, int_194734)
    
    # Assigning a type to the variable 'tuple_var_assignment_192573' (line 757)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 4), 'tuple_var_assignment_192573', subscript_call_result_194738)
    
    # Assigning a Subscript to a Name (line 757):
    
    # Obtaining the type of the subscript
    int_194739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 757, 4), 'int')
    # Getting the type of 'A_ub' (line 757)
    A_ub_194740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 17), 'A_ub')
    # Obtaining the member 'shape' of a type (line 757)
    shape_194741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 17), A_ub_194740, 'shape')
    # Obtaining the member '__getitem__' of a type (line 757)
    getitem___194742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 4), shape_194741, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 757)
    subscript_call_result_194743 = invoke(stypy.reporting.localization.Localization(__file__, 757, 4), getitem___194742, int_194739)
    
    # Assigning a type to the variable 'tuple_var_assignment_192574' (line 757)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 4), 'tuple_var_assignment_192574', subscript_call_result_194743)
    
    # Assigning a Name to a Name (line 757):
    # Getting the type of 'tuple_var_assignment_192573' (line 757)
    tuple_var_assignment_192573_194744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 4), 'tuple_var_assignment_192573')
    # Assigning a type to the variable 'm_ub' (line 757)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 4), 'm_ub', tuple_var_assignment_192573_194744)
    
    # Assigning a Name to a Name (line 757):
    # Getting the type of 'tuple_var_assignment_192574' (line 757)
    tuple_var_assignment_192574_194745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 4), 'tuple_var_assignment_192574')
    # Assigning a type to the variable 'n_ub' (line 757)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 10), 'n_ub', tuple_var_assignment_192574_194745)
    
    # Assigning a Call to a Name (line 759):
    
    # Assigning a Call to a Name (line 759):
    
    # Call to equal(...): (line 759)
    # Processing the call arguments (line 759)
    # Getting the type of 'lbs' (line 759)
    lbs_194748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 23), 'lbs', False)
    # Getting the type of 'None' (line 759)
    None_194749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 28), 'None', False)
    # Processing the call keyword arguments (line 759)
    kwargs_194750 = {}
    # Getting the type of 'np' (line 759)
    np_194746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 14), 'np', False)
    # Obtaining the member 'equal' of a type (line 759)
    equal_194747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 14), np_194746, 'equal')
    # Calling equal(args, kwargs) (line 759)
    equal_call_result_194751 = invoke(stypy.reporting.localization.Localization(__file__, 759, 14), equal_194747, *[lbs_194748, None_194749], **kwargs_194750)
    
    # Assigning a type to the variable 'lb_none' (line 759)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 759, 4), 'lb_none', equal_call_result_194751)
    
    # Assigning a Call to a Name (line 760):
    
    # Assigning a Call to a Name (line 760):
    
    # Call to equal(...): (line 760)
    # Processing the call arguments (line 760)
    # Getting the type of 'ubs' (line 760)
    ubs_194754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 23), 'ubs', False)
    # Getting the type of 'None' (line 760)
    None_194755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 28), 'None', False)
    # Processing the call keyword arguments (line 760)
    kwargs_194756 = {}
    # Getting the type of 'np' (line 760)
    np_194752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 14), 'np', False)
    # Obtaining the member 'equal' of a type (line 760)
    equal_194753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 760, 14), np_194752, 'equal')
    # Calling equal(args, kwargs) (line 760)
    equal_call_result_194757 = invoke(stypy.reporting.localization.Localization(__file__, 760, 14), equal_194753, *[ubs_194754, None_194755], **kwargs_194756)
    
    # Assigning a type to the variable 'ub_none' (line 760)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 760, 4), 'ub_none', equal_call_result_194757)
    
    # Assigning a Call to a Name (line 761):
    
    # Assigning a Call to a Name (line 761):
    
    # Call to logical_not(...): (line 761)
    # Processing the call arguments (line 761)
    # Getting the type of 'lb_none' (line 761)
    lb_none_194760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 29), 'lb_none', False)
    # Processing the call keyword arguments (line 761)
    kwargs_194761 = {}
    # Getting the type of 'np' (line 761)
    np_194758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 14), 'np', False)
    # Obtaining the member 'logical_not' of a type (line 761)
    logical_not_194759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 14), np_194758, 'logical_not')
    # Calling logical_not(args, kwargs) (line 761)
    logical_not_call_result_194762 = invoke(stypy.reporting.localization.Localization(__file__, 761, 14), logical_not_194759, *[lb_none_194760], **kwargs_194761)
    
    # Assigning a type to the variable 'lb_some' (line 761)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 4), 'lb_some', logical_not_call_result_194762)
    
    # Assigning a Call to a Name (line 762):
    
    # Assigning a Call to a Name (line 762):
    
    # Call to logical_not(...): (line 762)
    # Processing the call arguments (line 762)
    # Getting the type of 'ub_none' (line 762)
    ub_none_194765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 29), 'ub_none', False)
    # Processing the call keyword arguments (line 762)
    kwargs_194766 = {}
    # Getting the type of 'np' (line 762)
    np_194763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 14), 'np', False)
    # Obtaining the member 'logical_not' of a type (line 762)
    logical_not_194764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 762, 14), np_194763, 'logical_not')
    # Calling logical_not(args, kwargs) (line 762)
    logical_not_call_result_194767 = invoke(stypy.reporting.localization.Localization(__file__, 762, 14), logical_not_194764, *[ub_none_194765], **kwargs_194766)
    
    # Assigning a type to the variable 'ub_some' (line 762)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 762, 4), 'ub_some', logical_not_call_result_194767)
    
    # Assigning a Call to a Name (line 770):
    
    # Assigning a Call to a Name (line 770):
    
    # Call to logical_and(...): (line 770)
    # Processing the call arguments (line 770)
    # Getting the type of 'lb_none' (line 770)
    lb_none_194770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 35), 'lb_none', False)
    # Getting the type of 'ub_some' (line 770)
    ub_some_194771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 44), 'ub_some', False)
    # Processing the call keyword arguments (line 770)
    kwargs_194772 = {}
    # Getting the type of 'np' (line 770)
    np_194768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 20), 'np', False)
    # Obtaining the member 'logical_and' of a type (line 770)
    logical_and_194769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 770, 20), np_194768, 'logical_and')
    # Calling logical_and(args, kwargs) (line 770)
    logical_and_call_result_194773 = invoke(stypy.reporting.localization.Localization(__file__, 770, 20), logical_and_194769, *[lb_none_194770, ub_some_194771], **kwargs_194772)
    
    # Assigning a type to the variable 'l_nolb_someub' (line 770)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 770, 4), 'l_nolb_someub', logical_and_call_result_194773)
    
    # Assigning a Subscript to a Name (line 771):
    
    # Assigning a Subscript to a Name (line 771):
    
    # Obtaining the type of the subscript
    int_194774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 771, 37), 'int')
    
    # Call to where(...): (line 771)
    # Processing the call arguments (line 771)
    # Getting the type of 'l_nolb_someub' (line 771)
    l_nolb_someub_194777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 22), 'l_nolb_someub', False)
    # Processing the call keyword arguments (line 771)
    kwargs_194778 = {}
    # Getting the type of 'np' (line 771)
    np_194775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 13), 'np', False)
    # Obtaining the member 'where' of a type (line 771)
    where_194776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 771, 13), np_194775, 'where')
    # Calling where(args, kwargs) (line 771)
    where_call_result_194779 = invoke(stypy.reporting.localization.Localization(__file__, 771, 13), where_194776, *[l_nolb_someub_194777], **kwargs_194778)
    
    # Obtaining the member '__getitem__' of a type (line 771)
    getitem___194780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 771, 13), where_call_result_194779, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 771)
    subscript_call_result_194781 = invoke(stypy.reporting.localization.Localization(__file__, 771, 13), getitem___194780, int_194774)
    
    # Assigning a type to the variable 'i_nolb' (line 771)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 771, 4), 'i_nolb', subscript_call_result_194781)
    
    # Assigning a Tuple to a Tuple (line 772):
    
    # Assigning a UnaryOp to a Name (line 772):
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'l_nolb_someub' (line 773)
    l_nolb_someub_194782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 13), 'l_nolb_someub')
    # Getting the type of 'ubs' (line 773)
    ubs_194783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 9), 'ubs')
    # Obtaining the member '__getitem__' of a type (line 773)
    getitem___194784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 9), ubs_194783, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 773)
    subscript_call_result_194785 = invoke(stypy.reporting.localization.Localization(__file__, 773, 9), getitem___194784, l_nolb_someub_194782)
    
    # Applying the 'usub' unary operator (line 773)
    result___neg___194786 = python_operator(stypy.reporting.localization.Localization(__file__, 773, 8), 'usub', subscript_call_result_194785)
    
    # Assigning a type to the variable 'tuple_assignment_192575' (line 772)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 772, 4), 'tuple_assignment_192575', result___neg___194786)
    
    # Assigning a Subscript to a Name (line 772):
    
    # Obtaining the type of the subscript
    # Getting the type of 'l_nolb_someub' (line 773)
    l_nolb_someub_194787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 33), 'l_nolb_someub')
    # Getting the type of 'lbs' (line 773)
    lbs_194788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 29), 'lbs')
    # Obtaining the member '__getitem__' of a type (line 773)
    getitem___194789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 29), lbs_194788, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 773)
    subscript_call_result_194790 = invoke(stypy.reporting.localization.Localization(__file__, 773, 29), getitem___194789, l_nolb_someub_194787)
    
    # Assigning a type to the variable 'tuple_assignment_192576' (line 772)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 772, 4), 'tuple_assignment_192576', subscript_call_result_194790)
    
    # Assigning a Name to a Subscript (line 772):
    # Getting the type of 'tuple_assignment_192575' (line 772)
    tuple_assignment_192575_194791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 4), 'tuple_assignment_192575')
    # Getting the type of 'lbs' (line 772)
    lbs_194792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 4), 'lbs')
    # Getting the type of 'l_nolb_someub' (line 772)
    l_nolb_someub_194793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 8), 'l_nolb_someub')
    # Storing an element on a container (line 772)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 772, 4), lbs_194792, (l_nolb_someub_194793, tuple_assignment_192575_194791))
    
    # Assigning a Name to a Subscript (line 772):
    # Getting the type of 'tuple_assignment_192576' (line 772)
    tuple_assignment_192576_194794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 4), 'tuple_assignment_192576')
    # Getting the type of 'ubs' (line 772)
    ubs_194795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 24), 'ubs')
    # Getting the type of 'l_nolb_someub' (line 772)
    l_nolb_someub_194796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 28), 'l_nolb_someub')
    # Storing an element on a container (line 772)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 772, 24), ubs_194795, (l_nolb_someub_194796, tuple_assignment_192576_194794))
    
    # Assigning a Call to a Name (line 774):
    
    # Assigning a Call to a Name (line 774):
    
    # Call to equal(...): (line 774)
    # Processing the call arguments (line 774)
    # Getting the type of 'lbs' (line 774)
    lbs_194799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 23), 'lbs', False)
    # Getting the type of 'None' (line 774)
    None_194800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 28), 'None', False)
    # Processing the call keyword arguments (line 774)
    kwargs_194801 = {}
    # Getting the type of 'np' (line 774)
    np_194797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 14), 'np', False)
    # Obtaining the member 'equal' of a type (line 774)
    equal_194798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 14), np_194797, 'equal')
    # Calling equal(args, kwargs) (line 774)
    equal_call_result_194802 = invoke(stypy.reporting.localization.Localization(__file__, 774, 14), equal_194798, *[lbs_194799, None_194800], **kwargs_194801)
    
    # Assigning a type to the variable 'lb_none' (line 774)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 774, 4), 'lb_none', equal_call_result_194802)
    
    # Assigning a Call to a Name (line 775):
    
    # Assigning a Call to a Name (line 775):
    
    # Call to equal(...): (line 775)
    # Processing the call arguments (line 775)
    # Getting the type of 'ubs' (line 775)
    ubs_194805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 23), 'ubs', False)
    # Getting the type of 'None' (line 775)
    None_194806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 28), 'None', False)
    # Processing the call keyword arguments (line 775)
    kwargs_194807 = {}
    # Getting the type of 'np' (line 775)
    np_194803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 14), 'np', False)
    # Obtaining the member 'equal' of a type (line 775)
    equal_194804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 775, 14), np_194803, 'equal')
    # Calling equal(args, kwargs) (line 775)
    equal_call_result_194808 = invoke(stypy.reporting.localization.Localization(__file__, 775, 14), equal_194804, *[ubs_194805, None_194806], **kwargs_194807)
    
    # Assigning a type to the variable 'ub_none' (line 775)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 775, 4), 'ub_none', equal_call_result_194808)
    
    # Assigning a Call to a Name (line 776):
    
    # Assigning a Call to a Name (line 776):
    
    # Call to logical_not(...): (line 776)
    # Processing the call arguments (line 776)
    # Getting the type of 'lb_none' (line 776)
    lb_none_194811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 29), 'lb_none', False)
    # Processing the call keyword arguments (line 776)
    kwargs_194812 = {}
    # Getting the type of 'np' (line 776)
    np_194809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 14), 'np', False)
    # Obtaining the member 'logical_not' of a type (line 776)
    logical_not_194810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 14), np_194809, 'logical_not')
    # Calling logical_not(args, kwargs) (line 776)
    logical_not_call_result_194813 = invoke(stypy.reporting.localization.Localization(__file__, 776, 14), logical_not_194810, *[lb_none_194811], **kwargs_194812)
    
    # Assigning a type to the variable 'lb_some' (line 776)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 776, 4), 'lb_some', logical_not_call_result_194813)
    
    # Assigning a Call to a Name (line 777):
    
    # Assigning a Call to a Name (line 777):
    
    # Call to logical_not(...): (line 777)
    # Processing the call arguments (line 777)
    # Getting the type of 'ub_none' (line 777)
    ub_none_194816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 29), 'ub_none', False)
    # Processing the call keyword arguments (line 777)
    kwargs_194817 = {}
    # Getting the type of 'np' (line 777)
    np_194814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 14), 'np', False)
    # Obtaining the member 'logical_not' of a type (line 777)
    logical_not_194815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 14), np_194814, 'logical_not')
    # Calling logical_not(args, kwargs) (line 777)
    logical_not_call_result_194818 = invoke(stypy.reporting.localization.Localization(__file__, 777, 14), logical_not_194815, *[ub_none_194816], **kwargs_194817)
    
    # Assigning a type to the variable 'ub_some' (line 777)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 777, 4), 'ub_some', logical_not_call_result_194818)
    
    # Getting the type of 'c' (line 778)
    c_194819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 4), 'c')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i_nolb' (line 778)
    i_nolb_194820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 6), 'i_nolb')
    # Getting the type of 'c' (line 778)
    c_194821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 4), 'c')
    # Obtaining the member '__getitem__' of a type (line 778)
    getitem___194822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 778, 4), c_194821, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 778)
    subscript_call_result_194823 = invoke(stypy.reporting.localization.Localization(__file__, 778, 4), getitem___194822, i_nolb_194820)
    
    int_194824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 778, 17), 'int')
    # Applying the binary operator '*=' (line 778)
    result_imul_194825 = python_operator(stypy.reporting.localization.Localization(__file__, 778, 4), '*=', subscript_call_result_194823, int_194824)
    # Getting the type of 'c' (line 778)
    c_194826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 4), 'c')
    # Getting the type of 'i_nolb' (line 778)
    i_nolb_194827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 6), 'i_nolb')
    # Storing an element on a container (line 778)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 778, 4), c_194826, (i_nolb_194827, result_imul_194825))
    
    
    
    
    # Call to len(...): (line 779)
    # Processing the call arguments (line 779)
    # Getting the type of 'i_nolb' (line 779)
    i_nolb_194829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 11), 'i_nolb', False)
    # Processing the call keyword arguments (line 779)
    kwargs_194830 = {}
    # Getting the type of 'len' (line 779)
    len_194828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 7), 'len', False)
    # Calling len(args, kwargs) (line 779)
    len_call_result_194831 = invoke(stypy.reporting.localization.Localization(__file__, 779, 7), len_194828, *[i_nolb_194829], **kwargs_194830)
    
    int_194832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 779, 21), 'int')
    # Applying the binary operator '>' (line 779)
    result_gt_194833 = python_operator(stypy.reporting.localization.Localization(__file__, 779, 7), '>', len_call_result_194831, int_194832)
    
    # Testing the type of an if condition (line 779)
    if_condition_194834 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 779, 4), result_gt_194833)
    # Assigning a type to the variable 'if_condition_194834' (line 779)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 779, 4), 'if_condition_194834', if_condition_194834)
    # SSA begins for if statement (line 779)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Obtaining the type of the subscript
    int_194835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 780, 22), 'int')
    # Getting the type of 'A_ub' (line 780)
    A_ub_194836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 11), 'A_ub')
    # Obtaining the member 'shape' of a type (line 780)
    shape_194837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 780, 11), A_ub_194836, 'shape')
    # Obtaining the member '__getitem__' of a type (line 780)
    getitem___194838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 780, 11), shape_194837, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 780)
    subscript_call_result_194839 = invoke(stypy.reporting.localization.Localization(__file__, 780, 11), getitem___194838, int_194835)
    
    int_194840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 780, 27), 'int')
    # Applying the binary operator '>' (line 780)
    result_gt_194841 = python_operator(stypy.reporting.localization.Localization(__file__, 780, 11), '>', subscript_call_result_194839, int_194840)
    
    # Testing the type of an if condition (line 780)
    if_condition_194842 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 780, 8), result_gt_194841)
    # Assigning a type to the variable 'if_condition_194842' (line 780)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 780, 8), 'if_condition_194842', if_condition_194842)
    # SSA begins for if statement (line 780)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'A_ub' (line 781)
    A_ub_194843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 12), 'A_ub')
    
    # Obtaining the type of the subscript
    slice_194844 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 781, 12), None, None, None)
    # Getting the type of 'i_nolb' (line 781)
    i_nolb_194845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 20), 'i_nolb')
    # Getting the type of 'A_ub' (line 781)
    A_ub_194846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 12), 'A_ub')
    # Obtaining the member '__getitem__' of a type (line 781)
    getitem___194847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 781, 12), A_ub_194846, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 781)
    subscript_call_result_194848 = invoke(stypy.reporting.localization.Localization(__file__, 781, 12), getitem___194847, (slice_194844, i_nolb_194845))
    
    int_194849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 781, 31), 'int')
    # Applying the binary operator '*=' (line 781)
    result_imul_194850 = python_operator(stypy.reporting.localization.Localization(__file__, 781, 12), '*=', subscript_call_result_194848, int_194849)
    # Getting the type of 'A_ub' (line 781)
    A_ub_194851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 12), 'A_ub')
    slice_194852 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 781, 12), None, None, None)
    # Getting the type of 'i_nolb' (line 781)
    i_nolb_194853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 20), 'i_nolb')
    # Storing an element on a container (line 781)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 781, 12), A_ub_194851, ((slice_194852, i_nolb_194853), result_imul_194850))
    
    # SSA join for if statement (line 780)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_194854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 782, 22), 'int')
    # Getting the type of 'A_eq' (line 782)
    A_eq_194855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 11), 'A_eq')
    # Obtaining the member 'shape' of a type (line 782)
    shape_194856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 782, 11), A_eq_194855, 'shape')
    # Obtaining the member '__getitem__' of a type (line 782)
    getitem___194857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 782, 11), shape_194856, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 782)
    subscript_call_result_194858 = invoke(stypy.reporting.localization.Localization(__file__, 782, 11), getitem___194857, int_194854)
    
    int_194859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 782, 27), 'int')
    # Applying the binary operator '>' (line 782)
    result_gt_194860 = python_operator(stypy.reporting.localization.Localization(__file__, 782, 11), '>', subscript_call_result_194858, int_194859)
    
    # Testing the type of an if condition (line 782)
    if_condition_194861 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 782, 8), result_gt_194860)
    # Assigning a type to the variable 'if_condition_194861' (line 782)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 782, 8), 'if_condition_194861', if_condition_194861)
    # SSA begins for if statement (line 782)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'A_eq' (line 783)
    A_eq_194862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 12), 'A_eq')
    
    # Obtaining the type of the subscript
    slice_194863 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 783, 12), None, None, None)
    # Getting the type of 'i_nolb' (line 783)
    i_nolb_194864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 20), 'i_nolb')
    # Getting the type of 'A_eq' (line 783)
    A_eq_194865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 12), 'A_eq')
    # Obtaining the member '__getitem__' of a type (line 783)
    getitem___194866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 783, 12), A_eq_194865, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 783)
    subscript_call_result_194867 = invoke(stypy.reporting.localization.Localization(__file__, 783, 12), getitem___194866, (slice_194863, i_nolb_194864))
    
    int_194868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 783, 31), 'int')
    # Applying the binary operator '*=' (line 783)
    result_imul_194869 = python_operator(stypy.reporting.localization.Localization(__file__, 783, 12), '*=', subscript_call_result_194867, int_194868)
    # Getting the type of 'A_eq' (line 783)
    A_eq_194870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 12), 'A_eq')
    slice_194871 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 783, 12), None, None, None)
    # Getting the type of 'i_nolb' (line 783)
    i_nolb_194872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 20), 'i_nolb')
    # Storing an element on a container (line 783)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 783, 12), A_eq_194870, ((slice_194871, i_nolb_194872), result_imul_194869))
    
    # SSA join for if statement (line 782)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 779)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 786):
    
    # Assigning a Subscript to a Name (line 786):
    
    # Obtaining the type of the subscript
    int_194873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 786, 32), 'int')
    
    # Call to where(...): (line 786)
    # Processing the call arguments (line 786)
    # Getting the type of 'ub_some' (line 786)
    ub_some_194876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 23), 'ub_some', False)
    # Processing the call keyword arguments (line 786)
    kwargs_194877 = {}
    # Getting the type of 'np' (line 786)
    np_194874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 14), 'np', False)
    # Obtaining the member 'where' of a type (line 786)
    where_194875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 786, 14), np_194874, 'where')
    # Calling where(args, kwargs) (line 786)
    where_call_result_194878 = invoke(stypy.reporting.localization.Localization(__file__, 786, 14), where_194875, *[ub_some_194876], **kwargs_194877)
    
    # Obtaining the member '__getitem__' of a type (line 786)
    getitem___194879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 786, 14), where_call_result_194878, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 786)
    subscript_call_result_194880 = invoke(stypy.reporting.localization.Localization(__file__, 786, 14), getitem___194879, int_194873)
    
    # Assigning a type to the variable 'i_newub' (line 786)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 786, 4), 'i_newub', subscript_call_result_194880)
    
    # Assigning a Subscript to a Name (line 787):
    
    # Assigning a Subscript to a Name (line 787):
    
    # Obtaining the type of the subscript
    # Getting the type of 'ub_some' (line 787)
    ub_some_194881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 19), 'ub_some')
    # Getting the type of 'ubs' (line 787)
    ubs_194882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 15), 'ubs')
    # Obtaining the member '__getitem__' of a type (line 787)
    getitem___194883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 15), ubs_194882, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 787)
    subscript_call_result_194884 = invoke(stypy.reporting.localization.Localization(__file__, 787, 15), getitem___194883, ub_some_194881)
    
    # Assigning a type to the variable 'ub_newub' (line 787)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 787, 4), 'ub_newub', subscript_call_result_194884)
    
    # Assigning a Call to a Name (line 788):
    
    # Assigning a Call to a Name (line 788):
    
    # Call to count_nonzero(...): (line 788)
    # Processing the call arguments (line 788)
    # Getting the type of 'ub_some' (line 788)
    ub_some_194887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 32), 'ub_some', False)
    # Processing the call keyword arguments (line 788)
    kwargs_194888 = {}
    # Getting the type of 'np' (line 788)
    np_194885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 15), 'np', False)
    # Obtaining the member 'count_nonzero' of a type (line 788)
    count_nonzero_194886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 15), np_194885, 'count_nonzero')
    # Calling count_nonzero(args, kwargs) (line 788)
    count_nonzero_call_result_194889 = invoke(stypy.reporting.localization.Localization(__file__, 788, 15), count_nonzero_194886, *[ub_some_194887], **kwargs_194888)
    
    # Assigning a type to the variable 'n_bounds' (line 788)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 788, 4), 'n_bounds', count_nonzero_call_result_194889)
    
    # Assigning a Call to a Name (line 789):
    
    # Assigning a Call to a Name (line 789):
    
    # Call to vstack(...): (line 789)
    # Processing the call arguments (line 789)
    
    # Obtaining an instance of the builtin type 'tuple' (line 789)
    tuple_194891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 789, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 789)
    # Adding element type (line 789)
    # Getting the type of 'A_ub' (line 789)
    A_ub_194892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 19), 'A_ub', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 789, 19), tuple_194891, A_ub_194892)
    # Adding element type (line 789)
    
    # Call to zeros(...): (line 789)
    # Processing the call arguments (line 789)
    
    # Obtaining an instance of the builtin type 'tuple' (line 789)
    tuple_194894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 789, 32), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 789)
    # Adding element type (line 789)
    # Getting the type of 'n_bounds' (line 789)
    n_bounds_194895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 32), 'n_bounds', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 789, 32), tuple_194894, n_bounds_194895)
    # Adding element type (line 789)
    
    # Obtaining the type of the subscript
    int_194896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 789, 53), 'int')
    # Getting the type of 'A_ub' (line 789)
    A_ub_194897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 42), 'A_ub', False)
    # Obtaining the member 'shape' of a type (line 789)
    shape_194898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 789, 42), A_ub_194897, 'shape')
    # Obtaining the member '__getitem__' of a type (line 789)
    getitem___194899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 789, 42), shape_194898, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 789)
    subscript_call_result_194900 = invoke(stypy.reporting.localization.Localization(__file__, 789, 42), getitem___194899, int_194896)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 789, 32), tuple_194894, subscript_call_result_194900)
    
    # Processing the call keyword arguments (line 789)
    kwargs_194901 = {}
    # Getting the type of 'zeros' (line 789)
    zeros_194893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 25), 'zeros', False)
    # Calling zeros(args, kwargs) (line 789)
    zeros_call_result_194902 = invoke(stypy.reporting.localization.Localization(__file__, 789, 25), zeros_194893, *[tuple_194894], **kwargs_194901)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 789, 19), tuple_194891, zeros_call_result_194902)
    
    # Processing the call keyword arguments (line 789)
    kwargs_194903 = {}
    # Getting the type of 'vstack' (line 789)
    vstack_194890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 11), 'vstack', False)
    # Calling vstack(args, kwargs) (line 789)
    vstack_call_result_194904 = invoke(stypy.reporting.localization.Localization(__file__, 789, 11), vstack_194890, *[tuple_194891], **kwargs_194903)
    
    # Assigning a type to the variable 'A_ub' (line 789)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 789, 4), 'A_ub', vstack_call_result_194904)
    
    # Assigning a Call to a Name (line 790):
    
    # Assigning a Call to a Name (line 790):
    
    # Call to concatenate(...): (line 790)
    # Processing the call arguments (line 790)
    
    # Obtaining an instance of the builtin type 'tuple' (line 790)
    tuple_194907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 790, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 790)
    # Adding element type (line 790)
    # Getting the type of 'b_ub' (line 790)
    b_ub_194908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 27), 'b_ub', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 790, 27), tuple_194907, b_ub_194908)
    # Adding element type (line 790)
    
    # Call to zeros(...): (line 790)
    # Processing the call arguments (line 790)
    # Getting the type of 'n_bounds' (line 790)
    n_bounds_194911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 42), 'n_bounds', False)
    # Processing the call keyword arguments (line 790)
    kwargs_194912 = {}
    # Getting the type of 'np' (line 790)
    np_194909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 33), 'np', False)
    # Obtaining the member 'zeros' of a type (line 790)
    zeros_194910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 790, 33), np_194909, 'zeros')
    # Calling zeros(args, kwargs) (line 790)
    zeros_call_result_194913 = invoke(stypy.reporting.localization.Localization(__file__, 790, 33), zeros_194910, *[n_bounds_194911], **kwargs_194912)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 790, 27), tuple_194907, zeros_call_result_194913)
    
    # Processing the call keyword arguments (line 790)
    kwargs_194914 = {}
    # Getting the type of 'np' (line 790)
    np_194905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 11), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 790)
    concatenate_194906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 790, 11), np_194905, 'concatenate')
    # Calling concatenate(args, kwargs) (line 790)
    concatenate_call_result_194915 = invoke(stypy.reporting.localization.Localization(__file__, 790, 11), concatenate_194906, *[tuple_194907], **kwargs_194914)
    
    # Assigning a type to the variable 'b_ub' (line 790)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 790, 4), 'b_ub', concatenate_call_result_194915)
    
    # Assigning a Num to a Subscript (line 791):
    
    # Assigning a Num to a Subscript (line 791):
    int_194916 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 791, 48), 'int')
    # Getting the type of 'A_ub' (line 791)
    A_ub_194917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 4), 'A_ub')
    
    # Obtaining an instance of the builtin type 'tuple' (line 791)
    tuple_194918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 791, 9), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 791)
    # Adding element type (line 791)
    
    # Call to range(...): (line 791)
    # Processing the call arguments (line 791)
    # Getting the type of 'm_ub' (line 791)
    m_ub_194920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 15), 'm_ub', False)
    
    # Obtaining the type of the subscript
    int_194921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 791, 32), 'int')
    # Getting the type of 'A_ub' (line 791)
    A_ub_194922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 21), 'A_ub', False)
    # Obtaining the member 'shape' of a type (line 791)
    shape_194923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 21), A_ub_194922, 'shape')
    # Obtaining the member '__getitem__' of a type (line 791)
    getitem___194924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 21), shape_194923, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 791)
    subscript_call_result_194925 = invoke(stypy.reporting.localization.Localization(__file__, 791, 21), getitem___194924, int_194921)
    
    # Processing the call keyword arguments (line 791)
    kwargs_194926 = {}
    # Getting the type of 'range' (line 791)
    range_194919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 9), 'range', False)
    # Calling range(args, kwargs) (line 791)
    range_call_result_194927 = invoke(stypy.reporting.localization.Localization(__file__, 791, 9), range_194919, *[m_ub_194920, subscript_call_result_194925], **kwargs_194926)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 791, 9), tuple_194918, range_call_result_194927)
    # Adding element type (line 791)
    # Getting the type of 'i_newub' (line 791)
    i_newub_194928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 37), 'i_newub')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 791, 9), tuple_194918, i_newub_194928)
    
    # Storing an element on a container (line 791)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 791, 4), A_ub_194917, (tuple_194918, int_194916))
    
    # Assigning a Name to a Subscript (line 792):
    
    # Assigning a Name to a Subscript (line 792):
    # Getting the type of 'ub_newub' (line 792)
    ub_newub_194929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 18), 'ub_newub')
    # Getting the type of 'b_ub' (line 792)
    b_ub_194930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 4), 'b_ub')
    # Getting the type of 'm_ub' (line 792)
    m_ub_194931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 9), 'm_ub')
    slice_194932 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 792, 4), m_ub_194931, None, None)
    # Storing an element on a container (line 792)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 792, 4), b_ub_194930, (slice_194932, ub_newub_194929))
    
    # Assigning a Call to a Name (line 794):
    
    # Assigning a Call to a Name (line 794):
    
    # Call to vstack(...): (line 794)
    # Processing the call arguments (line 794)
    
    # Obtaining an instance of the builtin type 'tuple' (line 794)
    tuple_194934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 794, 17), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 794)
    # Adding element type (line 794)
    # Getting the type of 'A_ub' (line 794)
    A_ub_194935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 17), 'A_ub', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 794, 17), tuple_194934, A_ub_194935)
    # Adding element type (line 794)
    # Getting the type of 'A_eq' (line 794)
    A_eq_194936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 23), 'A_eq', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 794, 17), tuple_194934, A_eq_194936)
    
    # Processing the call keyword arguments (line 794)
    kwargs_194937 = {}
    # Getting the type of 'vstack' (line 794)
    vstack_194933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 9), 'vstack', False)
    # Calling vstack(args, kwargs) (line 794)
    vstack_call_result_194938 = invoke(stypy.reporting.localization.Localization(__file__, 794, 9), vstack_194933, *[tuple_194934], **kwargs_194937)
    
    # Assigning a type to the variable 'A1' (line 794)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 794, 4), 'A1', vstack_call_result_194938)
    
    # Assigning a Call to a Name (line 795):
    
    # Assigning a Call to a Name (line 795):
    
    # Call to concatenate(...): (line 795)
    # Processing the call arguments (line 795)
    
    # Obtaining an instance of the builtin type 'tuple' (line 795)
    tuple_194941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 795, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 795)
    # Adding element type (line 795)
    # Getting the type of 'b_ub' (line 795)
    b_ub_194942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 24), 'b_ub', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 795, 24), tuple_194941, b_ub_194942)
    # Adding element type (line 795)
    # Getting the type of 'b_eq' (line 795)
    b_eq_194943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 30), 'b_eq', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 795, 24), tuple_194941, b_eq_194943)
    
    # Processing the call keyword arguments (line 795)
    kwargs_194944 = {}
    # Getting the type of 'np' (line 795)
    np_194939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 8), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 795)
    concatenate_194940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 795, 8), np_194939, 'concatenate')
    # Calling concatenate(args, kwargs) (line 795)
    concatenate_call_result_194945 = invoke(stypy.reporting.localization.Localization(__file__, 795, 8), concatenate_194940, *[tuple_194941], **kwargs_194944)
    
    # Assigning a type to the variable 'b' (line 795)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 795, 4), 'b', concatenate_call_result_194945)
    
    # Assigning a Call to a Name (line 796):
    
    # Assigning a Call to a Name (line 796):
    
    # Call to concatenate(...): (line 796)
    # Processing the call arguments (line 796)
    
    # Obtaining an instance of the builtin type 'tuple' (line 796)
    tuple_194948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 796, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 796)
    # Adding element type (line 796)
    # Getting the type of 'c' (line 796)
    c_194949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 24), 'c', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 796, 24), tuple_194948, c_194949)
    # Adding element type (line 796)
    
    # Call to zeros(...): (line 796)
    # Processing the call arguments (line 796)
    
    # Obtaining an instance of the builtin type 'tuple' (line 796)
    tuple_194952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 796, 37), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 796)
    # Adding element type (line 796)
    
    # Obtaining the type of the subscript
    int_194953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 796, 48), 'int')
    # Getting the type of 'A_ub' (line 796)
    A_ub_194954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 37), 'A_ub', False)
    # Obtaining the member 'shape' of a type (line 796)
    shape_194955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 796, 37), A_ub_194954, 'shape')
    # Obtaining the member '__getitem__' of a type (line 796)
    getitem___194956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 796, 37), shape_194955, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 796)
    subscript_call_result_194957 = invoke(stypy.reporting.localization.Localization(__file__, 796, 37), getitem___194956, int_194953)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 796, 37), tuple_194952, subscript_call_result_194957)
    
    # Processing the call keyword arguments (line 796)
    kwargs_194958 = {}
    # Getting the type of 'np' (line 796)
    np_194950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 27), 'np', False)
    # Obtaining the member 'zeros' of a type (line 796)
    zeros_194951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 796, 27), np_194950, 'zeros')
    # Calling zeros(args, kwargs) (line 796)
    zeros_call_result_194959 = invoke(stypy.reporting.localization.Localization(__file__, 796, 27), zeros_194951, *[tuple_194952], **kwargs_194958)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 796, 24), tuple_194948, zeros_call_result_194959)
    
    # Processing the call keyword arguments (line 796)
    kwargs_194960 = {}
    # Getting the type of 'np' (line 796)
    np_194946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 8), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 796)
    concatenate_194947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 796, 8), np_194946, 'concatenate')
    # Calling concatenate(args, kwargs) (line 796)
    concatenate_call_result_194961 = invoke(stypy.reporting.localization.Localization(__file__, 796, 8), concatenate_194947, *[tuple_194948], **kwargs_194960)
    
    # Assigning a type to the variable 'c' (line 796)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 4), 'c', concatenate_call_result_194961)
    
    # Assigning a Call to a Name (line 799):
    
    # Assigning a Call to a Name (line 799):
    
    # Call to logical_and(...): (line 799)
    # Processing the call arguments (line 799)
    # Getting the type of 'lb_none' (line 799)
    lb_none_194964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 28), 'lb_none', False)
    # Getting the type of 'ub_none' (line 799)
    ub_none_194965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 37), 'ub_none', False)
    # Processing the call keyword arguments (line 799)
    kwargs_194966 = {}
    # Getting the type of 'np' (line 799)
    np_194962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 13), 'np', False)
    # Obtaining the member 'logical_and' of a type (line 799)
    logical_and_194963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 13), np_194962, 'logical_and')
    # Calling logical_and(args, kwargs) (line 799)
    logical_and_call_result_194967 = invoke(stypy.reporting.localization.Localization(__file__, 799, 13), logical_and_194963, *[lb_none_194964, ub_none_194965], **kwargs_194966)
    
    # Assigning a type to the variable 'l_free' (line 799)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 4), 'l_free', logical_and_call_result_194967)
    
    # Assigning a Subscript to a Name (line 800):
    
    # Assigning a Subscript to a Name (line 800):
    
    # Obtaining the type of the subscript
    int_194968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 800, 30), 'int')
    
    # Call to where(...): (line 800)
    # Processing the call arguments (line 800)
    # Getting the type of 'l_free' (line 800)
    l_free_194971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 22), 'l_free', False)
    # Processing the call keyword arguments (line 800)
    kwargs_194972 = {}
    # Getting the type of 'np' (line 800)
    np_194969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 13), 'np', False)
    # Obtaining the member 'where' of a type (line 800)
    where_194970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 800, 13), np_194969, 'where')
    # Calling where(args, kwargs) (line 800)
    where_call_result_194973 = invoke(stypy.reporting.localization.Localization(__file__, 800, 13), where_194970, *[l_free_194971], **kwargs_194972)
    
    # Obtaining the member '__getitem__' of a type (line 800)
    getitem___194974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 800, 13), where_call_result_194973, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 800)
    subscript_call_result_194975 = invoke(stypy.reporting.localization.Localization(__file__, 800, 13), getitem___194974, int_194968)
    
    # Assigning a type to the variable 'i_free' (line 800)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 800, 4), 'i_free', subscript_call_result_194975)
    
    # Assigning a Call to a Name (line 801):
    
    # Assigning a Call to a Name (line 801):
    
    # Call to len(...): (line 801)
    # Processing the call arguments (line 801)
    # Getting the type of 'i_free' (line 801)
    i_free_194977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 17), 'i_free', False)
    # Processing the call keyword arguments (line 801)
    kwargs_194978 = {}
    # Getting the type of 'len' (line 801)
    len_194976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 13), 'len', False)
    # Calling len(args, kwargs) (line 801)
    len_call_result_194979 = invoke(stypy.reporting.localization.Localization(__file__, 801, 13), len_194976, *[i_free_194977], **kwargs_194978)
    
    # Assigning a type to the variable 'n_free' (line 801)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 801, 4), 'n_free', len_call_result_194979)
    
    # Assigning a Call to a Name (line 802):
    
    # Assigning a Call to a Name (line 802):
    
    # Call to hstack(...): (line 802)
    # Processing the call arguments (line 802)
    
    # Obtaining an instance of the builtin type 'tuple' (line 802)
    tuple_194981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 802, 17), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 802)
    # Adding element type (line 802)
    # Getting the type of 'A1' (line 802)
    A1_194982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 17), 'A1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 802, 17), tuple_194981, A1_194982)
    # Adding element type (line 802)
    
    # Call to zeros(...): (line 802)
    # Processing the call arguments (line 802)
    
    # Obtaining an instance of the builtin type 'tuple' (line 802)
    tuple_194984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 802, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 802)
    # Adding element type (line 802)
    
    # Obtaining the type of the subscript
    int_194985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 802, 37), 'int')
    # Getting the type of 'A1' (line 802)
    A1_194986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 28), 'A1', False)
    # Obtaining the member 'shape' of a type (line 802)
    shape_194987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 28), A1_194986, 'shape')
    # Obtaining the member '__getitem__' of a type (line 802)
    getitem___194988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 28), shape_194987, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 802)
    subscript_call_result_194989 = invoke(stypy.reporting.localization.Localization(__file__, 802, 28), getitem___194988, int_194985)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 802, 28), tuple_194984, subscript_call_result_194989)
    # Adding element type (line 802)
    # Getting the type of 'n_free' (line 802)
    n_free_194990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 41), 'n_free', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 802, 28), tuple_194984, n_free_194990)
    
    # Processing the call keyword arguments (line 802)
    kwargs_194991 = {}
    # Getting the type of 'zeros' (line 802)
    zeros_194983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 21), 'zeros', False)
    # Calling zeros(args, kwargs) (line 802)
    zeros_call_result_194992 = invoke(stypy.reporting.localization.Localization(__file__, 802, 21), zeros_194983, *[tuple_194984], **kwargs_194991)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 802, 17), tuple_194981, zeros_call_result_194992)
    
    # Processing the call keyword arguments (line 802)
    kwargs_194993 = {}
    # Getting the type of 'hstack' (line 802)
    hstack_194980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 9), 'hstack', False)
    # Calling hstack(args, kwargs) (line 802)
    hstack_call_result_194994 = invoke(stypy.reporting.localization.Localization(__file__, 802, 9), hstack_194980, *[tuple_194981], **kwargs_194993)
    
    # Assigning a type to the variable 'A1' (line 802)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 4), 'A1', hstack_call_result_194994)
    
    # Assigning a Call to a Name (line 803):
    
    # Assigning a Call to a Name (line 803):
    
    # Call to concatenate(...): (line 803)
    # Processing the call arguments (line 803)
    
    # Obtaining an instance of the builtin type 'tuple' (line 803)
    tuple_194997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 803, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 803)
    # Adding element type (line 803)
    # Getting the type of 'c' (line 803)
    c_194998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 24), 'c', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 803, 24), tuple_194997, c_194998)
    # Adding element type (line 803)
    
    # Call to zeros(...): (line 803)
    # Processing the call arguments (line 803)
    # Getting the type of 'n_free' (line 803)
    n_free_195001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 36), 'n_free', False)
    # Processing the call keyword arguments (line 803)
    kwargs_195002 = {}
    # Getting the type of 'np' (line 803)
    np_194999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 27), 'np', False)
    # Obtaining the member 'zeros' of a type (line 803)
    zeros_195000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 803, 27), np_194999, 'zeros')
    # Calling zeros(args, kwargs) (line 803)
    zeros_call_result_195003 = invoke(stypy.reporting.localization.Localization(__file__, 803, 27), zeros_195000, *[n_free_195001], **kwargs_195002)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 803, 24), tuple_194997, zeros_call_result_195003)
    
    # Processing the call keyword arguments (line 803)
    kwargs_195004 = {}
    # Getting the type of 'np' (line 803)
    np_194995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 8), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 803)
    concatenate_194996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 803, 8), np_194995, 'concatenate')
    # Calling concatenate(args, kwargs) (line 803)
    concatenate_call_result_195005 = invoke(stypy.reporting.localization.Localization(__file__, 803, 8), concatenate_194996, *[tuple_194997], **kwargs_195004)
    
    # Assigning a type to the variable 'c' (line 803)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 803, 4), 'c', concatenate_call_result_195005)
    
    # Assigning a UnaryOp to a Subscript (line 804):
    
    # Assigning a UnaryOp to a Subscript (line 804):
    
    
    # Obtaining the type of the subscript
    slice_195006 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 804, 39), None, None, None)
    # Getting the type of 'i_free' (line 804)
    i_free_195007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 45), 'i_free')
    # Getting the type of 'A1' (line 804)
    A1_195008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 39), 'A1')
    # Obtaining the member '__getitem__' of a type (line 804)
    getitem___195009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 804, 39), A1_195008, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 804)
    subscript_call_result_195010 = invoke(stypy.reporting.localization.Localization(__file__, 804, 39), getitem___195009, (slice_195006, i_free_195007))
    
    # Applying the 'usub' unary operator (line 804)
    result___neg___195011 = python_operator(stypy.reporting.localization.Localization(__file__, 804, 38), 'usub', subscript_call_result_195010)
    
    # Getting the type of 'A1' (line 804)
    A1_195012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 4), 'A1')
    slice_195013 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 804, 4), None, None, None)
    
    # Call to range(...): (line 804)
    # Processing the call arguments (line 804)
    # Getting the type of 'n_ub' (line 804)
    n_ub_195015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 16), 'n_ub', False)
    
    # Obtaining the type of the subscript
    int_195016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 804, 31), 'int')
    # Getting the type of 'A1' (line 804)
    A1_195017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 22), 'A1', False)
    # Obtaining the member 'shape' of a type (line 804)
    shape_195018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 804, 22), A1_195017, 'shape')
    # Obtaining the member '__getitem__' of a type (line 804)
    getitem___195019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 804, 22), shape_195018, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 804)
    subscript_call_result_195020 = invoke(stypy.reporting.localization.Localization(__file__, 804, 22), getitem___195019, int_195016)
    
    # Processing the call keyword arguments (line 804)
    kwargs_195021 = {}
    # Getting the type of 'range' (line 804)
    range_195014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 10), 'range', False)
    # Calling range(args, kwargs) (line 804)
    range_call_result_195022 = invoke(stypy.reporting.localization.Localization(__file__, 804, 10), range_195014, *[n_ub_195015, subscript_call_result_195020], **kwargs_195021)
    
    # Storing an element on a container (line 804)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 804, 4), A1_195012, ((slice_195013, range_call_result_195022), result___neg___195011))
    
    # Assigning a UnaryOp to a Subscript (line 805):
    
    # Assigning a UnaryOp to a Subscript (line 805):
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i_free' (line 805)
    i_free_195023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 41), 'i_free')
    # Getting the type of 'c' (line 805)
    c_195024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 39), 'c')
    # Obtaining the member '__getitem__' of a type (line 805)
    getitem___195025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 39), c_195024, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 805)
    subscript_call_result_195026 = invoke(stypy.reporting.localization.Localization(__file__, 805, 39), getitem___195025, i_free_195023)
    
    # Applying the 'usub' unary operator (line 805)
    result___neg___195027 = python_operator(stypy.reporting.localization.Localization(__file__, 805, 38), 'usub', subscript_call_result_195026)
    
    # Getting the type of 'c' (line 805)
    c_195028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 4), 'c')
    
    # Call to arange(...): (line 805)
    # Processing the call arguments (line 805)
    # Getting the type of 'n_ub' (line 805)
    n_ub_195031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 16), 'n_ub', False)
    
    # Obtaining the type of the subscript
    int_195032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 805, 31), 'int')
    # Getting the type of 'A1' (line 805)
    A1_195033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 22), 'A1', False)
    # Obtaining the member 'shape' of a type (line 805)
    shape_195034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 22), A1_195033, 'shape')
    # Obtaining the member '__getitem__' of a type (line 805)
    getitem___195035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 22), shape_195034, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 805)
    subscript_call_result_195036 = invoke(stypy.reporting.localization.Localization(__file__, 805, 22), getitem___195035, int_195032)
    
    # Processing the call keyword arguments (line 805)
    kwargs_195037 = {}
    # Getting the type of 'np' (line 805)
    np_195029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 6), 'np', False)
    # Obtaining the member 'arange' of a type (line 805)
    arange_195030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 6), np_195029, 'arange')
    # Calling arange(args, kwargs) (line 805)
    arange_call_result_195038 = invoke(stypy.reporting.localization.Localization(__file__, 805, 6), arange_195030, *[n_ub_195031, subscript_call_result_195036], **kwargs_195037)
    
    # Storing an element on a container (line 805)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 805, 4), c_195028, (arange_call_result_195038, result___neg___195027))
    
    # Assigning a Call to a Name (line 808):
    
    # Assigning a Call to a Name (line 808):
    
    # Call to vstack(...): (line 808)
    # Processing the call arguments (line 808)
    
    # Obtaining an instance of the builtin type 'list' (line 808)
    list_195040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 808)
    # Adding element type (line 808)
    
    # Call to eye(...): (line 808)
    # Processing the call arguments (line 808)
    
    # Obtaining the type of the subscript
    int_195042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 32), 'int')
    # Getting the type of 'A_ub' (line 808)
    A_ub_195043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 21), 'A_ub', False)
    # Obtaining the member 'shape' of a type (line 808)
    shape_195044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 21), A_ub_195043, 'shape')
    # Obtaining the member '__getitem__' of a type (line 808)
    getitem___195045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 21), shape_195044, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 808)
    subscript_call_result_195046 = invoke(stypy.reporting.localization.Localization(__file__, 808, 21), getitem___195045, int_195042)
    
    # Processing the call keyword arguments (line 808)
    kwargs_195047 = {}
    # Getting the type of 'eye' (line 808)
    eye_195041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 17), 'eye', False)
    # Calling eye(args, kwargs) (line 808)
    eye_call_result_195048 = invoke(stypy.reporting.localization.Localization(__file__, 808, 17), eye_195041, *[subscript_call_result_195046], **kwargs_195047)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 808, 16), list_195040, eye_call_result_195048)
    # Adding element type (line 808)
    
    # Call to zeros(...): (line 808)
    # Processing the call arguments (line 808)
    
    # Obtaining an instance of the builtin type 'tuple' (line 808)
    tuple_195050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 44), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 808)
    # Adding element type (line 808)
    
    # Obtaining the type of the subscript
    int_195051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 55), 'int')
    # Getting the type of 'A_eq' (line 808)
    A_eq_195052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 44), 'A_eq', False)
    # Obtaining the member 'shape' of a type (line 808)
    shape_195053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 44), A_eq_195052, 'shape')
    # Obtaining the member '__getitem__' of a type (line 808)
    getitem___195054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 44), shape_195053, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 808)
    subscript_call_result_195055 = invoke(stypy.reporting.localization.Localization(__file__, 808, 44), getitem___195054, int_195051)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 808, 44), tuple_195050, subscript_call_result_195055)
    # Adding element type (line 808)
    
    # Obtaining the type of the subscript
    int_195056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 70), 'int')
    # Getting the type of 'A_ub' (line 808)
    A_ub_195057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 59), 'A_ub', False)
    # Obtaining the member 'shape' of a type (line 808)
    shape_195058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 59), A_ub_195057, 'shape')
    # Obtaining the member '__getitem__' of a type (line 808)
    getitem___195059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 59), shape_195058, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 808)
    subscript_call_result_195060 = invoke(stypy.reporting.localization.Localization(__file__, 808, 59), getitem___195059, int_195056)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 808, 44), tuple_195050, subscript_call_result_195060)
    
    # Processing the call keyword arguments (line 808)
    kwargs_195061 = {}
    # Getting the type of 'zeros' (line 808)
    zeros_195049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 37), 'zeros', False)
    # Calling zeros(args, kwargs) (line 808)
    zeros_call_result_195062 = invoke(stypy.reporting.localization.Localization(__file__, 808, 37), zeros_195049, *[tuple_195050], **kwargs_195061)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 808, 16), list_195040, zeros_call_result_195062)
    
    # Processing the call keyword arguments (line 808)
    kwargs_195063 = {}
    # Getting the type of 'vstack' (line 808)
    vstack_195039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 9), 'vstack', False)
    # Calling vstack(args, kwargs) (line 808)
    vstack_call_result_195064 = invoke(stypy.reporting.localization.Localization(__file__, 808, 9), vstack_195039, *[list_195040], **kwargs_195063)
    
    # Assigning a type to the variable 'A2' (line 808)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 808, 4), 'A2', vstack_call_result_195064)
    
    # Assigning a Call to a Name (line 809):
    
    # Assigning a Call to a Name (line 809):
    
    # Call to hstack(...): (line 809)
    # Processing the call arguments (line 809)
    
    # Obtaining an instance of the builtin type 'list' (line 809)
    list_195066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 809, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 809)
    # Adding element type (line 809)
    # Getting the type of 'A1' (line 809)
    A1_195067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 16), 'A1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 809, 15), list_195066, A1_195067)
    # Adding element type (line 809)
    # Getting the type of 'A2' (line 809)
    A2_195068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 20), 'A2', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 809, 15), list_195066, A2_195068)
    
    # Processing the call keyword arguments (line 809)
    kwargs_195069 = {}
    # Getting the type of 'hstack' (line 809)
    hstack_195065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 8), 'hstack', False)
    # Calling hstack(args, kwargs) (line 809)
    hstack_call_result_195070 = invoke(stypy.reporting.localization.Localization(__file__, 809, 8), hstack_195065, *[list_195066], **kwargs_195069)
    
    # Assigning a type to the variable 'A' (line 809)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 809, 4), 'A', hstack_call_result_195070)
    
    # Assigning a Subscript to a Name (line 813):
    
    # Assigning a Subscript to a Name (line 813):
    
    # Obtaining the type of the subscript
    int_195071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 813, 32), 'int')
    
    # Call to where(...): (line 813)
    # Processing the call arguments (line 813)
    # Getting the type of 'lb_some' (line 813)
    lb_some_195074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 23), 'lb_some', False)
    # Processing the call keyword arguments (line 813)
    kwargs_195075 = {}
    # Getting the type of 'np' (line 813)
    np_195072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 14), 'np', False)
    # Obtaining the member 'where' of a type (line 813)
    where_195073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 813, 14), np_195072, 'where')
    # Calling where(args, kwargs) (line 813)
    where_call_result_195076 = invoke(stypy.reporting.localization.Localization(__file__, 813, 14), where_195073, *[lb_some_195074], **kwargs_195075)
    
    # Obtaining the member '__getitem__' of a type (line 813)
    getitem___195077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 813, 14), where_call_result_195076, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 813)
    subscript_call_result_195078 = invoke(stypy.reporting.localization.Localization(__file__, 813, 14), getitem___195077, int_195071)
    
    # Assigning a type to the variable 'i_shift' (line 813)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 813, 4), 'i_shift', subscript_call_result_195078)
    
    # Assigning a Call to a Name (line 814):
    
    # Assigning a Call to a Name (line 814):
    
    # Call to astype(...): (line 814)
    # Processing the call arguments (line 814)
    # Getting the type of 'float' (line 814)
    float_195084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 35), 'float', False)
    # Processing the call keyword arguments (line 814)
    kwargs_195085 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'lb_some' (line 814)
    lb_some_195079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 19), 'lb_some', False)
    # Getting the type of 'lbs' (line 814)
    lbs_195080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 15), 'lbs', False)
    # Obtaining the member '__getitem__' of a type (line 814)
    getitem___195081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 15), lbs_195080, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 814)
    subscript_call_result_195082 = invoke(stypy.reporting.localization.Localization(__file__, 814, 15), getitem___195081, lb_some_195079)
    
    # Obtaining the member 'astype' of a type (line 814)
    astype_195083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 15), subscript_call_result_195082, 'astype')
    # Calling astype(args, kwargs) (line 814)
    astype_call_result_195086 = invoke(stypy.reporting.localization.Localization(__file__, 814, 15), astype_195083, *[float_195084], **kwargs_195085)
    
    # Assigning a type to the variable 'lb_shift' (line 814)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 814, 4), 'lb_shift', astype_call_result_195086)
    
    # Getting the type of 'c0' (line 815)
    c0_195087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 4), 'c0')
    
    # Call to sum(...): (line 815)
    # Processing the call arguments (line 815)
    # Getting the type of 'lb_shift' (line 815)
    lb_shift_195090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 17), 'lb_shift', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i_shift' (line 815)
    i_shift_195091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 30), 'i_shift', False)
    # Getting the type of 'c' (line 815)
    c_195092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 28), 'c', False)
    # Obtaining the member '__getitem__' of a type (line 815)
    getitem___195093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 28), c_195092, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 815)
    subscript_call_result_195094 = invoke(stypy.reporting.localization.Localization(__file__, 815, 28), getitem___195093, i_shift_195091)
    
    # Applying the binary operator '*' (line 815)
    result_mul_195095 = python_operator(stypy.reporting.localization.Localization(__file__, 815, 17), '*', lb_shift_195090, subscript_call_result_195094)
    
    # Processing the call keyword arguments (line 815)
    kwargs_195096 = {}
    # Getting the type of 'np' (line 815)
    np_195088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 10), 'np', False)
    # Obtaining the member 'sum' of a type (line 815)
    sum_195089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 10), np_195088, 'sum')
    # Calling sum(args, kwargs) (line 815)
    sum_call_result_195097 = invoke(stypy.reporting.localization.Localization(__file__, 815, 10), sum_195089, *[result_mul_195095], **kwargs_195096)
    
    # Applying the binary operator '+=' (line 815)
    result_iadd_195098 = python_operator(stypy.reporting.localization.Localization(__file__, 815, 4), '+=', c0_195087, sum_call_result_195097)
    # Assigning a type to the variable 'c0' (line 815)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 815, 4), 'c0', result_iadd_195098)
    
    
    # Getting the type of 'sparse' (line 816)
    sparse_195099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 7), 'sparse')
    # Testing the type of an if condition (line 816)
    if_condition_195100 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 816, 4), sparse_195099)
    # Assigning a type to the variable 'if_condition_195100' (line 816)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 816, 4), 'if_condition_195100', if_condition_195100)
    # SSA begins for if statement (line 816)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 817):
    
    # Assigning a Call to a Name (line 817):
    
    # Call to reshape(...): (line 817)
    # Processing the call arguments (line 817)
    int_195103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 817, 22), 'int')
    int_195104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 817, 26), 'int')
    # Processing the call keyword arguments (line 817)
    kwargs_195105 = {}
    # Getting the type of 'b' (line 817)
    b_195101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 12), 'b', False)
    # Obtaining the member 'reshape' of a type (line 817)
    reshape_195102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 12), b_195101, 'reshape')
    # Calling reshape(args, kwargs) (line 817)
    reshape_call_result_195106 = invoke(stypy.reporting.localization.Localization(__file__, 817, 12), reshape_195102, *[int_195103, int_195104], **kwargs_195105)
    
    # Assigning a type to the variable 'b' (line 817)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 817, 8), 'b', reshape_call_result_195106)
    
    # Assigning a Call to a Name (line 818):
    
    # Assigning a Call to a Name (line 818):
    
    # Call to tocsc(...): (line 818)
    # Processing the call keyword arguments (line 818)
    kwargs_195109 = {}
    # Getting the type of 'A' (line 818)
    A_195107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 12), 'A', False)
    # Obtaining the member 'tocsc' of a type (line 818)
    tocsc_195108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 12), A_195107, 'tocsc')
    # Calling tocsc(args, kwargs) (line 818)
    tocsc_call_result_195110 = invoke(stypy.reporting.localization.Localization(__file__, 818, 12), tocsc_195108, *[], **kwargs_195109)
    
    # Assigning a type to the variable 'A' (line 818)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 8), 'A', tocsc_call_result_195110)
    
    # Getting the type of 'b' (line 819)
    b_195111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 8), 'b')
    
    # Call to sum(...): (line 819)
    # Processing the call keyword arguments (line 819)
    int_195124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 819, 60), 'int')
    keyword_195125 = int_195124
    kwargs_195126 = {'axis': keyword_195125}
    
    # Obtaining the type of the subscript
    slice_195112 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 819, 14), None, None, None)
    # Getting the type of 'i_shift' (line 819)
    i_shift_195113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 19), 'i_shift', False)
    # Getting the type of 'A' (line 819)
    A_195114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 14), 'A', False)
    # Obtaining the member '__getitem__' of a type (line 819)
    getitem___195115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 14), A_195114, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 819)
    subscript_call_result_195116 = invoke(stypy.reporting.localization.Localization(__file__, 819, 14), getitem___195115, (slice_195112, i_shift_195113))
    
    
    # Call to diags(...): (line 819)
    # Processing the call arguments (line 819)
    # Getting the type of 'lb_shift' (line 819)
    lb_shift_195119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 40), 'lb_shift', False)
    # Processing the call keyword arguments (line 819)
    kwargs_195120 = {}
    # Getting the type of 'sps' (line 819)
    sps_195117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 30), 'sps', False)
    # Obtaining the member 'diags' of a type (line 819)
    diags_195118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 30), sps_195117, 'diags')
    # Calling diags(args, kwargs) (line 819)
    diags_call_result_195121 = invoke(stypy.reporting.localization.Localization(__file__, 819, 30), diags_195118, *[lb_shift_195119], **kwargs_195120)
    
    # Applying the binary operator '*' (line 819)
    result_mul_195122 = python_operator(stypy.reporting.localization.Localization(__file__, 819, 14), '*', subscript_call_result_195116, diags_call_result_195121)
    
    # Obtaining the member 'sum' of a type (line 819)
    sum_195123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 14), result_mul_195122, 'sum')
    # Calling sum(args, kwargs) (line 819)
    sum_call_result_195127 = invoke(stypy.reporting.localization.Localization(__file__, 819, 14), sum_195123, *[], **kwargs_195126)
    
    # Applying the binary operator '-=' (line 819)
    result_isub_195128 = python_operator(stypy.reporting.localization.Localization(__file__, 819, 8), '-=', b_195111, sum_call_result_195127)
    # Assigning a type to the variable 'b' (line 819)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 819, 8), 'b', result_isub_195128)
    
    
    # Assigning a Call to a Name (line 820):
    
    # Assigning a Call to a Name (line 820):
    
    # Call to ravel(...): (line 820)
    # Processing the call keyword arguments (line 820)
    kwargs_195131 = {}
    # Getting the type of 'b' (line 820)
    b_195129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 12), 'b', False)
    # Obtaining the member 'ravel' of a type (line 820)
    ravel_195130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 12), b_195129, 'ravel')
    # Calling ravel(args, kwargs) (line 820)
    ravel_call_result_195132 = invoke(stypy.reporting.localization.Localization(__file__, 820, 12), ravel_195130, *[], **kwargs_195131)
    
    # Assigning a type to the variable 'b' (line 820)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'b', ravel_call_result_195132)
    # SSA branch for the else part of an if statement (line 816)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'b' (line 822)
    b_195133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'b')
    
    # Call to sum(...): (line 822)
    # Processing the call keyword arguments (line 822)
    int_195142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 49), 'int')
    keyword_195143 = int_195142
    kwargs_195144 = {'axis': keyword_195143}
    
    # Obtaining the type of the subscript
    slice_195134 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 822, 14), None, None, None)
    # Getting the type of 'i_shift' (line 822)
    i_shift_195135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 19), 'i_shift', False)
    # Getting the type of 'A' (line 822)
    A_195136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 14), 'A', False)
    # Obtaining the member '__getitem__' of a type (line 822)
    getitem___195137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 14), A_195136, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 822)
    subscript_call_result_195138 = invoke(stypy.reporting.localization.Localization(__file__, 822, 14), getitem___195137, (slice_195134, i_shift_195135))
    
    # Getting the type of 'lb_shift' (line 822)
    lb_shift_195139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 30), 'lb_shift', False)
    # Applying the binary operator '*' (line 822)
    result_mul_195140 = python_operator(stypy.reporting.localization.Localization(__file__, 822, 14), '*', subscript_call_result_195138, lb_shift_195139)
    
    # Obtaining the member 'sum' of a type (line 822)
    sum_195141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 14), result_mul_195140, 'sum')
    # Calling sum(args, kwargs) (line 822)
    sum_call_result_195145 = invoke(stypy.reporting.localization.Localization(__file__, 822, 14), sum_195141, *[], **kwargs_195144)
    
    # Applying the binary operator '-=' (line 822)
    result_isub_195146 = python_operator(stypy.reporting.localization.Localization(__file__, 822, 8), '-=', b_195133, sum_call_result_195145)
    # Assigning a type to the variable 'b' (line 822)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'b', result_isub_195146)
    
    # SSA join for if statement (line 816)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 824)
    tuple_195147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 824, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 824)
    # Adding element type (line 824)
    # Getting the type of 'A' (line 824)
    A_195148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 11), 'A')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 824, 11), tuple_195147, A_195148)
    # Adding element type (line 824)
    # Getting the type of 'b' (line 824)
    b_195149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 14), 'b')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 824, 11), tuple_195147, b_195149)
    # Adding element type (line 824)
    # Getting the type of 'c' (line 824)
    c_195150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 17), 'c')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 824, 11), tuple_195147, c_195150)
    # Adding element type (line 824)
    # Getting the type of 'c0' (line 824)
    c0_195151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 20), 'c0')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 824, 11), tuple_195147, c0_195151)
    
    # Assigning a type to the variable 'stypy_return_type' (line 824)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 824, 4), 'stypy_return_type', tuple_195147)
    
    # ################# End of '_get_Abc(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_Abc' in the type store
    # Getting the type of 'stypy_return_type' (line 643)
    stypy_return_type_195152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_195152)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_Abc'
    return stypy_return_type_195152

# Assigning a type to the variable '_get_Abc' (line 643)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 643, 0), '_get_Abc', _get_Abc)

@norecursion
def _postprocess(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 830)
    None_195153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 13), 'None')
    # Getting the type of 'None' (line 831)
    None_195154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 13), 'None')
    # Getting the type of 'None' (line 832)
    None_195155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 13), 'None')
    # Getting the type of 'None' (line 833)
    None_195156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 13), 'None')
    # Getting the type of 'None' (line 834)
    None_195157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 15), 'None')
    # Getting the type of 'False' (line 835)
    False_195158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 17), 'False')
    
    # Obtaining an instance of the builtin type 'list' (line 836)
    list_195159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 836, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 836)
    
    int_195160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 837, 15), 'int')
    str_195161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 838, 16), 'str', '')
    defaults = [None_195153, None_195154, None_195155, None_195156, None_195157, False_195158, list_195159, int_195160, str_195161]
    # Create a new context for function '_postprocess'
    module_type_store = module_type_store.open_function_context('_postprocess', 827, 0, False)
    
    # Passed parameters checking function
    _postprocess.stypy_localization = localization
    _postprocess.stypy_type_of_self = None
    _postprocess.stypy_type_store = module_type_store
    _postprocess.stypy_function_name = '_postprocess'
    _postprocess.stypy_param_names_list = ['x', 'c', 'A_ub', 'b_ub', 'A_eq', 'b_eq', 'bounds', 'complete', 'undo', 'status', 'message']
    _postprocess.stypy_varargs_param_name = None
    _postprocess.stypy_kwargs_param_name = None
    _postprocess.stypy_call_defaults = defaults
    _postprocess.stypy_call_varargs = varargs
    _postprocess.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_postprocess', ['x', 'c', 'A_ub', 'b_ub', 'A_eq', 'b_eq', 'bounds', 'complete', 'undo', 'status', 'message'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_postprocess', localization, ['x', 'c', 'A_ub', 'b_ub', 'A_eq', 'b_eq', 'bounds', 'complete', 'undo', 'status', 'message'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_postprocess(...)' code ##################

    str_195162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 903, (-1)), 'str', '\n    Given solution x to presolved, standard form linear program x, add\n    fixed variables back into the problem and undo the variable substitutions\n    to get solution to original linear program. Also, calculate the objective\n    function value, slack in original upper bound constraints, and residuals\n    in original equality constraints.\n\n    Parameters\n    ----------\n    x : 1-D array\n        Solution vector to the standard-form problem.\n    c : 1-D array\n        Original coefficients of the linear objective function to be minimized.\n    A_ub : 2-D array\n        Original upper bound constraint matrix.\n    b_ub : 1-D array\n        Original upper bound constraint vector.\n    A_eq : 2-D array\n        Original equality constraint matrix.\n    b_eq : 1-D array\n        Original equality constraint vector.\n    bounds : sequence of tuples\n        Bounds, as modified in presolve\n    complete : bool\n        Whether the solution is was determined in presolve (``True`` if so)\n    undo: list of tuples\n        (`index`, `value`) pairs that record the original index and fixed value\n        for each variable removed from the problem\n    status : int\n        An integer representing the exit status of the optimization::\n\n             0 : Optimization terminated successfully\n             1 : Iteration limit reached\n             2 : Problem appears to be infeasible\n             3 : Problem appears to be unbounded\n             4 : Serious numerical difficulties encountered\n\n    message : str\n        A string descriptor of the exit status of the optimization.\n\n    Returns\n    -------\n    x : 1-D array\n        Solution vector to original linear programming problem\n    fun: float\n        optimal objective value for original problem\n    slack: 1-D array\n        The (non-negative) slack in the upper bound constraints, that is,\n        ``b_ub - A_ub * x``\n    con : 1-D array\n        The (nominally zero) residuals of the equality constraints, that is,\n        ``b - A_eq * x``\n    status : int\n        An integer representing the exit status of the optimization::\n\n             0 : Optimization terminated successfully\n             1 : Iteration limit reached\n             2 : Problem appears to be infeasible\n             3 : Problem appears to be unbounded\n             4 : Serious numerical difficulties encountered\n\n    message : str\n        A string descriptor of the exit status of the optimization.\n\n    ')
    
    # Assigning a Call to a Name (line 911):
    
    # Assigning a Call to a Name (line 911):
    
    # Call to len(...): (line 911)
    # Processing the call arguments (line 911)
    # Getting the type of 'c' (line 911)
    c_195164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 14), 'c', False)
    # Processing the call keyword arguments (line 911)
    kwargs_195165 = {}
    # Getting the type of 'len' (line 911)
    len_195163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 10), 'len', False)
    # Calling len(args, kwargs) (line 911)
    len_call_result_195166 = invoke(stypy.reporting.localization.Localization(__file__, 911, 10), len_195163, *[c_195164], **kwargs_195165)
    
    # Assigning a type to the variable 'n_x' (line 911)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 911, 4), 'n_x', len_call_result_195166)
    
    # Assigning a Call to a Name (line 915):
    
    # Assigning a Call to a Name (line 915):
    
    # Call to set(...): (line 915)
    # Processing the call keyword arguments (line 915)
    kwargs_195168 = {}
    # Getting the type of 'set' (line 915)
    set_195167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 16), 'set', False)
    # Calling set(args, kwargs) (line 915)
    set_call_result_195169 = invoke(stypy.reporting.localization.Localization(__file__, 915, 16), set_195167, *[], **kwargs_195168)
    
    # Assigning a type to the variable 'no_adjust' (line 915)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 915, 4), 'no_adjust', set_call_result_195169)
    
    
    
    # Call to len(...): (line 919)
    # Processing the call arguments (line 919)
    # Getting the type of 'undo' (line 919)
    undo_195171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 11), 'undo', False)
    # Processing the call keyword arguments (line 919)
    kwargs_195172 = {}
    # Getting the type of 'len' (line 919)
    len_195170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 7), 'len', False)
    # Calling len(args, kwargs) (line 919)
    len_call_result_195173 = invoke(stypy.reporting.localization.Localization(__file__, 919, 7), len_195170, *[undo_195171], **kwargs_195172)
    
    int_195174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 919, 19), 'int')
    # Applying the binary operator '>' (line 919)
    result_gt_195175 = python_operator(stypy.reporting.localization.Localization(__file__, 919, 7), '>', len_call_result_195173, int_195174)
    
    # Testing the type of an if condition (line 919)
    if_condition_195176 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 919, 4), result_gt_195175)
    # Assigning a type to the variable 'if_condition_195176' (line 919)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 919, 4), 'if_condition_195176', if_condition_195176)
    # SSA begins for if statement (line 919)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 920):
    
    # Assigning a Call to a Name (line 920):
    
    # Call to set(...): (line 920)
    # Processing the call arguments (line 920)
    
    # Obtaining the type of the subscript
    int_195178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 920, 29), 'int')
    # Getting the type of 'undo' (line 920)
    undo_195179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 24), 'undo', False)
    # Obtaining the member '__getitem__' of a type (line 920)
    getitem___195180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 920, 24), undo_195179, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 920)
    subscript_call_result_195181 = invoke(stypy.reporting.localization.Localization(__file__, 920, 24), getitem___195180, int_195178)
    
    # Processing the call keyword arguments (line 920)
    kwargs_195182 = {}
    # Getting the type of 'set' (line 920)
    set_195177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 20), 'set', False)
    # Calling set(args, kwargs) (line 920)
    set_call_result_195183 = invoke(stypy.reporting.localization.Localization(__file__, 920, 20), set_195177, *[subscript_call_result_195181], **kwargs_195182)
    
    # Assigning a type to the variable 'no_adjust' (line 920)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 8), 'no_adjust', set_call_result_195183)
    
    # Assigning a Call to a Name (line 921):
    
    # Assigning a Call to a Name (line 921):
    
    # Call to tolist(...): (line 921)
    # Processing the call keyword arguments (line 921)
    kwargs_195186 = {}
    # Getting the type of 'x' (line 921)
    x_195184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 12), 'x', False)
    # Obtaining the member 'tolist' of a type (line 921)
    tolist_195185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 921, 12), x_195184, 'tolist')
    # Calling tolist(args, kwargs) (line 921)
    tolist_call_result_195187 = invoke(stypy.reporting.localization.Localization(__file__, 921, 12), tolist_195185, *[], **kwargs_195186)
    
    # Assigning a type to the variable 'x' (line 921)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 921, 8), 'x', tolist_call_result_195187)
    
    
    # Call to zip(...): (line 922)
    # Processing the call arguments (line 922)
    
    # Obtaining the type of the subscript
    int_195189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 922, 31), 'int')
    # Getting the type of 'undo' (line 922)
    undo_195190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 26), 'undo', False)
    # Obtaining the member '__getitem__' of a type (line 922)
    getitem___195191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 922, 26), undo_195190, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 922)
    subscript_call_result_195192 = invoke(stypy.reporting.localization.Localization(__file__, 922, 26), getitem___195191, int_195189)
    
    
    # Obtaining the type of the subscript
    int_195193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 922, 40), 'int')
    # Getting the type of 'undo' (line 922)
    undo_195194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 35), 'undo', False)
    # Obtaining the member '__getitem__' of a type (line 922)
    getitem___195195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 922, 35), undo_195194, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 922)
    subscript_call_result_195196 = invoke(stypy.reporting.localization.Localization(__file__, 922, 35), getitem___195195, int_195193)
    
    # Processing the call keyword arguments (line 922)
    kwargs_195197 = {}
    # Getting the type of 'zip' (line 922)
    zip_195188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 22), 'zip', False)
    # Calling zip(args, kwargs) (line 922)
    zip_call_result_195198 = invoke(stypy.reporting.localization.Localization(__file__, 922, 22), zip_195188, *[subscript_call_result_195192, subscript_call_result_195196], **kwargs_195197)
    
    # Testing the type of a for loop iterable (line 922)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 922, 8), zip_call_result_195198)
    # Getting the type of the for loop variable (line 922)
    for_loop_var_195199 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 922, 8), zip_call_result_195198)
    # Assigning a type to the variable 'i' (line 922)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 922, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 922, 8), for_loop_var_195199))
    # Assigning a type to the variable 'val' (line 922)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 922, 8), 'val', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 922, 8), for_loop_var_195199))
    # SSA begins for a for statement (line 922)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to insert(...): (line 923)
    # Processing the call arguments (line 923)
    # Getting the type of 'i' (line 923)
    i_195202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 21), 'i', False)
    # Getting the type of 'val' (line 923)
    val_195203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 24), 'val', False)
    # Processing the call keyword arguments (line 923)
    kwargs_195204 = {}
    # Getting the type of 'x' (line 923)
    x_195200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 12), 'x', False)
    # Obtaining the member 'insert' of a type (line 923)
    insert_195201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 923, 12), x_195200, 'insert')
    # Calling insert(args, kwargs) (line 923)
    insert_call_result_195205 = invoke(stypy.reporting.localization.Localization(__file__, 923, 12), insert_195201, *[i_195202, val_195203], **kwargs_195204)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 924):
    
    # Assigning a Call to a Name (line 924):
    
    # Call to array(...): (line 924)
    # Processing the call arguments (line 924)
    # Getting the type of 'x' (line 924)
    x_195208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 21), 'x', False)
    # Processing the call keyword arguments (line 924)
    kwargs_195209 = {}
    # Getting the type of 'np' (line 924)
    np_195206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 12), 'np', False)
    # Obtaining the member 'array' of a type (line 924)
    array_195207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 12), np_195206, 'array')
    # Calling array(args, kwargs) (line 924)
    array_call_result_195210 = invoke(stypy.reporting.localization.Localization(__file__, 924, 12), array_195207, *[x_195208], **kwargs_195209)
    
    # Assigning a type to the variable 'x' (line 924)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 8), 'x', array_call_result_195210)
    # SSA join for if statement (line 919)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'complete' (line 928)
    complete_195211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 11), 'complete')
    # Applying the 'not' unary operator (line 928)
    result_not__195212 = python_operator(stypy.reporting.localization.Localization(__file__, 928, 7), 'not', complete_195211)
    
    
    # Getting the type of 'bounds' (line 928)
    bounds_195213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 24), 'bounds')
    # Getting the type of 'None' (line 928)
    None_195214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 38), 'None')
    # Applying the binary operator 'isnot' (line 928)
    result_is_not_195215 = python_operator(stypy.reporting.localization.Localization(__file__, 928, 24), 'isnot', bounds_195213, None_195214)
    
    # Applying the binary operator 'and' (line 928)
    result_and_keyword_195216 = python_operator(stypy.reporting.localization.Localization(__file__, 928, 7), 'and', result_not__195212, result_is_not_195215)
    
    # Testing the type of an if condition (line 928)
    if_condition_195217 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 928, 4), result_and_keyword_195216)
    # Assigning a type to the variable 'if_condition_195217' (line 928)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 928, 4), 'if_condition_195217', if_condition_195217)
    # SSA begins for if statement (line 928)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 929):
    
    # Assigning a Num to a Name (line 929):
    int_195218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 929, 22), 'int')
    # Assigning a type to the variable 'n_unbounded' (line 929)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 8), 'n_unbounded', int_195218)
    
    
    # Call to enumerate(...): (line 930)
    # Processing the call arguments (line 930)
    # Getting the type of 'bounds' (line 930)
    bounds_195220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 30), 'bounds', False)
    # Processing the call keyword arguments (line 930)
    kwargs_195221 = {}
    # Getting the type of 'enumerate' (line 930)
    enumerate_195219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 20), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 930)
    enumerate_call_result_195222 = invoke(stypy.reporting.localization.Localization(__file__, 930, 20), enumerate_195219, *[bounds_195220], **kwargs_195221)
    
    # Testing the type of a for loop iterable (line 930)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 930, 8), enumerate_call_result_195222)
    # Getting the type of the for loop variable (line 930)
    for_loop_var_195223 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 930, 8), enumerate_call_result_195222)
    # Assigning a type to the variable 'i' (line 930)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 930, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 930, 8), for_loop_var_195223))
    # Assigning a type to the variable 'b' (line 930)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 930, 8), 'b', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 930, 8), for_loop_var_195223))
    # SSA begins for a for statement (line 930)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'i' (line 931)
    i_195224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 15), 'i')
    # Getting the type of 'no_adjust' (line 931)
    no_adjust_195225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 20), 'no_adjust')
    # Applying the binary operator 'in' (line 931)
    result_contains_195226 = python_operator(stypy.reporting.localization.Localization(__file__, 931, 15), 'in', i_195224, no_adjust_195225)
    
    # Testing the type of an if condition (line 931)
    if_condition_195227 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 931, 12), result_contains_195226)
    # Assigning a type to the variable 'if_condition_195227' (line 931)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 931, 12), 'if_condition_195227', if_condition_195227)
    # SSA begins for if statement (line 931)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 931)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Tuple (line 933):
    
    # Assigning a Subscript to a Name (line 933):
    
    # Obtaining the type of the subscript
    int_195228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 933, 12), 'int')
    # Getting the type of 'b' (line 933)
    b_195229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 21), 'b')
    # Obtaining the member '__getitem__' of a type (line 933)
    getitem___195230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 933, 12), b_195229, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 933)
    subscript_call_result_195231 = invoke(stypy.reporting.localization.Localization(__file__, 933, 12), getitem___195230, int_195228)
    
    # Assigning a type to the variable 'tuple_var_assignment_192577' (line 933)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 12), 'tuple_var_assignment_192577', subscript_call_result_195231)
    
    # Assigning a Subscript to a Name (line 933):
    
    # Obtaining the type of the subscript
    int_195232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 933, 12), 'int')
    # Getting the type of 'b' (line 933)
    b_195233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 21), 'b')
    # Obtaining the member '__getitem__' of a type (line 933)
    getitem___195234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 933, 12), b_195233, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 933)
    subscript_call_result_195235 = invoke(stypy.reporting.localization.Localization(__file__, 933, 12), getitem___195234, int_195232)
    
    # Assigning a type to the variable 'tuple_var_assignment_192578' (line 933)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 12), 'tuple_var_assignment_192578', subscript_call_result_195235)
    
    # Assigning a Name to a Name (line 933):
    # Getting the type of 'tuple_var_assignment_192577' (line 933)
    tuple_var_assignment_192577_195236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 12), 'tuple_var_assignment_192577')
    # Assigning a type to the variable 'lb' (line 933)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 12), 'lb', tuple_var_assignment_192577_195236)
    
    # Assigning a Name to a Name (line 933):
    # Getting the type of 'tuple_var_assignment_192578' (line 933)
    tuple_var_assignment_192578_195237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 12), 'tuple_var_assignment_192578')
    # Assigning a type to the variable 'ub' (line 933)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 16), 'ub', tuple_var_assignment_192578_195237)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'lb' (line 934)
    lb_195238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 15), 'lb')
    # Getting the type of 'None' (line 934)
    None_195239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 21), 'None')
    # Applying the binary operator 'is' (line 934)
    result_is__195240 = python_operator(stypy.reporting.localization.Localization(__file__, 934, 15), 'is', lb_195238, None_195239)
    
    
    # Getting the type of 'ub' (line 934)
    ub_195241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 30), 'ub')
    # Getting the type of 'None' (line 934)
    None_195242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 36), 'None')
    # Applying the binary operator 'is' (line 934)
    result_is__195243 = python_operator(stypy.reporting.localization.Localization(__file__, 934, 30), 'is', ub_195241, None_195242)
    
    # Applying the binary operator 'and' (line 934)
    result_and_keyword_195244 = python_operator(stypy.reporting.localization.Localization(__file__, 934, 15), 'and', result_is__195240, result_is__195243)
    
    # Testing the type of an if condition (line 934)
    if_condition_195245 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 934, 12), result_and_keyword_195244)
    # Assigning a type to the variable 'if_condition_195245' (line 934)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 934, 12), 'if_condition_195245', if_condition_195245)
    # SSA begins for if statement (line 934)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'n_unbounded' (line 935)
    n_unbounded_195246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 16), 'n_unbounded')
    int_195247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 935, 31), 'int')
    # Applying the binary operator '+=' (line 935)
    result_iadd_195248 = python_operator(stypy.reporting.localization.Localization(__file__, 935, 16), '+=', n_unbounded_195246, int_195247)
    # Assigning a type to the variable 'n_unbounded' (line 935)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 935, 16), 'n_unbounded', result_iadd_195248)
    
    
    # Assigning a BinOp to a Subscript (line 936):
    
    # Assigning a BinOp to a Subscript (line 936):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 936)
    i_195249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 25), 'i')
    # Getting the type of 'x' (line 936)
    x_195250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 23), 'x')
    # Obtaining the member '__getitem__' of a type (line 936)
    getitem___195251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 936, 23), x_195250, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 936)
    subscript_call_result_195252 = invoke(stypy.reporting.localization.Localization(__file__, 936, 23), getitem___195251, i_195249)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'n_x' (line 936)
    n_x_195253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 32), 'n_x')
    # Getting the type of 'n_unbounded' (line 936)
    n_unbounded_195254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 38), 'n_unbounded')
    # Applying the binary operator '+' (line 936)
    result_add_195255 = python_operator(stypy.reporting.localization.Localization(__file__, 936, 32), '+', n_x_195253, n_unbounded_195254)
    
    int_195256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 936, 52), 'int')
    # Applying the binary operator '-' (line 936)
    result_sub_195257 = python_operator(stypy.reporting.localization.Localization(__file__, 936, 50), '-', result_add_195255, int_195256)
    
    # Getting the type of 'x' (line 936)
    x_195258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 30), 'x')
    # Obtaining the member '__getitem__' of a type (line 936)
    getitem___195259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 936, 30), x_195258, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 936)
    subscript_call_result_195260 = invoke(stypy.reporting.localization.Localization(__file__, 936, 30), getitem___195259, result_sub_195257)
    
    # Applying the binary operator '-' (line 936)
    result_sub_195261 = python_operator(stypy.reporting.localization.Localization(__file__, 936, 23), '-', subscript_call_result_195252, subscript_call_result_195260)
    
    # Getting the type of 'x' (line 936)
    x_195262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 16), 'x')
    # Getting the type of 'i' (line 936)
    i_195263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 18), 'i')
    # Storing an element on a container (line 936)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 936, 16), x_195262, (i_195263, result_sub_195261))
    # SSA branch for the else part of an if statement (line 934)
    module_type_store.open_ssa_branch('else')
    
    # Type idiom detected: calculating its left and rigth part (line 938)
    # Getting the type of 'lb' (line 938)
    lb_195264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 19), 'lb')
    # Getting the type of 'None' (line 938)
    None_195265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 25), 'None')
    
    (may_be_195266, more_types_in_union_195267) = may_be_none(lb_195264, None_195265)

    if may_be_195266:

        if more_types_in_union_195267:
            # Runtime conditional SSA (line 938)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BinOp to a Subscript (line 939):
        
        # Assigning a BinOp to a Subscript (line 939):
        # Getting the type of 'ub' (line 939)
        ub_195268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 27), 'ub')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 939)
        i_195269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 34), 'i')
        # Getting the type of 'x' (line 939)
        x_195270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 32), 'x')
        # Obtaining the member '__getitem__' of a type (line 939)
        getitem___195271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 939, 32), x_195270, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 939)
        subscript_call_result_195272 = invoke(stypy.reporting.localization.Localization(__file__, 939, 32), getitem___195271, i_195269)
        
        # Applying the binary operator '-' (line 939)
        result_sub_195273 = python_operator(stypy.reporting.localization.Localization(__file__, 939, 27), '-', ub_195268, subscript_call_result_195272)
        
        # Getting the type of 'x' (line 939)
        x_195274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 20), 'x')
        # Getting the type of 'i' (line 939)
        i_195275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 22), 'i')
        # Storing an element on a container (line 939)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 939, 20), x_195274, (i_195275, result_sub_195273))

        if more_types_in_union_195267:
            # Runtime conditional SSA for else branch (line 938)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_195266) or more_types_in_union_195267):
        
        # Getting the type of 'x' (line 941)
        x_195276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 20), 'x')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 941)
        i_195277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 22), 'i')
        # Getting the type of 'x' (line 941)
        x_195278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 20), 'x')
        # Obtaining the member '__getitem__' of a type (line 941)
        getitem___195279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 941, 20), x_195278, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 941)
        subscript_call_result_195280 = invoke(stypy.reporting.localization.Localization(__file__, 941, 20), getitem___195279, i_195277)
        
        # Getting the type of 'lb' (line 941)
        lb_195281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 28), 'lb')
        # Applying the binary operator '+=' (line 941)
        result_iadd_195282 = python_operator(stypy.reporting.localization.Localization(__file__, 941, 20), '+=', subscript_call_result_195280, lb_195281)
        # Getting the type of 'x' (line 941)
        x_195283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 20), 'x')
        # Getting the type of 'i' (line 941)
        i_195284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 22), 'i')
        # Storing an element on a container (line 941)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 941, 20), x_195283, (i_195284, result_iadd_195282))
        

        if (may_be_195266 and more_types_in_union_195267):
            # SSA join for if statement (line 938)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 934)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 928)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 943):
    
    # Assigning a Call to a Name (line 943):
    
    # Call to len(...): (line 943)
    # Processing the call arguments (line 943)
    # Getting the type of 'c' (line 943)
    c_195286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 14), 'c', False)
    # Processing the call keyword arguments (line 943)
    kwargs_195287 = {}
    # Getting the type of 'len' (line 943)
    len_195285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 10), 'len', False)
    # Calling len(args, kwargs) (line 943)
    len_call_result_195288 = invoke(stypy.reporting.localization.Localization(__file__, 943, 10), len_195285, *[c_195286], **kwargs_195287)
    
    # Assigning a type to the variable 'n_x' (line 943)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 943, 4), 'n_x', len_call_result_195288)
    
    # Assigning a Subscript to a Name (line 944):
    
    # Assigning a Subscript to a Name (line 944):
    
    # Obtaining the type of the subscript
    # Getting the type of 'n_x' (line 944)
    n_x_195289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 11), 'n_x')
    slice_195290 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 944, 8), None, n_x_195289, None)
    # Getting the type of 'x' (line 944)
    x_195291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 8), 'x')
    # Obtaining the member '__getitem__' of a type (line 944)
    getitem___195292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 944, 8), x_195291, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 944)
    subscript_call_result_195293 = invoke(stypy.reporting.localization.Localization(__file__, 944, 8), getitem___195292, slice_195290)
    
    # Assigning a type to the variable 'x' (line 944)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 944, 4), 'x', subscript_call_result_195293)
    
    # Assigning a Call to a Name (line 945):
    
    # Assigning a Call to a Name (line 945):
    
    # Call to dot(...): (line 945)
    # Processing the call arguments (line 945)
    # Getting the type of 'c' (line 945)
    c_195296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 16), 'c', False)
    # Processing the call keyword arguments (line 945)
    kwargs_195297 = {}
    # Getting the type of 'x' (line 945)
    x_195294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 10), 'x', False)
    # Obtaining the member 'dot' of a type (line 945)
    dot_195295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 945, 10), x_195294, 'dot')
    # Calling dot(args, kwargs) (line 945)
    dot_call_result_195298 = invoke(stypy.reporting.localization.Localization(__file__, 945, 10), dot_195295, *[c_195296], **kwargs_195297)
    
    # Assigning a type to the variable 'fun' (line 945)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 945, 4), 'fun', dot_call_result_195298)
    
    # Assigning a BinOp to a Name (line 946):
    
    # Assigning a BinOp to a Name (line 946):
    # Getting the type of 'b_ub' (line 946)
    b_ub_195299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 12), 'b_ub')
    
    # Call to dot(...): (line 946)
    # Processing the call arguments (line 946)
    # Getting the type of 'x' (line 946)
    x_195302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 28), 'x', False)
    # Processing the call keyword arguments (line 946)
    kwargs_195303 = {}
    # Getting the type of 'A_ub' (line 946)
    A_ub_195300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 19), 'A_ub', False)
    # Obtaining the member 'dot' of a type (line 946)
    dot_195301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 946, 19), A_ub_195300, 'dot')
    # Calling dot(args, kwargs) (line 946)
    dot_call_result_195304 = invoke(stypy.reporting.localization.Localization(__file__, 946, 19), dot_195301, *[x_195302], **kwargs_195303)
    
    # Applying the binary operator '-' (line 946)
    result_sub_195305 = python_operator(stypy.reporting.localization.Localization(__file__, 946, 12), '-', b_ub_195299, dot_call_result_195304)
    
    # Assigning a type to the variable 'slack' (line 946)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 946, 4), 'slack', result_sub_195305)
    
    # Assigning a BinOp to a Name (line 948):
    
    # Assigning a BinOp to a Name (line 948):
    # Getting the type of 'b_eq' (line 948)
    b_eq_195306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 10), 'b_eq')
    
    # Call to dot(...): (line 948)
    # Processing the call arguments (line 948)
    # Getting the type of 'x' (line 948)
    x_195309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 26), 'x', False)
    # Processing the call keyword arguments (line 948)
    kwargs_195310 = {}
    # Getting the type of 'A_eq' (line 948)
    A_eq_195307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 17), 'A_eq', False)
    # Obtaining the member 'dot' of a type (line 948)
    dot_195308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 948, 17), A_eq_195307, 'dot')
    # Calling dot(args, kwargs) (line 948)
    dot_call_result_195311 = invoke(stypy.reporting.localization.Localization(__file__, 948, 17), dot_195308, *[x_195309], **kwargs_195310)
    
    # Applying the binary operator '-' (line 948)
    result_sub_195312 = python_operator(stypy.reporting.localization.Localization(__file__, 948, 10), '-', b_eq_195306, dot_call_result_195311)
    
    # Assigning a type to the variable 'con' (line 948)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 948, 4), 'con', result_sub_195312)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'status' (line 950)
    status_195313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 7), 'status')
    int_195314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 950, 17), 'int')
    # Applying the binary operator '==' (line 950)
    result_eq_195315 = python_operator(stypy.reporting.localization.Localization(__file__, 950, 7), '==', status_195313, int_195314)
    
    
    # Evaluating a boolean operation
    
    # Call to any(...): (line 950)
    # Processing the call keyword arguments (line 950)
    kwargs_195322 = {}
    
    # Call to isnan(...): (line 950)
    # Processing the call arguments (line 950)
    # Getting the type of 'x' (line 950)
    x_195318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 33), 'x', False)
    # Processing the call keyword arguments (line 950)
    kwargs_195319 = {}
    # Getting the type of 'np' (line 950)
    np_195316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 24), 'np', False)
    # Obtaining the member 'isnan' of a type (line 950)
    isnan_195317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 24), np_195316, 'isnan')
    # Calling isnan(args, kwargs) (line 950)
    isnan_call_result_195320 = invoke(stypy.reporting.localization.Localization(__file__, 950, 24), isnan_195317, *[x_195318], **kwargs_195319)
    
    # Obtaining the member 'any' of a type (line 950)
    any_195321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 24), isnan_call_result_195320, 'any')
    # Calling any(args, kwargs) (line 950)
    any_call_result_195323 = invoke(stypy.reporting.localization.Localization(__file__, 950, 24), any_195321, *[], **kwargs_195322)
    
    
    # Call to isnan(...): (line 950)
    # Processing the call arguments (line 950)
    # Getting the type of 'fun' (line 950)
    fun_195326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 54), 'fun', False)
    # Processing the call keyword arguments (line 950)
    kwargs_195327 = {}
    # Getting the type of 'np' (line 950)
    np_195324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 45), 'np', False)
    # Obtaining the member 'isnan' of a type (line 950)
    isnan_195325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 45), np_195324, 'isnan')
    # Calling isnan(args, kwargs) (line 950)
    isnan_call_result_195328 = invoke(stypy.reporting.localization.Localization(__file__, 950, 45), isnan_195325, *[fun_195326], **kwargs_195327)
    
    # Applying the binary operator 'or' (line 950)
    result_or_keyword_195329 = python_operator(stypy.reporting.localization.Localization(__file__, 950, 24), 'or', any_call_result_195323, isnan_call_result_195328)
    
    # Call to any(...): (line 951)
    # Processing the call keyword arguments (line 951)
    kwargs_195336 = {}
    
    # Call to isnan(...): (line 951)
    # Processing the call arguments (line 951)
    # Getting the type of 'slack' (line 951)
    slack_195332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 33), 'slack', False)
    # Processing the call keyword arguments (line 951)
    kwargs_195333 = {}
    # Getting the type of 'np' (line 951)
    np_195330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 24), 'np', False)
    # Obtaining the member 'isnan' of a type (line 951)
    isnan_195331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 951, 24), np_195330, 'isnan')
    # Calling isnan(args, kwargs) (line 951)
    isnan_call_result_195334 = invoke(stypy.reporting.localization.Localization(__file__, 951, 24), isnan_195331, *[slack_195332], **kwargs_195333)
    
    # Obtaining the member 'any' of a type (line 951)
    any_195335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 951, 24), isnan_call_result_195334, 'any')
    # Calling any(args, kwargs) (line 951)
    any_call_result_195337 = invoke(stypy.reporting.localization.Localization(__file__, 951, 24), any_195335, *[], **kwargs_195336)
    
    # Applying the binary operator 'or' (line 950)
    result_or_keyword_195338 = python_operator(stypy.reporting.localization.Localization(__file__, 950, 24), 'or', result_or_keyword_195329, any_call_result_195337)
    
    # Call to any(...): (line 951)
    # Processing the call keyword arguments (line 951)
    kwargs_195345 = {}
    
    # Call to isnan(...): (line 951)
    # Processing the call arguments (line 951)
    # Getting the type of 'con' (line 951)
    con_195341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 58), 'con', False)
    # Processing the call keyword arguments (line 951)
    kwargs_195342 = {}
    # Getting the type of 'np' (line 951)
    np_195339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 49), 'np', False)
    # Obtaining the member 'isnan' of a type (line 951)
    isnan_195340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 951, 49), np_195339, 'isnan')
    # Calling isnan(args, kwargs) (line 951)
    isnan_call_result_195343 = invoke(stypy.reporting.localization.Localization(__file__, 951, 49), isnan_195340, *[con_195341], **kwargs_195342)
    
    # Obtaining the member 'any' of a type (line 951)
    any_195344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 951, 49), isnan_call_result_195343, 'any')
    # Calling any(args, kwargs) (line 951)
    any_call_result_195346 = invoke(stypy.reporting.localization.Localization(__file__, 951, 49), any_195344, *[], **kwargs_195345)
    
    # Applying the binary operator 'or' (line 950)
    result_or_keyword_195347 = python_operator(stypy.reporting.localization.Localization(__file__, 950, 24), 'or', result_or_keyword_195338, any_call_result_195346)
    
    # Applying the binary operator 'and' (line 950)
    result_and_keyword_195348 = python_operator(stypy.reporting.localization.Localization(__file__, 950, 7), 'and', result_eq_195315, result_or_keyword_195347)
    
    # Testing the type of an if condition (line 950)
    if_condition_195349 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 950, 4), result_and_keyword_195348)
    # Assigning a type to the variable 'if_condition_195349' (line 950)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 4), 'if_condition_195349', if_condition_195349)
    # SSA begins for if statement (line 950)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 952):
    
    # Assigning a Num to a Name (line 952):
    int_195350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 17), 'int')
    # Assigning a type to the variable 'status' (line 952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 8), 'status', int_195350)
    
    # Assigning a Str to a Name (line 953):
    
    # Assigning a Str to a Name (line 953):
    str_195351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 953, 19), 'str', "Numerical difficulties were encountered but no errors were raised. This is known to occur if the 'presolve' option is False, 'sparse' is True, and A_eq includes redundant rows. If you encounter this under different circumstances, please submit a bug report. Otherwise, remove linearly dependent equations from your equality constraints or enable presolve.")
    # Assigning a type to the variable 'message' (line 953)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 953, 8), 'message', str_195351)
    # SSA join for if statement (line 950)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 961)
    tuple_195352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 961, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 961)
    # Adding element type (line 961)
    # Getting the type of 'x' (line 961)
    x_195353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 11), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 961, 11), tuple_195352, x_195353)
    # Adding element type (line 961)
    # Getting the type of 'fun' (line 961)
    fun_195354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 14), 'fun')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 961, 11), tuple_195352, fun_195354)
    # Adding element type (line 961)
    # Getting the type of 'slack' (line 961)
    slack_195355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 19), 'slack')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 961, 11), tuple_195352, slack_195355)
    # Adding element type (line 961)
    # Getting the type of 'con' (line 961)
    con_195356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 26), 'con')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 961, 11), tuple_195352, con_195356)
    # Adding element type (line 961)
    # Getting the type of 'status' (line 961)
    status_195357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 31), 'status')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 961, 11), tuple_195352, status_195357)
    # Adding element type (line 961)
    # Getting the type of 'message' (line 961)
    message_195358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 39), 'message')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 961, 11), tuple_195352, message_195358)
    
    # Assigning a type to the variable 'stypy_return_type' (line 961)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 961, 4), 'stypy_return_type', tuple_195352)
    
    # ################# End of '_postprocess(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_postprocess' in the type store
    # Getting the type of 'stypy_return_type' (line 827)
    stypy_return_type_195359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_195359)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_postprocess'
    return stypy_return_type_195359

# Assigning a type to the variable '_postprocess' (line 827)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 827, 0), '_postprocess', _postprocess)

@norecursion
def _get_solver(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 964)
    False_195360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 23), 'False')
    # Getting the type of 'False' (line 964)
    False_195361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 36), 'False')
    # Getting the type of 'True' (line 964)
    True_195362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 51), 'True')
    # Getting the type of 'True' (line 964)
    True_195363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 66), 'True')
    defaults = [False_195360, False_195361, True_195362, True_195363]
    # Create a new context for function '_get_solver'
    module_type_store = module_type_store.open_function_context('_get_solver', 964, 0, False)
    
    # Passed parameters checking function
    _get_solver.stypy_localization = localization
    _get_solver.stypy_type_of_self = None
    _get_solver.stypy_type_store = module_type_store
    _get_solver.stypy_function_name = '_get_solver'
    _get_solver.stypy_param_names_list = ['sparse', 'lstsq', 'sym_pos', 'cholesky']
    _get_solver.stypy_varargs_param_name = None
    _get_solver.stypy_kwargs_param_name = None
    _get_solver.stypy_call_defaults = defaults
    _get_solver.stypy_call_varargs = varargs
    _get_solver.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_solver', ['sparse', 'lstsq', 'sym_pos', 'cholesky'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_solver', localization, ['sparse', 'lstsq', 'sym_pos', 'cholesky'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_solver(...)' code ##################

    str_195364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 993, (-1)), 'str', '\n    Given solver options, return a handle to the appropriate linear system\n    solver.\n\n    Parameters\n    ----------\n    sparse : bool\n        True if the system to be solved is sparse. This is typically set\n        True when the original ``A_ub`` and ``A_eq`` arrays are sparse.\n    lstsq : bool\n        True if the system is ill-conditioned and/or (nearly) singular and\n        thus a more robust least-squares solver is desired. This is sometimes\n        needed as the solution is approached.\n    sym_pos : bool\n        True if the system matrix is symmetric positive definite\n        Sometimes this needs to be set false as the solution is approached,\n        even when the system should be symmetric positive definite, due to\n        numerical difficulties.\n    cholesky : bool\n        True if the system is to be solved by Cholesky, rather than LU,\n        decomposition. This is typically faster unless the problem is very\n        small or prone to numerical difficulties.\n\n    Returns\n    -------\n    solve : function\n        Handle to the appropriate solver function\n\n    ')
    
    # Getting the type of 'sparse' (line 994)
    sparse_195365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 7), 'sparse')
    # Testing the type of an if condition (line 994)
    if_condition_195366 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 994, 4), sparse_195365)
    # Assigning a type to the variable 'if_condition_195366' (line 994)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 4), 'if_condition_195366', if_condition_195366)
    # SSA begins for if statement (line 994)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    # Getting the type of 'lstsq' (line 995)
    lstsq_195367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 11), 'lstsq')
    
    # Getting the type of 'sym_pos' (line 995)
    sym_pos_195368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 24), 'sym_pos')
    # Applying the 'not' unary operator (line 995)
    result_not__195369 = python_operator(stypy.reporting.localization.Localization(__file__, 995, 20), 'not', sym_pos_195368)
    
    # Applying the binary operator 'or' (line 995)
    result_or_keyword_195370 = python_operator(stypy.reporting.localization.Localization(__file__, 995, 11), 'or', lstsq_195367, result_not__195369)
    
    # Testing the type of an if condition (line 995)
    if_condition_195371 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 995, 8), result_or_keyword_195370)
    # Assigning a type to the variable 'if_condition_195371' (line 995)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 995, 8), 'if_condition_195371', if_condition_195371)
    # SSA begins for if statement (line 995)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

    @norecursion
    def solve(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 996)
        False_195372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 36), 'False')
        defaults = [False_195372]
        # Create a new context for function 'solve'
        module_type_store = module_type_store.open_function_context('solve', 996, 12, False)
        
        # Passed parameters checking function
        solve.stypy_localization = localization
        solve.stypy_type_of_self = None
        solve.stypy_type_store = module_type_store
        solve.stypy_function_name = 'solve'
        solve.stypy_param_names_list = ['M', 'r', 'sym_pos']
        solve.stypy_varargs_param_name = None
        solve.stypy_kwargs_param_name = None
        solve.stypy_call_defaults = defaults
        solve.stypy_call_varargs = varargs
        solve.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'solve', ['M', 'r', 'sym_pos'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'solve', localization, ['M', 'r', 'sym_pos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'solve(...)' code ##################

        
        # Obtaining the type of the subscript
        int_195373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 997, 45), 'int')
        
        # Call to lsqr(...): (line 997)
        # Processing the call arguments (line 997)
        # Getting the type of 'M' (line 997)
        M_195377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 39), 'M', False)
        # Getting the type of 'r' (line 997)
        r_195378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 42), 'r', False)
        # Processing the call keyword arguments (line 997)
        kwargs_195379 = {}
        # Getting the type of 'sps' (line 997)
        sps_195374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 23), 'sps', False)
        # Obtaining the member 'linalg' of a type (line 997)
        linalg_195375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 997, 23), sps_195374, 'linalg')
        # Obtaining the member 'lsqr' of a type (line 997)
        lsqr_195376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 997, 23), linalg_195375, 'lsqr')
        # Calling lsqr(args, kwargs) (line 997)
        lsqr_call_result_195380 = invoke(stypy.reporting.localization.Localization(__file__, 997, 23), lsqr_195376, *[M_195377, r_195378], **kwargs_195379)
        
        # Obtaining the member '__getitem__' of a type (line 997)
        getitem___195381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 997, 23), lsqr_call_result_195380, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 997)
        subscript_call_result_195382 = invoke(stypy.reporting.localization.Localization(__file__, 997, 23), getitem___195381, int_195373)
        
        # Assigning a type to the variable 'stypy_return_type' (line 997)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 997, 16), 'stypy_return_type', subscript_call_result_195382)
        
        # ################# End of 'solve(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'solve' in the type store
        # Getting the type of 'stypy_return_type' (line 996)
        stypy_return_type_195383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 12), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_195383)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'solve'
        return stypy_return_type_195383

    # Assigning a type to the variable 'solve' (line 996)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 996, 12), 'solve', solve)
    # SSA branch for the else part of an if statement (line 995)
    module_type_store.open_ssa_branch('else')

    @norecursion
    def solve(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'solve'
        module_type_store = module_type_store.open_function_context('solve', 1001, 12, False)
        
        # Passed parameters checking function
        solve.stypy_localization = localization
        solve.stypy_type_of_self = None
        solve.stypy_type_store = module_type_store
        solve.stypy_function_name = 'solve'
        solve.stypy_param_names_list = ['M', 'r']
        solve.stypy_varargs_param_name = None
        solve.stypy_kwargs_param_name = None
        solve.stypy_call_defaults = defaults
        solve.stypy_call_varargs = varargs
        solve.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'solve', ['M', 'r'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'solve', localization, ['M', 'r'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'solve(...)' code ##################

        
        # Call to spsolve(...): (line 1002)
        # Processing the call arguments (line 1002)
        # Getting the type of 'M' (line 1002)
        M_195387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 42), 'M', False)
        # Getting the type of 'r' (line 1002)
        r_195388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 45), 'r', False)
        # Processing the call keyword arguments (line 1002)
        str_195389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1002, 59), 'str', 'MMD_AT_PLUS_A')
        keyword_195390 = str_195389
        kwargs_195391 = {'permc_spec': keyword_195390}
        # Getting the type of 'sps' (line 1002)
        sps_195384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 23), 'sps', False)
        # Obtaining the member 'linalg' of a type (line 1002)
        linalg_195385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1002, 23), sps_195384, 'linalg')
        # Obtaining the member 'spsolve' of a type (line 1002)
        spsolve_195386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1002, 23), linalg_195385, 'spsolve')
        # Calling spsolve(args, kwargs) (line 1002)
        spsolve_call_result_195392 = invoke(stypy.reporting.localization.Localization(__file__, 1002, 23), spsolve_195386, *[M_195387, r_195388], **kwargs_195391)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1002)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1002, 16), 'stypy_return_type', spsolve_call_result_195392)
        
        # ################# End of 'solve(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'solve' in the type store
        # Getting the type of 'stypy_return_type' (line 1001)
        stypy_return_type_195393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 12), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_195393)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'solve'
        return stypy_return_type_195393

    # Assigning a type to the variable 'solve' (line 1001)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1001, 12), 'solve', solve)
    # SSA join for if statement (line 995)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 994)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'lstsq' (line 1005)
    lstsq_195394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 11), 'lstsq')
    # Testing the type of an if condition (line 1005)
    if_condition_195395 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1005, 8), lstsq_195394)
    # Assigning a type to the variable 'if_condition_195395' (line 1005)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 8), 'if_condition_195395', if_condition_195395)
    # SSA begins for if statement (line 1005)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

    @norecursion
    def solve(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'solve'
        module_type_store = module_type_store.open_function_context('solve', 1006, 12, False)
        
        # Passed parameters checking function
        solve.stypy_localization = localization
        solve.stypy_type_of_self = None
        solve.stypy_type_store = module_type_store
        solve.stypy_function_name = 'solve'
        solve.stypy_param_names_list = ['M', 'r']
        solve.stypy_varargs_param_name = None
        solve.stypy_kwargs_param_name = None
        solve.stypy_call_defaults = defaults
        solve.stypy_call_varargs = varargs
        solve.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'solve', ['M', 'r'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'solve', localization, ['M', 'r'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'solve(...)' code ##################

        
        # Obtaining the type of the subscript
        int_195396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1007, 45), 'int')
        
        # Call to lstsq(...): (line 1007)
        # Processing the call arguments (line 1007)
        # Getting the type of 'M' (line 1007)
        M_195400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 39), 'M', False)
        # Getting the type of 'r' (line 1007)
        r_195401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 42), 'r', False)
        # Processing the call keyword arguments (line 1007)
        kwargs_195402 = {}
        # Getting the type of 'sp' (line 1007)
        sp_195397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 23), 'sp', False)
        # Obtaining the member 'linalg' of a type (line 1007)
        linalg_195398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1007, 23), sp_195397, 'linalg')
        # Obtaining the member 'lstsq' of a type (line 1007)
        lstsq_195399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1007, 23), linalg_195398, 'lstsq')
        # Calling lstsq(args, kwargs) (line 1007)
        lstsq_call_result_195403 = invoke(stypy.reporting.localization.Localization(__file__, 1007, 23), lstsq_195399, *[M_195400, r_195401], **kwargs_195402)
        
        # Obtaining the member '__getitem__' of a type (line 1007)
        getitem___195404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1007, 23), lstsq_call_result_195403, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1007)
        subscript_call_result_195405 = invoke(stypy.reporting.localization.Localization(__file__, 1007, 23), getitem___195404, int_195396)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1007)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1007, 16), 'stypy_return_type', subscript_call_result_195405)
        
        # ################# End of 'solve(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'solve' in the type store
        # Getting the type of 'stypy_return_type' (line 1006)
        stypy_return_type_195406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 12), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_195406)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'solve'
        return stypy_return_type_195406

    # Assigning a type to the variable 'solve' (line 1006)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1006, 12), 'solve', solve)
    # SSA branch for the else part of an if statement (line 1005)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'cholesky' (line 1008)
    cholesky_195407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 13), 'cholesky')
    # Testing the type of an if condition (line 1008)
    if_condition_195408 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1008, 13), cholesky_195407)
    # Assigning a type to the variable 'if_condition_195408' (line 1008)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1008, 13), 'if_condition_195408', if_condition_195408)
    # SSA begins for if statement (line 1008)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 1009):
    
    # Assigning a Attribute to a Name (line 1009):
    # Getting the type of 'sp' (line 1009)
    sp_195409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 20), 'sp')
    # Obtaining the member 'linalg' of a type (line 1009)
    linalg_195410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 20), sp_195409, 'linalg')
    # Obtaining the member 'cho_solve' of a type (line 1009)
    cho_solve_195411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 20), linalg_195410, 'cho_solve')
    # Assigning a type to the variable 'solve' (line 1009)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1009, 12), 'solve', cho_solve_195411)
    # SSA branch for the else part of an if statement (line 1008)
    module_type_store.open_ssa_branch('else')

    @norecursion
    def solve(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'sym_pos' (line 1013)
        sym_pos_195412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 36), 'sym_pos')
        defaults = [sym_pos_195412]
        # Create a new context for function 'solve'
        module_type_store = module_type_store.open_function_context('solve', 1013, 12, False)
        
        # Passed parameters checking function
        solve.stypy_localization = localization
        solve.stypy_type_of_self = None
        solve.stypy_type_store = module_type_store
        solve.stypy_function_name = 'solve'
        solve.stypy_param_names_list = ['M', 'r', 'sym_pos']
        solve.stypy_varargs_param_name = None
        solve.stypy_kwargs_param_name = None
        solve.stypy_call_defaults = defaults
        solve.stypy_call_varargs = varargs
        solve.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'solve', ['M', 'r', 'sym_pos'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'solve', localization, ['M', 'r', 'sym_pos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'solve(...)' code ##################

        
        # Call to solve(...): (line 1014)
        # Processing the call arguments (line 1014)
        # Getting the type of 'M' (line 1014)
        M_195416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 39), 'M', False)
        # Getting the type of 'r' (line 1014)
        r_195417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 42), 'r', False)
        # Processing the call keyword arguments (line 1014)
        # Getting the type of 'sym_pos' (line 1014)
        sym_pos_195418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 53), 'sym_pos', False)
        keyword_195419 = sym_pos_195418
        kwargs_195420 = {'sym_pos': keyword_195419}
        # Getting the type of 'sp' (line 1014)
        sp_195413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 23), 'sp', False)
        # Obtaining the member 'linalg' of a type (line 1014)
        linalg_195414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1014, 23), sp_195413, 'linalg')
        # Obtaining the member 'solve' of a type (line 1014)
        solve_195415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1014, 23), linalg_195414, 'solve')
        # Calling solve(args, kwargs) (line 1014)
        solve_call_result_195421 = invoke(stypy.reporting.localization.Localization(__file__, 1014, 23), solve_195415, *[M_195416, r_195417], **kwargs_195420)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1014)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1014, 16), 'stypy_return_type', solve_call_result_195421)
        
        # ################# End of 'solve(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'solve' in the type store
        # Getting the type of 'stypy_return_type' (line 1013)
        stypy_return_type_195422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 12), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_195422)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'solve'
        return stypy_return_type_195422

    # Assigning a type to the variable 'solve' (line 1013)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1013, 12), 'solve', solve)
    # SSA join for if statement (line 1008)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1005)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 994)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'solve' (line 1016)
    solve_195423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 11), 'solve')
    # Assigning a type to the variable 'stypy_return_type' (line 1016)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1016, 4), 'stypy_return_type', solve_195423)
    
    # ################# End of '_get_solver(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_solver' in the type store
    # Getting the type of 'stypy_return_type' (line 964)
    stypy_return_type_195424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_195424)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_solver'
    return stypy_return_type_195424

# Assigning a type to the variable '_get_solver' (line 964)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 964, 0), '_get_solver', _get_solver)

@norecursion
def _get_delta(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1030)
    False_195425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 11), 'False')
    # Getting the type of 'False' (line 1031)
    False_195426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 10), 'False')
    # Getting the type of 'True' (line 1032)
    True_195427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 12), 'True')
    # Getting the type of 'True' (line 1033)
    True_195428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 13), 'True')
    # Getting the type of 'True' (line 1034)
    True_195429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 7), 'True')
    # Getting the type of 'False' (line 1035)
    False_195430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 7), 'False')
    str_195431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1036, 19), 'str', 'MMD_AT_PLUS_A')
    defaults = [False_195425, False_195426, True_195427, True_195428, True_195429, False_195430, str_195431]
    # Create a new context for function '_get_delta'
    module_type_store = module_type_store.open_function_context('_get_delta', 1019, 0, False)
    
    # Passed parameters checking function
    _get_delta.stypy_localization = localization
    _get_delta.stypy_type_of_self = None
    _get_delta.stypy_type_store = module_type_store
    _get_delta.stypy_function_name = '_get_delta'
    _get_delta.stypy_param_names_list = ['A', 'b', 'c', 'x', 'y', 'z', 'tau', 'kappa', 'gamma', 'eta', 'sparse', 'lstsq', 'sym_pos', 'cholesky', 'pc', 'ip', 'permc_spec']
    _get_delta.stypy_varargs_param_name = None
    _get_delta.stypy_kwargs_param_name = None
    _get_delta.stypy_call_defaults = defaults
    _get_delta.stypy_call_varargs = varargs
    _get_delta.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_delta', ['A', 'b', 'c', 'x', 'y', 'z', 'tau', 'kappa', 'gamma', 'eta', 'sparse', 'lstsq', 'sym_pos', 'cholesky', 'pc', 'ip', 'permc_spec'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_delta', localization, ['A', 'b', 'c', 'x', 'y', 'z', 'tau', 'kappa', 'gamma', 'eta', 'sparse', 'lstsq', 'sym_pos', 'cholesky', 'pc', 'ip', 'permc_spec'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_delta(...)' code ##################

    str_195432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1100, (-1)), 'str', '\n    Given standard form problem defined by ``A``, ``b``, and ``c``;\n    current variable estimates ``x``, ``y``, ``z``, ``tau``, and ``kappa``;\n    algorithmic parameters ``gamma and ``eta;\n    and options ``sparse``, ``lstsq``, ``sym_pos``, ``cholesky``, ``pc``\n    (predictor-corrector), and ``ip`` (initial point improvement),\n    get the search direction for increments to the variable estimates.\n\n    Parameters\n    ----------\n    As defined in [1], except:\n    sparse : bool\n        True if the system to be solved is sparse. This is typically set\n        True when the original ``A_ub`` and ``A_eq`` arrays are sparse.\n    lstsq : bool\n        True if the system is ill-conditioned and/or (nearly) singular and\n        thus a more robust least-squares solver is desired. This is sometimes\n        needed as the solution is approached.\n    sym_pos : bool\n        True if the system matrix is symmetric positive definite\n        Sometimes this needs to be set false as the solution is approached,\n        even when the system should be symmetric positive definite, due to\n        numerical difficulties.\n    cholesky : bool\n        True if the system is to be solved by Cholesky, rather than LU,\n        decomposition. This is typically faster unless the problem is very\n        small or prone to numerical difficulties.\n    pc : bool\n        True if the predictor-corrector method of Mehrota is to be used. This\n        is almost always (if not always) beneficial. Even though it requires\n        the solution of an additional linear system, the factorization\n        is typically (implicitly) reused so solution is efficient, and the\n        number of algorithm iterations is typically reduced.\n    ip : bool\n        True if the improved initial point suggestion due to [1] section 4.3\n        is desired. It\'s unclear whether this is beneficial.\n    permc_spec : str (default = \'MMD_AT_PLUS_A\')\n        (Has effect only with ``sparse = True``, ``lstsq = False``, ``sym_pos =\n        True``.) A matrix is factorized in each iteration of the algorithm.\n        This option specifies how to permute the columns of the matrix for\n        sparsity preservation. Acceptable values are:\n\n        - ``NATURAL``: natural ordering.\n        - ``MMD_ATA``: minimum degree ordering on the structure of A^T A.\n        - ``MMD_AT_PLUS_A``: minimum degree ordering on the structure of A^T+A.\n        - ``COLAMD``: approximate minimum degree column ordering.\n\n        This option can impact the convergence of the\n        interior point algorithm; test different values to determine which\n        performs best for your problem. For more information, refer to\n        ``scipy.sparse.linalg.splu``.\n\n    Returns\n    -------\n    Search directions as defined in [1]\n\n    References\n    ----------\n    .. [1] Andersen, Erling D., and Knud D. Andersen. "The MOSEK interior point\n           optimizer for linear programming: an implementation of the\n           homogeneous algorithm." High performance optimization. Springer US,\n           2000. 197-232.\n\n    ')
    
    
    
    # Obtaining the type of the subscript
    int_195433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1102, 15), 'int')
    # Getting the type of 'A' (line 1102)
    A_195434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 7), 'A')
    # Obtaining the member 'shape' of a type (line 1102)
    shape_195435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1102, 7), A_195434, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1102)
    getitem___195436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1102, 7), shape_195435, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1102)
    subscript_call_result_195437 = invoke(stypy.reporting.localization.Localization(__file__, 1102, 7), getitem___195436, int_195433)
    
    int_195438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1102, 21), 'int')
    # Applying the binary operator '==' (line 1102)
    result_eq_195439 = python_operator(stypy.reporting.localization.Localization(__file__, 1102, 7), '==', subscript_call_result_195437, int_195438)
    
    # Testing the type of an if condition (line 1102)
    if_condition_195440 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1102, 4), result_eq_195439)
    # Assigning a type to the variable 'if_condition_195440' (line 1102)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1102, 4), 'if_condition_195440', if_condition_195440)
    # SSA begins for if statement (line 1102)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 1105):
    
    # Assigning a Name to a Name (line 1105):
    # Getting the type of 'False' (line 1105)
    False_195441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 43), 'False')
    # Assigning a type to the variable 'tuple_assignment_192579' (line 1105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1105, 8), 'tuple_assignment_192579', False_195441)
    
    # Assigning a Name to a Name (line 1105):
    # Getting the type of 'False' (line 1105)
    False_195442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 50), 'False')
    # Assigning a type to the variable 'tuple_assignment_192580' (line 1105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1105, 8), 'tuple_assignment_192580', False_195442)
    
    # Assigning a Name to a Name (line 1105):
    # Getting the type of 'True' (line 1105)
    True_195443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 57), 'True')
    # Assigning a type to the variable 'tuple_assignment_192581' (line 1105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1105, 8), 'tuple_assignment_192581', True_195443)
    
    # Assigning a Name to a Name (line 1105):
    # Getting the type of 'False' (line 1105)
    False_195444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 63), 'False')
    # Assigning a type to the variable 'tuple_assignment_192582' (line 1105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1105, 8), 'tuple_assignment_192582', False_195444)
    
    # Assigning a Name to a Name (line 1105):
    # Getting the type of 'tuple_assignment_192579' (line 1105)
    tuple_assignment_192579_195445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 8), 'tuple_assignment_192579')
    # Assigning a type to the variable 'sparse' (line 1105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1105, 8), 'sparse', tuple_assignment_192579_195445)
    
    # Assigning a Name to a Name (line 1105):
    # Getting the type of 'tuple_assignment_192580' (line 1105)
    tuple_assignment_192580_195446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 8), 'tuple_assignment_192580')
    # Assigning a type to the variable 'lstsq' (line 1105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1105, 16), 'lstsq', tuple_assignment_192580_195446)
    
    # Assigning a Name to a Name (line 1105):
    # Getting the type of 'tuple_assignment_192581' (line 1105)
    tuple_assignment_192581_195447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 8), 'tuple_assignment_192581')
    # Assigning a type to the variable 'sym_pos' (line 1105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1105, 23), 'sym_pos', tuple_assignment_192581_195447)
    
    # Assigning a Name to a Name (line 1105):
    # Getting the type of 'tuple_assignment_192582' (line 1105)
    tuple_assignment_192582_195448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 8), 'tuple_assignment_192582')
    # Assigning a type to the variable 'cholesky' (line 1105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1105, 32), 'cholesky', tuple_assignment_192582_195448)
    # SSA join for if statement (line 1102)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1106):
    
    # Assigning a Call to a Name (line 1106):
    
    # Call to _get_solver(...): (line 1106)
    # Processing the call arguments (line 1106)
    # Getting the type of 'sparse' (line 1106)
    sparse_195450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 24), 'sparse', False)
    # Getting the type of 'lstsq' (line 1106)
    lstsq_195451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 32), 'lstsq', False)
    # Getting the type of 'sym_pos' (line 1106)
    sym_pos_195452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 39), 'sym_pos', False)
    # Getting the type of 'cholesky' (line 1106)
    cholesky_195453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 48), 'cholesky', False)
    # Processing the call keyword arguments (line 1106)
    kwargs_195454 = {}
    # Getting the type of '_get_solver' (line 1106)
    _get_solver_195449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 12), '_get_solver', False)
    # Calling _get_solver(args, kwargs) (line 1106)
    _get_solver_call_result_195455 = invoke(stypy.reporting.localization.Localization(__file__, 1106, 12), _get_solver_195449, *[sparse_195450, lstsq_195451, sym_pos_195452, cholesky_195453], **kwargs_195454)
    
    # Assigning a type to the variable 'solve' (line 1106)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1106, 4), 'solve', _get_solver_call_result_195455)
    
    # Assigning a Call to a Name (line 1107):
    
    # Assigning a Call to a Name (line 1107):
    
    # Call to len(...): (line 1107)
    # Processing the call arguments (line 1107)
    # Getting the type of 'x' (line 1107)
    x_195457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 14), 'x', False)
    # Processing the call keyword arguments (line 1107)
    kwargs_195458 = {}
    # Getting the type of 'len' (line 1107)
    len_195456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 10), 'len', False)
    # Calling len(args, kwargs) (line 1107)
    len_call_result_195459 = invoke(stypy.reporting.localization.Localization(__file__, 1107, 10), len_195456, *[x_195457], **kwargs_195458)
    
    # Assigning a type to the variable 'n_x' (line 1107)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1107, 4), 'n_x', len_call_result_195459)
    
    # Assigning a BinOp to a Name (line 1110):
    
    # Assigning a BinOp to a Name (line 1110):
    # Getting the type of 'b' (line 1110)
    b_195460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 10), 'b')
    # Getting the type of 'tau' (line 1110)
    tau_195461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 14), 'tau')
    # Applying the binary operator '*' (line 1110)
    result_mul_195462 = python_operator(stypy.reporting.localization.Localization(__file__, 1110, 10), '*', b_195460, tau_195461)
    
    
    # Call to dot(...): (line 1110)
    # Processing the call arguments (line 1110)
    # Getting the type of 'x' (line 1110)
    x_195465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 26), 'x', False)
    # Processing the call keyword arguments (line 1110)
    kwargs_195466 = {}
    # Getting the type of 'A' (line 1110)
    A_195463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 20), 'A', False)
    # Obtaining the member 'dot' of a type (line 1110)
    dot_195464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1110, 20), A_195463, 'dot')
    # Calling dot(args, kwargs) (line 1110)
    dot_call_result_195467 = invoke(stypy.reporting.localization.Localization(__file__, 1110, 20), dot_195464, *[x_195465], **kwargs_195466)
    
    # Applying the binary operator '-' (line 1110)
    result_sub_195468 = python_operator(stypy.reporting.localization.Localization(__file__, 1110, 10), '-', result_mul_195462, dot_call_result_195467)
    
    # Assigning a type to the variable 'r_P' (line 1110)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1110, 4), 'r_P', result_sub_195468)
    
    # Assigning a BinOp to a Name (line 1111):
    
    # Assigning a BinOp to a Name (line 1111):
    # Getting the type of 'c' (line 1111)
    c_195469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 10), 'c')
    # Getting the type of 'tau' (line 1111)
    tau_195470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 14), 'tau')
    # Applying the binary operator '*' (line 1111)
    result_mul_195471 = python_operator(stypy.reporting.localization.Localization(__file__, 1111, 10), '*', c_195469, tau_195470)
    
    
    # Call to dot(...): (line 1111)
    # Processing the call arguments (line 1111)
    # Getting the type of 'y' (line 1111)
    y_195475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 28), 'y', False)
    # Processing the call keyword arguments (line 1111)
    kwargs_195476 = {}
    # Getting the type of 'A' (line 1111)
    A_195472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 20), 'A', False)
    # Obtaining the member 'T' of a type (line 1111)
    T_195473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1111, 20), A_195472, 'T')
    # Obtaining the member 'dot' of a type (line 1111)
    dot_195474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1111, 20), T_195473, 'dot')
    # Calling dot(args, kwargs) (line 1111)
    dot_call_result_195477 = invoke(stypy.reporting.localization.Localization(__file__, 1111, 20), dot_195474, *[y_195475], **kwargs_195476)
    
    # Applying the binary operator '-' (line 1111)
    result_sub_195478 = python_operator(stypy.reporting.localization.Localization(__file__, 1111, 10), '-', result_mul_195471, dot_call_result_195477)
    
    # Getting the type of 'z' (line 1111)
    z_195479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 33), 'z')
    # Applying the binary operator '-' (line 1111)
    result_sub_195480 = python_operator(stypy.reporting.localization.Localization(__file__, 1111, 31), '-', result_sub_195478, z_195479)
    
    # Assigning a type to the variable 'r_D' (line 1111)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1111, 4), 'r_D', result_sub_195480)
    
    # Assigning a BinOp to a Name (line 1112):
    
    # Assigning a BinOp to a Name (line 1112):
    
    # Call to dot(...): (line 1112)
    # Processing the call arguments (line 1112)
    # Getting the type of 'x' (line 1112)
    x_195483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 16), 'x', False)
    # Processing the call keyword arguments (line 1112)
    kwargs_195484 = {}
    # Getting the type of 'c' (line 1112)
    c_195481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 10), 'c', False)
    # Obtaining the member 'dot' of a type (line 1112)
    dot_195482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1112, 10), c_195481, 'dot')
    # Calling dot(args, kwargs) (line 1112)
    dot_call_result_195485 = invoke(stypy.reporting.localization.Localization(__file__, 1112, 10), dot_195482, *[x_195483], **kwargs_195484)
    
    
    # Call to dot(...): (line 1112)
    # Processing the call arguments (line 1112)
    # Getting the type of 'y' (line 1112)
    y_195491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 39), 'y', False)
    # Processing the call keyword arguments (line 1112)
    kwargs_195492 = {}
    
    # Call to transpose(...): (line 1112)
    # Processing the call keyword arguments (line 1112)
    kwargs_195488 = {}
    # Getting the type of 'b' (line 1112)
    b_195486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 21), 'b', False)
    # Obtaining the member 'transpose' of a type (line 1112)
    transpose_195487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1112, 21), b_195486, 'transpose')
    # Calling transpose(args, kwargs) (line 1112)
    transpose_call_result_195489 = invoke(stypy.reporting.localization.Localization(__file__, 1112, 21), transpose_195487, *[], **kwargs_195488)
    
    # Obtaining the member 'dot' of a type (line 1112)
    dot_195490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1112, 21), transpose_call_result_195489, 'dot')
    # Calling dot(args, kwargs) (line 1112)
    dot_call_result_195493 = invoke(stypy.reporting.localization.Localization(__file__, 1112, 21), dot_195490, *[y_195491], **kwargs_195492)
    
    # Applying the binary operator '-' (line 1112)
    result_sub_195494 = python_operator(stypy.reporting.localization.Localization(__file__, 1112, 10), '-', dot_call_result_195485, dot_call_result_195493)
    
    # Getting the type of 'kappa' (line 1112)
    kappa_195495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 44), 'kappa')
    # Applying the binary operator '+' (line 1112)
    result_add_195496 = python_operator(stypy.reporting.localization.Localization(__file__, 1112, 42), '+', result_sub_195494, kappa_195495)
    
    # Assigning a type to the variable 'r_G' (line 1112)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1112, 4), 'r_G', result_add_195496)
    
    # Assigning a BinOp to a Name (line 1113):
    
    # Assigning a BinOp to a Name (line 1113):
    
    # Call to dot(...): (line 1113)
    # Processing the call arguments (line 1113)
    # Getting the type of 'z' (line 1113)
    z_195499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 16), 'z', False)
    # Processing the call keyword arguments (line 1113)
    kwargs_195500 = {}
    # Getting the type of 'x' (line 1113)
    x_195497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 10), 'x', False)
    # Obtaining the member 'dot' of a type (line 1113)
    dot_195498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1113, 10), x_195497, 'dot')
    # Calling dot(args, kwargs) (line 1113)
    dot_call_result_195501 = invoke(stypy.reporting.localization.Localization(__file__, 1113, 10), dot_195498, *[z_195499], **kwargs_195500)
    
    # Getting the type of 'tau' (line 1113)
    tau_195502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 21), 'tau')
    # Getting the type of 'kappa' (line 1113)
    kappa_195503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 27), 'kappa')
    # Applying the binary operator '*' (line 1113)
    result_mul_195504 = python_operator(stypy.reporting.localization.Localization(__file__, 1113, 21), '*', tau_195502, kappa_195503)
    
    # Applying the binary operator '+' (line 1113)
    result_add_195505 = python_operator(stypy.reporting.localization.Localization(__file__, 1113, 10), '+', dot_call_result_195501, result_mul_195504)
    
    # Getting the type of 'n_x' (line 1113)
    n_x_195506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 37), 'n_x')
    int_195507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1113, 43), 'int')
    # Applying the binary operator '+' (line 1113)
    result_add_195508 = python_operator(stypy.reporting.localization.Localization(__file__, 1113, 37), '+', n_x_195506, int_195507)
    
    # Applying the binary operator 'div' (line 1113)
    result_div_195509 = python_operator(stypy.reporting.localization.Localization(__file__, 1113, 9), 'div', result_add_195505, result_add_195508)
    
    # Assigning a type to the variable 'mu' (line 1113)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1113, 4), 'mu', result_div_195509)
    
    # Assigning a BinOp to a Name (line 1116):
    
    # Assigning a BinOp to a Name (line 1116):
    # Getting the type of 'x' (line 1116)
    x_195510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 11), 'x')
    # Getting the type of 'z' (line 1116)
    z_195511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 15), 'z')
    # Applying the binary operator 'div' (line 1116)
    result_div_195512 = python_operator(stypy.reporting.localization.Localization(__file__, 1116, 11), 'div', x_195510, z_195511)
    
    # Assigning a type to the variable 'Dinv' (line 1116)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1116, 4), 'Dinv', result_div_195512)
    
    # Assigning a Name to a Name (line 1117):
    
    # Assigning a Name to a Name (line 1117):
    # Getting the type of 'False' (line 1117)
    False_195513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 11), 'False')
    # Assigning a type to the variable 'splu' (line 1117)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1117, 4), 'splu', False_195513)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'sparse' (line 1118)
    sparse_195514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 7), 'sparse')
    
    # Getting the type of 'lstsq' (line 1118)
    lstsq_195515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 22), 'lstsq')
    # Applying the 'not' unary operator (line 1118)
    result_not__195516 = python_operator(stypy.reporting.localization.Localization(__file__, 1118, 18), 'not', lstsq_195515)
    
    # Applying the binary operator 'and' (line 1118)
    result_and_keyword_195517 = python_operator(stypy.reporting.localization.Localization(__file__, 1118, 7), 'and', sparse_195514, result_not__195516)
    
    # Testing the type of an if condition (line 1118)
    if_condition_195518 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1118, 4), result_and_keyword_195517)
    # Assigning a type to the variable 'if_condition_195518' (line 1118)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1118, 4), 'if_condition_195518', if_condition_195518)
    # SSA begins for if statement (line 1118)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1120):
    
    # Assigning a Call to a Name (line 1120):
    
    # Call to dot(...): (line 1120)
    # Processing the call arguments (line 1120)
    
    # Call to dot(...): (line 1120)
    # Processing the call arguments (line 1120)
    # Getting the type of 'A' (line 1120)
    A_195530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 55), 'A', False)
    # Obtaining the member 'T' of a type (line 1120)
    T_195531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1120, 55), A_195530, 'T')
    # Processing the call keyword arguments (line 1120)
    kwargs_195532 = {}
    
    # Call to diags(...): (line 1120)
    # Processing the call arguments (line 1120)
    # Getting the type of 'Dinv' (line 1120)
    Dinv_195523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 28), 'Dinv', False)
    int_195524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1120, 34), 'int')
    # Processing the call keyword arguments (line 1120)
    str_195525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1120, 44), 'str', 'csc')
    keyword_195526 = str_195525
    kwargs_195527 = {'format': keyword_195526}
    # Getting the type of 'sps' (line 1120)
    sps_195521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 18), 'sps', False)
    # Obtaining the member 'diags' of a type (line 1120)
    diags_195522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1120, 18), sps_195521, 'diags')
    # Calling diags(args, kwargs) (line 1120)
    diags_call_result_195528 = invoke(stypy.reporting.localization.Localization(__file__, 1120, 18), diags_195522, *[Dinv_195523, int_195524], **kwargs_195527)
    
    # Obtaining the member 'dot' of a type (line 1120)
    dot_195529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1120, 18), diags_call_result_195528, 'dot')
    # Calling dot(args, kwargs) (line 1120)
    dot_call_result_195533 = invoke(stypy.reporting.localization.Localization(__file__, 1120, 18), dot_195529, *[T_195531], **kwargs_195532)
    
    # Processing the call keyword arguments (line 1120)
    kwargs_195534 = {}
    # Getting the type of 'A' (line 1120)
    A_195519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 12), 'A', False)
    # Obtaining the member 'dot' of a type (line 1120)
    dot_195520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1120, 12), A_195519, 'dot')
    # Calling dot(args, kwargs) (line 1120)
    dot_call_result_195535 = invoke(stypy.reporting.localization.Localization(__file__, 1120, 12), dot_195520, *[dot_call_result_195533], **kwargs_195534)
    
    # Assigning a type to the variable 'M' (line 1120)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1120, 8), 'M', dot_call_result_195535)
    
    
    # SSA begins for try-except statement (line 1121)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Attribute to a Name (line 1124):
    
    # Assigning a Attribute to a Name (line 1124):
    
    # Call to splu(...): (line 1124)
    # Processing the call arguments (line 1124)
    # Getting the type of 'M' (line 1124)
    M_195539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 36), 'M', False)
    # Processing the call keyword arguments (line 1124)
    # Getting the type of 'permc_spec' (line 1124)
    permc_spec_195540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 50), 'permc_spec', False)
    keyword_195541 = permc_spec_195540
    kwargs_195542 = {'permc_spec': keyword_195541}
    # Getting the type of 'sps' (line 1124)
    sps_195536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 20), 'sps', False)
    # Obtaining the member 'linalg' of a type (line 1124)
    linalg_195537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 20), sps_195536, 'linalg')
    # Obtaining the member 'splu' of a type (line 1124)
    splu_195538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 20), linalg_195537, 'splu')
    # Calling splu(args, kwargs) (line 1124)
    splu_call_result_195543 = invoke(stypy.reporting.localization.Localization(__file__, 1124, 20), splu_195538, *[M_195539], **kwargs_195542)
    
    # Obtaining the member 'solve' of a type (line 1124)
    solve_195544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 20), splu_call_result_195543, 'solve')
    # Assigning a type to the variable 'solve' (line 1124)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1124, 12), 'solve', solve_195544)
    
    # Assigning a Name to a Name (line 1125):
    
    # Assigning a Name to a Name (line 1125):
    # Getting the type of 'True' (line 1125)
    True_195545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 19), 'True')
    # Assigning a type to the variable 'splu' (line 1125)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1125, 12), 'splu', True_195545)
    # SSA branch for the except part of a try statement (line 1121)
    # SSA branch for the except '<any exception>' branch of a try statement (line 1121)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Name to a Name (line 1127):
    
    # Assigning a Name to a Name (line 1127):
    # Getting the type of 'True' (line 1127)
    True_195546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 20), 'True')
    # Assigning a type to the variable 'lstsq' (line 1127)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 12), 'lstsq', True_195546)
    
    # Assigning a Call to a Name (line 1128):
    
    # Assigning a Call to a Name (line 1128):
    
    # Call to _get_solver(...): (line 1128)
    # Processing the call arguments (line 1128)
    # Getting the type of 'sparse' (line 1128)
    sparse_195548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 32), 'sparse', False)
    # Getting the type of 'lstsq' (line 1128)
    lstsq_195549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 40), 'lstsq', False)
    # Getting the type of 'sym_pos' (line 1128)
    sym_pos_195550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 47), 'sym_pos', False)
    # Getting the type of 'cholesky' (line 1128)
    cholesky_195551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 56), 'cholesky', False)
    # Processing the call keyword arguments (line 1128)
    kwargs_195552 = {}
    # Getting the type of '_get_solver' (line 1128)
    _get_solver_195547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 20), '_get_solver', False)
    # Calling _get_solver(args, kwargs) (line 1128)
    _get_solver_call_result_195553 = invoke(stypy.reporting.localization.Localization(__file__, 1128, 20), _get_solver_195547, *[sparse_195548, lstsq_195549, sym_pos_195550, cholesky_195551], **kwargs_195552)
    
    # Assigning a type to the variable 'solve' (line 1128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1128, 12), 'solve', _get_solver_call_result_195553)
    # SSA join for try-except statement (line 1121)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1118)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1131):
    
    # Assigning a Call to a Name (line 1131):
    
    # Call to dot(...): (line 1131)
    # Processing the call arguments (line 1131)
    
    # Call to reshape(...): (line 1131)
    # Processing the call arguments (line 1131)
    int_195558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1131, 31), 'int')
    int_195559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1131, 35), 'int')
    # Processing the call keyword arguments (line 1131)
    kwargs_195560 = {}
    # Getting the type of 'Dinv' (line 1131)
    Dinv_195556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 18), 'Dinv', False)
    # Obtaining the member 'reshape' of a type (line 1131)
    reshape_195557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1131, 18), Dinv_195556, 'reshape')
    # Calling reshape(args, kwargs) (line 1131)
    reshape_call_result_195561 = invoke(stypy.reporting.localization.Localization(__file__, 1131, 18), reshape_195557, *[int_195558, int_195559], **kwargs_195560)
    
    # Getting the type of 'A' (line 1131)
    A_195562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 40), 'A', False)
    # Obtaining the member 'T' of a type (line 1131)
    T_195563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1131, 40), A_195562, 'T')
    # Applying the binary operator '*' (line 1131)
    result_mul_195564 = python_operator(stypy.reporting.localization.Localization(__file__, 1131, 18), '*', reshape_call_result_195561, T_195563)
    
    # Processing the call keyword arguments (line 1131)
    kwargs_195565 = {}
    # Getting the type of 'A' (line 1131)
    A_195554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 12), 'A', False)
    # Obtaining the member 'dot' of a type (line 1131)
    dot_195555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1131, 12), A_195554, 'dot')
    # Calling dot(args, kwargs) (line 1131)
    dot_call_result_195566 = invoke(stypy.reporting.localization.Localization(__file__, 1131, 12), dot_195555, *[result_mul_195564], **kwargs_195565)
    
    # Assigning a type to the variable 'M' (line 1131)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1131, 8), 'M', dot_call_result_195566)
    # SSA join for if statement (line 1118)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'cholesky' (line 1137)
    cholesky_195567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 7), 'cholesky')
    # Testing the type of an if condition (line 1137)
    if_condition_195568 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1137, 4), cholesky_195567)
    # Assigning a type to the variable 'if_condition_195568' (line 1137)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1137, 4), 'if_condition_195568', if_condition_195568)
    # SSA begins for if statement (line 1137)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 1138)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1139):
    
    # Assigning a Call to a Name (line 1139):
    
    # Call to cho_factor(...): (line 1139)
    # Processing the call arguments (line 1139)
    # Getting the type of 'M' (line 1139)
    M_195572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 37), 'M', False)
    # Processing the call keyword arguments (line 1139)
    kwargs_195573 = {}
    # Getting the type of 'sp' (line 1139)
    sp_195569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 16), 'sp', False)
    # Obtaining the member 'linalg' of a type (line 1139)
    linalg_195570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1139, 16), sp_195569, 'linalg')
    # Obtaining the member 'cho_factor' of a type (line 1139)
    cho_factor_195571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1139, 16), linalg_195570, 'cho_factor')
    # Calling cho_factor(args, kwargs) (line 1139)
    cho_factor_call_result_195574 = invoke(stypy.reporting.localization.Localization(__file__, 1139, 16), cho_factor_195571, *[M_195572], **kwargs_195573)
    
    # Assigning a type to the variable 'L' (line 1139)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1139, 12), 'L', cho_factor_call_result_195574)
    # SSA branch for the except part of a try statement (line 1138)
    # SSA branch for the except '<any exception>' branch of a try statement (line 1138)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Name to a Name (line 1141):
    
    # Assigning a Name to a Name (line 1141):
    # Getting the type of 'False' (line 1141)
    False_195575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 23), 'False')
    # Assigning a type to the variable 'cholesky' (line 1141)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 12), 'cholesky', False_195575)
    
    # Assigning a Call to a Name (line 1142):
    
    # Assigning a Call to a Name (line 1142):
    
    # Call to _get_solver(...): (line 1142)
    # Processing the call arguments (line 1142)
    # Getting the type of 'sparse' (line 1142)
    sparse_195577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 32), 'sparse', False)
    # Getting the type of 'lstsq' (line 1142)
    lstsq_195578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 40), 'lstsq', False)
    # Getting the type of 'sym_pos' (line 1142)
    sym_pos_195579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 47), 'sym_pos', False)
    # Getting the type of 'cholesky' (line 1142)
    cholesky_195580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 56), 'cholesky', False)
    # Processing the call keyword arguments (line 1142)
    kwargs_195581 = {}
    # Getting the type of '_get_solver' (line 1142)
    _get_solver_195576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 20), '_get_solver', False)
    # Calling _get_solver(args, kwargs) (line 1142)
    _get_solver_call_result_195582 = invoke(stypy.reporting.localization.Localization(__file__, 1142, 20), _get_solver_195576, *[sparse_195577, lstsq_195578, sym_pos_195579, cholesky_195580], **kwargs_195581)
    
    # Assigning a type to the variable 'solve' (line 1142)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1142, 12), 'solve', _get_solver_call_result_195582)
    # SSA join for try-except statement (line 1138)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1137)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a IfExp to a Name (line 1147):
    
    # Assigning a IfExp to a Name (line 1147):
    
    # Getting the type of 'pc' (line 1147)
    pc_195583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 25), 'pc')
    # Testing the type of an if expression (line 1147)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1147, 20), pc_195583)
    # SSA begins for if expression (line 1147)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    int_195584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 20), 'int')
    # SSA branch for the else part of an if expression (line 1147)
    module_type_store.open_ssa_branch('if expression else')
    int_195585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 33), 'int')
    # SSA join for if expression (line 1147)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_195586 = union_type.UnionType.add(int_195584, int_195585)
    
    # Assigning a type to the variable 'n_corrections' (line 1147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 4), 'n_corrections', if_exp_195586)
    
    # Assigning a Num to a Name (line 1149):
    
    # Assigning a Num to a Name (line 1149):
    int_195587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1149, 8), 'int')
    # Assigning a type to the variable 'i' (line 1149)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1149, 4), 'i', int_195587)
    
    # Assigning a Tuple to a Tuple (line 1150):
    
    # Assigning a Num to a Name (line 1150):
    int_195588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1150, 38), 'int')
    # Assigning a type to the variable 'tuple_assignment_192583' (line 1150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 4), 'tuple_assignment_192583', int_195588)
    
    # Assigning a Num to a Name (line 1150):
    int_195589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1150, 41), 'int')
    # Assigning a type to the variable 'tuple_assignment_192584' (line 1150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 4), 'tuple_assignment_192584', int_195589)
    
    # Assigning a Num to a Name (line 1150):
    int_195590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1150, 44), 'int')
    # Assigning a type to the variable 'tuple_assignment_192585' (line 1150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 4), 'tuple_assignment_192585', int_195590)
    
    # Assigning a Num to a Name (line 1150):
    int_195591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1150, 47), 'int')
    # Assigning a type to the variable 'tuple_assignment_192586' (line 1150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 4), 'tuple_assignment_192586', int_195591)
    
    # Assigning a Num to a Name (line 1150):
    int_195592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1150, 50), 'int')
    # Assigning a type to the variable 'tuple_assignment_192587' (line 1150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 4), 'tuple_assignment_192587', int_195592)
    
    # Assigning a Name to a Name (line 1150):
    # Getting the type of 'tuple_assignment_192583' (line 1150)
    tuple_assignment_192583_195593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 4), 'tuple_assignment_192583')
    # Assigning a type to the variable 'alpha' (line 1150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 4), 'alpha', tuple_assignment_192583_195593)
    
    # Assigning a Name to a Name (line 1150):
    # Getting the type of 'tuple_assignment_192584' (line 1150)
    tuple_assignment_192584_195594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 4), 'tuple_assignment_192584')
    # Assigning a type to the variable 'd_x' (line 1150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 11), 'd_x', tuple_assignment_192584_195594)
    
    # Assigning a Name to a Name (line 1150):
    # Getting the type of 'tuple_assignment_192585' (line 1150)
    tuple_assignment_192585_195595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 4), 'tuple_assignment_192585')
    # Assigning a type to the variable 'd_z' (line 1150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 16), 'd_z', tuple_assignment_192585_195595)
    
    # Assigning a Name to a Name (line 1150):
    # Getting the type of 'tuple_assignment_192586' (line 1150)
    tuple_assignment_192586_195596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 4), 'tuple_assignment_192586')
    # Assigning a type to the variable 'd_tau' (line 1150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 21), 'd_tau', tuple_assignment_192586_195596)
    
    # Assigning a Name to a Name (line 1150):
    # Getting the type of 'tuple_assignment_192587' (line 1150)
    tuple_assignment_192587_195597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 4), 'tuple_assignment_192587')
    # Assigning a type to the variable 'd_kappa' (line 1150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 28), 'd_kappa', tuple_assignment_192587_195597)
    
    
    # Getting the type of 'i' (line 1151)
    i_195598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 10), 'i')
    # Getting the type of 'n_corrections' (line 1151)
    n_corrections_195599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 15), 'n_corrections')
    # Applying the binary operator '<=' (line 1151)
    result_le_195600 = python_operator(stypy.reporting.localization.Localization(__file__, 1151, 10), '<=', i_195598, n_corrections_195599)
    
    # Testing the type of an if condition (line 1151)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1151, 4), result_le_195600)
    # SSA begins for while statement (line 1151)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a BinOp to a Name (line 1153):
    
    # Assigning a BinOp to a Name (line 1153):
    
    # Call to eta(...): (line 1153)
    # Processing the call arguments (line 1153)
    # Getting the type of 'gamma' (line 1153)
    gamma_195602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 20), 'gamma', False)
    # Processing the call keyword arguments (line 1153)
    kwargs_195603 = {}
    # Getting the type of 'eta' (line 1153)
    eta_195601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 16), 'eta', False)
    # Calling eta(args, kwargs) (line 1153)
    eta_call_result_195604 = invoke(stypy.reporting.localization.Localization(__file__, 1153, 16), eta_195601, *[gamma_195602], **kwargs_195603)
    
    # Getting the type of 'r_P' (line 1153)
    r_P_195605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 29), 'r_P')
    # Applying the binary operator '*' (line 1153)
    result_mul_195606 = python_operator(stypy.reporting.localization.Localization(__file__, 1153, 16), '*', eta_call_result_195604, r_P_195605)
    
    # Assigning a type to the variable 'rhatp' (line 1153)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1153, 8), 'rhatp', result_mul_195606)
    
    # Assigning a BinOp to a Name (line 1154):
    
    # Assigning a BinOp to a Name (line 1154):
    
    # Call to eta(...): (line 1154)
    # Processing the call arguments (line 1154)
    # Getting the type of 'gamma' (line 1154)
    gamma_195608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 20), 'gamma', False)
    # Processing the call keyword arguments (line 1154)
    kwargs_195609 = {}
    # Getting the type of 'eta' (line 1154)
    eta_195607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 16), 'eta', False)
    # Calling eta(args, kwargs) (line 1154)
    eta_call_result_195610 = invoke(stypy.reporting.localization.Localization(__file__, 1154, 16), eta_195607, *[gamma_195608], **kwargs_195609)
    
    # Getting the type of 'r_D' (line 1154)
    r_D_195611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 29), 'r_D')
    # Applying the binary operator '*' (line 1154)
    result_mul_195612 = python_operator(stypy.reporting.localization.Localization(__file__, 1154, 16), '*', eta_call_result_195610, r_D_195611)
    
    # Assigning a type to the variable 'rhatd' (line 1154)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1154, 8), 'rhatd', result_mul_195612)
    
    # Assigning a Call to a Name (line 1155):
    
    # Assigning a Call to a Name (line 1155):
    
    # Call to reshape(...): (line 1155)
    # Processing the call arguments (line 1155)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1155)
    tuple_195624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1155, 52), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1155)
    # Adding element type (line 1155)
    int_195625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1155, 52), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1155, 52), tuple_195624, int_195625)
    
    # Processing the call keyword arguments (line 1155)
    kwargs_195626 = {}
    
    # Call to array(...): (line 1155)
    # Processing the call arguments (line 1155)
    
    # Call to eta(...): (line 1155)
    # Processing the call arguments (line 1155)
    # Getting the type of 'gamma' (line 1155)
    gamma_195616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 29), 'gamma', False)
    # Processing the call keyword arguments (line 1155)
    kwargs_195617 = {}
    # Getting the type of 'eta' (line 1155)
    eta_195615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 25), 'eta', False)
    # Calling eta(args, kwargs) (line 1155)
    eta_call_result_195618 = invoke(stypy.reporting.localization.Localization(__file__, 1155, 25), eta_195615, *[gamma_195616], **kwargs_195617)
    
    # Getting the type of 'r_G' (line 1155)
    r_G_195619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 38), 'r_G', False)
    # Applying the binary operator '*' (line 1155)
    result_mul_195620 = python_operator(stypy.reporting.localization.Localization(__file__, 1155, 25), '*', eta_call_result_195618, r_G_195619)
    
    # Processing the call keyword arguments (line 1155)
    kwargs_195621 = {}
    # Getting the type of 'np' (line 1155)
    np_195613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 16), 'np', False)
    # Obtaining the member 'array' of a type (line 1155)
    array_195614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1155, 16), np_195613, 'array')
    # Calling array(args, kwargs) (line 1155)
    array_call_result_195622 = invoke(stypy.reporting.localization.Localization(__file__, 1155, 16), array_195614, *[result_mul_195620], **kwargs_195621)
    
    # Obtaining the member 'reshape' of a type (line 1155)
    reshape_195623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1155, 16), array_call_result_195622, 'reshape')
    # Calling reshape(args, kwargs) (line 1155)
    reshape_call_result_195627 = invoke(stypy.reporting.localization.Localization(__file__, 1155, 16), reshape_195623, *[tuple_195624], **kwargs_195626)
    
    # Assigning a type to the variable 'rhatg' (line 1155)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1155, 8), 'rhatg', reshape_call_result_195627)
    
    # Assigning a BinOp to a Name (line 1158):
    
    # Assigning a BinOp to a Name (line 1158):
    # Getting the type of 'gamma' (line 1158)
    gamma_195628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 17), 'gamma')
    # Getting the type of 'mu' (line 1158)
    mu_195629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 25), 'mu')
    # Applying the binary operator '*' (line 1158)
    result_mul_195630 = python_operator(stypy.reporting.localization.Localization(__file__, 1158, 17), '*', gamma_195628, mu_195629)
    
    # Getting the type of 'x' (line 1158)
    x_195631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 30), 'x')
    # Getting the type of 'z' (line 1158)
    z_195632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 34), 'z')
    # Applying the binary operator '*' (line 1158)
    result_mul_195633 = python_operator(stypy.reporting.localization.Localization(__file__, 1158, 30), '*', x_195631, z_195632)
    
    # Applying the binary operator '-' (line 1158)
    result_sub_195634 = python_operator(stypy.reporting.localization.Localization(__file__, 1158, 17), '-', result_mul_195630, result_mul_195633)
    
    # Assigning a type to the variable 'rhatxs' (line 1158)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1158, 8), 'rhatxs', result_sub_195634)
    
    # Assigning a Call to a Name (line 1159):
    
    # Assigning a Call to a Name (line 1159):
    
    # Call to reshape(...): (line 1159)
    # Processing the call arguments (line 1159)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1159)
    tuple_195647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1159, 61), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1159)
    # Adding element type (line 1159)
    int_195648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1159, 61), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1159, 61), tuple_195647, int_195648)
    
    # Processing the call keyword arguments (line 1159)
    kwargs_195649 = {}
    
    # Call to array(...): (line 1159)
    # Processing the call arguments (line 1159)
    # Getting the type of 'gamma' (line 1159)
    gamma_195637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 26), 'gamma', False)
    # Getting the type of 'mu' (line 1159)
    mu_195638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 34), 'mu', False)
    # Applying the binary operator '*' (line 1159)
    result_mul_195639 = python_operator(stypy.reporting.localization.Localization(__file__, 1159, 26), '*', gamma_195637, mu_195638)
    
    # Getting the type of 'tau' (line 1159)
    tau_195640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 39), 'tau', False)
    # Getting the type of 'kappa' (line 1159)
    kappa_195641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 45), 'kappa', False)
    # Applying the binary operator '*' (line 1159)
    result_mul_195642 = python_operator(stypy.reporting.localization.Localization(__file__, 1159, 39), '*', tau_195640, kappa_195641)
    
    # Applying the binary operator '-' (line 1159)
    result_sub_195643 = python_operator(stypy.reporting.localization.Localization(__file__, 1159, 26), '-', result_mul_195639, result_mul_195642)
    
    # Processing the call keyword arguments (line 1159)
    kwargs_195644 = {}
    # Getting the type of 'np' (line 1159)
    np_195635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 17), 'np', False)
    # Obtaining the member 'array' of a type (line 1159)
    array_195636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1159, 17), np_195635, 'array')
    # Calling array(args, kwargs) (line 1159)
    array_call_result_195645 = invoke(stypy.reporting.localization.Localization(__file__, 1159, 17), array_195636, *[result_sub_195643], **kwargs_195644)
    
    # Obtaining the member 'reshape' of a type (line 1159)
    reshape_195646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1159, 17), array_call_result_195645, 'reshape')
    # Calling reshape(args, kwargs) (line 1159)
    reshape_call_result_195650 = invoke(stypy.reporting.localization.Localization(__file__, 1159, 17), reshape_195646, *[tuple_195647], **kwargs_195649)
    
    # Assigning a type to the variable 'rhattk' (line 1159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1159, 8), 'rhattk', reshape_call_result_195650)
    
    
    # Getting the type of 'i' (line 1161)
    i_195651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 11), 'i')
    int_195652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1161, 16), 'int')
    # Applying the binary operator '==' (line 1161)
    result_eq_195653 = python_operator(stypy.reporting.localization.Localization(__file__, 1161, 11), '==', i_195651, int_195652)
    
    # Testing the type of an if condition (line 1161)
    if_condition_195654 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1161, 8), result_eq_195653)
    # Assigning a type to the variable 'if_condition_195654' (line 1161)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1161, 8), 'if_condition_195654', if_condition_195654)
    # SSA begins for if statement (line 1161)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'ip' (line 1162)
    ip_195655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 15), 'ip')
    # Testing the type of an if condition (line 1162)
    if_condition_195656 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1162, 12), ip_195655)
    # Assigning a type to the variable 'if_condition_195656' (line 1162)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1162, 12), 'if_condition_195656', if_condition_195656)
    # SSA begins for if statement (line 1162)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1164):
    
    # Assigning a BinOp to a Name (line 1164):
    int_195657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1164, 27), 'int')
    # Getting the type of 'alpha' (line 1164)
    alpha_195658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 31), 'alpha')
    # Applying the binary operator '-' (line 1164)
    result_sub_195659 = python_operator(stypy.reporting.localization.Localization(__file__, 1164, 27), '-', int_195657, alpha_195658)
    
    # Getting the type of 'gamma' (line 1164)
    gamma_195660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 40), 'gamma')
    # Applying the binary operator '*' (line 1164)
    result_mul_195661 = python_operator(stypy.reporting.localization.Localization(__file__, 1164, 26), '*', result_sub_195659, gamma_195660)
    
    # Getting the type of 'mu' (line 1164)
    mu_195662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 48), 'mu')
    # Applying the binary operator '*' (line 1164)
    result_mul_195663 = python_operator(stypy.reporting.localization.Localization(__file__, 1164, 46), '*', result_mul_195661, mu_195662)
    
    # Getting the type of 'x' (line 1165)
    x_195664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 26), 'x')
    # Getting the type of 'z' (line 1165)
    z_195665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 30), 'z')
    # Applying the binary operator '*' (line 1165)
    result_mul_195666 = python_operator(stypy.reporting.localization.Localization(__file__, 1165, 26), '*', x_195664, z_195665)
    
    # Applying the binary operator '-' (line 1164)
    result_sub_195667 = python_operator(stypy.reporting.localization.Localization(__file__, 1164, 26), '-', result_mul_195663, result_mul_195666)
    
    # Getting the type of 'alpha' (line 1165)
    alpha_195668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 34), 'alpha')
    int_195669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1165, 41), 'int')
    # Applying the binary operator '**' (line 1165)
    result_pow_195670 = python_operator(stypy.reporting.localization.Localization(__file__, 1165, 34), '**', alpha_195668, int_195669)
    
    # Getting the type of 'd_x' (line 1165)
    d_x_195671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 45), 'd_x')
    # Applying the binary operator '*' (line 1165)
    result_mul_195672 = python_operator(stypy.reporting.localization.Localization(__file__, 1165, 34), '*', result_pow_195670, d_x_195671)
    
    # Getting the type of 'd_z' (line 1165)
    d_z_195673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 51), 'd_z')
    # Applying the binary operator '*' (line 1165)
    result_mul_195674 = python_operator(stypy.reporting.localization.Localization(__file__, 1165, 49), '*', result_mul_195672, d_z_195673)
    
    # Applying the binary operator '-' (line 1165)
    result_sub_195675 = python_operator(stypy.reporting.localization.Localization(__file__, 1165, 32), '-', result_sub_195667, result_mul_195674)
    
    # Assigning a type to the variable 'rhatxs' (line 1164)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1164, 16), 'rhatxs', result_sub_195675)
    
    # Assigning a Call to a Name (line 1166):
    
    # Assigning a Call to a Name (line 1166):
    
    # Call to reshape(...): (line 1166)
    # Processing the call arguments (line 1166)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1176)
    tuple_195700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1176, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1176)
    # Adding element type (line 1176)
    int_195701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1176, 21), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1176, 21), tuple_195700, int_195701)
    
    # Processing the call keyword arguments (line 1166)
    kwargs_195702 = {}
    
    # Call to array(...): (line 1166)
    # Processing the call arguments (line 1166)
    int_195678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1167, 21), 'int')
    # Getting the type of 'alpha' (line 1168)
    alpha_195679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 21), 'alpha', False)
    # Applying the binary operator '-' (line 1167)
    result_sub_195680 = python_operator(stypy.reporting.localization.Localization(__file__, 1167, 21), '-', int_195678, alpha_195679)
    
    # Getting the type of 'gamma' (line 1169)
    gamma_195681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 20), 'gamma', False)
    # Applying the binary operator '*' (line 1167)
    result_mul_195682 = python_operator(stypy.reporting.localization.Localization(__file__, 1167, 20), '*', result_sub_195680, gamma_195681)
    
    # Getting the type of 'mu' (line 1170)
    mu_195683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 20), 'mu', False)
    # Applying the binary operator '*' (line 1169)
    result_mul_195684 = python_operator(stypy.reporting.localization.Localization(__file__, 1169, 26), '*', result_mul_195682, mu_195683)
    
    # Getting the type of 'tau' (line 1171)
    tau_195685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 20), 'tau', False)
    # Getting the type of 'kappa' (line 1172)
    kappa_195686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 20), 'kappa', False)
    # Applying the binary operator '*' (line 1171)
    result_mul_195687 = python_operator(stypy.reporting.localization.Localization(__file__, 1171, 20), '*', tau_195685, kappa_195686)
    
    # Applying the binary operator '-' (line 1167)
    result_sub_195688 = python_operator(stypy.reporting.localization.Localization(__file__, 1167, 20), '-', result_mul_195684, result_mul_195687)
    
    # Getting the type of 'alpha' (line 1173)
    alpha_195689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 20), 'alpha', False)
    int_195690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1173, 27), 'int')
    # Applying the binary operator '**' (line 1173)
    result_pow_195691 = python_operator(stypy.reporting.localization.Localization(__file__, 1173, 20), '**', alpha_195689, int_195690)
    
    # Getting the type of 'd_tau' (line 1174)
    d_tau_195692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 20), 'd_tau', False)
    # Applying the binary operator '*' (line 1173)
    result_mul_195693 = python_operator(stypy.reporting.localization.Localization(__file__, 1173, 20), '*', result_pow_195691, d_tau_195692)
    
    # Getting the type of 'd_kappa' (line 1175)
    d_kappa_195694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 20), 'd_kappa', False)
    # Applying the binary operator '*' (line 1174)
    result_mul_195695 = python_operator(stypy.reporting.localization.Localization(__file__, 1174, 26), '*', result_mul_195693, d_kappa_195694)
    
    # Applying the binary operator '-' (line 1172)
    result_sub_195696 = python_operator(stypy.reporting.localization.Localization(__file__, 1172, 26), '-', result_sub_195688, result_mul_195695)
    
    # Processing the call keyword arguments (line 1166)
    kwargs_195697 = {}
    # Getting the type of 'np' (line 1166)
    np_195676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 25), 'np', False)
    # Obtaining the member 'array' of a type (line 1166)
    array_195677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 25), np_195676, 'array')
    # Calling array(args, kwargs) (line 1166)
    array_call_result_195698 = invoke(stypy.reporting.localization.Localization(__file__, 1166, 25), array_195677, *[result_sub_195696], **kwargs_195697)
    
    # Obtaining the member 'reshape' of a type (line 1166)
    reshape_195699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 25), array_call_result_195698, 'reshape')
    # Calling reshape(args, kwargs) (line 1166)
    reshape_call_result_195703 = invoke(stypy.reporting.localization.Localization(__file__, 1166, 25), reshape_195699, *[tuple_195700], **kwargs_195702)
    
    # Assigning a type to the variable 'rhattk' (line 1166)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1166, 16), 'rhattk', reshape_call_result_195703)
    # SSA branch for the else part of an if statement (line 1162)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'rhatxs' (line 1180)
    rhatxs_195704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 16), 'rhatxs')
    # Getting the type of 'd_x' (line 1180)
    d_x_195705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 26), 'd_x')
    # Getting the type of 'd_z' (line 1180)
    d_z_195706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 32), 'd_z')
    # Applying the binary operator '*' (line 1180)
    result_mul_195707 = python_operator(stypy.reporting.localization.Localization(__file__, 1180, 26), '*', d_x_195705, d_z_195706)
    
    # Applying the binary operator '-=' (line 1180)
    result_isub_195708 = python_operator(stypy.reporting.localization.Localization(__file__, 1180, 16), '-=', rhatxs_195704, result_mul_195707)
    # Assigning a type to the variable 'rhatxs' (line 1180)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1180, 16), 'rhatxs', result_isub_195708)
    
    
    # Getting the type of 'rhattk' (line 1181)
    rhattk_195709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 16), 'rhattk')
    # Getting the type of 'd_tau' (line 1181)
    d_tau_195710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 26), 'd_tau')
    # Getting the type of 'd_kappa' (line 1181)
    d_kappa_195711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 34), 'd_kappa')
    # Applying the binary operator '*' (line 1181)
    result_mul_195712 = python_operator(stypy.reporting.localization.Localization(__file__, 1181, 26), '*', d_tau_195710, d_kappa_195711)
    
    # Applying the binary operator '-=' (line 1181)
    result_isub_195713 = python_operator(stypy.reporting.localization.Localization(__file__, 1181, 16), '-=', rhattk_195709, result_mul_195712)
    # Assigning a type to the variable 'rhattk' (line 1181)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1181, 16), 'rhattk', result_isub_195713)
    
    # SSA join for if statement (line 1162)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1161)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 1196):
    
    # Assigning a Name to a Name (line 1196):
    # Getting the type of 'False' (line 1196)
    False_195714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 17), 'False')
    # Assigning a type to the variable 'solved' (line 1196)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1196, 8), 'solved', False_195714)
    
    
    # Getting the type of 'solved' (line 1197)
    solved_195715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 18), 'solved')
    # Applying the 'not' unary operator (line 1197)
    result_not__195716 = python_operator(stypy.reporting.localization.Localization(__file__, 1197, 14), 'not', solved_195715)
    
    # Testing the type of an if condition (line 1197)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1197, 8), result_not__195716)
    # SSA begins for while statement (line 1197)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    
    # SSA begins for try-except statement (line 1198)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a IfExp to a Name (line 1199):
    
    # Assigning a IfExp to a Name (line 1199):
    
    # Getting the type of 'cholesky' (line 1199)
    cholesky_195717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 34), 'cholesky')
    # Testing the type of an if expression (line 1199)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1199, 29), cholesky_195717)
    # SSA begins for if expression (line 1199)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    # Getting the type of 'L' (line 1199)
    L_195718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 29), 'L')
    # SSA branch for the else part of an if expression (line 1199)
    module_type_store.open_ssa_branch('if expression else')
    # Getting the type of 'M' (line 1199)
    M_195719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 48), 'M')
    # SSA join for if expression (line 1199)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_195720 = union_type.UnionType.add(L_195718, M_195719)
    
    # Assigning a type to the variable 'solve_this' (line 1199)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1199, 16), 'solve_this', if_exp_195720)
    
    # Assigning a Call to a Tuple (line 1201):
    
    # Assigning a Subscript to a Name (line 1201):
    
    # Obtaining the type of the subscript
    int_195721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1201, 16), 'int')
    
    # Call to _sym_solve(...): (line 1201)
    # Processing the call arguments (line 1201)
    # Getting the type of 'Dinv' (line 1201)
    Dinv_195723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 34), 'Dinv', False)
    # Getting the type of 'solve_this' (line 1201)
    solve_this_195724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 40), 'solve_this', False)
    # Getting the type of 'A' (line 1201)
    A_195725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 52), 'A', False)
    # Getting the type of 'c' (line 1201)
    c_195726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 55), 'c', False)
    # Getting the type of 'b' (line 1201)
    b_195727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 58), 'b', False)
    # Getting the type of 'solve' (line 1201)
    solve_195728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 61), 'solve', False)
    # Getting the type of 'splu' (line 1201)
    splu_195729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 68), 'splu', False)
    # Processing the call keyword arguments (line 1201)
    kwargs_195730 = {}
    # Getting the type of '_sym_solve' (line 1201)
    _sym_solve_195722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 23), '_sym_solve', False)
    # Calling _sym_solve(args, kwargs) (line 1201)
    _sym_solve_call_result_195731 = invoke(stypy.reporting.localization.Localization(__file__, 1201, 23), _sym_solve_195722, *[Dinv_195723, solve_this_195724, A_195725, c_195726, b_195727, solve_195728, splu_195729], **kwargs_195730)
    
    # Obtaining the member '__getitem__' of a type (line 1201)
    getitem___195732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1201, 16), _sym_solve_call_result_195731, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1201)
    subscript_call_result_195733 = invoke(stypy.reporting.localization.Localization(__file__, 1201, 16), getitem___195732, int_195721)
    
    # Assigning a type to the variable 'tuple_var_assignment_192588' (line 1201)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1201, 16), 'tuple_var_assignment_192588', subscript_call_result_195733)
    
    # Assigning a Subscript to a Name (line 1201):
    
    # Obtaining the type of the subscript
    int_195734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1201, 16), 'int')
    
    # Call to _sym_solve(...): (line 1201)
    # Processing the call arguments (line 1201)
    # Getting the type of 'Dinv' (line 1201)
    Dinv_195736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 34), 'Dinv', False)
    # Getting the type of 'solve_this' (line 1201)
    solve_this_195737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 40), 'solve_this', False)
    # Getting the type of 'A' (line 1201)
    A_195738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 52), 'A', False)
    # Getting the type of 'c' (line 1201)
    c_195739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 55), 'c', False)
    # Getting the type of 'b' (line 1201)
    b_195740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 58), 'b', False)
    # Getting the type of 'solve' (line 1201)
    solve_195741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 61), 'solve', False)
    # Getting the type of 'splu' (line 1201)
    splu_195742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 68), 'splu', False)
    # Processing the call keyword arguments (line 1201)
    kwargs_195743 = {}
    # Getting the type of '_sym_solve' (line 1201)
    _sym_solve_195735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 23), '_sym_solve', False)
    # Calling _sym_solve(args, kwargs) (line 1201)
    _sym_solve_call_result_195744 = invoke(stypy.reporting.localization.Localization(__file__, 1201, 23), _sym_solve_195735, *[Dinv_195736, solve_this_195737, A_195738, c_195739, b_195740, solve_195741, splu_195742], **kwargs_195743)
    
    # Obtaining the member '__getitem__' of a type (line 1201)
    getitem___195745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1201, 16), _sym_solve_call_result_195744, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1201)
    subscript_call_result_195746 = invoke(stypy.reporting.localization.Localization(__file__, 1201, 16), getitem___195745, int_195734)
    
    # Assigning a type to the variable 'tuple_var_assignment_192589' (line 1201)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1201, 16), 'tuple_var_assignment_192589', subscript_call_result_195746)
    
    # Assigning a Name to a Name (line 1201):
    # Getting the type of 'tuple_var_assignment_192588' (line 1201)
    tuple_var_assignment_192588_195747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 16), 'tuple_var_assignment_192588')
    # Assigning a type to the variable 'p' (line 1201)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1201, 16), 'p', tuple_var_assignment_192588_195747)
    
    # Assigning a Name to a Name (line 1201):
    # Getting the type of 'tuple_var_assignment_192589' (line 1201)
    tuple_var_assignment_192589_195748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 16), 'tuple_var_assignment_192589')
    # Assigning a type to the variable 'q' (line 1201)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1201, 19), 'q', tuple_var_assignment_192589_195748)
    
    # Assigning a Call to a Tuple (line 1203):
    
    # Assigning a Subscript to a Name (line 1203):
    
    # Obtaining the type of the subscript
    int_195749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1203, 16), 'int')
    
    # Call to _sym_solve(...): (line 1203)
    # Processing the call arguments (line 1203)
    # Getting the type of 'Dinv' (line 1203)
    Dinv_195751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 34), 'Dinv', False)
    # Getting the type of 'solve_this' (line 1203)
    solve_this_195752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 40), 'solve_this', False)
    # Getting the type of 'A' (line 1203)
    A_195753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 52), 'A', False)
    # Getting the type of 'rhatd' (line 1203)
    rhatd_195754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 55), 'rhatd', False)
    int_195755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1204, 35), 'int')
    # Getting the type of 'x' (line 1204)
    x_195756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 39), 'x', False)
    # Applying the binary operator 'div' (line 1204)
    result_div_195757 = python_operator(stypy.reporting.localization.Localization(__file__, 1204, 35), 'div', int_195755, x_195756)
    
    # Getting the type of 'rhatxs' (line 1204)
    rhatxs_195758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 44), 'rhatxs', False)
    # Applying the binary operator '*' (line 1204)
    result_mul_195759 = python_operator(stypy.reporting.localization.Localization(__file__, 1204, 34), '*', result_div_195757, rhatxs_195758)
    
    # Applying the binary operator '-' (line 1203)
    result_sub_195760 = python_operator(stypy.reporting.localization.Localization(__file__, 1203, 55), '-', rhatd_195754, result_mul_195759)
    
    # Getting the type of 'rhatp' (line 1204)
    rhatp_195761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 52), 'rhatp', False)
    # Getting the type of 'solve' (line 1204)
    solve_195762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 59), 'solve', False)
    # Getting the type of 'splu' (line 1204)
    splu_195763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 66), 'splu', False)
    # Processing the call keyword arguments (line 1203)
    kwargs_195764 = {}
    # Getting the type of '_sym_solve' (line 1203)
    _sym_solve_195750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 23), '_sym_solve', False)
    # Calling _sym_solve(args, kwargs) (line 1203)
    _sym_solve_call_result_195765 = invoke(stypy.reporting.localization.Localization(__file__, 1203, 23), _sym_solve_195750, *[Dinv_195751, solve_this_195752, A_195753, result_sub_195760, rhatp_195761, solve_195762, splu_195763], **kwargs_195764)
    
    # Obtaining the member '__getitem__' of a type (line 1203)
    getitem___195766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1203, 16), _sym_solve_call_result_195765, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1203)
    subscript_call_result_195767 = invoke(stypy.reporting.localization.Localization(__file__, 1203, 16), getitem___195766, int_195749)
    
    # Assigning a type to the variable 'tuple_var_assignment_192590' (line 1203)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1203, 16), 'tuple_var_assignment_192590', subscript_call_result_195767)
    
    # Assigning a Subscript to a Name (line 1203):
    
    # Obtaining the type of the subscript
    int_195768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1203, 16), 'int')
    
    # Call to _sym_solve(...): (line 1203)
    # Processing the call arguments (line 1203)
    # Getting the type of 'Dinv' (line 1203)
    Dinv_195770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 34), 'Dinv', False)
    # Getting the type of 'solve_this' (line 1203)
    solve_this_195771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 40), 'solve_this', False)
    # Getting the type of 'A' (line 1203)
    A_195772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 52), 'A', False)
    # Getting the type of 'rhatd' (line 1203)
    rhatd_195773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 55), 'rhatd', False)
    int_195774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1204, 35), 'int')
    # Getting the type of 'x' (line 1204)
    x_195775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 39), 'x', False)
    # Applying the binary operator 'div' (line 1204)
    result_div_195776 = python_operator(stypy.reporting.localization.Localization(__file__, 1204, 35), 'div', int_195774, x_195775)
    
    # Getting the type of 'rhatxs' (line 1204)
    rhatxs_195777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 44), 'rhatxs', False)
    # Applying the binary operator '*' (line 1204)
    result_mul_195778 = python_operator(stypy.reporting.localization.Localization(__file__, 1204, 34), '*', result_div_195776, rhatxs_195777)
    
    # Applying the binary operator '-' (line 1203)
    result_sub_195779 = python_operator(stypy.reporting.localization.Localization(__file__, 1203, 55), '-', rhatd_195773, result_mul_195778)
    
    # Getting the type of 'rhatp' (line 1204)
    rhatp_195780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 52), 'rhatp', False)
    # Getting the type of 'solve' (line 1204)
    solve_195781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 59), 'solve', False)
    # Getting the type of 'splu' (line 1204)
    splu_195782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 66), 'splu', False)
    # Processing the call keyword arguments (line 1203)
    kwargs_195783 = {}
    # Getting the type of '_sym_solve' (line 1203)
    _sym_solve_195769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 23), '_sym_solve', False)
    # Calling _sym_solve(args, kwargs) (line 1203)
    _sym_solve_call_result_195784 = invoke(stypy.reporting.localization.Localization(__file__, 1203, 23), _sym_solve_195769, *[Dinv_195770, solve_this_195771, A_195772, result_sub_195779, rhatp_195780, solve_195781, splu_195782], **kwargs_195783)
    
    # Obtaining the member '__getitem__' of a type (line 1203)
    getitem___195785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1203, 16), _sym_solve_call_result_195784, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1203)
    subscript_call_result_195786 = invoke(stypy.reporting.localization.Localization(__file__, 1203, 16), getitem___195785, int_195768)
    
    # Assigning a type to the variable 'tuple_var_assignment_192591' (line 1203)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1203, 16), 'tuple_var_assignment_192591', subscript_call_result_195786)
    
    # Assigning a Name to a Name (line 1203):
    # Getting the type of 'tuple_var_assignment_192590' (line 1203)
    tuple_var_assignment_192590_195787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 16), 'tuple_var_assignment_192590')
    # Assigning a type to the variable 'u' (line 1203)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1203, 16), 'u', tuple_var_assignment_192590_195787)
    
    # Assigning a Name to a Name (line 1203):
    # Getting the type of 'tuple_var_assignment_192591' (line 1203)
    tuple_var_assignment_192591_195788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 16), 'tuple_var_assignment_192591')
    # Assigning a type to the variable 'v' (line 1203)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1203, 19), 'v', tuple_var_assignment_192591_195788)
    
    
    # Evaluating a boolean operation
    
    # Call to any(...): (line 1205)
    # Processing the call arguments (line 1205)
    
    # Call to isnan(...): (line 1205)
    # Processing the call arguments (line 1205)
    # Getting the type of 'p' (line 1205)
    p_195793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 35), 'p', False)
    # Processing the call keyword arguments (line 1205)
    kwargs_195794 = {}
    # Getting the type of 'np' (line 1205)
    np_195791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 26), 'np', False)
    # Obtaining the member 'isnan' of a type (line 1205)
    isnan_195792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1205, 26), np_195791, 'isnan')
    # Calling isnan(args, kwargs) (line 1205)
    isnan_call_result_195795 = invoke(stypy.reporting.localization.Localization(__file__, 1205, 26), isnan_195792, *[p_195793], **kwargs_195794)
    
    # Processing the call keyword arguments (line 1205)
    kwargs_195796 = {}
    # Getting the type of 'np' (line 1205)
    np_195789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 19), 'np', False)
    # Obtaining the member 'any' of a type (line 1205)
    any_195790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1205, 19), np_195789, 'any')
    # Calling any(args, kwargs) (line 1205)
    any_call_result_195797 = invoke(stypy.reporting.localization.Localization(__file__, 1205, 19), any_195790, *[isnan_call_result_195795], **kwargs_195796)
    
    
    # Call to any(...): (line 1205)
    # Processing the call arguments (line 1205)
    
    # Call to isnan(...): (line 1205)
    # Processing the call arguments (line 1205)
    # Getting the type of 'q' (line 1205)
    q_195802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 58), 'q', False)
    # Processing the call keyword arguments (line 1205)
    kwargs_195803 = {}
    # Getting the type of 'np' (line 1205)
    np_195800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 49), 'np', False)
    # Obtaining the member 'isnan' of a type (line 1205)
    isnan_195801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1205, 49), np_195800, 'isnan')
    # Calling isnan(args, kwargs) (line 1205)
    isnan_call_result_195804 = invoke(stypy.reporting.localization.Localization(__file__, 1205, 49), isnan_195801, *[q_195802], **kwargs_195803)
    
    # Processing the call keyword arguments (line 1205)
    kwargs_195805 = {}
    # Getting the type of 'np' (line 1205)
    np_195798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 42), 'np', False)
    # Obtaining the member 'any' of a type (line 1205)
    any_195799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1205, 42), np_195798, 'any')
    # Calling any(args, kwargs) (line 1205)
    any_call_result_195806 = invoke(stypy.reporting.localization.Localization(__file__, 1205, 42), any_195799, *[isnan_call_result_195804], **kwargs_195805)
    
    # Applying the binary operator 'or' (line 1205)
    result_or_keyword_195807 = python_operator(stypy.reporting.localization.Localization(__file__, 1205, 19), 'or', any_call_result_195797, any_call_result_195806)
    
    # Testing the type of an if condition (line 1205)
    if_condition_195808 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1205, 16), result_or_keyword_195807)
    # Assigning a type to the variable 'if_condition_195808' (line 1205)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1205, 16), 'if_condition_195808', if_condition_195808)
    # SSA begins for if statement (line 1205)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'LinAlgError' (line 1206)
    LinAlgError_195809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 26), 'LinAlgError')
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1206, 20), LinAlgError_195809, 'raise parameter', BaseException)
    # SSA join for if statement (line 1205)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 1207):
    
    # Assigning a Name to a Name (line 1207):
    # Getting the type of 'True' (line 1207)
    True_195810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 25), 'True')
    # Assigning a type to the variable 'solved' (line 1207)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1207, 16), 'solved', True_195810)
    # SSA branch for the except part of a try statement (line 1198)
    # SSA branch for the except 'Tuple' branch of a try statement (line 1198)
    # Storing handler type
    module_type_store.open_ssa_branch('except')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1208)
    tuple_195811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1208, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1208)
    # Adding element type (line 1208)
    # Getting the type of 'LinAlgError' (line 1208)
    LinAlgError_195812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 20), 'LinAlgError')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1208, 20), tuple_195811, LinAlgError_195812)
    # Adding element type (line 1208)
    # Getting the type of 'ValueError' (line 1208)
    ValueError_195813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 33), 'ValueError')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1208, 20), tuple_195811, ValueError_195813)
    
    # Assigning a type to the variable 'e' (line 1208)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1208, 12), 'e', tuple_195811)
    
    # Assigning a Name to a Name (line 1212):
    
    # Assigning a Name to a Name (line 1212):
    # Getting the type of 'False' (line 1212)
    False_195814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 27), 'False')
    # Assigning a type to the variable 'cholesky' (line 1212)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1212, 16), 'cholesky', False_195814)
    
    
    # Getting the type of 'lstsq' (line 1213)
    lstsq_195815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 23), 'lstsq')
    # Applying the 'not' unary operator (line 1213)
    result_not__195816 = python_operator(stypy.reporting.localization.Localization(__file__, 1213, 19), 'not', lstsq_195815)
    
    # Testing the type of an if condition (line 1213)
    if_condition_195817 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1213, 16), result_not__195816)
    # Assigning a type to the variable 'if_condition_195817' (line 1213)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1213, 16), 'if_condition_195817', if_condition_195817)
    # SSA begins for if statement (line 1213)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'sym_pos' (line 1214)
    sym_pos_195818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 23), 'sym_pos')
    # Testing the type of an if condition (line 1214)
    if_condition_195819 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1214, 20), sym_pos_195818)
    # Assigning a type to the variable 'if_condition_195819' (line 1214)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 20), 'if_condition_195819', if_condition_195819)
    # SSA begins for if statement (line 1214)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 1215)
    # Processing the call arguments (line 1215)
    str_195821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1216, 28), 'str', "Solving system with option 'sym_pos':True failed. It is normal for this to happen occasionally, especially as the solution is approached. However, if you see this frequently, consider setting option 'sym_pos' to False.")
    # Getting the type of 'OptimizeWarning' (line 1221)
    OptimizeWarning_195822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 28), 'OptimizeWarning', False)
    # Processing the call keyword arguments (line 1215)
    kwargs_195823 = {}
    # Getting the type of 'warn' (line 1215)
    warn_195820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 24), 'warn', False)
    # Calling warn(args, kwargs) (line 1215)
    warn_call_result_195824 = invoke(stypy.reporting.localization.Localization(__file__, 1215, 24), warn_195820, *[str_195821, OptimizeWarning_195822], **kwargs_195823)
    
    
    # Assigning a Name to a Name (line 1222):
    
    # Assigning a Name to a Name (line 1222):
    # Getting the type of 'False' (line 1222)
    False_195825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 34), 'False')
    # Assigning a type to the variable 'sym_pos' (line 1222)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1222, 24), 'sym_pos', False_195825)
    # SSA branch for the else part of an if statement (line 1214)
    module_type_store.open_ssa_branch('else')
    
    # Call to warn(...): (line 1224)
    # Processing the call arguments (line 1224)
    str_195827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1225, 28), 'str', "Solving system with option 'sym_pos':False failed. This may happen occasionally, especially as the solution is approached. However, if you see this frequently, your problem may be numerically challenging. If you cannot improve the formulation, consider setting 'lstsq' to True.")
    # Getting the type of 'OptimizeWarning' (line 1231)
    OptimizeWarning_195828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 56), 'OptimizeWarning', False)
    # Processing the call keyword arguments (line 1224)
    kwargs_195829 = {}
    # Getting the type of 'warn' (line 1224)
    warn_195826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 24), 'warn', False)
    # Calling warn(args, kwargs) (line 1224)
    warn_call_result_195830 = invoke(stypy.reporting.localization.Localization(__file__, 1224, 24), warn_195826, *[str_195827, OptimizeWarning_195828], **kwargs_195829)
    
    
    # Assigning a Name to a Name (line 1232):
    
    # Assigning a Name to a Name (line 1232):
    # Getting the type of 'True' (line 1232)
    True_195831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 32), 'True')
    # Assigning a type to the variable 'lstsq' (line 1232)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1232, 24), 'lstsq', True_195831)
    # SSA join for if statement (line 1214)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1213)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'e' (line 1234)
    e_195832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 26), 'e')
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1234, 20), e_195832, 'raise parameter', BaseException)
    # SSA join for if statement (line 1213)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1235):
    
    # Assigning a Call to a Name (line 1235):
    
    # Call to _get_solver(...): (line 1235)
    # Processing the call arguments (line 1235)
    # Getting the type of 'sparse' (line 1235)
    sparse_195834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 36), 'sparse', False)
    # Getting the type of 'lstsq' (line 1235)
    lstsq_195835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 44), 'lstsq', False)
    # Getting the type of 'sym_pos' (line 1235)
    sym_pos_195836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 51), 'sym_pos', False)
    # Processing the call keyword arguments (line 1235)
    kwargs_195837 = {}
    # Getting the type of '_get_solver' (line 1235)
    _get_solver_195833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 24), '_get_solver', False)
    # Calling _get_solver(args, kwargs) (line 1235)
    _get_solver_call_result_195838 = invoke(stypy.reporting.localization.Localization(__file__, 1235, 24), _get_solver_195833, *[sparse_195834, lstsq_195835, sym_pos_195836], **kwargs_195837)
    
    # Assigning a type to the variable 'solve' (line 1235)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1235, 16), 'solve', _get_solver_call_result_195838)
    # SSA join for try-except statement (line 1198)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for while statement (line 1197)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1237):
    
    # Assigning a BinOp to a Name (line 1237):
    # Getting the type of 'rhatg' (line 1237)
    rhatg_195839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 18), 'rhatg')
    int_195840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1237, 26), 'int')
    # Getting the type of 'tau' (line 1237)
    tau_195841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 30), 'tau')
    # Applying the binary operator 'div' (line 1237)
    result_div_195842 = python_operator(stypy.reporting.localization.Localization(__file__, 1237, 26), 'div', int_195840, tau_195841)
    
    # Getting the type of 'rhattk' (line 1237)
    rhattk_195843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 36), 'rhattk')
    # Applying the binary operator '*' (line 1237)
    result_mul_195844 = python_operator(stypy.reporting.localization.Localization(__file__, 1237, 34), '*', result_div_195842, rhattk_195843)
    
    # Applying the binary operator '+' (line 1237)
    result_add_195845 = python_operator(stypy.reporting.localization.Localization(__file__, 1237, 18), '+', rhatg_195839, result_mul_195844)
    
    
    
    # Call to dot(...): (line 1237)
    # Processing the call arguments (line 1237)
    # Getting the type of 'u' (line 1237)
    u_195848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 53), 'u', False)
    # Processing the call keyword arguments (line 1237)
    kwargs_195849 = {}
    # Getting the type of 'c' (line 1237)
    c_195846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 47), 'c', False)
    # Obtaining the member 'dot' of a type (line 1237)
    dot_195847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1237, 47), c_195846, 'dot')
    # Calling dot(args, kwargs) (line 1237)
    dot_call_result_195850 = invoke(stypy.reporting.localization.Localization(__file__, 1237, 47), dot_195847, *[u_195848], **kwargs_195849)
    
    # Applying the 'usub' unary operator (line 1237)
    result___neg___195851 = python_operator(stypy.reporting.localization.Localization(__file__, 1237, 46), 'usub', dot_call_result_195850)
    
    
    # Call to dot(...): (line 1237)
    # Processing the call arguments (line 1237)
    # Getting the type of 'v' (line 1237)
    v_195854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 64), 'v', False)
    # Processing the call keyword arguments (line 1237)
    kwargs_195855 = {}
    # Getting the type of 'b' (line 1237)
    b_195852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 58), 'b', False)
    # Obtaining the member 'dot' of a type (line 1237)
    dot_195853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1237, 58), b_195852, 'dot')
    # Calling dot(args, kwargs) (line 1237)
    dot_call_result_195856 = invoke(stypy.reporting.localization.Localization(__file__, 1237, 58), dot_195853, *[v_195854], **kwargs_195855)
    
    # Applying the binary operator '+' (line 1237)
    result_add_195857 = python_operator(stypy.reporting.localization.Localization(__file__, 1237, 46), '+', result___neg___195851, dot_call_result_195856)
    
    # Applying the binary operator '-' (line 1237)
    result_sub_195858 = python_operator(stypy.reporting.localization.Localization(__file__, 1237, 43), '-', result_add_195845, result_add_195857)
    
    int_195859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, 18), 'int')
    # Getting the type of 'tau' (line 1238)
    tau_195860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 22), 'tau')
    # Applying the binary operator 'div' (line 1238)
    result_div_195861 = python_operator(stypy.reporting.localization.Localization(__file__, 1238, 18), 'div', int_195859, tau_195860)
    
    # Getting the type of 'kappa' (line 1238)
    kappa_195862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 28), 'kappa')
    # Applying the binary operator '*' (line 1238)
    result_mul_195863 = python_operator(stypy.reporting.localization.Localization(__file__, 1238, 26), '*', result_div_195861, kappa_195862)
    
    
    
    # Call to dot(...): (line 1238)
    # Processing the call arguments (line 1238)
    # Getting the type of 'p' (line 1238)
    p_195866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 44), 'p', False)
    # Processing the call keyword arguments (line 1238)
    kwargs_195867 = {}
    # Getting the type of 'c' (line 1238)
    c_195864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 38), 'c', False)
    # Obtaining the member 'dot' of a type (line 1238)
    dot_195865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 38), c_195864, 'dot')
    # Calling dot(args, kwargs) (line 1238)
    dot_call_result_195868 = invoke(stypy.reporting.localization.Localization(__file__, 1238, 38), dot_195865, *[p_195866], **kwargs_195867)
    
    # Applying the 'usub' unary operator (line 1238)
    result___neg___195869 = python_operator(stypy.reporting.localization.Localization(__file__, 1238, 37), 'usub', dot_call_result_195868)
    
    
    # Call to dot(...): (line 1238)
    # Processing the call arguments (line 1238)
    # Getting the type of 'q' (line 1238)
    q_195872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 55), 'q', False)
    # Processing the call keyword arguments (line 1238)
    kwargs_195873 = {}
    # Getting the type of 'b' (line 1238)
    b_195870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 49), 'b', False)
    # Obtaining the member 'dot' of a type (line 1238)
    dot_195871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 49), b_195870, 'dot')
    # Calling dot(args, kwargs) (line 1238)
    dot_call_result_195874 = invoke(stypy.reporting.localization.Localization(__file__, 1238, 49), dot_195871, *[q_195872], **kwargs_195873)
    
    # Applying the binary operator '+' (line 1238)
    result_add_195875 = python_operator(stypy.reporting.localization.Localization(__file__, 1238, 37), '+', result___neg___195869, dot_call_result_195874)
    
    # Applying the binary operator '+' (line 1238)
    result_add_195876 = python_operator(stypy.reporting.localization.Localization(__file__, 1238, 18), '+', result_mul_195863, result_add_195875)
    
    # Applying the binary operator 'div' (line 1237)
    result_div_195877 = python_operator(stypy.reporting.localization.Localization(__file__, 1237, 17), 'div', result_sub_195858, result_add_195876)
    
    # Assigning a type to the variable 'd_tau' (line 1237)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1237, 8), 'd_tau', result_div_195877)
    
    # Assigning a BinOp to a Name (line 1239):
    
    # Assigning a BinOp to a Name (line 1239):
    # Getting the type of 'u' (line 1239)
    u_195878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 14), 'u')
    # Getting the type of 'p' (line 1239)
    p_195879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 18), 'p')
    # Getting the type of 'd_tau' (line 1239)
    d_tau_195880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 22), 'd_tau')
    # Applying the binary operator '*' (line 1239)
    result_mul_195881 = python_operator(stypy.reporting.localization.Localization(__file__, 1239, 18), '*', p_195879, d_tau_195880)
    
    # Applying the binary operator '+' (line 1239)
    result_add_195882 = python_operator(stypy.reporting.localization.Localization(__file__, 1239, 14), '+', u_195878, result_mul_195881)
    
    # Assigning a type to the variable 'd_x' (line 1239)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1239, 8), 'd_x', result_add_195882)
    
    # Assigning a BinOp to a Name (line 1240):
    
    # Assigning a BinOp to a Name (line 1240):
    # Getting the type of 'v' (line 1240)
    v_195883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 14), 'v')
    # Getting the type of 'q' (line 1240)
    q_195884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 18), 'q')
    # Getting the type of 'd_tau' (line 1240)
    d_tau_195885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 22), 'd_tau')
    # Applying the binary operator '*' (line 1240)
    result_mul_195886 = python_operator(stypy.reporting.localization.Localization(__file__, 1240, 18), '*', q_195884, d_tau_195885)
    
    # Applying the binary operator '+' (line 1240)
    result_add_195887 = python_operator(stypy.reporting.localization.Localization(__file__, 1240, 14), '+', v_195883, result_mul_195886)
    
    # Assigning a type to the variable 'd_y' (line 1240)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1240, 8), 'd_y', result_add_195887)
    
    # Assigning a BinOp to a Name (line 1243):
    
    # Assigning a BinOp to a Name (line 1243):
    int_195888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1243, 15), 'int')
    # Getting the type of 'x' (line 1243)
    x_195889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 19), 'x')
    # Applying the binary operator 'div' (line 1243)
    result_div_195890 = python_operator(stypy.reporting.localization.Localization(__file__, 1243, 15), 'div', int_195888, x_195889)
    
    # Getting the type of 'rhatxs' (line 1243)
    rhatxs_195891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 25), 'rhatxs')
    # Getting the type of 'z' (line 1243)
    z_195892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 34), 'z')
    # Getting the type of 'd_x' (line 1243)
    d_x_195893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 38), 'd_x')
    # Applying the binary operator '*' (line 1243)
    result_mul_195894 = python_operator(stypy.reporting.localization.Localization(__file__, 1243, 34), '*', z_195892, d_x_195893)
    
    # Applying the binary operator '-' (line 1243)
    result_sub_195895 = python_operator(stypy.reporting.localization.Localization(__file__, 1243, 25), '-', rhatxs_195891, result_mul_195894)
    
    # Applying the binary operator '*' (line 1243)
    result_mul_195896 = python_operator(stypy.reporting.localization.Localization(__file__, 1243, 14), '*', result_div_195890, result_sub_195895)
    
    # Assigning a type to the variable 'd_z' (line 1243)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1243, 8), 'd_z', result_mul_195896)
    
    # Assigning a BinOp to a Name (line 1244):
    
    # Assigning a BinOp to a Name (line 1244):
    int_195897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1244, 18), 'int')
    # Getting the type of 'tau' (line 1244)
    tau_195898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 22), 'tau')
    # Applying the binary operator 'div' (line 1244)
    result_div_195899 = python_operator(stypy.reporting.localization.Localization(__file__, 1244, 18), 'div', int_195897, tau_195898)
    
    # Getting the type of 'rhattk' (line 1244)
    rhattk_195900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 29), 'rhattk')
    # Getting the type of 'kappa' (line 1244)
    kappa_195901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 38), 'kappa')
    # Getting the type of 'd_tau' (line 1244)
    d_tau_195902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 46), 'd_tau')
    # Applying the binary operator '*' (line 1244)
    result_mul_195903 = python_operator(stypy.reporting.localization.Localization(__file__, 1244, 38), '*', kappa_195901, d_tau_195902)
    
    # Applying the binary operator '-' (line 1244)
    result_sub_195904 = python_operator(stypy.reporting.localization.Localization(__file__, 1244, 29), '-', rhattk_195900, result_mul_195903)
    
    # Applying the binary operator '*' (line 1244)
    result_mul_195905 = python_operator(stypy.reporting.localization.Localization(__file__, 1244, 26), '*', result_div_195899, result_sub_195904)
    
    # Assigning a type to the variable 'd_kappa' (line 1244)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1244, 8), 'd_kappa', result_mul_195905)
    
    # Assigning a Call to a Name (line 1247):
    
    # Assigning a Call to a Name (line 1247):
    
    # Call to _get_step(...): (line 1247)
    # Processing the call arguments (line 1247)
    # Getting the type of 'x' (line 1247)
    x_195907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 26), 'x', False)
    # Getting the type of 'd_x' (line 1247)
    d_x_195908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 29), 'd_x', False)
    # Getting the type of 'z' (line 1247)
    z_195909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 34), 'z', False)
    # Getting the type of 'd_z' (line 1247)
    d_z_195910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 37), 'd_z', False)
    # Getting the type of 'tau' (line 1247)
    tau_195911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 42), 'tau', False)
    # Getting the type of 'd_tau' (line 1247)
    d_tau_195912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 47), 'd_tau', False)
    # Getting the type of 'kappa' (line 1247)
    kappa_195913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 54), 'kappa', False)
    # Getting the type of 'd_kappa' (line 1247)
    d_kappa_195914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 61), 'd_kappa', False)
    int_195915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1247, 70), 'int')
    # Processing the call keyword arguments (line 1247)
    kwargs_195916 = {}
    # Getting the type of '_get_step' (line 1247)
    _get_step_195906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 16), '_get_step', False)
    # Calling _get_step(args, kwargs) (line 1247)
    _get_step_call_result_195917 = invoke(stypy.reporting.localization.Localization(__file__, 1247, 16), _get_step_195906, *[x_195907, d_x_195908, z_195909, d_z_195910, tau_195911, d_tau_195912, kappa_195913, d_kappa_195914, int_195915], **kwargs_195916)
    
    # Assigning a type to the variable 'alpha' (line 1247)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1247, 8), 'alpha', _get_step_call_result_195917)
    
    # Getting the type of 'ip' (line 1248)
    ip_195918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 11), 'ip')
    # Testing the type of an if condition (line 1248)
    if_condition_195919 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1248, 8), ip_195918)
    # Assigning a type to the variable 'if_condition_195919' (line 1248)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1248, 8), 'if_condition_195919', if_condition_195919)
    # SSA begins for if statement (line 1248)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1249):
    
    # Assigning a Num to a Name (line 1249):
    int_195920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1249, 20), 'int')
    # Assigning a type to the variable 'gamma' (line 1249)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1249, 12), 'gamma', int_195920)
    # SSA branch for the else part of an if statement (line 1248)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Name (line 1251):
    
    # Assigning a Num to a Name (line 1251):
    float_195921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1251, 20), 'float')
    # Assigning a type to the variable 'beta1' (line 1251)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1251, 12), 'beta1', float_195921)
    
    # Assigning a BinOp to a Name (line 1252):
    
    # Assigning a BinOp to a Name (line 1252):
    int_195922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1252, 21), 'int')
    # Getting the type of 'alpha' (line 1252)
    alpha_195923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 25), 'alpha')
    # Applying the binary operator '-' (line 1252)
    result_sub_195924 = python_operator(stypy.reporting.localization.Localization(__file__, 1252, 21), '-', int_195922, alpha_195923)
    
    int_195925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1252, 33), 'int')
    # Applying the binary operator '**' (line 1252)
    result_pow_195926 = python_operator(stypy.reporting.localization.Localization(__file__, 1252, 20), '**', result_sub_195924, int_195925)
    
    
    # Call to min(...): (line 1252)
    # Processing the call arguments (line 1252)
    # Getting the type of 'beta1' (line 1252)
    beta1_195928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 41), 'beta1', False)
    int_195929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1252, 49), 'int')
    # Getting the type of 'alpha' (line 1252)
    alpha_195930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 53), 'alpha', False)
    # Applying the binary operator '-' (line 1252)
    result_sub_195931 = python_operator(stypy.reporting.localization.Localization(__file__, 1252, 49), '-', int_195929, alpha_195930)
    
    # Processing the call keyword arguments (line 1252)
    kwargs_195932 = {}
    # Getting the type of 'min' (line 1252)
    min_195927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 37), 'min', False)
    # Calling min(args, kwargs) (line 1252)
    min_call_result_195933 = invoke(stypy.reporting.localization.Localization(__file__, 1252, 37), min_195927, *[beta1_195928, result_sub_195931], **kwargs_195932)
    
    # Applying the binary operator '*' (line 1252)
    result_mul_195934 = python_operator(stypy.reporting.localization.Localization(__file__, 1252, 20), '*', result_pow_195926, min_call_result_195933)
    
    # Assigning a type to the variable 'gamma' (line 1252)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1252, 12), 'gamma', result_mul_195934)
    # SSA join for if statement (line 1248)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'i' (line 1253)
    i_195935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 8), 'i')
    int_195936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1253, 13), 'int')
    # Applying the binary operator '+=' (line 1253)
    result_iadd_195937 = python_operator(stypy.reporting.localization.Localization(__file__, 1253, 8), '+=', i_195935, int_195936)
    # Assigning a type to the variable 'i' (line 1253)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1253, 8), 'i', result_iadd_195937)
    
    # SSA join for while statement (line 1151)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1255)
    tuple_195938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1255, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1255)
    # Adding element type (line 1255)
    # Getting the type of 'd_x' (line 1255)
    d_x_195939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 11), 'd_x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1255, 11), tuple_195938, d_x_195939)
    # Adding element type (line 1255)
    # Getting the type of 'd_y' (line 1255)
    d_y_195940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 16), 'd_y')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1255, 11), tuple_195938, d_y_195940)
    # Adding element type (line 1255)
    # Getting the type of 'd_z' (line 1255)
    d_z_195941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 21), 'd_z')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1255, 11), tuple_195938, d_z_195941)
    # Adding element type (line 1255)
    # Getting the type of 'd_tau' (line 1255)
    d_tau_195942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 26), 'd_tau')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1255, 11), tuple_195938, d_tau_195942)
    # Adding element type (line 1255)
    # Getting the type of 'd_kappa' (line 1255)
    d_kappa_195943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 33), 'd_kappa')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1255, 11), tuple_195938, d_kappa_195943)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1255)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1255, 4), 'stypy_return_type', tuple_195938)
    
    # ################# End of '_get_delta(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_delta' in the type store
    # Getting the type of 'stypy_return_type' (line 1019)
    stypy_return_type_195944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_195944)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_delta'
    return stypy_return_type_195944

# Assigning a type to the variable '_get_delta' (line 1019)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1019, 0), '_get_delta', _get_delta)

@norecursion
def _sym_solve(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1258)
    False_195945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 47), 'False')
    defaults = [False_195945]
    # Create a new context for function '_sym_solve'
    module_type_store = module_type_store.open_function_context('_sym_solve', 1258, 0, False)
    
    # Passed parameters checking function
    _sym_solve.stypy_localization = localization
    _sym_solve.stypy_type_of_self = None
    _sym_solve.stypy_type_store = module_type_store
    _sym_solve.stypy_function_name = '_sym_solve'
    _sym_solve.stypy_param_names_list = ['Dinv', 'M', 'A', 'r1', 'r2', 'solve', 'splu']
    _sym_solve.stypy_varargs_param_name = None
    _sym_solve.stypy_kwargs_param_name = None
    _sym_solve.stypy_call_defaults = defaults
    _sym_solve.stypy_call_varargs = varargs
    _sym_solve.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_sym_solve', ['Dinv', 'M', 'A', 'r1', 'r2', 'solve', 'splu'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_sym_solve', localization, ['Dinv', 'M', 'A', 'r1', 'r2', 'solve', 'splu'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_sym_solve(...)' code ##################

    str_195946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1269, (-1)), 'str', '\n    An implementation of [1] equation 8.31 and 8.32\n\n    References\n    ----------\n    .. [1] Andersen, Erling D., and Knud D. Andersen. "The MOSEK interior point\n           optimizer for linear programming: an implementation of the\n           homogeneous algorithm." High performance optimization. Springer US,\n           2000. 197-232.\n\n    ')
    
    # Assigning a BinOp to a Name (line 1271):
    
    # Assigning a BinOp to a Name (line 1271):
    # Getting the type of 'r2' (line 1271)
    r2_195947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 8), 'r2')
    
    # Call to dot(...): (line 1271)
    # Processing the call arguments (line 1271)
    # Getting the type of 'Dinv' (line 1271)
    Dinv_195950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 19), 'Dinv', False)
    # Getting the type of 'r1' (line 1271)
    r1_195951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 26), 'r1', False)
    # Applying the binary operator '*' (line 1271)
    result_mul_195952 = python_operator(stypy.reporting.localization.Localization(__file__, 1271, 19), '*', Dinv_195950, r1_195951)
    
    # Processing the call keyword arguments (line 1271)
    kwargs_195953 = {}
    # Getting the type of 'A' (line 1271)
    A_195948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 13), 'A', False)
    # Obtaining the member 'dot' of a type (line 1271)
    dot_195949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1271, 13), A_195948, 'dot')
    # Calling dot(args, kwargs) (line 1271)
    dot_call_result_195954 = invoke(stypy.reporting.localization.Localization(__file__, 1271, 13), dot_195949, *[result_mul_195952], **kwargs_195953)
    
    # Applying the binary operator '+' (line 1271)
    result_add_195955 = python_operator(stypy.reporting.localization.Localization(__file__, 1271, 8), '+', r2_195947, dot_call_result_195954)
    
    # Assigning a type to the variable 'r' (line 1271)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1271, 4), 'r', result_add_195955)
    
    # Getting the type of 'splu' (line 1272)
    splu_195956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 7), 'splu')
    # Testing the type of an if condition (line 1272)
    if_condition_195957 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1272, 4), splu_195956)
    # Assigning a type to the variable 'if_condition_195957' (line 1272)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1272, 4), 'if_condition_195957', if_condition_195957)
    # SSA begins for if statement (line 1272)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1273):
    
    # Assigning a Call to a Name (line 1273):
    
    # Call to solve(...): (line 1273)
    # Processing the call arguments (line 1273)
    # Getting the type of 'r' (line 1273)
    r_195959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 18), 'r', False)
    # Processing the call keyword arguments (line 1273)
    kwargs_195960 = {}
    # Getting the type of 'solve' (line 1273)
    solve_195958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 12), 'solve', False)
    # Calling solve(args, kwargs) (line 1273)
    solve_call_result_195961 = invoke(stypy.reporting.localization.Localization(__file__, 1273, 12), solve_195958, *[r_195959], **kwargs_195960)
    
    # Assigning a type to the variable 'v' (line 1273)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1273, 8), 'v', solve_call_result_195961)
    # SSA branch for the else part of an if statement (line 1272)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1275):
    
    # Assigning a Call to a Name (line 1275):
    
    # Call to solve(...): (line 1275)
    # Processing the call arguments (line 1275)
    # Getting the type of 'M' (line 1275)
    M_195963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 18), 'M', False)
    # Getting the type of 'r' (line 1275)
    r_195964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 21), 'r', False)
    # Processing the call keyword arguments (line 1275)
    kwargs_195965 = {}
    # Getting the type of 'solve' (line 1275)
    solve_195962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 12), 'solve', False)
    # Calling solve(args, kwargs) (line 1275)
    solve_call_result_195966 = invoke(stypy.reporting.localization.Localization(__file__, 1275, 12), solve_195962, *[M_195963, r_195964], **kwargs_195965)
    
    # Assigning a type to the variable 'v' (line 1275)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1275, 8), 'v', solve_call_result_195966)
    # SSA join for if statement (line 1272)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1277):
    
    # Assigning a BinOp to a Name (line 1277):
    # Getting the type of 'Dinv' (line 1277)
    Dinv_195967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 8), 'Dinv')
    
    # Call to dot(...): (line 1277)
    # Processing the call arguments (line 1277)
    # Getting the type of 'v' (line 1277)
    v_195971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 24), 'v', False)
    # Processing the call keyword arguments (line 1277)
    kwargs_195972 = {}
    # Getting the type of 'A' (line 1277)
    A_195968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 16), 'A', False)
    # Obtaining the member 'T' of a type (line 1277)
    T_195969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1277, 16), A_195968, 'T')
    # Obtaining the member 'dot' of a type (line 1277)
    dot_195970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1277, 16), T_195969, 'dot')
    # Calling dot(args, kwargs) (line 1277)
    dot_call_result_195973 = invoke(stypy.reporting.localization.Localization(__file__, 1277, 16), dot_195970, *[v_195971], **kwargs_195972)
    
    # Getting the type of 'r1' (line 1277)
    r1_195974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 29), 'r1')
    # Applying the binary operator '-' (line 1277)
    result_sub_195975 = python_operator(stypy.reporting.localization.Localization(__file__, 1277, 16), '-', dot_call_result_195973, r1_195974)
    
    # Applying the binary operator '*' (line 1277)
    result_mul_195976 = python_operator(stypy.reporting.localization.Localization(__file__, 1277, 8), '*', Dinv_195967, result_sub_195975)
    
    # Assigning a type to the variable 'u' (line 1277)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1277, 4), 'u', result_mul_195976)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1278)
    tuple_195977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1278, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1278)
    # Adding element type (line 1278)
    # Getting the type of 'u' (line 1278)
    u_195978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 11), 'u')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1278, 11), tuple_195977, u_195978)
    # Adding element type (line 1278)
    # Getting the type of 'v' (line 1278)
    v_195979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 14), 'v')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1278, 11), tuple_195977, v_195979)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1278)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1278, 4), 'stypy_return_type', tuple_195977)
    
    # ################# End of '_sym_solve(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_sym_solve' in the type store
    # Getting the type of 'stypy_return_type' (line 1258)
    stypy_return_type_195980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_195980)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_sym_solve'
    return stypy_return_type_195980

# Assigning a type to the variable '_sym_solve' (line 1258)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1258, 0), '_sym_solve', _sym_solve)

@norecursion
def _get_step(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_get_step'
    module_type_store = module_type_store.open_function_context('_get_step', 1281, 0, False)
    
    # Passed parameters checking function
    _get_step.stypy_localization = localization
    _get_step.stypy_type_of_self = None
    _get_step.stypy_type_store = module_type_store
    _get_step.stypy_function_name = '_get_step'
    _get_step.stypy_param_names_list = ['x', 'd_x', 'z', 'd_z', 'tau', 'd_tau', 'kappa', 'd_kappa', 'alpha0']
    _get_step.stypy_varargs_param_name = None
    _get_step.stypy_kwargs_param_name = None
    _get_step.stypy_call_defaults = defaults
    _get_step.stypy_call_varargs = varargs
    _get_step.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_step', ['x', 'd_x', 'z', 'd_z', 'tau', 'd_tau', 'kappa', 'd_kappa', 'alpha0'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_step', localization, ['x', 'd_x', 'z', 'd_z', 'tau', 'd_tau', 'kappa', 'd_kappa', 'alpha0'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_step(...)' code ##################

    str_195981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1292, (-1)), 'str', '\n    An implementation of [1] equation 8.21\n\n    References\n    ----------\n    .. [1] Andersen, Erling D., and Knud D. Andersen. "The MOSEK interior point\n           optimizer for linear programming: an implementation of the\n           homogeneous algorithm." High performance optimization. Springer US,\n           2000. 197-232.\n\n    ')
    
    # Assigning a Compare to a Name (line 1297):
    
    # Assigning a Compare to a Name (line 1297):
    
    # Getting the type of 'd_x' (line 1297)
    d_x_195982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 10), 'd_x')
    int_195983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, 16), 'int')
    # Applying the binary operator '<' (line 1297)
    result_lt_195984 = python_operator(stypy.reporting.localization.Localization(__file__, 1297, 10), '<', d_x_195982, int_195983)
    
    # Assigning a type to the variable 'i_x' (line 1297)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 4), 'i_x', result_lt_195984)
    
    # Assigning a Compare to a Name (line 1298):
    
    # Assigning a Compare to a Name (line 1298):
    
    # Getting the type of 'd_z' (line 1298)
    d_z_195985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 10), 'd_z')
    int_195986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1298, 16), 'int')
    # Applying the binary operator '<' (line 1298)
    result_lt_195987 = python_operator(stypy.reporting.localization.Localization(__file__, 1298, 10), '<', d_z_195985, int_195986)
    
    # Assigning a type to the variable 'i_z' (line 1298)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1298, 4), 'i_z', result_lt_195987)
    
    # Assigning a IfExp to a Name (line 1299):
    
    # Assigning a IfExp to a Name (line 1299):
    
    
    # Call to any(...): (line 1299)
    # Processing the call arguments (line 1299)
    # Getting the type of 'i_x' (line 1299)
    i_x_195990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 60), 'i_x', False)
    # Processing the call keyword arguments (line 1299)
    kwargs_195991 = {}
    # Getting the type of 'np' (line 1299)
    np_195988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 53), 'np', False)
    # Obtaining the member 'any' of a type (line 1299)
    any_195989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 53), np_195988, 'any')
    # Calling any(args, kwargs) (line 1299)
    any_call_result_195992 = invoke(stypy.reporting.localization.Localization(__file__, 1299, 53), any_195989, *[i_x_195990], **kwargs_195991)
    
    # Testing the type of an if expression (line 1299)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1299, 14), any_call_result_195992)
    # SSA begins for if expression (line 1299)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    # Getting the type of 'alpha0' (line 1299)
    alpha0_195993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 14), 'alpha0')
    
    # Call to min(...): (line 1299)
    # Processing the call arguments (line 1299)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i_x' (line 1299)
    i_x_195996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 32), 'i_x', False)
    # Getting the type of 'x' (line 1299)
    x_195997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 30), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 1299)
    getitem___195998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 30), x_195997, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1299)
    subscript_call_result_195999 = invoke(stypy.reporting.localization.Localization(__file__, 1299, 30), getitem___195998, i_x_195996)
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i_x' (line 1299)
    i_x_196000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 44), 'i_x', False)
    # Getting the type of 'd_x' (line 1299)
    d_x_196001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 40), 'd_x', False)
    # Obtaining the member '__getitem__' of a type (line 1299)
    getitem___196002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 40), d_x_196001, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1299)
    subscript_call_result_196003 = invoke(stypy.reporting.localization.Localization(__file__, 1299, 40), getitem___196002, i_x_196000)
    
    # Applying the 'usub' unary operator (line 1299)
    result___neg___196004 = python_operator(stypy.reporting.localization.Localization(__file__, 1299, 39), 'usub', subscript_call_result_196003)
    
    # Applying the binary operator 'div' (line 1299)
    result_div_196005 = python_operator(stypy.reporting.localization.Localization(__file__, 1299, 30), 'div', subscript_call_result_195999, result___neg___196004)
    
    # Processing the call keyword arguments (line 1299)
    kwargs_196006 = {}
    # Getting the type of 'np' (line 1299)
    np_195994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 23), 'np', False)
    # Obtaining the member 'min' of a type (line 1299)
    min_195995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 23), np_195994, 'min')
    # Calling min(args, kwargs) (line 1299)
    min_call_result_196007 = invoke(stypy.reporting.localization.Localization(__file__, 1299, 23), min_195995, *[result_div_196005], **kwargs_196006)
    
    # Applying the binary operator '*' (line 1299)
    result_mul_196008 = python_operator(stypy.reporting.localization.Localization(__file__, 1299, 14), '*', alpha0_195993, min_call_result_196007)
    
    # SSA branch for the else part of an if expression (line 1299)
    module_type_store.open_ssa_branch('if expression else')
    int_196009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1299, 70), 'int')
    # SSA join for if expression (line 1299)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_196010 = union_type.UnionType.add(result_mul_196008, int_196009)
    
    # Assigning a type to the variable 'alpha_x' (line 1299)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1299, 4), 'alpha_x', if_exp_196010)
    
    # Assigning a IfExp to a Name (line 1300):
    
    # Assigning a IfExp to a Name (line 1300):
    
    
    # Getting the type of 'd_tau' (line 1300)
    d_tau_196011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 41), 'd_tau')
    int_196012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1300, 49), 'int')
    # Applying the binary operator '<' (line 1300)
    result_lt_196013 = python_operator(stypy.reporting.localization.Localization(__file__, 1300, 41), '<', d_tau_196011, int_196012)
    
    # Testing the type of an if expression (line 1300)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1300, 16), result_lt_196013)
    # SSA begins for if expression (line 1300)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    # Getting the type of 'alpha0' (line 1300)
    alpha0_196014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 16), 'alpha0')
    # Getting the type of 'tau' (line 1300)
    tau_196015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 25), 'tau')
    # Applying the binary operator '*' (line 1300)
    result_mul_196016 = python_operator(stypy.reporting.localization.Localization(__file__, 1300, 16), '*', alpha0_196014, tau_196015)
    
    
    # Getting the type of 'd_tau' (line 1300)
    d_tau_196017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 32), 'd_tau')
    # Applying the 'usub' unary operator (line 1300)
    result___neg___196018 = python_operator(stypy.reporting.localization.Localization(__file__, 1300, 31), 'usub', d_tau_196017)
    
    # Applying the binary operator 'div' (line 1300)
    result_div_196019 = python_operator(stypy.reporting.localization.Localization(__file__, 1300, 29), 'div', result_mul_196016, result___neg___196018)
    
    # SSA branch for the else part of an if expression (line 1300)
    module_type_store.open_ssa_branch('if expression else')
    int_196020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1300, 56), 'int')
    # SSA join for if expression (line 1300)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_196021 = union_type.UnionType.add(result_div_196019, int_196020)
    
    # Assigning a type to the variable 'alpha_tau' (line 1300)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1300, 4), 'alpha_tau', if_exp_196021)
    
    # Assigning a IfExp to a Name (line 1301):
    
    # Assigning a IfExp to a Name (line 1301):
    
    
    # Call to any(...): (line 1301)
    # Processing the call arguments (line 1301)
    # Getting the type of 'i_z' (line 1301)
    i_z_196024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 60), 'i_z', False)
    # Processing the call keyword arguments (line 1301)
    kwargs_196025 = {}
    # Getting the type of 'np' (line 1301)
    np_196022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 53), 'np', False)
    # Obtaining the member 'any' of a type (line 1301)
    any_196023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1301, 53), np_196022, 'any')
    # Calling any(args, kwargs) (line 1301)
    any_call_result_196026 = invoke(stypy.reporting.localization.Localization(__file__, 1301, 53), any_196023, *[i_z_196024], **kwargs_196025)
    
    # Testing the type of an if expression (line 1301)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1301, 14), any_call_result_196026)
    # SSA begins for if expression (line 1301)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    # Getting the type of 'alpha0' (line 1301)
    alpha0_196027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 14), 'alpha0')
    
    # Call to min(...): (line 1301)
    # Processing the call arguments (line 1301)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i_z' (line 1301)
    i_z_196030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 32), 'i_z', False)
    # Getting the type of 'z' (line 1301)
    z_196031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 30), 'z', False)
    # Obtaining the member '__getitem__' of a type (line 1301)
    getitem___196032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1301, 30), z_196031, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1301)
    subscript_call_result_196033 = invoke(stypy.reporting.localization.Localization(__file__, 1301, 30), getitem___196032, i_z_196030)
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i_z' (line 1301)
    i_z_196034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 44), 'i_z', False)
    # Getting the type of 'd_z' (line 1301)
    d_z_196035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 40), 'd_z', False)
    # Obtaining the member '__getitem__' of a type (line 1301)
    getitem___196036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1301, 40), d_z_196035, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1301)
    subscript_call_result_196037 = invoke(stypy.reporting.localization.Localization(__file__, 1301, 40), getitem___196036, i_z_196034)
    
    # Applying the 'usub' unary operator (line 1301)
    result___neg___196038 = python_operator(stypy.reporting.localization.Localization(__file__, 1301, 39), 'usub', subscript_call_result_196037)
    
    # Applying the binary operator 'div' (line 1301)
    result_div_196039 = python_operator(stypy.reporting.localization.Localization(__file__, 1301, 30), 'div', subscript_call_result_196033, result___neg___196038)
    
    # Processing the call keyword arguments (line 1301)
    kwargs_196040 = {}
    # Getting the type of 'np' (line 1301)
    np_196028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 23), 'np', False)
    # Obtaining the member 'min' of a type (line 1301)
    min_196029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1301, 23), np_196028, 'min')
    # Calling min(args, kwargs) (line 1301)
    min_call_result_196041 = invoke(stypy.reporting.localization.Localization(__file__, 1301, 23), min_196029, *[result_div_196039], **kwargs_196040)
    
    # Applying the binary operator '*' (line 1301)
    result_mul_196042 = python_operator(stypy.reporting.localization.Localization(__file__, 1301, 14), '*', alpha0_196027, min_call_result_196041)
    
    # SSA branch for the else part of an if expression (line 1301)
    module_type_store.open_ssa_branch('if expression else')
    int_196043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1301, 70), 'int')
    # SSA join for if expression (line 1301)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_196044 = union_type.UnionType.add(result_mul_196042, int_196043)
    
    # Assigning a type to the variable 'alpha_z' (line 1301)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1301, 4), 'alpha_z', if_exp_196044)
    
    # Assigning a IfExp to a Name (line 1302):
    
    # Assigning a IfExp to a Name (line 1302):
    
    
    # Getting the type of 'd_kappa' (line 1302)
    d_kappa_196045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 47), 'd_kappa')
    int_196046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1302, 57), 'int')
    # Applying the binary operator '<' (line 1302)
    result_lt_196047 = python_operator(stypy.reporting.localization.Localization(__file__, 1302, 47), '<', d_kappa_196045, int_196046)
    
    # Testing the type of an if expression (line 1302)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1302, 18), result_lt_196047)
    # SSA begins for if expression (line 1302)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    # Getting the type of 'alpha0' (line 1302)
    alpha0_196048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 18), 'alpha0')
    # Getting the type of 'kappa' (line 1302)
    kappa_196049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 27), 'kappa')
    # Applying the binary operator '*' (line 1302)
    result_mul_196050 = python_operator(stypy.reporting.localization.Localization(__file__, 1302, 18), '*', alpha0_196048, kappa_196049)
    
    
    # Getting the type of 'd_kappa' (line 1302)
    d_kappa_196051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 36), 'd_kappa')
    # Applying the 'usub' unary operator (line 1302)
    result___neg___196052 = python_operator(stypy.reporting.localization.Localization(__file__, 1302, 35), 'usub', d_kappa_196051)
    
    # Applying the binary operator 'div' (line 1302)
    result_div_196053 = python_operator(stypy.reporting.localization.Localization(__file__, 1302, 33), 'div', result_mul_196050, result___neg___196052)
    
    # SSA branch for the else part of an if expression (line 1302)
    module_type_store.open_ssa_branch('if expression else')
    int_196054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1302, 64), 'int')
    # SSA join for if expression (line 1302)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_196055 = union_type.UnionType.add(result_div_196053, int_196054)
    
    # Assigning a type to the variable 'alpha_kappa' (line 1302)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1302, 4), 'alpha_kappa', if_exp_196055)
    
    # Assigning a Call to a Name (line 1303):
    
    # Assigning a Call to a Name (line 1303):
    
    # Call to min(...): (line 1303)
    # Processing the call arguments (line 1303)
    
    # Obtaining an instance of the builtin type 'list' (line 1303)
    list_196058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1303, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1303)
    # Adding element type (line 1303)
    int_196059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1303, 20), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1303, 19), list_196058, int_196059)
    # Adding element type (line 1303)
    # Getting the type of 'alpha_x' (line 1303)
    alpha_x_196060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 23), 'alpha_x', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1303, 19), list_196058, alpha_x_196060)
    # Adding element type (line 1303)
    # Getting the type of 'alpha_tau' (line 1303)
    alpha_tau_196061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 32), 'alpha_tau', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1303, 19), list_196058, alpha_tau_196061)
    # Adding element type (line 1303)
    # Getting the type of 'alpha_z' (line 1303)
    alpha_z_196062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 43), 'alpha_z', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1303, 19), list_196058, alpha_z_196062)
    # Adding element type (line 1303)
    # Getting the type of 'alpha_kappa' (line 1303)
    alpha_kappa_196063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 52), 'alpha_kappa', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1303, 19), list_196058, alpha_kappa_196063)
    
    # Processing the call keyword arguments (line 1303)
    kwargs_196064 = {}
    # Getting the type of 'np' (line 1303)
    np_196056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 12), 'np', False)
    # Obtaining the member 'min' of a type (line 1303)
    min_196057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1303, 12), np_196056, 'min')
    # Calling min(args, kwargs) (line 1303)
    min_call_result_196065 = invoke(stypy.reporting.localization.Localization(__file__, 1303, 12), min_196057, *[list_196058], **kwargs_196064)
    
    # Assigning a type to the variable 'alpha' (line 1303)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1303, 4), 'alpha', min_call_result_196065)
    # Getting the type of 'alpha' (line 1304)
    alpha_196066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 11), 'alpha')
    # Assigning a type to the variable 'stypy_return_type' (line 1304)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 4), 'stypy_return_type', alpha_196066)
    
    # ################# End of '_get_step(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_step' in the type store
    # Getting the type of 'stypy_return_type' (line 1281)
    stypy_return_type_196067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_196067)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_step'
    return stypy_return_type_196067

# Assigning a type to the variable '_get_step' (line 1281)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1281, 0), '_get_step', _get_step)

@norecursion
def _get_message(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_get_message'
    module_type_store = module_type_store.open_function_context('_get_message', 1307, 0, False)
    
    # Passed parameters checking function
    _get_message.stypy_localization = localization
    _get_message.stypy_type_of_self = None
    _get_message.stypy_type_store = module_type_store
    _get_message.stypy_function_name = '_get_message'
    _get_message.stypy_param_names_list = ['status']
    _get_message.stypy_varargs_param_name = None
    _get_message.stypy_kwargs_param_name = None
    _get_message.stypy_call_defaults = defaults
    _get_message.stypy_call_varargs = varargs
    _get_message.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_message', ['status'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_message', localization, ['status'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_message(...)' code ##################

    str_196068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1327, (-1)), 'str', '\n    Given problem status code, return a more detailed message.\n\n    Parameters\n    ----------\n    status : int\n        An integer representing the exit status of the optimization::\n\n         0 : Optimization terminated successfully\n         1 : Iteration limit reached\n         2 : Problem appears to be infeasible\n         3 : Problem appears to be unbounded\n         4 : Serious numerical difficulties encountered.\n\n    Returns\n    -------\n    message : str\n        A string descriptor of the exit status of the optimization.\n\n    ')
    
    # Assigning a List to a Name (line 1328):
    
    # Assigning a List to a Name (line 1328):
    
    # Obtaining an instance of the builtin type 'list' (line 1329)
    list_196069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1329, 8), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1329)
    # Adding element type (line 1329)
    str_196070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1329, 9), 'str', 'Optimization terminated successfully.')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1329, 8), list_196069, str_196070)
    # Adding element type (line 1329)
    str_196071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1330, 9), 'str', 'The iteration limit was reached before the algorithm converged.')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1329, 8), list_196069, str_196071)
    # Adding element type (line 1329)
    str_196072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1331, 9), 'str', 'The algorithm terminated successfully and determined that the problem is infeasible.')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1329, 8), list_196069, str_196072)
    # Adding element type (line 1329)
    str_196073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1333, 9), 'str', 'The algorithm terminated successfully and determined that the problem is unbounded.')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1329, 8), list_196069, str_196073)
    # Adding element type (line 1329)
    str_196074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1335, 9), 'str', 'Numerical difficulties were encountered before the problem converged. Please check your problem formulation for errors, independence of linear equality constraints, and reasonable scaling and matrix condition numbers. If you continue to encounter this error, please submit a bug report.')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1329, 8), list_196069, str_196074)
    
    # Assigning a type to the variable 'messages' (line 1328)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1328, 4), 'messages', list_196069)
    
    # Obtaining the type of the subscript
    # Getting the type of 'status' (line 1341)
    status_196075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 20), 'status')
    # Getting the type of 'messages' (line 1341)
    messages_196076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 11), 'messages')
    # Obtaining the member '__getitem__' of a type (line 1341)
    getitem___196077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1341, 11), messages_196076, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1341)
    subscript_call_result_196078 = invoke(stypy.reporting.localization.Localization(__file__, 1341, 11), getitem___196077, status_196075)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1341)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1341, 4), 'stypy_return_type', subscript_call_result_196078)
    
    # ################# End of '_get_message(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_message' in the type store
    # Getting the type of 'stypy_return_type' (line 1307)
    stypy_return_type_196079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_196079)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_message'
    return stypy_return_type_196079

# Assigning a type to the variable '_get_message' (line 1307)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 0), '_get_message', _get_message)

@norecursion
def _do_step(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_do_step'
    module_type_store = module_type_store.open_function_context('_do_step', 1344, 0, False)
    
    # Passed parameters checking function
    _do_step.stypy_localization = localization
    _do_step.stypy_type_of_self = None
    _do_step.stypy_type_store = module_type_store
    _do_step.stypy_function_name = '_do_step'
    _do_step.stypy_param_names_list = ['x', 'y', 'z', 'tau', 'kappa', 'd_x', 'd_y', 'd_z', 'd_tau', 'd_kappa', 'alpha']
    _do_step.stypy_varargs_param_name = None
    _do_step.stypy_kwargs_param_name = None
    _do_step.stypy_call_defaults = defaults
    _do_step.stypy_call_varargs = varargs
    _do_step.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_do_step', ['x', 'y', 'z', 'tau', 'kappa', 'd_x', 'd_y', 'd_z', 'd_tau', 'd_kappa', 'alpha'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_do_step', localization, ['x', 'y', 'z', 'tau', 'kappa', 'd_x', 'd_y', 'd_z', 'd_tau', 'd_kappa', 'alpha'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_do_step(...)' code ##################

    str_196080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1355, (-1)), 'str', '\n    An implementation of [1] Equation 8.9\n\n    References\n    ----------\n    .. [1] Andersen, Erling D., and Knud D. Andersen. "The MOSEK interior point\n           optimizer for linear programming: an implementation of the\n           homogeneous algorithm." High performance optimization. Springer US,\n           2000. 197-232.\n\n    ')
    
    # Assigning a BinOp to a Name (line 1356):
    
    # Assigning a BinOp to a Name (line 1356):
    # Getting the type of 'x' (line 1356)
    x_196081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 8), 'x')
    # Getting the type of 'alpha' (line 1356)
    alpha_196082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 12), 'alpha')
    # Getting the type of 'd_x' (line 1356)
    d_x_196083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 20), 'd_x')
    # Applying the binary operator '*' (line 1356)
    result_mul_196084 = python_operator(stypy.reporting.localization.Localization(__file__, 1356, 12), '*', alpha_196082, d_x_196083)
    
    # Applying the binary operator '+' (line 1356)
    result_add_196085 = python_operator(stypy.reporting.localization.Localization(__file__, 1356, 8), '+', x_196081, result_mul_196084)
    
    # Assigning a type to the variable 'x' (line 1356)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1356, 4), 'x', result_add_196085)
    
    # Assigning a BinOp to a Name (line 1357):
    
    # Assigning a BinOp to a Name (line 1357):
    # Getting the type of 'tau' (line 1357)
    tau_196086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 10), 'tau')
    # Getting the type of 'alpha' (line 1357)
    alpha_196087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 16), 'alpha')
    # Getting the type of 'd_tau' (line 1357)
    d_tau_196088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 24), 'd_tau')
    # Applying the binary operator '*' (line 1357)
    result_mul_196089 = python_operator(stypy.reporting.localization.Localization(__file__, 1357, 16), '*', alpha_196087, d_tau_196088)
    
    # Applying the binary operator '+' (line 1357)
    result_add_196090 = python_operator(stypy.reporting.localization.Localization(__file__, 1357, 10), '+', tau_196086, result_mul_196089)
    
    # Assigning a type to the variable 'tau' (line 1357)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1357, 4), 'tau', result_add_196090)
    
    # Assigning a BinOp to a Name (line 1358):
    
    # Assigning a BinOp to a Name (line 1358):
    # Getting the type of 'z' (line 1358)
    z_196091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 8), 'z')
    # Getting the type of 'alpha' (line 1358)
    alpha_196092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 12), 'alpha')
    # Getting the type of 'd_z' (line 1358)
    d_z_196093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 20), 'd_z')
    # Applying the binary operator '*' (line 1358)
    result_mul_196094 = python_operator(stypy.reporting.localization.Localization(__file__, 1358, 12), '*', alpha_196092, d_z_196093)
    
    # Applying the binary operator '+' (line 1358)
    result_add_196095 = python_operator(stypy.reporting.localization.Localization(__file__, 1358, 8), '+', z_196091, result_mul_196094)
    
    # Assigning a type to the variable 'z' (line 1358)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1358, 4), 'z', result_add_196095)
    
    # Assigning a BinOp to a Name (line 1359):
    
    # Assigning a BinOp to a Name (line 1359):
    # Getting the type of 'kappa' (line 1359)
    kappa_196096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 12), 'kappa')
    # Getting the type of 'alpha' (line 1359)
    alpha_196097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 20), 'alpha')
    # Getting the type of 'd_kappa' (line 1359)
    d_kappa_196098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 28), 'd_kappa')
    # Applying the binary operator '*' (line 1359)
    result_mul_196099 = python_operator(stypy.reporting.localization.Localization(__file__, 1359, 20), '*', alpha_196097, d_kappa_196098)
    
    # Applying the binary operator '+' (line 1359)
    result_add_196100 = python_operator(stypy.reporting.localization.Localization(__file__, 1359, 12), '+', kappa_196096, result_mul_196099)
    
    # Assigning a type to the variable 'kappa' (line 1359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1359, 4), 'kappa', result_add_196100)
    
    # Assigning a BinOp to a Name (line 1360):
    
    # Assigning a BinOp to a Name (line 1360):
    # Getting the type of 'y' (line 1360)
    y_196101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 8), 'y')
    # Getting the type of 'alpha' (line 1360)
    alpha_196102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 12), 'alpha')
    # Getting the type of 'd_y' (line 1360)
    d_y_196103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 20), 'd_y')
    # Applying the binary operator '*' (line 1360)
    result_mul_196104 = python_operator(stypy.reporting.localization.Localization(__file__, 1360, 12), '*', alpha_196102, d_y_196103)
    
    # Applying the binary operator '+' (line 1360)
    result_add_196105 = python_operator(stypy.reporting.localization.Localization(__file__, 1360, 8), '+', y_196101, result_mul_196104)
    
    # Assigning a type to the variable 'y' (line 1360)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1360, 4), 'y', result_add_196105)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1361)
    tuple_196106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1361, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1361)
    # Adding element type (line 1361)
    # Getting the type of 'x' (line 1361)
    x_196107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 11), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1361, 11), tuple_196106, x_196107)
    # Adding element type (line 1361)
    # Getting the type of 'y' (line 1361)
    y_196108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 14), 'y')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1361, 11), tuple_196106, y_196108)
    # Adding element type (line 1361)
    # Getting the type of 'z' (line 1361)
    z_196109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 17), 'z')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1361, 11), tuple_196106, z_196109)
    # Adding element type (line 1361)
    # Getting the type of 'tau' (line 1361)
    tau_196110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 20), 'tau')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1361, 11), tuple_196106, tau_196110)
    # Adding element type (line 1361)
    # Getting the type of 'kappa' (line 1361)
    kappa_196111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 25), 'kappa')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1361, 11), tuple_196106, kappa_196111)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1361)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1361, 4), 'stypy_return_type', tuple_196106)
    
    # ################# End of '_do_step(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_do_step' in the type store
    # Getting the type of 'stypy_return_type' (line 1344)
    stypy_return_type_196112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_196112)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_do_step'
    return stypy_return_type_196112

# Assigning a type to the variable '_do_step' (line 1344)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1344, 0), '_do_step', _do_step)

@norecursion
def _get_blind_start(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_get_blind_start'
    module_type_store = module_type_store.open_function_context('_get_blind_start', 1364, 0, False)
    
    # Passed parameters checking function
    _get_blind_start.stypy_localization = localization
    _get_blind_start.stypy_type_of_self = None
    _get_blind_start.stypy_type_store = module_type_store
    _get_blind_start.stypy_function_name = '_get_blind_start'
    _get_blind_start.stypy_param_names_list = ['shape']
    _get_blind_start.stypy_varargs_param_name = None
    _get_blind_start.stypy_kwargs_param_name = None
    _get_blind_start.stypy_call_defaults = defaults
    _get_blind_start.stypy_call_varargs = varargs
    _get_blind_start.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_blind_start', ['shape'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_blind_start', localization, ['shape'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_blind_start(...)' code ##################

    str_196113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1375, (-1)), 'str', '\n    Return the starting point from [1] 4.4\n\n    References\n    ----------\n    .. [1] Andersen, Erling D., and Knud D. Andersen. "The MOSEK interior point\n           optimizer for linear programming: an implementation of the\n           homogeneous algorithm." High performance optimization. Springer US,\n           2000. 197-232.\n\n    ')
    
    # Assigning a Name to a Tuple (line 1376):
    
    # Assigning a Subscript to a Name (line 1376):
    
    # Obtaining the type of the subscript
    int_196114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1376, 4), 'int')
    # Getting the type of 'shape' (line 1376)
    shape_196115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 11), 'shape')
    # Obtaining the member '__getitem__' of a type (line 1376)
    getitem___196116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 4), shape_196115, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1376)
    subscript_call_result_196117 = invoke(stypy.reporting.localization.Localization(__file__, 1376, 4), getitem___196116, int_196114)
    
    # Assigning a type to the variable 'tuple_var_assignment_192592' (line 1376)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1376, 4), 'tuple_var_assignment_192592', subscript_call_result_196117)
    
    # Assigning a Subscript to a Name (line 1376):
    
    # Obtaining the type of the subscript
    int_196118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1376, 4), 'int')
    # Getting the type of 'shape' (line 1376)
    shape_196119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 11), 'shape')
    # Obtaining the member '__getitem__' of a type (line 1376)
    getitem___196120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 4), shape_196119, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1376)
    subscript_call_result_196121 = invoke(stypy.reporting.localization.Localization(__file__, 1376, 4), getitem___196120, int_196118)
    
    # Assigning a type to the variable 'tuple_var_assignment_192593' (line 1376)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1376, 4), 'tuple_var_assignment_192593', subscript_call_result_196121)
    
    # Assigning a Name to a Name (line 1376):
    # Getting the type of 'tuple_var_assignment_192592' (line 1376)
    tuple_var_assignment_192592_196122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 4), 'tuple_var_assignment_192592')
    # Assigning a type to the variable 'm' (line 1376)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1376, 4), 'm', tuple_var_assignment_192592_196122)
    
    # Assigning a Name to a Name (line 1376):
    # Getting the type of 'tuple_var_assignment_192593' (line 1376)
    tuple_var_assignment_192593_196123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 4), 'tuple_var_assignment_192593')
    # Assigning a type to the variable 'n' (line 1376)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1376, 7), 'n', tuple_var_assignment_192593_196123)
    
    # Assigning a Call to a Name (line 1377):
    
    # Assigning a Call to a Name (line 1377):
    
    # Call to ones(...): (line 1377)
    # Processing the call arguments (line 1377)
    # Getting the type of 'n' (line 1377)
    n_196126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 17), 'n', False)
    # Processing the call keyword arguments (line 1377)
    kwargs_196127 = {}
    # Getting the type of 'np' (line 1377)
    np_196124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 9), 'np', False)
    # Obtaining the member 'ones' of a type (line 1377)
    ones_196125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1377, 9), np_196124, 'ones')
    # Calling ones(args, kwargs) (line 1377)
    ones_call_result_196128 = invoke(stypy.reporting.localization.Localization(__file__, 1377, 9), ones_196125, *[n_196126], **kwargs_196127)
    
    # Assigning a type to the variable 'x0' (line 1377)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1377, 4), 'x0', ones_call_result_196128)
    
    # Assigning a Call to a Name (line 1378):
    
    # Assigning a Call to a Name (line 1378):
    
    # Call to zeros(...): (line 1378)
    # Processing the call arguments (line 1378)
    # Getting the type of 'm' (line 1378)
    m_196131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 18), 'm', False)
    # Processing the call keyword arguments (line 1378)
    kwargs_196132 = {}
    # Getting the type of 'np' (line 1378)
    np_196129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 9), 'np', False)
    # Obtaining the member 'zeros' of a type (line 1378)
    zeros_196130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1378, 9), np_196129, 'zeros')
    # Calling zeros(args, kwargs) (line 1378)
    zeros_call_result_196133 = invoke(stypy.reporting.localization.Localization(__file__, 1378, 9), zeros_196130, *[m_196131], **kwargs_196132)
    
    # Assigning a type to the variable 'y0' (line 1378)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1378, 4), 'y0', zeros_call_result_196133)
    
    # Assigning a Call to a Name (line 1379):
    
    # Assigning a Call to a Name (line 1379):
    
    # Call to ones(...): (line 1379)
    # Processing the call arguments (line 1379)
    # Getting the type of 'n' (line 1379)
    n_196136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 17), 'n', False)
    # Processing the call keyword arguments (line 1379)
    kwargs_196137 = {}
    # Getting the type of 'np' (line 1379)
    np_196134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 9), 'np', False)
    # Obtaining the member 'ones' of a type (line 1379)
    ones_196135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1379, 9), np_196134, 'ones')
    # Calling ones(args, kwargs) (line 1379)
    ones_call_result_196138 = invoke(stypy.reporting.localization.Localization(__file__, 1379, 9), ones_196135, *[n_196136], **kwargs_196137)
    
    # Assigning a type to the variable 'z0' (line 1379)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 4), 'z0', ones_call_result_196138)
    
    # Assigning a Num to a Name (line 1380):
    
    # Assigning a Num to a Name (line 1380):
    int_196139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1380, 11), 'int')
    # Assigning a type to the variable 'tau0' (line 1380)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1380, 4), 'tau0', int_196139)
    
    # Assigning a Num to a Name (line 1381):
    
    # Assigning a Num to a Name (line 1381):
    int_196140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1381, 13), 'int')
    # Assigning a type to the variable 'kappa0' (line 1381)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1381, 4), 'kappa0', int_196140)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1382)
    tuple_196141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1382, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1382)
    # Adding element type (line 1382)
    # Getting the type of 'x0' (line 1382)
    x0_196142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 11), 'x0')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1382, 11), tuple_196141, x0_196142)
    # Adding element type (line 1382)
    # Getting the type of 'y0' (line 1382)
    y0_196143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 15), 'y0')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1382, 11), tuple_196141, y0_196143)
    # Adding element type (line 1382)
    # Getting the type of 'z0' (line 1382)
    z0_196144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 19), 'z0')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1382, 11), tuple_196141, z0_196144)
    # Adding element type (line 1382)
    # Getting the type of 'tau0' (line 1382)
    tau0_196145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 23), 'tau0')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1382, 11), tuple_196141, tau0_196145)
    # Adding element type (line 1382)
    # Getting the type of 'kappa0' (line 1382)
    kappa0_196146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 29), 'kappa0')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1382, 11), tuple_196141, kappa0_196146)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1382, 4), 'stypy_return_type', tuple_196141)
    
    # ################# End of '_get_blind_start(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_blind_start' in the type store
    # Getting the type of 'stypy_return_type' (line 1364)
    stypy_return_type_196147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_196147)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_blind_start'
    return stypy_return_type_196147

# Assigning a type to the variable '_get_blind_start' (line 1364)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1364, 0), '_get_blind_start', _get_blind_start)

@norecursion
def _indicators(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_indicators'
    module_type_store = module_type_store.open_function_context('_indicators', 1385, 0, False)
    
    # Passed parameters checking function
    _indicators.stypy_localization = localization
    _indicators.stypy_type_of_self = None
    _indicators.stypy_type_store = module_type_store
    _indicators.stypy_function_name = '_indicators'
    _indicators.stypy_param_names_list = ['A', 'b', 'c', 'c0', 'x', 'y', 'z', 'tau', 'kappa']
    _indicators.stypy_varargs_param_name = None
    _indicators.stypy_kwargs_param_name = None
    _indicators.stypy_call_defaults = defaults
    _indicators.stypy_call_varargs = varargs
    _indicators.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_indicators', ['A', 'b', 'c', 'c0', 'x', 'y', 'z', 'tau', 'kappa'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_indicators', localization, ['A', 'b', 'c', 'c0', 'x', 'y', 'z', 'tau', 'kappa'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_indicators(...)' code ##################

    str_196148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1397, (-1)), 'str', '\n    Implementation of several equations from [1] used as indicators of\n    the status of optimization.\n\n    References\n    ----------\n    .. [1] Andersen, Erling D., and Knud D. Andersen. "The MOSEK interior point\n           optimizer for linear programming: an implementation of the\n           homogeneous algorithm." High performance optimization. Springer US,\n           2000. 197-232.\n\n    ')
    
    # Assigning a Call to a Tuple (line 1400):
    
    # Assigning a Subscript to a Name (line 1400):
    
    # Obtaining the type of the subscript
    int_196149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 4), 'int')
    
    # Call to _get_blind_start(...): (line 1400)
    # Processing the call arguments (line 1400)
    # Getting the type of 'A' (line 1400)
    A_196151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 48), 'A', False)
    # Obtaining the member 'shape' of a type (line 1400)
    shape_196152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 48), A_196151, 'shape')
    # Processing the call keyword arguments (line 1400)
    kwargs_196153 = {}
    # Getting the type of '_get_blind_start' (line 1400)
    _get_blind_start_196150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 31), '_get_blind_start', False)
    # Calling _get_blind_start(args, kwargs) (line 1400)
    _get_blind_start_call_result_196154 = invoke(stypy.reporting.localization.Localization(__file__, 1400, 31), _get_blind_start_196150, *[shape_196152], **kwargs_196153)
    
    # Obtaining the member '__getitem__' of a type (line 1400)
    getitem___196155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 4), _get_blind_start_call_result_196154, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1400)
    subscript_call_result_196156 = invoke(stypy.reporting.localization.Localization(__file__, 1400, 4), getitem___196155, int_196149)
    
    # Assigning a type to the variable 'tuple_var_assignment_192594' (line 1400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 4), 'tuple_var_assignment_192594', subscript_call_result_196156)
    
    # Assigning a Subscript to a Name (line 1400):
    
    # Obtaining the type of the subscript
    int_196157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 4), 'int')
    
    # Call to _get_blind_start(...): (line 1400)
    # Processing the call arguments (line 1400)
    # Getting the type of 'A' (line 1400)
    A_196159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 48), 'A', False)
    # Obtaining the member 'shape' of a type (line 1400)
    shape_196160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 48), A_196159, 'shape')
    # Processing the call keyword arguments (line 1400)
    kwargs_196161 = {}
    # Getting the type of '_get_blind_start' (line 1400)
    _get_blind_start_196158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 31), '_get_blind_start', False)
    # Calling _get_blind_start(args, kwargs) (line 1400)
    _get_blind_start_call_result_196162 = invoke(stypy.reporting.localization.Localization(__file__, 1400, 31), _get_blind_start_196158, *[shape_196160], **kwargs_196161)
    
    # Obtaining the member '__getitem__' of a type (line 1400)
    getitem___196163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 4), _get_blind_start_call_result_196162, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1400)
    subscript_call_result_196164 = invoke(stypy.reporting.localization.Localization(__file__, 1400, 4), getitem___196163, int_196157)
    
    # Assigning a type to the variable 'tuple_var_assignment_192595' (line 1400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 4), 'tuple_var_assignment_192595', subscript_call_result_196164)
    
    # Assigning a Subscript to a Name (line 1400):
    
    # Obtaining the type of the subscript
    int_196165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 4), 'int')
    
    # Call to _get_blind_start(...): (line 1400)
    # Processing the call arguments (line 1400)
    # Getting the type of 'A' (line 1400)
    A_196167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 48), 'A', False)
    # Obtaining the member 'shape' of a type (line 1400)
    shape_196168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 48), A_196167, 'shape')
    # Processing the call keyword arguments (line 1400)
    kwargs_196169 = {}
    # Getting the type of '_get_blind_start' (line 1400)
    _get_blind_start_196166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 31), '_get_blind_start', False)
    # Calling _get_blind_start(args, kwargs) (line 1400)
    _get_blind_start_call_result_196170 = invoke(stypy.reporting.localization.Localization(__file__, 1400, 31), _get_blind_start_196166, *[shape_196168], **kwargs_196169)
    
    # Obtaining the member '__getitem__' of a type (line 1400)
    getitem___196171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 4), _get_blind_start_call_result_196170, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1400)
    subscript_call_result_196172 = invoke(stypy.reporting.localization.Localization(__file__, 1400, 4), getitem___196171, int_196165)
    
    # Assigning a type to the variable 'tuple_var_assignment_192596' (line 1400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 4), 'tuple_var_assignment_192596', subscript_call_result_196172)
    
    # Assigning a Subscript to a Name (line 1400):
    
    # Obtaining the type of the subscript
    int_196173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 4), 'int')
    
    # Call to _get_blind_start(...): (line 1400)
    # Processing the call arguments (line 1400)
    # Getting the type of 'A' (line 1400)
    A_196175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 48), 'A', False)
    # Obtaining the member 'shape' of a type (line 1400)
    shape_196176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 48), A_196175, 'shape')
    # Processing the call keyword arguments (line 1400)
    kwargs_196177 = {}
    # Getting the type of '_get_blind_start' (line 1400)
    _get_blind_start_196174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 31), '_get_blind_start', False)
    # Calling _get_blind_start(args, kwargs) (line 1400)
    _get_blind_start_call_result_196178 = invoke(stypy.reporting.localization.Localization(__file__, 1400, 31), _get_blind_start_196174, *[shape_196176], **kwargs_196177)
    
    # Obtaining the member '__getitem__' of a type (line 1400)
    getitem___196179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 4), _get_blind_start_call_result_196178, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1400)
    subscript_call_result_196180 = invoke(stypy.reporting.localization.Localization(__file__, 1400, 4), getitem___196179, int_196173)
    
    # Assigning a type to the variable 'tuple_var_assignment_192597' (line 1400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 4), 'tuple_var_assignment_192597', subscript_call_result_196180)
    
    # Assigning a Subscript to a Name (line 1400):
    
    # Obtaining the type of the subscript
    int_196181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 4), 'int')
    
    # Call to _get_blind_start(...): (line 1400)
    # Processing the call arguments (line 1400)
    # Getting the type of 'A' (line 1400)
    A_196183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 48), 'A', False)
    # Obtaining the member 'shape' of a type (line 1400)
    shape_196184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 48), A_196183, 'shape')
    # Processing the call keyword arguments (line 1400)
    kwargs_196185 = {}
    # Getting the type of '_get_blind_start' (line 1400)
    _get_blind_start_196182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 31), '_get_blind_start', False)
    # Calling _get_blind_start(args, kwargs) (line 1400)
    _get_blind_start_call_result_196186 = invoke(stypy.reporting.localization.Localization(__file__, 1400, 31), _get_blind_start_196182, *[shape_196184], **kwargs_196185)
    
    # Obtaining the member '__getitem__' of a type (line 1400)
    getitem___196187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 4), _get_blind_start_call_result_196186, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1400)
    subscript_call_result_196188 = invoke(stypy.reporting.localization.Localization(__file__, 1400, 4), getitem___196187, int_196181)
    
    # Assigning a type to the variable 'tuple_var_assignment_192598' (line 1400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 4), 'tuple_var_assignment_192598', subscript_call_result_196188)
    
    # Assigning a Name to a Name (line 1400):
    # Getting the type of 'tuple_var_assignment_192594' (line 1400)
    tuple_var_assignment_192594_196189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 4), 'tuple_var_assignment_192594')
    # Assigning a type to the variable 'x0' (line 1400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 4), 'x0', tuple_var_assignment_192594_196189)
    
    # Assigning a Name to a Name (line 1400):
    # Getting the type of 'tuple_var_assignment_192595' (line 1400)
    tuple_var_assignment_192595_196190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 4), 'tuple_var_assignment_192595')
    # Assigning a type to the variable 'y0' (line 1400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 8), 'y0', tuple_var_assignment_192595_196190)
    
    # Assigning a Name to a Name (line 1400):
    # Getting the type of 'tuple_var_assignment_192596' (line 1400)
    tuple_var_assignment_192596_196191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 4), 'tuple_var_assignment_192596')
    # Assigning a type to the variable 'z0' (line 1400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 12), 'z0', tuple_var_assignment_192596_196191)
    
    # Assigning a Name to a Name (line 1400):
    # Getting the type of 'tuple_var_assignment_192597' (line 1400)
    tuple_var_assignment_192597_196192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 4), 'tuple_var_assignment_192597')
    # Assigning a type to the variable 'tau0' (line 1400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 16), 'tau0', tuple_var_assignment_192597_196192)
    
    # Assigning a Name to a Name (line 1400):
    # Getting the type of 'tuple_var_assignment_192598' (line 1400)
    tuple_var_assignment_192598_196193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 4), 'tuple_var_assignment_192598')
    # Assigning a type to the variable 'kappa0' (line 1400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 22), 'kappa0', tuple_var_assignment_192598_196193)

    @norecursion
    def r_p(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'r_p'
        module_type_store = module_type_store.open_function_context('r_p', 1403, 4, False)
        
        # Passed parameters checking function
        r_p.stypy_localization = localization
        r_p.stypy_type_of_self = None
        r_p.stypy_type_store = module_type_store
        r_p.stypy_function_name = 'r_p'
        r_p.stypy_param_names_list = ['x', 'tau']
        r_p.stypy_varargs_param_name = None
        r_p.stypy_kwargs_param_name = None
        r_p.stypy_call_defaults = defaults
        r_p.stypy_call_varargs = varargs
        r_p.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'r_p', ['x', 'tau'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'r_p', localization, ['x', 'tau'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'r_p(...)' code ##################

        # Getting the type of 'b' (line 1404)
        b_196194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 15), 'b')
        # Getting the type of 'tau' (line 1404)
        tau_196195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 19), 'tau')
        # Applying the binary operator '*' (line 1404)
        result_mul_196196 = python_operator(stypy.reporting.localization.Localization(__file__, 1404, 15), '*', b_196194, tau_196195)
        
        
        # Call to dot(...): (line 1404)
        # Processing the call arguments (line 1404)
        # Getting the type of 'x' (line 1404)
        x_196199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 31), 'x', False)
        # Processing the call keyword arguments (line 1404)
        kwargs_196200 = {}
        # Getting the type of 'A' (line 1404)
        A_196197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 25), 'A', False)
        # Obtaining the member 'dot' of a type (line 1404)
        dot_196198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1404, 25), A_196197, 'dot')
        # Calling dot(args, kwargs) (line 1404)
        dot_call_result_196201 = invoke(stypy.reporting.localization.Localization(__file__, 1404, 25), dot_196198, *[x_196199], **kwargs_196200)
        
        # Applying the binary operator '-' (line 1404)
        result_sub_196202 = python_operator(stypy.reporting.localization.Localization(__file__, 1404, 15), '-', result_mul_196196, dot_call_result_196201)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1404, 8), 'stypy_return_type', result_sub_196202)
        
        # ################# End of 'r_p(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'r_p' in the type store
        # Getting the type of 'stypy_return_type' (line 1403)
        stypy_return_type_196203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_196203)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'r_p'
        return stypy_return_type_196203

    # Assigning a type to the variable 'r_p' (line 1403)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1403, 4), 'r_p', r_p)

    @norecursion
    def r_d(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'r_d'
        module_type_store = module_type_store.open_function_context('r_d', 1406, 4, False)
        
        # Passed parameters checking function
        r_d.stypy_localization = localization
        r_d.stypy_type_of_self = None
        r_d.stypy_type_store = module_type_store
        r_d.stypy_function_name = 'r_d'
        r_d.stypy_param_names_list = ['y', 'z', 'tau']
        r_d.stypy_varargs_param_name = None
        r_d.stypy_kwargs_param_name = None
        r_d.stypy_call_defaults = defaults
        r_d.stypy_call_varargs = varargs
        r_d.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'r_d', ['y', 'z', 'tau'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'r_d', localization, ['y', 'z', 'tau'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'r_d(...)' code ##################

        # Getting the type of 'c' (line 1407)
        c_196204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 15), 'c')
        # Getting the type of 'tau' (line 1407)
        tau_196205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 19), 'tau')
        # Applying the binary operator '*' (line 1407)
        result_mul_196206 = python_operator(stypy.reporting.localization.Localization(__file__, 1407, 15), '*', c_196204, tau_196205)
        
        
        # Call to dot(...): (line 1407)
        # Processing the call arguments (line 1407)
        # Getting the type of 'y' (line 1407)
        y_196210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 33), 'y', False)
        # Processing the call keyword arguments (line 1407)
        kwargs_196211 = {}
        # Getting the type of 'A' (line 1407)
        A_196207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 25), 'A', False)
        # Obtaining the member 'T' of a type (line 1407)
        T_196208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1407, 25), A_196207, 'T')
        # Obtaining the member 'dot' of a type (line 1407)
        dot_196209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1407, 25), T_196208, 'dot')
        # Calling dot(args, kwargs) (line 1407)
        dot_call_result_196212 = invoke(stypy.reporting.localization.Localization(__file__, 1407, 25), dot_196209, *[y_196210], **kwargs_196211)
        
        # Applying the binary operator '-' (line 1407)
        result_sub_196213 = python_operator(stypy.reporting.localization.Localization(__file__, 1407, 15), '-', result_mul_196206, dot_call_result_196212)
        
        # Getting the type of 'z' (line 1407)
        z_196214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 38), 'z')
        # Applying the binary operator '-' (line 1407)
        result_sub_196215 = python_operator(stypy.reporting.localization.Localization(__file__, 1407, 36), '-', result_sub_196213, z_196214)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1407)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1407, 8), 'stypy_return_type', result_sub_196215)
        
        # ################# End of 'r_d(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'r_d' in the type store
        # Getting the type of 'stypy_return_type' (line 1406)
        stypy_return_type_196216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_196216)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'r_d'
        return stypy_return_type_196216

    # Assigning a type to the variable 'r_d' (line 1406)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1406, 4), 'r_d', r_d)

    @norecursion
    def r_g(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'r_g'
        module_type_store = module_type_store.open_function_context('r_g', 1409, 4, False)
        
        # Passed parameters checking function
        r_g.stypy_localization = localization
        r_g.stypy_type_of_self = None
        r_g.stypy_type_store = module_type_store
        r_g.stypy_function_name = 'r_g'
        r_g.stypy_param_names_list = ['x', 'y', 'kappa']
        r_g.stypy_varargs_param_name = None
        r_g.stypy_kwargs_param_name = None
        r_g.stypy_call_defaults = defaults
        r_g.stypy_call_varargs = varargs
        r_g.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'r_g', ['x', 'y', 'kappa'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'r_g', localization, ['x', 'y', 'kappa'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'r_g(...)' code ##################

        # Getting the type of 'kappa' (line 1410)
        kappa_196217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 15), 'kappa')
        
        # Call to dot(...): (line 1410)
        # Processing the call arguments (line 1410)
        # Getting the type of 'x' (line 1410)
        x_196220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 29), 'x', False)
        # Processing the call keyword arguments (line 1410)
        kwargs_196221 = {}
        # Getting the type of 'c' (line 1410)
        c_196218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 23), 'c', False)
        # Obtaining the member 'dot' of a type (line 1410)
        dot_196219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1410, 23), c_196218, 'dot')
        # Calling dot(args, kwargs) (line 1410)
        dot_call_result_196222 = invoke(stypy.reporting.localization.Localization(__file__, 1410, 23), dot_196219, *[x_196220], **kwargs_196221)
        
        # Applying the binary operator '+' (line 1410)
        result_add_196223 = python_operator(stypy.reporting.localization.Localization(__file__, 1410, 15), '+', kappa_196217, dot_call_result_196222)
        
        
        # Call to dot(...): (line 1410)
        # Processing the call arguments (line 1410)
        # Getting the type of 'y' (line 1410)
        y_196226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 40), 'y', False)
        # Processing the call keyword arguments (line 1410)
        kwargs_196227 = {}
        # Getting the type of 'b' (line 1410)
        b_196224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 34), 'b', False)
        # Obtaining the member 'dot' of a type (line 1410)
        dot_196225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1410, 34), b_196224, 'dot')
        # Calling dot(args, kwargs) (line 1410)
        dot_call_result_196228 = invoke(stypy.reporting.localization.Localization(__file__, 1410, 34), dot_196225, *[y_196226], **kwargs_196227)
        
        # Applying the binary operator '-' (line 1410)
        result_sub_196229 = python_operator(stypy.reporting.localization.Localization(__file__, 1410, 32), '-', result_add_196223, dot_call_result_196228)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1410, 8), 'stypy_return_type', result_sub_196229)
        
        # ################# End of 'r_g(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'r_g' in the type store
        # Getting the type of 'stypy_return_type' (line 1409)
        stypy_return_type_196230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_196230)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'r_g'
        return stypy_return_type_196230

    # Assigning a type to the variable 'r_g' (line 1409)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1409, 4), 'r_g', r_g)

    @norecursion
    def mu(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mu'
        module_type_store = module_type_store.open_function_context('mu', 1413, 4, False)
        
        # Passed parameters checking function
        mu.stypy_localization = localization
        mu.stypy_type_of_self = None
        mu.stypy_type_store = module_type_store
        mu.stypy_function_name = 'mu'
        mu.stypy_param_names_list = ['x', 'tau', 'z', 'kappa']
        mu.stypy_varargs_param_name = None
        mu.stypy_kwargs_param_name = None
        mu.stypy_call_defaults = defaults
        mu.stypy_call_varargs = varargs
        mu.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'mu', ['x', 'tau', 'z', 'kappa'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mu', localization, ['x', 'tau', 'z', 'kappa'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mu(...)' code ##################

        
        # Call to dot(...): (line 1414)
        # Processing the call arguments (line 1414)
        # Getting the type of 'z' (line 1414)
        z_196233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 22), 'z', False)
        # Processing the call keyword arguments (line 1414)
        kwargs_196234 = {}
        # Getting the type of 'x' (line 1414)
        x_196231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 16), 'x', False)
        # Obtaining the member 'dot' of a type (line 1414)
        dot_196232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1414, 16), x_196231, 'dot')
        # Calling dot(args, kwargs) (line 1414)
        dot_call_result_196235 = invoke(stypy.reporting.localization.Localization(__file__, 1414, 16), dot_196232, *[z_196233], **kwargs_196234)
        
        
        # Call to dot(...): (line 1414)
        # Processing the call arguments (line 1414)
        # Getting the type of 'tau' (line 1414)
        tau_196238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 34), 'tau', False)
        # Getting the type of 'kappa' (line 1414)
        kappa_196239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 39), 'kappa', False)
        # Processing the call keyword arguments (line 1414)
        kwargs_196240 = {}
        # Getting the type of 'np' (line 1414)
        np_196236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 27), 'np', False)
        # Obtaining the member 'dot' of a type (line 1414)
        dot_196237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1414, 27), np_196236, 'dot')
        # Calling dot(args, kwargs) (line 1414)
        dot_call_result_196241 = invoke(stypy.reporting.localization.Localization(__file__, 1414, 27), dot_196237, *[tau_196238, kappa_196239], **kwargs_196240)
        
        # Applying the binary operator '+' (line 1414)
        result_add_196242 = python_operator(stypy.reporting.localization.Localization(__file__, 1414, 16), '+', dot_call_result_196235, dot_call_result_196241)
        
        
        # Call to len(...): (line 1414)
        # Processing the call arguments (line 1414)
        # Getting the type of 'x' (line 1414)
        x_196244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 54), 'x', False)
        # Processing the call keyword arguments (line 1414)
        kwargs_196245 = {}
        # Getting the type of 'len' (line 1414)
        len_196243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 50), 'len', False)
        # Calling len(args, kwargs) (line 1414)
        len_call_result_196246 = invoke(stypy.reporting.localization.Localization(__file__, 1414, 50), len_196243, *[x_196244], **kwargs_196245)
        
        int_196247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1414, 59), 'int')
        # Applying the binary operator '+' (line 1414)
        result_add_196248 = python_operator(stypy.reporting.localization.Localization(__file__, 1414, 50), '+', len_call_result_196246, int_196247)
        
        # Applying the binary operator 'div' (line 1414)
        result_div_196249 = python_operator(stypy.reporting.localization.Localization(__file__, 1414, 15), 'div', result_add_196242, result_add_196248)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1414)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1414, 8), 'stypy_return_type', result_div_196249)
        
        # ################# End of 'mu(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mu' in the type store
        # Getting the type of 'stypy_return_type' (line 1413)
        stypy_return_type_196250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_196250)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mu'
        return stypy_return_type_196250

    # Assigning a type to the variable 'mu' (line 1413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1413, 4), 'mu', mu)
    
    # Assigning a BinOp to a Name (line 1416):
    
    # Assigning a BinOp to a Name (line 1416):
    
    # Call to dot(...): (line 1416)
    # Processing the call arguments (line 1416)
    # Getting the type of 'x' (line 1416)
    x_196253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 16), 'x', False)
    # Getting the type of 'tau' (line 1416)
    tau_196254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 20), 'tau', False)
    # Applying the binary operator 'div' (line 1416)
    result_div_196255 = python_operator(stypy.reporting.localization.Localization(__file__, 1416, 16), 'div', x_196253, tau_196254)
    
    # Processing the call keyword arguments (line 1416)
    kwargs_196256 = {}
    # Getting the type of 'c' (line 1416)
    c_196251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 10), 'c', False)
    # Obtaining the member 'dot' of a type (line 1416)
    dot_196252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1416, 10), c_196251, 'dot')
    # Calling dot(args, kwargs) (line 1416)
    dot_call_result_196257 = invoke(stypy.reporting.localization.Localization(__file__, 1416, 10), dot_196252, *[result_div_196255], **kwargs_196256)
    
    # Getting the type of 'c0' (line 1416)
    c0_196258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 27), 'c0')
    # Applying the binary operator '+' (line 1416)
    result_add_196259 = python_operator(stypy.reporting.localization.Localization(__file__, 1416, 10), '+', dot_call_result_196257, c0_196258)
    
    # Assigning a type to the variable 'obj' (line 1416)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1416, 4), 'obj', result_add_196259)

    @norecursion
    def norm(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'norm'
        module_type_store = module_type_store.open_function_context('norm', 1418, 4, False)
        
        # Passed parameters checking function
        norm.stypy_localization = localization
        norm.stypy_type_of_self = None
        norm.stypy_type_store = module_type_store
        norm.stypy_function_name = 'norm'
        norm.stypy_param_names_list = ['a']
        norm.stypy_varargs_param_name = None
        norm.stypy_kwargs_param_name = None
        norm.stypy_call_defaults = defaults
        norm.stypy_call_varargs = varargs
        norm.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'norm', ['a'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'norm', localization, ['a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'norm(...)' code ##################

        
        # Call to norm(...): (line 1419)
        # Processing the call arguments (line 1419)
        # Getting the type of 'a' (line 1419)
        a_196263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 30), 'a', False)
        # Processing the call keyword arguments (line 1419)
        kwargs_196264 = {}
        # Getting the type of 'np' (line 1419)
        np_196260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 15), 'np', False)
        # Obtaining the member 'linalg' of a type (line 1419)
        linalg_196261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1419, 15), np_196260, 'linalg')
        # Obtaining the member 'norm' of a type (line 1419)
        norm_196262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1419, 15), linalg_196261, 'norm')
        # Calling norm(args, kwargs) (line 1419)
        norm_call_result_196265 = invoke(stypy.reporting.localization.Localization(__file__, 1419, 15), norm_196262, *[a_196263], **kwargs_196264)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1419, 8), 'stypy_return_type', norm_call_result_196265)
        
        # ################# End of 'norm(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'norm' in the type store
        # Getting the type of 'stypy_return_type' (line 1418)
        stypy_return_type_196266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_196266)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'norm'
        return stypy_return_type_196266

    # Assigning a type to the variable 'norm' (line 1418)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1418, 4), 'norm', norm)
    
    # Assigning a Call to a Name (line 1422):
    
    # Assigning a Call to a Name (line 1422):
    
    # Call to r_p(...): (line 1422)
    # Processing the call arguments (line 1422)
    # Getting the type of 'x0' (line 1422)
    x0_196268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 15), 'x0', False)
    # Getting the type of 'tau0' (line 1422)
    tau0_196269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 19), 'tau0', False)
    # Processing the call keyword arguments (line 1422)
    kwargs_196270 = {}
    # Getting the type of 'r_p' (line 1422)
    r_p_196267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 11), 'r_p', False)
    # Calling r_p(args, kwargs) (line 1422)
    r_p_call_result_196271 = invoke(stypy.reporting.localization.Localization(__file__, 1422, 11), r_p_196267, *[x0_196268, tau0_196269], **kwargs_196270)
    
    # Assigning a type to the variable 'r_p0' (line 1422)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1422, 4), 'r_p0', r_p_call_result_196271)
    
    # Assigning a Call to a Name (line 1423):
    
    # Assigning a Call to a Name (line 1423):
    
    # Call to r_d(...): (line 1423)
    # Processing the call arguments (line 1423)
    # Getting the type of 'y0' (line 1423)
    y0_196273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 15), 'y0', False)
    # Getting the type of 'z0' (line 1423)
    z0_196274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 19), 'z0', False)
    # Getting the type of 'tau0' (line 1423)
    tau0_196275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 23), 'tau0', False)
    # Processing the call keyword arguments (line 1423)
    kwargs_196276 = {}
    # Getting the type of 'r_d' (line 1423)
    r_d_196272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 11), 'r_d', False)
    # Calling r_d(args, kwargs) (line 1423)
    r_d_call_result_196277 = invoke(stypy.reporting.localization.Localization(__file__, 1423, 11), r_d_196272, *[y0_196273, z0_196274, tau0_196275], **kwargs_196276)
    
    # Assigning a type to the variable 'r_d0' (line 1423)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1423, 4), 'r_d0', r_d_call_result_196277)
    
    # Assigning a Call to a Name (line 1424):
    
    # Assigning a Call to a Name (line 1424):
    
    # Call to r_g(...): (line 1424)
    # Processing the call arguments (line 1424)
    # Getting the type of 'x0' (line 1424)
    x0_196279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 15), 'x0', False)
    # Getting the type of 'y0' (line 1424)
    y0_196280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 19), 'y0', False)
    # Getting the type of 'kappa0' (line 1424)
    kappa0_196281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 23), 'kappa0', False)
    # Processing the call keyword arguments (line 1424)
    kwargs_196282 = {}
    # Getting the type of 'r_g' (line 1424)
    r_g_196278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 11), 'r_g', False)
    # Calling r_g(args, kwargs) (line 1424)
    r_g_call_result_196283 = invoke(stypy.reporting.localization.Localization(__file__, 1424, 11), r_g_196278, *[x0_196279, y0_196280, kappa0_196281], **kwargs_196282)
    
    # Assigning a type to the variable 'r_g0' (line 1424)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1424, 4), 'r_g0', r_g_call_result_196283)
    
    # Assigning a Call to a Name (line 1425):
    
    # Assigning a Call to a Name (line 1425):
    
    # Call to mu(...): (line 1425)
    # Processing the call arguments (line 1425)
    # Getting the type of 'x0' (line 1425)
    x0_196285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 14), 'x0', False)
    # Getting the type of 'tau0' (line 1425)
    tau0_196286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 18), 'tau0', False)
    # Getting the type of 'z0' (line 1425)
    z0_196287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 24), 'z0', False)
    # Getting the type of 'kappa0' (line 1425)
    kappa0_196288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 28), 'kappa0', False)
    # Processing the call keyword arguments (line 1425)
    kwargs_196289 = {}
    # Getting the type of 'mu' (line 1425)
    mu_196284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 11), 'mu', False)
    # Calling mu(args, kwargs) (line 1425)
    mu_call_result_196290 = invoke(stypy.reporting.localization.Localization(__file__, 1425, 11), mu_196284, *[x0_196285, tau0_196286, z0_196287, kappa0_196288], **kwargs_196289)
    
    # Assigning a type to the variable 'mu_0' (line 1425)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1425, 4), 'mu_0', mu_call_result_196290)
    
    # Assigning a BinOp to a Name (line 1426):
    
    # Assigning a BinOp to a Name (line 1426):
    
    # Call to norm(...): (line 1426)
    # Processing the call arguments (line 1426)
    
    # Call to dot(...): (line 1426)
    # Processing the call arguments (line 1426)
    # Getting the type of 'x' (line 1426)
    x_196295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 25), 'x', False)
    # Processing the call keyword arguments (line 1426)
    kwargs_196296 = {}
    # Getting the type of 'c' (line 1426)
    c_196292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 17), 'c', False)
    # Obtaining the member 'T' of a type (line 1426)
    T_196293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 17), c_196292, 'T')
    # Obtaining the member 'dot' of a type (line 1426)
    dot_196294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 17), T_196293, 'dot')
    # Calling dot(args, kwargs) (line 1426)
    dot_call_result_196297 = invoke(stypy.reporting.localization.Localization(__file__, 1426, 17), dot_196294, *[x_196295], **kwargs_196296)
    
    
    # Call to dot(...): (line 1426)
    # Processing the call arguments (line 1426)
    # Getting the type of 'y' (line 1426)
    y_196301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 38), 'y', False)
    # Processing the call keyword arguments (line 1426)
    kwargs_196302 = {}
    # Getting the type of 'b' (line 1426)
    b_196298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 30), 'b', False)
    # Obtaining the member 'T' of a type (line 1426)
    T_196299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 30), b_196298, 'T')
    # Obtaining the member 'dot' of a type (line 1426)
    dot_196300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 30), T_196299, 'dot')
    # Calling dot(args, kwargs) (line 1426)
    dot_call_result_196303 = invoke(stypy.reporting.localization.Localization(__file__, 1426, 30), dot_196300, *[y_196301], **kwargs_196302)
    
    # Applying the binary operator '-' (line 1426)
    result_sub_196304 = python_operator(stypy.reporting.localization.Localization(__file__, 1426, 17), '-', dot_call_result_196297, dot_call_result_196303)
    
    # Processing the call keyword arguments (line 1426)
    kwargs_196305 = {}
    # Getting the type of 'norm' (line 1426)
    norm_196291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 12), 'norm', False)
    # Calling norm(args, kwargs) (line 1426)
    norm_call_result_196306 = invoke(stypy.reporting.localization.Localization(__file__, 1426, 12), norm_196291, *[result_sub_196304], **kwargs_196305)
    
    # Getting the type of 'tau' (line 1426)
    tau_196307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 45), 'tau')
    
    # Call to norm(...): (line 1426)
    # Processing the call arguments (line 1426)
    
    # Call to dot(...): (line 1426)
    # Processing the call arguments (line 1426)
    # Getting the type of 'y' (line 1426)
    y_196312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 64), 'y', False)
    # Processing the call keyword arguments (line 1426)
    kwargs_196313 = {}
    # Getting the type of 'b' (line 1426)
    b_196309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 56), 'b', False)
    # Obtaining the member 'T' of a type (line 1426)
    T_196310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 56), b_196309, 'T')
    # Obtaining the member 'dot' of a type (line 1426)
    dot_196311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 56), T_196310, 'dot')
    # Calling dot(args, kwargs) (line 1426)
    dot_call_result_196314 = invoke(stypy.reporting.localization.Localization(__file__, 1426, 56), dot_196311, *[y_196312], **kwargs_196313)
    
    # Processing the call keyword arguments (line 1426)
    kwargs_196315 = {}
    # Getting the type of 'norm' (line 1426)
    norm_196308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 51), 'norm', False)
    # Calling norm(args, kwargs) (line 1426)
    norm_call_result_196316 = invoke(stypy.reporting.localization.Localization(__file__, 1426, 51), norm_196308, *[dot_call_result_196314], **kwargs_196315)
    
    # Applying the binary operator '+' (line 1426)
    result_add_196317 = python_operator(stypy.reporting.localization.Localization(__file__, 1426, 45), '+', tau_196307, norm_call_result_196316)
    
    # Applying the binary operator 'div' (line 1426)
    result_div_196318 = python_operator(stypy.reporting.localization.Localization(__file__, 1426, 12), 'div', norm_call_result_196306, result_add_196317)
    
    # Assigning a type to the variable 'rho_A' (line 1426)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1426, 4), 'rho_A', result_div_196318)
    
    # Assigning a BinOp to a Name (line 1427):
    
    # Assigning a BinOp to a Name (line 1427):
    
    # Call to norm(...): (line 1427)
    # Processing the call arguments (line 1427)
    
    # Call to r_p(...): (line 1427)
    # Processing the call arguments (line 1427)
    # Getting the type of 'x' (line 1427)
    x_196321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 21), 'x', False)
    # Getting the type of 'tau' (line 1427)
    tau_196322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 24), 'tau', False)
    # Processing the call keyword arguments (line 1427)
    kwargs_196323 = {}
    # Getting the type of 'r_p' (line 1427)
    r_p_196320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 17), 'r_p', False)
    # Calling r_p(args, kwargs) (line 1427)
    r_p_call_result_196324 = invoke(stypy.reporting.localization.Localization(__file__, 1427, 17), r_p_196320, *[x_196321, tau_196322], **kwargs_196323)
    
    # Processing the call keyword arguments (line 1427)
    kwargs_196325 = {}
    # Getting the type of 'norm' (line 1427)
    norm_196319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 12), 'norm', False)
    # Calling norm(args, kwargs) (line 1427)
    norm_call_result_196326 = invoke(stypy.reporting.localization.Localization(__file__, 1427, 12), norm_196319, *[r_p_call_result_196324], **kwargs_196325)
    
    
    # Call to max(...): (line 1427)
    # Processing the call arguments (line 1427)
    int_196328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1427, 36), 'int')
    
    # Call to norm(...): (line 1427)
    # Processing the call arguments (line 1427)
    # Getting the type of 'r_p0' (line 1427)
    r_p0_196330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 44), 'r_p0', False)
    # Processing the call keyword arguments (line 1427)
    kwargs_196331 = {}
    # Getting the type of 'norm' (line 1427)
    norm_196329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 39), 'norm', False)
    # Calling norm(args, kwargs) (line 1427)
    norm_call_result_196332 = invoke(stypy.reporting.localization.Localization(__file__, 1427, 39), norm_196329, *[r_p0_196330], **kwargs_196331)
    
    # Processing the call keyword arguments (line 1427)
    kwargs_196333 = {}
    # Getting the type of 'max' (line 1427)
    max_196327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 32), 'max', False)
    # Calling max(args, kwargs) (line 1427)
    max_call_result_196334 = invoke(stypy.reporting.localization.Localization(__file__, 1427, 32), max_196327, *[int_196328, norm_call_result_196332], **kwargs_196333)
    
    # Applying the binary operator 'div' (line 1427)
    result_div_196335 = python_operator(stypy.reporting.localization.Localization(__file__, 1427, 12), 'div', norm_call_result_196326, max_call_result_196334)
    
    # Assigning a type to the variable 'rho_p' (line 1427)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1427, 4), 'rho_p', result_div_196335)
    
    # Assigning a BinOp to a Name (line 1428):
    
    # Assigning a BinOp to a Name (line 1428):
    
    # Call to norm(...): (line 1428)
    # Processing the call arguments (line 1428)
    
    # Call to r_d(...): (line 1428)
    # Processing the call arguments (line 1428)
    # Getting the type of 'y' (line 1428)
    y_196338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 21), 'y', False)
    # Getting the type of 'z' (line 1428)
    z_196339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 24), 'z', False)
    # Getting the type of 'tau' (line 1428)
    tau_196340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 27), 'tau', False)
    # Processing the call keyword arguments (line 1428)
    kwargs_196341 = {}
    # Getting the type of 'r_d' (line 1428)
    r_d_196337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 17), 'r_d', False)
    # Calling r_d(args, kwargs) (line 1428)
    r_d_call_result_196342 = invoke(stypy.reporting.localization.Localization(__file__, 1428, 17), r_d_196337, *[y_196338, z_196339, tau_196340], **kwargs_196341)
    
    # Processing the call keyword arguments (line 1428)
    kwargs_196343 = {}
    # Getting the type of 'norm' (line 1428)
    norm_196336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 12), 'norm', False)
    # Calling norm(args, kwargs) (line 1428)
    norm_call_result_196344 = invoke(stypy.reporting.localization.Localization(__file__, 1428, 12), norm_196336, *[r_d_call_result_196342], **kwargs_196343)
    
    
    # Call to max(...): (line 1428)
    # Processing the call arguments (line 1428)
    int_196346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1428, 39), 'int')
    
    # Call to norm(...): (line 1428)
    # Processing the call arguments (line 1428)
    # Getting the type of 'r_d0' (line 1428)
    r_d0_196348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 47), 'r_d0', False)
    # Processing the call keyword arguments (line 1428)
    kwargs_196349 = {}
    # Getting the type of 'norm' (line 1428)
    norm_196347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 42), 'norm', False)
    # Calling norm(args, kwargs) (line 1428)
    norm_call_result_196350 = invoke(stypy.reporting.localization.Localization(__file__, 1428, 42), norm_196347, *[r_d0_196348], **kwargs_196349)
    
    # Processing the call keyword arguments (line 1428)
    kwargs_196351 = {}
    # Getting the type of 'max' (line 1428)
    max_196345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 35), 'max', False)
    # Calling max(args, kwargs) (line 1428)
    max_call_result_196352 = invoke(stypy.reporting.localization.Localization(__file__, 1428, 35), max_196345, *[int_196346, norm_call_result_196350], **kwargs_196351)
    
    # Applying the binary operator 'div' (line 1428)
    result_div_196353 = python_operator(stypy.reporting.localization.Localization(__file__, 1428, 12), 'div', norm_call_result_196344, max_call_result_196352)
    
    # Assigning a type to the variable 'rho_d' (line 1428)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1428, 4), 'rho_d', result_div_196353)
    
    # Assigning a BinOp to a Name (line 1429):
    
    # Assigning a BinOp to a Name (line 1429):
    
    # Call to norm(...): (line 1429)
    # Processing the call arguments (line 1429)
    
    # Call to r_g(...): (line 1429)
    # Processing the call arguments (line 1429)
    # Getting the type of 'x' (line 1429)
    x_196356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 21), 'x', False)
    # Getting the type of 'y' (line 1429)
    y_196357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 24), 'y', False)
    # Getting the type of 'kappa' (line 1429)
    kappa_196358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 27), 'kappa', False)
    # Processing the call keyword arguments (line 1429)
    kwargs_196359 = {}
    # Getting the type of 'r_g' (line 1429)
    r_g_196355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 17), 'r_g', False)
    # Calling r_g(args, kwargs) (line 1429)
    r_g_call_result_196360 = invoke(stypy.reporting.localization.Localization(__file__, 1429, 17), r_g_196355, *[x_196356, y_196357, kappa_196358], **kwargs_196359)
    
    # Processing the call keyword arguments (line 1429)
    kwargs_196361 = {}
    # Getting the type of 'norm' (line 1429)
    norm_196354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 12), 'norm', False)
    # Calling norm(args, kwargs) (line 1429)
    norm_call_result_196362 = invoke(stypy.reporting.localization.Localization(__file__, 1429, 12), norm_196354, *[r_g_call_result_196360], **kwargs_196361)
    
    
    # Call to max(...): (line 1429)
    # Processing the call arguments (line 1429)
    int_196364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1429, 41), 'int')
    
    # Call to norm(...): (line 1429)
    # Processing the call arguments (line 1429)
    # Getting the type of 'r_g0' (line 1429)
    r_g0_196366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 49), 'r_g0', False)
    # Processing the call keyword arguments (line 1429)
    kwargs_196367 = {}
    # Getting the type of 'norm' (line 1429)
    norm_196365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 44), 'norm', False)
    # Calling norm(args, kwargs) (line 1429)
    norm_call_result_196368 = invoke(stypy.reporting.localization.Localization(__file__, 1429, 44), norm_196365, *[r_g0_196366], **kwargs_196367)
    
    # Processing the call keyword arguments (line 1429)
    kwargs_196369 = {}
    # Getting the type of 'max' (line 1429)
    max_196363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 37), 'max', False)
    # Calling max(args, kwargs) (line 1429)
    max_call_result_196370 = invoke(stypy.reporting.localization.Localization(__file__, 1429, 37), max_196363, *[int_196364, norm_call_result_196368], **kwargs_196369)
    
    # Applying the binary operator 'div' (line 1429)
    result_div_196371 = python_operator(stypy.reporting.localization.Localization(__file__, 1429, 12), 'div', norm_call_result_196362, max_call_result_196370)
    
    # Assigning a type to the variable 'rho_g' (line 1429)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1429, 4), 'rho_g', result_div_196371)
    
    # Assigning a BinOp to a Name (line 1430):
    
    # Assigning a BinOp to a Name (line 1430):
    
    # Call to mu(...): (line 1430)
    # Processing the call arguments (line 1430)
    # Getting the type of 'x' (line 1430)
    x_196373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 16), 'x', False)
    # Getting the type of 'tau' (line 1430)
    tau_196374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 19), 'tau', False)
    # Getting the type of 'z' (line 1430)
    z_196375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 24), 'z', False)
    # Getting the type of 'kappa' (line 1430)
    kappa_196376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 27), 'kappa', False)
    # Processing the call keyword arguments (line 1430)
    kwargs_196377 = {}
    # Getting the type of 'mu' (line 1430)
    mu_196372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 13), 'mu', False)
    # Calling mu(args, kwargs) (line 1430)
    mu_call_result_196378 = invoke(stypy.reporting.localization.Localization(__file__, 1430, 13), mu_196372, *[x_196373, tau_196374, z_196375, kappa_196376], **kwargs_196377)
    
    # Getting the type of 'mu_0' (line 1430)
    mu_0_196379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 36), 'mu_0')
    # Applying the binary operator 'div' (line 1430)
    result_div_196380 = python_operator(stypy.reporting.localization.Localization(__file__, 1430, 13), 'div', mu_call_result_196378, mu_0_196379)
    
    # Assigning a type to the variable 'rho_mu' (line 1430)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1430, 4), 'rho_mu', result_div_196380)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1431)
    tuple_196381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1431, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1431)
    # Adding element type (line 1431)
    # Getting the type of 'rho_p' (line 1431)
    rho_p_196382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 11), 'rho_p')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1431, 11), tuple_196381, rho_p_196382)
    # Adding element type (line 1431)
    # Getting the type of 'rho_d' (line 1431)
    rho_d_196383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 18), 'rho_d')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1431, 11), tuple_196381, rho_d_196383)
    # Adding element type (line 1431)
    # Getting the type of 'rho_A' (line 1431)
    rho_A_196384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 25), 'rho_A')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1431, 11), tuple_196381, rho_A_196384)
    # Adding element type (line 1431)
    # Getting the type of 'rho_g' (line 1431)
    rho_g_196385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 32), 'rho_g')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1431, 11), tuple_196381, rho_g_196385)
    # Adding element type (line 1431)
    # Getting the type of 'rho_mu' (line 1431)
    rho_mu_196386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 39), 'rho_mu')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1431, 11), tuple_196381, rho_mu_196386)
    # Adding element type (line 1431)
    # Getting the type of 'obj' (line 1431)
    obj_196387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 47), 'obj')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1431, 11), tuple_196381, obj_196387)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1431)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1431, 4), 'stypy_return_type', tuple_196381)
    
    # ################# End of '_indicators(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_indicators' in the type store
    # Getting the type of 'stypy_return_type' (line 1385)
    stypy_return_type_196388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_196388)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_indicators'
    return stypy_return_type_196388

# Assigning a type to the variable '_indicators' (line 1385)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1385, 0), '_indicators', _indicators)

@norecursion
def _display_iter(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1434)
    False_196389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 66), 'False')
    defaults = [False_196389]
    # Create a new context for function '_display_iter'
    module_type_store = module_type_store.open_function_context('_display_iter', 1434, 0, False)
    
    # Passed parameters checking function
    _display_iter.stypy_localization = localization
    _display_iter.stypy_type_of_self = None
    _display_iter.stypy_type_store = module_type_store
    _display_iter.stypy_function_name = '_display_iter'
    _display_iter.stypy_param_names_list = ['rho_p', 'rho_d', 'rho_g', 'alpha', 'rho_mu', 'obj', 'header']
    _display_iter.stypy_varargs_param_name = None
    _display_iter.stypy_kwargs_param_name = None
    _display_iter.stypy_call_defaults = defaults
    _display_iter.stypy_call_varargs = varargs
    _display_iter.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_display_iter', ['rho_p', 'rho_d', 'rho_g', 'alpha', 'rho_mu', 'obj', 'header'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_display_iter', localization, ['rho_p', 'rho_d', 'rho_g', 'alpha', 'rho_mu', 'obj', 'header'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_display_iter(...)' code ##################

    str_196390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1462, (-1)), 'str', '\n    Print indicators of optimization status to the console.\n\n    Parameters\n    ----------\n    rho_p : float\n        The (normalized) primal feasibility, see [1] 4.5\n    rho_d : float\n        The (normalized) dual feasibility, see [1] 4.5\n    rho_g : float\n        The (normalized) duality gap, see [1] 4.5\n    alpha : float\n        The step size, see [1] 4.3\n    rho_mu : float\n        The (normalized) path parameter, see [1] 4.5\n    obj : float\n        The objective function value of the current iterate\n    header : bool\n        True if a header is to be printed\n\n    References\n    ----------\n    .. [1] Andersen, Erling D., and Knud D. Andersen. "The MOSEK interior point\n           optimizer for linear programming: an implementation of the\n           homogeneous algorithm." High performance optimization. Springer US,\n           2000. 197-232.\n\n    ')
    
    # Getting the type of 'header' (line 1463)
    header_196391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 7), 'header')
    # Testing the type of an if condition (line 1463)
    if_condition_196392 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1463, 4), header_196391)
    # Assigning a type to the variable 'if_condition_196392' (line 1463)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1463, 4), 'if_condition_196392', if_condition_196392)
    # SSA begins for if statement (line 1463)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 1464)
    # Processing the call arguments (line 1464)
    str_196394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1464, 14), 'str', 'Primal Feasibility ')
    str_196395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1465, 14), 'str', 'Dual Feasibility   ')
    str_196396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1466, 14), 'str', 'Duality Gap        ')
    str_196397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1467, 14), 'str', 'Step            ')
    str_196398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1468, 14), 'str', 'Path Parameter     ')
    str_196399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1469, 14), 'str', 'Objective          ')
    # Processing the call keyword arguments (line 1464)
    kwargs_196400 = {}
    # Getting the type of 'print' (line 1464)
    print_196393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 8), 'print', False)
    # Calling print(args, kwargs) (line 1464)
    print_call_result_196401 = invoke(stypy.reporting.localization.Localization(__file__, 1464, 8), print_196393, *[str_196394, str_196395, str_196396, str_196397, str_196398, str_196399], **kwargs_196400)
    
    # SSA join for if statement (line 1463)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Str to a Name (line 1472):
    
    # Assigning a Str to a Name (line 1472):
    str_196402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1472, 10), 'str', '{0:<20.13}{1:<20.13}{2:<20.13}{3:<17.13}{4:<20.13}{5:<20.13}')
    # Assigning a type to the variable 'fmt' (line 1472)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1472, 4), 'fmt', str_196402)
    
    # Call to print(...): (line 1473)
    # Processing the call arguments (line 1473)
    
    # Call to format(...): (line 1473)
    # Processing the call arguments (line 1473)
    # Getting the type of 'rho_p' (line 1474)
    rho_p_196406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 8), 'rho_p', False)
    # Getting the type of 'rho_d' (line 1475)
    rho_d_196407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 8), 'rho_d', False)
    # Getting the type of 'rho_g' (line 1476)
    rho_g_196408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 8), 'rho_g', False)
    # Getting the type of 'alpha' (line 1477)
    alpha_196409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 8), 'alpha', False)
    # Getting the type of 'rho_mu' (line 1478)
    rho_mu_196410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 8), 'rho_mu', False)
    # Getting the type of 'obj' (line 1479)
    obj_196411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 8), 'obj', False)
    # Processing the call keyword arguments (line 1473)
    kwargs_196412 = {}
    # Getting the type of 'fmt' (line 1473)
    fmt_196404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 10), 'fmt', False)
    # Obtaining the member 'format' of a type (line 1473)
    format_196405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 10), fmt_196404, 'format')
    # Calling format(args, kwargs) (line 1473)
    format_call_result_196413 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 10), format_196405, *[rho_p_196406, rho_d_196407, rho_g_196408, alpha_196409, rho_mu_196410, obj_196411], **kwargs_196412)
    
    # Processing the call keyword arguments (line 1473)
    kwargs_196414 = {}
    # Getting the type of 'print' (line 1473)
    print_196403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 4), 'print', False)
    # Calling print(args, kwargs) (line 1473)
    print_call_result_196415 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 4), print_196403, *[format_call_result_196413], **kwargs_196414)
    
    
    # ################# End of '_display_iter(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_display_iter' in the type store
    # Getting the type of 'stypy_return_type' (line 1434)
    stypy_return_type_196416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_196416)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_display_iter'
    return stypy_return_type_196416

# Assigning a type to the variable '_display_iter' (line 1434)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1434, 0), '_display_iter', _display_iter)

@norecursion
def _ip_hsd(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_ip_hsd'
    module_type_store = module_type_store.open_function_context('_ip_hsd', 1482, 0, False)
    
    # Passed parameters checking function
    _ip_hsd.stypy_localization = localization
    _ip_hsd.stypy_type_of_self = None
    _ip_hsd.stypy_type_store = module_type_store
    _ip_hsd.stypy_function_name = '_ip_hsd'
    _ip_hsd.stypy_param_names_list = ['A', 'b', 'c', 'c0', 'alpha0', 'beta', 'maxiter', 'disp', 'tol', 'sparse', 'lstsq', 'sym_pos', 'cholesky', 'pc', 'ip', 'permc_spec']
    _ip_hsd.stypy_varargs_param_name = None
    _ip_hsd.stypy_kwargs_param_name = None
    _ip_hsd.stypy_call_defaults = defaults
    _ip_hsd.stypy_call_varargs = varargs
    _ip_hsd.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_ip_hsd', ['A', 'b', 'c', 'c0', 'alpha0', 'beta', 'maxiter', 'disp', 'tol', 'sparse', 'lstsq', 'sym_pos', 'cholesky', 'pc', 'ip', 'permc_spec'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_ip_hsd', localization, ['A', 'b', 'c', 'c0', 'alpha0', 'beta', 'maxiter', 'disp', 'tol', 'sparse', 'lstsq', 'sym_pos', 'cholesky', 'pc', 'ip', 'permc_spec'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_ip_hsd(...)' code ##################

    str_196417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1588, (-1)), 'str', '\n    Solve a linear programming problem in standard form:\n\n    minimize:     c\'^T * x\'\n\n    subject to:   A * x\' == b\n                  0 < x\' < oo\n\n    using the interior point method of [1].\n\n    Parameters\n    ----------\n    A : 2-D array\n        2-D array which, when matrix-multiplied by ``x``, gives the values of\n        the equality constraints at ``x`` (for standard form problem).\n    b : 1-D array\n        1-D array of values representing the RHS of each equality constraint\n        (row) in ``A`` (for standard form problem).\n    c : 1-D array\n        Coefficients of the linear objective function to be minimized (for\n        standard form problem).\n    c0 : float\n        Constant term in objective function due to fixed (and eliminated)\n        variables. (Purely for display.)\n    alpha0 : float\n        The maximal step size for Mehrota\'s predictor-corrector search\n        direction; see :math:`\\beta_3`of [1] Table 8.1\n    beta : float\n        The desired reduction of the path parameter :math:`\\mu` (see  [3]_)\n    maxiter : int\n        The maximum number of iterations of the algorithm.\n    disp : bool\n        Set to ``True`` if indicators of optimization status are to be printed\n        to the console each iteration.\n    tol : float\n        Termination tolerance; see [1]_ Section 4.5.\n    sparse : bool\n        Set to ``True`` if the problem is to be treated as sparse. However,\n        the inputs ``A_eq`` and ``A_ub`` should nonetheless be provided as\n        (dense) arrays rather than sparse matrices.\n    lstsq : bool\n        Set to ``True`` if the problem is expected to be very poorly\n        conditioned. This should always be left as ``False`` unless severe\n        numerical difficulties are frequently encountered, and a better option\n        would be to improve the formulation of the problem.\n    sym_pos : bool\n        Leave ``True`` if the problem is expected to yield a well conditioned\n        symmetric positive definite normal equation matrix (almost always).\n    cholesky : bool\n        Set to ``True`` if the normal equations are to be solved by explicit\n        Cholesky decomposition followed by explicit forward/backward\n        substitution. This is typically faster for moderate, dense problems\n        that are numerically well-behaved.\n    pc : bool\n        Leave ``True`` if the predictor-corrector method of Mehrota is to be\n        used. This is almost always (if not always) beneficial.\n    ip : bool\n        Set to ``True`` if the improved initial point suggestion due to [1]_\n        Section 4.3 is desired. It\'s unclear whether this is beneficial.\n    permc_spec : str (default = \'MMD_AT_PLUS_A\')\n        (Has effect only with ``sparse = True``, ``lstsq = False``, ``sym_pos =\n        True``.) A matrix is factorized in each iteration of the algorithm.\n        This option specifies how to permute the columns of the matrix for\n        sparsity preservation. Acceptable values are:\n\n        - ``NATURAL``: natural ordering.\n        - ``MMD_ATA``: minimum degree ordering on the structure of A^T A.\n        - ``MMD_AT_PLUS_A``: minimum degree ordering on the structure of A^T+A.\n        - ``COLAMD``: approximate minimum degree column ordering.\n\n        This option can impact the convergence of the\n        interior point algorithm; test different values to determine which\n        performs best for your problem. For more information, refer to\n        ``scipy.sparse.linalg.splu``.\n\n    Returns\n    -------\n    x_hat : float\n        Solution vector (for standard form problem).\n    status : int\n        An integer representing the exit status of the optimization::\n\n         0 : Optimization terminated successfully\n         1 : Iteration limit reached\n         2 : Problem appears to be infeasible\n         3 : Problem appears to be unbounded\n         4 : Serious numerical difficulties encountered.\n\n    message : str\n        A string descriptor of the exit status of the optimization.\n    iteration : int\n        The number of iterations taken to solve the problem\n\n    References\n    ----------\n    .. [1] Andersen, Erling D., and Knud D. Andersen. "The MOSEK interior point\n           optimizer for linear programming: an implementation of the\n           homogeneous algorithm." High performance optimization. Springer US,\n           2000. 197-232.\n    .. [3] Freund, Robert M. "Primal-Dual Interior-Point Methods for Linear\n           Programming based on Newton\'s Method." Unpublished Course Notes,\n           March 2004. Available 2/25/2017 at:\n           https://ocw.mit.edu/courses/sloan-school-of-management/15-084j-nonlinear-programming-spring-2004/lecture-notes/lec14_int_pt_mthd.pdf\n\n    ')
    
    # Assigning a Num to a Name (line 1590):
    
    # Assigning a Num to a Name (line 1590):
    int_196418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1590, 16), 'int')
    # Assigning a type to the variable 'iteration' (line 1590)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1590, 4), 'iteration', int_196418)
    
    # Assigning a Call to a Tuple (line 1593):
    
    # Assigning a Subscript to a Name (line 1593):
    
    # Obtaining the type of the subscript
    int_196419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1593, 4), 'int')
    
    # Call to _get_blind_start(...): (line 1593)
    # Processing the call arguments (line 1593)
    # Getting the type of 'A' (line 1593)
    A_196421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 43), 'A', False)
    # Obtaining the member 'shape' of a type (line 1593)
    shape_196422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 43), A_196421, 'shape')
    # Processing the call keyword arguments (line 1593)
    kwargs_196423 = {}
    # Getting the type of '_get_blind_start' (line 1593)
    _get_blind_start_196420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 26), '_get_blind_start', False)
    # Calling _get_blind_start(args, kwargs) (line 1593)
    _get_blind_start_call_result_196424 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 26), _get_blind_start_196420, *[shape_196422], **kwargs_196423)
    
    # Obtaining the member '__getitem__' of a type (line 1593)
    getitem___196425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 4), _get_blind_start_call_result_196424, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1593)
    subscript_call_result_196426 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 4), getitem___196425, int_196419)
    
    # Assigning a type to the variable 'tuple_var_assignment_192599' (line 1593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 4), 'tuple_var_assignment_192599', subscript_call_result_196426)
    
    # Assigning a Subscript to a Name (line 1593):
    
    # Obtaining the type of the subscript
    int_196427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1593, 4), 'int')
    
    # Call to _get_blind_start(...): (line 1593)
    # Processing the call arguments (line 1593)
    # Getting the type of 'A' (line 1593)
    A_196429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 43), 'A', False)
    # Obtaining the member 'shape' of a type (line 1593)
    shape_196430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 43), A_196429, 'shape')
    # Processing the call keyword arguments (line 1593)
    kwargs_196431 = {}
    # Getting the type of '_get_blind_start' (line 1593)
    _get_blind_start_196428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 26), '_get_blind_start', False)
    # Calling _get_blind_start(args, kwargs) (line 1593)
    _get_blind_start_call_result_196432 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 26), _get_blind_start_196428, *[shape_196430], **kwargs_196431)
    
    # Obtaining the member '__getitem__' of a type (line 1593)
    getitem___196433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 4), _get_blind_start_call_result_196432, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1593)
    subscript_call_result_196434 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 4), getitem___196433, int_196427)
    
    # Assigning a type to the variable 'tuple_var_assignment_192600' (line 1593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 4), 'tuple_var_assignment_192600', subscript_call_result_196434)
    
    # Assigning a Subscript to a Name (line 1593):
    
    # Obtaining the type of the subscript
    int_196435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1593, 4), 'int')
    
    # Call to _get_blind_start(...): (line 1593)
    # Processing the call arguments (line 1593)
    # Getting the type of 'A' (line 1593)
    A_196437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 43), 'A', False)
    # Obtaining the member 'shape' of a type (line 1593)
    shape_196438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 43), A_196437, 'shape')
    # Processing the call keyword arguments (line 1593)
    kwargs_196439 = {}
    # Getting the type of '_get_blind_start' (line 1593)
    _get_blind_start_196436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 26), '_get_blind_start', False)
    # Calling _get_blind_start(args, kwargs) (line 1593)
    _get_blind_start_call_result_196440 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 26), _get_blind_start_196436, *[shape_196438], **kwargs_196439)
    
    # Obtaining the member '__getitem__' of a type (line 1593)
    getitem___196441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 4), _get_blind_start_call_result_196440, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1593)
    subscript_call_result_196442 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 4), getitem___196441, int_196435)
    
    # Assigning a type to the variable 'tuple_var_assignment_192601' (line 1593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 4), 'tuple_var_assignment_192601', subscript_call_result_196442)
    
    # Assigning a Subscript to a Name (line 1593):
    
    # Obtaining the type of the subscript
    int_196443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1593, 4), 'int')
    
    # Call to _get_blind_start(...): (line 1593)
    # Processing the call arguments (line 1593)
    # Getting the type of 'A' (line 1593)
    A_196445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 43), 'A', False)
    # Obtaining the member 'shape' of a type (line 1593)
    shape_196446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 43), A_196445, 'shape')
    # Processing the call keyword arguments (line 1593)
    kwargs_196447 = {}
    # Getting the type of '_get_blind_start' (line 1593)
    _get_blind_start_196444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 26), '_get_blind_start', False)
    # Calling _get_blind_start(args, kwargs) (line 1593)
    _get_blind_start_call_result_196448 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 26), _get_blind_start_196444, *[shape_196446], **kwargs_196447)
    
    # Obtaining the member '__getitem__' of a type (line 1593)
    getitem___196449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 4), _get_blind_start_call_result_196448, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1593)
    subscript_call_result_196450 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 4), getitem___196449, int_196443)
    
    # Assigning a type to the variable 'tuple_var_assignment_192602' (line 1593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 4), 'tuple_var_assignment_192602', subscript_call_result_196450)
    
    # Assigning a Subscript to a Name (line 1593):
    
    # Obtaining the type of the subscript
    int_196451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1593, 4), 'int')
    
    # Call to _get_blind_start(...): (line 1593)
    # Processing the call arguments (line 1593)
    # Getting the type of 'A' (line 1593)
    A_196453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 43), 'A', False)
    # Obtaining the member 'shape' of a type (line 1593)
    shape_196454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 43), A_196453, 'shape')
    # Processing the call keyword arguments (line 1593)
    kwargs_196455 = {}
    # Getting the type of '_get_blind_start' (line 1593)
    _get_blind_start_196452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 26), '_get_blind_start', False)
    # Calling _get_blind_start(args, kwargs) (line 1593)
    _get_blind_start_call_result_196456 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 26), _get_blind_start_196452, *[shape_196454], **kwargs_196455)
    
    # Obtaining the member '__getitem__' of a type (line 1593)
    getitem___196457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 4), _get_blind_start_call_result_196456, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1593)
    subscript_call_result_196458 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 4), getitem___196457, int_196451)
    
    # Assigning a type to the variable 'tuple_var_assignment_192603' (line 1593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 4), 'tuple_var_assignment_192603', subscript_call_result_196458)
    
    # Assigning a Name to a Name (line 1593):
    # Getting the type of 'tuple_var_assignment_192599' (line 1593)
    tuple_var_assignment_192599_196459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 4), 'tuple_var_assignment_192599')
    # Assigning a type to the variable 'x' (line 1593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 4), 'x', tuple_var_assignment_192599_196459)
    
    # Assigning a Name to a Name (line 1593):
    # Getting the type of 'tuple_var_assignment_192600' (line 1593)
    tuple_var_assignment_192600_196460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 4), 'tuple_var_assignment_192600')
    # Assigning a type to the variable 'y' (line 1593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 7), 'y', tuple_var_assignment_192600_196460)
    
    # Assigning a Name to a Name (line 1593):
    # Getting the type of 'tuple_var_assignment_192601' (line 1593)
    tuple_var_assignment_192601_196461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 4), 'tuple_var_assignment_192601')
    # Assigning a type to the variable 'z' (line 1593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 10), 'z', tuple_var_assignment_192601_196461)
    
    # Assigning a Name to a Name (line 1593):
    # Getting the type of 'tuple_var_assignment_192602' (line 1593)
    tuple_var_assignment_192602_196462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 4), 'tuple_var_assignment_192602')
    # Assigning a type to the variable 'tau' (line 1593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 13), 'tau', tuple_var_assignment_192602_196462)
    
    # Assigning a Name to a Name (line 1593):
    # Getting the type of 'tuple_var_assignment_192603' (line 1593)
    tuple_var_assignment_192603_196463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 4), 'tuple_var_assignment_192603')
    # Assigning a type to the variable 'kappa' (line 1593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 18), 'kappa', tuple_var_assignment_192603_196463)
    
    # Assigning a IfExp to a Name (line 1596):
    
    # Assigning a IfExp to a Name (line 1596):
    
    # Getting the type of 'pc' (line 1596)
    pc_196464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 15), 'pc')
    # Testing the type of an if expression (line 1596)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1596, 9), pc_196464)
    # SSA begins for if expression (line 1596)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    # Getting the type of 'ip' (line 1596)
    ip_196465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 9), 'ip')
    # SSA branch for the else part of an if expression (line 1596)
    module_type_store.open_ssa_branch('if expression else')
    # Getting the type of 'False' (line 1596)
    False_196466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 23), 'False')
    # SSA join for if expression (line 1596)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_196467 = union_type.UnionType.add(ip_196465, False_196466)
    
    # Assigning a type to the variable 'ip' (line 1596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1596, 4), 'ip', if_exp_196467)
    
    # Assigning a Call to a Tuple (line 1599):
    
    # Assigning a Subscript to a Name (line 1599):
    
    # Obtaining the type of the subscript
    int_196468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1599, 4), 'int')
    
    # Call to _indicators(...): (line 1599)
    # Processing the call arguments (line 1599)
    # Getting the type of 'A' (line 1600)
    A_196470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 8), 'A', False)
    # Getting the type of 'b' (line 1600)
    b_196471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 11), 'b', False)
    # Getting the type of 'c' (line 1600)
    c_196472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 14), 'c', False)
    # Getting the type of 'c0' (line 1600)
    c0_196473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 17), 'c0', False)
    # Getting the type of 'x' (line 1600)
    x_196474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 21), 'x', False)
    # Getting the type of 'y' (line 1600)
    y_196475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 24), 'y', False)
    # Getting the type of 'z' (line 1600)
    z_196476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 27), 'z', False)
    # Getting the type of 'tau' (line 1600)
    tau_196477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 30), 'tau', False)
    # Getting the type of 'kappa' (line 1600)
    kappa_196478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 35), 'kappa', False)
    # Processing the call keyword arguments (line 1599)
    kwargs_196479 = {}
    # Getting the type of '_indicators' (line 1599)
    _indicators_196469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 46), '_indicators', False)
    # Calling _indicators(args, kwargs) (line 1599)
    _indicators_call_result_196480 = invoke(stypy.reporting.localization.Localization(__file__, 1599, 46), _indicators_196469, *[A_196470, b_196471, c_196472, c0_196473, x_196474, y_196475, z_196476, tau_196477, kappa_196478], **kwargs_196479)
    
    # Obtaining the member '__getitem__' of a type (line 1599)
    getitem___196481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1599, 4), _indicators_call_result_196480, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1599)
    subscript_call_result_196482 = invoke(stypy.reporting.localization.Localization(__file__, 1599, 4), getitem___196481, int_196468)
    
    # Assigning a type to the variable 'tuple_var_assignment_192604' (line 1599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1599, 4), 'tuple_var_assignment_192604', subscript_call_result_196482)
    
    # Assigning a Subscript to a Name (line 1599):
    
    # Obtaining the type of the subscript
    int_196483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1599, 4), 'int')
    
    # Call to _indicators(...): (line 1599)
    # Processing the call arguments (line 1599)
    # Getting the type of 'A' (line 1600)
    A_196485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 8), 'A', False)
    # Getting the type of 'b' (line 1600)
    b_196486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 11), 'b', False)
    # Getting the type of 'c' (line 1600)
    c_196487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 14), 'c', False)
    # Getting the type of 'c0' (line 1600)
    c0_196488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 17), 'c0', False)
    # Getting the type of 'x' (line 1600)
    x_196489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 21), 'x', False)
    # Getting the type of 'y' (line 1600)
    y_196490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 24), 'y', False)
    # Getting the type of 'z' (line 1600)
    z_196491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 27), 'z', False)
    # Getting the type of 'tau' (line 1600)
    tau_196492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 30), 'tau', False)
    # Getting the type of 'kappa' (line 1600)
    kappa_196493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 35), 'kappa', False)
    # Processing the call keyword arguments (line 1599)
    kwargs_196494 = {}
    # Getting the type of '_indicators' (line 1599)
    _indicators_196484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 46), '_indicators', False)
    # Calling _indicators(args, kwargs) (line 1599)
    _indicators_call_result_196495 = invoke(stypy.reporting.localization.Localization(__file__, 1599, 46), _indicators_196484, *[A_196485, b_196486, c_196487, c0_196488, x_196489, y_196490, z_196491, tau_196492, kappa_196493], **kwargs_196494)
    
    # Obtaining the member '__getitem__' of a type (line 1599)
    getitem___196496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1599, 4), _indicators_call_result_196495, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1599)
    subscript_call_result_196497 = invoke(stypy.reporting.localization.Localization(__file__, 1599, 4), getitem___196496, int_196483)
    
    # Assigning a type to the variable 'tuple_var_assignment_192605' (line 1599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1599, 4), 'tuple_var_assignment_192605', subscript_call_result_196497)
    
    # Assigning a Subscript to a Name (line 1599):
    
    # Obtaining the type of the subscript
    int_196498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1599, 4), 'int')
    
    # Call to _indicators(...): (line 1599)
    # Processing the call arguments (line 1599)
    # Getting the type of 'A' (line 1600)
    A_196500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 8), 'A', False)
    # Getting the type of 'b' (line 1600)
    b_196501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 11), 'b', False)
    # Getting the type of 'c' (line 1600)
    c_196502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 14), 'c', False)
    # Getting the type of 'c0' (line 1600)
    c0_196503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 17), 'c0', False)
    # Getting the type of 'x' (line 1600)
    x_196504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 21), 'x', False)
    # Getting the type of 'y' (line 1600)
    y_196505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 24), 'y', False)
    # Getting the type of 'z' (line 1600)
    z_196506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 27), 'z', False)
    # Getting the type of 'tau' (line 1600)
    tau_196507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 30), 'tau', False)
    # Getting the type of 'kappa' (line 1600)
    kappa_196508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 35), 'kappa', False)
    # Processing the call keyword arguments (line 1599)
    kwargs_196509 = {}
    # Getting the type of '_indicators' (line 1599)
    _indicators_196499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 46), '_indicators', False)
    # Calling _indicators(args, kwargs) (line 1599)
    _indicators_call_result_196510 = invoke(stypy.reporting.localization.Localization(__file__, 1599, 46), _indicators_196499, *[A_196500, b_196501, c_196502, c0_196503, x_196504, y_196505, z_196506, tau_196507, kappa_196508], **kwargs_196509)
    
    # Obtaining the member '__getitem__' of a type (line 1599)
    getitem___196511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1599, 4), _indicators_call_result_196510, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1599)
    subscript_call_result_196512 = invoke(stypy.reporting.localization.Localization(__file__, 1599, 4), getitem___196511, int_196498)
    
    # Assigning a type to the variable 'tuple_var_assignment_192606' (line 1599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1599, 4), 'tuple_var_assignment_192606', subscript_call_result_196512)
    
    # Assigning a Subscript to a Name (line 1599):
    
    # Obtaining the type of the subscript
    int_196513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1599, 4), 'int')
    
    # Call to _indicators(...): (line 1599)
    # Processing the call arguments (line 1599)
    # Getting the type of 'A' (line 1600)
    A_196515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 8), 'A', False)
    # Getting the type of 'b' (line 1600)
    b_196516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 11), 'b', False)
    # Getting the type of 'c' (line 1600)
    c_196517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 14), 'c', False)
    # Getting the type of 'c0' (line 1600)
    c0_196518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 17), 'c0', False)
    # Getting the type of 'x' (line 1600)
    x_196519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 21), 'x', False)
    # Getting the type of 'y' (line 1600)
    y_196520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 24), 'y', False)
    # Getting the type of 'z' (line 1600)
    z_196521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 27), 'z', False)
    # Getting the type of 'tau' (line 1600)
    tau_196522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 30), 'tau', False)
    # Getting the type of 'kappa' (line 1600)
    kappa_196523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 35), 'kappa', False)
    # Processing the call keyword arguments (line 1599)
    kwargs_196524 = {}
    # Getting the type of '_indicators' (line 1599)
    _indicators_196514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 46), '_indicators', False)
    # Calling _indicators(args, kwargs) (line 1599)
    _indicators_call_result_196525 = invoke(stypy.reporting.localization.Localization(__file__, 1599, 46), _indicators_196514, *[A_196515, b_196516, c_196517, c0_196518, x_196519, y_196520, z_196521, tau_196522, kappa_196523], **kwargs_196524)
    
    # Obtaining the member '__getitem__' of a type (line 1599)
    getitem___196526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1599, 4), _indicators_call_result_196525, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1599)
    subscript_call_result_196527 = invoke(stypy.reporting.localization.Localization(__file__, 1599, 4), getitem___196526, int_196513)
    
    # Assigning a type to the variable 'tuple_var_assignment_192607' (line 1599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1599, 4), 'tuple_var_assignment_192607', subscript_call_result_196527)
    
    # Assigning a Subscript to a Name (line 1599):
    
    # Obtaining the type of the subscript
    int_196528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1599, 4), 'int')
    
    # Call to _indicators(...): (line 1599)
    # Processing the call arguments (line 1599)
    # Getting the type of 'A' (line 1600)
    A_196530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 8), 'A', False)
    # Getting the type of 'b' (line 1600)
    b_196531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 11), 'b', False)
    # Getting the type of 'c' (line 1600)
    c_196532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 14), 'c', False)
    # Getting the type of 'c0' (line 1600)
    c0_196533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 17), 'c0', False)
    # Getting the type of 'x' (line 1600)
    x_196534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 21), 'x', False)
    # Getting the type of 'y' (line 1600)
    y_196535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 24), 'y', False)
    # Getting the type of 'z' (line 1600)
    z_196536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 27), 'z', False)
    # Getting the type of 'tau' (line 1600)
    tau_196537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 30), 'tau', False)
    # Getting the type of 'kappa' (line 1600)
    kappa_196538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 35), 'kappa', False)
    # Processing the call keyword arguments (line 1599)
    kwargs_196539 = {}
    # Getting the type of '_indicators' (line 1599)
    _indicators_196529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 46), '_indicators', False)
    # Calling _indicators(args, kwargs) (line 1599)
    _indicators_call_result_196540 = invoke(stypy.reporting.localization.Localization(__file__, 1599, 46), _indicators_196529, *[A_196530, b_196531, c_196532, c0_196533, x_196534, y_196535, z_196536, tau_196537, kappa_196538], **kwargs_196539)
    
    # Obtaining the member '__getitem__' of a type (line 1599)
    getitem___196541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1599, 4), _indicators_call_result_196540, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1599)
    subscript_call_result_196542 = invoke(stypy.reporting.localization.Localization(__file__, 1599, 4), getitem___196541, int_196528)
    
    # Assigning a type to the variable 'tuple_var_assignment_192608' (line 1599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1599, 4), 'tuple_var_assignment_192608', subscript_call_result_196542)
    
    # Assigning a Subscript to a Name (line 1599):
    
    # Obtaining the type of the subscript
    int_196543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1599, 4), 'int')
    
    # Call to _indicators(...): (line 1599)
    # Processing the call arguments (line 1599)
    # Getting the type of 'A' (line 1600)
    A_196545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 8), 'A', False)
    # Getting the type of 'b' (line 1600)
    b_196546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 11), 'b', False)
    # Getting the type of 'c' (line 1600)
    c_196547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 14), 'c', False)
    # Getting the type of 'c0' (line 1600)
    c0_196548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 17), 'c0', False)
    # Getting the type of 'x' (line 1600)
    x_196549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 21), 'x', False)
    # Getting the type of 'y' (line 1600)
    y_196550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 24), 'y', False)
    # Getting the type of 'z' (line 1600)
    z_196551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 27), 'z', False)
    # Getting the type of 'tau' (line 1600)
    tau_196552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 30), 'tau', False)
    # Getting the type of 'kappa' (line 1600)
    kappa_196553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 35), 'kappa', False)
    # Processing the call keyword arguments (line 1599)
    kwargs_196554 = {}
    # Getting the type of '_indicators' (line 1599)
    _indicators_196544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 46), '_indicators', False)
    # Calling _indicators(args, kwargs) (line 1599)
    _indicators_call_result_196555 = invoke(stypy.reporting.localization.Localization(__file__, 1599, 46), _indicators_196544, *[A_196545, b_196546, c_196547, c0_196548, x_196549, y_196550, z_196551, tau_196552, kappa_196553], **kwargs_196554)
    
    # Obtaining the member '__getitem__' of a type (line 1599)
    getitem___196556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1599, 4), _indicators_call_result_196555, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1599)
    subscript_call_result_196557 = invoke(stypy.reporting.localization.Localization(__file__, 1599, 4), getitem___196556, int_196543)
    
    # Assigning a type to the variable 'tuple_var_assignment_192609' (line 1599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1599, 4), 'tuple_var_assignment_192609', subscript_call_result_196557)
    
    # Assigning a Name to a Name (line 1599):
    # Getting the type of 'tuple_var_assignment_192604' (line 1599)
    tuple_var_assignment_192604_196558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 4), 'tuple_var_assignment_192604')
    # Assigning a type to the variable 'rho_p' (line 1599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1599, 4), 'rho_p', tuple_var_assignment_192604_196558)
    
    # Assigning a Name to a Name (line 1599):
    # Getting the type of 'tuple_var_assignment_192605' (line 1599)
    tuple_var_assignment_192605_196559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 4), 'tuple_var_assignment_192605')
    # Assigning a type to the variable 'rho_d' (line 1599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1599, 11), 'rho_d', tuple_var_assignment_192605_196559)
    
    # Assigning a Name to a Name (line 1599):
    # Getting the type of 'tuple_var_assignment_192606' (line 1599)
    tuple_var_assignment_192606_196560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 4), 'tuple_var_assignment_192606')
    # Assigning a type to the variable 'rho_A' (line 1599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1599, 18), 'rho_A', tuple_var_assignment_192606_196560)
    
    # Assigning a Name to a Name (line 1599):
    # Getting the type of 'tuple_var_assignment_192607' (line 1599)
    tuple_var_assignment_192607_196561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 4), 'tuple_var_assignment_192607')
    # Assigning a type to the variable 'rho_g' (line 1599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1599, 25), 'rho_g', tuple_var_assignment_192607_196561)
    
    # Assigning a Name to a Name (line 1599):
    # Getting the type of 'tuple_var_assignment_192608' (line 1599)
    tuple_var_assignment_192608_196562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 4), 'tuple_var_assignment_192608')
    # Assigning a type to the variable 'rho_mu' (line 1599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1599, 32), 'rho_mu', tuple_var_assignment_192608_196562)
    
    # Assigning a Name to a Name (line 1599):
    # Getting the type of 'tuple_var_assignment_192609' (line 1599)
    tuple_var_assignment_192609_196563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 4), 'tuple_var_assignment_192609')
    # Assigning a type to the variable 'obj' (line 1599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1599, 40), 'obj', tuple_var_assignment_192609_196563)
    
    # Assigning a BoolOp to a Name (line 1601):
    
    # Assigning a BoolOp to a Name (line 1601):
    
    # Evaluating a boolean operation
    
    # Getting the type of 'rho_p' (line 1601)
    rho_p_196564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 9), 'rho_p')
    # Getting the type of 'tol' (line 1601)
    tol_196565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 17), 'tol')
    # Applying the binary operator '>' (line 1601)
    result_gt_196566 = python_operator(stypy.reporting.localization.Localization(__file__, 1601, 9), '>', rho_p_196564, tol_196565)
    
    
    # Getting the type of 'rho_d' (line 1601)
    rho_d_196567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 24), 'rho_d')
    # Getting the type of 'tol' (line 1601)
    tol_196568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 32), 'tol')
    # Applying the binary operator '>' (line 1601)
    result_gt_196569 = python_operator(stypy.reporting.localization.Localization(__file__, 1601, 24), '>', rho_d_196567, tol_196568)
    
    # Applying the binary operator 'or' (line 1601)
    result_or_keyword_196570 = python_operator(stypy.reporting.localization.Localization(__file__, 1601, 9), 'or', result_gt_196566, result_gt_196569)
    
    # Getting the type of 'rho_A' (line 1601)
    rho_A_196571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 39), 'rho_A')
    # Getting the type of 'tol' (line 1601)
    tol_196572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 47), 'tol')
    # Applying the binary operator '>' (line 1601)
    result_gt_196573 = python_operator(stypy.reporting.localization.Localization(__file__, 1601, 39), '>', rho_A_196571, tol_196572)
    
    # Applying the binary operator 'or' (line 1601)
    result_or_keyword_196574 = python_operator(stypy.reporting.localization.Localization(__file__, 1601, 9), 'or', result_or_keyword_196570, result_gt_196573)
    
    # Assigning a type to the variable 'go' (line 1601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1601, 4), 'go', result_or_keyword_196574)
    
    # Getting the type of 'disp' (line 1603)
    disp_196575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1603, 7), 'disp')
    # Testing the type of an if condition (line 1603)
    if_condition_196576 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1603, 4), disp_196575)
    # Assigning a type to the variable 'if_condition_196576' (line 1603)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1603, 4), 'if_condition_196576', if_condition_196576)
    # SSA begins for if statement (line 1603)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _display_iter(...): (line 1604)
    # Processing the call arguments (line 1604)
    # Getting the type of 'rho_p' (line 1604)
    rho_p_196578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 22), 'rho_p', False)
    # Getting the type of 'rho_d' (line 1604)
    rho_d_196579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 29), 'rho_d', False)
    # Getting the type of 'rho_g' (line 1604)
    rho_g_196580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 36), 'rho_g', False)
    str_196581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1604, 43), 'str', '-')
    # Getting the type of 'rho_mu' (line 1604)
    rho_mu_196582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 48), 'rho_mu', False)
    # Getting the type of 'obj' (line 1604)
    obj_196583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 56), 'obj', False)
    # Processing the call keyword arguments (line 1604)
    # Getting the type of 'True' (line 1604)
    True_196584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 68), 'True', False)
    keyword_196585 = True_196584
    kwargs_196586 = {'header': keyword_196585}
    # Getting the type of '_display_iter' (line 1604)
    _display_iter_196577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 8), '_display_iter', False)
    # Calling _display_iter(args, kwargs) (line 1604)
    _display_iter_call_result_196587 = invoke(stypy.reporting.localization.Localization(__file__, 1604, 8), _display_iter_196577, *[rho_p_196578, rho_d_196579, rho_g_196580, str_196581, rho_mu_196582, obj_196583], **kwargs_196586)
    
    # SSA join for if statement (line 1603)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 1606):
    
    # Assigning a Num to a Name (line 1606):
    int_196588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1606, 13), 'int')
    # Assigning a type to the variable 'status' (line 1606)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1606, 4), 'status', int_196588)
    
    # Assigning a Str to a Name (line 1607):
    
    # Assigning a Str to a Name (line 1607):
    str_196589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1607, 14), 'str', 'Optimization terminated successfully.')
    # Assigning a type to the variable 'message' (line 1607)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1607, 4), 'message', str_196589)
    
    # Getting the type of 'sparse' (line 1609)
    sparse_196590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1609, 7), 'sparse')
    # Testing the type of an if condition (line 1609)
    if_condition_196591 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1609, 4), sparse_196590)
    # Assigning a type to the variable 'if_condition_196591' (line 1609)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1609, 4), 'if_condition_196591', if_condition_196591)
    # SSA begins for if statement (line 1609)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1610):
    
    # Assigning a Call to a Name (line 1610):
    
    # Call to csc_matrix(...): (line 1610)
    # Processing the call arguments (line 1610)
    # Getting the type of 'A' (line 1610)
    A_196594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1610, 27), 'A', False)
    # Processing the call keyword arguments (line 1610)
    kwargs_196595 = {}
    # Getting the type of 'sps' (line 1610)
    sps_196592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1610, 12), 'sps', False)
    # Obtaining the member 'csc_matrix' of a type (line 1610)
    csc_matrix_196593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1610, 12), sps_196592, 'csc_matrix')
    # Calling csc_matrix(args, kwargs) (line 1610)
    csc_matrix_call_result_196596 = invoke(stypy.reporting.localization.Localization(__file__, 1610, 12), csc_matrix_196593, *[A_196594], **kwargs_196595)
    
    # Assigning a type to the variable 'A' (line 1610)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1610, 8), 'A', csc_matrix_call_result_196596)
    
    # Assigning a Call to a Attribute (line 1611):
    
    # Assigning a Call to a Attribute (line 1611):
    
    # Call to transpose(...): (line 1611)
    # Processing the call keyword arguments (line 1611)
    kwargs_196599 = {}
    # Getting the type of 'A' (line 1611)
    A_196597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 14), 'A', False)
    # Obtaining the member 'transpose' of a type (line 1611)
    transpose_196598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1611, 14), A_196597, 'transpose')
    # Calling transpose(args, kwargs) (line 1611)
    transpose_call_result_196600 = invoke(stypy.reporting.localization.Localization(__file__, 1611, 14), transpose_196598, *[], **kwargs_196599)
    
    # Getting the type of 'A' (line 1611)
    A_196601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 8), 'A')
    # Setting the type of the member 'T' of a type (line 1611)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1611, 8), A_196601, 'T', transpose_call_result_196600)
    # SSA join for if statement (line 1609)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'go' (line 1615)
    go_196602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 10), 'go')
    # Testing the type of an if condition (line 1615)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1615, 4), go_196602)
    # SSA begins for while statement (line 1615)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Getting the type of 'iteration' (line 1617)
    iteration_196603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 8), 'iteration')
    int_196604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1617, 21), 'int')
    # Applying the binary operator '+=' (line 1617)
    result_iadd_196605 = python_operator(stypy.reporting.localization.Localization(__file__, 1617, 8), '+=', iteration_196603, int_196604)
    # Assigning a type to the variable 'iteration' (line 1617)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1617, 8), 'iteration', result_iadd_196605)
    
    
    # Getting the type of 'ip' (line 1619)
    ip_196606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 11), 'ip')
    # Testing the type of an if condition (line 1619)
    if_condition_196607 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1619, 8), ip_196606)
    # Assigning a type to the variable 'if_condition_196607' (line 1619)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1619, 8), 'if_condition_196607', if_condition_196607)
    # SSA begins for if statement (line 1619)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1621):
    
    # Assigning a Num to a Name (line 1621):
    int_196608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1621, 20), 'int')
    # Assigning a type to the variable 'gamma' (line 1621)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1621, 12), 'gamma', int_196608)

    @norecursion
    def eta(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'eta'
        module_type_store = module_type_store.open_function_context('eta', 1623, 12, False)
        
        # Passed parameters checking function
        eta.stypy_localization = localization
        eta.stypy_type_of_self = None
        eta.stypy_type_store = module_type_store
        eta.stypy_function_name = 'eta'
        eta.stypy_param_names_list = ['g']
        eta.stypy_varargs_param_name = None
        eta.stypy_kwargs_param_name = None
        eta.stypy_call_defaults = defaults
        eta.stypy_call_varargs = varargs
        eta.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'eta', ['g'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'eta', localization, ['g'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'eta(...)' code ##################

        int_196609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1624, 23), 'int')
        # Assigning a type to the variable 'stypy_return_type' (line 1624)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1624, 16), 'stypy_return_type', int_196609)
        
        # ################# End of 'eta(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'eta' in the type store
        # Getting the type of 'stypy_return_type' (line 1623)
        stypy_return_type_196610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 12), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_196610)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'eta'
        return stypy_return_type_196610

    # Assigning a type to the variable 'eta' (line 1623)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1623, 12), 'eta', eta)
    # SSA branch for the else part of an if statement (line 1619)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a IfExp to a Name (line 1629):
    
    # Assigning a IfExp to a Name (line 1629):
    
    # Getting the type of 'pc' (line 1629)
    pc_196611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 25), 'pc')
    # Testing the type of an if expression (line 1629)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1629, 20), pc_196611)
    # SSA begins for if expression (line 1629)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    int_196612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1629, 20), 'int')
    # SSA branch for the else part of an if expression (line 1629)
    module_type_store.open_ssa_branch('if expression else')
    # Getting the type of 'beta' (line 1629)
    beta_196613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 33), 'beta')
    
    # Call to mean(...): (line 1629)
    # Processing the call arguments (line 1629)
    # Getting the type of 'z' (line 1629)
    z_196616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 48), 'z', False)
    # Getting the type of 'x' (line 1629)
    x_196617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 52), 'x', False)
    # Applying the binary operator '*' (line 1629)
    result_mul_196618 = python_operator(stypy.reporting.localization.Localization(__file__, 1629, 48), '*', z_196616, x_196617)
    
    # Processing the call keyword arguments (line 1629)
    kwargs_196619 = {}
    # Getting the type of 'np' (line 1629)
    np_196614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 40), 'np', False)
    # Obtaining the member 'mean' of a type (line 1629)
    mean_196615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1629, 40), np_196614, 'mean')
    # Calling mean(args, kwargs) (line 1629)
    mean_call_result_196620 = invoke(stypy.reporting.localization.Localization(__file__, 1629, 40), mean_196615, *[result_mul_196618], **kwargs_196619)
    
    # Applying the binary operator '*' (line 1629)
    result_mul_196621 = python_operator(stypy.reporting.localization.Localization(__file__, 1629, 33), '*', beta_196613, mean_call_result_196620)
    
    # SSA join for if expression (line 1629)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_196622 = union_type.UnionType.add(int_196612, result_mul_196621)
    
    # Assigning a type to the variable 'gamma' (line 1629)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1629, 12), 'gamma', if_exp_196622)

    @norecursion
    def eta(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'gamma' (line 1632)
        gamma_196623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 22), 'gamma')
        defaults = [gamma_196623]
        # Create a new context for function 'eta'
        module_type_store = module_type_store.open_function_context('eta', 1632, 12, False)
        
        # Passed parameters checking function
        eta.stypy_localization = localization
        eta.stypy_type_of_self = None
        eta.stypy_type_store = module_type_store
        eta.stypy_function_name = 'eta'
        eta.stypy_param_names_list = ['g']
        eta.stypy_varargs_param_name = None
        eta.stypy_kwargs_param_name = None
        eta.stypy_call_defaults = defaults
        eta.stypy_call_varargs = varargs
        eta.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'eta', ['g'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'eta', localization, ['g'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'eta(...)' code ##################

        int_196624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1633, 23), 'int')
        # Getting the type of 'g' (line 1633)
        g_196625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1633, 27), 'g')
        # Applying the binary operator '-' (line 1633)
        result_sub_196626 = python_operator(stypy.reporting.localization.Localization(__file__, 1633, 23), '-', int_196624, g_196625)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1633)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1633, 16), 'stypy_return_type', result_sub_196626)
        
        # ################# End of 'eta(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'eta' in the type store
        # Getting the type of 'stypy_return_type' (line 1632)
        stypy_return_type_196627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 12), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_196627)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'eta'
        return stypy_return_type_196627

    # Assigning a type to the variable 'eta' (line 1632)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1632, 12), 'eta', eta)
    # SSA join for if statement (line 1619)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 1635)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Tuple (line 1637):
    
    # Assigning a Subscript to a Name (line 1637):
    
    # Obtaining the type of the subscript
    int_196628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1637, 12), 'int')
    
    # Call to _get_delta(...): (line 1637)
    # Processing the call arguments (line 1637)
    # Getting the type of 'A' (line 1638)
    A_196630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 16), 'A', False)
    # Getting the type of 'b' (line 1638)
    b_196631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 19), 'b', False)
    # Getting the type of 'c' (line 1638)
    c_196632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 22), 'c', False)
    # Getting the type of 'x' (line 1638)
    x_196633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 25), 'x', False)
    # Getting the type of 'y' (line 1638)
    y_196634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 28), 'y', False)
    # Getting the type of 'z' (line 1638)
    z_196635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 31), 'z', False)
    # Getting the type of 'tau' (line 1638)
    tau_196636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 34), 'tau', False)
    # Getting the type of 'kappa' (line 1638)
    kappa_196637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 39), 'kappa', False)
    # Getting the type of 'gamma' (line 1638)
    gamma_196638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 46), 'gamma', False)
    # Getting the type of 'eta' (line 1638)
    eta_196639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 53), 'eta', False)
    # Getting the type of 'sparse' (line 1639)
    sparse_196640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 16), 'sparse', False)
    # Getting the type of 'lstsq' (line 1639)
    lstsq_196641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 24), 'lstsq', False)
    # Getting the type of 'sym_pos' (line 1639)
    sym_pos_196642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 31), 'sym_pos', False)
    # Getting the type of 'cholesky' (line 1639)
    cholesky_196643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 40), 'cholesky', False)
    # Getting the type of 'pc' (line 1639)
    pc_196644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 50), 'pc', False)
    # Getting the type of 'ip' (line 1639)
    ip_196645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 54), 'ip', False)
    # Getting the type of 'permc_spec' (line 1639)
    permc_spec_196646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 58), 'permc_spec', False)
    # Processing the call keyword arguments (line 1637)
    kwargs_196647 = {}
    # Getting the type of '_get_delta' (line 1637)
    _get_delta_196629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 44), '_get_delta', False)
    # Calling _get_delta(args, kwargs) (line 1637)
    _get_delta_call_result_196648 = invoke(stypy.reporting.localization.Localization(__file__, 1637, 44), _get_delta_196629, *[A_196630, b_196631, c_196632, x_196633, y_196634, z_196635, tau_196636, kappa_196637, gamma_196638, eta_196639, sparse_196640, lstsq_196641, sym_pos_196642, cholesky_196643, pc_196644, ip_196645, permc_spec_196646], **kwargs_196647)
    
    # Obtaining the member '__getitem__' of a type (line 1637)
    getitem___196649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1637, 12), _get_delta_call_result_196648, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1637)
    subscript_call_result_196650 = invoke(stypy.reporting.localization.Localization(__file__, 1637, 12), getitem___196649, int_196628)
    
    # Assigning a type to the variable 'tuple_var_assignment_192610' (line 1637)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1637, 12), 'tuple_var_assignment_192610', subscript_call_result_196650)
    
    # Assigning a Subscript to a Name (line 1637):
    
    # Obtaining the type of the subscript
    int_196651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1637, 12), 'int')
    
    # Call to _get_delta(...): (line 1637)
    # Processing the call arguments (line 1637)
    # Getting the type of 'A' (line 1638)
    A_196653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 16), 'A', False)
    # Getting the type of 'b' (line 1638)
    b_196654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 19), 'b', False)
    # Getting the type of 'c' (line 1638)
    c_196655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 22), 'c', False)
    # Getting the type of 'x' (line 1638)
    x_196656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 25), 'x', False)
    # Getting the type of 'y' (line 1638)
    y_196657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 28), 'y', False)
    # Getting the type of 'z' (line 1638)
    z_196658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 31), 'z', False)
    # Getting the type of 'tau' (line 1638)
    tau_196659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 34), 'tau', False)
    # Getting the type of 'kappa' (line 1638)
    kappa_196660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 39), 'kappa', False)
    # Getting the type of 'gamma' (line 1638)
    gamma_196661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 46), 'gamma', False)
    # Getting the type of 'eta' (line 1638)
    eta_196662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 53), 'eta', False)
    # Getting the type of 'sparse' (line 1639)
    sparse_196663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 16), 'sparse', False)
    # Getting the type of 'lstsq' (line 1639)
    lstsq_196664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 24), 'lstsq', False)
    # Getting the type of 'sym_pos' (line 1639)
    sym_pos_196665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 31), 'sym_pos', False)
    # Getting the type of 'cholesky' (line 1639)
    cholesky_196666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 40), 'cholesky', False)
    # Getting the type of 'pc' (line 1639)
    pc_196667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 50), 'pc', False)
    # Getting the type of 'ip' (line 1639)
    ip_196668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 54), 'ip', False)
    # Getting the type of 'permc_spec' (line 1639)
    permc_spec_196669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 58), 'permc_spec', False)
    # Processing the call keyword arguments (line 1637)
    kwargs_196670 = {}
    # Getting the type of '_get_delta' (line 1637)
    _get_delta_196652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 44), '_get_delta', False)
    # Calling _get_delta(args, kwargs) (line 1637)
    _get_delta_call_result_196671 = invoke(stypy.reporting.localization.Localization(__file__, 1637, 44), _get_delta_196652, *[A_196653, b_196654, c_196655, x_196656, y_196657, z_196658, tau_196659, kappa_196660, gamma_196661, eta_196662, sparse_196663, lstsq_196664, sym_pos_196665, cholesky_196666, pc_196667, ip_196668, permc_spec_196669], **kwargs_196670)
    
    # Obtaining the member '__getitem__' of a type (line 1637)
    getitem___196672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1637, 12), _get_delta_call_result_196671, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1637)
    subscript_call_result_196673 = invoke(stypy.reporting.localization.Localization(__file__, 1637, 12), getitem___196672, int_196651)
    
    # Assigning a type to the variable 'tuple_var_assignment_192611' (line 1637)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1637, 12), 'tuple_var_assignment_192611', subscript_call_result_196673)
    
    # Assigning a Subscript to a Name (line 1637):
    
    # Obtaining the type of the subscript
    int_196674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1637, 12), 'int')
    
    # Call to _get_delta(...): (line 1637)
    # Processing the call arguments (line 1637)
    # Getting the type of 'A' (line 1638)
    A_196676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 16), 'A', False)
    # Getting the type of 'b' (line 1638)
    b_196677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 19), 'b', False)
    # Getting the type of 'c' (line 1638)
    c_196678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 22), 'c', False)
    # Getting the type of 'x' (line 1638)
    x_196679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 25), 'x', False)
    # Getting the type of 'y' (line 1638)
    y_196680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 28), 'y', False)
    # Getting the type of 'z' (line 1638)
    z_196681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 31), 'z', False)
    # Getting the type of 'tau' (line 1638)
    tau_196682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 34), 'tau', False)
    # Getting the type of 'kappa' (line 1638)
    kappa_196683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 39), 'kappa', False)
    # Getting the type of 'gamma' (line 1638)
    gamma_196684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 46), 'gamma', False)
    # Getting the type of 'eta' (line 1638)
    eta_196685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 53), 'eta', False)
    # Getting the type of 'sparse' (line 1639)
    sparse_196686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 16), 'sparse', False)
    # Getting the type of 'lstsq' (line 1639)
    lstsq_196687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 24), 'lstsq', False)
    # Getting the type of 'sym_pos' (line 1639)
    sym_pos_196688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 31), 'sym_pos', False)
    # Getting the type of 'cholesky' (line 1639)
    cholesky_196689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 40), 'cholesky', False)
    # Getting the type of 'pc' (line 1639)
    pc_196690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 50), 'pc', False)
    # Getting the type of 'ip' (line 1639)
    ip_196691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 54), 'ip', False)
    # Getting the type of 'permc_spec' (line 1639)
    permc_spec_196692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 58), 'permc_spec', False)
    # Processing the call keyword arguments (line 1637)
    kwargs_196693 = {}
    # Getting the type of '_get_delta' (line 1637)
    _get_delta_196675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 44), '_get_delta', False)
    # Calling _get_delta(args, kwargs) (line 1637)
    _get_delta_call_result_196694 = invoke(stypy.reporting.localization.Localization(__file__, 1637, 44), _get_delta_196675, *[A_196676, b_196677, c_196678, x_196679, y_196680, z_196681, tau_196682, kappa_196683, gamma_196684, eta_196685, sparse_196686, lstsq_196687, sym_pos_196688, cholesky_196689, pc_196690, ip_196691, permc_spec_196692], **kwargs_196693)
    
    # Obtaining the member '__getitem__' of a type (line 1637)
    getitem___196695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1637, 12), _get_delta_call_result_196694, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1637)
    subscript_call_result_196696 = invoke(stypy.reporting.localization.Localization(__file__, 1637, 12), getitem___196695, int_196674)
    
    # Assigning a type to the variable 'tuple_var_assignment_192612' (line 1637)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1637, 12), 'tuple_var_assignment_192612', subscript_call_result_196696)
    
    # Assigning a Subscript to a Name (line 1637):
    
    # Obtaining the type of the subscript
    int_196697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1637, 12), 'int')
    
    # Call to _get_delta(...): (line 1637)
    # Processing the call arguments (line 1637)
    # Getting the type of 'A' (line 1638)
    A_196699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 16), 'A', False)
    # Getting the type of 'b' (line 1638)
    b_196700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 19), 'b', False)
    # Getting the type of 'c' (line 1638)
    c_196701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 22), 'c', False)
    # Getting the type of 'x' (line 1638)
    x_196702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 25), 'x', False)
    # Getting the type of 'y' (line 1638)
    y_196703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 28), 'y', False)
    # Getting the type of 'z' (line 1638)
    z_196704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 31), 'z', False)
    # Getting the type of 'tau' (line 1638)
    tau_196705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 34), 'tau', False)
    # Getting the type of 'kappa' (line 1638)
    kappa_196706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 39), 'kappa', False)
    # Getting the type of 'gamma' (line 1638)
    gamma_196707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 46), 'gamma', False)
    # Getting the type of 'eta' (line 1638)
    eta_196708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 53), 'eta', False)
    # Getting the type of 'sparse' (line 1639)
    sparse_196709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 16), 'sparse', False)
    # Getting the type of 'lstsq' (line 1639)
    lstsq_196710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 24), 'lstsq', False)
    # Getting the type of 'sym_pos' (line 1639)
    sym_pos_196711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 31), 'sym_pos', False)
    # Getting the type of 'cholesky' (line 1639)
    cholesky_196712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 40), 'cholesky', False)
    # Getting the type of 'pc' (line 1639)
    pc_196713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 50), 'pc', False)
    # Getting the type of 'ip' (line 1639)
    ip_196714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 54), 'ip', False)
    # Getting the type of 'permc_spec' (line 1639)
    permc_spec_196715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 58), 'permc_spec', False)
    # Processing the call keyword arguments (line 1637)
    kwargs_196716 = {}
    # Getting the type of '_get_delta' (line 1637)
    _get_delta_196698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 44), '_get_delta', False)
    # Calling _get_delta(args, kwargs) (line 1637)
    _get_delta_call_result_196717 = invoke(stypy.reporting.localization.Localization(__file__, 1637, 44), _get_delta_196698, *[A_196699, b_196700, c_196701, x_196702, y_196703, z_196704, tau_196705, kappa_196706, gamma_196707, eta_196708, sparse_196709, lstsq_196710, sym_pos_196711, cholesky_196712, pc_196713, ip_196714, permc_spec_196715], **kwargs_196716)
    
    # Obtaining the member '__getitem__' of a type (line 1637)
    getitem___196718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1637, 12), _get_delta_call_result_196717, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1637)
    subscript_call_result_196719 = invoke(stypy.reporting.localization.Localization(__file__, 1637, 12), getitem___196718, int_196697)
    
    # Assigning a type to the variable 'tuple_var_assignment_192613' (line 1637)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1637, 12), 'tuple_var_assignment_192613', subscript_call_result_196719)
    
    # Assigning a Subscript to a Name (line 1637):
    
    # Obtaining the type of the subscript
    int_196720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1637, 12), 'int')
    
    # Call to _get_delta(...): (line 1637)
    # Processing the call arguments (line 1637)
    # Getting the type of 'A' (line 1638)
    A_196722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 16), 'A', False)
    # Getting the type of 'b' (line 1638)
    b_196723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 19), 'b', False)
    # Getting the type of 'c' (line 1638)
    c_196724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 22), 'c', False)
    # Getting the type of 'x' (line 1638)
    x_196725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 25), 'x', False)
    # Getting the type of 'y' (line 1638)
    y_196726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 28), 'y', False)
    # Getting the type of 'z' (line 1638)
    z_196727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 31), 'z', False)
    # Getting the type of 'tau' (line 1638)
    tau_196728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 34), 'tau', False)
    # Getting the type of 'kappa' (line 1638)
    kappa_196729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 39), 'kappa', False)
    # Getting the type of 'gamma' (line 1638)
    gamma_196730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 46), 'gamma', False)
    # Getting the type of 'eta' (line 1638)
    eta_196731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 53), 'eta', False)
    # Getting the type of 'sparse' (line 1639)
    sparse_196732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 16), 'sparse', False)
    # Getting the type of 'lstsq' (line 1639)
    lstsq_196733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 24), 'lstsq', False)
    # Getting the type of 'sym_pos' (line 1639)
    sym_pos_196734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 31), 'sym_pos', False)
    # Getting the type of 'cholesky' (line 1639)
    cholesky_196735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 40), 'cholesky', False)
    # Getting the type of 'pc' (line 1639)
    pc_196736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 50), 'pc', False)
    # Getting the type of 'ip' (line 1639)
    ip_196737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 54), 'ip', False)
    # Getting the type of 'permc_spec' (line 1639)
    permc_spec_196738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 58), 'permc_spec', False)
    # Processing the call keyword arguments (line 1637)
    kwargs_196739 = {}
    # Getting the type of '_get_delta' (line 1637)
    _get_delta_196721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 44), '_get_delta', False)
    # Calling _get_delta(args, kwargs) (line 1637)
    _get_delta_call_result_196740 = invoke(stypy.reporting.localization.Localization(__file__, 1637, 44), _get_delta_196721, *[A_196722, b_196723, c_196724, x_196725, y_196726, z_196727, tau_196728, kappa_196729, gamma_196730, eta_196731, sparse_196732, lstsq_196733, sym_pos_196734, cholesky_196735, pc_196736, ip_196737, permc_spec_196738], **kwargs_196739)
    
    # Obtaining the member '__getitem__' of a type (line 1637)
    getitem___196741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1637, 12), _get_delta_call_result_196740, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1637)
    subscript_call_result_196742 = invoke(stypy.reporting.localization.Localization(__file__, 1637, 12), getitem___196741, int_196720)
    
    # Assigning a type to the variable 'tuple_var_assignment_192614' (line 1637)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1637, 12), 'tuple_var_assignment_192614', subscript_call_result_196742)
    
    # Assigning a Name to a Name (line 1637):
    # Getting the type of 'tuple_var_assignment_192610' (line 1637)
    tuple_var_assignment_192610_196743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 12), 'tuple_var_assignment_192610')
    # Assigning a type to the variable 'd_x' (line 1637)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1637, 12), 'd_x', tuple_var_assignment_192610_196743)
    
    # Assigning a Name to a Name (line 1637):
    # Getting the type of 'tuple_var_assignment_192611' (line 1637)
    tuple_var_assignment_192611_196744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 12), 'tuple_var_assignment_192611')
    # Assigning a type to the variable 'd_y' (line 1637)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1637, 17), 'd_y', tuple_var_assignment_192611_196744)
    
    # Assigning a Name to a Name (line 1637):
    # Getting the type of 'tuple_var_assignment_192612' (line 1637)
    tuple_var_assignment_192612_196745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 12), 'tuple_var_assignment_192612')
    # Assigning a type to the variable 'd_z' (line 1637)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1637, 22), 'd_z', tuple_var_assignment_192612_196745)
    
    # Assigning a Name to a Name (line 1637):
    # Getting the type of 'tuple_var_assignment_192613' (line 1637)
    tuple_var_assignment_192613_196746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 12), 'tuple_var_assignment_192613')
    # Assigning a type to the variable 'd_tau' (line 1637)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1637, 27), 'd_tau', tuple_var_assignment_192613_196746)
    
    # Assigning a Name to a Name (line 1637):
    # Getting the type of 'tuple_var_assignment_192614' (line 1637)
    tuple_var_assignment_192614_196747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 12), 'tuple_var_assignment_192614')
    # Assigning a type to the variable 'd_kappa' (line 1637)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1637, 34), 'd_kappa', tuple_var_assignment_192614_196747)
    
    # Getting the type of 'ip' (line 1641)
    ip_196748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 15), 'ip')
    # Testing the type of an if condition (line 1641)
    if_condition_196749 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1641, 12), ip_196748)
    # Assigning a type to the variable 'if_condition_196749' (line 1641)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1641, 12), 'if_condition_196749', if_condition_196749)
    # SSA begins for if statement (line 1641)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1645):
    
    # Assigning a Num to a Name (line 1645):
    float_196750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1645, 24), 'float')
    # Assigning a type to the variable 'alpha' (line 1645)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 16), 'alpha', float_196750)
    
    # Assigning a Call to a Tuple (line 1646):
    
    # Assigning a Subscript to a Name (line 1646):
    
    # Obtaining the type of the subscript
    int_196751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1646, 16), 'int')
    
    # Call to _do_step(...): (line 1646)
    # Processing the call arguments (line 1646)
    # Getting the type of 'x' (line 1647)
    x_196753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 20), 'x', False)
    # Getting the type of 'y' (line 1647)
    y_196754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 23), 'y', False)
    # Getting the type of 'z' (line 1647)
    z_196755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 26), 'z', False)
    # Getting the type of 'tau' (line 1647)
    tau_196756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 29), 'tau', False)
    # Getting the type of 'kappa' (line 1647)
    kappa_196757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 34), 'kappa', False)
    # Getting the type of 'd_x' (line 1647)
    d_x_196758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 41), 'd_x', False)
    # Getting the type of 'd_y' (line 1647)
    d_y_196759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 46), 'd_y', False)
    # Getting the type of 'd_z' (line 1648)
    d_z_196760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 20), 'd_z', False)
    # Getting the type of 'd_tau' (line 1648)
    d_tau_196761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 25), 'd_tau', False)
    # Getting the type of 'd_kappa' (line 1648)
    d_kappa_196762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 32), 'd_kappa', False)
    # Getting the type of 'alpha' (line 1648)
    alpha_196763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 41), 'alpha', False)
    # Processing the call keyword arguments (line 1646)
    kwargs_196764 = {}
    # Getting the type of '_do_step' (line 1646)
    _do_step_196752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 38), '_do_step', False)
    # Calling _do_step(args, kwargs) (line 1646)
    _do_step_call_result_196765 = invoke(stypy.reporting.localization.Localization(__file__, 1646, 38), _do_step_196752, *[x_196753, y_196754, z_196755, tau_196756, kappa_196757, d_x_196758, d_y_196759, d_z_196760, d_tau_196761, d_kappa_196762, alpha_196763], **kwargs_196764)
    
    # Obtaining the member '__getitem__' of a type (line 1646)
    getitem___196766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1646, 16), _do_step_call_result_196765, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1646)
    subscript_call_result_196767 = invoke(stypy.reporting.localization.Localization(__file__, 1646, 16), getitem___196766, int_196751)
    
    # Assigning a type to the variable 'tuple_var_assignment_192615' (line 1646)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1646, 16), 'tuple_var_assignment_192615', subscript_call_result_196767)
    
    # Assigning a Subscript to a Name (line 1646):
    
    # Obtaining the type of the subscript
    int_196768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1646, 16), 'int')
    
    # Call to _do_step(...): (line 1646)
    # Processing the call arguments (line 1646)
    # Getting the type of 'x' (line 1647)
    x_196770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 20), 'x', False)
    # Getting the type of 'y' (line 1647)
    y_196771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 23), 'y', False)
    # Getting the type of 'z' (line 1647)
    z_196772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 26), 'z', False)
    # Getting the type of 'tau' (line 1647)
    tau_196773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 29), 'tau', False)
    # Getting the type of 'kappa' (line 1647)
    kappa_196774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 34), 'kappa', False)
    # Getting the type of 'd_x' (line 1647)
    d_x_196775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 41), 'd_x', False)
    # Getting the type of 'd_y' (line 1647)
    d_y_196776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 46), 'd_y', False)
    # Getting the type of 'd_z' (line 1648)
    d_z_196777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 20), 'd_z', False)
    # Getting the type of 'd_tau' (line 1648)
    d_tau_196778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 25), 'd_tau', False)
    # Getting the type of 'd_kappa' (line 1648)
    d_kappa_196779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 32), 'd_kappa', False)
    # Getting the type of 'alpha' (line 1648)
    alpha_196780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 41), 'alpha', False)
    # Processing the call keyword arguments (line 1646)
    kwargs_196781 = {}
    # Getting the type of '_do_step' (line 1646)
    _do_step_196769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 38), '_do_step', False)
    # Calling _do_step(args, kwargs) (line 1646)
    _do_step_call_result_196782 = invoke(stypy.reporting.localization.Localization(__file__, 1646, 38), _do_step_196769, *[x_196770, y_196771, z_196772, tau_196773, kappa_196774, d_x_196775, d_y_196776, d_z_196777, d_tau_196778, d_kappa_196779, alpha_196780], **kwargs_196781)
    
    # Obtaining the member '__getitem__' of a type (line 1646)
    getitem___196783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1646, 16), _do_step_call_result_196782, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1646)
    subscript_call_result_196784 = invoke(stypy.reporting.localization.Localization(__file__, 1646, 16), getitem___196783, int_196768)
    
    # Assigning a type to the variable 'tuple_var_assignment_192616' (line 1646)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1646, 16), 'tuple_var_assignment_192616', subscript_call_result_196784)
    
    # Assigning a Subscript to a Name (line 1646):
    
    # Obtaining the type of the subscript
    int_196785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1646, 16), 'int')
    
    # Call to _do_step(...): (line 1646)
    # Processing the call arguments (line 1646)
    # Getting the type of 'x' (line 1647)
    x_196787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 20), 'x', False)
    # Getting the type of 'y' (line 1647)
    y_196788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 23), 'y', False)
    # Getting the type of 'z' (line 1647)
    z_196789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 26), 'z', False)
    # Getting the type of 'tau' (line 1647)
    tau_196790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 29), 'tau', False)
    # Getting the type of 'kappa' (line 1647)
    kappa_196791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 34), 'kappa', False)
    # Getting the type of 'd_x' (line 1647)
    d_x_196792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 41), 'd_x', False)
    # Getting the type of 'd_y' (line 1647)
    d_y_196793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 46), 'd_y', False)
    # Getting the type of 'd_z' (line 1648)
    d_z_196794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 20), 'd_z', False)
    # Getting the type of 'd_tau' (line 1648)
    d_tau_196795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 25), 'd_tau', False)
    # Getting the type of 'd_kappa' (line 1648)
    d_kappa_196796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 32), 'd_kappa', False)
    # Getting the type of 'alpha' (line 1648)
    alpha_196797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 41), 'alpha', False)
    # Processing the call keyword arguments (line 1646)
    kwargs_196798 = {}
    # Getting the type of '_do_step' (line 1646)
    _do_step_196786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 38), '_do_step', False)
    # Calling _do_step(args, kwargs) (line 1646)
    _do_step_call_result_196799 = invoke(stypy.reporting.localization.Localization(__file__, 1646, 38), _do_step_196786, *[x_196787, y_196788, z_196789, tau_196790, kappa_196791, d_x_196792, d_y_196793, d_z_196794, d_tau_196795, d_kappa_196796, alpha_196797], **kwargs_196798)
    
    # Obtaining the member '__getitem__' of a type (line 1646)
    getitem___196800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1646, 16), _do_step_call_result_196799, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1646)
    subscript_call_result_196801 = invoke(stypy.reporting.localization.Localization(__file__, 1646, 16), getitem___196800, int_196785)
    
    # Assigning a type to the variable 'tuple_var_assignment_192617' (line 1646)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1646, 16), 'tuple_var_assignment_192617', subscript_call_result_196801)
    
    # Assigning a Subscript to a Name (line 1646):
    
    # Obtaining the type of the subscript
    int_196802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1646, 16), 'int')
    
    # Call to _do_step(...): (line 1646)
    # Processing the call arguments (line 1646)
    # Getting the type of 'x' (line 1647)
    x_196804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 20), 'x', False)
    # Getting the type of 'y' (line 1647)
    y_196805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 23), 'y', False)
    # Getting the type of 'z' (line 1647)
    z_196806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 26), 'z', False)
    # Getting the type of 'tau' (line 1647)
    tau_196807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 29), 'tau', False)
    # Getting the type of 'kappa' (line 1647)
    kappa_196808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 34), 'kappa', False)
    # Getting the type of 'd_x' (line 1647)
    d_x_196809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 41), 'd_x', False)
    # Getting the type of 'd_y' (line 1647)
    d_y_196810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 46), 'd_y', False)
    # Getting the type of 'd_z' (line 1648)
    d_z_196811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 20), 'd_z', False)
    # Getting the type of 'd_tau' (line 1648)
    d_tau_196812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 25), 'd_tau', False)
    # Getting the type of 'd_kappa' (line 1648)
    d_kappa_196813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 32), 'd_kappa', False)
    # Getting the type of 'alpha' (line 1648)
    alpha_196814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 41), 'alpha', False)
    # Processing the call keyword arguments (line 1646)
    kwargs_196815 = {}
    # Getting the type of '_do_step' (line 1646)
    _do_step_196803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 38), '_do_step', False)
    # Calling _do_step(args, kwargs) (line 1646)
    _do_step_call_result_196816 = invoke(stypy.reporting.localization.Localization(__file__, 1646, 38), _do_step_196803, *[x_196804, y_196805, z_196806, tau_196807, kappa_196808, d_x_196809, d_y_196810, d_z_196811, d_tau_196812, d_kappa_196813, alpha_196814], **kwargs_196815)
    
    # Obtaining the member '__getitem__' of a type (line 1646)
    getitem___196817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1646, 16), _do_step_call_result_196816, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1646)
    subscript_call_result_196818 = invoke(stypy.reporting.localization.Localization(__file__, 1646, 16), getitem___196817, int_196802)
    
    # Assigning a type to the variable 'tuple_var_assignment_192618' (line 1646)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1646, 16), 'tuple_var_assignment_192618', subscript_call_result_196818)
    
    # Assigning a Subscript to a Name (line 1646):
    
    # Obtaining the type of the subscript
    int_196819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1646, 16), 'int')
    
    # Call to _do_step(...): (line 1646)
    # Processing the call arguments (line 1646)
    # Getting the type of 'x' (line 1647)
    x_196821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 20), 'x', False)
    # Getting the type of 'y' (line 1647)
    y_196822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 23), 'y', False)
    # Getting the type of 'z' (line 1647)
    z_196823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 26), 'z', False)
    # Getting the type of 'tau' (line 1647)
    tau_196824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 29), 'tau', False)
    # Getting the type of 'kappa' (line 1647)
    kappa_196825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 34), 'kappa', False)
    # Getting the type of 'd_x' (line 1647)
    d_x_196826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 41), 'd_x', False)
    # Getting the type of 'd_y' (line 1647)
    d_y_196827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 46), 'd_y', False)
    # Getting the type of 'd_z' (line 1648)
    d_z_196828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 20), 'd_z', False)
    # Getting the type of 'd_tau' (line 1648)
    d_tau_196829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 25), 'd_tau', False)
    # Getting the type of 'd_kappa' (line 1648)
    d_kappa_196830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 32), 'd_kappa', False)
    # Getting the type of 'alpha' (line 1648)
    alpha_196831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1648, 41), 'alpha', False)
    # Processing the call keyword arguments (line 1646)
    kwargs_196832 = {}
    # Getting the type of '_do_step' (line 1646)
    _do_step_196820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 38), '_do_step', False)
    # Calling _do_step(args, kwargs) (line 1646)
    _do_step_call_result_196833 = invoke(stypy.reporting.localization.Localization(__file__, 1646, 38), _do_step_196820, *[x_196821, y_196822, z_196823, tau_196824, kappa_196825, d_x_196826, d_y_196827, d_z_196828, d_tau_196829, d_kappa_196830, alpha_196831], **kwargs_196832)
    
    # Obtaining the member '__getitem__' of a type (line 1646)
    getitem___196834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1646, 16), _do_step_call_result_196833, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1646)
    subscript_call_result_196835 = invoke(stypy.reporting.localization.Localization(__file__, 1646, 16), getitem___196834, int_196819)
    
    # Assigning a type to the variable 'tuple_var_assignment_192619' (line 1646)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1646, 16), 'tuple_var_assignment_192619', subscript_call_result_196835)
    
    # Assigning a Name to a Name (line 1646):
    # Getting the type of 'tuple_var_assignment_192615' (line 1646)
    tuple_var_assignment_192615_196836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 16), 'tuple_var_assignment_192615')
    # Assigning a type to the variable 'x' (line 1646)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1646, 16), 'x', tuple_var_assignment_192615_196836)
    
    # Assigning a Name to a Name (line 1646):
    # Getting the type of 'tuple_var_assignment_192616' (line 1646)
    tuple_var_assignment_192616_196837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 16), 'tuple_var_assignment_192616')
    # Assigning a type to the variable 'y' (line 1646)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1646, 19), 'y', tuple_var_assignment_192616_196837)
    
    # Assigning a Name to a Name (line 1646):
    # Getting the type of 'tuple_var_assignment_192617' (line 1646)
    tuple_var_assignment_192617_196838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 16), 'tuple_var_assignment_192617')
    # Assigning a type to the variable 'z' (line 1646)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1646, 22), 'z', tuple_var_assignment_192617_196838)
    
    # Assigning a Name to a Name (line 1646):
    # Getting the type of 'tuple_var_assignment_192618' (line 1646)
    tuple_var_assignment_192618_196839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 16), 'tuple_var_assignment_192618')
    # Assigning a type to the variable 'tau' (line 1646)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1646, 25), 'tau', tuple_var_assignment_192618_196839)
    
    # Assigning a Name to a Name (line 1646):
    # Getting the type of 'tuple_var_assignment_192619' (line 1646)
    tuple_var_assignment_192619_196840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 16), 'tuple_var_assignment_192619')
    # Assigning a type to the variable 'kappa' (line 1646)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1646, 30), 'kappa', tuple_var_assignment_192619_196840)
    
    # Assigning a Num to a Subscript (line 1649):
    
    # Assigning a Num to a Subscript (line 1649):
    int_196841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1649, 27), 'int')
    # Getting the type of 'x' (line 1649)
    x_196842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 16), 'x')
    
    # Getting the type of 'x' (line 1649)
    x_196843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 18), 'x')
    int_196844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1649, 22), 'int')
    # Applying the binary operator '<' (line 1649)
    result_lt_196845 = python_operator(stypy.reporting.localization.Localization(__file__, 1649, 18), '<', x_196843, int_196844)
    
    # Storing an element on a container (line 1649)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1649, 16), x_196842, (result_lt_196845, int_196841))
    
    # Assigning a Num to a Subscript (line 1650):
    
    # Assigning a Num to a Subscript (line 1650):
    int_196846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1650, 27), 'int')
    # Getting the type of 'z' (line 1650)
    z_196847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 16), 'z')
    
    # Getting the type of 'z' (line 1650)
    z_196848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 18), 'z')
    int_196849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1650, 22), 'int')
    # Applying the binary operator '<' (line 1650)
    result_lt_196850 = python_operator(stypy.reporting.localization.Localization(__file__, 1650, 18), '<', z_196848, int_196849)
    
    # Storing an element on a container (line 1650)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1650, 16), z_196847, (result_lt_196850, int_196846))
    
    # Assigning a Call to a Name (line 1651):
    
    # Assigning a Call to a Name (line 1651):
    
    # Call to max(...): (line 1651)
    # Processing the call arguments (line 1651)
    int_196852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1651, 26), 'int')
    # Getting the type of 'tau' (line 1651)
    tau_196853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 29), 'tau', False)
    # Processing the call keyword arguments (line 1651)
    kwargs_196854 = {}
    # Getting the type of 'max' (line 1651)
    max_196851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 22), 'max', False)
    # Calling max(args, kwargs) (line 1651)
    max_call_result_196855 = invoke(stypy.reporting.localization.Localization(__file__, 1651, 22), max_196851, *[int_196852, tau_196853], **kwargs_196854)
    
    # Assigning a type to the variable 'tau' (line 1651)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1651, 16), 'tau', max_call_result_196855)
    
    # Assigning a Call to a Name (line 1652):
    
    # Assigning a Call to a Name (line 1652):
    
    # Call to max(...): (line 1652)
    # Processing the call arguments (line 1652)
    int_196857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1652, 28), 'int')
    # Getting the type of 'kappa' (line 1652)
    kappa_196858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 31), 'kappa', False)
    # Processing the call keyword arguments (line 1652)
    kwargs_196859 = {}
    # Getting the type of 'max' (line 1652)
    max_196856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 24), 'max', False)
    # Calling max(args, kwargs) (line 1652)
    max_call_result_196860 = invoke(stypy.reporting.localization.Localization(__file__, 1652, 24), max_196856, *[int_196857, kappa_196858], **kwargs_196859)
    
    # Assigning a type to the variable 'kappa' (line 1652)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1652, 16), 'kappa', max_call_result_196860)
    
    # Assigning a Name to a Name (line 1653):
    
    # Assigning a Name to a Name (line 1653):
    # Getting the type of 'False' (line 1653)
    False_196861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 21), 'False')
    # Assigning a type to the variable 'ip' (line 1653)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1653, 16), 'ip', False_196861)
    # SSA branch for the else part of an if statement (line 1641)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1656):
    
    # Assigning a Call to a Name (line 1656):
    
    # Call to _get_step(...): (line 1656)
    # Processing the call arguments (line 1656)
    # Getting the type of 'x' (line 1656)
    x_196863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 34), 'x', False)
    # Getting the type of 'd_x' (line 1656)
    d_x_196864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 37), 'd_x', False)
    # Getting the type of 'z' (line 1656)
    z_196865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 42), 'z', False)
    # Getting the type of 'd_z' (line 1656)
    d_z_196866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 45), 'd_z', False)
    # Getting the type of 'tau' (line 1656)
    tau_196867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 50), 'tau', False)
    # Getting the type of 'd_tau' (line 1657)
    d_tau_196868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 34), 'd_tau', False)
    # Getting the type of 'kappa' (line 1657)
    kappa_196869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 41), 'kappa', False)
    # Getting the type of 'd_kappa' (line 1657)
    d_kappa_196870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 48), 'd_kappa', False)
    # Getting the type of 'alpha0' (line 1657)
    alpha0_196871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 57), 'alpha0', False)
    # Processing the call keyword arguments (line 1656)
    kwargs_196872 = {}
    # Getting the type of '_get_step' (line 1656)
    _get_step_196862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 24), '_get_step', False)
    # Calling _get_step(args, kwargs) (line 1656)
    _get_step_call_result_196873 = invoke(stypy.reporting.localization.Localization(__file__, 1656, 24), _get_step_196862, *[x_196863, d_x_196864, z_196865, d_z_196866, tau_196867, d_tau_196868, kappa_196869, d_kappa_196870, alpha0_196871], **kwargs_196872)
    
    # Assigning a type to the variable 'alpha' (line 1656)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1656, 16), 'alpha', _get_step_call_result_196873)
    
    # Assigning a Call to a Tuple (line 1659):
    
    # Assigning a Subscript to a Name (line 1659):
    
    # Obtaining the type of the subscript
    int_196874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1659, 16), 'int')
    
    # Call to _do_step(...): (line 1659)
    # Processing the call arguments (line 1659)
    # Getting the type of 'x' (line 1660)
    x_196876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 20), 'x', False)
    # Getting the type of 'y' (line 1660)
    y_196877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 23), 'y', False)
    # Getting the type of 'z' (line 1660)
    z_196878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 26), 'z', False)
    # Getting the type of 'tau' (line 1660)
    tau_196879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 29), 'tau', False)
    # Getting the type of 'kappa' (line 1660)
    kappa_196880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 34), 'kappa', False)
    # Getting the type of 'd_x' (line 1660)
    d_x_196881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 41), 'd_x', False)
    # Getting the type of 'd_y' (line 1660)
    d_y_196882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 46), 'd_y', False)
    # Getting the type of 'd_z' (line 1660)
    d_z_196883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 51), 'd_z', False)
    # Getting the type of 'd_tau' (line 1660)
    d_tau_196884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 56), 'd_tau', False)
    # Getting the type of 'd_kappa' (line 1660)
    d_kappa_196885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 63), 'd_kappa', False)
    # Getting the type of 'alpha' (line 1660)
    alpha_196886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 72), 'alpha', False)
    # Processing the call keyword arguments (line 1659)
    kwargs_196887 = {}
    # Getting the type of '_do_step' (line 1659)
    _do_step_196875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 38), '_do_step', False)
    # Calling _do_step(args, kwargs) (line 1659)
    _do_step_call_result_196888 = invoke(stypy.reporting.localization.Localization(__file__, 1659, 38), _do_step_196875, *[x_196876, y_196877, z_196878, tau_196879, kappa_196880, d_x_196881, d_y_196882, d_z_196883, d_tau_196884, d_kappa_196885, alpha_196886], **kwargs_196887)
    
    # Obtaining the member '__getitem__' of a type (line 1659)
    getitem___196889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1659, 16), _do_step_call_result_196888, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1659)
    subscript_call_result_196890 = invoke(stypy.reporting.localization.Localization(__file__, 1659, 16), getitem___196889, int_196874)
    
    # Assigning a type to the variable 'tuple_var_assignment_192620' (line 1659)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1659, 16), 'tuple_var_assignment_192620', subscript_call_result_196890)
    
    # Assigning a Subscript to a Name (line 1659):
    
    # Obtaining the type of the subscript
    int_196891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1659, 16), 'int')
    
    # Call to _do_step(...): (line 1659)
    # Processing the call arguments (line 1659)
    # Getting the type of 'x' (line 1660)
    x_196893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 20), 'x', False)
    # Getting the type of 'y' (line 1660)
    y_196894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 23), 'y', False)
    # Getting the type of 'z' (line 1660)
    z_196895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 26), 'z', False)
    # Getting the type of 'tau' (line 1660)
    tau_196896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 29), 'tau', False)
    # Getting the type of 'kappa' (line 1660)
    kappa_196897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 34), 'kappa', False)
    # Getting the type of 'd_x' (line 1660)
    d_x_196898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 41), 'd_x', False)
    # Getting the type of 'd_y' (line 1660)
    d_y_196899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 46), 'd_y', False)
    # Getting the type of 'd_z' (line 1660)
    d_z_196900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 51), 'd_z', False)
    # Getting the type of 'd_tau' (line 1660)
    d_tau_196901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 56), 'd_tau', False)
    # Getting the type of 'd_kappa' (line 1660)
    d_kappa_196902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 63), 'd_kappa', False)
    # Getting the type of 'alpha' (line 1660)
    alpha_196903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 72), 'alpha', False)
    # Processing the call keyword arguments (line 1659)
    kwargs_196904 = {}
    # Getting the type of '_do_step' (line 1659)
    _do_step_196892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 38), '_do_step', False)
    # Calling _do_step(args, kwargs) (line 1659)
    _do_step_call_result_196905 = invoke(stypy.reporting.localization.Localization(__file__, 1659, 38), _do_step_196892, *[x_196893, y_196894, z_196895, tau_196896, kappa_196897, d_x_196898, d_y_196899, d_z_196900, d_tau_196901, d_kappa_196902, alpha_196903], **kwargs_196904)
    
    # Obtaining the member '__getitem__' of a type (line 1659)
    getitem___196906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1659, 16), _do_step_call_result_196905, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1659)
    subscript_call_result_196907 = invoke(stypy.reporting.localization.Localization(__file__, 1659, 16), getitem___196906, int_196891)
    
    # Assigning a type to the variable 'tuple_var_assignment_192621' (line 1659)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1659, 16), 'tuple_var_assignment_192621', subscript_call_result_196907)
    
    # Assigning a Subscript to a Name (line 1659):
    
    # Obtaining the type of the subscript
    int_196908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1659, 16), 'int')
    
    # Call to _do_step(...): (line 1659)
    # Processing the call arguments (line 1659)
    # Getting the type of 'x' (line 1660)
    x_196910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 20), 'x', False)
    # Getting the type of 'y' (line 1660)
    y_196911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 23), 'y', False)
    # Getting the type of 'z' (line 1660)
    z_196912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 26), 'z', False)
    # Getting the type of 'tau' (line 1660)
    tau_196913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 29), 'tau', False)
    # Getting the type of 'kappa' (line 1660)
    kappa_196914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 34), 'kappa', False)
    # Getting the type of 'd_x' (line 1660)
    d_x_196915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 41), 'd_x', False)
    # Getting the type of 'd_y' (line 1660)
    d_y_196916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 46), 'd_y', False)
    # Getting the type of 'd_z' (line 1660)
    d_z_196917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 51), 'd_z', False)
    # Getting the type of 'd_tau' (line 1660)
    d_tau_196918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 56), 'd_tau', False)
    # Getting the type of 'd_kappa' (line 1660)
    d_kappa_196919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 63), 'd_kappa', False)
    # Getting the type of 'alpha' (line 1660)
    alpha_196920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 72), 'alpha', False)
    # Processing the call keyword arguments (line 1659)
    kwargs_196921 = {}
    # Getting the type of '_do_step' (line 1659)
    _do_step_196909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 38), '_do_step', False)
    # Calling _do_step(args, kwargs) (line 1659)
    _do_step_call_result_196922 = invoke(stypy.reporting.localization.Localization(__file__, 1659, 38), _do_step_196909, *[x_196910, y_196911, z_196912, tau_196913, kappa_196914, d_x_196915, d_y_196916, d_z_196917, d_tau_196918, d_kappa_196919, alpha_196920], **kwargs_196921)
    
    # Obtaining the member '__getitem__' of a type (line 1659)
    getitem___196923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1659, 16), _do_step_call_result_196922, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1659)
    subscript_call_result_196924 = invoke(stypy.reporting.localization.Localization(__file__, 1659, 16), getitem___196923, int_196908)
    
    # Assigning a type to the variable 'tuple_var_assignment_192622' (line 1659)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1659, 16), 'tuple_var_assignment_192622', subscript_call_result_196924)
    
    # Assigning a Subscript to a Name (line 1659):
    
    # Obtaining the type of the subscript
    int_196925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1659, 16), 'int')
    
    # Call to _do_step(...): (line 1659)
    # Processing the call arguments (line 1659)
    # Getting the type of 'x' (line 1660)
    x_196927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 20), 'x', False)
    # Getting the type of 'y' (line 1660)
    y_196928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 23), 'y', False)
    # Getting the type of 'z' (line 1660)
    z_196929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 26), 'z', False)
    # Getting the type of 'tau' (line 1660)
    tau_196930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 29), 'tau', False)
    # Getting the type of 'kappa' (line 1660)
    kappa_196931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 34), 'kappa', False)
    # Getting the type of 'd_x' (line 1660)
    d_x_196932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 41), 'd_x', False)
    # Getting the type of 'd_y' (line 1660)
    d_y_196933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 46), 'd_y', False)
    # Getting the type of 'd_z' (line 1660)
    d_z_196934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 51), 'd_z', False)
    # Getting the type of 'd_tau' (line 1660)
    d_tau_196935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 56), 'd_tau', False)
    # Getting the type of 'd_kappa' (line 1660)
    d_kappa_196936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 63), 'd_kappa', False)
    # Getting the type of 'alpha' (line 1660)
    alpha_196937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 72), 'alpha', False)
    # Processing the call keyword arguments (line 1659)
    kwargs_196938 = {}
    # Getting the type of '_do_step' (line 1659)
    _do_step_196926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 38), '_do_step', False)
    # Calling _do_step(args, kwargs) (line 1659)
    _do_step_call_result_196939 = invoke(stypy.reporting.localization.Localization(__file__, 1659, 38), _do_step_196926, *[x_196927, y_196928, z_196929, tau_196930, kappa_196931, d_x_196932, d_y_196933, d_z_196934, d_tau_196935, d_kappa_196936, alpha_196937], **kwargs_196938)
    
    # Obtaining the member '__getitem__' of a type (line 1659)
    getitem___196940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1659, 16), _do_step_call_result_196939, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1659)
    subscript_call_result_196941 = invoke(stypy.reporting.localization.Localization(__file__, 1659, 16), getitem___196940, int_196925)
    
    # Assigning a type to the variable 'tuple_var_assignment_192623' (line 1659)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1659, 16), 'tuple_var_assignment_192623', subscript_call_result_196941)
    
    # Assigning a Subscript to a Name (line 1659):
    
    # Obtaining the type of the subscript
    int_196942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1659, 16), 'int')
    
    # Call to _do_step(...): (line 1659)
    # Processing the call arguments (line 1659)
    # Getting the type of 'x' (line 1660)
    x_196944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 20), 'x', False)
    # Getting the type of 'y' (line 1660)
    y_196945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 23), 'y', False)
    # Getting the type of 'z' (line 1660)
    z_196946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 26), 'z', False)
    # Getting the type of 'tau' (line 1660)
    tau_196947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 29), 'tau', False)
    # Getting the type of 'kappa' (line 1660)
    kappa_196948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 34), 'kappa', False)
    # Getting the type of 'd_x' (line 1660)
    d_x_196949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 41), 'd_x', False)
    # Getting the type of 'd_y' (line 1660)
    d_y_196950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 46), 'd_y', False)
    # Getting the type of 'd_z' (line 1660)
    d_z_196951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 51), 'd_z', False)
    # Getting the type of 'd_tau' (line 1660)
    d_tau_196952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 56), 'd_tau', False)
    # Getting the type of 'd_kappa' (line 1660)
    d_kappa_196953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 63), 'd_kappa', False)
    # Getting the type of 'alpha' (line 1660)
    alpha_196954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 72), 'alpha', False)
    # Processing the call keyword arguments (line 1659)
    kwargs_196955 = {}
    # Getting the type of '_do_step' (line 1659)
    _do_step_196943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 38), '_do_step', False)
    # Calling _do_step(args, kwargs) (line 1659)
    _do_step_call_result_196956 = invoke(stypy.reporting.localization.Localization(__file__, 1659, 38), _do_step_196943, *[x_196944, y_196945, z_196946, tau_196947, kappa_196948, d_x_196949, d_y_196950, d_z_196951, d_tau_196952, d_kappa_196953, alpha_196954], **kwargs_196955)
    
    # Obtaining the member '__getitem__' of a type (line 1659)
    getitem___196957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1659, 16), _do_step_call_result_196956, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1659)
    subscript_call_result_196958 = invoke(stypy.reporting.localization.Localization(__file__, 1659, 16), getitem___196957, int_196942)
    
    # Assigning a type to the variable 'tuple_var_assignment_192624' (line 1659)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1659, 16), 'tuple_var_assignment_192624', subscript_call_result_196958)
    
    # Assigning a Name to a Name (line 1659):
    # Getting the type of 'tuple_var_assignment_192620' (line 1659)
    tuple_var_assignment_192620_196959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 16), 'tuple_var_assignment_192620')
    # Assigning a type to the variable 'x' (line 1659)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1659, 16), 'x', tuple_var_assignment_192620_196959)
    
    # Assigning a Name to a Name (line 1659):
    # Getting the type of 'tuple_var_assignment_192621' (line 1659)
    tuple_var_assignment_192621_196960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 16), 'tuple_var_assignment_192621')
    # Assigning a type to the variable 'y' (line 1659)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1659, 19), 'y', tuple_var_assignment_192621_196960)
    
    # Assigning a Name to a Name (line 1659):
    # Getting the type of 'tuple_var_assignment_192622' (line 1659)
    tuple_var_assignment_192622_196961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 16), 'tuple_var_assignment_192622')
    # Assigning a type to the variable 'z' (line 1659)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1659, 22), 'z', tuple_var_assignment_192622_196961)
    
    # Assigning a Name to a Name (line 1659):
    # Getting the type of 'tuple_var_assignment_192623' (line 1659)
    tuple_var_assignment_192623_196962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 16), 'tuple_var_assignment_192623')
    # Assigning a type to the variable 'tau' (line 1659)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1659, 25), 'tau', tuple_var_assignment_192623_196962)
    
    # Assigning a Name to a Name (line 1659):
    # Getting the type of 'tuple_var_assignment_192624' (line 1659)
    tuple_var_assignment_192624_196963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 16), 'tuple_var_assignment_192624')
    # Assigning a type to the variable 'kappa' (line 1659)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1659, 30), 'kappa', tuple_var_assignment_192624_196963)
    # SSA join for if statement (line 1641)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 1635)
    # SSA branch for the except 'Tuple' branch of a try statement (line 1635)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Num to a Name (line 1665):
    
    # Assigning a Num to a Name (line 1665):
    int_196964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1665, 21), 'int')
    # Assigning a type to the variable 'status' (line 1665)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1665, 12), 'status', int_196964)
    
    # Assigning a Call to a Name (line 1666):
    
    # Assigning a Call to a Name (line 1666):
    
    # Call to _get_message(...): (line 1666)
    # Processing the call arguments (line 1666)
    # Getting the type of 'status' (line 1666)
    status_196966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 35), 'status', False)
    # Processing the call keyword arguments (line 1666)
    kwargs_196967 = {}
    # Getting the type of '_get_message' (line 1666)
    _get_message_196965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 22), '_get_message', False)
    # Calling _get_message(args, kwargs) (line 1666)
    _get_message_call_result_196968 = invoke(stypy.reporting.localization.Localization(__file__, 1666, 22), _get_message_196965, *[status_196966], **kwargs_196967)
    
    # Assigning a type to the variable 'message' (line 1666)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1666, 12), 'message', _get_message_call_result_196968)
    # SSA join for try-except statement (line 1635)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 1670):
    
    # Assigning a Subscript to a Name (line 1670):
    
    # Obtaining the type of the subscript
    int_196969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1670, 8), 'int')
    
    # Call to _indicators(...): (line 1670)
    # Processing the call arguments (line 1670)
    # Getting the type of 'A' (line 1671)
    A_196971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 12), 'A', False)
    # Getting the type of 'b' (line 1671)
    b_196972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 15), 'b', False)
    # Getting the type of 'c' (line 1671)
    c_196973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 18), 'c', False)
    # Getting the type of 'c0' (line 1671)
    c0_196974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 21), 'c0', False)
    # Getting the type of 'x' (line 1671)
    x_196975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 25), 'x', False)
    # Getting the type of 'y' (line 1671)
    y_196976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 28), 'y', False)
    # Getting the type of 'z' (line 1671)
    z_196977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 31), 'z', False)
    # Getting the type of 'tau' (line 1671)
    tau_196978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 34), 'tau', False)
    # Getting the type of 'kappa' (line 1671)
    kappa_196979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 39), 'kappa', False)
    # Processing the call keyword arguments (line 1670)
    kwargs_196980 = {}
    # Getting the type of '_indicators' (line 1670)
    _indicators_196970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 50), '_indicators', False)
    # Calling _indicators(args, kwargs) (line 1670)
    _indicators_call_result_196981 = invoke(stypy.reporting.localization.Localization(__file__, 1670, 50), _indicators_196970, *[A_196971, b_196972, c_196973, c0_196974, x_196975, y_196976, z_196977, tau_196978, kappa_196979], **kwargs_196980)
    
    # Obtaining the member '__getitem__' of a type (line 1670)
    getitem___196982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1670, 8), _indicators_call_result_196981, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1670)
    subscript_call_result_196983 = invoke(stypy.reporting.localization.Localization(__file__, 1670, 8), getitem___196982, int_196969)
    
    # Assigning a type to the variable 'tuple_var_assignment_192625' (line 1670)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 8), 'tuple_var_assignment_192625', subscript_call_result_196983)
    
    # Assigning a Subscript to a Name (line 1670):
    
    # Obtaining the type of the subscript
    int_196984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1670, 8), 'int')
    
    # Call to _indicators(...): (line 1670)
    # Processing the call arguments (line 1670)
    # Getting the type of 'A' (line 1671)
    A_196986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 12), 'A', False)
    # Getting the type of 'b' (line 1671)
    b_196987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 15), 'b', False)
    # Getting the type of 'c' (line 1671)
    c_196988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 18), 'c', False)
    # Getting the type of 'c0' (line 1671)
    c0_196989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 21), 'c0', False)
    # Getting the type of 'x' (line 1671)
    x_196990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 25), 'x', False)
    # Getting the type of 'y' (line 1671)
    y_196991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 28), 'y', False)
    # Getting the type of 'z' (line 1671)
    z_196992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 31), 'z', False)
    # Getting the type of 'tau' (line 1671)
    tau_196993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 34), 'tau', False)
    # Getting the type of 'kappa' (line 1671)
    kappa_196994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 39), 'kappa', False)
    # Processing the call keyword arguments (line 1670)
    kwargs_196995 = {}
    # Getting the type of '_indicators' (line 1670)
    _indicators_196985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 50), '_indicators', False)
    # Calling _indicators(args, kwargs) (line 1670)
    _indicators_call_result_196996 = invoke(stypy.reporting.localization.Localization(__file__, 1670, 50), _indicators_196985, *[A_196986, b_196987, c_196988, c0_196989, x_196990, y_196991, z_196992, tau_196993, kappa_196994], **kwargs_196995)
    
    # Obtaining the member '__getitem__' of a type (line 1670)
    getitem___196997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1670, 8), _indicators_call_result_196996, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1670)
    subscript_call_result_196998 = invoke(stypy.reporting.localization.Localization(__file__, 1670, 8), getitem___196997, int_196984)
    
    # Assigning a type to the variable 'tuple_var_assignment_192626' (line 1670)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 8), 'tuple_var_assignment_192626', subscript_call_result_196998)
    
    # Assigning a Subscript to a Name (line 1670):
    
    # Obtaining the type of the subscript
    int_196999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1670, 8), 'int')
    
    # Call to _indicators(...): (line 1670)
    # Processing the call arguments (line 1670)
    # Getting the type of 'A' (line 1671)
    A_197001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 12), 'A', False)
    # Getting the type of 'b' (line 1671)
    b_197002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 15), 'b', False)
    # Getting the type of 'c' (line 1671)
    c_197003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 18), 'c', False)
    # Getting the type of 'c0' (line 1671)
    c0_197004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 21), 'c0', False)
    # Getting the type of 'x' (line 1671)
    x_197005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 25), 'x', False)
    # Getting the type of 'y' (line 1671)
    y_197006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 28), 'y', False)
    # Getting the type of 'z' (line 1671)
    z_197007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 31), 'z', False)
    # Getting the type of 'tau' (line 1671)
    tau_197008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 34), 'tau', False)
    # Getting the type of 'kappa' (line 1671)
    kappa_197009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 39), 'kappa', False)
    # Processing the call keyword arguments (line 1670)
    kwargs_197010 = {}
    # Getting the type of '_indicators' (line 1670)
    _indicators_197000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 50), '_indicators', False)
    # Calling _indicators(args, kwargs) (line 1670)
    _indicators_call_result_197011 = invoke(stypy.reporting.localization.Localization(__file__, 1670, 50), _indicators_197000, *[A_197001, b_197002, c_197003, c0_197004, x_197005, y_197006, z_197007, tau_197008, kappa_197009], **kwargs_197010)
    
    # Obtaining the member '__getitem__' of a type (line 1670)
    getitem___197012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1670, 8), _indicators_call_result_197011, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1670)
    subscript_call_result_197013 = invoke(stypy.reporting.localization.Localization(__file__, 1670, 8), getitem___197012, int_196999)
    
    # Assigning a type to the variable 'tuple_var_assignment_192627' (line 1670)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 8), 'tuple_var_assignment_192627', subscript_call_result_197013)
    
    # Assigning a Subscript to a Name (line 1670):
    
    # Obtaining the type of the subscript
    int_197014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1670, 8), 'int')
    
    # Call to _indicators(...): (line 1670)
    # Processing the call arguments (line 1670)
    # Getting the type of 'A' (line 1671)
    A_197016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 12), 'A', False)
    # Getting the type of 'b' (line 1671)
    b_197017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 15), 'b', False)
    # Getting the type of 'c' (line 1671)
    c_197018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 18), 'c', False)
    # Getting the type of 'c0' (line 1671)
    c0_197019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 21), 'c0', False)
    # Getting the type of 'x' (line 1671)
    x_197020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 25), 'x', False)
    # Getting the type of 'y' (line 1671)
    y_197021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 28), 'y', False)
    # Getting the type of 'z' (line 1671)
    z_197022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 31), 'z', False)
    # Getting the type of 'tau' (line 1671)
    tau_197023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 34), 'tau', False)
    # Getting the type of 'kappa' (line 1671)
    kappa_197024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 39), 'kappa', False)
    # Processing the call keyword arguments (line 1670)
    kwargs_197025 = {}
    # Getting the type of '_indicators' (line 1670)
    _indicators_197015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 50), '_indicators', False)
    # Calling _indicators(args, kwargs) (line 1670)
    _indicators_call_result_197026 = invoke(stypy.reporting.localization.Localization(__file__, 1670, 50), _indicators_197015, *[A_197016, b_197017, c_197018, c0_197019, x_197020, y_197021, z_197022, tau_197023, kappa_197024], **kwargs_197025)
    
    # Obtaining the member '__getitem__' of a type (line 1670)
    getitem___197027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1670, 8), _indicators_call_result_197026, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1670)
    subscript_call_result_197028 = invoke(stypy.reporting.localization.Localization(__file__, 1670, 8), getitem___197027, int_197014)
    
    # Assigning a type to the variable 'tuple_var_assignment_192628' (line 1670)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 8), 'tuple_var_assignment_192628', subscript_call_result_197028)
    
    # Assigning a Subscript to a Name (line 1670):
    
    # Obtaining the type of the subscript
    int_197029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1670, 8), 'int')
    
    # Call to _indicators(...): (line 1670)
    # Processing the call arguments (line 1670)
    # Getting the type of 'A' (line 1671)
    A_197031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 12), 'A', False)
    # Getting the type of 'b' (line 1671)
    b_197032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 15), 'b', False)
    # Getting the type of 'c' (line 1671)
    c_197033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 18), 'c', False)
    # Getting the type of 'c0' (line 1671)
    c0_197034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 21), 'c0', False)
    # Getting the type of 'x' (line 1671)
    x_197035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 25), 'x', False)
    # Getting the type of 'y' (line 1671)
    y_197036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 28), 'y', False)
    # Getting the type of 'z' (line 1671)
    z_197037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 31), 'z', False)
    # Getting the type of 'tau' (line 1671)
    tau_197038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 34), 'tau', False)
    # Getting the type of 'kappa' (line 1671)
    kappa_197039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 39), 'kappa', False)
    # Processing the call keyword arguments (line 1670)
    kwargs_197040 = {}
    # Getting the type of '_indicators' (line 1670)
    _indicators_197030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 50), '_indicators', False)
    # Calling _indicators(args, kwargs) (line 1670)
    _indicators_call_result_197041 = invoke(stypy.reporting.localization.Localization(__file__, 1670, 50), _indicators_197030, *[A_197031, b_197032, c_197033, c0_197034, x_197035, y_197036, z_197037, tau_197038, kappa_197039], **kwargs_197040)
    
    # Obtaining the member '__getitem__' of a type (line 1670)
    getitem___197042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1670, 8), _indicators_call_result_197041, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1670)
    subscript_call_result_197043 = invoke(stypy.reporting.localization.Localization(__file__, 1670, 8), getitem___197042, int_197029)
    
    # Assigning a type to the variable 'tuple_var_assignment_192629' (line 1670)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 8), 'tuple_var_assignment_192629', subscript_call_result_197043)
    
    # Assigning a Subscript to a Name (line 1670):
    
    # Obtaining the type of the subscript
    int_197044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1670, 8), 'int')
    
    # Call to _indicators(...): (line 1670)
    # Processing the call arguments (line 1670)
    # Getting the type of 'A' (line 1671)
    A_197046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 12), 'A', False)
    # Getting the type of 'b' (line 1671)
    b_197047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 15), 'b', False)
    # Getting the type of 'c' (line 1671)
    c_197048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 18), 'c', False)
    # Getting the type of 'c0' (line 1671)
    c0_197049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 21), 'c0', False)
    # Getting the type of 'x' (line 1671)
    x_197050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 25), 'x', False)
    # Getting the type of 'y' (line 1671)
    y_197051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 28), 'y', False)
    # Getting the type of 'z' (line 1671)
    z_197052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 31), 'z', False)
    # Getting the type of 'tau' (line 1671)
    tau_197053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 34), 'tau', False)
    # Getting the type of 'kappa' (line 1671)
    kappa_197054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 39), 'kappa', False)
    # Processing the call keyword arguments (line 1670)
    kwargs_197055 = {}
    # Getting the type of '_indicators' (line 1670)
    _indicators_197045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 50), '_indicators', False)
    # Calling _indicators(args, kwargs) (line 1670)
    _indicators_call_result_197056 = invoke(stypy.reporting.localization.Localization(__file__, 1670, 50), _indicators_197045, *[A_197046, b_197047, c_197048, c0_197049, x_197050, y_197051, z_197052, tau_197053, kappa_197054], **kwargs_197055)
    
    # Obtaining the member '__getitem__' of a type (line 1670)
    getitem___197057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1670, 8), _indicators_call_result_197056, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1670)
    subscript_call_result_197058 = invoke(stypy.reporting.localization.Localization(__file__, 1670, 8), getitem___197057, int_197044)
    
    # Assigning a type to the variable 'tuple_var_assignment_192630' (line 1670)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 8), 'tuple_var_assignment_192630', subscript_call_result_197058)
    
    # Assigning a Name to a Name (line 1670):
    # Getting the type of 'tuple_var_assignment_192625' (line 1670)
    tuple_var_assignment_192625_197059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 8), 'tuple_var_assignment_192625')
    # Assigning a type to the variable 'rho_p' (line 1670)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 8), 'rho_p', tuple_var_assignment_192625_197059)
    
    # Assigning a Name to a Name (line 1670):
    # Getting the type of 'tuple_var_assignment_192626' (line 1670)
    tuple_var_assignment_192626_197060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 8), 'tuple_var_assignment_192626')
    # Assigning a type to the variable 'rho_d' (line 1670)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 15), 'rho_d', tuple_var_assignment_192626_197060)
    
    # Assigning a Name to a Name (line 1670):
    # Getting the type of 'tuple_var_assignment_192627' (line 1670)
    tuple_var_assignment_192627_197061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 8), 'tuple_var_assignment_192627')
    # Assigning a type to the variable 'rho_A' (line 1670)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 22), 'rho_A', tuple_var_assignment_192627_197061)
    
    # Assigning a Name to a Name (line 1670):
    # Getting the type of 'tuple_var_assignment_192628' (line 1670)
    tuple_var_assignment_192628_197062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 8), 'tuple_var_assignment_192628')
    # Assigning a type to the variable 'rho_g' (line 1670)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 29), 'rho_g', tuple_var_assignment_192628_197062)
    
    # Assigning a Name to a Name (line 1670):
    # Getting the type of 'tuple_var_assignment_192629' (line 1670)
    tuple_var_assignment_192629_197063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 8), 'tuple_var_assignment_192629')
    # Assigning a type to the variable 'rho_mu' (line 1670)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 36), 'rho_mu', tuple_var_assignment_192629_197063)
    
    # Assigning a Name to a Name (line 1670):
    # Getting the type of 'tuple_var_assignment_192630' (line 1670)
    tuple_var_assignment_192630_197064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 8), 'tuple_var_assignment_192630')
    # Assigning a type to the variable 'obj' (line 1670)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 44), 'obj', tuple_var_assignment_192630_197064)
    
    # Assigning a BoolOp to a Name (line 1672):
    
    # Assigning a BoolOp to a Name (line 1672):
    
    # Evaluating a boolean operation
    
    # Getting the type of 'rho_p' (line 1672)
    rho_p_197065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 13), 'rho_p')
    # Getting the type of 'tol' (line 1672)
    tol_197066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 21), 'tol')
    # Applying the binary operator '>' (line 1672)
    result_gt_197067 = python_operator(stypy.reporting.localization.Localization(__file__, 1672, 13), '>', rho_p_197065, tol_197066)
    
    
    # Getting the type of 'rho_d' (line 1672)
    rho_d_197068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 28), 'rho_d')
    # Getting the type of 'tol' (line 1672)
    tol_197069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 36), 'tol')
    # Applying the binary operator '>' (line 1672)
    result_gt_197070 = python_operator(stypy.reporting.localization.Localization(__file__, 1672, 28), '>', rho_d_197068, tol_197069)
    
    # Applying the binary operator 'or' (line 1672)
    result_or_keyword_197071 = python_operator(stypy.reporting.localization.Localization(__file__, 1672, 13), 'or', result_gt_197067, result_gt_197070)
    
    # Getting the type of 'rho_A' (line 1672)
    rho_A_197072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 43), 'rho_A')
    # Getting the type of 'tol' (line 1672)
    tol_197073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 51), 'tol')
    # Applying the binary operator '>' (line 1672)
    result_gt_197074 = python_operator(stypy.reporting.localization.Localization(__file__, 1672, 43), '>', rho_A_197072, tol_197073)
    
    # Applying the binary operator 'or' (line 1672)
    result_or_keyword_197075 = python_operator(stypy.reporting.localization.Localization(__file__, 1672, 13), 'or', result_or_keyword_197071, result_gt_197074)
    
    # Assigning a type to the variable 'go' (line 1672)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1672, 8), 'go', result_or_keyword_197075)
    
    # Getting the type of 'disp' (line 1674)
    disp_197076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 11), 'disp')
    # Testing the type of an if condition (line 1674)
    if_condition_197077 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1674, 8), disp_197076)
    # Assigning a type to the variable 'if_condition_197077' (line 1674)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1674, 8), 'if_condition_197077', if_condition_197077)
    # SSA begins for if statement (line 1674)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _display_iter(...): (line 1675)
    # Processing the call arguments (line 1675)
    # Getting the type of 'rho_p' (line 1675)
    rho_p_197079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 26), 'rho_p', False)
    # Getting the type of 'rho_d' (line 1675)
    rho_d_197080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 33), 'rho_d', False)
    # Getting the type of 'rho_g' (line 1675)
    rho_g_197081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 40), 'rho_g', False)
    # Getting the type of 'alpha' (line 1675)
    alpha_197082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 47), 'alpha', False)
    
    # Call to float(...): (line 1675)
    # Processing the call arguments (line 1675)
    # Getting the type of 'rho_mu' (line 1675)
    rho_mu_197084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 60), 'rho_mu', False)
    # Processing the call keyword arguments (line 1675)
    kwargs_197085 = {}
    # Getting the type of 'float' (line 1675)
    float_197083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 54), 'float', False)
    # Calling float(args, kwargs) (line 1675)
    float_call_result_197086 = invoke(stypy.reporting.localization.Localization(__file__, 1675, 54), float_197083, *[rho_mu_197084], **kwargs_197085)
    
    # Getting the type of 'obj' (line 1675)
    obj_197087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 69), 'obj', False)
    # Processing the call keyword arguments (line 1675)
    kwargs_197088 = {}
    # Getting the type of '_display_iter' (line 1675)
    _display_iter_197078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 12), '_display_iter', False)
    # Calling _display_iter(args, kwargs) (line 1675)
    _display_iter_call_result_197089 = invoke(stypy.reporting.localization.Localization(__file__, 1675, 12), _display_iter_197078, *[rho_p_197079, rho_d_197080, rho_g_197081, alpha_197082, float_call_result_197086, obj_197087], **kwargs_197088)
    
    # SSA join for if statement (line 1674)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BoolOp to a Name (line 1678):
    
    # Assigning a BoolOp to a Name (line 1678):
    
    # Evaluating a boolean operation
    
    # Getting the type of 'rho_p' (line 1678)
    rho_p_197090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 16), 'rho_p')
    # Getting the type of 'tol' (line 1678)
    tol_197091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 24), 'tol')
    # Applying the binary operator '<' (line 1678)
    result_lt_197092 = python_operator(stypy.reporting.localization.Localization(__file__, 1678, 16), '<', rho_p_197090, tol_197091)
    
    
    # Getting the type of 'rho_d' (line 1678)
    rho_d_197093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 32), 'rho_d')
    # Getting the type of 'tol' (line 1678)
    tol_197094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 40), 'tol')
    # Applying the binary operator '<' (line 1678)
    result_lt_197095 = python_operator(stypy.reporting.localization.Localization(__file__, 1678, 32), '<', rho_d_197093, tol_197094)
    
    # Applying the binary operator 'and' (line 1678)
    result_and_keyword_197096 = python_operator(stypy.reporting.localization.Localization(__file__, 1678, 16), 'and', result_lt_197092, result_lt_197095)
    
    # Getting the type of 'rho_g' (line 1678)
    rho_g_197097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 48), 'rho_g')
    # Getting the type of 'tol' (line 1678)
    tol_197098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 56), 'tol')
    # Applying the binary operator '<' (line 1678)
    result_lt_197099 = python_operator(stypy.reporting.localization.Localization(__file__, 1678, 48), '<', rho_g_197097, tol_197098)
    
    # Applying the binary operator 'and' (line 1678)
    result_and_keyword_197100 = python_operator(stypy.reporting.localization.Localization(__file__, 1678, 16), 'and', result_and_keyword_197096, result_lt_197099)
    
    # Getting the type of 'tau' (line 1678)
    tau_197101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 64), 'tau')
    # Getting the type of 'tol' (line 1678)
    tol_197102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 70), 'tol')
    
    # Call to max(...): (line 1679)
    # Processing the call arguments (line 1679)
    int_197104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1679, 20), 'int')
    # Getting the type of 'kappa' (line 1679)
    kappa_197105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 23), 'kappa', False)
    # Processing the call keyword arguments (line 1679)
    kwargs_197106 = {}
    # Getting the type of 'max' (line 1679)
    max_197103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 16), 'max', False)
    # Calling max(args, kwargs) (line 1679)
    max_call_result_197107 = invoke(stypy.reporting.localization.Localization(__file__, 1679, 16), max_197103, *[int_197104, kappa_197105], **kwargs_197106)
    
    # Applying the binary operator '*' (line 1678)
    result_mul_197108 = python_operator(stypy.reporting.localization.Localization(__file__, 1678, 70), '*', tol_197102, max_call_result_197107)
    
    # Applying the binary operator '<' (line 1678)
    result_lt_197109 = python_operator(stypy.reporting.localization.Localization(__file__, 1678, 64), '<', tau_197101, result_mul_197108)
    
    # Applying the binary operator 'and' (line 1678)
    result_and_keyword_197110 = python_operator(stypy.reporting.localization.Localization(__file__, 1678, 16), 'and', result_and_keyword_197100, result_lt_197109)
    
    # Assigning a type to the variable 'inf1' (line 1678)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1678, 8), 'inf1', result_and_keyword_197110)
    
    # Assigning a BoolOp to a Name (line 1680):
    
    # Assigning a BoolOp to a Name (line 1680):
    
    # Evaluating a boolean operation
    
    # Getting the type of 'rho_mu' (line 1680)
    rho_mu_197111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 15), 'rho_mu')
    # Getting the type of 'tol' (line 1680)
    tol_197112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 24), 'tol')
    # Applying the binary operator '<' (line 1680)
    result_lt_197113 = python_operator(stypy.reporting.localization.Localization(__file__, 1680, 15), '<', rho_mu_197111, tol_197112)
    
    
    # Getting the type of 'tau' (line 1680)
    tau_197114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 32), 'tau')
    # Getting the type of 'tol' (line 1680)
    tol_197115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 38), 'tol')
    
    # Call to min(...): (line 1680)
    # Processing the call arguments (line 1680)
    int_197117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1680, 48), 'int')
    # Getting the type of 'kappa' (line 1680)
    kappa_197118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 51), 'kappa', False)
    # Processing the call keyword arguments (line 1680)
    kwargs_197119 = {}
    # Getting the type of 'min' (line 1680)
    min_197116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 44), 'min', False)
    # Calling min(args, kwargs) (line 1680)
    min_call_result_197120 = invoke(stypy.reporting.localization.Localization(__file__, 1680, 44), min_197116, *[int_197117, kappa_197118], **kwargs_197119)
    
    # Applying the binary operator '*' (line 1680)
    result_mul_197121 = python_operator(stypy.reporting.localization.Localization(__file__, 1680, 38), '*', tol_197115, min_call_result_197120)
    
    # Applying the binary operator '<' (line 1680)
    result_lt_197122 = python_operator(stypy.reporting.localization.Localization(__file__, 1680, 32), '<', tau_197114, result_mul_197121)
    
    # Applying the binary operator 'and' (line 1680)
    result_and_keyword_197123 = python_operator(stypy.reporting.localization.Localization(__file__, 1680, 15), 'and', result_lt_197113, result_lt_197122)
    
    # Assigning a type to the variable 'inf2' (line 1680)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1680, 8), 'inf2', result_and_keyword_197123)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'inf1' (line 1681)
    inf1_197124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 11), 'inf1')
    # Getting the type of 'inf2' (line 1681)
    inf2_197125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 19), 'inf2')
    # Applying the binary operator 'or' (line 1681)
    result_or_keyword_197126 = python_operator(stypy.reporting.localization.Localization(__file__, 1681, 11), 'or', inf1_197124, inf2_197125)
    
    # Testing the type of an if condition (line 1681)
    if_condition_197127 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1681, 8), result_or_keyword_197126)
    # Assigning a type to the variable 'if_condition_197127' (line 1681)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1681, 8), 'if_condition_197127', if_condition_197127)
    # SSA begins for if statement (line 1681)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Call to dot(...): (line 1683)
    # Processing the call arguments (line 1683)
    # Getting the type of 'y' (line 1683)
    y_197133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 33), 'y', False)
    # Processing the call keyword arguments (line 1683)
    kwargs_197134 = {}
    
    # Call to transpose(...): (line 1683)
    # Processing the call keyword arguments (line 1683)
    kwargs_197130 = {}
    # Getting the type of 'b' (line 1683)
    b_197128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 15), 'b', False)
    # Obtaining the member 'transpose' of a type (line 1683)
    transpose_197129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1683, 15), b_197128, 'transpose')
    # Calling transpose(args, kwargs) (line 1683)
    transpose_call_result_197131 = invoke(stypy.reporting.localization.Localization(__file__, 1683, 15), transpose_197129, *[], **kwargs_197130)
    
    # Obtaining the member 'dot' of a type (line 1683)
    dot_197132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1683, 15), transpose_call_result_197131, 'dot')
    # Calling dot(args, kwargs) (line 1683)
    dot_call_result_197135 = invoke(stypy.reporting.localization.Localization(__file__, 1683, 15), dot_197132, *[y_197133], **kwargs_197134)
    
    # Getting the type of 'tol' (line 1683)
    tol_197136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 38), 'tol')
    # Applying the binary operator '>' (line 1683)
    result_gt_197137 = python_operator(stypy.reporting.localization.Localization(__file__, 1683, 15), '>', dot_call_result_197135, tol_197136)
    
    # Testing the type of an if condition (line 1683)
    if_condition_197138 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1683, 12), result_gt_197137)
    # Assigning a type to the variable 'if_condition_197138' (line 1683)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1683, 12), 'if_condition_197138', if_condition_197138)
    # SSA begins for if statement (line 1683)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1684):
    
    # Assigning a Num to a Name (line 1684):
    int_197139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1684, 25), 'int')
    # Assigning a type to the variable 'status' (line 1684)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1684, 16), 'status', int_197139)
    # SSA branch for the else part of an if statement (line 1683)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Name (line 1686):
    
    # Assigning a Num to a Name (line 1686):
    int_197140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1686, 25), 'int')
    # Assigning a type to the variable 'status' (line 1686)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1686, 16), 'status', int_197140)
    # SSA join for if statement (line 1683)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1687):
    
    # Assigning a Call to a Name (line 1687):
    
    # Call to _get_message(...): (line 1687)
    # Processing the call arguments (line 1687)
    # Getting the type of 'status' (line 1687)
    status_197142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 35), 'status', False)
    # Processing the call keyword arguments (line 1687)
    kwargs_197143 = {}
    # Getting the type of '_get_message' (line 1687)
    _get_message_197141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 22), '_get_message', False)
    # Calling _get_message(args, kwargs) (line 1687)
    _get_message_call_result_197144 = invoke(stypy.reporting.localization.Localization(__file__, 1687, 22), _get_message_197141, *[status_197142], **kwargs_197143)
    
    # Assigning a type to the variable 'message' (line 1687)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1687, 12), 'message', _get_message_call_result_197144)
    # SSA branch for the else part of an if statement (line 1681)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'iteration' (line 1689)
    iteration_197145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 13), 'iteration')
    # Getting the type of 'maxiter' (line 1689)
    maxiter_197146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 26), 'maxiter')
    # Applying the binary operator '>=' (line 1689)
    result_ge_197147 = python_operator(stypy.reporting.localization.Localization(__file__, 1689, 13), '>=', iteration_197145, maxiter_197146)
    
    # Testing the type of an if condition (line 1689)
    if_condition_197148 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1689, 13), result_ge_197147)
    # Assigning a type to the variable 'if_condition_197148' (line 1689)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1689, 13), 'if_condition_197148', if_condition_197148)
    # SSA begins for if statement (line 1689)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1690):
    
    # Assigning a Num to a Name (line 1690):
    int_197149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1690, 21), 'int')
    # Assigning a type to the variable 'status' (line 1690)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1690, 12), 'status', int_197149)
    
    # Assigning a Call to a Name (line 1691):
    
    # Assigning a Call to a Name (line 1691):
    
    # Call to _get_message(...): (line 1691)
    # Processing the call arguments (line 1691)
    # Getting the type of 'status' (line 1691)
    status_197151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 35), 'status', False)
    # Processing the call keyword arguments (line 1691)
    kwargs_197152 = {}
    # Getting the type of '_get_message' (line 1691)
    _get_message_197150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 22), '_get_message', False)
    # Calling _get_message(args, kwargs) (line 1691)
    _get_message_call_result_197153 = invoke(stypy.reporting.localization.Localization(__file__, 1691, 22), _get_message_197150, *[status_197151], **kwargs_197152)
    
    # Assigning a type to the variable 'message' (line 1691)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1691, 12), 'message', _get_message_call_result_197153)
    # SSA join for if statement (line 1689)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1681)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for while statement (line 1615)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'disp' (line 1694)
    disp_197154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 7), 'disp')
    # Testing the type of an if condition (line 1694)
    if_condition_197155 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1694, 4), disp_197154)
    # Assigning a type to the variable 'if_condition_197155' (line 1694)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1694, 4), 'if_condition_197155', if_condition_197155)
    # SSA begins for if statement (line 1694)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 1695)
    # Processing the call arguments (line 1695)
    # Getting the type of 'message' (line 1695)
    message_197157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 14), 'message', False)
    # Processing the call keyword arguments (line 1695)
    kwargs_197158 = {}
    # Getting the type of 'print' (line 1695)
    print_197156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 8), 'print', False)
    # Calling print(args, kwargs) (line 1695)
    print_call_result_197159 = invoke(stypy.reporting.localization.Localization(__file__, 1695, 8), print_197156, *[message_197157], **kwargs_197158)
    
    # SSA join for if statement (line 1694)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1697):
    
    # Assigning a BinOp to a Name (line 1697):
    # Getting the type of 'x' (line 1697)
    x_197160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 12), 'x')
    # Getting the type of 'tau' (line 1697)
    tau_197161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 16), 'tau')
    # Applying the binary operator 'div' (line 1697)
    result_div_197162 = python_operator(stypy.reporting.localization.Localization(__file__, 1697, 12), 'div', x_197160, tau_197161)
    
    # Assigning a type to the variable 'x_hat' (line 1697)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1697, 4), 'x_hat', result_div_197162)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1699)
    tuple_197163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1699, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1699)
    # Adding element type (line 1699)
    # Getting the type of 'x_hat' (line 1699)
    x_hat_197164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 11), 'x_hat')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1699, 11), tuple_197163, x_hat_197164)
    # Adding element type (line 1699)
    # Getting the type of 'status' (line 1699)
    status_197165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 18), 'status')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1699, 11), tuple_197163, status_197165)
    # Adding element type (line 1699)
    # Getting the type of 'message' (line 1699)
    message_197166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 26), 'message')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1699, 11), tuple_197163, message_197166)
    # Adding element type (line 1699)
    # Getting the type of 'iteration' (line 1699)
    iteration_197167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 35), 'iteration')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1699, 11), tuple_197163, iteration_197167)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1699)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1699, 4), 'stypy_return_type', tuple_197163)
    
    # ################# End of '_ip_hsd(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_ip_hsd' in the type store
    # Getting the type of 'stypy_return_type' (line 1482)
    stypy_return_type_197168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_197168)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_ip_hsd'
    return stypy_return_type_197168

# Assigning a type to the variable '_ip_hsd' (line 1482)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1482, 0), '_ip_hsd', _ip_hsd)

@norecursion
def _linprog_ip(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1704)
    None_197169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 13), 'None')
    # Getting the type of 'None' (line 1705)
    None_197170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1705, 13), 'None')
    # Getting the type of 'None' (line 1706)
    None_197171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 13), 'None')
    # Getting the type of 'None' (line 1707)
    None_197172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 13), 'None')
    # Getting the type of 'None' (line 1708)
    None_197173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 15), 'None')
    # Getting the type of 'None' (line 1709)
    None_197174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 17), 'None')
    float_197175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1710, 15), 'float')
    float_197176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1711, 13), 'float')
    int_197177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1712, 16), 'int')
    # Getting the type of 'False' (line 1713)
    False_197178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1713, 13), 'False')
    float_197179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1714, 12), 'float')
    # Getting the type of 'False' (line 1715)
    False_197180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 15), 'False')
    # Getting the type of 'False' (line 1716)
    False_197181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 14), 'False')
    # Getting the type of 'True' (line 1717)
    True_197182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 16), 'True')
    # Getting the type of 'None' (line 1718)
    None_197183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 17), 'None')
    # Getting the type of 'True' (line 1719)
    True_197184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 11), 'True')
    # Getting the type of 'False' (line 1720)
    False_197185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 11), 'False')
    # Getting the type of 'True' (line 1721)
    True_197186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 17), 'True')
    str_197187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1722, 19), 'str', 'MMD_AT_PLUS_A')
    # Getting the type of 'True' (line 1723)
    True_197188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 11), 'True')
    # Getting the type of 'False' (line 1724)
    False_197189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 25), 'False')
    defaults = [None_197169, None_197170, None_197171, None_197172, None_197173, None_197174, float_197175, float_197176, int_197177, False_197178, float_197179, False_197180, False_197181, True_197182, None_197183, True_197184, False_197185, True_197186, str_197187, True_197188, False_197189]
    # Create a new context for function '_linprog_ip'
    module_type_store = module_type_store.open_function_context('_linprog_ip', 1702, 0, False)
    
    # Passed parameters checking function
    _linprog_ip.stypy_localization = localization
    _linprog_ip.stypy_type_of_self = None
    _linprog_ip.stypy_type_store = module_type_store
    _linprog_ip.stypy_function_name = '_linprog_ip'
    _linprog_ip.stypy_param_names_list = ['c', 'A_ub', 'b_ub', 'A_eq', 'b_eq', 'bounds', 'callback', 'alpha0', 'beta', 'maxiter', 'disp', 'tol', 'sparse', 'lstsq', 'sym_pos', 'cholesky', 'pc', 'ip', 'presolve', 'permc_spec', 'rr', '_sparse_presolve']
    _linprog_ip.stypy_varargs_param_name = None
    _linprog_ip.stypy_kwargs_param_name = 'unknown_options'
    _linprog_ip.stypy_call_defaults = defaults
    _linprog_ip.stypy_call_varargs = varargs
    _linprog_ip.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_linprog_ip', ['c', 'A_ub', 'b_ub', 'A_eq', 'b_eq', 'bounds', 'callback', 'alpha0', 'beta', 'maxiter', 'disp', 'tol', 'sparse', 'lstsq', 'sym_pos', 'cholesky', 'pc', 'ip', 'presolve', 'permc_spec', 'rr', '_sparse_presolve'], None, 'unknown_options', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_linprog_ip', localization, ['c', 'A_ub', 'b_ub', 'A_eq', 'b_eq', 'bounds', 'callback', 'alpha0', 'beta', 'maxiter', 'disp', 'tol', 'sparse', 'lstsq', 'sym_pos', 'cholesky', 'pc', 'ip', 'presolve', 'permc_spec', 'rr', '_sparse_presolve'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_linprog_ip(...)' code ##################

    str_197190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2017, (-1)), 'str', '\n    Minimize a linear objective function subject to linear\n    equality constraints, linear inequality constraints, and simple bounds\n    using the interior point method of [1]_.\n\n    Linear programming is intended to solve problems of the following form::\n\n        Minimize:     c^T * x\n\n        Subject to:   A_ub * x <= b_ub\n                      A_eq * x == b_eq\n                      bounds[i][0] < x_i < bounds[i][1]\n\n    Parameters\n    ----------\n    c : array_like\n        Coefficients of the linear objective function to be minimized.\n    A_ub : array_like, optional\n        2-D array which, when matrix-multiplied by ``x``, gives the values of\n        the upper-bound inequality constraints at ``x``.\n    b_ub : array_like, optional\n        1-D array of values representing the upper-bound of each inequality\n        constraint (row) in ``A_ub``.\n    A_eq : array_like, optional\n        2-D array which, when matrix-multiplied by ``x``, gives the values of\n        the equality constraints at ``x``.\n    b_eq : array_like, optional\n        1-D array of values representing the right hand side of each equality\n        constraint (row) in ``A_eq``.\n    bounds : sequence, optional\n        ``(min, max)`` pairs for each element in ``x``, defining\n        the bounds on that parameter. Use ``None`` for one of ``min`` or\n        ``max`` when there is no bound in that direction. By default\n        bounds are ``(0, None)`` (non-negative).\n        If a sequence containing a single tuple is provided, then ``min`` and\n        ``max`` will be applied to all variables in the problem.\n\n    Options\n    -------\n    maxiter : int (default = 1000)\n        The maximum number of iterations of the algorithm.\n    disp : bool (default = False)\n        Set to ``True`` if indicators of optimization status are to be printed\n        to the console each iteration.\n    tol : float (default = 1e-8)\n        Termination tolerance to be used for all termination criteria;\n        see [1]_ Section 4.5.\n    alpha0 : float (default = 0.99995)\n        The maximal step size for Mehrota\'s predictor-corrector search\n        direction; see :math:`\\beta_{3}` of [1]_ Table 8.1.\n    beta : float (default = 0.1)\n        The desired reduction of the path parameter :math:`\\mu` (see [3]_)\n        when Mehrota\'s predictor-corrector is not in use (uncommon).\n    sparse : bool (default = False)\n        Set to ``True`` if the problem is to be treated as sparse after\n        presolve. If either ``A_eq`` or ``A_ub`` is a sparse matrix,\n        this option will automatically be set ``True``, and the problem\n        will be treated as sparse even during presolve. If your constraint\n        matrices contain mostly zeros and the problem is not very small (less\n        than about 100 constraints or variables), consider setting ``True``\n        or providing ``A_eq`` and ``A_ub`` as sparse matrices.\n    lstsq : bool (default = False)\n        Set to ``True`` if the problem is expected to be very poorly\n        conditioned. This should always be left ``False`` unless severe\n        numerical difficulties are encountered. Leave this at the default\n        unless you receive a warning message suggesting otherwise.\n    sym_pos : bool (default = True)\n        Leave ``True`` if the problem is expected to yield a well conditioned\n        symmetric positive definite normal equation matrix\n        (almost always). Leave this at the default unless you receive\n        a warning message suggesting otherwise.\n    cholesky : bool (default = True)\n        Set to ``True`` if the normal equations are to be solved by explicit\n        Cholesky decomposition followed by explicit forward/backward\n        substitution. This is typically faster for moderate, dense problems\n        that are numerically well-behaved.\n    pc : bool (default = True)\n        Leave ``True`` if the predictor-corrector method of Mehrota is to be\n        used. This is almost always (if not always) beneficial.\n    ip : bool (default = False)\n        Set to ``True`` if the improved initial point suggestion due to [1]_\n        Section 4.3 is desired. Whether this is beneficial or not\n        depends on the problem.\n    presolve : bool (default = True)\n        Leave ``True`` if presolve routine should be run. The presolve routine\n        is almost always useful because it can detect trivial infeasibilities\n        and unboundedness, eliminate fixed variables, and remove redundancies.\n        One circumstance in which it might be turned off (set ``False``) is\n        when it detects that the problem is trivially unbounded; it is possible\n        that that the problem is truly infeasibile but this has not been\n        detected.\n    rr : bool (default = True)\n        Default ``True`` attempts to eliminate any redundant rows in ``A_eq``.\n        Set ``False`` if ``A_eq`` is known to be of full row rank, or if you\n        are looking for a potential speedup (at the expense of reliability).\n    permc_spec : str (default = \'MMD_AT_PLUS_A\')\n        (Has effect only with ``sparse = True``, ``lstsq = False``, ``sym_pos =\n        True``.) A matrix is factorized in each iteration of the algorithm.\n        This option specifies how to permute the columns of the matrix for\n        sparsity preservation. Acceptable values are:\n\n        - ``NATURAL``: natural ordering.\n        - ``MMD_ATA``: minimum degree ordering on the structure of A^T A.\n        - ``MMD_AT_PLUS_A``: minimum degree ordering on the structure of A^T+A.\n        - ``COLAMD``: approximate minimum degree column ordering.\n\n        This option can impact the convergence of the\n        interior point algorithm; test different values to determine which\n        performs best for your problem. For more information, refer to\n        ``scipy.sparse.linalg.splu``.\n\n    Returns\n    -------\n    A ``scipy.optimize.OptimizeResult`` consisting of the following fields:\n\n        x : ndarray\n            The independent variable vector which optimizes the linear\n            programming problem.\n        fun : float\n            The optimal value of the objective function\n        con : float\n            The residuals of the equality constraints (nominally zero).\n        slack : ndarray\n            The values of the slack variables.  Each slack variable corresponds\n            to an inequality constraint.  If the slack is zero, then the\n            corresponding constraint is active.\n        success : bool\n            Returns True if the algorithm succeeded in finding an optimal\n            solution.\n        status : int\n            An integer representing the exit status of the optimization::\n\n                 0 : Optimization terminated successfully\n                 1 : Iteration limit reached\n                 2 : Problem appears to be infeasible\n                 3 : Problem appears to be unbounded\n                 4 : Serious numerical difficulties encountered\n\n        nit : int\n            The number of iterations performed.\n        message : str\n            A string descriptor of the exit status of the optimization.\n\n    Notes\n    -----\n\n    This method implements the algorithm outlined in [1]_ with ideas from [5]_\n    and a structure inspired by the simpler methods of [3]_ and [4]_.\n\n    First, a presolve procedure based on [5]_ attempts to identify trivial\n    infeasibilities, trivial unboundedness, and potential problem\n    simplifications. Specifically, it checks for:\n\n    - rows of zeros in ``A_eq`` or ``A_ub``, representing trivial constraints;\n    - columns of zeros in ``A_eq`` `and` ``A_ub``, representing unconstrained\n      variables;\n    - column singletons in ``A_eq``, representing fixed variables; and\n    - column singletons in ``A_ub``, representing simple bounds.\n\n    If presolve reveals that the problem is unbounded (e.g. an unconstrained\n    and unbounded variable has negative cost) or infeasible (e.g. a row of\n    zeros in ``A_eq`` corresponds with a nonzero in ``b_eq``), the solver\n    terminates with the appropriate status code. Note that presolve terminates\n    as soon as any sign of unboundedness is detected; consequently, a problem\n    may be reported as unbounded when in reality the problem is infeasible\n    (but infeasibility has not been detected yet). Therefore, if the output\n    message states that unboundedness is detected in presolve and it is\n    necessary to know whether the problem is actually infeasible, set option\n    ``presolve=False``.\n\n    If neither infeasibility nor unboundedness are detected in a single pass\n    of the presolve check, bounds are tightened where possible and fixed\n    variables are removed from the problem. Then, linearly dependent rows\n    of the ``A_eq`` matrix are removed, (unless they represent an\n    infeasibility) to avoid numerical difficulties in the primary solve\n    routine. Note that rows that are nearly linearly dependent (within a\n    prescibed tolerance) may also be removed, which can change the optimal\n    solution in rare cases. If this is a concern, eliminate redundancy from\n    your problem formulation and run with option ``rr=False`` or\n    ``presolve=False``.\n\n    Several potential improvements can be made here: additional presolve\n    checks outlined in [5]_ should be implemented, the presolve routine should\n    be run multiple times (until no further simplifications can be made), and\n    more of the efficiency improvements from [2]_ should be implemented in the\n    redundancy removal routines.\n\n    After presolve, the problem is transformed to standard form by converting\n    the (tightened) simple bounds to upper bound constraints, introducing\n    non-negative slack variables for inequality constraints, and expressing\n    unbounded variables as the difference between two non-negative variables.\n\n    The primal-dual path following method begins with initial \'guesses\' of\n    the primal and dual variables of the standard form problem and iteratively\n    attempts to solve the (nonlinear) Karush-Kuhn-Tucker conditions for the\n    problem with a gradually reduced logarithmic barrier term added to the\n    objective. This particular implementation uses a homogeneous self-dual\n    formulation, which provides certificates of infeasibility or unboundedness\n    where applicable.\n\n    The default initial point for the primal and dual variables is that\n    defined in [1]_ Section 4.4 Equation 8.22. Optionally (by setting initial\n    point option ``ip=True``), an alternate (potentially improved) starting\n    point can be calculated according to the additional recommendations of\n    [1]_ Section 4.4.\n\n    A search direction is calculated using the predictor-corrector method\n    (single correction) proposed by Mehrota and detailed in [1]_ Section 4.1.\n    (A potential improvement would be to implement the method of multiple\n    corrections described in [1]_ Section 4.2.) In practice, this is\n    accomplished by solving the normal equations, [1]_ Section 5.1 Equations\n    8.31 and 8.32, derived from the Newton equations [1]_ Section 5 Equations\n    8.25 (compare to [1]_ Section 4 Equations 8.6-8.8). The advantage of\n    solving the normal equations rather than 8.25 directly is that the\n    matrices involved are symmetric positive definite, so Cholesky\n    decomposition can be used rather than the more expensive LU factorization.\n\n    With the default ``cholesky=True``, this is accomplished using\n    ``scipy.linalg.cho_factor`` followed by forward/backward substitutions\n    via ``scipy.linalg.cho_solve``. With ``cholesky=False`` and\n    ``sym_pos=True``, Cholesky decomposition is performed instead by\n    ``scipy.linalg.solve``. Based on speed tests, this also appears to retain\n    the Cholesky decomposition of the matrix for later use, which is beneficial\n    as the same system is solved four times with different right hand sides\n    in each iteration of the algorithm.\n\n    In problems with redundancy (e.g. if presolve is turned off with option\n    ``presolve=False``) or if the matrices become ill-conditioned (e.g. as the\n    solution is approached and some decision variables approach zero),\n    Cholesky decomposition can fail. Should this occur, successively more\n    robust solvers (``scipy.linalg.solve`` with ``sym_pos=False`` then\n    ``scipy.linalg.lstsq``) are tried, at the cost of computational efficiency.\n    These solvers can be used from the outset by setting the options\n    ``sym_pos=False`` and ``lstsq=True``, respectively.\n\n    Note that with the option ``sparse=True``, the normal equations are solved\n    using ``scipy.sparse.linalg.spsolve``. Unfortunately, this uses the more\n    expensive LU decomposition from the outset, but for large, sparse problems,\n    the use of sparse linear algebra techniques improves the solve speed\n    despite the use of LU rather than Cholesky decomposition. A simple\n    improvement would be to use the sparse Cholesky decomposition of\n    ``CHOLMOD`` via ``scikit-sparse`` when available.\n\n    Other potential improvements for combatting issues associated with dense\n    columns in otherwise sparse problems are outlined in [1]_ Section 5.3 and\n    [7]_ Section 4.1-4.2; the latter also discusses the alleviation of\n    accuracy issues associated with the substitution approach to free\n    variables.\n\n    After calculating the search direction, the maximum possible step size\n    that does not activate the non-negativity constraints is calculated, and\n    the smaller of this step size and unity is applied (as in [1]_ Section\n    4.1.) [1]_ Section 4.3 suggests improvements for choosing the step size.\n\n    The new point is tested according to the termination conditions of [1]_\n    Section 4.5. The same tolerance, which can be set using the ``tol`` option,\n    is used for all checks. (A potential improvement would be to expose\n    the different tolerances to be set independently.) If optimality,\n    unboundedness, or infeasibility is detected, the solve procedure\n    terminates; otherwise it repeats.\n\n    If optimality is achieved, a postsolve procedure undoes transformations\n    associated with presolve and converting to standard form. It then\n    calculates the residuals (equality constraint violations, which should\n    be very small) and slacks (difference between the left and right hand\n    sides of the upper bound constraints) of the original problem, which are\n    returned with the solution in an ``OptimizeResult`` object.\n\n    References\n    ----------\n    .. [1] Andersen, Erling D., and Knud D. Andersen. "The MOSEK interior point\n           optimizer for linear programming: an implementation of the\n           homogeneous algorithm." High performance optimization. Springer US,\n           2000. 197-232.\n    .. [2] Andersen, Erling D. "Finding all linearly dependent rows in\n           large-scale linear programming." Optimization Methods and Software\n           6.3 (1995): 219-227.\n    .. [3] Freund, Robert M. "Primal-Dual Interior-Point Methods for Linear\n           Programming based on Newton\'s Method." Unpublished Course Notes,\n           March 2004. Available 2/25/2017 at\n           https://ocw.mit.edu/courses/sloan-school-of-management/15-084j-nonlinear-programming-spring-2004/lecture-notes/lec14_int_pt_mthd.pdf\n    .. [4] Fourer, Robert. "Solving Linear Programs by Interior-Point Methods."\n           Unpublished Course Notes, August 26, 2005. Available 2/25/2017 at\n           http://www.4er.org/CourseNotes/Book%20B/B-III.pdf\n    .. [5] Andersen, Erling D., and Knud D. Andersen. "Presolving in linear\n           programming." Mathematical Programming 71.2 (1995): 221-245.\n    .. [6] Bertsimas, Dimitris, and J. Tsitsiklis. "Introduction to linear\n           programming." Athena Scientific 1 (1997): 997.\n    .. [7] Andersen, Erling D., et al. Implementation of interior point methods\n           for large scale linear programming. HEC/Universite de Geneve, 1996.\n\n    ')
    
    # Call to _check_unknown_options(...): (line 2019)
    # Processing the call arguments (line 2019)
    # Getting the type of 'unknown_options' (line 2019)
    unknown_options_197192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2019, 27), 'unknown_options', False)
    # Processing the call keyword arguments (line 2019)
    kwargs_197193 = {}
    # Getting the type of '_check_unknown_options' (line 2019)
    _check_unknown_options_197191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2019, 4), '_check_unknown_options', False)
    # Calling _check_unknown_options(args, kwargs) (line 2019)
    _check_unknown_options_call_result_197194 = invoke(stypy.reporting.localization.Localization(__file__, 2019, 4), _check_unknown_options_197191, *[unknown_options_197192], **kwargs_197193)
    
    
    # Type idiom detected: calculating its left and rigth part (line 2021)
    # Getting the type of 'callback' (line 2021)
    callback_197195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2021, 4), 'callback')
    # Getting the type of 'None' (line 2021)
    None_197196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2021, 23), 'None')
    
    (may_be_197197, more_types_in_union_197198) = may_not_be_none(callback_197195, None_197196)

    if may_be_197197:

        if more_types_in_union_197198:
            # Runtime conditional SSA (line 2021)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to NotImplementedError(...): (line 2022)
        # Processing the call arguments (line 2022)
        str_197200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2022, 34), 'str', "method 'interior-point' does not support callback functions.")
        # Processing the call keyword arguments (line 2022)
        kwargs_197201 = {}
        # Getting the type of 'NotImplementedError' (line 2022)
        NotImplementedError_197199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2022, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 2022)
        NotImplementedError_call_result_197202 = invoke(stypy.reporting.localization.Localization(__file__, 2022, 14), NotImplementedError_197199, *[str_197200], **kwargs_197201)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2022, 8), NotImplementedError_call_result_197202, 'raise parameter', BaseException)

        if more_types_in_union_197198:
            # SSA join for if statement (line 2021)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Evaluating a boolean operation
    # Getting the type of '_sparse_presolve' (line 2026)
    _sparse_presolve_197203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 7), '_sparse_presolve')
    
    # Getting the type of 'A_eq' (line 2026)
    A_eq_197204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 28), 'A_eq')
    # Getting the type of 'None' (line 2026)
    None_197205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 40), 'None')
    # Applying the binary operator 'isnot' (line 2026)
    result_is_not_197206 = python_operator(stypy.reporting.localization.Localization(__file__, 2026, 28), 'isnot', A_eq_197204, None_197205)
    
    # Applying the binary operator 'and' (line 2026)
    result_and_keyword_197207 = python_operator(stypy.reporting.localization.Localization(__file__, 2026, 7), 'and', _sparse_presolve_197203, result_is_not_197206)
    
    # Testing the type of an if condition (line 2026)
    if_condition_197208 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2026, 4), result_and_keyword_197207)
    # Assigning a type to the variable 'if_condition_197208' (line 2026)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2026, 4), 'if_condition_197208', if_condition_197208)
    # SSA begins for if statement (line 2026)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2027):
    
    # Assigning a Call to a Name (line 2027):
    
    # Call to coo_matrix(...): (line 2027)
    # Processing the call arguments (line 2027)
    # Getting the type of 'A_eq' (line 2027)
    A_eq_197212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2027, 36), 'A_eq', False)
    # Processing the call keyword arguments (line 2027)
    kwargs_197213 = {}
    # Getting the type of 'sp' (line 2027)
    sp_197209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2027, 15), 'sp', False)
    # Obtaining the member 'sparse' of a type (line 2027)
    sparse_197210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2027, 15), sp_197209, 'sparse')
    # Obtaining the member 'coo_matrix' of a type (line 2027)
    coo_matrix_197211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2027, 15), sparse_197210, 'coo_matrix')
    # Calling coo_matrix(args, kwargs) (line 2027)
    coo_matrix_call_result_197214 = invoke(stypy.reporting.localization.Localization(__file__, 2027, 15), coo_matrix_197211, *[A_eq_197212], **kwargs_197213)
    
    # Assigning a type to the variable 'A_eq' (line 2027)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2027, 8), 'A_eq', coo_matrix_call_result_197214)
    # SSA join for if statement (line 2026)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    # Getting the type of '_sparse_presolve' (line 2028)
    _sparse_presolve_197215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2028, 7), '_sparse_presolve')
    
    # Getting the type of 'A_ub' (line 2028)
    A_ub_197216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2028, 28), 'A_ub')
    # Getting the type of 'None' (line 2028)
    None_197217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2028, 40), 'None')
    # Applying the binary operator 'isnot' (line 2028)
    result_is_not_197218 = python_operator(stypy.reporting.localization.Localization(__file__, 2028, 28), 'isnot', A_ub_197216, None_197217)
    
    # Applying the binary operator 'and' (line 2028)
    result_and_keyword_197219 = python_operator(stypy.reporting.localization.Localization(__file__, 2028, 7), 'and', _sparse_presolve_197215, result_is_not_197218)
    
    # Testing the type of an if condition (line 2028)
    if_condition_197220 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2028, 4), result_and_keyword_197219)
    # Assigning a type to the variable 'if_condition_197220' (line 2028)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2028, 4), 'if_condition_197220', if_condition_197220)
    # SSA begins for if statement (line 2028)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2029):
    
    # Assigning a Call to a Name (line 2029):
    
    # Call to coo_matrix(...): (line 2029)
    # Processing the call arguments (line 2029)
    # Getting the type of 'A_ub' (line 2029)
    A_ub_197224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2029, 36), 'A_ub', False)
    # Processing the call keyword arguments (line 2029)
    kwargs_197225 = {}
    # Getting the type of 'sp' (line 2029)
    sp_197221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2029, 15), 'sp', False)
    # Obtaining the member 'sparse' of a type (line 2029)
    sparse_197222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2029, 15), sp_197221, 'sparse')
    # Obtaining the member 'coo_matrix' of a type (line 2029)
    coo_matrix_197223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2029, 15), sparse_197222, 'coo_matrix')
    # Calling coo_matrix(args, kwargs) (line 2029)
    coo_matrix_call_result_197226 = invoke(stypy.reporting.localization.Localization(__file__, 2029, 15), coo_matrix_197223, *[A_ub_197224], **kwargs_197225)
    
    # Assigning a type to the variable 'A_ub' (line 2029)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2029, 8), 'A_ub', coo_matrix_call_result_197226)
    # SSA join for if statement (line 2028)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'sparse' (line 2032)
    sparse_197227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2032, 11), 'sparse')
    # Applying the 'not' unary operator (line 2032)
    result_not__197228 = python_operator(stypy.reporting.localization.Localization(__file__, 2032, 7), 'not', sparse_197227)
    
    
    # Evaluating a boolean operation
    
    # Call to issparse(...): (line 2032)
    # Processing the call arguments (line 2032)
    # Getting the type of 'A_eq' (line 2032)
    A_eq_197232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2032, 42), 'A_eq', False)
    # Processing the call keyword arguments (line 2032)
    kwargs_197233 = {}
    # Getting the type of 'sp' (line 2032)
    sp_197229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2032, 23), 'sp', False)
    # Obtaining the member 'sparse' of a type (line 2032)
    sparse_197230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2032, 23), sp_197229, 'sparse')
    # Obtaining the member 'issparse' of a type (line 2032)
    issparse_197231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2032, 23), sparse_197230, 'issparse')
    # Calling issparse(args, kwargs) (line 2032)
    issparse_call_result_197234 = invoke(stypy.reporting.localization.Localization(__file__, 2032, 23), issparse_197231, *[A_eq_197232], **kwargs_197233)
    
    
    # Call to issparse(...): (line 2032)
    # Processing the call arguments (line 2032)
    # Getting the type of 'A_ub' (line 2032)
    A_ub_197238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2032, 70), 'A_ub', False)
    # Processing the call keyword arguments (line 2032)
    kwargs_197239 = {}
    # Getting the type of 'sp' (line 2032)
    sp_197235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2032, 51), 'sp', False)
    # Obtaining the member 'sparse' of a type (line 2032)
    sparse_197236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2032, 51), sp_197235, 'sparse')
    # Obtaining the member 'issparse' of a type (line 2032)
    issparse_197237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2032, 51), sparse_197236, 'issparse')
    # Calling issparse(args, kwargs) (line 2032)
    issparse_call_result_197240 = invoke(stypy.reporting.localization.Localization(__file__, 2032, 51), issparse_197237, *[A_ub_197238], **kwargs_197239)
    
    # Applying the binary operator 'or' (line 2032)
    result_or_keyword_197241 = python_operator(stypy.reporting.localization.Localization(__file__, 2032, 23), 'or', issparse_call_result_197234, issparse_call_result_197240)
    
    # Applying the binary operator 'and' (line 2032)
    result_and_keyword_197242 = python_operator(stypy.reporting.localization.Localization(__file__, 2032, 7), 'and', result_not__197228, result_or_keyword_197241)
    
    # Testing the type of an if condition (line 2032)
    if_condition_197243 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2032, 4), result_and_keyword_197242)
    # Assigning a type to the variable 'if_condition_197243' (line 2032)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2032, 4), 'if_condition_197243', if_condition_197243)
    # SSA begins for if statement (line 2032)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2033):
    
    # Assigning a Name to a Name (line 2033):
    # Getting the type of 'True' (line 2033)
    True_197244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2033, 17), 'True')
    # Assigning a type to the variable 'sparse' (line 2033)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2033, 8), 'sparse', True_197244)
    
    # Call to warn(...): (line 2034)
    # Processing the call arguments (line 2034)
    str_197246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2034, 13), 'str', "Sparse constraint matrix detected; setting 'sparse':True.")
    # Getting the type of 'OptimizeWarning' (line 2035)
    OptimizeWarning_197247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2035, 13), 'OptimizeWarning', False)
    # Processing the call keyword arguments (line 2034)
    kwargs_197248 = {}
    # Getting the type of 'warn' (line 2034)
    warn_197245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2034, 8), 'warn', False)
    # Calling warn(args, kwargs) (line 2034)
    warn_call_result_197249 = invoke(stypy.reporting.localization.Localization(__file__, 2034, 8), warn_197245, *[str_197246, OptimizeWarning_197247], **kwargs_197248)
    
    # SSA join for if statement (line 2032)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    # Getting the type of 'sparse' (line 2037)
    sparse_197250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2037, 7), 'sparse')
    # Getting the type of 'lstsq' (line 2037)
    lstsq_197251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2037, 18), 'lstsq')
    # Applying the binary operator 'and' (line 2037)
    result_and_keyword_197252 = python_operator(stypy.reporting.localization.Localization(__file__, 2037, 7), 'and', sparse_197250, lstsq_197251)
    
    # Testing the type of an if condition (line 2037)
    if_condition_197253 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2037, 4), result_and_keyword_197252)
    # Assigning a type to the variable 'if_condition_197253' (line 2037)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2037, 4), 'if_condition_197253', if_condition_197253)
    # SSA begins for if statement (line 2037)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 2038)
    # Processing the call arguments (line 2038)
    str_197255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2038, 13), 'str', "Invalid option combination 'sparse':True and 'lstsq':True; Sparse least squares is not recommended.")
    # Getting the type of 'OptimizeWarning' (line 2040)
    OptimizeWarning_197256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2040, 13), 'OptimizeWarning', False)
    # Processing the call keyword arguments (line 2038)
    kwargs_197257 = {}
    # Getting the type of 'warn' (line 2038)
    warn_197254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 8), 'warn', False)
    # Calling warn(args, kwargs) (line 2038)
    warn_call_result_197258 = invoke(stypy.reporting.localization.Localization(__file__, 2038, 8), warn_197254, *[str_197255, OptimizeWarning_197256], **kwargs_197257)
    
    # SSA join for if statement (line 2037)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    # Getting the type of 'sparse' (line 2042)
    sparse_197259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 7), 'sparse')
    
    # Getting the type of 'sym_pos' (line 2042)
    sym_pos_197260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 22), 'sym_pos')
    # Applying the 'not' unary operator (line 2042)
    result_not__197261 = python_operator(stypy.reporting.localization.Localization(__file__, 2042, 18), 'not', sym_pos_197260)
    
    # Applying the binary operator 'and' (line 2042)
    result_and_keyword_197262 = python_operator(stypy.reporting.localization.Localization(__file__, 2042, 7), 'and', sparse_197259, result_not__197261)
    
    # Testing the type of an if condition (line 2042)
    if_condition_197263 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2042, 4), result_and_keyword_197262)
    # Assigning a type to the variable 'if_condition_197263' (line 2042)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2042, 4), 'if_condition_197263', if_condition_197263)
    # SSA begins for if statement (line 2042)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 2043)
    # Processing the call arguments (line 2043)
    str_197265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2043, 13), 'str', "Invalid option combination 'sparse':True and 'sym_pos':False; the effect is the same as sparse least squares, which is not recommended.")
    # Getting the type of 'OptimizeWarning' (line 2046)
    OptimizeWarning_197266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2046, 13), 'OptimizeWarning', False)
    # Processing the call keyword arguments (line 2043)
    kwargs_197267 = {}
    # Getting the type of 'warn' (line 2043)
    warn_197264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2043, 8), 'warn', False)
    # Calling warn(args, kwargs) (line 2043)
    warn_call_result_197268 = invoke(stypy.reporting.localization.Localization(__file__, 2043, 8), warn_197264, *[str_197265, OptimizeWarning_197266], **kwargs_197267)
    
    # SSA join for if statement (line 2042)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    # Getting the type of 'sparse' (line 2048)
    sparse_197269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2048, 7), 'sparse')
    # Getting the type of 'cholesky' (line 2048)
    cholesky_197270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2048, 18), 'cholesky')
    # Applying the binary operator 'and' (line 2048)
    result_and_keyword_197271 = python_operator(stypy.reporting.localization.Localization(__file__, 2048, 7), 'and', sparse_197269, cholesky_197270)
    
    # Testing the type of an if condition (line 2048)
    if_condition_197272 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2048, 4), result_and_keyword_197271)
    # Assigning a type to the variable 'if_condition_197272' (line 2048)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2048, 4), 'if_condition_197272', if_condition_197272)
    # SSA begins for if statement (line 2048)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 2050)
    # Processing the call arguments (line 2050)
    str_197274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2050, 13), 'str', "Invalid option combination 'sparse':True and 'cholesky':True; sparse Colesky decomposition is not available.")
    # Getting the type of 'OptimizeWarning' (line 2053)
    OptimizeWarning_197275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2053, 13), 'OptimizeWarning', False)
    # Processing the call keyword arguments (line 2050)
    kwargs_197276 = {}
    # Getting the type of 'warn' (line 2050)
    warn_197273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2050, 8), 'warn', False)
    # Calling warn(args, kwargs) (line 2050)
    warn_call_result_197277 = invoke(stypy.reporting.localization.Localization(__file__, 2050, 8), warn_197273, *[str_197274, OptimizeWarning_197275], **kwargs_197276)
    
    # SSA join for if statement (line 2048)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    # Getting the type of 'lstsq' (line 2055)
    lstsq_197278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 7), 'lstsq')
    # Getting the type of 'cholesky' (line 2055)
    cholesky_197279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 17), 'cholesky')
    # Applying the binary operator 'and' (line 2055)
    result_and_keyword_197280 = python_operator(stypy.reporting.localization.Localization(__file__, 2055, 7), 'and', lstsq_197278, cholesky_197279)
    
    # Testing the type of an if condition (line 2055)
    if_condition_197281 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2055, 4), result_and_keyword_197280)
    # Assigning a type to the variable 'if_condition_197281' (line 2055)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2055, 4), 'if_condition_197281', if_condition_197281)
    # SSA begins for if statement (line 2055)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 2056)
    # Processing the call arguments (line 2056)
    str_197283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2056, 13), 'str', "Invalid option combination 'lstsq':True and 'cholesky':True; option 'cholesky' has no effect when 'lstsq' is set True.")
    # Getting the type of 'OptimizeWarning' (line 2059)
    OptimizeWarning_197284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 13), 'OptimizeWarning', False)
    # Processing the call keyword arguments (line 2056)
    kwargs_197285 = {}
    # Getting the type of 'warn' (line 2056)
    warn_197282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2056, 8), 'warn', False)
    # Calling warn(args, kwargs) (line 2056)
    warn_call_result_197286 = invoke(stypy.reporting.localization.Localization(__file__, 2056, 8), warn_197282, *[str_197283, OptimizeWarning_197284], **kwargs_197285)
    
    # SSA join for if statement (line 2055)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Tuple to a Name (line 2061):
    
    # Assigning a Tuple to a Name (line 2061):
    
    # Obtaining an instance of the builtin type 'tuple' (line 2061)
    tuple_197287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2061, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2061)
    # Adding element type (line 2061)
    str_197288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2061, 24), 'str', 'NATURAL')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2061, 24), tuple_197287, str_197288)
    # Adding element type (line 2061)
    str_197289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2061, 35), 'str', 'MMD_ATA')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2061, 24), tuple_197287, str_197289)
    # Adding element type (line 2061)
    str_197290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2061, 46), 'str', 'MMD_AT_PLUS_A')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2061, 24), tuple_197287, str_197290)
    # Adding element type (line 2061)
    str_197291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2061, 63), 'str', 'COLAMD')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2061, 24), tuple_197287, str_197291)
    
    # Assigning a type to the variable 'valid_permc_spec' (line 2061)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2061, 4), 'valid_permc_spec', tuple_197287)
    
    
    
    # Call to upper(...): (line 2062)
    # Processing the call keyword arguments (line 2062)
    kwargs_197294 = {}
    # Getting the type of 'permc_spec' (line 2062)
    permc_spec_197292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2062, 7), 'permc_spec', False)
    # Obtaining the member 'upper' of a type (line 2062)
    upper_197293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2062, 7), permc_spec_197292, 'upper')
    # Calling upper(args, kwargs) (line 2062)
    upper_call_result_197295 = invoke(stypy.reporting.localization.Localization(__file__, 2062, 7), upper_197293, *[], **kwargs_197294)
    
    # Getting the type of 'valid_permc_spec' (line 2062)
    valid_permc_spec_197296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2062, 33), 'valid_permc_spec')
    # Applying the binary operator 'notin' (line 2062)
    result_contains_197297 = python_operator(stypy.reporting.localization.Localization(__file__, 2062, 7), 'notin', upper_call_result_197295, valid_permc_spec_197296)
    
    # Testing the type of an if condition (line 2062)
    if_condition_197298 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2062, 4), result_contains_197297)
    # Assigning a type to the variable 'if_condition_197298' (line 2062)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2062, 4), 'if_condition_197298', if_condition_197298)
    # SSA begins for if statement (line 2062)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 2063)
    # Processing the call arguments (line 2063)
    str_197300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2063, 13), 'str', "Invalid permc_spec option: '")
    
    # Call to str(...): (line 2063)
    # Processing the call arguments (line 2063)
    # Getting the type of 'permc_spec' (line 2063)
    permc_spec_197302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2063, 50), 'permc_spec', False)
    # Processing the call keyword arguments (line 2063)
    kwargs_197303 = {}
    # Getting the type of 'str' (line 2063)
    str_197301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2063, 46), 'str', False)
    # Calling str(args, kwargs) (line 2063)
    str_call_result_197304 = invoke(stypy.reporting.localization.Localization(__file__, 2063, 46), str_197301, *[permc_spec_197302], **kwargs_197303)
    
    # Applying the binary operator '+' (line 2063)
    result_add_197305 = python_operator(stypy.reporting.localization.Localization(__file__, 2063, 13), '+', str_197300, str_call_result_197304)
    
    str_197306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2063, 64), 'str', "'. Acceptable values are 'NATURAL', 'MMD_ATA', 'MMD_AT_PLUS_A', and 'COLAMD'. Reverting to default.")
    # Applying the binary operator '+' (line 2063)
    result_add_197307 = python_operator(stypy.reporting.localization.Localization(__file__, 2063, 62), '+', result_add_197305, str_197306)
    
    # Getting the type of 'OptimizeWarning' (line 2066)
    OptimizeWarning_197308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 13), 'OptimizeWarning', False)
    # Processing the call keyword arguments (line 2063)
    kwargs_197309 = {}
    # Getting the type of 'warn' (line 2063)
    warn_197299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2063, 8), 'warn', False)
    # Calling warn(args, kwargs) (line 2063)
    warn_call_result_197310 = invoke(stypy.reporting.localization.Localization(__file__, 2063, 8), warn_197299, *[result_add_197307, OptimizeWarning_197308], **kwargs_197309)
    
    
    # Assigning a Str to a Name (line 2067):
    
    # Assigning a Str to a Name (line 2067):
    str_197311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2067, 21), 'str', 'MMD_AT_PLUS_A')
    # Assigning a type to the variable 'permc_spec' (line 2067)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2067, 8), 'permc_spec', str_197311)
    # SSA join for if statement (line 2062)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'sym_pos' (line 2070)
    sym_pos_197312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2070, 11), 'sym_pos')
    # Applying the 'not' unary operator (line 2070)
    result_not__197313 = python_operator(stypy.reporting.localization.Localization(__file__, 2070, 7), 'not', sym_pos_197312)
    
    # Getting the type of 'cholesky' (line 2070)
    cholesky_197314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2070, 23), 'cholesky')
    # Applying the binary operator 'and' (line 2070)
    result_and_keyword_197315 = python_operator(stypy.reporting.localization.Localization(__file__, 2070, 7), 'and', result_not__197313, cholesky_197314)
    
    # Testing the type of an if condition (line 2070)
    if_condition_197316 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2070, 4), result_and_keyword_197315)
    # Assigning a type to the variable 'if_condition_197316' (line 2070)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2070, 4), 'if_condition_197316', if_condition_197316)
    # SSA begins for if statement (line 2070)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2071)
    # Processing the call arguments (line 2071)
    str_197318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2072, 12), 'str', "Invalid option combination 'sym_pos':False and 'cholesky':True: Cholesky decomposition is only possible for symmetric positive definite matrices.")
    # Processing the call keyword arguments (line 2071)
    kwargs_197319 = {}
    # Getting the type of 'ValueError' (line 2071)
    ValueError_197317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2071, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2071)
    ValueError_call_result_197320 = invoke(stypy.reporting.localization.Localization(__file__, 2071, 14), ValueError_197317, *[str_197318], **kwargs_197319)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2071, 8), ValueError_call_result_197320, 'raise parameter', BaseException)
    # SSA join for if statement (line 2070)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BoolOp to a Name (line 2076):
    
    # Assigning a BoolOp to a Name (line 2076):
    
    # Evaluating a boolean operation
    
    # Getting the type of 'cholesky' (line 2076)
    cholesky_197321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 15), 'cholesky')
    # Getting the type of 'None' (line 2076)
    None_197322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 27), 'None')
    # Applying the binary operator 'is' (line 2076)
    result_is__197323 = python_operator(stypy.reporting.localization.Localization(__file__, 2076, 15), 'is', cholesky_197321, None_197322)
    
    # Getting the type of 'sym_pos' (line 2076)
    sym_pos_197324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 36), 'sym_pos')
    # Applying the binary operator 'and' (line 2076)
    result_and_keyword_197325 = python_operator(stypy.reporting.localization.Localization(__file__, 2076, 15), 'and', result_is__197323, sym_pos_197324)
    
    # Getting the type of 'sparse' (line 2076)
    sparse_197326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 52), 'sparse')
    # Applying the 'not' unary operator (line 2076)
    result_not__197327 = python_operator(stypy.reporting.localization.Localization(__file__, 2076, 48), 'not', sparse_197326)
    
    # Applying the binary operator 'and' (line 2076)
    result_and_keyword_197328 = python_operator(stypy.reporting.localization.Localization(__file__, 2076, 15), 'and', result_and_keyword_197325, result_not__197327)
    
    # Getting the type of 'lstsq' (line 2076)
    lstsq_197329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 67), 'lstsq')
    # Applying the 'not' unary operator (line 2076)
    result_not__197330 = python_operator(stypy.reporting.localization.Localization(__file__, 2076, 63), 'not', lstsq_197329)
    
    # Applying the binary operator 'and' (line 2076)
    result_and_keyword_197331 = python_operator(stypy.reporting.localization.Localization(__file__, 2076, 15), 'and', result_and_keyword_197328, result_not__197330)
    
    # Assigning a type to the variable 'cholesky' (line 2076)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2076, 4), 'cholesky', result_and_keyword_197331)
    
    # Assigning a Num to a Name (line 2078):
    
    # Assigning a Num to a Name (line 2078):
    int_197332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2078, 16), 'int')
    # Assigning a type to the variable 'iteration' (line 2078)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2078, 4), 'iteration', int_197332)
    
    # Assigning a Name to a Name (line 2079):
    
    # Assigning a Name to a Name (line 2079):
    # Getting the type of 'False' (line 2079)
    False_197333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 15), 'False')
    # Assigning a type to the variable 'complete' (line 2079)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2079, 4), 'complete', False_197333)
    
    # Assigning a List to a Name (line 2080):
    
    # Assigning a List to a Name (line 2080):
    
    # Obtaining an instance of the builtin type 'list' (line 2080)
    list_197334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2080, 11), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2080)
    
    # Assigning a type to the variable 'undo' (line 2080)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2080, 4), 'undo', list_197334)
    
    # Assigning a Call to a Tuple (line 2083):
    
    # Assigning a Subscript to a Name (line 2083):
    
    # Obtaining the type of the subscript
    int_197335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2083, 4), 'int')
    
    # Call to _clean_inputs(...): (line 2083)
    # Processing the call arguments (line 2083)
    # Getting the type of 'c' (line 2084)
    c_197337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 8), 'c', False)
    # Getting the type of 'A_ub' (line 2084)
    A_ub_197338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 11), 'A_ub', False)
    # Getting the type of 'b_ub' (line 2084)
    b_ub_197339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 17), 'b_ub', False)
    # Getting the type of 'A_eq' (line 2084)
    A_eq_197340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 23), 'A_eq', False)
    # Getting the type of 'b_eq' (line 2084)
    b_eq_197341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 29), 'b_eq', False)
    # Getting the type of 'bounds' (line 2084)
    bounds_197342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 35), 'bounds', False)
    # Processing the call keyword arguments (line 2083)
    kwargs_197343 = {}
    # Getting the type of '_clean_inputs' (line 2083)
    _clean_inputs_197336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 40), '_clean_inputs', False)
    # Calling _clean_inputs(args, kwargs) (line 2083)
    _clean_inputs_call_result_197344 = invoke(stypy.reporting.localization.Localization(__file__, 2083, 40), _clean_inputs_197336, *[c_197337, A_ub_197338, b_ub_197339, A_eq_197340, b_eq_197341, bounds_197342], **kwargs_197343)
    
    # Obtaining the member '__getitem__' of a type (line 2083)
    getitem___197345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2083, 4), _clean_inputs_call_result_197344, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2083)
    subscript_call_result_197346 = invoke(stypy.reporting.localization.Localization(__file__, 2083, 4), getitem___197345, int_197335)
    
    # Assigning a type to the variable 'tuple_var_assignment_192631' (line 2083)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 4), 'tuple_var_assignment_192631', subscript_call_result_197346)
    
    # Assigning a Subscript to a Name (line 2083):
    
    # Obtaining the type of the subscript
    int_197347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2083, 4), 'int')
    
    # Call to _clean_inputs(...): (line 2083)
    # Processing the call arguments (line 2083)
    # Getting the type of 'c' (line 2084)
    c_197349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 8), 'c', False)
    # Getting the type of 'A_ub' (line 2084)
    A_ub_197350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 11), 'A_ub', False)
    # Getting the type of 'b_ub' (line 2084)
    b_ub_197351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 17), 'b_ub', False)
    # Getting the type of 'A_eq' (line 2084)
    A_eq_197352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 23), 'A_eq', False)
    # Getting the type of 'b_eq' (line 2084)
    b_eq_197353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 29), 'b_eq', False)
    # Getting the type of 'bounds' (line 2084)
    bounds_197354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 35), 'bounds', False)
    # Processing the call keyword arguments (line 2083)
    kwargs_197355 = {}
    # Getting the type of '_clean_inputs' (line 2083)
    _clean_inputs_197348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 40), '_clean_inputs', False)
    # Calling _clean_inputs(args, kwargs) (line 2083)
    _clean_inputs_call_result_197356 = invoke(stypy.reporting.localization.Localization(__file__, 2083, 40), _clean_inputs_197348, *[c_197349, A_ub_197350, b_ub_197351, A_eq_197352, b_eq_197353, bounds_197354], **kwargs_197355)
    
    # Obtaining the member '__getitem__' of a type (line 2083)
    getitem___197357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2083, 4), _clean_inputs_call_result_197356, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2083)
    subscript_call_result_197358 = invoke(stypy.reporting.localization.Localization(__file__, 2083, 4), getitem___197357, int_197347)
    
    # Assigning a type to the variable 'tuple_var_assignment_192632' (line 2083)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 4), 'tuple_var_assignment_192632', subscript_call_result_197358)
    
    # Assigning a Subscript to a Name (line 2083):
    
    # Obtaining the type of the subscript
    int_197359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2083, 4), 'int')
    
    # Call to _clean_inputs(...): (line 2083)
    # Processing the call arguments (line 2083)
    # Getting the type of 'c' (line 2084)
    c_197361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 8), 'c', False)
    # Getting the type of 'A_ub' (line 2084)
    A_ub_197362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 11), 'A_ub', False)
    # Getting the type of 'b_ub' (line 2084)
    b_ub_197363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 17), 'b_ub', False)
    # Getting the type of 'A_eq' (line 2084)
    A_eq_197364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 23), 'A_eq', False)
    # Getting the type of 'b_eq' (line 2084)
    b_eq_197365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 29), 'b_eq', False)
    # Getting the type of 'bounds' (line 2084)
    bounds_197366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 35), 'bounds', False)
    # Processing the call keyword arguments (line 2083)
    kwargs_197367 = {}
    # Getting the type of '_clean_inputs' (line 2083)
    _clean_inputs_197360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 40), '_clean_inputs', False)
    # Calling _clean_inputs(args, kwargs) (line 2083)
    _clean_inputs_call_result_197368 = invoke(stypy.reporting.localization.Localization(__file__, 2083, 40), _clean_inputs_197360, *[c_197361, A_ub_197362, b_ub_197363, A_eq_197364, b_eq_197365, bounds_197366], **kwargs_197367)
    
    # Obtaining the member '__getitem__' of a type (line 2083)
    getitem___197369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2083, 4), _clean_inputs_call_result_197368, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2083)
    subscript_call_result_197370 = invoke(stypy.reporting.localization.Localization(__file__, 2083, 4), getitem___197369, int_197359)
    
    # Assigning a type to the variable 'tuple_var_assignment_192633' (line 2083)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 4), 'tuple_var_assignment_192633', subscript_call_result_197370)
    
    # Assigning a Subscript to a Name (line 2083):
    
    # Obtaining the type of the subscript
    int_197371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2083, 4), 'int')
    
    # Call to _clean_inputs(...): (line 2083)
    # Processing the call arguments (line 2083)
    # Getting the type of 'c' (line 2084)
    c_197373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 8), 'c', False)
    # Getting the type of 'A_ub' (line 2084)
    A_ub_197374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 11), 'A_ub', False)
    # Getting the type of 'b_ub' (line 2084)
    b_ub_197375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 17), 'b_ub', False)
    # Getting the type of 'A_eq' (line 2084)
    A_eq_197376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 23), 'A_eq', False)
    # Getting the type of 'b_eq' (line 2084)
    b_eq_197377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 29), 'b_eq', False)
    # Getting the type of 'bounds' (line 2084)
    bounds_197378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 35), 'bounds', False)
    # Processing the call keyword arguments (line 2083)
    kwargs_197379 = {}
    # Getting the type of '_clean_inputs' (line 2083)
    _clean_inputs_197372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 40), '_clean_inputs', False)
    # Calling _clean_inputs(args, kwargs) (line 2083)
    _clean_inputs_call_result_197380 = invoke(stypy.reporting.localization.Localization(__file__, 2083, 40), _clean_inputs_197372, *[c_197373, A_ub_197374, b_ub_197375, A_eq_197376, b_eq_197377, bounds_197378], **kwargs_197379)
    
    # Obtaining the member '__getitem__' of a type (line 2083)
    getitem___197381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2083, 4), _clean_inputs_call_result_197380, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2083)
    subscript_call_result_197382 = invoke(stypy.reporting.localization.Localization(__file__, 2083, 4), getitem___197381, int_197371)
    
    # Assigning a type to the variable 'tuple_var_assignment_192634' (line 2083)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 4), 'tuple_var_assignment_192634', subscript_call_result_197382)
    
    # Assigning a Subscript to a Name (line 2083):
    
    # Obtaining the type of the subscript
    int_197383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2083, 4), 'int')
    
    # Call to _clean_inputs(...): (line 2083)
    # Processing the call arguments (line 2083)
    # Getting the type of 'c' (line 2084)
    c_197385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 8), 'c', False)
    # Getting the type of 'A_ub' (line 2084)
    A_ub_197386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 11), 'A_ub', False)
    # Getting the type of 'b_ub' (line 2084)
    b_ub_197387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 17), 'b_ub', False)
    # Getting the type of 'A_eq' (line 2084)
    A_eq_197388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 23), 'A_eq', False)
    # Getting the type of 'b_eq' (line 2084)
    b_eq_197389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 29), 'b_eq', False)
    # Getting the type of 'bounds' (line 2084)
    bounds_197390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 35), 'bounds', False)
    # Processing the call keyword arguments (line 2083)
    kwargs_197391 = {}
    # Getting the type of '_clean_inputs' (line 2083)
    _clean_inputs_197384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 40), '_clean_inputs', False)
    # Calling _clean_inputs(args, kwargs) (line 2083)
    _clean_inputs_call_result_197392 = invoke(stypy.reporting.localization.Localization(__file__, 2083, 40), _clean_inputs_197384, *[c_197385, A_ub_197386, b_ub_197387, A_eq_197388, b_eq_197389, bounds_197390], **kwargs_197391)
    
    # Obtaining the member '__getitem__' of a type (line 2083)
    getitem___197393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2083, 4), _clean_inputs_call_result_197392, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2083)
    subscript_call_result_197394 = invoke(stypy.reporting.localization.Localization(__file__, 2083, 4), getitem___197393, int_197383)
    
    # Assigning a type to the variable 'tuple_var_assignment_192635' (line 2083)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 4), 'tuple_var_assignment_192635', subscript_call_result_197394)
    
    # Assigning a Subscript to a Name (line 2083):
    
    # Obtaining the type of the subscript
    int_197395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2083, 4), 'int')
    
    # Call to _clean_inputs(...): (line 2083)
    # Processing the call arguments (line 2083)
    # Getting the type of 'c' (line 2084)
    c_197397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 8), 'c', False)
    # Getting the type of 'A_ub' (line 2084)
    A_ub_197398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 11), 'A_ub', False)
    # Getting the type of 'b_ub' (line 2084)
    b_ub_197399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 17), 'b_ub', False)
    # Getting the type of 'A_eq' (line 2084)
    A_eq_197400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 23), 'A_eq', False)
    # Getting the type of 'b_eq' (line 2084)
    b_eq_197401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 29), 'b_eq', False)
    # Getting the type of 'bounds' (line 2084)
    bounds_197402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 35), 'bounds', False)
    # Processing the call keyword arguments (line 2083)
    kwargs_197403 = {}
    # Getting the type of '_clean_inputs' (line 2083)
    _clean_inputs_197396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 40), '_clean_inputs', False)
    # Calling _clean_inputs(args, kwargs) (line 2083)
    _clean_inputs_call_result_197404 = invoke(stypy.reporting.localization.Localization(__file__, 2083, 40), _clean_inputs_197396, *[c_197397, A_ub_197398, b_ub_197399, A_eq_197400, b_eq_197401, bounds_197402], **kwargs_197403)
    
    # Obtaining the member '__getitem__' of a type (line 2083)
    getitem___197405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2083, 4), _clean_inputs_call_result_197404, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2083)
    subscript_call_result_197406 = invoke(stypy.reporting.localization.Localization(__file__, 2083, 4), getitem___197405, int_197395)
    
    # Assigning a type to the variable 'tuple_var_assignment_192636' (line 2083)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 4), 'tuple_var_assignment_192636', subscript_call_result_197406)
    
    # Assigning a Name to a Name (line 2083):
    # Getting the type of 'tuple_var_assignment_192631' (line 2083)
    tuple_var_assignment_192631_197407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 4), 'tuple_var_assignment_192631')
    # Assigning a type to the variable 'c' (line 2083)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 4), 'c', tuple_var_assignment_192631_197407)
    
    # Assigning a Name to a Name (line 2083):
    # Getting the type of 'tuple_var_assignment_192632' (line 2083)
    tuple_var_assignment_192632_197408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 4), 'tuple_var_assignment_192632')
    # Assigning a type to the variable 'A_ub' (line 2083)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 7), 'A_ub', tuple_var_assignment_192632_197408)
    
    # Assigning a Name to a Name (line 2083):
    # Getting the type of 'tuple_var_assignment_192633' (line 2083)
    tuple_var_assignment_192633_197409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 4), 'tuple_var_assignment_192633')
    # Assigning a type to the variable 'b_ub' (line 2083)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 13), 'b_ub', tuple_var_assignment_192633_197409)
    
    # Assigning a Name to a Name (line 2083):
    # Getting the type of 'tuple_var_assignment_192634' (line 2083)
    tuple_var_assignment_192634_197410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 4), 'tuple_var_assignment_192634')
    # Assigning a type to the variable 'A_eq' (line 2083)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 19), 'A_eq', tuple_var_assignment_192634_197410)
    
    # Assigning a Name to a Name (line 2083):
    # Getting the type of 'tuple_var_assignment_192635' (line 2083)
    tuple_var_assignment_192635_197411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 4), 'tuple_var_assignment_192635')
    # Assigning a type to the variable 'b_eq' (line 2083)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 25), 'b_eq', tuple_var_assignment_192635_197411)
    
    # Assigning a Name to a Name (line 2083):
    # Getting the type of 'tuple_var_assignment_192636' (line 2083)
    tuple_var_assignment_192636_197412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 4), 'tuple_var_assignment_192636')
    # Assigning a type to the variable 'bounds' (line 2083)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 31), 'bounds', tuple_var_assignment_192636_197412)
    
    # Assigning a Tuple to a Tuple (line 2088):
    
    # Assigning a Call to a Name (line 2088):
    
    # Call to copy(...): (line 2088)
    # Processing the call keyword arguments (line 2088)
    kwargs_197415 = {}
    # Getting the type of 'c' (line 2088)
    c_197413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 42), 'c', False)
    # Obtaining the member 'copy' of a type (line 2088)
    copy_197414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2088, 42), c_197413, 'copy')
    # Calling copy(args, kwargs) (line 2088)
    copy_call_result_197416 = invoke(stypy.reporting.localization.Localization(__file__, 2088, 42), copy_197414, *[], **kwargs_197415)
    
    # Assigning a type to the variable 'tuple_assignment_192637' (line 2088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2088, 4), 'tuple_assignment_192637', copy_call_result_197416)
    
    # Assigning a Call to a Name (line 2088):
    
    # Call to copy(...): (line 2089)
    # Processing the call keyword arguments (line 2089)
    kwargs_197419 = {}
    # Getting the type of 'A_ub' (line 2089)
    A_ub_197417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 7), 'A_ub', False)
    # Obtaining the member 'copy' of a type (line 2089)
    copy_197418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2089, 7), A_ub_197417, 'copy')
    # Calling copy(args, kwargs) (line 2089)
    copy_call_result_197420 = invoke(stypy.reporting.localization.Localization(__file__, 2089, 7), copy_197418, *[], **kwargs_197419)
    
    # Assigning a type to the variable 'tuple_assignment_192638' (line 2088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2088, 4), 'tuple_assignment_192638', copy_call_result_197420)
    
    # Assigning a Call to a Name (line 2088):
    
    # Call to copy(...): (line 2089)
    # Processing the call keyword arguments (line 2089)
    kwargs_197423 = {}
    # Getting the type of 'b_ub' (line 2089)
    b_ub_197421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 20), 'b_ub', False)
    # Obtaining the member 'copy' of a type (line 2089)
    copy_197422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2089, 20), b_ub_197421, 'copy')
    # Calling copy(args, kwargs) (line 2089)
    copy_call_result_197424 = invoke(stypy.reporting.localization.Localization(__file__, 2089, 20), copy_197422, *[], **kwargs_197423)
    
    # Assigning a type to the variable 'tuple_assignment_192639' (line 2088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2088, 4), 'tuple_assignment_192639', copy_call_result_197424)
    
    # Assigning a Call to a Name (line 2088):
    
    # Call to copy(...): (line 2089)
    # Processing the call keyword arguments (line 2089)
    kwargs_197427 = {}
    # Getting the type of 'A_eq' (line 2089)
    A_eq_197425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 33), 'A_eq', False)
    # Obtaining the member 'copy' of a type (line 2089)
    copy_197426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2089, 33), A_eq_197425, 'copy')
    # Calling copy(args, kwargs) (line 2089)
    copy_call_result_197428 = invoke(stypy.reporting.localization.Localization(__file__, 2089, 33), copy_197426, *[], **kwargs_197427)
    
    # Assigning a type to the variable 'tuple_assignment_192640' (line 2088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2088, 4), 'tuple_assignment_192640', copy_call_result_197428)
    
    # Assigning a Call to a Name (line 2088):
    
    # Call to copy(...): (line 2089)
    # Processing the call keyword arguments (line 2089)
    kwargs_197431 = {}
    # Getting the type of 'b_eq' (line 2089)
    b_eq_197429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 46), 'b_eq', False)
    # Obtaining the member 'copy' of a type (line 2089)
    copy_197430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2089, 46), b_eq_197429, 'copy')
    # Calling copy(args, kwargs) (line 2089)
    copy_call_result_197432 = invoke(stypy.reporting.localization.Localization(__file__, 2089, 46), copy_197430, *[], **kwargs_197431)
    
    # Assigning a type to the variable 'tuple_assignment_192641' (line 2088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2088, 4), 'tuple_assignment_192641', copy_call_result_197432)
    
    # Assigning a Name to a Name (line 2088):
    # Getting the type of 'tuple_assignment_192637' (line 2088)
    tuple_assignment_192637_197433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 4), 'tuple_assignment_192637')
    # Assigning a type to the variable 'c_o' (line 2088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2088, 4), 'c_o', tuple_assignment_192637_197433)
    
    # Assigning a Name to a Name (line 2088):
    # Getting the type of 'tuple_assignment_192638' (line 2088)
    tuple_assignment_192638_197434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 4), 'tuple_assignment_192638')
    # Assigning a type to the variable 'A_ub_o' (line 2088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2088, 9), 'A_ub_o', tuple_assignment_192638_197434)
    
    # Assigning a Name to a Name (line 2088):
    # Getting the type of 'tuple_assignment_192639' (line 2088)
    tuple_assignment_192639_197435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 4), 'tuple_assignment_192639')
    # Assigning a type to the variable 'b_ub_o' (line 2088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2088, 17), 'b_ub_o', tuple_assignment_192639_197435)
    
    # Assigning a Name to a Name (line 2088):
    # Getting the type of 'tuple_assignment_192640' (line 2088)
    tuple_assignment_192640_197436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 4), 'tuple_assignment_192640')
    # Assigning a type to the variable 'A_eq_o' (line 2088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2088, 25), 'A_eq_o', tuple_assignment_192640_197436)
    
    # Assigning a Name to a Name (line 2088):
    # Getting the type of 'tuple_assignment_192641' (line 2088)
    tuple_assignment_192641_197437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 4), 'tuple_assignment_192641')
    # Assigning a type to the variable 'b_eq_o' (line 2088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2088, 33), 'b_eq_o', tuple_assignment_192641_197437)
    
    # Assigning a Num to a Name (line 2092):
    
    # Assigning a Num to a Name (line 2092):
    int_197438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2092, 9), 'int')
    # Assigning a type to the variable 'c0' (line 2092)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2092, 4), 'c0', int_197438)
    
    
    # Getting the type of 'presolve' (line 2093)
    presolve_197439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2093, 7), 'presolve')
    # Getting the type of 'True' (line 2093)
    True_197440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2093, 19), 'True')
    # Applying the binary operator 'is' (line 2093)
    result_is__197441 = python_operator(stypy.reporting.localization.Localization(__file__, 2093, 7), 'is', presolve_197439, True_197440)
    
    # Testing the type of an if condition (line 2093)
    if_condition_197442 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2093, 4), result_is__197441)
    # Assigning a type to the variable 'if_condition_197442' (line 2093)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2093, 4), 'if_condition_197442', if_condition_197442)
    # SSA begins for if statement (line 2093)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 2094):
    
    # Assigning a Subscript to a Name (line 2094):
    
    # Obtaining the type of the subscript
    int_197443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2094, 8), 'int')
    
    # Call to _presolve(...): (line 2095)
    # Processing the call arguments (line 2095)
    # Getting the type of 'c' (line 2095)
    c_197445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 33), 'c', False)
    # Getting the type of 'A_ub' (line 2095)
    A_ub_197446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 36), 'A_ub', False)
    # Getting the type of 'b_ub' (line 2095)
    b_ub_197447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 42), 'b_ub', False)
    # Getting the type of 'A_eq' (line 2095)
    A_eq_197448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 48), 'A_eq', False)
    # Getting the type of 'b_eq' (line 2095)
    b_eq_197449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 54), 'b_eq', False)
    # Getting the type of 'bounds' (line 2095)
    bounds_197450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 60), 'bounds', False)
    # Getting the type of 'rr' (line 2095)
    rr_197451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 68), 'rr', False)
    # Processing the call keyword arguments (line 2095)
    kwargs_197452 = {}
    # Getting the type of '_presolve' (line 2095)
    _presolve_197444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 23), '_presolve', False)
    # Calling _presolve(args, kwargs) (line 2095)
    _presolve_call_result_197453 = invoke(stypy.reporting.localization.Localization(__file__, 2095, 23), _presolve_197444, *[c_197445, A_ub_197446, b_ub_197447, A_eq_197448, b_eq_197449, bounds_197450, rr_197451], **kwargs_197452)
    
    # Obtaining the member '__getitem__' of a type (line 2094)
    getitem___197454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2094, 8), _presolve_call_result_197453, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2094)
    subscript_call_result_197455 = invoke(stypy.reporting.localization.Localization(__file__, 2094, 8), getitem___197454, int_197443)
    
    # Assigning a type to the variable 'tuple_var_assignment_192642' (line 2094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192642', subscript_call_result_197455)
    
    # Assigning a Subscript to a Name (line 2094):
    
    # Obtaining the type of the subscript
    int_197456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2094, 8), 'int')
    
    # Call to _presolve(...): (line 2095)
    # Processing the call arguments (line 2095)
    # Getting the type of 'c' (line 2095)
    c_197458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 33), 'c', False)
    # Getting the type of 'A_ub' (line 2095)
    A_ub_197459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 36), 'A_ub', False)
    # Getting the type of 'b_ub' (line 2095)
    b_ub_197460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 42), 'b_ub', False)
    # Getting the type of 'A_eq' (line 2095)
    A_eq_197461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 48), 'A_eq', False)
    # Getting the type of 'b_eq' (line 2095)
    b_eq_197462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 54), 'b_eq', False)
    # Getting the type of 'bounds' (line 2095)
    bounds_197463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 60), 'bounds', False)
    # Getting the type of 'rr' (line 2095)
    rr_197464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 68), 'rr', False)
    # Processing the call keyword arguments (line 2095)
    kwargs_197465 = {}
    # Getting the type of '_presolve' (line 2095)
    _presolve_197457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 23), '_presolve', False)
    # Calling _presolve(args, kwargs) (line 2095)
    _presolve_call_result_197466 = invoke(stypy.reporting.localization.Localization(__file__, 2095, 23), _presolve_197457, *[c_197458, A_ub_197459, b_ub_197460, A_eq_197461, b_eq_197462, bounds_197463, rr_197464], **kwargs_197465)
    
    # Obtaining the member '__getitem__' of a type (line 2094)
    getitem___197467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2094, 8), _presolve_call_result_197466, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2094)
    subscript_call_result_197468 = invoke(stypy.reporting.localization.Localization(__file__, 2094, 8), getitem___197467, int_197456)
    
    # Assigning a type to the variable 'tuple_var_assignment_192643' (line 2094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192643', subscript_call_result_197468)
    
    # Assigning a Subscript to a Name (line 2094):
    
    # Obtaining the type of the subscript
    int_197469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2094, 8), 'int')
    
    # Call to _presolve(...): (line 2095)
    # Processing the call arguments (line 2095)
    # Getting the type of 'c' (line 2095)
    c_197471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 33), 'c', False)
    # Getting the type of 'A_ub' (line 2095)
    A_ub_197472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 36), 'A_ub', False)
    # Getting the type of 'b_ub' (line 2095)
    b_ub_197473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 42), 'b_ub', False)
    # Getting the type of 'A_eq' (line 2095)
    A_eq_197474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 48), 'A_eq', False)
    # Getting the type of 'b_eq' (line 2095)
    b_eq_197475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 54), 'b_eq', False)
    # Getting the type of 'bounds' (line 2095)
    bounds_197476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 60), 'bounds', False)
    # Getting the type of 'rr' (line 2095)
    rr_197477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 68), 'rr', False)
    # Processing the call keyword arguments (line 2095)
    kwargs_197478 = {}
    # Getting the type of '_presolve' (line 2095)
    _presolve_197470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 23), '_presolve', False)
    # Calling _presolve(args, kwargs) (line 2095)
    _presolve_call_result_197479 = invoke(stypy.reporting.localization.Localization(__file__, 2095, 23), _presolve_197470, *[c_197471, A_ub_197472, b_ub_197473, A_eq_197474, b_eq_197475, bounds_197476, rr_197477], **kwargs_197478)
    
    # Obtaining the member '__getitem__' of a type (line 2094)
    getitem___197480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2094, 8), _presolve_call_result_197479, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2094)
    subscript_call_result_197481 = invoke(stypy.reporting.localization.Localization(__file__, 2094, 8), getitem___197480, int_197469)
    
    # Assigning a type to the variable 'tuple_var_assignment_192644' (line 2094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192644', subscript_call_result_197481)
    
    # Assigning a Subscript to a Name (line 2094):
    
    # Obtaining the type of the subscript
    int_197482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2094, 8), 'int')
    
    # Call to _presolve(...): (line 2095)
    # Processing the call arguments (line 2095)
    # Getting the type of 'c' (line 2095)
    c_197484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 33), 'c', False)
    # Getting the type of 'A_ub' (line 2095)
    A_ub_197485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 36), 'A_ub', False)
    # Getting the type of 'b_ub' (line 2095)
    b_ub_197486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 42), 'b_ub', False)
    # Getting the type of 'A_eq' (line 2095)
    A_eq_197487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 48), 'A_eq', False)
    # Getting the type of 'b_eq' (line 2095)
    b_eq_197488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 54), 'b_eq', False)
    # Getting the type of 'bounds' (line 2095)
    bounds_197489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 60), 'bounds', False)
    # Getting the type of 'rr' (line 2095)
    rr_197490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 68), 'rr', False)
    # Processing the call keyword arguments (line 2095)
    kwargs_197491 = {}
    # Getting the type of '_presolve' (line 2095)
    _presolve_197483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 23), '_presolve', False)
    # Calling _presolve(args, kwargs) (line 2095)
    _presolve_call_result_197492 = invoke(stypy.reporting.localization.Localization(__file__, 2095, 23), _presolve_197483, *[c_197484, A_ub_197485, b_ub_197486, A_eq_197487, b_eq_197488, bounds_197489, rr_197490], **kwargs_197491)
    
    # Obtaining the member '__getitem__' of a type (line 2094)
    getitem___197493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2094, 8), _presolve_call_result_197492, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2094)
    subscript_call_result_197494 = invoke(stypy.reporting.localization.Localization(__file__, 2094, 8), getitem___197493, int_197482)
    
    # Assigning a type to the variable 'tuple_var_assignment_192645' (line 2094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192645', subscript_call_result_197494)
    
    # Assigning a Subscript to a Name (line 2094):
    
    # Obtaining the type of the subscript
    int_197495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2094, 8), 'int')
    
    # Call to _presolve(...): (line 2095)
    # Processing the call arguments (line 2095)
    # Getting the type of 'c' (line 2095)
    c_197497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 33), 'c', False)
    # Getting the type of 'A_ub' (line 2095)
    A_ub_197498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 36), 'A_ub', False)
    # Getting the type of 'b_ub' (line 2095)
    b_ub_197499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 42), 'b_ub', False)
    # Getting the type of 'A_eq' (line 2095)
    A_eq_197500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 48), 'A_eq', False)
    # Getting the type of 'b_eq' (line 2095)
    b_eq_197501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 54), 'b_eq', False)
    # Getting the type of 'bounds' (line 2095)
    bounds_197502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 60), 'bounds', False)
    # Getting the type of 'rr' (line 2095)
    rr_197503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 68), 'rr', False)
    # Processing the call keyword arguments (line 2095)
    kwargs_197504 = {}
    # Getting the type of '_presolve' (line 2095)
    _presolve_197496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 23), '_presolve', False)
    # Calling _presolve(args, kwargs) (line 2095)
    _presolve_call_result_197505 = invoke(stypy.reporting.localization.Localization(__file__, 2095, 23), _presolve_197496, *[c_197497, A_ub_197498, b_ub_197499, A_eq_197500, b_eq_197501, bounds_197502, rr_197503], **kwargs_197504)
    
    # Obtaining the member '__getitem__' of a type (line 2094)
    getitem___197506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2094, 8), _presolve_call_result_197505, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2094)
    subscript_call_result_197507 = invoke(stypy.reporting.localization.Localization(__file__, 2094, 8), getitem___197506, int_197495)
    
    # Assigning a type to the variable 'tuple_var_assignment_192646' (line 2094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192646', subscript_call_result_197507)
    
    # Assigning a Subscript to a Name (line 2094):
    
    # Obtaining the type of the subscript
    int_197508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2094, 8), 'int')
    
    # Call to _presolve(...): (line 2095)
    # Processing the call arguments (line 2095)
    # Getting the type of 'c' (line 2095)
    c_197510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 33), 'c', False)
    # Getting the type of 'A_ub' (line 2095)
    A_ub_197511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 36), 'A_ub', False)
    # Getting the type of 'b_ub' (line 2095)
    b_ub_197512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 42), 'b_ub', False)
    # Getting the type of 'A_eq' (line 2095)
    A_eq_197513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 48), 'A_eq', False)
    # Getting the type of 'b_eq' (line 2095)
    b_eq_197514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 54), 'b_eq', False)
    # Getting the type of 'bounds' (line 2095)
    bounds_197515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 60), 'bounds', False)
    # Getting the type of 'rr' (line 2095)
    rr_197516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 68), 'rr', False)
    # Processing the call keyword arguments (line 2095)
    kwargs_197517 = {}
    # Getting the type of '_presolve' (line 2095)
    _presolve_197509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 23), '_presolve', False)
    # Calling _presolve(args, kwargs) (line 2095)
    _presolve_call_result_197518 = invoke(stypy.reporting.localization.Localization(__file__, 2095, 23), _presolve_197509, *[c_197510, A_ub_197511, b_ub_197512, A_eq_197513, b_eq_197514, bounds_197515, rr_197516], **kwargs_197517)
    
    # Obtaining the member '__getitem__' of a type (line 2094)
    getitem___197519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2094, 8), _presolve_call_result_197518, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2094)
    subscript_call_result_197520 = invoke(stypy.reporting.localization.Localization(__file__, 2094, 8), getitem___197519, int_197508)
    
    # Assigning a type to the variable 'tuple_var_assignment_192647' (line 2094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192647', subscript_call_result_197520)
    
    # Assigning a Subscript to a Name (line 2094):
    
    # Obtaining the type of the subscript
    int_197521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2094, 8), 'int')
    
    # Call to _presolve(...): (line 2095)
    # Processing the call arguments (line 2095)
    # Getting the type of 'c' (line 2095)
    c_197523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 33), 'c', False)
    # Getting the type of 'A_ub' (line 2095)
    A_ub_197524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 36), 'A_ub', False)
    # Getting the type of 'b_ub' (line 2095)
    b_ub_197525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 42), 'b_ub', False)
    # Getting the type of 'A_eq' (line 2095)
    A_eq_197526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 48), 'A_eq', False)
    # Getting the type of 'b_eq' (line 2095)
    b_eq_197527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 54), 'b_eq', False)
    # Getting the type of 'bounds' (line 2095)
    bounds_197528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 60), 'bounds', False)
    # Getting the type of 'rr' (line 2095)
    rr_197529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 68), 'rr', False)
    # Processing the call keyword arguments (line 2095)
    kwargs_197530 = {}
    # Getting the type of '_presolve' (line 2095)
    _presolve_197522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 23), '_presolve', False)
    # Calling _presolve(args, kwargs) (line 2095)
    _presolve_call_result_197531 = invoke(stypy.reporting.localization.Localization(__file__, 2095, 23), _presolve_197522, *[c_197523, A_ub_197524, b_ub_197525, A_eq_197526, b_eq_197527, bounds_197528, rr_197529], **kwargs_197530)
    
    # Obtaining the member '__getitem__' of a type (line 2094)
    getitem___197532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2094, 8), _presolve_call_result_197531, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2094)
    subscript_call_result_197533 = invoke(stypy.reporting.localization.Localization(__file__, 2094, 8), getitem___197532, int_197521)
    
    # Assigning a type to the variable 'tuple_var_assignment_192648' (line 2094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192648', subscript_call_result_197533)
    
    # Assigning a Subscript to a Name (line 2094):
    
    # Obtaining the type of the subscript
    int_197534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2094, 8), 'int')
    
    # Call to _presolve(...): (line 2095)
    # Processing the call arguments (line 2095)
    # Getting the type of 'c' (line 2095)
    c_197536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 33), 'c', False)
    # Getting the type of 'A_ub' (line 2095)
    A_ub_197537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 36), 'A_ub', False)
    # Getting the type of 'b_ub' (line 2095)
    b_ub_197538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 42), 'b_ub', False)
    # Getting the type of 'A_eq' (line 2095)
    A_eq_197539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 48), 'A_eq', False)
    # Getting the type of 'b_eq' (line 2095)
    b_eq_197540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 54), 'b_eq', False)
    # Getting the type of 'bounds' (line 2095)
    bounds_197541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 60), 'bounds', False)
    # Getting the type of 'rr' (line 2095)
    rr_197542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 68), 'rr', False)
    # Processing the call keyword arguments (line 2095)
    kwargs_197543 = {}
    # Getting the type of '_presolve' (line 2095)
    _presolve_197535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 23), '_presolve', False)
    # Calling _presolve(args, kwargs) (line 2095)
    _presolve_call_result_197544 = invoke(stypy.reporting.localization.Localization(__file__, 2095, 23), _presolve_197535, *[c_197536, A_ub_197537, b_ub_197538, A_eq_197539, b_eq_197540, bounds_197541, rr_197542], **kwargs_197543)
    
    # Obtaining the member '__getitem__' of a type (line 2094)
    getitem___197545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2094, 8), _presolve_call_result_197544, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2094)
    subscript_call_result_197546 = invoke(stypy.reporting.localization.Localization(__file__, 2094, 8), getitem___197545, int_197534)
    
    # Assigning a type to the variable 'tuple_var_assignment_192649' (line 2094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192649', subscript_call_result_197546)
    
    # Assigning a Subscript to a Name (line 2094):
    
    # Obtaining the type of the subscript
    int_197547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2094, 8), 'int')
    
    # Call to _presolve(...): (line 2095)
    # Processing the call arguments (line 2095)
    # Getting the type of 'c' (line 2095)
    c_197549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 33), 'c', False)
    # Getting the type of 'A_ub' (line 2095)
    A_ub_197550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 36), 'A_ub', False)
    # Getting the type of 'b_ub' (line 2095)
    b_ub_197551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 42), 'b_ub', False)
    # Getting the type of 'A_eq' (line 2095)
    A_eq_197552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 48), 'A_eq', False)
    # Getting the type of 'b_eq' (line 2095)
    b_eq_197553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 54), 'b_eq', False)
    # Getting the type of 'bounds' (line 2095)
    bounds_197554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 60), 'bounds', False)
    # Getting the type of 'rr' (line 2095)
    rr_197555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 68), 'rr', False)
    # Processing the call keyword arguments (line 2095)
    kwargs_197556 = {}
    # Getting the type of '_presolve' (line 2095)
    _presolve_197548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 23), '_presolve', False)
    # Calling _presolve(args, kwargs) (line 2095)
    _presolve_call_result_197557 = invoke(stypy.reporting.localization.Localization(__file__, 2095, 23), _presolve_197548, *[c_197549, A_ub_197550, b_ub_197551, A_eq_197552, b_eq_197553, bounds_197554, rr_197555], **kwargs_197556)
    
    # Obtaining the member '__getitem__' of a type (line 2094)
    getitem___197558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2094, 8), _presolve_call_result_197557, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2094)
    subscript_call_result_197559 = invoke(stypy.reporting.localization.Localization(__file__, 2094, 8), getitem___197558, int_197547)
    
    # Assigning a type to the variable 'tuple_var_assignment_192650' (line 2094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192650', subscript_call_result_197559)
    
    # Assigning a Subscript to a Name (line 2094):
    
    # Obtaining the type of the subscript
    int_197560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2094, 8), 'int')
    
    # Call to _presolve(...): (line 2095)
    # Processing the call arguments (line 2095)
    # Getting the type of 'c' (line 2095)
    c_197562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 33), 'c', False)
    # Getting the type of 'A_ub' (line 2095)
    A_ub_197563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 36), 'A_ub', False)
    # Getting the type of 'b_ub' (line 2095)
    b_ub_197564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 42), 'b_ub', False)
    # Getting the type of 'A_eq' (line 2095)
    A_eq_197565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 48), 'A_eq', False)
    # Getting the type of 'b_eq' (line 2095)
    b_eq_197566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 54), 'b_eq', False)
    # Getting the type of 'bounds' (line 2095)
    bounds_197567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 60), 'bounds', False)
    # Getting the type of 'rr' (line 2095)
    rr_197568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 68), 'rr', False)
    # Processing the call keyword arguments (line 2095)
    kwargs_197569 = {}
    # Getting the type of '_presolve' (line 2095)
    _presolve_197561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 23), '_presolve', False)
    # Calling _presolve(args, kwargs) (line 2095)
    _presolve_call_result_197570 = invoke(stypy.reporting.localization.Localization(__file__, 2095, 23), _presolve_197561, *[c_197562, A_ub_197563, b_ub_197564, A_eq_197565, b_eq_197566, bounds_197567, rr_197568], **kwargs_197569)
    
    # Obtaining the member '__getitem__' of a type (line 2094)
    getitem___197571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2094, 8), _presolve_call_result_197570, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2094)
    subscript_call_result_197572 = invoke(stypy.reporting.localization.Localization(__file__, 2094, 8), getitem___197571, int_197560)
    
    # Assigning a type to the variable 'tuple_var_assignment_192651' (line 2094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192651', subscript_call_result_197572)
    
    # Assigning a Subscript to a Name (line 2094):
    
    # Obtaining the type of the subscript
    int_197573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2094, 8), 'int')
    
    # Call to _presolve(...): (line 2095)
    # Processing the call arguments (line 2095)
    # Getting the type of 'c' (line 2095)
    c_197575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 33), 'c', False)
    # Getting the type of 'A_ub' (line 2095)
    A_ub_197576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 36), 'A_ub', False)
    # Getting the type of 'b_ub' (line 2095)
    b_ub_197577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 42), 'b_ub', False)
    # Getting the type of 'A_eq' (line 2095)
    A_eq_197578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 48), 'A_eq', False)
    # Getting the type of 'b_eq' (line 2095)
    b_eq_197579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 54), 'b_eq', False)
    # Getting the type of 'bounds' (line 2095)
    bounds_197580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 60), 'bounds', False)
    # Getting the type of 'rr' (line 2095)
    rr_197581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 68), 'rr', False)
    # Processing the call keyword arguments (line 2095)
    kwargs_197582 = {}
    # Getting the type of '_presolve' (line 2095)
    _presolve_197574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 23), '_presolve', False)
    # Calling _presolve(args, kwargs) (line 2095)
    _presolve_call_result_197583 = invoke(stypy.reporting.localization.Localization(__file__, 2095, 23), _presolve_197574, *[c_197575, A_ub_197576, b_ub_197577, A_eq_197578, b_eq_197579, bounds_197580, rr_197581], **kwargs_197582)
    
    # Obtaining the member '__getitem__' of a type (line 2094)
    getitem___197584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2094, 8), _presolve_call_result_197583, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2094)
    subscript_call_result_197585 = invoke(stypy.reporting.localization.Localization(__file__, 2094, 8), getitem___197584, int_197573)
    
    # Assigning a type to the variable 'tuple_var_assignment_192652' (line 2094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192652', subscript_call_result_197585)
    
    # Assigning a Subscript to a Name (line 2094):
    
    # Obtaining the type of the subscript
    int_197586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2094, 8), 'int')
    
    # Call to _presolve(...): (line 2095)
    # Processing the call arguments (line 2095)
    # Getting the type of 'c' (line 2095)
    c_197588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 33), 'c', False)
    # Getting the type of 'A_ub' (line 2095)
    A_ub_197589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 36), 'A_ub', False)
    # Getting the type of 'b_ub' (line 2095)
    b_ub_197590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 42), 'b_ub', False)
    # Getting the type of 'A_eq' (line 2095)
    A_eq_197591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 48), 'A_eq', False)
    # Getting the type of 'b_eq' (line 2095)
    b_eq_197592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 54), 'b_eq', False)
    # Getting the type of 'bounds' (line 2095)
    bounds_197593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 60), 'bounds', False)
    # Getting the type of 'rr' (line 2095)
    rr_197594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 68), 'rr', False)
    # Processing the call keyword arguments (line 2095)
    kwargs_197595 = {}
    # Getting the type of '_presolve' (line 2095)
    _presolve_197587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 23), '_presolve', False)
    # Calling _presolve(args, kwargs) (line 2095)
    _presolve_call_result_197596 = invoke(stypy.reporting.localization.Localization(__file__, 2095, 23), _presolve_197587, *[c_197588, A_ub_197589, b_ub_197590, A_eq_197591, b_eq_197592, bounds_197593, rr_197594], **kwargs_197595)
    
    # Obtaining the member '__getitem__' of a type (line 2094)
    getitem___197597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2094, 8), _presolve_call_result_197596, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2094)
    subscript_call_result_197598 = invoke(stypy.reporting.localization.Localization(__file__, 2094, 8), getitem___197597, int_197586)
    
    # Assigning a type to the variable 'tuple_var_assignment_192653' (line 2094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192653', subscript_call_result_197598)
    
    # Assigning a Name to a Name (line 2094):
    # Getting the type of 'tuple_var_assignment_192642' (line 2094)
    tuple_var_assignment_192642_197599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192642')
    # Assigning a type to the variable 'c' (line 2094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 9), 'c', tuple_var_assignment_192642_197599)
    
    # Assigning a Name to a Name (line 2094):
    # Getting the type of 'tuple_var_assignment_192643' (line 2094)
    tuple_var_assignment_192643_197600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192643')
    # Assigning a type to the variable 'c0' (line 2094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 12), 'c0', tuple_var_assignment_192643_197600)
    
    # Assigning a Name to a Name (line 2094):
    # Getting the type of 'tuple_var_assignment_192644' (line 2094)
    tuple_var_assignment_192644_197601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192644')
    # Assigning a type to the variable 'A_ub' (line 2094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 16), 'A_ub', tuple_var_assignment_192644_197601)
    
    # Assigning a Name to a Name (line 2094):
    # Getting the type of 'tuple_var_assignment_192645' (line 2094)
    tuple_var_assignment_192645_197602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192645')
    # Assigning a type to the variable 'b_ub' (line 2094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 22), 'b_ub', tuple_var_assignment_192645_197602)
    
    # Assigning a Name to a Name (line 2094):
    # Getting the type of 'tuple_var_assignment_192646' (line 2094)
    tuple_var_assignment_192646_197603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192646')
    # Assigning a type to the variable 'A_eq' (line 2094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 28), 'A_eq', tuple_var_assignment_192646_197603)
    
    # Assigning a Name to a Name (line 2094):
    # Getting the type of 'tuple_var_assignment_192647' (line 2094)
    tuple_var_assignment_192647_197604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192647')
    # Assigning a type to the variable 'b_eq' (line 2094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 34), 'b_eq', tuple_var_assignment_192647_197604)
    
    # Assigning a Name to a Name (line 2094):
    # Getting the type of 'tuple_var_assignment_192648' (line 2094)
    tuple_var_assignment_192648_197605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192648')
    # Assigning a type to the variable 'bounds' (line 2094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 40), 'bounds', tuple_var_assignment_192648_197605)
    
    # Assigning a Name to a Name (line 2094):
    # Getting the type of 'tuple_var_assignment_192649' (line 2094)
    tuple_var_assignment_192649_197606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192649')
    # Assigning a type to the variable 'x' (line 2094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 48), 'x', tuple_var_assignment_192649_197606)
    
    # Assigning a Name to a Name (line 2094):
    # Getting the type of 'tuple_var_assignment_192650' (line 2094)
    tuple_var_assignment_192650_197607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192650')
    # Assigning a type to the variable 'undo' (line 2094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 51), 'undo', tuple_var_assignment_192650_197607)
    
    # Assigning a Name to a Name (line 2094):
    # Getting the type of 'tuple_var_assignment_192651' (line 2094)
    tuple_var_assignment_192651_197608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192651')
    # Assigning a type to the variable 'complete' (line 2094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 57), 'complete', tuple_var_assignment_192651_197608)
    
    # Assigning a Name to a Name (line 2094):
    # Getting the type of 'tuple_var_assignment_192652' (line 2094)
    tuple_var_assignment_192652_197609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192652')
    # Assigning a type to the variable 'status' (line 2094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 67), 'status', tuple_var_assignment_192652_197609)
    
    # Assigning a Name to a Name (line 2094):
    # Getting the type of 'tuple_var_assignment_192653' (line 2094)
    tuple_var_assignment_192653_197610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'tuple_var_assignment_192653')
    # Assigning a type to the variable 'message' (line 2095)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2095, 12), 'message', tuple_var_assignment_192653_197610)
    # SSA join for if statement (line 2093)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'complete' (line 2098)
    complete_197611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2098, 11), 'complete')
    # Applying the 'not' unary operator (line 2098)
    result_not__197612 = python_operator(stypy.reporting.localization.Localization(__file__, 2098, 7), 'not', complete_197611)
    
    # Testing the type of an if condition (line 2098)
    if_condition_197613 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2098, 4), result_not__197612)
    # Assigning a type to the variable 'if_condition_197613' (line 2098)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2098, 4), 'if_condition_197613', if_condition_197613)
    # SSA begins for if statement (line 2098)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 2100):
    
    # Assigning a Subscript to a Name (line 2100):
    
    # Obtaining the type of the subscript
    int_197614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2100, 8), 'int')
    
    # Call to _get_Abc(...): (line 2100)
    # Processing the call arguments (line 2100)
    # Getting the type of 'c' (line 2100)
    c_197616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 31), 'c', False)
    # Getting the type of 'c0' (line 2100)
    c0_197617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 34), 'c0', False)
    # Getting the type of 'A_ub' (line 2100)
    A_ub_197618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 38), 'A_ub', False)
    # Getting the type of 'b_ub' (line 2100)
    b_ub_197619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 44), 'b_ub', False)
    # Getting the type of 'A_eq' (line 2100)
    A_eq_197620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 50), 'A_eq', False)
    # Getting the type of 'b_eq' (line 2100)
    b_eq_197621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 56), 'b_eq', False)
    # Getting the type of 'bounds' (line 2100)
    bounds_197622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 62), 'bounds', False)
    # Getting the type of 'undo' (line 2100)
    undo_197623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 70), 'undo', False)
    # Processing the call keyword arguments (line 2100)
    kwargs_197624 = {}
    # Getting the type of '_get_Abc' (line 2100)
    _get_Abc_197615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 22), '_get_Abc', False)
    # Calling _get_Abc(args, kwargs) (line 2100)
    _get_Abc_call_result_197625 = invoke(stypy.reporting.localization.Localization(__file__, 2100, 22), _get_Abc_197615, *[c_197616, c0_197617, A_ub_197618, b_ub_197619, A_eq_197620, b_eq_197621, bounds_197622, undo_197623], **kwargs_197624)
    
    # Obtaining the member '__getitem__' of a type (line 2100)
    getitem___197626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2100, 8), _get_Abc_call_result_197625, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2100)
    subscript_call_result_197627 = invoke(stypy.reporting.localization.Localization(__file__, 2100, 8), getitem___197626, int_197614)
    
    # Assigning a type to the variable 'tuple_var_assignment_192654' (line 2100)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2100, 8), 'tuple_var_assignment_192654', subscript_call_result_197627)
    
    # Assigning a Subscript to a Name (line 2100):
    
    # Obtaining the type of the subscript
    int_197628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2100, 8), 'int')
    
    # Call to _get_Abc(...): (line 2100)
    # Processing the call arguments (line 2100)
    # Getting the type of 'c' (line 2100)
    c_197630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 31), 'c', False)
    # Getting the type of 'c0' (line 2100)
    c0_197631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 34), 'c0', False)
    # Getting the type of 'A_ub' (line 2100)
    A_ub_197632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 38), 'A_ub', False)
    # Getting the type of 'b_ub' (line 2100)
    b_ub_197633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 44), 'b_ub', False)
    # Getting the type of 'A_eq' (line 2100)
    A_eq_197634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 50), 'A_eq', False)
    # Getting the type of 'b_eq' (line 2100)
    b_eq_197635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 56), 'b_eq', False)
    # Getting the type of 'bounds' (line 2100)
    bounds_197636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 62), 'bounds', False)
    # Getting the type of 'undo' (line 2100)
    undo_197637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 70), 'undo', False)
    # Processing the call keyword arguments (line 2100)
    kwargs_197638 = {}
    # Getting the type of '_get_Abc' (line 2100)
    _get_Abc_197629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 22), '_get_Abc', False)
    # Calling _get_Abc(args, kwargs) (line 2100)
    _get_Abc_call_result_197639 = invoke(stypy.reporting.localization.Localization(__file__, 2100, 22), _get_Abc_197629, *[c_197630, c0_197631, A_ub_197632, b_ub_197633, A_eq_197634, b_eq_197635, bounds_197636, undo_197637], **kwargs_197638)
    
    # Obtaining the member '__getitem__' of a type (line 2100)
    getitem___197640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2100, 8), _get_Abc_call_result_197639, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2100)
    subscript_call_result_197641 = invoke(stypy.reporting.localization.Localization(__file__, 2100, 8), getitem___197640, int_197628)
    
    # Assigning a type to the variable 'tuple_var_assignment_192655' (line 2100)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2100, 8), 'tuple_var_assignment_192655', subscript_call_result_197641)
    
    # Assigning a Subscript to a Name (line 2100):
    
    # Obtaining the type of the subscript
    int_197642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2100, 8), 'int')
    
    # Call to _get_Abc(...): (line 2100)
    # Processing the call arguments (line 2100)
    # Getting the type of 'c' (line 2100)
    c_197644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 31), 'c', False)
    # Getting the type of 'c0' (line 2100)
    c0_197645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 34), 'c0', False)
    # Getting the type of 'A_ub' (line 2100)
    A_ub_197646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 38), 'A_ub', False)
    # Getting the type of 'b_ub' (line 2100)
    b_ub_197647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 44), 'b_ub', False)
    # Getting the type of 'A_eq' (line 2100)
    A_eq_197648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 50), 'A_eq', False)
    # Getting the type of 'b_eq' (line 2100)
    b_eq_197649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 56), 'b_eq', False)
    # Getting the type of 'bounds' (line 2100)
    bounds_197650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 62), 'bounds', False)
    # Getting the type of 'undo' (line 2100)
    undo_197651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 70), 'undo', False)
    # Processing the call keyword arguments (line 2100)
    kwargs_197652 = {}
    # Getting the type of '_get_Abc' (line 2100)
    _get_Abc_197643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 22), '_get_Abc', False)
    # Calling _get_Abc(args, kwargs) (line 2100)
    _get_Abc_call_result_197653 = invoke(stypy.reporting.localization.Localization(__file__, 2100, 22), _get_Abc_197643, *[c_197644, c0_197645, A_ub_197646, b_ub_197647, A_eq_197648, b_eq_197649, bounds_197650, undo_197651], **kwargs_197652)
    
    # Obtaining the member '__getitem__' of a type (line 2100)
    getitem___197654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2100, 8), _get_Abc_call_result_197653, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2100)
    subscript_call_result_197655 = invoke(stypy.reporting.localization.Localization(__file__, 2100, 8), getitem___197654, int_197642)
    
    # Assigning a type to the variable 'tuple_var_assignment_192656' (line 2100)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2100, 8), 'tuple_var_assignment_192656', subscript_call_result_197655)
    
    # Assigning a Subscript to a Name (line 2100):
    
    # Obtaining the type of the subscript
    int_197656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2100, 8), 'int')
    
    # Call to _get_Abc(...): (line 2100)
    # Processing the call arguments (line 2100)
    # Getting the type of 'c' (line 2100)
    c_197658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 31), 'c', False)
    # Getting the type of 'c0' (line 2100)
    c0_197659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 34), 'c0', False)
    # Getting the type of 'A_ub' (line 2100)
    A_ub_197660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 38), 'A_ub', False)
    # Getting the type of 'b_ub' (line 2100)
    b_ub_197661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 44), 'b_ub', False)
    # Getting the type of 'A_eq' (line 2100)
    A_eq_197662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 50), 'A_eq', False)
    # Getting the type of 'b_eq' (line 2100)
    b_eq_197663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 56), 'b_eq', False)
    # Getting the type of 'bounds' (line 2100)
    bounds_197664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 62), 'bounds', False)
    # Getting the type of 'undo' (line 2100)
    undo_197665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 70), 'undo', False)
    # Processing the call keyword arguments (line 2100)
    kwargs_197666 = {}
    # Getting the type of '_get_Abc' (line 2100)
    _get_Abc_197657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 22), '_get_Abc', False)
    # Calling _get_Abc(args, kwargs) (line 2100)
    _get_Abc_call_result_197667 = invoke(stypy.reporting.localization.Localization(__file__, 2100, 22), _get_Abc_197657, *[c_197658, c0_197659, A_ub_197660, b_ub_197661, A_eq_197662, b_eq_197663, bounds_197664, undo_197665], **kwargs_197666)
    
    # Obtaining the member '__getitem__' of a type (line 2100)
    getitem___197668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2100, 8), _get_Abc_call_result_197667, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2100)
    subscript_call_result_197669 = invoke(stypy.reporting.localization.Localization(__file__, 2100, 8), getitem___197668, int_197656)
    
    # Assigning a type to the variable 'tuple_var_assignment_192657' (line 2100)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2100, 8), 'tuple_var_assignment_192657', subscript_call_result_197669)
    
    # Assigning a Name to a Name (line 2100):
    # Getting the type of 'tuple_var_assignment_192654' (line 2100)
    tuple_var_assignment_192654_197670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 8), 'tuple_var_assignment_192654')
    # Assigning a type to the variable 'A' (line 2100)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2100, 8), 'A', tuple_var_assignment_192654_197670)
    
    # Assigning a Name to a Name (line 2100):
    # Getting the type of 'tuple_var_assignment_192655' (line 2100)
    tuple_var_assignment_192655_197671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 8), 'tuple_var_assignment_192655')
    # Assigning a type to the variable 'b' (line 2100)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2100, 11), 'b', tuple_var_assignment_192655_197671)
    
    # Assigning a Name to a Name (line 2100):
    # Getting the type of 'tuple_var_assignment_192656' (line 2100)
    tuple_var_assignment_192656_197672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 8), 'tuple_var_assignment_192656')
    # Assigning a type to the variable 'c' (line 2100)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2100, 14), 'c', tuple_var_assignment_192656_197672)
    
    # Assigning a Name to a Name (line 2100):
    # Getting the type of 'tuple_var_assignment_192657' (line 2100)
    tuple_var_assignment_192657_197673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 8), 'tuple_var_assignment_192657')
    # Assigning a type to the variable 'c0' (line 2100)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2100, 17), 'c0', tuple_var_assignment_192657_197673)
    
    # Assigning a Call to a Tuple (line 2102):
    
    # Assigning a Subscript to a Name (line 2102):
    
    # Obtaining the type of the subscript
    int_197674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2102, 8), 'int')
    
    # Call to _ip_hsd(...): (line 2102)
    # Processing the call arguments (line 2102)
    # Getting the type of 'A' (line 2102)
    A_197676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 48), 'A', False)
    # Getting the type of 'b' (line 2102)
    b_197677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 51), 'b', False)
    # Getting the type of 'c' (line 2102)
    c_197678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 54), 'c', False)
    # Getting the type of 'c0' (line 2102)
    c0_197679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 57), 'c0', False)
    # Getting the type of 'alpha0' (line 2102)
    alpha0_197680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 61), 'alpha0', False)
    # Getting the type of 'beta' (line 2102)
    beta_197681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 69), 'beta', False)
    # Getting the type of 'maxiter' (line 2103)
    maxiter_197682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 48), 'maxiter', False)
    # Getting the type of 'disp' (line 2103)
    disp_197683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 57), 'disp', False)
    # Getting the type of 'tol' (line 2103)
    tol_197684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 63), 'tol', False)
    # Getting the type of 'sparse' (line 2103)
    sparse_197685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 68), 'sparse', False)
    # Getting the type of 'lstsq' (line 2104)
    lstsq_197686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2104, 48), 'lstsq', False)
    # Getting the type of 'sym_pos' (line 2104)
    sym_pos_197687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2104, 55), 'sym_pos', False)
    # Getting the type of 'cholesky' (line 2104)
    cholesky_197688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2104, 64), 'cholesky', False)
    # Getting the type of 'pc' (line 2105)
    pc_197689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 48), 'pc', False)
    # Getting the type of 'ip' (line 2105)
    ip_197690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 52), 'ip', False)
    # Getting the type of 'permc_spec' (line 2105)
    permc_spec_197691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 56), 'permc_spec', False)
    # Processing the call keyword arguments (line 2102)
    kwargs_197692 = {}
    # Getting the type of '_ip_hsd' (line 2102)
    _ip_hsd_197675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 40), '_ip_hsd', False)
    # Calling _ip_hsd(args, kwargs) (line 2102)
    _ip_hsd_call_result_197693 = invoke(stypy.reporting.localization.Localization(__file__, 2102, 40), _ip_hsd_197675, *[A_197676, b_197677, c_197678, c0_197679, alpha0_197680, beta_197681, maxiter_197682, disp_197683, tol_197684, sparse_197685, lstsq_197686, sym_pos_197687, cholesky_197688, pc_197689, ip_197690, permc_spec_197691], **kwargs_197692)
    
    # Obtaining the member '__getitem__' of a type (line 2102)
    getitem___197694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2102, 8), _ip_hsd_call_result_197693, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2102)
    subscript_call_result_197695 = invoke(stypy.reporting.localization.Localization(__file__, 2102, 8), getitem___197694, int_197674)
    
    # Assigning a type to the variable 'tuple_var_assignment_192658' (line 2102)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2102, 8), 'tuple_var_assignment_192658', subscript_call_result_197695)
    
    # Assigning a Subscript to a Name (line 2102):
    
    # Obtaining the type of the subscript
    int_197696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2102, 8), 'int')
    
    # Call to _ip_hsd(...): (line 2102)
    # Processing the call arguments (line 2102)
    # Getting the type of 'A' (line 2102)
    A_197698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 48), 'A', False)
    # Getting the type of 'b' (line 2102)
    b_197699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 51), 'b', False)
    # Getting the type of 'c' (line 2102)
    c_197700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 54), 'c', False)
    # Getting the type of 'c0' (line 2102)
    c0_197701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 57), 'c0', False)
    # Getting the type of 'alpha0' (line 2102)
    alpha0_197702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 61), 'alpha0', False)
    # Getting the type of 'beta' (line 2102)
    beta_197703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 69), 'beta', False)
    # Getting the type of 'maxiter' (line 2103)
    maxiter_197704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 48), 'maxiter', False)
    # Getting the type of 'disp' (line 2103)
    disp_197705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 57), 'disp', False)
    # Getting the type of 'tol' (line 2103)
    tol_197706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 63), 'tol', False)
    # Getting the type of 'sparse' (line 2103)
    sparse_197707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 68), 'sparse', False)
    # Getting the type of 'lstsq' (line 2104)
    lstsq_197708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2104, 48), 'lstsq', False)
    # Getting the type of 'sym_pos' (line 2104)
    sym_pos_197709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2104, 55), 'sym_pos', False)
    # Getting the type of 'cholesky' (line 2104)
    cholesky_197710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2104, 64), 'cholesky', False)
    # Getting the type of 'pc' (line 2105)
    pc_197711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 48), 'pc', False)
    # Getting the type of 'ip' (line 2105)
    ip_197712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 52), 'ip', False)
    # Getting the type of 'permc_spec' (line 2105)
    permc_spec_197713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 56), 'permc_spec', False)
    # Processing the call keyword arguments (line 2102)
    kwargs_197714 = {}
    # Getting the type of '_ip_hsd' (line 2102)
    _ip_hsd_197697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 40), '_ip_hsd', False)
    # Calling _ip_hsd(args, kwargs) (line 2102)
    _ip_hsd_call_result_197715 = invoke(stypy.reporting.localization.Localization(__file__, 2102, 40), _ip_hsd_197697, *[A_197698, b_197699, c_197700, c0_197701, alpha0_197702, beta_197703, maxiter_197704, disp_197705, tol_197706, sparse_197707, lstsq_197708, sym_pos_197709, cholesky_197710, pc_197711, ip_197712, permc_spec_197713], **kwargs_197714)
    
    # Obtaining the member '__getitem__' of a type (line 2102)
    getitem___197716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2102, 8), _ip_hsd_call_result_197715, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2102)
    subscript_call_result_197717 = invoke(stypy.reporting.localization.Localization(__file__, 2102, 8), getitem___197716, int_197696)
    
    # Assigning a type to the variable 'tuple_var_assignment_192659' (line 2102)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2102, 8), 'tuple_var_assignment_192659', subscript_call_result_197717)
    
    # Assigning a Subscript to a Name (line 2102):
    
    # Obtaining the type of the subscript
    int_197718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2102, 8), 'int')
    
    # Call to _ip_hsd(...): (line 2102)
    # Processing the call arguments (line 2102)
    # Getting the type of 'A' (line 2102)
    A_197720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 48), 'A', False)
    # Getting the type of 'b' (line 2102)
    b_197721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 51), 'b', False)
    # Getting the type of 'c' (line 2102)
    c_197722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 54), 'c', False)
    # Getting the type of 'c0' (line 2102)
    c0_197723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 57), 'c0', False)
    # Getting the type of 'alpha0' (line 2102)
    alpha0_197724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 61), 'alpha0', False)
    # Getting the type of 'beta' (line 2102)
    beta_197725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 69), 'beta', False)
    # Getting the type of 'maxiter' (line 2103)
    maxiter_197726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 48), 'maxiter', False)
    # Getting the type of 'disp' (line 2103)
    disp_197727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 57), 'disp', False)
    # Getting the type of 'tol' (line 2103)
    tol_197728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 63), 'tol', False)
    # Getting the type of 'sparse' (line 2103)
    sparse_197729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 68), 'sparse', False)
    # Getting the type of 'lstsq' (line 2104)
    lstsq_197730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2104, 48), 'lstsq', False)
    # Getting the type of 'sym_pos' (line 2104)
    sym_pos_197731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2104, 55), 'sym_pos', False)
    # Getting the type of 'cholesky' (line 2104)
    cholesky_197732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2104, 64), 'cholesky', False)
    # Getting the type of 'pc' (line 2105)
    pc_197733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 48), 'pc', False)
    # Getting the type of 'ip' (line 2105)
    ip_197734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 52), 'ip', False)
    # Getting the type of 'permc_spec' (line 2105)
    permc_spec_197735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 56), 'permc_spec', False)
    # Processing the call keyword arguments (line 2102)
    kwargs_197736 = {}
    # Getting the type of '_ip_hsd' (line 2102)
    _ip_hsd_197719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 40), '_ip_hsd', False)
    # Calling _ip_hsd(args, kwargs) (line 2102)
    _ip_hsd_call_result_197737 = invoke(stypy.reporting.localization.Localization(__file__, 2102, 40), _ip_hsd_197719, *[A_197720, b_197721, c_197722, c0_197723, alpha0_197724, beta_197725, maxiter_197726, disp_197727, tol_197728, sparse_197729, lstsq_197730, sym_pos_197731, cholesky_197732, pc_197733, ip_197734, permc_spec_197735], **kwargs_197736)
    
    # Obtaining the member '__getitem__' of a type (line 2102)
    getitem___197738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2102, 8), _ip_hsd_call_result_197737, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2102)
    subscript_call_result_197739 = invoke(stypy.reporting.localization.Localization(__file__, 2102, 8), getitem___197738, int_197718)
    
    # Assigning a type to the variable 'tuple_var_assignment_192660' (line 2102)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2102, 8), 'tuple_var_assignment_192660', subscript_call_result_197739)
    
    # Assigning a Subscript to a Name (line 2102):
    
    # Obtaining the type of the subscript
    int_197740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2102, 8), 'int')
    
    # Call to _ip_hsd(...): (line 2102)
    # Processing the call arguments (line 2102)
    # Getting the type of 'A' (line 2102)
    A_197742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 48), 'A', False)
    # Getting the type of 'b' (line 2102)
    b_197743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 51), 'b', False)
    # Getting the type of 'c' (line 2102)
    c_197744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 54), 'c', False)
    # Getting the type of 'c0' (line 2102)
    c0_197745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 57), 'c0', False)
    # Getting the type of 'alpha0' (line 2102)
    alpha0_197746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 61), 'alpha0', False)
    # Getting the type of 'beta' (line 2102)
    beta_197747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 69), 'beta', False)
    # Getting the type of 'maxiter' (line 2103)
    maxiter_197748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 48), 'maxiter', False)
    # Getting the type of 'disp' (line 2103)
    disp_197749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 57), 'disp', False)
    # Getting the type of 'tol' (line 2103)
    tol_197750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 63), 'tol', False)
    # Getting the type of 'sparse' (line 2103)
    sparse_197751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 68), 'sparse', False)
    # Getting the type of 'lstsq' (line 2104)
    lstsq_197752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2104, 48), 'lstsq', False)
    # Getting the type of 'sym_pos' (line 2104)
    sym_pos_197753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2104, 55), 'sym_pos', False)
    # Getting the type of 'cholesky' (line 2104)
    cholesky_197754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2104, 64), 'cholesky', False)
    # Getting the type of 'pc' (line 2105)
    pc_197755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 48), 'pc', False)
    # Getting the type of 'ip' (line 2105)
    ip_197756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 52), 'ip', False)
    # Getting the type of 'permc_spec' (line 2105)
    permc_spec_197757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 56), 'permc_spec', False)
    # Processing the call keyword arguments (line 2102)
    kwargs_197758 = {}
    # Getting the type of '_ip_hsd' (line 2102)
    _ip_hsd_197741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 40), '_ip_hsd', False)
    # Calling _ip_hsd(args, kwargs) (line 2102)
    _ip_hsd_call_result_197759 = invoke(stypy.reporting.localization.Localization(__file__, 2102, 40), _ip_hsd_197741, *[A_197742, b_197743, c_197744, c0_197745, alpha0_197746, beta_197747, maxiter_197748, disp_197749, tol_197750, sparse_197751, lstsq_197752, sym_pos_197753, cholesky_197754, pc_197755, ip_197756, permc_spec_197757], **kwargs_197758)
    
    # Obtaining the member '__getitem__' of a type (line 2102)
    getitem___197760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2102, 8), _ip_hsd_call_result_197759, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2102)
    subscript_call_result_197761 = invoke(stypy.reporting.localization.Localization(__file__, 2102, 8), getitem___197760, int_197740)
    
    # Assigning a type to the variable 'tuple_var_assignment_192661' (line 2102)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2102, 8), 'tuple_var_assignment_192661', subscript_call_result_197761)
    
    # Assigning a Name to a Name (line 2102):
    # Getting the type of 'tuple_var_assignment_192658' (line 2102)
    tuple_var_assignment_192658_197762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 8), 'tuple_var_assignment_192658')
    # Assigning a type to the variable 'x' (line 2102)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2102, 8), 'x', tuple_var_assignment_192658_197762)
    
    # Assigning a Name to a Name (line 2102):
    # Getting the type of 'tuple_var_assignment_192659' (line 2102)
    tuple_var_assignment_192659_197763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 8), 'tuple_var_assignment_192659')
    # Assigning a type to the variable 'status' (line 2102)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2102, 11), 'status', tuple_var_assignment_192659_197763)
    
    # Assigning a Name to a Name (line 2102):
    # Getting the type of 'tuple_var_assignment_192660' (line 2102)
    tuple_var_assignment_192660_197764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 8), 'tuple_var_assignment_192660')
    # Assigning a type to the variable 'message' (line 2102)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2102, 19), 'message', tuple_var_assignment_192660_197764)
    
    # Assigning a Name to a Name (line 2102):
    # Getting the type of 'tuple_var_assignment_192661' (line 2102)
    tuple_var_assignment_192661_197765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 8), 'tuple_var_assignment_192661')
    # Assigning a type to the variable 'iteration' (line 2102)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2102, 28), 'iteration', tuple_var_assignment_192661_197765)
    # SSA join for if statement (line 2098)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 2109):
    
    # Assigning a Subscript to a Name (line 2109):
    
    # Obtaining the type of the subscript
    int_197766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2109, 4), 'int')
    
    # Call to _postprocess(...): (line 2109)
    # Processing the call arguments (line 2109)
    # Getting the type of 'x' (line 2110)
    x_197768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 8), 'x', False)
    # Getting the type of 'c_o' (line 2110)
    c_o_197769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 11), 'c_o', False)
    # Getting the type of 'A_ub_o' (line 2110)
    A_ub_o_197770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 16), 'A_ub_o', False)
    # Getting the type of 'b_ub_o' (line 2110)
    b_ub_o_197771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 24), 'b_ub_o', False)
    # Getting the type of 'A_eq_o' (line 2110)
    A_eq_o_197772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 32), 'A_eq_o', False)
    # Getting the type of 'b_eq_o' (line 2110)
    b_eq_o_197773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 40), 'b_eq_o', False)
    # Getting the type of 'bounds' (line 2111)
    bounds_197774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 8), 'bounds', False)
    # Getting the type of 'complete' (line 2111)
    complete_197775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 16), 'complete', False)
    # Getting the type of 'undo' (line 2111)
    undo_197776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 26), 'undo', False)
    # Getting the type of 'status' (line 2111)
    status_197777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 32), 'status', False)
    # Getting the type of 'message' (line 2111)
    message_197778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 40), 'message', False)
    # Processing the call keyword arguments (line 2109)
    kwargs_197779 = {}
    # Getting the type of '_postprocess' (line 2109)
    _postprocess_197767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 42), '_postprocess', False)
    # Calling _postprocess(args, kwargs) (line 2109)
    _postprocess_call_result_197780 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 42), _postprocess_197767, *[x_197768, c_o_197769, A_ub_o_197770, b_ub_o_197771, A_eq_o_197772, b_eq_o_197773, bounds_197774, complete_197775, undo_197776, status_197777, message_197778], **kwargs_197779)
    
    # Obtaining the member '__getitem__' of a type (line 2109)
    getitem___197781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2109, 4), _postprocess_call_result_197780, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2109)
    subscript_call_result_197782 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 4), getitem___197781, int_197766)
    
    # Assigning a type to the variable 'tuple_var_assignment_192662' (line 2109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 4), 'tuple_var_assignment_192662', subscript_call_result_197782)
    
    # Assigning a Subscript to a Name (line 2109):
    
    # Obtaining the type of the subscript
    int_197783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2109, 4), 'int')
    
    # Call to _postprocess(...): (line 2109)
    # Processing the call arguments (line 2109)
    # Getting the type of 'x' (line 2110)
    x_197785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 8), 'x', False)
    # Getting the type of 'c_o' (line 2110)
    c_o_197786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 11), 'c_o', False)
    # Getting the type of 'A_ub_o' (line 2110)
    A_ub_o_197787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 16), 'A_ub_o', False)
    # Getting the type of 'b_ub_o' (line 2110)
    b_ub_o_197788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 24), 'b_ub_o', False)
    # Getting the type of 'A_eq_o' (line 2110)
    A_eq_o_197789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 32), 'A_eq_o', False)
    # Getting the type of 'b_eq_o' (line 2110)
    b_eq_o_197790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 40), 'b_eq_o', False)
    # Getting the type of 'bounds' (line 2111)
    bounds_197791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 8), 'bounds', False)
    # Getting the type of 'complete' (line 2111)
    complete_197792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 16), 'complete', False)
    # Getting the type of 'undo' (line 2111)
    undo_197793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 26), 'undo', False)
    # Getting the type of 'status' (line 2111)
    status_197794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 32), 'status', False)
    # Getting the type of 'message' (line 2111)
    message_197795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 40), 'message', False)
    # Processing the call keyword arguments (line 2109)
    kwargs_197796 = {}
    # Getting the type of '_postprocess' (line 2109)
    _postprocess_197784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 42), '_postprocess', False)
    # Calling _postprocess(args, kwargs) (line 2109)
    _postprocess_call_result_197797 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 42), _postprocess_197784, *[x_197785, c_o_197786, A_ub_o_197787, b_ub_o_197788, A_eq_o_197789, b_eq_o_197790, bounds_197791, complete_197792, undo_197793, status_197794, message_197795], **kwargs_197796)
    
    # Obtaining the member '__getitem__' of a type (line 2109)
    getitem___197798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2109, 4), _postprocess_call_result_197797, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2109)
    subscript_call_result_197799 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 4), getitem___197798, int_197783)
    
    # Assigning a type to the variable 'tuple_var_assignment_192663' (line 2109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 4), 'tuple_var_assignment_192663', subscript_call_result_197799)
    
    # Assigning a Subscript to a Name (line 2109):
    
    # Obtaining the type of the subscript
    int_197800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2109, 4), 'int')
    
    # Call to _postprocess(...): (line 2109)
    # Processing the call arguments (line 2109)
    # Getting the type of 'x' (line 2110)
    x_197802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 8), 'x', False)
    # Getting the type of 'c_o' (line 2110)
    c_o_197803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 11), 'c_o', False)
    # Getting the type of 'A_ub_o' (line 2110)
    A_ub_o_197804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 16), 'A_ub_o', False)
    # Getting the type of 'b_ub_o' (line 2110)
    b_ub_o_197805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 24), 'b_ub_o', False)
    # Getting the type of 'A_eq_o' (line 2110)
    A_eq_o_197806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 32), 'A_eq_o', False)
    # Getting the type of 'b_eq_o' (line 2110)
    b_eq_o_197807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 40), 'b_eq_o', False)
    # Getting the type of 'bounds' (line 2111)
    bounds_197808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 8), 'bounds', False)
    # Getting the type of 'complete' (line 2111)
    complete_197809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 16), 'complete', False)
    # Getting the type of 'undo' (line 2111)
    undo_197810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 26), 'undo', False)
    # Getting the type of 'status' (line 2111)
    status_197811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 32), 'status', False)
    # Getting the type of 'message' (line 2111)
    message_197812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 40), 'message', False)
    # Processing the call keyword arguments (line 2109)
    kwargs_197813 = {}
    # Getting the type of '_postprocess' (line 2109)
    _postprocess_197801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 42), '_postprocess', False)
    # Calling _postprocess(args, kwargs) (line 2109)
    _postprocess_call_result_197814 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 42), _postprocess_197801, *[x_197802, c_o_197803, A_ub_o_197804, b_ub_o_197805, A_eq_o_197806, b_eq_o_197807, bounds_197808, complete_197809, undo_197810, status_197811, message_197812], **kwargs_197813)
    
    # Obtaining the member '__getitem__' of a type (line 2109)
    getitem___197815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2109, 4), _postprocess_call_result_197814, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2109)
    subscript_call_result_197816 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 4), getitem___197815, int_197800)
    
    # Assigning a type to the variable 'tuple_var_assignment_192664' (line 2109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 4), 'tuple_var_assignment_192664', subscript_call_result_197816)
    
    # Assigning a Subscript to a Name (line 2109):
    
    # Obtaining the type of the subscript
    int_197817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2109, 4), 'int')
    
    # Call to _postprocess(...): (line 2109)
    # Processing the call arguments (line 2109)
    # Getting the type of 'x' (line 2110)
    x_197819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 8), 'x', False)
    # Getting the type of 'c_o' (line 2110)
    c_o_197820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 11), 'c_o', False)
    # Getting the type of 'A_ub_o' (line 2110)
    A_ub_o_197821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 16), 'A_ub_o', False)
    # Getting the type of 'b_ub_o' (line 2110)
    b_ub_o_197822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 24), 'b_ub_o', False)
    # Getting the type of 'A_eq_o' (line 2110)
    A_eq_o_197823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 32), 'A_eq_o', False)
    # Getting the type of 'b_eq_o' (line 2110)
    b_eq_o_197824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 40), 'b_eq_o', False)
    # Getting the type of 'bounds' (line 2111)
    bounds_197825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 8), 'bounds', False)
    # Getting the type of 'complete' (line 2111)
    complete_197826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 16), 'complete', False)
    # Getting the type of 'undo' (line 2111)
    undo_197827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 26), 'undo', False)
    # Getting the type of 'status' (line 2111)
    status_197828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 32), 'status', False)
    # Getting the type of 'message' (line 2111)
    message_197829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 40), 'message', False)
    # Processing the call keyword arguments (line 2109)
    kwargs_197830 = {}
    # Getting the type of '_postprocess' (line 2109)
    _postprocess_197818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 42), '_postprocess', False)
    # Calling _postprocess(args, kwargs) (line 2109)
    _postprocess_call_result_197831 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 42), _postprocess_197818, *[x_197819, c_o_197820, A_ub_o_197821, b_ub_o_197822, A_eq_o_197823, b_eq_o_197824, bounds_197825, complete_197826, undo_197827, status_197828, message_197829], **kwargs_197830)
    
    # Obtaining the member '__getitem__' of a type (line 2109)
    getitem___197832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2109, 4), _postprocess_call_result_197831, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2109)
    subscript_call_result_197833 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 4), getitem___197832, int_197817)
    
    # Assigning a type to the variable 'tuple_var_assignment_192665' (line 2109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 4), 'tuple_var_assignment_192665', subscript_call_result_197833)
    
    # Assigning a Subscript to a Name (line 2109):
    
    # Obtaining the type of the subscript
    int_197834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2109, 4), 'int')
    
    # Call to _postprocess(...): (line 2109)
    # Processing the call arguments (line 2109)
    # Getting the type of 'x' (line 2110)
    x_197836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 8), 'x', False)
    # Getting the type of 'c_o' (line 2110)
    c_o_197837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 11), 'c_o', False)
    # Getting the type of 'A_ub_o' (line 2110)
    A_ub_o_197838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 16), 'A_ub_o', False)
    # Getting the type of 'b_ub_o' (line 2110)
    b_ub_o_197839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 24), 'b_ub_o', False)
    # Getting the type of 'A_eq_o' (line 2110)
    A_eq_o_197840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 32), 'A_eq_o', False)
    # Getting the type of 'b_eq_o' (line 2110)
    b_eq_o_197841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 40), 'b_eq_o', False)
    # Getting the type of 'bounds' (line 2111)
    bounds_197842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 8), 'bounds', False)
    # Getting the type of 'complete' (line 2111)
    complete_197843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 16), 'complete', False)
    # Getting the type of 'undo' (line 2111)
    undo_197844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 26), 'undo', False)
    # Getting the type of 'status' (line 2111)
    status_197845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 32), 'status', False)
    # Getting the type of 'message' (line 2111)
    message_197846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 40), 'message', False)
    # Processing the call keyword arguments (line 2109)
    kwargs_197847 = {}
    # Getting the type of '_postprocess' (line 2109)
    _postprocess_197835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 42), '_postprocess', False)
    # Calling _postprocess(args, kwargs) (line 2109)
    _postprocess_call_result_197848 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 42), _postprocess_197835, *[x_197836, c_o_197837, A_ub_o_197838, b_ub_o_197839, A_eq_o_197840, b_eq_o_197841, bounds_197842, complete_197843, undo_197844, status_197845, message_197846], **kwargs_197847)
    
    # Obtaining the member '__getitem__' of a type (line 2109)
    getitem___197849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2109, 4), _postprocess_call_result_197848, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2109)
    subscript_call_result_197850 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 4), getitem___197849, int_197834)
    
    # Assigning a type to the variable 'tuple_var_assignment_192666' (line 2109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 4), 'tuple_var_assignment_192666', subscript_call_result_197850)
    
    # Assigning a Subscript to a Name (line 2109):
    
    # Obtaining the type of the subscript
    int_197851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2109, 4), 'int')
    
    # Call to _postprocess(...): (line 2109)
    # Processing the call arguments (line 2109)
    # Getting the type of 'x' (line 2110)
    x_197853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 8), 'x', False)
    # Getting the type of 'c_o' (line 2110)
    c_o_197854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 11), 'c_o', False)
    # Getting the type of 'A_ub_o' (line 2110)
    A_ub_o_197855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 16), 'A_ub_o', False)
    # Getting the type of 'b_ub_o' (line 2110)
    b_ub_o_197856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 24), 'b_ub_o', False)
    # Getting the type of 'A_eq_o' (line 2110)
    A_eq_o_197857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 32), 'A_eq_o', False)
    # Getting the type of 'b_eq_o' (line 2110)
    b_eq_o_197858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 40), 'b_eq_o', False)
    # Getting the type of 'bounds' (line 2111)
    bounds_197859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 8), 'bounds', False)
    # Getting the type of 'complete' (line 2111)
    complete_197860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 16), 'complete', False)
    # Getting the type of 'undo' (line 2111)
    undo_197861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 26), 'undo', False)
    # Getting the type of 'status' (line 2111)
    status_197862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 32), 'status', False)
    # Getting the type of 'message' (line 2111)
    message_197863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 40), 'message', False)
    # Processing the call keyword arguments (line 2109)
    kwargs_197864 = {}
    # Getting the type of '_postprocess' (line 2109)
    _postprocess_197852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 42), '_postprocess', False)
    # Calling _postprocess(args, kwargs) (line 2109)
    _postprocess_call_result_197865 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 42), _postprocess_197852, *[x_197853, c_o_197854, A_ub_o_197855, b_ub_o_197856, A_eq_o_197857, b_eq_o_197858, bounds_197859, complete_197860, undo_197861, status_197862, message_197863], **kwargs_197864)
    
    # Obtaining the member '__getitem__' of a type (line 2109)
    getitem___197866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2109, 4), _postprocess_call_result_197865, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2109)
    subscript_call_result_197867 = invoke(stypy.reporting.localization.Localization(__file__, 2109, 4), getitem___197866, int_197851)
    
    # Assigning a type to the variable 'tuple_var_assignment_192667' (line 2109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 4), 'tuple_var_assignment_192667', subscript_call_result_197867)
    
    # Assigning a Name to a Name (line 2109):
    # Getting the type of 'tuple_var_assignment_192662' (line 2109)
    tuple_var_assignment_192662_197868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 4), 'tuple_var_assignment_192662')
    # Assigning a type to the variable 'x' (line 2109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 4), 'x', tuple_var_assignment_192662_197868)
    
    # Assigning a Name to a Name (line 2109):
    # Getting the type of 'tuple_var_assignment_192663' (line 2109)
    tuple_var_assignment_192663_197869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 4), 'tuple_var_assignment_192663')
    # Assigning a type to the variable 'fun' (line 2109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 7), 'fun', tuple_var_assignment_192663_197869)
    
    # Assigning a Name to a Name (line 2109):
    # Getting the type of 'tuple_var_assignment_192664' (line 2109)
    tuple_var_assignment_192664_197870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 4), 'tuple_var_assignment_192664')
    # Assigning a type to the variable 'slack' (line 2109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 12), 'slack', tuple_var_assignment_192664_197870)
    
    # Assigning a Name to a Name (line 2109):
    # Getting the type of 'tuple_var_assignment_192665' (line 2109)
    tuple_var_assignment_192665_197871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 4), 'tuple_var_assignment_192665')
    # Assigning a type to the variable 'con' (line 2109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 19), 'con', tuple_var_assignment_192665_197871)
    
    # Assigning a Name to a Name (line 2109):
    # Getting the type of 'tuple_var_assignment_192666' (line 2109)
    tuple_var_assignment_192666_197872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 4), 'tuple_var_assignment_192666')
    # Assigning a type to the variable 'status' (line 2109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 24), 'status', tuple_var_assignment_192666_197872)
    
    # Assigning a Name to a Name (line 2109):
    # Getting the type of 'tuple_var_assignment_192667' (line 2109)
    tuple_var_assignment_192667_197873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 4), 'tuple_var_assignment_192667')
    # Assigning a type to the variable 'message' (line 2109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 32), 'message', tuple_var_assignment_192667_197873)
    
    # Assigning a Dict to a Name (line 2113):
    
    # Assigning a Dict to a Name (line 2113):
    
    # Obtaining an instance of the builtin type 'dict' (line 2113)
    dict_197874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2113, 10), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 2113)
    # Adding element type (key, value) (line 2113)
    str_197875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2114, 8), 'str', 'x')
    # Getting the type of 'x' (line 2114)
    x_197876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 13), 'x')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2113, 10), dict_197874, (str_197875, x_197876))
    # Adding element type (key, value) (line 2113)
    str_197877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2115, 8), 'str', 'fun')
    # Getting the type of 'fun' (line 2115)
    fun_197878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 15), 'fun')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2113, 10), dict_197874, (str_197877, fun_197878))
    # Adding element type (key, value) (line 2113)
    str_197879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2116, 8), 'str', 'slack')
    # Getting the type of 'slack' (line 2116)
    slack_197880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 17), 'slack')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2113, 10), dict_197874, (str_197879, slack_197880))
    # Adding element type (key, value) (line 2113)
    str_197881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2117, 8), 'str', 'con')
    # Getting the type of 'con' (line 2117)
    con_197882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2117, 15), 'con')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2113, 10), dict_197874, (str_197881, con_197882))
    # Adding element type (key, value) (line 2113)
    str_197883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2118, 8), 'str', 'status')
    # Getting the type of 'status' (line 2118)
    status_197884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2118, 18), 'status')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2113, 10), dict_197874, (str_197883, status_197884))
    # Adding element type (key, value) (line 2113)
    str_197885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2119, 8), 'str', 'message')
    # Getting the type of 'message' (line 2119)
    message_197886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2119, 19), 'message')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2113, 10), dict_197874, (str_197885, message_197886))
    # Adding element type (key, value) (line 2113)
    str_197887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2120, 8), 'str', 'nit')
    # Getting the type of 'iteration' (line 2120)
    iteration_197888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2120, 15), 'iteration')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2113, 10), dict_197874, (str_197887, iteration_197888))
    # Adding element type (key, value) (line 2113)
    str_197889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2121, 8), 'str', 'success')
    
    # Getting the type of 'status' (line 2121)
    status_197890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2121, 19), 'status')
    int_197891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2121, 29), 'int')
    # Applying the binary operator '==' (line 2121)
    result_eq_197892 = python_operator(stypy.reporting.localization.Localization(__file__, 2121, 19), '==', status_197890, int_197891)
    
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2113, 10), dict_197874, (str_197889, result_eq_197892))
    
    # Assigning a type to the variable 'sol' (line 2113)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2113, 4), 'sol', dict_197874)
    
    # Call to OptimizeResult(...): (line 2123)
    # Processing the call arguments (line 2123)
    # Getting the type of 'sol' (line 2123)
    sol_197894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2123, 26), 'sol', False)
    # Processing the call keyword arguments (line 2123)
    kwargs_197895 = {}
    # Getting the type of 'OptimizeResult' (line 2123)
    OptimizeResult_197893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2123, 11), 'OptimizeResult', False)
    # Calling OptimizeResult(args, kwargs) (line 2123)
    OptimizeResult_call_result_197896 = invoke(stypy.reporting.localization.Localization(__file__, 2123, 11), OptimizeResult_197893, *[sol_197894], **kwargs_197895)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2123)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2123, 4), 'stypy_return_type', OptimizeResult_call_result_197896)
    
    # ################# End of '_linprog_ip(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_linprog_ip' in the type store
    # Getting the type of 'stypy_return_type' (line 1702)
    stypy_return_type_197897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_197897)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_linprog_ip'
    return stypy_return_type_197897

# Assigning a type to the variable '_linprog_ip' (line 1702)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1702, 0), '_linprog_ip', _linprog_ip)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
