
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: A collection of functions to find the weights and abscissas for
3: Gaussian Quadrature.
4: 
5: These calculations are done by finding the eigenvalues of a
6: tridiagonal matrix whose entries are dependent on the coefficients
7: in the recursion formula for the orthogonal polynomials with the
8: corresponding weighting function over the interval.
9: 
10: Many recursion relations for orthogonal polynomials are given:
11: 
12: .. math::
13: 
14:     a1n f_{n+1} (x) = (a2n + a3n x ) f_n (x) - a4n f_{n-1} (x)
15: 
16: The recursion relation of interest is
17: 
18: .. math::
19: 
20:     P_{n+1} (x) = (x - A_n) P_n (x) - B_n P_{n-1} (x)
21: 
22: where :math:`P` has a different normalization than :math:`f`.
23: 
24: The coefficients can be found as:
25: 
26: .. math::
27: 
28:     A_n = -a2n / a3n
29:     \\qquad
30:     B_n = ( a4n / a3n \\sqrt{h_n-1 / h_n})^2
31: 
32: where
33: 
34: .. math::
35: 
36:     h_n = \\int_a^b w(x) f_n(x)^2
37: 
38: assume:
39: 
40: .. math::
41: 
42:     P_0 (x) = 1
43:     \\qquad
44:     P_{-1} (x) == 0
45: 
46: For the mathematical background, see [golub.welsch-1969-mathcomp]_ and
47: [abramowitz.stegun-1965]_.
48: 
49: References
50: ----------
51: .. [golub.welsch-1969-mathcomp]
52:    Golub, Gene H, and John H Welsch. 1969. Calculation of Gauss
53:    Quadrature Rules. *Mathematics of Computation* 23, 221-230+s1--s10.
54: 
55: .. [abramowitz.stegun-1965]
56:    Abramowitz, Milton, and Irene A Stegun. (1965) *Handbook of
57:    Mathematical Functions: with Formulas, Graphs, and Mathematical
58:    Tables*. Gaithersburg, MD: National Bureau of Standards.
59:    http://www.math.sfu.ca/~cbm/aands/
60: 
61: .. [townsend.trogdon.olver-2014]
62:    Townsend, A. and Trogdon, T. and Olver, S. (2014)
63:    *Fast computation of Gauss quadrature nodes and
64:    weights on the whole real line*. :arXiv:`1410.5286`.
65: 
66: .. [townsend.trogdon.olver-2015]
67:    Townsend, A. and Trogdon, T. and Olver, S. (2015)
68:    *Fast computation of Gauss quadrature nodes and
69:    weights on the whole real line*.
70:    IMA Journal of Numerical Analysis
71:    :doi:`10.1093/imanum/drv002`.
72: '''
73: #
74: # Author:  Travis Oliphant 2000
75: # Updated Sep. 2003 (fixed bugs --- tested to be accurate)
76: 
77: from __future__ import division, print_function, absolute_import
78: 
79: # Scipy imports.
80: import numpy as np
81: from numpy import (exp, inf, pi, sqrt, floor, sin, cos, around, int,
82:                    hstack, arccos, arange)
83: from scipy import linalg
84: from scipy.special import airy
85: 
86: # Local imports.
87: from . import _ufuncs as cephes
88: _gam = cephes.gamma
89: from . import specfun
90: 
91: _polyfuns = ['legendre', 'chebyt', 'chebyu', 'chebyc', 'chebys',
92:              'jacobi', 'laguerre', 'genlaguerre', 'hermite',
93:              'hermitenorm', 'gegenbauer', 'sh_legendre', 'sh_chebyt',
94:              'sh_chebyu', 'sh_jacobi']
95: 
96: # Correspondence between new and old names of root functions
97: _rootfuns_map = {'roots_legendre': 'p_roots',
98:                'roots_chebyt': 't_roots',
99:                'roots_chebyu': 'u_roots',
100:                'roots_chebyc': 'c_roots',
101:                'roots_chebys': 's_roots',
102:                'roots_jacobi': 'j_roots',
103:                'roots_laguerre': 'l_roots',
104:                'roots_genlaguerre': 'la_roots',
105:                'roots_hermite': 'h_roots',
106:                'roots_hermitenorm': 'he_roots',
107:                'roots_gegenbauer': 'cg_roots',
108:                'roots_sh_legendre': 'ps_roots',
109:                'roots_sh_chebyt': 'ts_roots',
110:                'roots_sh_chebyu': 'us_roots',
111:                'roots_sh_jacobi': 'js_roots'}
112: 
113: _evalfuns = ['eval_legendre', 'eval_chebyt', 'eval_chebyu',
114:              'eval_chebyc', 'eval_chebys', 'eval_jacobi',
115:              'eval_laguerre', 'eval_genlaguerre', 'eval_hermite',
116:              'eval_hermitenorm', 'eval_gegenbauer',
117:              'eval_sh_legendre', 'eval_sh_chebyt', 'eval_sh_chebyu',
118:              'eval_sh_jacobi']
119: 
120: __all__ = _polyfuns + list(_rootfuns_map.keys()) + _evalfuns + ['poch', 'binom']
121: 
122: 
123: class orthopoly1d(np.poly1d):
124: 
125:     def __init__(self, roots, weights=None, hn=1.0, kn=1.0, wfunc=None,
126:                  limits=None, monic=False, eval_func=None):
127:         equiv_weights = [weights[k] / wfunc(roots[k]) for
128:                          k in range(len(roots))]
129:         mu = sqrt(hn)
130:         if monic:
131:             evf = eval_func
132:             if evf:
133:                 knn = kn
134:                 eval_func = lambda x: evf(x) / knn
135:             mu = mu / abs(kn)
136:             kn = 1.0
137:             
138:         # compute coefficients from roots, then scale
139:         poly = np.poly1d(roots, r=True)
140:         np.poly1d.__init__(self, poly.coeffs * float(kn))
141:         
142:         # TODO: In numpy 1.13, there is no need to use __dict__ to access attributes
143:         self.__dict__['weights'] = np.array(list(zip(roots,
144:                                                      weights, equiv_weights)))
145:         self.__dict__['weight_func'] = wfunc
146:         self.__dict__['limits'] = limits
147:         self.__dict__['normcoef'] = mu
148: 
149:         # Note: eval_func will be discarded on arithmetic
150:         self.__dict__['_eval_func'] = eval_func
151: 
152:     def __call__(self, v):
153:         if self._eval_func and not isinstance(v, np.poly1d):
154:             return self._eval_func(v)
155:         else:
156:             return np.poly1d.__call__(self, v)
157: 
158:     def _scale(self, p):
159:         if p == 1.0:
160:             return
161:         try:
162:             self._coeffs
163:         except AttributeError:
164:             self.__dict__['coeffs'] *= p
165:         else:
166:             # the coeffs attr is be made private in future versions of numpy
167:             self._coeffs *= p
168: 
169:         evf = self._eval_func
170:         if evf:
171:             self.__dict__['_eval_func'] = lambda x: evf(x) * p
172:         self.__dict__['normcoef'] *= p
173: 
174: 
175: def _gen_roots_and_weights(n, mu0, an_func, bn_func, f, df, symmetrize, mu):
176:     '''[x,w] = gen_roots_and_weights(n,an_func,sqrt_bn_func,mu)
177: 
178:     Returns the roots (x) of an nth order orthogonal polynomial,
179:     and weights (w) to use in appropriate Gaussian quadrature with that
180:     orthogonal polynomial.
181: 
182:     The polynomials have the recurrence relation
183:           P_n+1(x) = (x - A_n) P_n(x) - B_n P_n-1(x)
184: 
185:     an_func(n)          should return A_n
186:     sqrt_bn_func(n)     should return sqrt(B_n)
187:     mu ( = h_0 )        is the integral of the weight over the orthogonal
188:                         interval
189:     '''
190:     k = np.arange(n, dtype='d')
191:     c = np.zeros((2, n))
192:     c[0,1:] = bn_func(k[1:])
193:     c[1,:] = an_func(k)
194:     x = linalg.eigvals_banded(c, overwrite_a_band=True)
195: 
196:     # improve roots by one application of Newton's method
197:     y = f(n, x)
198:     dy = df(n, x)
199:     x -= y/dy
200: 
201:     fm = f(n-1, x)
202:     fm /= np.abs(fm).max()
203:     dy /= np.abs(dy).max()
204:     w = 1.0 / (fm * dy)
205: 
206:     if symmetrize:
207:         w = (w + w[::-1]) / 2
208:         x = (x - x[::-1]) / 2
209: 
210:     w *= mu0 / w.sum()
211: 
212:     if mu:
213:         return x, w, mu0
214:     else:
215:         return x, w
216: 
217: # Jacobi Polynomials 1               P^(alpha,beta)_n(x)
218: 
219: 
220: def roots_jacobi(n, alpha, beta, mu=False):
221:     r'''Gauss-Jacobi quadrature.
222: 
223:     Computes the sample points and weights for Gauss-Jacobi quadrature. The
224:     sample points are the roots of the n-th degree Jacobi polynomial,
225:     :math:`P^{\alpha, \beta}_n(x)`.  These sample points and weights
226:     correctly integrate polynomials of degree :math:`2n - 1` or less over the
227:     interval :math:`[-1, 1]` with weight function
228:     :math:`f(x) = (1 - x)^{\alpha} (1 + x)^{\beta}`.
229: 
230:     Parameters
231:     ----------
232:     n : int
233:         quadrature order
234:     alpha : float
235:         alpha must be > -1
236:     beta : float
237:         beta must be > 0
238:     mu : bool, optional
239:         If True, return the sum of the weights, optional.
240: 
241:     Returns
242:     -------
243:     x : ndarray
244:         Sample points
245:     w : ndarray
246:         Weights
247:     mu : float
248:         Sum of the weights
249: 
250:     See Also
251:     --------
252:     scipy.integrate.quadrature
253:     scipy.integrate.fixed_quad
254:     '''
255:     m = int(n)
256:     if n < 1 or n != m:
257:         raise ValueError("n must be a positive integer.")
258:     if alpha <= -1 or beta <= -1:
259:         raise ValueError("alpha and beta must be greater than -1.")
260: 
261:     if alpha == 0.0 and beta == 0.0:
262:         return roots_legendre(m, mu)
263:     if alpha == beta:
264:         return roots_gegenbauer(m, alpha+0.5, mu)
265: 
266:     mu0 = 2.0**(alpha+beta+1)*cephes.beta(alpha+1, beta+1)
267:     a = alpha
268:     b = beta
269:     if a + b == 0.0:
270:         an_func = lambda k: np.where(k == 0, (b-a)/(2+a+b), 0.0)
271:     else:
272:         an_func = lambda k: np.where(k == 0, (b-a)/(2+a+b),
273:                   (b*b - a*a) / ((2.0*k+a+b)*(2.0*k+a+b+2)))
274: 
275:     bn_func = lambda k: 2.0 / (2.0*k+a+b)*np.sqrt((k+a)*(k+b) / (2*k+a+b+1)) \
276:               * np.where(k == 1, 1.0, np.sqrt(k*(k+a+b) / (2.0*k+a+b-1)))
277: 
278:     f = lambda n, x: cephes.eval_jacobi(n, a, b, x)
279:     df = lambda n, x: 0.5 * (n + a + b + 1) \
280:                       * cephes.eval_jacobi(n-1, a+1, b+1, x)
281:     return _gen_roots_and_weights(m, mu0, an_func, bn_func, f, df, False, mu)
282: 
283: 
284: def jacobi(n, alpha, beta, monic=False):
285:     r'''Jacobi polynomial.
286: 
287:     Defined to be the solution of
288: 
289:     .. math::
290:         (1 - x^2)\frac{d^2}{dx^2}P_n^{(\alpha, \beta)}
291:           + (\beta - \alpha - (\alpha + \beta + 2)x)
292:             \frac{d}{dx}P_n^{(\alpha, \beta)}
293:           + n(n + \alpha + \beta + 1)P_n^{(\alpha, \beta)} = 0
294: 
295:     for :math:`\alpha, \beta > -1`; :math:`P_n^{(\alpha, \beta)}` is a
296:     polynomial of degree :math:`n`.
297: 
298:     Parameters
299:     ----------
300:     n : int
301:         Degree of the polynomial.
302:     alpha : float
303:         Parameter, must be greater than -1.
304:     beta : float
305:         Parameter, must be greater than -1.
306:     monic : bool, optional
307:         If `True`, scale the leading coefficient to be 1. Default is
308:         `False`.
309: 
310:     Returns
311:     -------
312:     P : orthopoly1d
313:         Jacobi polynomial.
314: 
315:     Notes
316:     -----
317:     For fixed :math:`\alpha, \beta`, the polynomials
318:     :math:`P_n^{(\alpha, \beta)}` are orthogonal over :math:`[-1, 1]`
319:     with weight function :math:`(1 - x)^\alpha(1 + x)^\beta`.
320: 
321:     '''
322:     if n < 0:
323:         raise ValueError("n must be nonnegative.")
324: 
325:     wfunc = lambda x: (1 - x)**alpha * (1 + x)**beta
326:     if n == 0:
327:         return orthopoly1d([], [], 1.0, 1.0, wfunc, (-1, 1), monic,
328:                            eval_func=np.ones_like)
329:     x, w, mu = roots_jacobi(n, alpha, beta, mu=True)
330:     ab1 = alpha + beta + 1.0
331:     hn = 2**ab1 / (2 * n + ab1) * _gam(n + alpha + 1)
332:     hn *= _gam(n + beta + 1.0) / _gam(n + 1) / _gam(n + ab1)
333:     kn = _gam(2 * n + ab1) / 2.0**n / _gam(n + 1) / _gam(n + ab1)
334:     # here kn = coefficient on x^n term
335:     p = orthopoly1d(x, w, hn, kn, wfunc, (-1, 1), monic,
336:                     lambda x: eval_jacobi(n, alpha, beta, x))
337:     return p
338: 
339: # Jacobi Polynomials shifted         G_n(p,q,x)
340: 
341: 
342: def roots_sh_jacobi(n, p1, q1, mu=False):
343:     '''Gauss-Jacobi (shifted) quadrature.
344: 
345:     Computes the sample points and weights for Gauss-Jacobi (shifted)
346:     quadrature. The sample points are the roots of the n-th degree shifted
347:     Jacobi polynomial, :math:`G^{p,q}_n(x)`.  These sample points and weights
348:     correctly integrate polynomials of degree :math:`2n - 1` or less over the
349:     interval :math:`[0, 1]` with weight function
350:     :math:`f(x) = (1 - x)^{p-q} x^{q-1}`
351: 
352:     Parameters
353:     ----------
354:     n : int
355:         quadrature order
356:     p1 : float
357:         (p1 - q1) must be > -1
358:     q1 : float
359:         q1 must be > 0
360:     mu : bool, optional
361:         If True, return the sum of the weights, optional.
362: 
363:     Returns
364:     -------
365:     x : ndarray
366:         Sample points
367:     w : ndarray
368:         Weights
369:     mu : float
370:         Sum of the weights
371: 
372:     See Also
373:     --------
374:     scipy.integrate.quadrature
375:     scipy.integrate.fixed_quad
376:     '''
377:     if (p1-q1) <= -1 or q1 <= 0:
378:         raise ValueError("(p - q) must be greater than -1, and q must be greater than 0.")
379:     x, w, m = roots_jacobi(n, p1-q1, q1-1, True)
380:     x = (x + 1) / 2
381:     scale = 2.0**p1
382:     w /= scale
383:     m /= scale
384:     if mu:
385:         return x, w, m
386:     else:
387:         return x, w
388: 
389: def sh_jacobi(n, p, q, monic=False):
390:     r'''Shifted Jacobi polynomial.
391: 
392:     Defined by
393: 
394:     .. math::
395: 
396:         G_n^{(p, q)}(x) 
397:           = \binom{2n + p - 1}{n}^{-1}P_n^{(p - q, q - 1)}(2x - 1),
398: 
399:     where :math:`P_n^{(\cdot, \cdot)}` is the nth Jacobi polynomial.
400: 
401:     Parameters
402:     ----------
403:     n : int
404:         Degree of the polynomial.
405:     p : float
406:         Parameter, must have :math:`p > q - 1`.
407:     q : float
408:         Parameter, must be greater than 0.
409:     monic : bool, optional
410:         If `True`, scale the leading coefficient to be 1. Default is
411:         `False`.
412: 
413:     Returns
414:     -------
415:     G : orthopoly1d
416:         Shifted Jacobi polynomial.
417: 
418:     Notes
419:     -----
420:     For fixed :math:`p, q`, the polynomials :math:`G_n^{(p, q)}` are
421:     orthogonal over :math:`[0, 1]` with weight function :math:`(1 -
422:     x)^{p - q}x^{q - 1}`.
423: 
424:     '''
425:     if n < 0:
426:         raise ValueError("n must be nonnegative.")
427: 
428:     wfunc = lambda x: (1.0 - x)**(p - q) * (x)**(q - 1.)
429:     if n == 0:
430:         return orthopoly1d([], [], 1.0, 1.0, wfunc, (-1, 1), monic,
431:                            eval_func=np.ones_like)
432:     n1 = n
433:     x, w, mu0 = roots_sh_jacobi(n1, p, q, mu=True)
434:     hn = _gam(n + 1) * _gam(n + q) * _gam(n + p) * _gam(n + p - q + 1)
435:     hn /= (2 * n + p) * (_gam(2 * n + p)**2)
436:     # kn = 1.0 in standard form so monic is redundant.  Kept for compatibility.
437:     kn = 1.0
438:     pp = orthopoly1d(x, w, hn, kn, wfunc=wfunc, limits=(0, 1), monic=monic,
439:                      eval_func=lambda x: eval_sh_jacobi(n, p, q, x))
440:     return pp
441: 
442: # Generalized Laguerre               L^(alpha)_n(x)
443: 
444: 
445: def roots_genlaguerre(n, alpha, mu=False):
446:     r'''Gauss-generalized Laguerre quadrature.
447: 
448:     Computes the sample points and weights for Gauss-generalized Laguerre
449:     quadrature. The sample points are the roots of the n-th degree generalized
450:     Laguerre polynomial, :math:`L^{\alpha}_n(x)`.  These sample points and
451:     weights correctly integrate polynomials of degree :math:`2n - 1` or less
452:     over the interval :math:`[0, \infty]` with weight function
453:     :math:`f(x) = x^{\alpha} e^{-x}`.
454: 
455:     Parameters
456:     ----------
457:     n : int
458:         quadrature order
459:     alpha : float
460:         alpha must be > -1
461:     mu : bool, optional
462:         If True, return the sum of the weights, optional.
463: 
464:     Returns
465:     -------
466:     x : ndarray
467:         Sample points
468:     w : ndarray
469:         Weights
470:     mu : float
471:         Sum of the weights
472: 
473:     See Also
474:     --------
475:     scipy.integrate.quadrature
476:     scipy.integrate.fixed_quad
477:     '''
478:     m = int(n)
479:     if n < 1 or n != m:
480:         raise ValueError("n must be a positive integer.")
481:     if alpha < -1:
482:         raise ValueError("alpha must be greater than -1.")
483: 
484:     mu0 = cephes.gamma(alpha + 1)
485: 
486:     if m == 1:
487:         x = np.array([alpha+1.0], 'd')
488:         w = np.array([mu0], 'd')
489:         if mu:
490:             return x, w, mu0
491:         else:
492:             return x, w
493: 
494:     an_func = lambda k: 2 * k + alpha + 1
495:     bn_func = lambda k: -np.sqrt(k * (k + alpha))
496:     f = lambda n, x: cephes.eval_genlaguerre(n, alpha, x)
497:     df = lambda n, x: (n*cephes.eval_genlaguerre(n, alpha, x)
498:                      - (n + alpha)*cephes.eval_genlaguerre(n-1, alpha, x))/x
499:     return _gen_roots_and_weights(m, mu0, an_func, bn_func, f, df, False, mu)
500: 
501: 
502: def genlaguerre(n, alpha, monic=False):
503:     r'''Generalized (associated) Laguerre polynomial.
504: 
505:     Defined to be the solution of
506: 
507:     .. math::
508:         x\frac{d^2}{dx^2}L_n^{(\alpha)} 
509:           + (\alpha + 1 - x)\frac{d}{dx}L_n^{(\alpha)}
510:           + nL_n^{(\alpha)} = 0,
511: 
512:     where :math:`\alpha > -1`; :math:`L_n^{(\alpha)}` is a polynomial
513:     of degree :math:`n`.
514: 
515:     Parameters
516:     ----------
517:     n : int
518:         Degree of the polynomial.
519:     alpha : float
520:         Parameter, must be greater than -1.
521:     monic : bool, optional
522:         If `True`, scale the leading coefficient to be 1. Default is
523:         `False`.
524: 
525:     Returns
526:     -------
527:     L : orthopoly1d
528:         Generalized Laguerre polynomial.
529: 
530:     Notes
531:     -----
532:     For fixed :math:`\alpha`, the polynomials :math:`L_n^{(\alpha)}`
533:     are orthogonal over :math:`[0, \infty)` with weight function
534:     :math:`e^{-x}x^\alpha`.
535: 
536:     The Laguerre polynomials are the special case where :math:`\alpha
537:     = 0`.
538: 
539:     See Also
540:     --------
541:     laguerre : Laguerre polynomial.
542: 
543:     '''
544:     if alpha <= -1:
545:         raise ValueError("alpha must be > -1")
546:     if n < 0:
547:         raise ValueError("n must be nonnegative.")
548: 
549:     if n == 0:
550:         n1 = n + 1
551:     else:
552:         n1 = n
553:     x, w, mu0 = roots_genlaguerre(n1, alpha, mu=True)
554:     wfunc = lambda x: exp(-x) * x**alpha
555:     if n == 0:
556:         x, w = [], []
557:     hn = _gam(n + alpha + 1) / _gam(n + 1)
558:     kn = (-1)**n / _gam(n + 1)
559:     p = orthopoly1d(x, w, hn, kn, wfunc, (0, inf), monic,
560:                     lambda x: eval_genlaguerre(n, alpha, x))
561:     return p
562: 
563: # Laguerre                      L_n(x)
564: 
565: 
566: def roots_laguerre(n, mu=False):
567:     r'''Gauss-Laguerre quadrature.
568: 
569:     Computes the sample points and weights for Gauss-Laguerre quadrature.
570:     The sample points are the roots of the n-th degree Laguerre polynomial,
571:     :math:`L_n(x)`.  These sample points and weights correctly integrate
572:     polynomials of degree :math:`2n - 1` or less over the interval
573:     :math:`[0, \infty]` with weight function :math:`f(x) = e^{-x}`.
574: 
575:     Parameters
576:     ----------
577:     n : int
578:         quadrature order
579:     mu : bool, optional
580:         If True, return the sum of the weights, optional.
581: 
582:     Returns
583:     -------
584:     x : ndarray
585:         Sample points
586:     w : ndarray
587:         Weights
588:     mu : float
589:         Sum of the weights
590: 
591:     See Also
592:     --------
593:     scipy.integrate.quadrature
594:     scipy.integrate.fixed_quad
595:     numpy.polynomial.laguerre.laggauss
596:     '''
597:     return roots_genlaguerre(n, 0.0, mu=mu)
598: 
599: 
600: def laguerre(n, monic=False):
601:     r'''Laguerre polynomial.
602: 
603:     Defined to be the solution of
604: 
605:     .. math::
606:         x\frac{d^2}{dx^2}L_n + (1 - x)\frac{d}{dx}L_n + nL_n = 0;
607: 
608:     :math:`L_n` is a polynomial of degree :math:`n`.
609: 
610:     Parameters
611:     ----------
612:     n : int
613:         Degree of the polynomial.
614:     monic : bool, optional
615:         If `True`, scale the leading coefficient to be 1. Default is
616:         `False`.
617: 
618:     Returns
619:     -------
620:     L : orthopoly1d
621:         Laguerre Polynomial.
622: 
623:     Notes
624:     -----
625:     The polynomials :math:`L_n` are orthogonal over :math:`[0,
626:     \infty)` with weight function :math:`e^{-x}`.
627: 
628:     '''
629:     if n < 0:
630:         raise ValueError("n must be nonnegative.")
631: 
632:     if n == 0:
633:         n1 = n + 1
634:     else:
635:         n1 = n
636:     x, w, mu0 = roots_laguerre(n1, mu=True)
637:     if n == 0:
638:         x, w = [], []
639:     hn = 1.0
640:     kn = (-1)**n / _gam(n + 1)
641:     p = orthopoly1d(x, w, hn, kn, lambda x: exp(-x), (0, inf), monic,
642:                     lambda x: eval_laguerre(n, x))
643:     return p
644: 
645: # Hermite  1                         H_n(x)
646: 
647: 
648: def roots_hermite(n, mu=False):
649:     r'''Gauss-Hermite (physicst's) quadrature.
650: 
651:     Computes the sample points and weights for Gauss-Hermite quadrature.
652:     The sample points are the roots of the n-th degree Hermite polynomial,
653:     :math:`H_n(x)`.  These sample points and weights correctly integrate
654:     polynomials of degree :math:`2n - 1` or less over the interval
655:     :math:`[-\infty, \infty]` with weight function :math:`f(x) = e^{-x^2}`.
656: 
657:     Parameters
658:     ----------
659:     n : int
660:         quadrature order
661:     mu : bool, optional
662:         If True, return the sum of the weights, optional.
663: 
664:     Returns
665:     -------
666:     x : ndarray
667:         Sample points
668:     w : ndarray
669:         Weights
670:     mu : float
671:         Sum of the weights
672: 
673:     Notes
674:     -----
675:     For small n up to 150 a modified version of the Golub-Welsch
676:     algorithm is used. Nodes are computed from the eigenvalue
677:     problem and improved by one step of a Newton iteration.
678:     The weights are computed from the well-known analytical formula.
679: 
680:     For n larger than 150 an optimal asymptotic algorithm is applied
681:     which computes nodes and weights in a numerically stable manner.
682:     The algorithm has linear runtime making computation for very
683:     large n (several thousand or more) feasible.
684: 
685:     See Also
686:     --------
687:     scipy.integrate.quadrature
688:     scipy.integrate.fixed_quad
689:     numpy.polynomial.hermite.hermgauss
690:     roots_hermitenorm
691: 
692:     References
693:     ----------
694:     .. [townsend.trogdon.olver-2014]
695:        Townsend, A. and Trogdon, T. and Olver, S. (2014)
696:        *Fast computation of Gauss quadrature nodes and
697:        weights on the whole real line*. :arXiv:`1410.5286`.
698: 
699:     .. [townsend.trogdon.olver-2015]
700:        Townsend, A. and Trogdon, T. and Olver, S. (2015)
701:        *Fast computation of Gauss quadrature nodes and
702:        weights on the whole real line*.
703:        IMA Journal of Numerical Analysis
704:        :doi:`10.1093/imanum/drv002`.
705:     '''
706:     m = int(n)
707:     if n < 1 or n != m:
708:         raise ValueError("n must be a positive integer.")
709: 
710:     mu0 = np.sqrt(np.pi)
711:     if n <= 150:
712:         an_func = lambda k: 0.0*k
713:         bn_func = lambda k: np.sqrt(k/2.0)
714:         f = cephes.eval_hermite
715:         df = lambda n, x: 2.0 * n * cephes.eval_hermite(n-1, x)
716:         return _gen_roots_and_weights(m, mu0, an_func, bn_func, f, df, True, mu)
717:     else:
718:         nodes, weights = _roots_hermite_asy(m)
719:         if mu:
720:             return nodes, weights, mu0
721:         else:
722:             return nodes, weights
723: 
724: 
725: def _compute_tauk(n, k, maxit=5):
726:     '''Helper function for Tricomi initial guesses
727: 
728:     For details, see formula 3.1 in lemma 3.1 in the
729:     original paper.
730: 
731:     Parameters
732:     ----------
733:     n : int
734:         Quadrature order
735:     k : ndarray of type int
736:         Index of roots :math:`\tau_k` to compute
737:     maxit : int
738:         Number of Newton maxit performed, the default
739:         value of 5 is sufficient.
740: 
741:     Returns
742:     -------
743:     tauk : ndarray
744:         Roots of equation 3.1
745: 
746:     See Also
747:     --------
748:     initial_nodes_a
749:     roots_hermite_asy
750:     '''
751:     a = n % 2 - 0.5
752:     c = (4.0*floor(n/2.0) - 4.0*k + 3.0)*pi / (4.0*floor(n/2.0) + 2.0*a + 2.0)
753:     f = lambda x: x - sin(x) - c
754:     df = lambda x: 1.0 - cos(x)
755:     xi = 0.5*pi
756:     for i in range(maxit):
757:         xi = xi - f(xi)/df(xi)
758:     return xi
759: 
760: 
761: def _initial_nodes_a(n, k):
762:     r'''Tricomi initial guesses
763: 
764:     Computes an initial approximation to the square of the `k`-th
765:     (positive) root :math:`x_k` of the Hermite polynomial :math:`H_n`
766:     of order :math:`n`. The formula is the one from lemma 3.1 in the
767:     original paper. The guesses are accurate except in the region
768:     near :math:`\sqrt{2n + 1}`.
769: 
770:     Parameters
771:     ----------
772:     n : int
773:         Quadrature order
774:     k : ndarray of type int
775:         Index of roots to compute
776: 
777:     Returns
778:     -------
779:     xksq : ndarray
780:         Square of the approximate roots
781: 
782:     See Also
783:     --------
784:     initial_nodes
785:     roots_hermite_asy
786:     '''
787:     tauk = _compute_tauk(n, k)
788:     sigk = cos(0.5*tauk)**2
789:     a = n % 2 - 0.5
790:     nu = 4.0*floor(n/2.0) + 2.0*a + 2.0
791:     # Initial approximation of Hermite roots (square)
792:     xksq = nu*sigk - 1.0/(3.0*nu) * (5.0/(4.0*(1.0-sigk)**2) - 1.0/(1.0-sigk) - 0.25)
793:     return xksq
794: 
795: 
796: def _initial_nodes_b(n, k):
797:     r'''Gatteschi initial guesses
798: 
799:     Computes an initial approximation to the square of the `k`-th
800:     (positive) root :math:`x_k` of the Hermite polynomial :math:`H_n`
801:     of order :math:`n`. The formula is the one from lemma 3.2 in the
802:     original paper. The guesses are accurate in the region just
803:     below :math:`\sqrt{2n + 1}`.
804: 
805:     Parameters
806:     ----------
807:     n : int
808:         Quadrature order
809:     k : ndarray of type int
810:         Index of roots to compute
811: 
812:     Returns
813:     -------
814:     xksq : ndarray
815:         Square of the approximate root
816: 
817:     See Also
818:     --------
819:     initial_nodes
820:     roots_hermite_asy
821:     '''
822:     a = n % 2 - 0.5
823:     nu = 4.0*floor(n/2.0) + 2.0*a + 2.0
824:     # Airy roots by approximation
825:     ak = specfun.airyzo(k.max(), 1)[0][::-1]
826:     # Initial approximation of Hermite roots (square)
827:     xksq = (nu +
828:             2.0**(2.0/3.0) * ak * nu**(1.0/3.0) +
829:             1.0/5.0 * 2.0**(4.0/3.0) * ak**2 * nu**(-1.0/3.0) +
830:             (9.0/140.0 - 12.0/175.0 * ak**3) * nu**(-1.0) +
831:             (16.0/1575.0 * ak + 92.0/7875.0 * ak**4) * 2.0**(2.0/3.0) * nu**(-5.0/3.0) -
832:             (15152.0/3031875.0 * ak**5 + 1088.0/121275.0 * ak**2) * 2.0**(1.0/3.0) * nu**(-7.0/3.0))
833:     return xksq
834: 
835: 
836: def _initial_nodes(n):
837:     '''Initial guesses for the Hermite roots
838: 
839:     Computes an initial approximation to the non-negative
840:     roots :math:`x_k` of the Hermite polynomial :math:`H_n`
841:     of order :math:`n`. The Tricomi and Gatteschi initial
842:     guesses are used in the region where they are accurate.
843: 
844:     Parameters
845:     ----------
846:     n : int
847:         Quadrature order
848: 
849:     Returns
850:     -------
851:     xk : ndarray
852:         Approximate roots
853: 
854:     See Also
855:     --------
856:     roots_hermite_asy
857:     '''
858:     # Turnover point
859:     # linear polynomial fit to error of 10, 25, 40, ..., 1000 point rules
860:     fit = 0.49082003*n - 4.37859653
861:     turnover = around(fit).astype(int)
862:     # Compute all approximations
863:     ia = arange(1, int(floor(n*0.5)+1))
864:     ib = ia[::-1]
865:     xasq = _initial_nodes_a(n, ia[:turnover+1])
866:     xbsq = _initial_nodes_b(n, ib[turnover+1:])
867:     # Combine
868:     iv = sqrt(hstack([xasq, xbsq]))
869:     # Central node is always zero
870:     if n % 2 == 1:
871:         iv = hstack([0.0, iv])
872:     return iv
873: 
874: 
875: def _pbcf(n, theta):
876:     r'''Asymptotic series expansion of parabolic cylinder function
877: 
878:     The implementation is based on sections 3.2 and 3.3 from the
879:     original paper. Compared to the published version this code
880:     adds one more term to the asymptotic series. The detailed
881:     formulas can be found at [parabolic-asymptotics]_. The evaluation
882:     is done in a transformed variable :math:`\theta := \arccos(t)`
883:     where :math:`t := x / \mu` and :math:`\mu := \sqrt{2n + 1}`.
884: 
885:     Parameters
886:     ----------
887:     n : int
888:         Quadrature order
889:     theta : ndarray
890:         Transformed position variable
891: 
892:     Returns
893:     -------
894:     U : ndarray
895:         Value of the parabolic cylinder function :math:`U(a, \theta)`.
896:     Ud : ndarray
897:         Value of the derivative :math:`U^{\prime}(a, \theta)` of
898:         the parabolic cylinder function.
899: 
900:     See Also
901:     --------
902:     roots_hermite_asy
903: 
904:     References
905:     ----------
906:     .. [parabolic-asymptotics]
907:        http://dlmf.nist.gov/12.10#vii
908:     '''
909:     st = sin(theta)
910:     ct = cos(theta)
911:     # http://dlmf.nist.gov/12.10#vii
912:     mu = 2.0*n + 1.0
913:     # http://dlmf.nist.gov/12.10#E23
914:     eta = 0.5*theta - 0.5*st*ct
915:     # http://dlmf.nist.gov/12.10#E39
916:     zeta = -(3.0*eta/2.0) ** (2.0/3.0)
917:     # http://dlmf.nist.gov/12.10#E40
918:     phi = (-zeta / st**2) ** (0.25)
919:     # Coefficients
920:     # http://dlmf.nist.gov/12.10#E43
921:     a0 = 1.0
922:     a1 = 0.10416666666666666667
923:     a2 = 0.08355034722222222222
924:     a3 = 0.12822657455632716049
925:     a4 = 0.29184902646414046425
926:     a5 = 0.88162726744375765242
927:     b0 = 1.0
928:     b1 = -0.14583333333333333333
929:     b2 = -0.09874131944444444444
930:     b3 = -0.14331205391589506173
931:     b4 = -0.31722720267841354810
932:     b5 = -0.94242914795712024914
933:     # Polynomials
934:     # http://dlmf.nist.gov/12.10#E9
935:     # http://dlmf.nist.gov/12.10#E10
936:     ctp = ct ** arange(16).reshape((-1,1))
937:     u0 = 1.0
938:     u1 = (1.0*ctp[3,:] - 6.0*ct) / 24.0
939:     u2 = (-9.0*ctp[4,:] + 249.0*ctp[2,:] + 145.0) / 1152.0
940:     u3 = (-4042.0*ctp[9,:] + 18189.0*ctp[7,:] - 28287.0*ctp[5,:] - 151995.0*ctp[3,:] - 259290.0*ct) / 414720.0
941:     u4 = (72756.0*ctp[10,:] - 321339.0*ctp[8,:] - 154982.0*ctp[6,:] + 50938215.0*ctp[4,:] + 122602962.0*ctp[2,:] + 12773113.0) / 39813120.0
942:     u5 = (82393456.0*ctp[15,:] - 617950920.0*ctp[13,:] + 1994971575.0*ctp[11,:] - 3630137104.0*ctp[9,:] + 4433574213.0*ctp[7,:]
943:           - 37370295816.0*ctp[5,:] - 119582875013.0*ctp[3,:] - 34009066266.0*ct) / 6688604160.0
944:     v0 = 1.0
945:     v1 = (1.0*ctp[3,:] + 6.0*ct) / 24.0
946:     v2 = (15.0*ctp[4,:] - 327.0*ctp[2,:] - 143.0) / 1152.0
947:     v3 = (-4042.0*ctp[9,:] + 18189.0*ctp[7,:] - 36387.0*ctp[5,:] + 238425.0*ctp[3,:] + 259290.0*ct) / 414720.0
948:     v4 = (-121260.0*ctp[10,:] + 551733.0*ctp[8,:] - 151958.0*ctp[6,:] - 57484425.0*ctp[4,:] - 132752238.0*ctp[2,:] - 12118727) / 39813120.0
949:     v5 = (82393456.0*ctp[15,:] - 617950920.0*ctp[13,:] + 2025529095.0*ctp[11,:] - 3750839308.0*ctp[9,:] + 3832454253.0*ctp[7,:]
950:           + 35213253348.0*ctp[5,:] + 130919230435.0*ctp[3,:] + 34009066266*ct) / 6688604160.0
951:     # Airy Evaluation (Bi and Bip unused)
952:     Ai, Aip, Bi, Bip = airy(mu**(4.0/6.0) * zeta)
953:     # Prefactor for U
954:     P = 2.0*sqrt(pi) * mu**(1.0/6.0) * phi
955:     # Terms for U
956:     # http://dlmf.nist.gov/12.10#E42
957:     phip = phi ** arange(6, 31, 6).reshape((-1,1))
958:     A0 = b0*u0
959:     A1 = (b2*u0 + phip[0,:]*b1*u1 + phip[1,:]*b0*u2) / zeta**3
960:     A2 = (b4*u0 + phip[0,:]*b3*u1 + phip[1,:]*b2*u2 + phip[2,:]*b1*u3 + phip[3,:]*b0*u4) / zeta**6
961:     B0 = -(a1*u0 + phip[0,:]*a0*u1) / zeta**2
962:     B1 = -(a3*u0 + phip[0,:]*a2*u1 + phip[1,:]*a1*u2 + phip[2,:]*a0*u3) / zeta**5
963:     B2 = -(a5*u0 + phip[0,:]*a4*u1 + phip[1,:]*a3*u2 + phip[2,:]*a2*u3 + phip[3,:]*a1*u4 + phip[4,:]*a0*u5) / zeta**8
964:     # U
965:     # http://dlmf.nist.gov/12.10#E35
966:     U = P * (Ai * (A0 + A1/mu**2.0 + A2/mu**4.0) +
967:              Aip * (B0 + B1/mu**2.0 + B2/mu**4.0) / mu**(8.0/6.0))
968:     # Prefactor for derivative of U
969:     Pd = sqrt(2.0*pi) * mu**(2.0/6.0) / phi
970:     # Terms for derivative of U
971:     # http://dlmf.nist.gov/12.10#E46
972:     C0 = -(b1*v0 + phip[0,:]*b0*v1) / zeta
973:     C1 = -(b3*v0 + phip[0,:]*b2*v1 + phip[1,:]*b1*v2 + phip[2,:]*b0*v3) / zeta**4
974:     C2 = -(b5*v0 + phip[0,:]*b4*v1 + phip[1,:]*b3*v2 + phip[2,:]*b2*v3 + phip[3,:]*b1*v4 + phip[4,:]*b0*v5) / zeta**7
975:     D0 = a0*v0
976:     D1 = (a2*v0 + phip[0,:]*a1*v1 + phip[1,:]*a0*v2) / zeta**3
977:     D2 = (a4*v0 + phip[0,:]*a3*v1 + phip[1,:]*a2*v2 + phip[2,:]*a1*v3 + phip[3,:]*a0*v4) / zeta**6
978:     # Derivative of U
979:     # http://dlmf.nist.gov/12.10#E36
980:     Ud = Pd * (Ai * (C0 + C1/mu**2.0 + C2/mu**4.0) / mu**(4.0/6.0) +
981:                Aip * (D0 + D1/mu**2.0 + D2/mu**4.0))
982:     return U, Ud
983: 
984: 
985: def _newton(n, x_initial, maxit=5):
986:     '''Newton iteration for polishing the asymptotic approximation
987:     to the zeros of the Hermite polynomials.
988: 
989:     Parameters
990:     ----------
991:     n : int
992:         Quadrature order
993:     x_initial : ndarray
994:         Initial guesses for the roots
995:     maxit : int
996:         Maximal number of Newton iterations.
997:         The default 5 is sufficient, usually
998:         only one or two steps are needed.
999: 
1000:     Returns
1001:     -------
1002:     nodes : ndarray
1003:         Quadrature nodes
1004:     weights : ndarray
1005:         Quadrature weights
1006: 
1007:     See Also
1008:     --------
1009:     roots_hermite_asy
1010:     '''
1011:     # Variable transformation
1012:     mu = sqrt(2.0*n + 1.0)
1013:     t = x_initial / mu
1014:     theta = arccos(t)
1015:     # Newton iteration
1016:     for i in range(maxit):
1017:         u, ud = _pbcf(n, theta)
1018:         dtheta = u / (sqrt(2.0) * mu * sin(theta) * ud)
1019:         theta = theta + dtheta
1020:         if max(abs(dtheta)) < 1e-14:
1021:             break
1022:     # Undo variable transformation
1023:     x = mu * cos(theta)
1024:     # Central node is always zero
1025:     if n % 2 == 1:
1026:         x[0] = 0.0
1027:     # Compute weights
1028:     w = exp(-x**2) / (2.0*ud**2)
1029:     return x, w
1030: 
1031: 
1032: def _roots_hermite_asy(n):
1033:     r'''Gauss-Hermite (physicst's) quadrature for large n.
1034: 
1035:     Computes the sample points and weights for Gauss-Hermite quadrature.
1036:     The sample points are the roots of the n-th degree Hermite polynomial,
1037:     :math:`H_n(x)`.  These sample points and weights correctly integrate
1038:     polynomials of degree :math:`2n - 1` or less over the interval
1039:     :math:`[-\infty, \infty]` with weight function :math:`f(x) = e^{-x^2}`.
1040: 
1041:     This method relies on asymptotic expansions which work best for n > 150.
1042:     The algorithm has linear runtime making computation for very large n
1043:     feasible.
1044: 
1045:     Parameters
1046:     ----------
1047:     n : int
1048:         quadrature order
1049: 
1050:     Returns
1051:     -------
1052:     nodes : ndarray
1053:         Quadrature nodes
1054:     weights : ndarray
1055:         Quadrature weights
1056: 
1057:     See Also
1058:     --------
1059:     roots_hermite
1060: 
1061:     References
1062:     ----------
1063:     .. [townsend.trogdon.olver-2014]
1064:        Townsend, A. and Trogdon, T. and Olver, S. (2014)
1065:        *Fast computation of Gauss quadrature nodes and
1066:        weights on the whole real line*. :arXiv:`1410.5286`.
1067: 
1068:     .. [townsend.trogdon.olver-2015]
1069:        Townsend, A. and Trogdon, T. and Olver, S. (2015)
1070:        *Fast computation of Gauss quadrature nodes and
1071:        weights on the whole real line*.
1072:        IMA Journal of Numerical Analysis
1073:        :doi:`10.1093/imanum/drv002`.
1074:     '''
1075:     iv = _initial_nodes(n)
1076:     nodes, weights = _newton(n, iv)
1077:     # Combine with negative parts
1078:     if n % 2 == 0:
1079:         nodes = hstack([-nodes[::-1], nodes])
1080:         weights = hstack([weights[::-1], weights])
1081:     else:
1082:         nodes = hstack([-nodes[-1:0:-1], nodes])
1083:         weights = hstack([weights[-1:0:-1], weights])
1084:     # Scale weights
1085:     weights *= sqrt(pi) / sum(weights)
1086:     return nodes, weights
1087: 
1088: 
1089: def hermite(n, monic=False):
1090:     r'''Physicist's Hermite polynomial.
1091: 
1092:     Defined by
1093: 
1094:     .. math::
1095: 
1096:         H_n(x) = (-1)^ne^{x^2}\frac{d^n}{dx^n}e^{-x^2};
1097: 
1098:     :math:`H_n` is a polynomial of degree :math:`n`.
1099: 
1100:     Parameters
1101:     ----------
1102:     n : int
1103:         Degree of the polynomial.
1104:     monic : bool, optional
1105:         If `True`, scale the leading coefficient to be 1. Default is
1106:         `False`.
1107: 
1108:     Returns
1109:     -------
1110:     H : orthopoly1d
1111:         Hermite polynomial.
1112: 
1113:     Notes
1114:     -----
1115:     The polynomials :math:`H_n` are orthogonal over :math:`(-\infty,
1116:     \infty)` with weight function :math:`e^{-x^2}`.
1117: 
1118:     '''
1119:     if n < 0:
1120:         raise ValueError("n must be nonnegative.")
1121: 
1122:     if n == 0:
1123:         n1 = n + 1
1124:     else:
1125:         n1 = n
1126:     x, w, mu0 = roots_hermite(n1, mu=True)
1127:     wfunc = lambda x: exp(-x * x)
1128:     if n == 0:
1129:         x, w = [], []
1130:     hn = 2**n * _gam(n + 1) * sqrt(pi)
1131:     kn = 2**n
1132:     p = orthopoly1d(x, w, hn, kn, wfunc, (-inf, inf), monic,
1133:                     lambda x: eval_hermite(n, x))
1134:     return p
1135: 
1136: # Hermite  2                         He_n(x)
1137: 
1138: 
1139: def roots_hermitenorm(n, mu=False):
1140:     r'''Gauss-Hermite (statistician's) quadrature.
1141: 
1142:     Computes the sample points and weights for Gauss-Hermite quadrature.
1143:     The sample points are the roots of the n-th degree Hermite polynomial,
1144:     :math:`He_n(x)`.  These sample points and weights correctly integrate
1145:     polynomials of degree :math:`2n - 1` or less over the interval
1146:     :math:`[-\infty, \infty]` with weight function :math:`f(x) = e^{-x^2/2}`.
1147: 
1148:     Parameters
1149:     ----------
1150:     n : int
1151:         quadrature order
1152:     mu : bool, optional
1153:         If True, return the sum of the weights, optional.
1154: 
1155:     Returns
1156:     -------
1157:     x : ndarray
1158:         Sample points
1159:     w : ndarray
1160:         Weights
1161:     mu : float
1162:         Sum of the weights
1163: 
1164:     Notes
1165:     -----
1166:     For small n up to 150 a modified version of the Golub-Welsch
1167:     algorithm is used. Nodes are computed from the eigenvalue
1168:     problem and improved by one step of a Newton iteration.
1169:     The weights are computed from the well-known analytical formula.
1170: 
1171:     For n larger than 150 an optimal asymptotic algorithm is used
1172:     which computes nodes and weights in a numerical stable manner.
1173:     The algorithm has linear runtime making computation for very
1174:     large n (several thousand or more) feasible.
1175: 
1176:     See Also
1177:     --------
1178:     scipy.integrate.quadrature
1179:     scipy.integrate.fixed_quad
1180:     numpy.polynomial.hermite_e.hermegauss
1181:     '''
1182:     m = int(n)
1183:     if n < 1 or n != m:
1184:         raise ValueError("n must be a positive integer.")
1185: 
1186:     mu0 = np.sqrt(2.0*np.pi)
1187:     if n <= 150:
1188:         an_func = lambda k: 0.0*k
1189:         bn_func = lambda k: np.sqrt(k)
1190:         f = cephes.eval_hermitenorm
1191:         df = lambda n, x: n * cephes.eval_hermitenorm(n-1, x)
1192:         return _gen_roots_and_weights(m, mu0, an_func, bn_func, f, df, True, mu)
1193:     else:
1194:         nodes, weights = _roots_hermite_asy(m)
1195:         # Transform
1196:         nodes *= sqrt(2)
1197:         weights *= sqrt(2)
1198:         if mu:
1199:             return nodes, weights, mu0
1200:         else:
1201:             return nodes, weights
1202: 
1203: 
1204: def hermitenorm(n, monic=False):
1205:     r'''Normalized (probabilist's) Hermite polynomial.
1206: 
1207:     Defined by
1208: 
1209:     .. math::
1210: 
1211:         He_n(x) = (-1)^ne^{x^2/2}\frac{d^n}{dx^n}e^{-x^2/2};
1212: 
1213:     :math:`He_n` is a polynomial of degree :math:`n`.
1214: 
1215:     Parameters
1216:     ----------
1217:     n : int
1218:         Degree of the polynomial.
1219:     monic : bool, optional
1220:         If `True`, scale the leading coefficient to be 1. Default is
1221:         `False`.
1222: 
1223:     Returns
1224:     -------
1225:     He : orthopoly1d
1226:         Hermite polynomial.
1227: 
1228:     Notes
1229:     -----
1230: 
1231:     The polynomials :math:`He_n` are orthogonal over :math:`(-\infty,
1232:     \infty)` with weight function :math:`e^{-x^2/2}`.
1233: 
1234:     '''
1235:     if n < 0:
1236:         raise ValueError("n must be nonnegative.")
1237: 
1238:     if n == 0:
1239:         n1 = n + 1
1240:     else:
1241:         n1 = n
1242:     x, w, mu0 = roots_hermitenorm(n1, mu=True)
1243:     wfunc = lambda x: exp(-x * x / 2.0)
1244:     if n == 0:
1245:         x, w = [], []
1246:     hn = sqrt(2 * pi) * _gam(n + 1)
1247:     kn = 1.0
1248:     p = orthopoly1d(x, w, hn, kn, wfunc=wfunc, limits=(-inf, inf), monic=monic,
1249:                     eval_func=lambda x: eval_hermitenorm(n, x))
1250:     return p
1251: 
1252: # The remainder of the polynomials can be derived from the ones above.
1253: 
1254: # Ultraspherical (Gegenbauer)        C^(alpha)_n(x)
1255: 
1256: 
1257: def roots_gegenbauer(n, alpha, mu=False):
1258:     r'''Gauss-Gegenbauer quadrature.
1259: 
1260:     Computes the sample points and weights for Gauss-Gegenbauer quadrature.
1261:     The sample points are the roots of the n-th degree Gegenbauer polynomial,
1262:     :math:`C^{\alpha}_n(x)`.  These sample points and weights correctly
1263:     integrate polynomials of degree :math:`2n - 1` or less over the interval
1264:     :math:`[-1, 1]` with weight function
1265:     :math:`f(x) = (1 - x^2)^{\alpha - 1/2}`.
1266: 
1267:     Parameters
1268:     ----------
1269:     n : int
1270:         quadrature order
1271:     alpha : float
1272:         alpha must be > -0.5
1273:     mu : bool, optional
1274:         If True, return the sum of the weights, optional.
1275: 
1276:     Returns
1277:     -------
1278:     x : ndarray
1279:         Sample points
1280:     w : ndarray
1281:         Weights
1282:     mu : float
1283:         Sum of the weights
1284: 
1285:     See Also
1286:     --------
1287:     scipy.integrate.quadrature
1288:     scipy.integrate.fixed_quad
1289:     '''
1290:     m = int(n)
1291:     if n < 1 or n != m:
1292:         raise ValueError("n must be a positive integer.")
1293:     if alpha < -0.5:
1294:         raise ValueError("alpha must be greater than -0.5.")
1295:     elif alpha == 0.0:
1296:         # C(n,0,x) == 0 uniformly, however, as alpha->0, C(n,alpha,x)->T(n,x)
1297:         # strictly, we should just error out here, since the roots are not
1298:         # really defined, but we used to return something useful, so let's
1299:         # keep doing so.
1300:         return roots_chebyt(n, mu)
1301: 
1302:     mu0 = np.sqrt(np.pi) * cephes.gamma(alpha + 0.5) / cephes.gamma(alpha + 1)
1303:     an_func = lambda k: 0.0 * k
1304:     bn_func = lambda k: np.sqrt(k * (k + 2 * alpha - 1)
1305:                         / (4 * (k + alpha) * (k + alpha - 1)))
1306:     f = lambda n, x: cephes.eval_gegenbauer(n, alpha, x)
1307:     df = lambda n, x: (-n*x*cephes.eval_gegenbauer(n, alpha, x)
1308:          + (n + 2*alpha - 1)*cephes.eval_gegenbauer(n-1, alpha, x))/(1-x**2)
1309:     return _gen_roots_and_weights(m, mu0, an_func, bn_func, f, df, True, mu)
1310: 
1311: 
1312: def gegenbauer(n, alpha, monic=False):
1313:     r'''Gegenbauer (ultraspherical) polynomial.
1314: 
1315:     Defined to be the solution of
1316: 
1317:     .. math::
1318:         (1 - x^2)\frac{d^2}{dx^2}C_n^{(\alpha)}
1319:           - (2\alpha + 1)x\frac{d}{dx}C_n^{(\alpha)}
1320:           + n(n + 2\alpha)C_n^{(\alpha)} = 0
1321: 
1322:     for :math:`\alpha > -1/2`; :math:`C_n^{(\alpha)}` is a polynomial
1323:     of degree :math:`n`.
1324: 
1325:     Parameters
1326:     ----------
1327:     n : int
1328:         Degree of the polynomial.
1329:     monic : bool, optional
1330:         If `True`, scale the leading coefficient to be 1. Default is
1331:         `False`.
1332: 
1333:     Returns
1334:     -------
1335:     C : orthopoly1d
1336:         Gegenbauer polynomial.
1337: 
1338:     Notes
1339:     -----
1340:     The polynomials :math:`C_n^{(\alpha)}` are orthogonal over
1341:     :math:`[-1,1]` with weight function :math:`(1 - x^2)^{(\alpha -
1342:     1/2)}`.
1343: 
1344:     '''
1345:     base = jacobi(n, alpha - 0.5, alpha - 0.5, monic=monic)
1346:     if monic:
1347:         return base
1348:     #  Abrahmowitz and Stegan 22.5.20
1349:     factor = (_gam(2*alpha + n) * _gam(alpha + 0.5) /
1350:               _gam(2*alpha) / _gam(alpha + 0.5 + n))
1351:     base._scale(factor)
1352:     base.__dict__['_eval_func'] = lambda x: eval_gegenbauer(float(n), alpha, x)
1353:     return base
1354: 
1355: # Chebyshev of the first kind: T_n(x) =
1356: #     n! sqrt(pi) / _gam(n+1./2)* P^(-1/2,-1/2)_n(x)
1357: # Computed anew.
1358: 
1359: 
1360: def roots_chebyt(n, mu=False):
1361:     r'''Gauss-Chebyshev (first kind) quadrature.
1362: 
1363:     Computes the sample points and weights for Gauss-Chebyshev quadrature.
1364:     The sample points are the roots of the n-th degree Chebyshev polynomial of
1365:     the first kind, :math:`T_n(x)`.  These sample points and weights correctly
1366:     integrate polynomials of degree :math:`2n - 1` or less over the interval
1367:     :math:`[-1, 1]` with weight function :math:`f(x) = 1/\sqrt{1 - x^2}`.
1368: 
1369:     Parameters
1370:     ----------
1371:     n : int
1372:         quadrature order
1373:     mu : bool, optional
1374:         If True, return the sum of the weights, optional.
1375: 
1376:     Returns
1377:     -------
1378:     x : ndarray
1379:         Sample points
1380:     w : ndarray
1381:         Weights
1382:     mu : float
1383:         Sum of the weights
1384: 
1385:     See Also
1386:     --------
1387:     scipy.integrate.quadrature
1388:     scipy.integrate.fixed_quad
1389:     numpy.polynomial.chebyshev.chebgauss
1390:     '''
1391:     m = int(n)
1392:     if n < 1 or n != m:
1393:         raise ValueError('n must be a positive integer.')
1394:     x = np.cos(np.arange(2 * m - 1, 0, -2) * pi / (2 * m))
1395:     w = np.empty_like(x)
1396:     w.fill(pi/m)
1397:     if mu:
1398:         return x, w, pi
1399:     else:
1400:         return x, w
1401: 
1402: 
1403: def chebyt(n, monic=False):
1404:     r'''Chebyshev polynomial of the first kind.
1405: 
1406:     Defined to be the solution of
1407: 
1408:     .. math::
1409:         (1 - x^2)\frac{d^2}{dx^2}T_n - x\frac{d}{dx}T_n + n^2T_n = 0;
1410: 
1411:     :math:`T_n` is a polynomial of degree :math:`n`.
1412: 
1413:     Parameters
1414:     ----------
1415:     n : int
1416:         Degree of the polynomial.
1417:     monic : bool, optional
1418:         If `True`, scale the leading coefficient to be 1. Default is
1419:         `False`.
1420: 
1421:     Returns
1422:     -------
1423:     T : orthopoly1d
1424:         Chebyshev polynomial of the first kind.
1425: 
1426:     Notes
1427:     -----
1428:     The polynomials :math:`T_n` are orthogonal over :math:`[-1, 1]`
1429:     with weight function :math:`(1 - x^2)^{-1/2}`.
1430: 
1431:     See Also
1432:     --------
1433:     chebyu : Chebyshev polynomial of the second kind.
1434: 
1435:     '''
1436:     if n < 0:
1437:         raise ValueError("n must be nonnegative.")
1438: 
1439:     wfunc = lambda x: 1.0 / sqrt(1 - x * x)
1440:     if n == 0:
1441:         return orthopoly1d([], [], pi, 1.0, wfunc, (-1, 1), monic,
1442:                            lambda x: eval_chebyt(n, x))
1443:     n1 = n
1444:     x, w, mu = roots_chebyt(n1, mu=True)
1445:     hn = pi / 2
1446:     kn = 2**(n - 1)
1447:     p = orthopoly1d(x, w, hn, kn, wfunc, (-1, 1), monic,
1448:                     lambda x: eval_chebyt(n, x))
1449:     return p
1450: 
1451: # Chebyshev of the second kind
1452: #    U_n(x) = (n+1)! sqrt(pi) / (2*_gam(n+3./2)) * P^(1/2,1/2)_n(x)
1453: 
1454: 
1455: def roots_chebyu(n, mu=False):
1456:     r'''Gauss-Chebyshev (second kind) quadrature.
1457: 
1458:     Computes the sample points and weights for Gauss-Chebyshev quadrature.
1459:     The sample points are the roots of the n-th degree Chebyshev polynomial of
1460:     the second kind, :math:`U_n(x)`.  These sample points and weights correctly
1461:     integrate polynomials of degree :math:`2n - 1` or less over the interval
1462:     :math:`[-1, 1]` with weight function :math:`f(x) = \sqrt{1 - x^2}`.
1463: 
1464:     Parameters
1465:     ----------
1466:     n : int
1467:         quadrature order
1468:     mu : bool, optional
1469:         If True, return the sum of the weights, optional.
1470: 
1471:     Returns
1472:     -------
1473:     x : ndarray
1474:         Sample points
1475:     w : ndarray
1476:         Weights
1477:     mu : float
1478:         Sum of the weights
1479: 
1480:     See Also
1481:     --------
1482:     scipy.integrate.quadrature
1483:     scipy.integrate.fixed_quad
1484:     '''
1485:     m = int(n)
1486:     if n < 1 or n != m:
1487:         raise ValueError('n must be a positive integer.')
1488:     t = np.arange(m, 0, -1) * pi / (m + 1)
1489:     x = np.cos(t)
1490:     w = pi * np.sin(t)**2 / (m + 1)
1491:     if mu:
1492:         return x, w, pi / 2
1493:     else:
1494:         return x, w
1495: 
1496: 
1497: def chebyu(n, monic=False):
1498:     r'''Chebyshev polynomial of the second kind.
1499: 
1500:     Defined to be the solution of
1501: 
1502:     .. math::
1503:         (1 - x^2)\frac{d^2}{dx^2}U_n - 3x\frac{d}{dx}U_n
1504:           + n(n + 2)U_n = 0;
1505: 
1506:     :math:`U_n` is a polynomial of degree :math:`n`.
1507: 
1508:     Parameters
1509:     ----------
1510:     n : int
1511:         Degree of the polynomial.
1512:     monic : bool, optional
1513:         If `True`, scale the leading coefficient to be 1. Default is
1514:         `False`.
1515: 
1516:     Returns
1517:     -------
1518:     U : orthopoly1d
1519:         Chebyshev polynomial of the second kind.
1520: 
1521:     Notes
1522:     -----
1523:     The polynomials :math:`U_n` are orthogonal over :math:`[-1, 1]`
1524:     with weight function :math:`(1 - x^2)^{1/2}`.
1525: 
1526:     See Also
1527:     --------
1528:     chebyt : Chebyshev polynomial of the first kind.
1529: 
1530:     '''
1531:     base = jacobi(n, 0.5, 0.5, monic=monic)
1532:     if monic:
1533:         return base
1534:     factor = sqrt(pi) / 2.0 * _gam(n + 2) / _gam(n + 1.5)
1535:     base._scale(factor)
1536:     return base
1537: 
1538: # Chebyshev of the first kind        C_n(x)
1539: 
1540: 
1541: def roots_chebyc(n, mu=False):
1542:     r'''Gauss-Chebyshev (first kind) quadrature.
1543: 
1544:     Computes the sample points and weights for Gauss-Chebyshev quadrature.
1545:     The sample points are the roots of the n-th degree Chebyshev polynomial of
1546:     the first kind, :math:`C_n(x)`.  These sample points and weights correctly
1547:     integrate polynomials of degree :math:`2n - 1` or less over the interval
1548:     :math:`[-2, 2]` with weight function :math:`f(x) = 1/\sqrt{1 - (x/2)^2}`.
1549: 
1550:     Parameters
1551:     ----------
1552:     n : int
1553:         quadrature order
1554:     mu : bool, optional
1555:         If True, return the sum of the weights, optional.
1556: 
1557:     Returns
1558:     -------
1559:     x : ndarray
1560:         Sample points
1561:     w : ndarray
1562:         Weights
1563:     mu : float
1564:         Sum of the weights
1565: 
1566:     See Also
1567:     --------
1568:     scipy.integrate.quadrature
1569:     scipy.integrate.fixed_quad
1570:     '''
1571:     x, w, m = roots_chebyt(n, True)
1572:     x *= 2
1573:     w *= 2
1574:     m *= 2
1575:     if mu:
1576:         return x, w, m
1577:     else:
1578:         return x, w
1579: 
1580: 
1581: def chebyc(n, monic=False):
1582:     r'''Chebyshev polynomial of the first kind on :math:`[-2, 2]`.
1583: 
1584:     Defined as :math:`C_n(x) = 2T_n(x/2)`, where :math:`T_n` is the
1585:     nth Chebychev polynomial of the first kind.
1586: 
1587:     Parameters
1588:     ----------
1589:     n : int
1590:         Degree of the polynomial.
1591:     monic : bool, optional
1592:         If `True`, scale the leading coefficient to be 1. Default is
1593:         `False`.
1594: 
1595:     Returns
1596:     -------
1597:     C : orthopoly1d
1598:         Chebyshev polynomial of the first kind on :math:`[-2, 2]`.
1599: 
1600:     Notes
1601:     -----
1602:     The polynomials :math:`C_n(x)` are orthogonal over :math:`[-2, 2]`
1603:     with weight function :math:`1/\sqrt{1 - (x/2)^2}`.
1604: 
1605:     See Also
1606:     --------
1607:     chebyt : Chebyshev polynomial of the first kind.
1608: 
1609:     References
1610:     ----------
1611:     .. [1] Abramowitz and Stegun, "Handbook of Mathematical Functions"
1612:            Section 22. National Bureau of Standards, 1972.
1613: 
1614:     '''
1615:     if n < 0:
1616:         raise ValueError("n must be nonnegative.")
1617: 
1618:     if n == 0:
1619:         n1 = n + 1
1620:     else:
1621:         n1 = n
1622:     x, w, mu0 = roots_chebyc(n1, mu=True)
1623:     if n == 0:
1624:         x, w = [], []
1625:     hn = 4 * pi * ((n == 0) + 1)
1626:     kn = 1.0
1627:     p = orthopoly1d(x, w, hn, kn,
1628:                     wfunc=lambda x: 1.0 / sqrt(1 - x * x / 4.0),
1629:                     limits=(-2, 2), monic=monic)
1630:     if not monic:
1631:         p._scale(2.0 / p(2))
1632:         p.__dict__['_eval_func'] = lambda x: eval_chebyc(n, x)
1633:     return p
1634: 
1635: # Chebyshev of the second kind       S_n(x)
1636: 
1637: 
1638: def roots_chebys(n, mu=False):
1639:     r'''Gauss-Chebyshev (second kind) quadrature.
1640: 
1641:     Computes the sample points and weights for Gauss-Chebyshev quadrature.
1642:     The sample points are the roots of the n-th degree Chebyshev polynomial of
1643:     the second kind, :math:`S_n(x)`.  These sample points and weights correctly
1644:     integrate polynomials of degree :math:`2n - 1` or less over the interval
1645:     :math:`[-2, 2]` with weight function :math:`f(x) = \sqrt{1 - (x/2)^2}`.
1646: 
1647:     Parameters
1648:     ----------
1649:     n : int
1650:         quadrature order
1651:     mu : bool, optional
1652:         If True, return the sum of the weights, optional.
1653: 
1654:     Returns
1655:     -------
1656:     x : ndarray
1657:         Sample points
1658:     w : ndarray
1659:         Weights
1660:     mu : float
1661:         Sum of the weights
1662: 
1663:     See Also
1664:     --------
1665:     scipy.integrate.quadrature
1666:     scipy.integrate.fixed_quad
1667:     '''
1668:     x, w, m = roots_chebyu(n, True)
1669:     x *= 2
1670:     w *= 2
1671:     m *= 2
1672:     if mu:
1673:         return x, w, m
1674:     else:
1675:         return x, w
1676: 
1677: 
1678: def chebys(n, monic=False):
1679:     r'''Chebyshev polynomial of the second kind on :math:`[-2, 2]`.
1680: 
1681:     Defined as :math:`S_n(x) = U_n(x/2)` where :math:`U_n` is the
1682:     nth Chebychev polynomial of the second kind.
1683: 
1684:     Parameters
1685:     ----------
1686:     n : int
1687:         Degree of the polynomial.
1688:     monic : bool, optional
1689:         If `True`, scale the leading coefficient to be 1. Default is
1690:         `False`.
1691: 
1692:     Returns
1693:     -------
1694:     S : orthopoly1d
1695:         Chebyshev polynomial of the second kind on :math:`[-2, 2]`.
1696: 
1697:     Notes
1698:     -----
1699:     The polynomials :math:`S_n(x)` are orthogonal over :math:`[-2, 2]`
1700:     with weight function :math:`\sqrt{1 - (x/2)}^2`.
1701: 
1702:     See Also
1703:     --------
1704:     chebyu : Chebyshev polynomial of the second kind
1705: 
1706:     References
1707:     ----------
1708:     .. [1] Abramowitz and Stegun, "Handbook of Mathematical Functions"
1709:            Section 22. National Bureau of Standards, 1972.
1710: 
1711:     '''
1712:     if n < 0:
1713:         raise ValueError("n must be nonnegative.")
1714: 
1715:     if n == 0:
1716:         n1 = n + 1
1717:     else:
1718:         n1 = n
1719:     x, w, mu0 = roots_chebys(n1, mu=True)
1720:     if n == 0:
1721:         x, w = [], []
1722:     hn = pi
1723:     kn = 1.0
1724:     p = orthopoly1d(x, w, hn, kn,
1725:                     wfunc=lambda x: sqrt(1 - x * x / 4.0),
1726:                     limits=(-2, 2), monic=monic)
1727:     if not monic:
1728:         factor = (n + 1.0) / p(2)
1729:         p._scale(factor)
1730:         p.__dict__['_eval_func'] = lambda x: eval_chebys(n, x)
1731:     return p
1732: 
1733: # Shifted Chebyshev of the first kind     T^*_n(x)
1734: 
1735: 
1736: def roots_sh_chebyt(n, mu=False):
1737:     r'''Gauss-Chebyshev (first kind, shifted) quadrature.
1738: 
1739:     Computes the sample points and weights for Gauss-Chebyshev quadrature.
1740:     The sample points are the roots of the n-th degree shifted Chebyshev
1741:     polynomial of the first kind, :math:`T_n(x)`.  These sample points and
1742:     weights correctly integrate polynomials of degree :math:`2n - 1` or less
1743:     over the interval :math:`[0, 1]` with weight function
1744:     :math:`f(x) = 1/\sqrt{x - x^2}`.
1745: 
1746:     Parameters
1747:     ----------
1748:     n : int
1749:         quadrature order
1750:     mu : bool, optional
1751:         If True, return the sum of the weights, optional.
1752: 
1753:     Returns
1754:     -------
1755:     x : ndarray
1756:         Sample points
1757:     w : ndarray
1758:         Weights
1759:     mu : float
1760:         Sum of the weights
1761: 
1762:     See Also
1763:     --------
1764:     scipy.integrate.quadrature
1765:     scipy.integrate.fixed_quad
1766:     '''
1767:     xw = roots_chebyt(n, mu)
1768:     return ((xw[0] + 1) / 2,) + xw[1:]
1769: 
1770: 
1771: def sh_chebyt(n, monic=False):
1772:     r'''Shifted Chebyshev polynomial of the first kind.
1773: 
1774:     Defined as :math:`T^*_n(x) = T_n(2x - 1)` for :math:`T_n` the nth
1775:     Chebyshev polynomial of the first kind.
1776: 
1777:     Parameters
1778:     ----------
1779:     n : int
1780:         Degree of the polynomial.
1781:     monic : bool, optional
1782:         If `True`, scale the leading coefficient to be 1. Default is
1783:         `False`.
1784: 
1785:     Returns
1786:     -------
1787:     T : orthopoly1d
1788:         Shifted Chebyshev polynomial of the first kind.
1789: 
1790:     Notes
1791:     -----
1792:     The polynomials :math:`T^*_n` are orthogonal over :math:`[0, 1]`
1793:     with weight function :math:`(x - x^2)^{-1/2}`.
1794: 
1795:     '''
1796:     base = sh_jacobi(n, 0.0, 0.5, monic=monic)
1797:     if monic:
1798:         return base
1799:     if n > 0:
1800:         factor = 4**n / 2.0
1801:     else:
1802:         factor = 1.0
1803:     base._scale(factor)
1804:     return base
1805: 
1806: 
1807: # Shifted Chebyshev of the second kind    U^*_n(x)
1808: def roots_sh_chebyu(n, mu=False):
1809:     r'''Gauss-Chebyshev (second kind, shifted) quadrature.
1810: 
1811:     Computes the sample points and weights for Gauss-Chebyshev quadrature.
1812:     The sample points are the roots of the n-th degree shifted Chebyshev
1813:     polynomial of the second kind, :math:`U_n(x)`.  These sample points and
1814:     weights correctly integrate polynomials of degree :math:`2n - 1` or less
1815:     over the interval :math:`[0, 1]` with weight function
1816:     :math:`f(x) = \sqrt{x - x^2}`.
1817: 
1818:     Parameters
1819:     ----------
1820:     n : int
1821:         quadrature order
1822:     mu : bool, optional
1823:         If True, return the sum of the weights, optional.
1824: 
1825:     Returns
1826:     -------
1827:     x : ndarray
1828:         Sample points
1829:     w : ndarray
1830:         Weights
1831:     mu : float
1832:         Sum of the weights
1833: 
1834:     See Also
1835:     --------
1836:     scipy.integrate.quadrature
1837:     scipy.integrate.fixed_quad
1838:     '''
1839:     x, w, m = roots_chebyu(n, True)
1840:     x = (x + 1) / 2
1841:     m_us = cephes.beta(1.5, 1.5)
1842:     w *= m_us / m
1843:     if mu:
1844:         return x, w, m_us
1845:     else:
1846:         return x, w
1847: 
1848: 
1849: def sh_chebyu(n, monic=False):
1850:     r'''Shifted Chebyshev polynomial of the second kind.
1851: 
1852:     Defined as :math:`U^*_n(x) = U_n(2x - 1)` for :math:`U_n` the nth
1853:     Chebyshev polynomial of the second kind.
1854: 
1855:     Parameters
1856:     ----------
1857:     n : int
1858:         Degree of the polynomial.
1859:     monic : bool, optional
1860:         If `True`, scale the leading coefficient to be 1. Default is
1861:         `False`.
1862: 
1863:     Returns
1864:     -------
1865:     U : orthopoly1d
1866:         Shifted Chebyshev polynomial of the second kind.
1867: 
1868:     Notes
1869:     -----
1870:     The polynomials :math:`U^*_n` are orthogonal over :math:`[0, 1]`
1871:     with weight function :math:`(x - x^2)^{1/2}`.
1872: 
1873:     '''
1874:     base = sh_jacobi(n, 2.0, 1.5, monic=monic)
1875:     if monic:
1876:         return base
1877:     factor = 4**n
1878:     base._scale(factor)
1879:     return base
1880: 
1881: # Legendre
1882: 
1883: 
1884: def roots_legendre(n, mu=False):
1885:     r'''Gauss-Legendre quadrature.
1886: 
1887:     Computes the sample points and weights for Gauss-Legendre quadrature.
1888:     The sample points are the roots of the n-th degree Legendre polynomial
1889:     :math:`P_n(x)`.  These sample points and weights correctly integrate
1890:     polynomials of degree :math:`2n - 1` or less over the interval
1891:     :math:`[-1, 1]` with weight function :math:`f(x) = 1.0`.
1892: 
1893:     Parameters
1894:     ----------
1895:     n : int
1896:         quadrature order
1897:     mu : bool, optional
1898:         If True, return the sum of the weights, optional.
1899: 
1900:     Returns
1901:     -------
1902:     x : ndarray
1903:         Sample points
1904:     w : ndarray
1905:         Weights
1906:     mu : float
1907:         Sum of the weights
1908: 
1909:     See Also
1910:     --------
1911:     scipy.integrate.quadrature
1912:     scipy.integrate.fixed_quad
1913:     numpy.polynomial.legendre.leggauss
1914:     '''
1915:     m = int(n)
1916:     if n < 1 or n != m:
1917:         raise ValueError("n must be a positive integer.")
1918: 
1919:     mu0 = 2.0
1920:     an_func = lambda k: 0.0 * k
1921:     bn_func = lambda k: k * np.sqrt(1.0 / (4 * k * k - 1))
1922:     f = cephes.eval_legendre
1923:     df = lambda n, x: (-n*x*cephes.eval_legendre(n, x)
1924:                      + n*cephes.eval_legendre(n-1, x))/(1-x**2)
1925:     return _gen_roots_and_weights(m, mu0, an_func, bn_func, f, df, True, mu)
1926: 
1927: 
1928: def legendre(n, monic=False):
1929:     r'''Legendre polynomial.
1930: 
1931:     Defined to be the solution of
1932: 
1933:     .. math::
1934:         \frac{d}{dx}\left[(1 - x^2)\frac{d}{dx}P_n(x)\right]
1935:           + n(n + 1)P_n(x) = 0;
1936: 
1937:     :math:`P_n(x)` is a polynomial of degree :math:`n`.
1938: 
1939:     Parameters
1940:     ----------
1941:     n : int
1942:         Degree of the polynomial.
1943:     monic : bool, optional
1944:         If `True`, scale the leading coefficient to be 1. Default is
1945:         `False`.
1946: 
1947:     Returns
1948:     -------
1949:     P : orthopoly1d
1950:         Legendre polynomial.
1951: 
1952:     Notes
1953:     -----
1954:     The polynomials :math:`P_n` are orthogonal over :math:`[-1, 1]`
1955:     with weight function 1.
1956: 
1957:     Examples
1958:     --------
1959:     Generate the 3rd-order Legendre polynomial 1/2*(5x^3 + 0x^2 - 3x + 0):
1960: 
1961:     >>> from scipy.special import legendre
1962:     >>> legendre(3)
1963:     poly1d([ 2.5,  0. , -1.5,  0. ])
1964: 
1965:     '''
1966:     if n < 0:
1967:         raise ValueError("n must be nonnegative.")
1968: 
1969:     if n == 0:
1970:         n1 = n + 1
1971:     else:
1972:         n1 = n
1973:     x, w, mu0 = roots_legendre(n1, mu=True)
1974:     if n == 0:
1975:         x, w = [], []
1976:     hn = 2.0 / (2 * n + 1)
1977:     kn = _gam(2 * n + 1) / _gam(n + 1)**2 / 2.0**n
1978:     p = orthopoly1d(x, w, hn, kn, wfunc=lambda x: 1.0, limits=(-1, 1),
1979:                     monic=monic, eval_func=lambda x: eval_legendre(n, x))
1980:     return p
1981: 
1982: # Shifted Legendre              P^*_n(x)
1983: 
1984: 
1985: def roots_sh_legendre(n, mu=False):
1986:     r'''Gauss-Legendre (shifted) quadrature.
1987: 
1988:     Computes the sample points and weights for Gauss-Legendre quadrature.
1989:     The sample points are the roots of the n-th degree shifted Legendre
1990:     polynomial :math:`P^*_n(x)`.  These sample points and weights correctly
1991:     integrate polynomials of degree :math:`2n - 1` or less over the interval
1992:     :math:`[0, 1]` with weight function :math:`f(x) = 1.0`.
1993: 
1994:     Parameters
1995:     ----------
1996:     n : int
1997:         quadrature order
1998:     mu : bool, optional
1999:         If True, return the sum of the weights, optional.
2000: 
2001:     Returns
2002:     -------
2003:     x : ndarray
2004:         Sample points
2005:     w : ndarray
2006:         Weights
2007:     mu : float
2008:         Sum of the weights
2009: 
2010:     See Also
2011:     --------
2012:     scipy.integrate.quadrature
2013:     scipy.integrate.fixed_quad
2014:     '''
2015:     x, w = roots_legendre(n)
2016:     x = (x + 1) / 2
2017:     w /= 2
2018:     if mu:
2019:         return x, w, 1.0
2020:     else:
2021:         return x, w
2022: 
2023: def sh_legendre(n, monic=False):
2024:     r'''Shifted Legendre polynomial.
2025: 
2026:     Defined as :math:`P^*_n(x) = P_n(2x - 1)` for :math:`P_n` the nth
2027:     Legendre polynomial.
2028: 
2029:     Parameters
2030:     ----------
2031:     n : int
2032:         Degree of the polynomial.
2033:     monic : bool, optional
2034:         If `True`, scale the leading coefficient to be 1. Default is
2035:         `False`.
2036: 
2037:     Returns
2038:     -------
2039:     P : orthopoly1d
2040:         Shifted Legendre polynomial.
2041: 
2042:     Notes
2043:     -----
2044:     The polynomials :math:`P^*_n` are orthogonal over :math:`[0, 1]`
2045:     with weight function 1.
2046: 
2047:     '''
2048:     if n < 0:
2049:         raise ValueError("n must be nonnegative.")
2050: 
2051:     wfunc = lambda x: 0.0 * x + 1.0
2052:     if n == 0:
2053:         return orthopoly1d([], [], 1.0, 1.0, wfunc, (0, 1), monic,
2054:                            lambda x: eval_sh_legendre(n, x))
2055:     x, w, mu0 = roots_sh_legendre(n, mu=True)
2056:     hn = 1.0 / (2 * n + 1.0)
2057:     kn = _gam(2 * n + 1) / _gam(n + 1)**2
2058:     p = orthopoly1d(x, w, hn, kn, wfunc, limits=(0, 1), monic=monic,
2059:                     eval_func=lambda x: eval_sh_legendre(n, x))
2060:     return p
2061: 
2062: 
2063: # -----------------------------------------------------------------------------
2064: # Code for backwards compatibility
2065: # -----------------------------------------------------------------------------
2066: 
2067: # Import functions in case someone is still calling the orthogonal
2068: # module directly. (They shouldn't be; it's not in the public API).
2069: poch = cephes.poch
2070: 
2071: from ._ufuncs import (binom, eval_jacobi, eval_sh_jacobi, eval_gegenbauer,
2072:                       eval_chebyt, eval_chebyu, eval_chebys, eval_chebyc,
2073:                       eval_sh_chebyt, eval_sh_chebyu, eval_legendre,
2074:                       eval_sh_legendre, eval_genlaguerre, eval_laguerre,
2075:                       eval_hermite, eval_hermitenorm)
2076: 
2077: # Make the old root function names an alias for the new ones
2078: _modattrs = globals()
2079: for newfun, oldfun in _rootfuns_map.items():
2080:     _modattrs[oldfun] = _modattrs[newfun]
2081:     __all__.append(oldfun)
2082: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

str_498466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 72, (-1)), 'str', '\nA collection of functions to find the weights and abscissas for\nGaussian Quadrature.\n\nThese calculations are done by finding the eigenvalues of a\ntridiagonal matrix whose entries are dependent on the coefficients\nin the recursion formula for the orthogonal polynomials with the\ncorresponding weighting function over the interval.\n\nMany recursion relations for orthogonal polynomials are given:\n\n.. math::\n\n    a1n f_{n+1} (x) = (a2n + a3n x ) f_n (x) - a4n f_{n-1} (x)\n\nThe recursion relation of interest is\n\n.. math::\n\n    P_{n+1} (x) = (x - A_n) P_n (x) - B_n P_{n-1} (x)\n\nwhere :math:`P` has a different normalization than :math:`f`.\n\nThe coefficients can be found as:\n\n.. math::\n\n    A_n = -a2n / a3n\n    \\qquad\n    B_n = ( a4n / a3n \\sqrt{h_n-1 / h_n})^2\n\nwhere\n\n.. math::\n\n    h_n = \\int_a^b w(x) f_n(x)^2\n\nassume:\n\n.. math::\n\n    P_0 (x) = 1\n    \\qquad\n    P_{-1} (x) == 0\n\nFor the mathematical background, see [golub.welsch-1969-mathcomp]_ and\n[abramowitz.stegun-1965]_.\n\nReferences\n----------\n.. [golub.welsch-1969-mathcomp]\n   Golub, Gene H, and John H Welsch. 1969. Calculation of Gauss\n   Quadrature Rules. *Mathematics of Computation* 23, 221-230+s1--s10.\n\n.. [abramowitz.stegun-1965]\n   Abramowitz, Milton, and Irene A Stegun. (1965) *Handbook of\n   Mathematical Functions: with Formulas, Graphs, and Mathematical\n   Tables*. Gaithersburg, MD: National Bureau of Standards.\n   http://www.math.sfu.ca/~cbm/aands/\n\n.. [townsend.trogdon.olver-2014]\n   Townsend, A. and Trogdon, T. and Olver, S. (2014)\n   *Fast computation of Gauss quadrature nodes and\n   weights on the whole real line*. :arXiv:`1410.5286`.\n\n.. [townsend.trogdon.olver-2015]\n   Townsend, A. and Trogdon, T. and Olver, S. (2015)\n   *Fast computation of Gauss quadrature nodes and\n   weights on the whole real line*.\n   IMA Journal of Numerical Analysis\n   :doi:`10.1093/imanum/drv002`.\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 80, 0))

# 'import numpy' statement (line 80)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/special/')
import_498467 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 80, 0), 'numpy')

if (type(import_498467) is not StypyTypeError):

    if (import_498467 != 'pyd_module'):
        __import__(import_498467)
        sys_modules_498468 = sys.modules[import_498467]
        import_module(stypy.reporting.localization.Localization(__file__, 80, 0), 'np', sys_modules_498468.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 80, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 80)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 80, 0), 'numpy', import_498467)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/special/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 81, 0))

# 'from numpy import exp, inf, pi, sqrt, floor, sin, cos, around, int, hstack, arccos, arange' statement (line 81)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/special/')
import_498469 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 81, 0), 'numpy')

if (type(import_498469) is not StypyTypeError):

    if (import_498469 != 'pyd_module'):
        __import__(import_498469)
        sys_modules_498470 = sys.modules[import_498469]
        import_from_module(stypy.reporting.localization.Localization(__file__, 81, 0), 'numpy', sys_modules_498470.module_type_store, module_type_store, ['exp', 'inf', 'pi', 'sqrt', 'floor', 'sin', 'cos', 'around', 'int', 'hstack', 'arccos', 'arange'])
        nest_module(stypy.reporting.localization.Localization(__file__, 81, 0), __file__, sys_modules_498470, sys_modules_498470.module_type_store, module_type_store)
    else:
        from numpy import exp, inf, pi, sqrt, floor, sin, cos, around, int, hstack, arccos, arange

        import_from_module(stypy.reporting.localization.Localization(__file__, 81, 0), 'numpy', None, module_type_store, ['exp', 'inf', 'pi', 'sqrt', 'floor', 'sin', 'cos', 'around', 'int', 'hstack', 'arccos', 'arange'], [exp, inf, pi, sqrt, floor, sin, cos, around, int, hstack, arccos, arange])

else:
    # Assigning a type to the variable 'numpy' (line 81)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 81, 0), 'numpy', import_498469)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/special/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 83, 0))

# 'from scipy import linalg' statement (line 83)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/special/')
import_498471 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 83, 0), 'scipy')

if (type(import_498471) is not StypyTypeError):

    if (import_498471 != 'pyd_module'):
        __import__(import_498471)
        sys_modules_498472 = sys.modules[import_498471]
        import_from_module(stypy.reporting.localization.Localization(__file__, 83, 0), 'scipy', sys_modules_498472.module_type_store, module_type_store, ['linalg'])
        nest_module(stypy.reporting.localization.Localization(__file__, 83, 0), __file__, sys_modules_498472, sys_modules_498472.module_type_store, module_type_store)
    else:
        from scipy import linalg

        import_from_module(stypy.reporting.localization.Localization(__file__, 83, 0), 'scipy', None, module_type_store, ['linalg'], [linalg])

else:
    # Assigning a type to the variable 'scipy' (line 83)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 83, 0), 'scipy', import_498471)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/special/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 84, 0))

# 'from scipy.special import airy' statement (line 84)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/special/')
import_498473 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 84, 0), 'scipy.special')

if (type(import_498473) is not StypyTypeError):

    if (import_498473 != 'pyd_module'):
        __import__(import_498473)
        sys_modules_498474 = sys.modules[import_498473]
        import_from_module(stypy.reporting.localization.Localization(__file__, 84, 0), 'scipy.special', sys_modules_498474.module_type_store, module_type_store, ['airy'])
        nest_module(stypy.reporting.localization.Localization(__file__, 84, 0), __file__, sys_modules_498474, sys_modules_498474.module_type_store, module_type_store)
    else:
        from scipy.special import airy

        import_from_module(stypy.reporting.localization.Localization(__file__, 84, 0), 'scipy.special', None, module_type_store, ['airy'], [airy])

else:
    # Assigning a type to the variable 'scipy.special' (line 84)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 84, 0), 'scipy.special', import_498473)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/special/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 87, 0))

# 'from scipy.special import cephes' statement (line 87)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/special/')
import_498475 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 87, 0), 'scipy.special')

if (type(import_498475) is not StypyTypeError):

    if (import_498475 != 'pyd_module'):
        __import__(import_498475)
        sys_modules_498476 = sys.modules[import_498475]
        import_from_module(stypy.reporting.localization.Localization(__file__, 87, 0), 'scipy.special', sys_modules_498476.module_type_store, module_type_store, ['_ufuncs'])
        nest_module(stypy.reporting.localization.Localization(__file__, 87, 0), __file__, sys_modules_498476, sys_modules_498476.module_type_store, module_type_store)
    else:
        from scipy.special import _ufuncs as cephes

        import_from_module(stypy.reporting.localization.Localization(__file__, 87, 0), 'scipy.special', None, module_type_store, ['_ufuncs'], [cephes])

else:
    # Assigning a type to the variable 'scipy.special' (line 87)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 87, 0), 'scipy.special', import_498475)

# Adding an alias
module_type_store.add_alias('cephes', '_ufuncs')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/special/')


# Assigning a Attribute to a Name (line 88):

# Assigning a Attribute to a Name (line 88):
# Getting the type of 'cephes' (line 88)
cephes_498477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 88, 7), 'cephes')
# Obtaining the member 'gamma' of a type (line 88)
gamma_498478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 88, 7), cephes_498477, 'gamma')
# Assigning a type to the variable '_gam' (line 88)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 88, 0), '_gam', gamma_498478)
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 89, 0))

# 'from scipy.special import specfun' statement (line 89)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/special/')
import_498479 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 89, 0), 'scipy.special')

if (type(import_498479) is not StypyTypeError):

    if (import_498479 != 'pyd_module'):
        __import__(import_498479)
        sys_modules_498480 = sys.modules[import_498479]
        import_from_module(stypy.reporting.localization.Localization(__file__, 89, 0), 'scipy.special', sys_modules_498480.module_type_store, module_type_store, ['specfun'])
        nest_module(stypy.reporting.localization.Localization(__file__, 89, 0), __file__, sys_modules_498480, sys_modules_498480.module_type_store, module_type_store)
    else:
        from scipy.special import specfun

        import_from_module(stypy.reporting.localization.Localization(__file__, 89, 0), 'scipy.special', None, module_type_store, ['specfun'], [specfun])

else:
    # Assigning a type to the variable 'scipy.special' (line 89)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 89, 0), 'scipy.special', import_498479)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/special/')


# Assigning a List to a Name (line 91):

# Assigning a List to a Name (line 91):

# Obtaining an instance of the builtin type 'list' (line 91)
list_498481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, 12), 'list')
# Adding type elements to the builtin type 'list' instance (line 91)
# Adding element type (line 91)
str_498482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, 13), 'str', 'legendre')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 91, 12), list_498481, str_498482)
# Adding element type (line 91)
str_498483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, 25), 'str', 'chebyt')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 91, 12), list_498481, str_498483)
# Adding element type (line 91)
str_498484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, 35), 'str', 'chebyu')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 91, 12), list_498481, str_498484)
# Adding element type (line 91)
str_498485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, 45), 'str', 'chebyc')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 91, 12), list_498481, str_498485)
# Adding element type (line 91)
str_498486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, 55), 'str', 'chebys')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 91, 12), list_498481, str_498486)
# Adding element type (line 91)
str_498487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 92, 13), 'str', 'jacobi')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 91, 12), list_498481, str_498487)
# Adding element type (line 91)
str_498488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 92, 23), 'str', 'laguerre')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 91, 12), list_498481, str_498488)
# Adding element type (line 91)
str_498489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 92, 35), 'str', 'genlaguerre')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 91, 12), list_498481, str_498489)
# Adding element type (line 91)
str_498490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 92, 50), 'str', 'hermite')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 91, 12), list_498481, str_498490)
# Adding element type (line 91)
str_498491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 93, 13), 'str', 'hermitenorm')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 91, 12), list_498481, str_498491)
# Adding element type (line 91)
str_498492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 93, 28), 'str', 'gegenbauer')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 91, 12), list_498481, str_498492)
# Adding element type (line 91)
str_498493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 93, 42), 'str', 'sh_legendre')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 91, 12), list_498481, str_498493)
# Adding element type (line 91)
str_498494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 93, 57), 'str', 'sh_chebyt')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 91, 12), list_498481, str_498494)
# Adding element type (line 91)
str_498495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 13), 'str', 'sh_chebyu')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 91, 12), list_498481, str_498495)
# Adding element type (line 91)
str_498496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 26), 'str', 'sh_jacobi')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 91, 12), list_498481, str_498496)

# Assigning a type to the variable '_polyfuns' (line 91)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 91, 0), '_polyfuns', list_498481)

# Assigning a Dict to a Name (line 97):

# Assigning a Dict to a Name (line 97):

# Obtaining an instance of the builtin type 'dict' (line 97)
dict_498497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 97, 16), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 97)
# Adding element type (key, value) (line 97)
str_498498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 97, 17), 'str', 'roots_legendre')
str_498499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 97, 35), 'str', 'p_roots')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 97, 16), dict_498497, (str_498498, str_498499))
# Adding element type (key, value) (line 97)
str_498500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 15), 'str', 'roots_chebyt')
str_498501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 31), 'str', 't_roots')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 97, 16), dict_498497, (str_498500, str_498501))
# Adding element type (key, value) (line 97)
str_498502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 99, 15), 'str', 'roots_chebyu')
str_498503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 99, 31), 'str', 'u_roots')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 97, 16), dict_498497, (str_498502, str_498503))
# Adding element type (key, value) (line 97)
str_498504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 100, 15), 'str', 'roots_chebyc')
str_498505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 100, 31), 'str', 'c_roots')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 97, 16), dict_498497, (str_498504, str_498505))
# Adding element type (key, value) (line 97)
str_498506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 101, 15), 'str', 'roots_chebys')
str_498507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 101, 31), 'str', 's_roots')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 97, 16), dict_498497, (str_498506, str_498507))
# Adding element type (key, value) (line 97)
str_498508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 102, 15), 'str', 'roots_jacobi')
str_498509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 102, 31), 'str', 'j_roots')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 97, 16), dict_498497, (str_498508, str_498509))
# Adding element type (key, value) (line 97)
str_498510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, 15), 'str', 'roots_laguerre')
str_498511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, 33), 'str', 'l_roots')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 97, 16), dict_498497, (str_498510, str_498511))
# Adding element type (key, value) (line 97)
str_498512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 15), 'str', 'roots_genlaguerre')
str_498513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 36), 'str', 'la_roots')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 97, 16), dict_498497, (str_498512, str_498513))
# Adding element type (key, value) (line 97)
str_498514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 15), 'str', 'roots_hermite')
str_498515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 32), 'str', 'h_roots')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 97, 16), dict_498497, (str_498514, str_498515))
# Adding element type (key, value) (line 97)
str_498516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 106, 15), 'str', 'roots_hermitenorm')
str_498517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 106, 36), 'str', 'he_roots')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 97, 16), dict_498497, (str_498516, str_498517))
# Adding element type (key, value) (line 97)
str_498518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 107, 15), 'str', 'roots_gegenbauer')
str_498519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 107, 35), 'str', 'cg_roots')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 97, 16), dict_498497, (str_498518, str_498519))
# Adding element type (key, value) (line 97)
str_498520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 108, 15), 'str', 'roots_sh_legendre')
str_498521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 108, 36), 'str', 'ps_roots')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 97, 16), dict_498497, (str_498520, str_498521))
# Adding element type (key, value) (line 97)
str_498522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 109, 15), 'str', 'roots_sh_chebyt')
str_498523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 109, 34), 'str', 'ts_roots')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 97, 16), dict_498497, (str_498522, str_498523))
# Adding element type (key, value) (line 97)
str_498524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 110, 15), 'str', 'roots_sh_chebyu')
str_498525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 110, 34), 'str', 'us_roots')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 97, 16), dict_498497, (str_498524, str_498525))
# Adding element type (key, value) (line 97)
str_498526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 111, 15), 'str', 'roots_sh_jacobi')
str_498527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 111, 34), 'str', 'js_roots')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 97, 16), dict_498497, (str_498526, str_498527))

# Assigning a type to the variable '_rootfuns_map' (line 97)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 97, 0), '_rootfuns_map', dict_498497)

# Assigning a List to a Name (line 113):

# Assigning a List to a Name (line 113):

# Obtaining an instance of the builtin type 'list' (line 113)
list_498528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 113, 12), 'list')
# Adding type elements to the builtin type 'list' instance (line 113)
# Adding element type (line 113)
str_498529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 113, 13), 'str', 'eval_legendre')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 113, 12), list_498528, str_498529)
# Adding element type (line 113)
str_498530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 113, 30), 'str', 'eval_chebyt')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 113, 12), list_498528, str_498530)
# Adding element type (line 113)
str_498531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 113, 45), 'str', 'eval_chebyu')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 113, 12), list_498528, str_498531)
# Adding element type (line 113)
str_498532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 114, 13), 'str', 'eval_chebyc')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 113, 12), list_498528, str_498532)
# Adding element type (line 113)
str_498533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 114, 28), 'str', 'eval_chebys')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 113, 12), list_498528, str_498533)
# Adding element type (line 113)
str_498534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 114, 43), 'str', 'eval_jacobi')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 113, 12), list_498528, str_498534)
# Adding element type (line 113)
str_498535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 115, 13), 'str', 'eval_laguerre')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 113, 12), list_498528, str_498535)
# Adding element type (line 113)
str_498536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 115, 30), 'str', 'eval_genlaguerre')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 113, 12), list_498528, str_498536)
# Adding element type (line 113)
str_498537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 115, 50), 'str', 'eval_hermite')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 113, 12), list_498528, str_498537)
# Adding element type (line 113)
str_498538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 116, 13), 'str', 'eval_hermitenorm')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 113, 12), list_498528, str_498538)
# Adding element type (line 113)
str_498539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 116, 33), 'str', 'eval_gegenbauer')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 113, 12), list_498528, str_498539)
# Adding element type (line 113)
str_498540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 117, 13), 'str', 'eval_sh_legendre')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 113, 12), list_498528, str_498540)
# Adding element type (line 113)
str_498541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 117, 33), 'str', 'eval_sh_chebyt')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 113, 12), list_498528, str_498541)
# Adding element type (line 113)
str_498542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 117, 51), 'str', 'eval_sh_chebyu')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 113, 12), list_498528, str_498542)
# Adding element type (line 113)
str_498543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 118, 13), 'str', 'eval_sh_jacobi')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 113, 12), list_498528, str_498543)

# Assigning a type to the variable '_evalfuns' (line 113)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 0), '_evalfuns', list_498528)

# Assigning a BinOp to a Name (line 120):

# Assigning a BinOp to a Name (line 120):
# Getting the type of '_polyfuns' (line 120)
_polyfuns_498544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 10), '_polyfuns')

# Call to list(...): (line 120)
# Processing the call arguments (line 120)

# Call to keys(...): (line 120)
# Processing the call keyword arguments (line 120)
kwargs_498548 = {}
# Getting the type of '_rootfuns_map' (line 120)
_rootfuns_map_498546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 27), '_rootfuns_map', False)
# Obtaining the member 'keys' of a type (line 120)
keys_498547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 120, 27), _rootfuns_map_498546, 'keys')
# Calling keys(args, kwargs) (line 120)
keys_call_result_498549 = invoke(stypy.reporting.localization.Localization(__file__, 120, 27), keys_498547, *[], **kwargs_498548)

# Processing the call keyword arguments (line 120)
kwargs_498550 = {}
# Getting the type of 'list' (line 120)
list_498545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 22), 'list', False)
# Calling list(args, kwargs) (line 120)
list_call_result_498551 = invoke(stypy.reporting.localization.Localization(__file__, 120, 22), list_498545, *[keys_call_result_498549], **kwargs_498550)

# Applying the binary operator '+' (line 120)
result_add_498552 = python_operator(stypy.reporting.localization.Localization(__file__, 120, 10), '+', _polyfuns_498544, list_call_result_498551)

# Getting the type of '_evalfuns' (line 120)
_evalfuns_498553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 51), '_evalfuns')
# Applying the binary operator '+' (line 120)
result_add_498554 = python_operator(stypy.reporting.localization.Localization(__file__, 120, 49), '+', result_add_498552, _evalfuns_498553)


# Obtaining an instance of the builtin type 'list' (line 120)
list_498555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 120, 63), 'list')
# Adding type elements to the builtin type 'list' instance (line 120)
# Adding element type (line 120)
str_498556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 120, 64), 'str', 'poch')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 120, 63), list_498555, str_498556)
# Adding element type (line 120)
str_498557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 120, 72), 'str', 'binom')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 120, 63), list_498555, str_498557)

# Applying the binary operator '+' (line 120)
result_add_498558 = python_operator(stypy.reporting.localization.Localization(__file__, 120, 61), '+', result_add_498554, list_498555)

# Assigning a type to the variable '__all__' (line 120)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 120, 0), '__all__', result_add_498558)
# Declaration of the 'orthopoly1d' class
# Getting the type of 'np' (line 123)
np_498559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 18), 'np')
# Obtaining the member 'poly1d' of a type (line 123)
poly1d_498560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 123, 18), np_498559, 'poly1d')

class orthopoly1d(poly1d_498560, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 125)
        None_498561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 38), 'None')
        float_498562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 125, 47), 'float')
        float_498563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 125, 55), 'float')
        # Getting the type of 'None' (line 125)
        None_498564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 66), 'None')
        # Getting the type of 'None' (line 126)
        None_498565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 24), 'None')
        # Getting the type of 'False' (line 126)
        False_498566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 36), 'False')
        # Getting the type of 'None' (line 126)
        None_498567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 53), 'None')
        defaults = [None_498561, float_498562, float_498563, None_498564, None_498565, False_498566, None_498567]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 125, 4, False)
        # Assigning a type to the variable 'self' (line 126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 126, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'orthopoly1d.__init__', ['roots', 'weights', 'hn', 'kn', 'wfunc', 'limits', 'monic', 'eval_func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['roots', 'weights', 'hn', 'kn', 'wfunc', 'limits', 'monic', 'eval_func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a ListComp to a Name (line 127):
        
        # Assigning a ListComp to a Name (line 127):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to range(...): (line 128)
        # Processing the call arguments (line 128)
        
        # Call to len(...): (line 128)
        # Processing the call arguments (line 128)
        # Getting the type of 'roots' (line 128)
        roots_498582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 40), 'roots', False)
        # Processing the call keyword arguments (line 128)
        kwargs_498583 = {}
        # Getting the type of 'len' (line 128)
        len_498581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 36), 'len', False)
        # Calling len(args, kwargs) (line 128)
        len_call_result_498584 = invoke(stypy.reporting.localization.Localization(__file__, 128, 36), len_498581, *[roots_498582], **kwargs_498583)
        
        # Processing the call keyword arguments (line 128)
        kwargs_498585 = {}
        # Getting the type of 'range' (line 128)
        range_498580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 30), 'range', False)
        # Calling range(args, kwargs) (line 128)
        range_call_result_498586 = invoke(stypy.reporting.localization.Localization(__file__, 128, 30), range_498580, *[len_call_result_498584], **kwargs_498585)
        
        comprehension_498587 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 127, 25), range_call_result_498586)
        # Assigning a type to the variable 'k' (line 127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 127, 25), 'k', comprehension_498587)
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 127)
        k_498568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 33), 'k')
        # Getting the type of 'weights' (line 127)
        weights_498569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 25), 'weights')
        # Obtaining the member '__getitem__' of a type (line 127)
        getitem___498570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 127, 25), weights_498569, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 127)
        subscript_call_result_498571 = invoke(stypy.reporting.localization.Localization(__file__, 127, 25), getitem___498570, k_498568)
        
        
        # Call to wfunc(...): (line 127)
        # Processing the call arguments (line 127)
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 127)
        k_498573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 50), 'k', False)
        # Getting the type of 'roots' (line 127)
        roots_498574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 44), 'roots', False)
        # Obtaining the member '__getitem__' of a type (line 127)
        getitem___498575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 127, 44), roots_498574, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 127)
        subscript_call_result_498576 = invoke(stypy.reporting.localization.Localization(__file__, 127, 44), getitem___498575, k_498573)
        
        # Processing the call keyword arguments (line 127)
        kwargs_498577 = {}
        # Getting the type of 'wfunc' (line 127)
        wfunc_498572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 38), 'wfunc', False)
        # Calling wfunc(args, kwargs) (line 127)
        wfunc_call_result_498578 = invoke(stypy.reporting.localization.Localization(__file__, 127, 38), wfunc_498572, *[subscript_call_result_498576], **kwargs_498577)
        
        # Applying the binary operator 'div' (line 127)
        result_div_498579 = python_operator(stypy.reporting.localization.Localization(__file__, 127, 25), 'div', subscript_call_result_498571, wfunc_call_result_498578)
        
        list_498588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 127, 25), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 127, 25), list_498588, result_div_498579)
        # Assigning a type to the variable 'equiv_weights' (line 127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 127, 8), 'equiv_weights', list_498588)
        
        # Assigning a Call to a Name (line 129):
        
        # Assigning a Call to a Name (line 129):
        
        # Call to sqrt(...): (line 129)
        # Processing the call arguments (line 129)
        # Getting the type of 'hn' (line 129)
        hn_498590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 18), 'hn', False)
        # Processing the call keyword arguments (line 129)
        kwargs_498591 = {}
        # Getting the type of 'sqrt' (line 129)
        sqrt_498589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 13), 'sqrt', False)
        # Calling sqrt(args, kwargs) (line 129)
        sqrt_call_result_498592 = invoke(stypy.reporting.localization.Localization(__file__, 129, 13), sqrt_498589, *[hn_498590], **kwargs_498591)
        
        # Assigning a type to the variable 'mu' (line 129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 129, 8), 'mu', sqrt_call_result_498592)
        
        # Getting the type of 'monic' (line 130)
        monic_498593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 11), 'monic')
        # Testing the type of an if condition (line 130)
        if_condition_498594 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 130, 8), monic_498593)
        # Assigning a type to the variable 'if_condition_498594' (line 130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 8), 'if_condition_498594', if_condition_498594)
        # SSA begins for if statement (line 130)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 131):
        
        # Assigning a Name to a Name (line 131):
        # Getting the type of 'eval_func' (line 131)
        eval_func_498595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 18), 'eval_func')
        # Assigning a type to the variable 'evf' (line 131)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 131, 12), 'evf', eval_func_498595)
        
        # Getting the type of 'evf' (line 132)
        evf_498596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 15), 'evf')
        # Testing the type of an if condition (line 132)
        if_condition_498597 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 132, 12), evf_498596)
        # Assigning a type to the variable 'if_condition_498597' (line 132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 132, 12), 'if_condition_498597', if_condition_498597)
        # SSA begins for if statement (line 132)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 133):
        
        # Assigning a Name to a Name (line 133):
        # Getting the type of 'kn' (line 133)
        kn_498598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 22), 'kn')
        # Assigning a type to the variable 'knn' (line 133)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 133, 16), 'knn', kn_498598)
        
        # Assigning a Lambda to a Name (line 134):
        
        # Assigning a Lambda to a Name (line 134):

        @norecursion
        def _stypy_temp_lambda_244(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_244'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_244', 134, 28, True)
            # Passed parameters checking function
            _stypy_temp_lambda_244.stypy_localization = localization
            _stypy_temp_lambda_244.stypy_type_of_self = None
            _stypy_temp_lambda_244.stypy_type_store = module_type_store
            _stypy_temp_lambda_244.stypy_function_name = '_stypy_temp_lambda_244'
            _stypy_temp_lambda_244.stypy_param_names_list = ['x']
            _stypy_temp_lambda_244.stypy_varargs_param_name = None
            _stypy_temp_lambda_244.stypy_kwargs_param_name = None
            _stypy_temp_lambda_244.stypy_call_defaults = defaults
            _stypy_temp_lambda_244.stypy_call_varargs = varargs
            _stypy_temp_lambda_244.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_244', ['x'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_244', ['x'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to evf(...): (line 134)
            # Processing the call arguments (line 134)
            # Getting the type of 'x' (line 134)
            x_498600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 42), 'x', False)
            # Processing the call keyword arguments (line 134)
            kwargs_498601 = {}
            # Getting the type of 'evf' (line 134)
            evf_498599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 38), 'evf', False)
            # Calling evf(args, kwargs) (line 134)
            evf_call_result_498602 = invoke(stypy.reporting.localization.Localization(__file__, 134, 38), evf_498599, *[x_498600], **kwargs_498601)
            
            # Getting the type of 'knn' (line 134)
            knn_498603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 47), 'knn')
            # Applying the binary operator 'div' (line 134)
            result_div_498604 = python_operator(stypy.reporting.localization.Localization(__file__, 134, 38), 'div', evf_call_result_498602, knn_498603)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 134)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 134, 28), 'stypy_return_type', result_div_498604)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_244' in the type store
            # Getting the type of 'stypy_return_type' (line 134)
            stypy_return_type_498605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 28), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_498605)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_244'
            return stypy_return_type_498605

        # Assigning a type to the variable '_stypy_temp_lambda_244' (line 134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 134, 28), '_stypy_temp_lambda_244', _stypy_temp_lambda_244)
        # Getting the type of '_stypy_temp_lambda_244' (line 134)
        _stypy_temp_lambda_244_498606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 28), '_stypy_temp_lambda_244')
        # Assigning a type to the variable 'eval_func' (line 134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 134, 16), 'eval_func', _stypy_temp_lambda_244_498606)
        # SSA join for if statement (line 132)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 135):
        
        # Assigning a BinOp to a Name (line 135):
        # Getting the type of 'mu' (line 135)
        mu_498607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 17), 'mu')
        
        # Call to abs(...): (line 135)
        # Processing the call arguments (line 135)
        # Getting the type of 'kn' (line 135)
        kn_498609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 26), 'kn', False)
        # Processing the call keyword arguments (line 135)
        kwargs_498610 = {}
        # Getting the type of 'abs' (line 135)
        abs_498608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 22), 'abs', False)
        # Calling abs(args, kwargs) (line 135)
        abs_call_result_498611 = invoke(stypy.reporting.localization.Localization(__file__, 135, 22), abs_498608, *[kn_498609], **kwargs_498610)
        
        # Applying the binary operator 'div' (line 135)
        result_div_498612 = python_operator(stypy.reporting.localization.Localization(__file__, 135, 17), 'div', mu_498607, abs_call_result_498611)
        
        # Assigning a type to the variable 'mu' (line 135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 135, 12), 'mu', result_div_498612)
        
        # Assigning a Num to a Name (line 136):
        
        # Assigning a Num to a Name (line 136):
        float_498613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 136, 17), 'float')
        # Assigning a type to the variable 'kn' (line 136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 136, 12), 'kn', float_498613)
        # SSA join for if statement (line 130)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 139):
        
        # Assigning a Call to a Name (line 139):
        
        # Call to poly1d(...): (line 139)
        # Processing the call arguments (line 139)
        # Getting the type of 'roots' (line 139)
        roots_498616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 25), 'roots', False)
        # Processing the call keyword arguments (line 139)
        # Getting the type of 'True' (line 139)
        True_498617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 34), 'True', False)
        keyword_498618 = True_498617
        kwargs_498619 = {'r': keyword_498618}
        # Getting the type of 'np' (line 139)
        np_498614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 15), 'np', False)
        # Obtaining the member 'poly1d' of a type (line 139)
        poly1d_498615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 139, 15), np_498614, 'poly1d')
        # Calling poly1d(args, kwargs) (line 139)
        poly1d_call_result_498620 = invoke(stypy.reporting.localization.Localization(__file__, 139, 15), poly1d_498615, *[roots_498616], **kwargs_498619)
        
        # Assigning a type to the variable 'poly' (line 139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 139, 8), 'poly', poly1d_call_result_498620)
        
        # Call to __init__(...): (line 140)
        # Processing the call arguments (line 140)
        # Getting the type of 'self' (line 140)
        self_498624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 27), 'self', False)
        # Getting the type of 'poly' (line 140)
        poly_498625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 33), 'poly', False)
        # Obtaining the member 'coeffs' of a type (line 140)
        coeffs_498626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 140, 33), poly_498625, 'coeffs')
        
        # Call to float(...): (line 140)
        # Processing the call arguments (line 140)
        # Getting the type of 'kn' (line 140)
        kn_498628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 53), 'kn', False)
        # Processing the call keyword arguments (line 140)
        kwargs_498629 = {}
        # Getting the type of 'float' (line 140)
        float_498627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 47), 'float', False)
        # Calling float(args, kwargs) (line 140)
        float_call_result_498630 = invoke(stypy.reporting.localization.Localization(__file__, 140, 47), float_498627, *[kn_498628], **kwargs_498629)
        
        # Applying the binary operator '*' (line 140)
        result_mul_498631 = python_operator(stypy.reporting.localization.Localization(__file__, 140, 33), '*', coeffs_498626, float_call_result_498630)
        
        # Processing the call keyword arguments (line 140)
        kwargs_498632 = {}
        # Getting the type of 'np' (line 140)
        np_498621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 8), 'np', False)
        # Obtaining the member 'poly1d' of a type (line 140)
        poly1d_498622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 140, 8), np_498621, 'poly1d')
        # Obtaining the member '__init__' of a type (line 140)
        init___498623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 140, 8), poly1d_498622, '__init__')
        # Calling __init__(args, kwargs) (line 140)
        init___call_result_498633 = invoke(stypy.reporting.localization.Localization(__file__, 140, 8), init___498623, *[self_498624, result_mul_498631], **kwargs_498632)
        
        
        # Assigning a Call to a Subscript (line 143):
        
        # Assigning a Call to a Subscript (line 143):
        
        # Call to array(...): (line 143)
        # Processing the call arguments (line 143)
        
        # Call to list(...): (line 143)
        # Processing the call arguments (line 143)
        
        # Call to zip(...): (line 143)
        # Processing the call arguments (line 143)
        # Getting the type of 'roots' (line 143)
        roots_498638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 53), 'roots', False)
        # Getting the type of 'weights' (line 144)
        weights_498639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 53), 'weights', False)
        # Getting the type of 'equiv_weights' (line 144)
        equiv_weights_498640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 62), 'equiv_weights', False)
        # Processing the call keyword arguments (line 143)
        kwargs_498641 = {}
        # Getting the type of 'zip' (line 143)
        zip_498637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 49), 'zip', False)
        # Calling zip(args, kwargs) (line 143)
        zip_call_result_498642 = invoke(stypy.reporting.localization.Localization(__file__, 143, 49), zip_498637, *[roots_498638, weights_498639, equiv_weights_498640], **kwargs_498641)
        
        # Processing the call keyword arguments (line 143)
        kwargs_498643 = {}
        # Getting the type of 'list' (line 143)
        list_498636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 44), 'list', False)
        # Calling list(args, kwargs) (line 143)
        list_call_result_498644 = invoke(stypy.reporting.localization.Localization(__file__, 143, 44), list_498636, *[zip_call_result_498642], **kwargs_498643)
        
        # Processing the call keyword arguments (line 143)
        kwargs_498645 = {}
        # Getting the type of 'np' (line 143)
        np_498634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 35), 'np', False)
        # Obtaining the member 'array' of a type (line 143)
        array_498635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 143, 35), np_498634, 'array')
        # Calling array(args, kwargs) (line 143)
        array_call_result_498646 = invoke(stypy.reporting.localization.Localization(__file__, 143, 35), array_498635, *[list_call_result_498644], **kwargs_498645)
        
        # Getting the type of 'self' (line 143)
        self_498647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 8), 'self')
        # Obtaining the member '__dict__' of a type (line 143)
        dict___498648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 143, 8), self_498647, '__dict__')
        str_498649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 143, 22), 'str', 'weights')
        # Storing an element on a container (line 143)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 143, 8), dict___498648, (str_498649, array_call_result_498646))
        
        # Assigning a Name to a Subscript (line 145):
        
        # Assigning a Name to a Subscript (line 145):
        # Getting the type of 'wfunc' (line 145)
        wfunc_498650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 39), 'wfunc')
        # Getting the type of 'self' (line 145)
        self_498651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 8), 'self')
        # Obtaining the member '__dict__' of a type (line 145)
        dict___498652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 145, 8), self_498651, '__dict__')
        str_498653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 145, 22), 'str', 'weight_func')
        # Storing an element on a container (line 145)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 145, 8), dict___498652, (str_498653, wfunc_498650))
        
        # Assigning a Name to a Subscript (line 146):
        
        # Assigning a Name to a Subscript (line 146):
        # Getting the type of 'limits' (line 146)
        limits_498654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 34), 'limits')
        # Getting the type of 'self' (line 146)
        self_498655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 8), 'self')
        # Obtaining the member '__dict__' of a type (line 146)
        dict___498656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 146, 8), self_498655, '__dict__')
        str_498657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 146, 22), 'str', 'limits')
        # Storing an element on a container (line 146)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 146, 8), dict___498656, (str_498657, limits_498654))
        
        # Assigning a Name to a Subscript (line 147):
        
        # Assigning a Name to a Subscript (line 147):
        # Getting the type of 'mu' (line 147)
        mu_498658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 36), 'mu')
        # Getting the type of 'self' (line 147)
        self_498659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 8), 'self')
        # Obtaining the member '__dict__' of a type (line 147)
        dict___498660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 147, 8), self_498659, '__dict__')
        str_498661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 22), 'str', 'normcoef')
        # Storing an element on a container (line 147)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 147, 8), dict___498660, (str_498661, mu_498658))
        
        # Assigning a Name to a Subscript (line 150):
        
        # Assigning a Name to a Subscript (line 150):
        # Getting the type of 'eval_func' (line 150)
        eval_func_498662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 38), 'eval_func')
        # Getting the type of 'self' (line 150)
        self_498663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 8), 'self')
        # Obtaining the member '__dict__' of a type (line 150)
        dict___498664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 150, 8), self_498663, '__dict__')
        str_498665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 150, 22), 'str', '_eval_func')
        # Storing an element on a container (line 150)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 150, 8), dict___498664, (str_498665, eval_func_498662))
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 152, 4, False)
        # Assigning a type to the variable 'self' (line 153)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 153, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        orthopoly1d.__call__.__dict__.__setitem__('stypy_localization', localization)
        orthopoly1d.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        orthopoly1d.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        orthopoly1d.__call__.__dict__.__setitem__('stypy_function_name', 'orthopoly1d.__call__')
        orthopoly1d.__call__.__dict__.__setitem__('stypy_param_names_list', ['v'])
        orthopoly1d.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        orthopoly1d.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        orthopoly1d.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        orthopoly1d.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        orthopoly1d.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        orthopoly1d.__call__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'orthopoly1d.__call__', ['v'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['v'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 153)
        self_498666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 11), 'self')
        # Obtaining the member '_eval_func' of a type (line 153)
        _eval_func_498667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 11), self_498666, '_eval_func')
        
        
        # Call to isinstance(...): (line 153)
        # Processing the call arguments (line 153)
        # Getting the type of 'v' (line 153)
        v_498669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 46), 'v', False)
        # Getting the type of 'np' (line 153)
        np_498670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 49), 'np', False)
        # Obtaining the member 'poly1d' of a type (line 153)
        poly1d_498671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 49), np_498670, 'poly1d')
        # Processing the call keyword arguments (line 153)
        kwargs_498672 = {}
        # Getting the type of 'isinstance' (line 153)
        isinstance_498668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 35), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 153)
        isinstance_call_result_498673 = invoke(stypy.reporting.localization.Localization(__file__, 153, 35), isinstance_498668, *[v_498669, poly1d_498671], **kwargs_498672)
        
        # Applying the 'not' unary operator (line 153)
        result_not__498674 = python_operator(stypy.reporting.localization.Localization(__file__, 153, 31), 'not', isinstance_call_result_498673)
        
        # Applying the binary operator 'and' (line 153)
        result_and_keyword_498675 = python_operator(stypy.reporting.localization.Localization(__file__, 153, 11), 'and', _eval_func_498667, result_not__498674)
        
        # Testing the type of an if condition (line 153)
        if_condition_498676 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 153, 8), result_and_keyword_498675)
        # Assigning a type to the variable 'if_condition_498676' (line 153)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 153, 8), 'if_condition_498676', if_condition_498676)
        # SSA begins for if statement (line 153)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _eval_func(...): (line 154)
        # Processing the call arguments (line 154)
        # Getting the type of 'v' (line 154)
        v_498679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 35), 'v', False)
        # Processing the call keyword arguments (line 154)
        kwargs_498680 = {}
        # Getting the type of 'self' (line 154)
        self_498677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 19), 'self', False)
        # Obtaining the member '_eval_func' of a type (line 154)
        _eval_func_498678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 19), self_498677, '_eval_func')
        # Calling _eval_func(args, kwargs) (line 154)
        _eval_func_call_result_498681 = invoke(stypy.reporting.localization.Localization(__file__, 154, 19), _eval_func_498678, *[v_498679], **kwargs_498680)
        
        # Assigning a type to the variable 'stypy_return_type' (line 154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 154, 12), 'stypy_return_type', _eval_func_call_result_498681)
        # SSA branch for the else part of an if statement (line 153)
        module_type_store.open_ssa_branch('else')
        
        # Call to __call__(...): (line 156)
        # Processing the call arguments (line 156)
        # Getting the type of 'self' (line 156)
        self_498685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 38), 'self', False)
        # Getting the type of 'v' (line 156)
        v_498686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 44), 'v', False)
        # Processing the call keyword arguments (line 156)
        kwargs_498687 = {}
        # Getting the type of 'np' (line 156)
        np_498682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 19), 'np', False)
        # Obtaining the member 'poly1d' of a type (line 156)
        poly1d_498683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 156, 19), np_498682, 'poly1d')
        # Obtaining the member '__call__' of a type (line 156)
        call___498684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 156, 19), poly1d_498683, '__call__')
        # Calling __call__(args, kwargs) (line 156)
        call___call_result_498688 = invoke(stypy.reporting.localization.Localization(__file__, 156, 19), call___498684, *[self_498685, v_498686], **kwargs_498687)
        
        # Assigning a type to the variable 'stypy_return_type' (line 156)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 156, 12), 'stypy_return_type', call___call_result_498688)
        # SSA join for if statement (line 153)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 152)
        stypy_return_type_498689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_498689)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_498689


    @norecursion
    def _scale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_scale'
        module_type_store = module_type_store.open_function_context('_scale', 158, 4, False)
        # Assigning a type to the variable 'self' (line 159)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        orthopoly1d._scale.__dict__.__setitem__('stypy_localization', localization)
        orthopoly1d._scale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        orthopoly1d._scale.__dict__.__setitem__('stypy_type_store', module_type_store)
        orthopoly1d._scale.__dict__.__setitem__('stypy_function_name', 'orthopoly1d._scale')
        orthopoly1d._scale.__dict__.__setitem__('stypy_param_names_list', ['p'])
        orthopoly1d._scale.__dict__.__setitem__('stypy_varargs_param_name', None)
        orthopoly1d._scale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        orthopoly1d._scale.__dict__.__setitem__('stypy_call_defaults', defaults)
        orthopoly1d._scale.__dict__.__setitem__('stypy_call_varargs', varargs)
        orthopoly1d._scale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        orthopoly1d._scale.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'orthopoly1d._scale', ['p'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_scale', localization, ['p'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_scale(...)' code ##################

        
        
        # Getting the type of 'p' (line 159)
        p_498690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 11), 'p')
        float_498691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 16), 'float')
        # Applying the binary operator '==' (line 159)
        result_eq_498692 = python_operator(stypy.reporting.localization.Localization(__file__, 159, 11), '==', p_498690, float_498691)
        
        # Testing the type of an if condition (line 159)
        if_condition_498693 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 159, 8), result_eq_498692)
        # Assigning a type to the variable 'if_condition_498693' (line 159)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 8), 'if_condition_498693', if_condition_498693)
        # SSA begins for if statement (line 159)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 160)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 160, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 159)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 161)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        # Getting the type of 'self' (line 162)
        self_498694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 12), 'self')
        # Obtaining the member '_coeffs' of a type (line 162)
        _coeffs_498695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 162, 12), self_498694, '_coeffs')
        # SSA branch for the except part of a try statement (line 161)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 161)
        module_type_store.open_ssa_branch('except')
        
        # Getting the type of 'self' (line 164)
        self_498696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 12), 'self')
        # Obtaining the member '__dict__' of a type (line 164)
        dict___498697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 164, 12), self_498696, '__dict__')
        
        # Obtaining the type of the subscript
        str_498698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 26), 'str', 'coeffs')
        # Getting the type of 'self' (line 164)
        self_498699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 12), 'self')
        # Obtaining the member '__dict__' of a type (line 164)
        dict___498700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 164, 12), self_498699, '__dict__')
        # Obtaining the member '__getitem__' of a type (line 164)
        getitem___498701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 164, 12), dict___498700, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 164)
        subscript_call_result_498702 = invoke(stypy.reporting.localization.Localization(__file__, 164, 12), getitem___498701, str_498698)
        
        # Getting the type of 'p' (line 164)
        p_498703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 39), 'p')
        # Applying the binary operator '*=' (line 164)
        result_imul_498704 = python_operator(stypy.reporting.localization.Localization(__file__, 164, 12), '*=', subscript_call_result_498702, p_498703)
        # Getting the type of 'self' (line 164)
        self_498705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 12), 'self')
        # Obtaining the member '__dict__' of a type (line 164)
        dict___498706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 164, 12), self_498705, '__dict__')
        str_498707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 26), 'str', 'coeffs')
        # Storing an element on a container (line 164)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 164, 12), dict___498706, (str_498707, result_imul_498704))
        
        # SSA branch for the else branch of a try statement (line 161)
        module_type_store.open_ssa_branch('except else')
        
        # Getting the type of 'self' (line 167)
        self_498708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 12), 'self')
        # Obtaining the member '_coeffs' of a type (line 167)
        _coeffs_498709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 167, 12), self_498708, '_coeffs')
        # Getting the type of 'p' (line 167)
        p_498710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 28), 'p')
        # Applying the binary operator '*=' (line 167)
        result_imul_498711 = python_operator(stypy.reporting.localization.Localization(__file__, 167, 12), '*=', _coeffs_498709, p_498710)
        # Getting the type of 'self' (line 167)
        self_498712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 12), 'self')
        # Setting the type of the member '_coeffs' of a type (line 167)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 167, 12), self_498712, '_coeffs', result_imul_498711)
        
        # SSA join for try-except statement (line 161)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 169):
        
        # Assigning a Attribute to a Name (line 169):
        # Getting the type of 'self' (line 169)
        self_498713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 14), 'self')
        # Obtaining the member '_eval_func' of a type (line 169)
        _eval_func_498714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 14), self_498713, '_eval_func')
        # Assigning a type to the variable 'evf' (line 169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 8), 'evf', _eval_func_498714)
        
        # Getting the type of 'evf' (line 170)
        evf_498715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 11), 'evf')
        # Testing the type of an if condition (line 170)
        if_condition_498716 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 170, 8), evf_498715)
        # Assigning a type to the variable 'if_condition_498716' (line 170)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 170, 8), 'if_condition_498716', if_condition_498716)
        # SSA begins for if statement (line 170)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Lambda to a Subscript (line 171):
        
        # Assigning a Lambda to a Subscript (line 171):

        @norecursion
        def _stypy_temp_lambda_245(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_245'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_245', 171, 42, True)
            # Passed parameters checking function
            _stypy_temp_lambda_245.stypy_localization = localization
            _stypy_temp_lambda_245.stypy_type_of_self = None
            _stypy_temp_lambda_245.stypy_type_store = module_type_store
            _stypy_temp_lambda_245.stypy_function_name = '_stypy_temp_lambda_245'
            _stypy_temp_lambda_245.stypy_param_names_list = ['x']
            _stypy_temp_lambda_245.stypy_varargs_param_name = None
            _stypy_temp_lambda_245.stypy_kwargs_param_name = None
            _stypy_temp_lambda_245.stypy_call_defaults = defaults
            _stypy_temp_lambda_245.stypy_call_varargs = varargs
            _stypy_temp_lambda_245.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_245', ['x'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_245', ['x'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to evf(...): (line 171)
            # Processing the call arguments (line 171)
            # Getting the type of 'x' (line 171)
            x_498718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 56), 'x', False)
            # Processing the call keyword arguments (line 171)
            kwargs_498719 = {}
            # Getting the type of 'evf' (line 171)
            evf_498717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 52), 'evf', False)
            # Calling evf(args, kwargs) (line 171)
            evf_call_result_498720 = invoke(stypy.reporting.localization.Localization(__file__, 171, 52), evf_498717, *[x_498718], **kwargs_498719)
            
            # Getting the type of 'p' (line 171)
            p_498721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 61), 'p')
            # Applying the binary operator '*' (line 171)
            result_mul_498722 = python_operator(stypy.reporting.localization.Localization(__file__, 171, 52), '*', evf_call_result_498720, p_498721)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 171)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 171, 42), 'stypy_return_type', result_mul_498722)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_245' in the type store
            # Getting the type of 'stypy_return_type' (line 171)
            stypy_return_type_498723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 42), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_498723)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_245'
            return stypy_return_type_498723

        # Assigning a type to the variable '_stypy_temp_lambda_245' (line 171)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 171, 42), '_stypy_temp_lambda_245', _stypy_temp_lambda_245)
        # Getting the type of '_stypy_temp_lambda_245' (line 171)
        _stypy_temp_lambda_245_498724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 42), '_stypy_temp_lambda_245')
        # Getting the type of 'self' (line 171)
        self_498725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 12), 'self')
        # Obtaining the member '__dict__' of a type (line 171)
        dict___498726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 171, 12), self_498725, '__dict__')
        str_498727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 171, 26), 'str', '_eval_func')
        # Storing an element on a container (line 171)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 171, 12), dict___498726, (str_498727, _stypy_temp_lambda_245_498724))
        # SSA join for if statement (line 170)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 172)
        self_498728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 8), 'self')
        # Obtaining the member '__dict__' of a type (line 172)
        dict___498729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 172, 8), self_498728, '__dict__')
        
        # Obtaining the type of the subscript
        str_498730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 172, 22), 'str', 'normcoef')
        # Getting the type of 'self' (line 172)
        self_498731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 8), 'self')
        # Obtaining the member '__dict__' of a type (line 172)
        dict___498732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 172, 8), self_498731, '__dict__')
        # Obtaining the member '__getitem__' of a type (line 172)
        getitem___498733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 172, 8), dict___498732, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 172)
        subscript_call_result_498734 = invoke(stypy.reporting.localization.Localization(__file__, 172, 8), getitem___498733, str_498730)
        
        # Getting the type of 'p' (line 172)
        p_498735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 37), 'p')
        # Applying the binary operator '*=' (line 172)
        result_imul_498736 = python_operator(stypy.reporting.localization.Localization(__file__, 172, 8), '*=', subscript_call_result_498734, p_498735)
        # Getting the type of 'self' (line 172)
        self_498737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 8), 'self')
        # Obtaining the member '__dict__' of a type (line 172)
        dict___498738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 172, 8), self_498737, '__dict__')
        str_498739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 172, 22), 'str', 'normcoef')
        # Storing an element on a container (line 172)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 172, 8), dict___498738, (str_498739, result_imul_498736))
        
        
        # ################# End of '_scale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_scale' in the type store
        # Getting the type of 'stypy_return_type' (line 158)
        stypy_return_type_498740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_498740)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_scale'
        return stypy_return_type_498740


# Assigning a type to the variable 'orthopoly1d' (line 123)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 123, 0), 'orthopoly1d', orthopoly1d)

@norecursion
def _gen_roots_and_weights(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_gen_roots_and_weights'
    module_type_store = module_type_store.open_function_context('_gen_roots_and_weights', 175, 0, False)
    
    # Passed parameters checking function
    _gen_roots_and_weights.stypy_localization = localization
    _gen_roots_and_weights.stypy_type_of_self = None
    _gen_roots_and_weights.stypy_type_store = module_type_store
    _gen_roots_and_weights.stypy_function_name = '_gen_roots_and_weights'
    _gen_roots_and_weights.stypy_param_names_list = ['n', 'mu0', 'an_func', 'bn_func', 'f', 'df', 'symmetrize', 'mu']
    _gen_roots_and_weights.stypy_varargs_param_name = None
    _gen_roots_and_weights.stypy_kwargs_param_name = None
    _gen_roots_and_weights.stypy_call_defaults = defaults
    _gen_roots_and_weights.stypy_call_varargs = varargs
    _gen_roots_and_weights.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_gen_roots_and_weights', ['n', 'mu0', 'an_func', 'bn_func', 'f', 'df', 'symmetrize', 'mu'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_gen_roots_and_weights', localization, ['n', 'mu0', 'an_func', 'bn_func', 'f', 'df', 'symmetrize', 'mu'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_gen_roots_and_weights(...)' code ##################

    str_498741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, (-1)), 'str', '[x,w] = gen_roots_and_weights(n,an_func,sqrt_bn_func,mu)\n\n    Returns the roots (x) of an nth order orthogonal polynomial,\n    and weights (w) to use in appropriate Gaussian quadrature with that\n    orthogonal polynomial.\n\n    The polynomials have the recurrence relation\n          P_n+1(x) = (x - A_n) P_n(x) - B_n P_n-1(x)\n\n    an_func(n)          should return A_n\n    sqrt_bn_func(n)     should return sqrt(B_n)\n    mu ( = h_0 )        is the integral of the weight over the orthogonal\n                        interval\n    ')
    
    # Assigning a Call to a Name (line 190):
    
    # Assigning a Call to a Name (line 190):
    
    # Call to arange(...): (line 190)
    # Processing the call arguments (line 190)
    # Getting the type of 'n' (line 190)
    n_498744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 18), 'n', False)
    # Processing the call keyword arguments (line 190)
    str_498745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 190, 27), 'str', 'd')
    keyword_498746 = str_498745
    kwargs_498747 = {'dtype': keyword_498746}
    # Getting the type of 'np' (line 190)
    np_498742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 8), 'np', False)
    # Obtaining the member 'arange' of a type (line 190)
    arange_498743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 190, 8), np_498742, 'arange')
    # Calling arange(args, kwargs) (line 190)
    arange_call_result_498748 = invoke(stypy.reporting.localization.Localization(__file__, 190, 8), arange_498743, *[n_498744], **kwargs_498747)
    
    # Assigning a type to the variable 'k' (line 190)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 190, 4), 'k', arange_call_result_498748)
    
    # Assigning a Call to a Name (line 191):
    
    # Assigning a Call to a Name (line 191):
    
    # Call to zeros(...): (line 191)
    # Processing the call arguments (line 191)
    
    # Obtaining an instance of the builtin type 'tuple' (line 191)
    tuple_498751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 191)
    # Adding element type (line 191)
    int_498752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 18), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 191, 18), tuple_498751, int_498752)
    # Adding element type (line 191)
    # Getting the type of 'n' (line 191)
    n_498753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 21), 'n', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 191, 18), tuple_498751, n_498753)
    
    # Processing the call keyword arguments (line 191)
    kwargs_498754 = {}
    # Getting the type of 'np' (line 191)
    np_498749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 8), 'np', False)
    # Obtaining the member 'zeros' of a type (line 191)
    zeros_498750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 191, 8), np_498749, 'zeros')
    # Calling zeros(args, kwargs) (line 191)
    zeros_call_result_498755 = invoke(stypy.reporting.localization.Localization(__file__, 191, 8), zeros_498750, *[tuple_498751], **kwargs_498754)
    
    # Assigning a type to the variable 'c' (line 191)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 191, 4), 'c', zeros_call_result_498755)
    
    # Assigning a Call to a Subscript (line 192):
    
    # Assigning a Call to a Subscript (line 192):
    
    # Call to bn_func(...): (line 192)
    # Processing the call arguments (line 192)
    
    # Obtaining the type of the subscript
    int_498757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 24), 'int')
    slice_498758 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 192, 22), int_498757, None, None)
    # Getting the type of 'k' (line 192)
    k_498759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 22), 'k', False)
    # Obtaining the member '__getitem__' of a type (line 192)
    getitem___498760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 22), k_498759, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 192)
    subscript_call_result_498761 = invoke(stypy.reporting.localization.Localization(__file__, 192, 22), getitem___498760, slice_498758)
    
    # Processing the call keyword arguments (line 192)
    kwargs_498762 = {}
    # Getting the type of 'bn_func' (line 192)
    bn_func_498756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 14), 'bn_func', False)
    # Calling bn_func(args, kwargs) (line 192)
    bn_func_call_result_498763 = invoke(stypy.reporting.localization.Localization(__file__, 192, 14), bn_func_498756, *[subscript_call_result_498761], **kwargs_498762)
    
    # Getting the type of 'c' (line 192)
    c_498764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 4), 'c')
    int_498765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 6), 'int')
    int_498766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 8), 'int')
    slice_498767 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 192, 4), int_498766, None, None)
    # Storing an element on a container (line 192)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 192, 4), c_498764, ((int_498765, slice_498767), bn_func_call_result_498763))
    
    # Assigning a Call to a Subscript (line 193):
    
    # Assigning a Call to a Subscript (line 193):
    
    # Call to an_func(...): (line 193)
    # Processing the call arguments (line 193)
    # Getting the type of 'k' (line 193)
    k_498769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 21), 'k', False)
    # Processing the call keyword arguments (line 193)
    kwargs_498770 = {}
    # Getting the type of 'an_func' (line 193)
    an_func_498768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 13), 'an_func', False)
    # Calling an_func(args, kwargs) (line 193)
    an_func_call_result_498771 = invoke(stypy.reporting.localization.Localization(__file__, 193, 13), an_func_498768, *[k_498769], **kwargs_498770)
    
    # Getting the type of 'c' (line 193)
    c_498772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 4), 'c')
    int_498773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 6), 'int')
    slice_498774 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 193, 4), None, None, None)
    # Storing an element on a container (line 193)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 193, 4), c_498772, ((int_498773, slice_498774), an_func_call_result_498771))
    
    # Assigning a Call to a Name (line 194):
    
    # Assigning a Call to a Name (line 194):
    
    # Call to eigvals_banded(...): (line 194)
    # Processing the call arguments (line 194)
    # Getting the type of 'c' (line 194)
    c_498777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 30), 'c', False)
    # Processing the call keyword arguments (line 194)
    # Getting the type of 'True' (line 194)
    True_498778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 50), 'True', False)
    keyword_498779 = True_498778
    kwargs_498780 = {'overwrite_a_band': keyword_498779}
    # Getting the type of 'linalg' (line 194)
    linalg_498775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 8), 'linalg', False)
    # Obtaining the member 'eigvals_banded' of a type (line 194)
    eigvals_banded_498776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 8), linalg_498775, 'eigvals_banded')
    # Calling eigvals_banded(args, kwargs) (line 194)
    eigvals_banded_call_result_498781 = invoke(stypy.reporting.localization.Localization(__file__, 194, 8), eigvals_banded_498776, *[c_498777], **kwargs_498780)
    
    # Assigning a type to the variable 'x' (line 194)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 194, 4), 'x', eigvals_banded_call_result_498781)
    
    # Assigning a Call to a Name (line 197):
    
    # Assigning a Call to a Name (line 197):
    
    # Call to f(...): (line 197)
    # Processing the call arguments (line 197)
    # Getting the type of 'n' (line 197)
    n_498783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 10), 'n', False)
    # Getting the type of 'x' (line 197)
    x_498784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 13), 'x', False)
    # Processing the call keyword arguments (line 197)
    kwargs_498785 = {}
    # Getting the type of 'f' (line 197)
    f_498782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 8), 'f', False)
    # Calling f(args, kwargs) (line 197)
    f_call_result_498786 = invoke(stypy.reporting.localization.Localization(__file__, 197, 8), f_498782, *[n_498783, x_498784], **kwargs_498785)
    
    # Assigning a type to the variable 'y' (line 197)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 197, 4), 'y', f_call_result_498786)
    
    # Assigning a Call to a Name (line 198):
    
    # Assigning a Call to a Name (line 198):
    
    # Call to df(...): (line 198)
    # Processing the call arguments (line 198)
    # Getting the type of 'n' (line 198)
    n_498788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 12), 'n', False)
    # Getting the type of 'x' (line 198)
    x_498789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 15), 'x', False)
    # Processing the call keyword arguments (line 198)
    kwargs_498790 = {}
    # Getting the type of 'df' (line 198)
    df_498787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 9), 'df', False)
    # Calling df(args, kwargs) (line 198)
    df_call_result_498791 = invoke(stypy.reporting.localization.Localization(__file__, 198, 9), df_498787, *[n_498788, x_498789], **kwargs_498790)
    
    # Assigning a type to the variable 'dy' (line 198)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 198, 4), 'dy', df_call_result_498791)
    
    # Getting the type of 'x' (line 199)
    x_498792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 4), 'x')
    # Getting the type of 'y' (line 199)
    y_498793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 9), 'y')
    # Getting the type of 'dy' (line 199)
    dy_498794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 11), 'dy')
    # Applying the binary operator 'div' (line 199)
    result_div_498795 = python_operator(stypy.reporting.localization.Localization(__file__, 199, 9), 'div', y_498793, dy_498794)
    
    # Applying the binary operator '-=' (line 199)
    result_isub_498796 = python_operator(stypy.reporting.localization.Localization(__file__, 199, 4), '-=', x_498792, result_div_498795)
    # Assigning a type to the variable 'x' (line 199)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 199, 4), 'x', result_isub_498796)
    
    
    # Assigning a Call to a Name (line 201):
    
    # Assigning a Call to a Name (line 201):
    
    # Call to f(...): (line 201)
    # Processing the call arguments (line 201)
    # Getting the type of 'n' (line 201)
    n_498798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 11), 'n', False)
    int_498799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 201, 13), 'int')
    # Applying the binary operator '-' (line 201)
    result_sub_498800 = python_operator(stypy.reporting.localization.Localization(__file__, 201, 11), '-', n_498798, int_498799)
    
    # Getting the type of 'x' (line 201)
    x_498801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 16), 'x', False)
    # Processing the call keyword arguments (line 201)
    kwargs_498802 = {}
    # Getting the type of 'f' (line 201)
    f_498797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 9), 'f', False)
    # Calling f(args, kwargs) (line 201)
    f_call_result_498803 = invoke(stypy.reporting.localization.Localization(__file__, 201, 9), f_498797, *[result_sub_498800, x_498801], **kwargs_498802)
    
    # Assigning a type to the variable 'fm' (line 201)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 201, 4), 'fm', f_call_result_498803)
    
    # Getting the type of 'fm' (line 202)
    fm_498804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 4), 'fm')
    
    # Call to max(...): (line 202)
    # Processing the call keyword arguments (line 202)
    kwargs_498811 = {}
    
    # Call to abs(...): (line 202)
    # Processing the call arguments (line 202)
    # Getting the type of 'fm' (line 202)
    fm_498807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 17), 'fm', False)
    # Processing the call keyword arguments (line 202)
    kwargs_498808 = {}
    # Getting the type of 'np' (line 202)
    np_498805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 10), 'np', False)
    # Obtaining the member 'abs' of a type (line 202)
    abs_498806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 10), np_498805, 'abs')
    # Calling abs(args, kwargs) (line 202)
    abs_call_result_498809 = invoke(stypy.reporting.localization.Localization(__file__, 202, 10), abs_498806, *[fm_498807], **kwargs_498808)
    
    # Obtaining the member 'max' of a type (line 202)
    max_498810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 10), abs_call_result_498809, 'max')
    # Calling max(args, kwargs) (line 202)
    max_call_result_498812 = invoke(stypy.reporting.localization.Localization(__file__, 202, 10), max_498810, *[], **kwargs_498811)
    
    # Applying the binary operator 'div=' (line 202)
    result_div_498813 = python_operator(stypy.reporting.localization.Localization(__file__, 202, 4), 'div=', fm_498804, max_call_result_498812)
    # Assigning a type to the variable 'fm' (line 202)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 202, 4), 'fm', result_div_498813)
    
    
    # Getting the type of 'dy' (line 203)
    dy_498814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 4), 'dy')
    
    # Call to max(...): (line 203)
    # Processing the call keyword arguments (line 203)
    kwargs_498821 = {}
    
    # Call to abs(...): (line 203)
    # Processing the call arguments (line 203)
    # Getting the type of 'dy' (line 203)
    dy_498817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 17), 'dy', False)
    # Processing the call keyword arguments (line 203)
    kwargs_498818 = {}
    # Getting the type of 'np' (line 203)
    np_498815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 10), 'np', False)
    # Obtaining the member 'abs' of a type (line 203)
    abs_498816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 203, 10), np_498815, 'abs')
    # Calling abs(args, kwargs) (line 203)
    abs_call_result_498819 = invoke(stypy.reporting.localization.Localization(__file__, 203, 10), abs_498816, *[dy_498817], **kwargs_498818)
    
    # Obtaining the member 'max' of a type (line 203)
    max_498820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 203, 10), abs_call_result_498819, 'max')
    # Calling max(args, kwargs) (line 203)
    max_call_result_498822 = invoke(stypy.reporting.localization.Localization(__file__, 203, 10), max_498820, *[], **kwargs_498821)
    
    # Applying the binary operator 'div=' (line 203)
    result_div_498823 = python_operator(stypy.reporting.localization.Localization(__file__, 203, 4), 'div=', dy_498814, max_call_result_498822)
    # Assigning a type to the variable 'dy' (line 203)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 203, 4), 'dy', result_div_498823)
    
    
    # Assigning a BinOp to a Name (line 204):
    
    # Assigning a BinOp to a Name (line 204):
    float_498824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 204, 8), 'float')
    # Getting the type of 'fm' (line 204)
    fm_498825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 15), 'fm')
    # Getting the type of 'dy' (line 204)
    dy_498826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 20), 'dy')
    # Applying the binary operator '*' (line 204)
    result_mul_498827 = python_operator(stypy.reporting.localization.Localization(__file__, 204, 15), '*', fm_498825, dy_498826)
    
    # Applying the binary operator 'div' (line 204)
    result_div_498828 = python_operator(stypy.reporting.localization.Localization(__file__, 204, 8), 'div', float_498824, result_mul_498827)
    
    # Assigning a type to the variable 'w' (line 204)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 204, 4), 'w', result_div_498828)
    
    # Getting the type of 'symmetrize' (line 206)
    symmetrize_498829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 7), 'symmetrize')
    # Testing the type of an if condition (line 206)
    if_condition_498830 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 206, 4), symmetrize_498829)
    # Assigning a type to the variable 'if_condition_498830' (line 206)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 206, 4), 'if_condition_498830', if_condition_498830)
    # SSA begins for if statement (line 206)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 207):
    
    # Assigning a BinOp to a Name (line 207):
    # Getting the type of 'w' (line 207)
    w_498831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 13), 'w')
    
    # Obtaining the type of the subscript
    int_498832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 207, 21), 'int')
    slice_498833 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 207, 17), None, None, int_498832)
    # Getting the type of 'w' (line 207)
    w_498834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 17), 'w')
    # Obtaining the member '__getitem__' of a type (line 207)
    getitem___498835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 17), w_498834, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 207)
    subscript_call_result_498836 = invoke(stypy.reporting.localization.Localization(__file__, 207, 17), getitem___498835, slice_498833)
    
    # Applying the binary operator '+' (line 207)
    result_add_498837 = python_operator(stypy.reporting.localization.Localization(__file__, 207, 13), '+', w_498831, subscript_call_result_498836)
    
    int_498838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 207, 28), 'int')
    # Applying the binary operator 'div' (line 207)
    result_div_498839 = python_operator(stypy.reporting.localization.Localization(__file__, 207, 12), 'div', result_add_498837, int_498838)
    
    # Assigning a type to the variable 'w' (line 207)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 207, 8), 'w', result_div_498839)
    
    # Assigning a BinOp to a Name (line 208):
    
    # Assigning a BinOp to a Name (line 208):
    # Getting the type of 'x' (line 208)
    x_498840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 13), 'x')
    
    # Obtaining the type of the subscript
    int_498841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 208, 21), 'int')
    slice_498842 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 208, 17), None, None, int_498841)
    # Getting the type of 'x' (line 208)
    x_498843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 17), 'x')
    # Obtaining the member '__getitem__' of a type (line 208)
    getitem___498844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 208, 17), x_498843, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 208)
    subscript_call_result_498845 = invoke(stypy.reporting.localization.Localization(__file__, 208, 17), getitem___498844, slice_498842)
    
    # Applying the binary operator '-' (line 208)
    result_sub_498846 = python_operator(stypy.reporting.localization.Localization(__file__, 208, 13), '-', x_498840, subscript_call_result_498845)
    
    int_498847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 208, 28), 'int')
    # Applying the binary operator 'div' (line 208)
    result_div_498848 = python_operator(stypy.reporting.localization.Localization(__file__, 208, 12), 'div', result_sub_498846, int_498847)
    
    # Assigning a type to the variable 'x' (line 208)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 208, 8), 'x', result_div_498848)
    # SSA join for if statement (line 206)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'w' (line 210)
    w_498849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 4), 'w')
    # Getting the type of 'mu0' (line 210)
    mu0_498850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 9), 'mu0')
    
    # Call to sum(...): (line 210)
    # Processing the call keyword arguments (line 210)
    kwargs_498853 = {}
    # Getting the type of 'w' (line 210)
    w_498851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 15), 'w', False)
    # Obtaining the member 'sum' of a type (line 210)
    sum_498852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 210, 15), w_498851, 'sum')
    # Calling sum(args, kwargs) (line 210)
    sum_call_result_498854 = invoke(stypy.reporting.localization.Localization(__file__, 210, 15), sum_498852, *[], **kwargs_498853)
    
    # Applying the binary operator 'div' (line 210)
    result_div_498855 = python_operator(stypy.reporting.localization.Localization(__file__, 210, 9), 'div', mu0_498850, sum_call_result_498854)
    
    # Applying the binary operator '*=' (line 210)
    result_imul_498856 = python_operator(stypy.reporting.localization.Localization(__file__, 210, 4), '*=', w_498849, result_div_498855)
    # Assigning a type to the variable 'w' (line 210)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 4), 'w', result_imul_498856)
    
    
    # Getting the type of 'mu' (line 212)
    mu_498857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 7), 'mu')
    # Testing the type of an if condition (line 212)
    if_condition_498858 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 212, 4), mu_498857)
    # Assigning a type to the variable 'if_condition_498858' (line 212)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 212, 4), 'if_condition_498858', if_condition_498858)
    # SSA begins for if statement (line 212)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 213)
    tuple_498859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 213, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 213)
    # Adding element type (line 213)
    # Getting the type of 'x' (line 213)
    x_498860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 15), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 213, 15), tuple_498859, x_498860)
    # Adding element type (line 213)
    # Getting the type of 'w' (line 213)
    w_498861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 18), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 213, 15), tuple_498859, w_498861)
    # Adding element type (line 213)
    # Getting the type of 'mu0' (line 213)
    mu0_498862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 21), 'mu0')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 213, 15), tuple_498859, mu0_498862)
    
    # Assigning a type to the variable 'stypy_return_type' (line 213)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 8), 'stypy_return_type', tuple_498859)
    # SSA branch for the else part of an if statement (line 212)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining an instance of the builtin type 'tuple' (line 215)
    tuple_498863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 215, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 215)
    # Adding element type (line 215)
    # Getting the type of 'x' (line 215)
    x_498864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 15), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 215, 15), tuple_498863, x_498864)
    # Adding element type (line 215)
    # Getting the type of 'w' (line 215)
    w_498865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 18), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 215, 15), tuple_498863, w_498865)
    
    # Assigning a type to the variable 'stypy_return_type' (line 215)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 215, 8), 'stypy_return_type', tuple_498863)
    # SSA join for if statement (line 212)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_gen_roots_and_weights(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_gen_roots_and_weights' in the type store
    # Getting the type of 'stypy_return_type' (line 175)
    stypy_return_type_498866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_498866)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_gen_roots_and_weights'
    return stypy_return_type_498866

# Assigning a type to the variable '_gen_roots_and_weights' (line 175)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 175, 0), '_gen_roots_and_weights', _gen_roots_and_weights)

@norecursion
def roots_jacobi(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 220)
    False_498867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 36), 'False')
    defaults = [False_498867]
    # Create a new context for function 'roots_jacobi'
    module_type_store = module_type_store.open_function_context('roots_jacobi', 220, 0, False)
    
    # Passed parameters checking function
    roots_jacobi.stypy_localization = localization
    roots_jacobi.stypy_type_of_self = None
    roots_jacobi.stypy_type_store = module_type_store
    roots_jacobi.stypy_function_name = 'roots_jacobi'
    roots_jacobi.stypy_param_names_list = ['n', 'alpha', 'beta', 'mu']
    roots_jacobi.stypy_varargs_param_name = None
    roots_jacobi.stypy_kwargs_param_name = None
    roots_jacobi.stypy_call_defaults = defaults
    roots_jacobi.stypy_call_varargs = varargs
    roots_jacobi.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'roots_jacobi', ['n', 'alpha', 'beta', 'mu'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'roots_jacobi', localization, ['n', 'alpha', 'beta', 'mu'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'roots_jacobi(...)' code ##################

    str_498868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 254, (-1)), 'str', 'Gauss-Jacobi quadrature.\n\n    Computes the sample points and weights for Gauss-Jacobi quadrature. The\n    sample points are the roots of the n-th degree Jacobi polynomial,\n    :math:`P^{\\alpha, \\beta}_n(x)`.  These sample points and weights\n    correctly integrate polynomials of degree :math:`2n - 1` or less over the\n    interval :math:`[-1, 1]` with weight function\n    :math:`f(x) = (1 - x)^{\\alpha} (1 + x)^{\\beta}`.\n\n    Parameters\n    ----------\n    n : int\n        quadrature order\n    alpha : float\n        alpha must be > -1\n    beta : float\n        beta must be > 0\n    mu : bool, optional\n        If True, return the sum of the weights, optional.\n\n    Returns\n    -------\n    x : ndarray\n        Sample points\n    w : ndarray\n        Weights\n    mu : float\n        Sum of the weights\n\n    See Also\n    --------\n    scipy.integrate.quadrature\n    scipy.integrate.fixed_quad\n    ')
    
    # Assigning a Call to a Name (line 255):
    
    # Assigning a Call to a Name (line 255):
    
    # Call to int(...): (line 255)
    # Processing the call arguments (line 255)
    # Getting the type of 'n' (line 255)
    n_498870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 12), 'n', False)
    # Processing the call keyword arguments (line 255)
    kwargs_498871 = {}
    # Getting the type of 'int' (line 255)
    int_498869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 8), 'int', False)
    # Calling int(args, kwargs) (line 255)
    int_call_result_498872 = invoke(stypy.reporting.localization.Localization(__file__, 255, 8), int_498869, *[n_498870], **kwargs_498871)
    
    # Assigning a type to the variable 'm' (line 255)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 255, 4), 'm', int_call_result_498872)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'n' (line 256)
    n_498873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 7), 'n')
    int_498874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 11), 'int')
    # Applying the binary operator '<' (line 256)
    result_lt_498875 = python_operator(stypy.reporting.localization.Localization(__file__, 256, 7), '<', n_498873, int_498874)
    
    
    # Getting the type of 'n' (line 256)
    n_498876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 16), 'n')
    # Getting the type of 'm' (line 256)
    m_498877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 21), 'm')
    # Applying the binary operator '!=' (line 256)
    result_ne_498878 = python_operator(stypy.reporting.localization.Localization(__file__, 256, 16), '!=', n_498876, m_498877)
    
    # Applying the binary operator 'or' (line 256)
    result_or_keyword_498879 = python_operator(stypy.reporting.localization.Localization(__file__, 256, 7), 'or', result_lt_498875, result_ne_498878)
    
    # Testing the type of an if condition (line 256)
    if_condition_498880 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 256, 4), result_or_keyword_498879)
    # Assigning a type to the variable 'if_condition_498880' (line 256)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 4), 'if_condition_498880', if_condition_498880)
    # SSA begins for if statement (line 256)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 257)
    # Processing the call arguments (line 257)
    str_498882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 257, 25), 'str', 'n must be a positive integer.')
    # Processing the call keyword arguments (line 257)
    kwargs_498883 = {}
    # Getting the type of 'ValueError' (line 257)
    ValueError_498881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 257)
    ValueError_call_result_498884 = invoke(stypy.reporting.localization.Localization(__file__, 257, 14), ValueError_498881, *[str_498882], **kwargs_498883)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 257, 8), ValueError_call_result_498884, 'raise parameter', BaseException)
    # SSA join for if statement (line 256)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'alpha' (line 258)
    alpha_498885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 7), 'alpha')
    int_498886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 258, 16), 'int')
    # Applying the binary operator '<=' (line 258)
    result_le_498887 = python_operator(stypy.reporting.localization.Localization(__file__, 258, 7), '<=', alpha_498885, int_498886)
    
    
    # Getting the type of 'beta' (line 258)
    beta_498888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 22), 'beta')
    int_498889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 258, 30), 'int')
    # Applying the binary operator '<=' (line 258)
    result_le_498890 = python_operator(stypy.reporting.localization.Localization(__file__, 258, 22), '<=', beta_498888, int_498889)
    
    # Applying the binary operator 'or' (line 258)
    result_or_keyword_498891 = python_operator(stypy.reporting.localization.Localization(__file__, 258, 7), 'or', result_le_498887, result_le_498890)
    
    # Testing the type of an if condition (line 258)
    if_condition_498892 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 258, 4), result_or_keyword_498891)
    # Assigning a type to the variable 'if_condition_498892' (line 258)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 4), 'if_condition_498892', if_condition_498892)
    # SSA begins for if statement (line 258)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 259)
    # Processing the call arguments (line 259)
    str_498894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 259, 25), 'str', 'alpha and beta must be greater than -1.')
    # Processing the call keyword arguments (line 259)
    kwargs_498895 = {}
    # Getting the type of 'ValueError' (line 259)
    ValueError_498893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 259)
    ValueError_call_result_498896 = invoke(stypy.reporting.localization.Localization(__file__, 259, 14), ValueError_498893, *[str_498894], **kwargs_498895)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 259, 8), ValueError_call_result_498896, 'raise parameter', BaseException)
    # SSA join for if statement (line 258)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'alpha' (line 261)
    alpha_498897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 7), 'alpha')
    float_498898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 261, 16), 'float')
    # Applying the binary operator '==' (line 261)
    result_eq_498899 = python_operator(stypy.reporting.localization.Localization(__file__, 261, 7), '==', alpha_498897, float_498898)
    
    
    # Getting the type of 'beta' (line 261)
    beta_498900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 24), 'beta')
    float_498901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 261, 32), 'float')
    # Applying the binary operator '==' (line 261)
    result_eq_498902 = python_operator(stypy.reporting.localization.Localization(__file__, 261, 24), '==', beta_498900, float_498901)
    
    # Applying the binary operator 'and' (line 261)
    result_and_keyword_498903 = python_operator(stypy.reporting.localization.Localization(__file__, 261, 7), 'and', result_eq_498899, result_eq_498902)
    
    # Testing the type of an if condition (line 261)
    if_condition_498904 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 261, 4), result_and_keyword_498903)
    # Assigning a type to the variable 'if_condition_498904' (line 261)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 261, 4), 'if_condition_498904', if_condition_498904)
    # SSA begins for if statement (line 261)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to roots_legendre(...): (line 262)
    # Processing the call arguments (line 262)
    # Getting the type of 'm' (line 262)
    m_498906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 30), 'm', False)
    # Getting the type of 'mu' (line 262)
    mu_498907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 33), 'mu', False)
    # Processing the call keyword arguments (line 262)
    kwargs_498908 = {}
    # Getting the type of 'roots_legendre' (line 262)
    roots_legendre_498905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 15), 'roots_legendre', False)
    # Calling roots_legendre(args, kwargs) (line 262)
    roots_legendre_call_result_498909 = invoke(stypy.reporting.localization.Localization(__file__, 262, 15), roots_legendre_498905, *[m_498906, mu_498907], **kwargs_498908)
    
    # Assigning a type to the variable 'stypy_return_type' (line 262)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 262, 8), 'stypy_return_type', roots_legendre_call_result_498909)
    # SSA join for if statement (line 261)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'alpha' (line 263)
    alpha_498910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 7), 'alpha')
    # Getting the type of 'beta' (line 263)
    beta_498911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 16), 'beta')
    # Applying the binary operator '==' (line 263)
    result_eq_498912 = python_operator(stypy.reporting.localization.Localization(__file__, 263, 7), '==', alpha_498910, beta_498911)
    
    # Testing the type of an if condition (line 263)
    if_condition_498913 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 263, 4), result_eq_498912)
    # Assigning a type to the variable 'if_condition_498913' (line 263)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 4), 'if_condition_498913', if_condition_498913)
    # SSA begins for if statement (line 263)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to roots_gegenbauer(...): (line 264)
    # Processing the call arguments (line 264)
    # Getting the type of 'm' (line 264)
    m_498915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 32), 'm', False)
    # Getting the type of 'alpha' (line 264)
    alpha_498916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 35), 'alpha', False)
    float_498917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 264, 41), 'float')
    # Applying the binary operator '+' (line 264)
    result_add_498918 = python_operator(stypy.reporting.localization.Localization(__file__, 264, 35), '+', alpha_498916, float_498917)
    
    # Getting the type of 'mu' (line 264)
    mu_498919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 46), 'mu', False)
    # Processing the call keyword arguments (line 264)
    kwargs_498920 = {}
    # Getting the type of 'roots_gegenbauer' (line 264)
    roots_gegenbauer_498914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 15), 'roots_gegenbauer', False)
    # Calling roots_gegenbauer(args, kwargs) (line 264)
    roots_gegenbauer_call_result_498921 = invoke(stypy.reporting.localization.Localization(__file__, 264, 15), roots_gegenbauer_498914, *[m_498915, result_add_498918, mu_498919], **kwargs_498920)
    
    # Assigning a type to the variable 'stypy_return_type' (line 264)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 264, 8), 'stypy_return_type', roots_gegenbauer_call_result_498921)
    # SSA join for if statement (line 263)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 266):
    
    # Assigning a BinOp to a Name (line 266):
    float_498922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 266, 10), 'float')
    # Getting the type of 'alpha' (line 266)
    alpha_498923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 16), 'alpha')
    # Getting the type of 'beta' (line 266)
    beta_498924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 22), 'beta')
    # Applying the binary operator '+' (line 266)
    result_add_498925 = python_operator(stypy.reporting.localization.Localization(__file__, 266, 16), '+', alpha_498923, beta_498924)
    
    int_498926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 266, 27), 'int')
    # Applying the binary operator '+' (line 266)
    result_add_498927 = python_operator(stypy.reporting.localization.Localization(__file__, 266, 26), '+', result_add_498925, int_498926)
    
    # Applying the binary operator '**' (line 266)
    result_pow_498928 = python_operator(stypy.reporting.localization.Localization(__file__, 266, 10), '**', float_498922, result_add_498927)
    
    
    # Call to beta(...): (line 266)
    # Processing the call arguments (line 266)
    # Getting the type of 'alpha' (line 266)
    alpha_498931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 42), 'alpha', False)
    int_498932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 266, 48), 'int')
    # Applying the binary operator '+' (line 266)
    result_add_498933 = python_operator(stypy.reporting.localization.Localization(__file__, 266, 42), '+', alpha_498931, int_498932)
    
    # Getting the type of 'beta' (line 266)
    beta_498934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 51), 'beta', False)
    int_498935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 266, 56), 'int')
    # Applying the binary operator '+' (line 266)
    result_add_498936 = python_operator(stypy.reporting.localization.Localization(__file__, 266, 51), '+', beta_498934, int_498935)
    
    # Processing the call keyword arguments (line 266)
    kwargs_498937 = {}
    # Getting the type of 'cephes' (line 266)
    cephes_498929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 30), 'cephes', False)
    # Obtaining the member 'beta' of a type (line 266)
    beta_498930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 266, 30), cephes_498929, 'beta')
    # Calling beta(args, kwargs) (line 266)
    beta_call_result_498938 = invoke(stypy.reporting.localization.Localization(__file__, 266, 30), beta_498930, *[result_add_498933, result_add_498936], **kwargs_498937)
    
    # Applying the binary operator '*' (line 266)
    result_mul_498939 = python_operator(stypy.reporting.localization.Localization(__file__, 266, 10), '*', result_pow_498928, beta_call_result_498938)
    
    # Assigning a type to the variable 'mu0' (line 266)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 266, 4), 'mu0', result_mul_498939)
    
    # Assigning a Name to a Name (line 267):
    
    # Assigning a Name to a Name (line 267):
    # Getting the type of 'alpha' (line 267)
    alpha_498940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 8), 'alpha')
    # Assigning a type to the variable 'a' (line 267)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 267, 4), 'a', alpha_498940)
    
    # Assigning a Name to a Name (line 268):
    
    # Assigning a Name to a Name (line 268):
    # Getting the type of 'beta' (line 268)
    beta_498941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'beta')
    # Assigning a type to the variable 'b' (line 268)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 4), 'b', beta_498941)
    
    
    # Getting the type of 'a' (line 269)
    a_498942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 7), 'a')
    # Getting the type of 'b' (line 269)
    b_498943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 11), 'b')
    # Applying the binary operator '+' (line 269)
    result_add_498944 = python_operator(stypy.reporting.localization.Localization(__file__, 269, 7), '+', a_498942, b_498943)
    
    float_498945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 269, 16), 'float')
    # Applying the binary operator '==' (line 269)
    result_eq_498946 = python_operator(stypy.reporting.localization.Localization(__file__, 269, 7), '==', result_add_498944, float_498945)
    
    # Testing the type of an if condition (line 269)
    if_condition_498947 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 269, 4), result_eq_498946)
    # Assigning a type to the variable 'if_condition_498947' (line 269)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 269, 4), 'if_condition_498947', if_condition_498947)
    # SSA begins for if statement (line 269)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Lambda to a Name (line 270):
    
    # Assigning a Lambda to a Name (line 270):

    @norecursion
    def _stypy_temp_lambda_246(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_246'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_246', 270, 18, True)
        # Passed parameters checking function
        _stypy_temp_lambda_246.stypy_localization = localization
        _stypy_temp_lambda_246.stypy_type_of_self = None
        _stypy_temp_lambda_246.stypy_type_store = module_type_store
        _stypy_temp_lambda_246.stypy_function_name = '_stypy_temp_lambda_246'
        _stypy_temp_lambda_246.stypy_param_names_list = ['k']
        _stypy_temp_lambda_246.stypy_varargs_param_name = None
        _stypy_temp_lambda_246.stypy_kwargs_param_name = None
        _stypy_temp_lambda_246.stypy_call_defaults = defaults
        _stypy_temp_lambda_246.stypy_call_varargs = varargs
        _stypy_temp_lambda_246.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_246', ['k'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_246', ['k'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to where(...): (line 270)
        # Processing the call arguments (line 270)
        
        # Getting the type of 'k' (line 270)
        k_498950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 37), 'k', False)
        int_498951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 270, 42), 'int')
        # Applying the binary operator '==' (line 270)
        result_eq_498952 = python_operator(stypy.reporting.localization.Localization(__file__, 270, 37), '==', k_498950, int_498951)
        
        # Getting the type of 'b' (line 270)
        b_498953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 46), 'b', False)
        # Getting the type of 'a' (line 270)
        a_498954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 48), 'a', False)
        # Applying the binary operator '-' (line 270)
        result_sub_498955 = python_operator(stypy.reporting.localization.Localization(__file__, 270, 46), '-', b_498953, a_498954)
        
        int_498956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 270, 52), 'int')
        # Getting the type of 'a' (line 270)
        a_498957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 54), 'a', False)
        # Applying the binary operator '+' (line 270)
        result_add_498958 = python_operator(stypy.reporting.localization.Localization(__file__, 270, 52), '+', int_498956, a_498957)
        
        # Getting the type of 'b' (line 270)
        b_498959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 56), 'b', False)
        # Applying the binary operator '+' (line 270)
        result_add_498960 = python_operator(stypy.reporting.localization.Localization(__file__, 270, 55), '+', result_add_498958, b_498959)
        
        # Applying the binary operator 'div' (line 270)
        result_div_498961 = python_operator(stypy.reporting.localization.Localization(__file__, 270, 45), 'div', result_sub_498955, result_add_498960)
        
        float_498962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 270, 60), 'float')
        # Processing the call keyword arguments (line 270)
        kwargs_498963 = {}
        # Getting the type of 'np' (line 270)
        np_498948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 28), 'np', False)
        # Obtaining the member 'where' of a type (line 270)
        where_498949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 270, 28), np_498948, 'where')
        # Calling where(args, kwargs) (line 270)
        where_call_result_498964 = invoke(stypy.reporting.localization.Localization(__file__, 270, 28), where_498949, *[result_eq_498952, result_div_498961, float_498962], **kwargs_498963)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 270, 18), 'stypy_return_type', where_call_result_498964)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_246' in the type store
        # Getting the type of 'stypy_return_type' (line 270)
        stypy_return_type_498965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 18), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_498965)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_246'
        return stypy_return_type_498965

    # Assigning a type to the variable '_stypy_temp_lambda_246' (line 270)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 270, 18), '_stypy_temp_lambda_246', _stypy_temp_lambda_246)
    # Getting the type of '_stypy_temp_lambda_246' (line 270)
    _stypy_temp_lambda_246_498966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 18), '_stypy_temp_lambda_246')
    # Assigning a type to the variable 'an_func' (line 270)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 270, 8), 'an_func', _stypy_temp_lambda_246_498966)
    # SSA branch for the else part of an if statement (line 269)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Lambda to a Name (line 272):
    
    # Assigning a Lambda to a Name (line 272):

    @norecursion
    def _stypy_temp_lambda_247(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_247'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_247', 272, 18, True)
        # Passed parameters checking function
        _stypy_temp_lambda_247.stypy_localization = localization
        _stypy_temp_lambda_247.stypy_type_of_self = None
        _stypy_temp_lambda_247.stypy_type_store = module_type_store
        _stypy_temp_lambda_247.stypy_function_name = '_stypy_temp_lambda_247'
        _stypy_temp_lambda_247.stypy_param_names_list = ['k']
        _stypy_temp_lambda_247.stypy_varargs_param_name = None
        _stypy_temp_lambda_247.stypy_kwargs_param_name = None
        _stypy_temp_lambda_247.stypy_call_defaults = defaults
        _stypy_temp_lambda_247.stypy_call_varargs = varargs
        _stypy_temp_lambda_247.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_247', ['k'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_247', ['k'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to where(...): (line 272)
        # Processing the call arguments (line 272)
        
        # Getting the type of 'k' (line 272)
        k_498969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 37), 'k', False)
        int_498970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 272, 42), 'int')
        # Applying the binary operator '==' (line 272)
        result_eq_498971 = python_operator(stypy.reporting.localization.Localization(__file__, 272, 37), '==', k_498969, int_498970)
        
        # Getting the type of 'b' (line 272)
        b_498972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 46), 'b', False)
        # Getting the type of 'a' (line 272)
        a_498973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 48), 'a', False)
        # Applying the binary operator '-' (line 272)
        result_sub_498974 = python_operator(stypy.reporting.localization.Localization(__file__, 272, 46), '-', b_498972, a_498973)
        
        int_498975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 272, 52), 'int')
        # Getting the type of 'a' (line 272)
        a_498976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 54), 'a', False)
        # Applying the binary operator '+' (line 272)
        result_add_498977 = python_operator(stypy.reporting.localization.Localization(__file__, 272, 52), '+', int_498975, a_498976)
        
        # Getting the type of 'b' (line 272)
        b_498978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 56), 'b', False)
        # Applying the binary operator '+' (line 272)
        result_add_498979 = python_operator(stypy.reporting.localization.Localization(__file__, 272, 55), '+', result_add_498977, b_498978)
        
        # Applying the binary operator 'div' (line 272)
        result_div_498980 = python_operator(stypy.reporting.localization.Localization(__file__, 272, 45), 'div', result_sub_498974, result_add_498979)
        
        # Getting the type of 'b' (line 273)
        b_498981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 19), 'b', False)
        # Getting the type of 'b' (line 273)
        b_498982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 21), 'b', False)
        # Applying the binary operator '*' (line 273)
        result_mul_498983 = python_operator(stypy.reporting.localization.Localization(__file__, 273, 19), '*', b_498981, b_498982)
        
        # Getting the type of 'a' (line 273)
        a_498984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 25), 'a', False)
        # Getting the type of 'a' (line 273)
        a_498985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 27), 'a', False)
        # Applying the binary operator '*' (line 273)
        result_mul_498986 = python_operator(stypy.reporting.localization.Localization(__file__, 273, 25), '*', a_498984, a_498985)
        
        # Applying the binary operator '-' (line 273)
        result_sub_498987 = python_operator(stypy.reporting.localization.Localization(__file__, 273, 19), '-', result_mul_498983, result_mul_498986)
        
        float_498988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 34), 'float')
        # Getting the type of 'k' (line 273)
        k_498989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 38), 'k', False)
        # Applying the binary operator '*' (line 273)
        result_mul_498990 = python_operator(stypy.reporting.localization.Localization(__file__, 273, 34), '*', float_498988, k_498989)
        
        # Getting the type of 'a' (line 273)
        a_498991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 40), 'a', False)
        # Applying the binary operator '+' (line 273)
        result_add_498992 = python_operator(stypy.reporting.localization.Localization(__file__, 273, 34), '+', result_mul_498990, a_498991)
        
        # Getting the type of 'b' (line 273)
        b_498993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 42), 'b', False)
        # Applying the binary operator '+' (line 273)
        result_add_498994 = python_operator(stypy.reporting.localization.Localization(__file__, 273, 41), '+', result_add_498992, b_498993)
        
        float_498995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 46), 'float')
        # Getting the type of 'k' (line 273)
        k_498996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 50), 'k', False)
        # Applying the binary operator '*' (line 273)
        result_mul_498997 = python_operator(stypy.reporting.localization.Localization(__file__, 273, 46), '*', float_498995, k_498996)
        
        # Getting the type of 'a' (line 273)
        a_498998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 52), 'a', False)
        # Applying the binary operator '+' (line 273)
        result_add_498999 = python_operator(stypy.reporting.localization.Localization(__file__, 273, 46), '+', result_mul_498997, a_498998)
        
        # Getting the type of 'b' (line 273)
        b_499000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 54), 'b', False)
        # Applying the binary operator '+' (line 273)
        result_add_499001 = python_operator(stypy.reporting.localization.Localization(__file__, 273, 53), '+', result_add_498999, b_499000)
        
        int_499002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 56), 'int')
        # Applying the binary operator '+' (line 273)
        result_add_499003 = python_operator(stypy.reporting.localization.Localization(__file__, 273, 55), '+', result_add_499001, int_499002)
        
        # Applying the binary operator '*' (line 273)
        result_mul_499004 = python_operator(stypy.reporting.localization.Localization(__file__, 273, 33), '*', result_add_498994, result_add_499003)
        
        # Applying the binary operator 'div' (line 273)
        result_div_499005 = python_operator(stypy.reporting.localization.Localization(__file__, 273, 18), 'div', result_sub_498987, result_mul_499004)
        
        # Processing the call keyword arguments (line 272)
        kwargs_499006 = {}
        # Getting the type of 'np' (line 272)
        np_498967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 28), 'np', False)
        # Obtaining the member 'where' of a type (line 272)
        where_498968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 272, 28), np_498967, 'where')
        # Calling where(args, kwargs) (line 272)
        where_call_result_499007 = invoke(stypy.reporting.localization.Localization(__file__, 272, 28), where_498968, *[result_eq_498971, result_div_498980, result_div_499005], **kwargs_499006)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 18), 'stypy_return_type', where_call_result_499007)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_247' in the type store
        # Getting the type of 'stypy_return_type' (line 272)
        stypy_return_type_499008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 18), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_499008)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_247'
        return stypy_return_type_499008

    # Assigning a type to the variable '_stypy_temp_lambda_247' (line 272)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 18), '_stypy_temp_lambda_247', _stypy_temp_lambda_247)
    # Getting the type of '_stypy_temp_lambda_247' (line 272)
    _stypy_temp_lambda_247_499009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 18), '_stypy_temp_lambda_247')
    # Assigning a type to the variable 'an_func' (line 272)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 8), 'an_func', _stypy_temp_lambda_247_499009)
    # SSA join for if statement (line 269)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Lambda to a Name (line 275):
    
    # Assigning a Lambda to a Name (line 275):

    @norecursion
    def _stypy_temp_lambda_248(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_248'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_248', 275, 14, True)
        # Passed parameters checking function
        _stypy_temp_lambda_248.stypy_localization = localization
        _stypy_temp_lambda_248.stypy_type_of_self = None
        _stypy_temp_lambda_248.stypy_type_store = module_type_store
        _stypy_temp_lambda_248.stypy_function_name = '_stypy_temp_lambda_248'
        _stypy_temp_lambda_248.stypy_param_names_list = ['k']
        _stypy_temp_lambda_248.stypy_varargs_param_name = None
        _stypy_temp_lambda_248.stypy_kwargs_param_name = None
        _stypy_temp_lambda_248.stypy_call_defaults = defaults
        _stypy_temp_lambda_248.stypy_call_varargs = varargs
        _stypy_temp_lambda_248.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_248', ['k'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_248', ['k'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        float_499010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 275, 24), 'float')
        float_499011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 275, 31), 'float')
        # Getting the type of 'k' (line 275)
        k_499012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 35), 'k')
        # Applying the binary operator '*' (line 275)
        result_mul_499013 = python_operator(stypy.reporting.localization.Localization(__file__, 275, 31), '*', float_499011, k_499012)
        
        # Getting the type of 'a' (line 275)
        a_499014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 37), 'a')
        # Applying the binary operator '+' (line 275)
        result_add_499015 = python_operator(stypy.reporting.localization.Localization(__file__, 275, 31), '+', result_mul_499013, a_499014)
        
        # Getting the type of 'b' (line 275)
        b_499016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 39), 'b')
        # Applying the binary operator '+' (line 275)
        result_add_499017 = python_operator(stypy.reporting.localization.Localization(__file__, 275, 38), '+', result_add_499015, b_499016)
        
        # Applying the binary operator 'div' (line 275)
        result_div_499018 = python_operator(stypy.reporting.localization.Localization(__file__, 275, 24), 'div', float_499010, result_add_499017)
        
        
        # Call to sqrt(...): (line 275)
        # Processing the call arguments (line 275)
        # Getting the type of 'k' (line 275)
        k_499021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 51), 'k', False)
        # Getting the type of 'a' (line 275)
        a_499022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 53), 'a', False)
        # Applying the binary operator '+' (line 275)
        result_add_499023 = python_operator(stypy.reporting.localization.Localization(__file__, 275, 51), '+', k_499021, a_499022)
        
        # Getting the type of 'k' (line 275)
        k_499024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 57), 'k', False)
        # Getting the type of 'b' (line 275)
        b_499025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 59), 'b', False)
        # Applying the binary operator '+' (line 275)
        result_add_499026 = python_operator(stypy.reporting.localization.Localization(__file__, 275, 57), '+', k_499024, b_499025)
        
        # Applying the binary operator '*' (line 275)
        result_mul_499027 = python_operator(stypy.reporting.localization.Localization(__file__, 275, 50), '*', result_add_499023, result_add_499026)
        
        int_499028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 275, 65), 'int')
        # Getting the type of 'k' (line 275)
        k_499029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 67), 'k', False)
        # Applying the binary operator '*' (line 275)
        result_mul_499030 = python_operator(stypy.reporting.localization.Localization(__file__, 275, 65), '*', int_499028, k_499029)
        
        # Getting the type of 'a' (line 275)
        a_499031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 69), 'a', False)
        # Applying the binary operator '+' (line 275)
        result_add_499032 = python_operator(stypy.reporting.localization.Localization(__file__, 275, 65), '+', result_mul_499030, a_499031)
        
        # Getting the type of 'b' (line 275)
        b_499033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 71), 'b', False)
        # Applying the binary operator '+' (line 275)
        result_add_499034 = python_operator(stypy.reporting.localization.Localization(__file__, 275, 70), '+', result_add_499032, b_499033)
        
        int_499035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 275, 73), 'int')
        # Applying the binary operator '+' (line 275)
        result_add_499036 = python_operator(stypy.reporting.localization.Localization(__file__, 275, 72), '+', result_add_499034, int_499035)
        
        # Applying the binary operator 'div' (line 275)
        result_div_499037 = python_operator(stypy.reporting.localization.Localization(__file__, 275, 62), 'div', result_mul_499027, result_add_499036)
        
        # Processing the call keyword arguments (line 275)
        kwargs_499038 = {}
        # Getting the type of 'np' (line 275)
        np_499019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 42), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 275)
        sqrt_499020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 275, 42), np_499019, 'sqrt')
        # Calling sqrt(args, kwargs) (line 275)
        sqrt_call_result_499039 = invoke(stypy.reporting.localization.Localization(__file__, 275, 42), sqrt_499020, *[result_div_499037], **kwargs_499038)
        
        # Applying the binary operator '*' (line 275)
        result_mul_499040 = python_operator(stypy.reporting.localization.Localization(__file__, 275, 41), '*', result_div_499018, sqrt_call_result_499039)
        
        
        # Call to where(...): (line 276)
        # Processing the call arguments (line 276)
        
        # Getting the type of 'k' (line 276)
        k_499043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 25), 'k', False)
        int_499044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 276, 30), 'int')
        # Applying the binary operator '==' (line 276)
        result_eq_499045 = python_operator(stypy.reporting.localization.Localization(__file__, 276, 25), '==', k_499043, int_499044)
        
        float_499046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 276, 33), 'float')
        
        # Call to sqrt(...): (line 276)
        # Processing the call arguments (line 276)
        # Getting the type of 'k' (line 276)
        k_499049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 46), 'k', False)
        # Getting the type of 'k' (line 276)
        k_499050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 49), 'k', False)
        # Getting the type of 'a' (line 276)
        a_499051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 51), 'a', False)
        # Applying the binary operator '+' (line 276)
        result_add_499052 = python_operator(stypy.reporting.localization.Localization(__file__, 276, 49), '+', k_499050, a_499051)
        
        # Getting the type of 'b' (line 276)
        b_499053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 53), 'b', False)
        # Applying the binary operator '+' (line 276)
        result_add_499054 = python_operator(stypy.reporting.localization.Localization(__file__, 276, 52), '+', result_add_499052, b_499053)
        
        # Applying the binary operator '*' (line 276)
        result_mul_499055 = python_operator(stypy.reporting.localization.Localization(__file__, 276, 46), '*', k_499049, result_add_499054)
        
        float_499056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 276, 59), 'float')
        # Getting the type of 'k' (line 276)
        k_499057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 63), 'k', False)
        # Applying the binary operator '*' (line 276)
        result_mul_499058 = python_operator(stypy.reporting.localization.Localization(__file__, 276, 59), '*', float_499056, k_499057)
        
        # Getting the type of 'a' (line 276)
        a_499059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 65), 'a', False)
        # Applying the binary operator '+' (line 276)
        result_add_499060 = python_operator(stypy.reporting.localization.Localization(__file__, 276, 59), '+', result_mul_499058, a_499059)
        
        # Getting the type of 'b' (line 276)
        b_499061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 67), 'b', False)
        # Applying the binary operator '+' (line 276)
        result_add_499062 = python_operator(stypy.reporting.localization.Localization(__file__, 276, 66), '+', result_add_499060, b_499061)
        
        int_499063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 276, 69), 'int')
        # Applying the binary operator '-' (line 276)
        result_sub_499064 = python_operator(stypy.reporting.localization.Localization(__file__, 276, 68), '-', result_add_499062, int_499063)
        
        # Applying the binary operator 'div' (line 276)
        result_div_499065 = python_operator(stypy.reporting.localization.Localization(__file__, 276, 56), 'div', result_mul_499055, result_sub_499064)
        
        # Processing the call keyword arguments (line 276)
        kwargs_499066 = {}
        # Getting the type of 'np' (line 276)
        np_499047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 38), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 276)
        sqrt_499048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 276, 38), np_499047, 'sqrt')
        # Calling sqrt(args, kwargs) (line 276)
        sqrt_call_result_499067 = invoke(stypy.reporting.localization.Localization(__file__, 276, 38), sqrt_499048, *[result_div_499065], **kwargs_499066)
        
        # Processing the call keyword arguments (line 276)
        kwargs_499068 = {}
        # Getting the type of 'np' (line 276)
        np_499041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 16), 'np', False)
        # Obtaining the member 'where' of a type (line 276)
        where_499042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 276, 16), np_499041, 'where')
        # Calling where(args, kwargs) (line 276)
        where_call_result_499069 = invoke(stypy.reporting.localization.Localization(__file__, 276, 16), where_499042, *[result_eq_499045, float_499046, sqrt_call_result_499067], **kwargs_499068)
        
        # Applying the binary operator '*' (line 276)
        result_mul_499070 = python_operator(stypy.reporting.localization.Localization(__file__, 276, 14), '*', result_mul_499040, where_call_result_499069)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 275)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 275, 14), 'stypy_return_type', result_mul_499070)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_248' in the type store
        # Getting the type of 'stypy_return_type' (line 275)
        stypy_return_type_499071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 14), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_499071)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_248'
        return stypy_return_type_499071

    # Assigning a type to the variable '_stypy_temp_lambda_248' (line 275)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 275, 14), '_stypy_temp_lambda_248', _stypy_temp_lambda_248)
    # Getting the type of '_stypy_temp_lambda_248' (line 275)
    _stypy_temp_lambda_248_499072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 14), '_stypy_temp_lambda_248')
    # Assigning a type to the variable 'bn_func' (line 275)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 275, 4), 'bn_func', _stypy_temp_lambda_248_499072)
    
    # Assigning a Lambda to a Name (line 278):
    
    # Assigning a Lambda to a Name (line 278):

    @norecursion
    def _stypy_temp_lambda_249(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_249'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_249', 278, 8, True)
        # Passed parameters checking function
        _stypy_temp_lambda_249.stypy_localization = localization
        _stypy_temp_lambda_249.stypy_type_of_self = None
        _stypy_temp_lambda_249.stypy_type_store = module_type_store
        _stypy_temp_lambda_249.stypy_function_name = '_stypy_temp_lambda_249'
        _stypy_temp_lambda_249.stypy_param_names_list = ['n', 'x']
        _stypy_temp_lambda_249.stypy_varargs_param_name = None
        _stypy_temp_lambda_249.stypy_kwargs_param_name = None
        _stypy_temp_lambda_249.stypy_call_defaults = defaults
        _stypy_temp_lambda_249.stypy_call_varargs = varargs
        _stypy_temp_lambda_249.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_249', ['n', 'x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_249', ['n', 'x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to eval_jacobi(...): (line 278)
        # Processing the call arguments (line 278)
        # Getting the type of 'n' (line 278)
        n_499075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 40), 'n', False)
        # Getting the type of 'a' (line 278)
        a_499076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 43), 'a', False)
        # Getting the type of 'b' (line 278)
        b_499077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 46), 'b', False)
        # Getting the type of 'x' (line 278)
        x_499078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 49), 'x', False)
        # Processing the call keyword arguments (line 278)
        kwargs_499079 = {}
        # Getting the type of 'cephes' (line 278)
        cephes_499073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 21), 'cephes', False)
        # Obtaining the member 'eval_jacobi' of a type (line 278)
        eval_jacobi_499074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 278, 21), cephes_499073, 'eval_jacobi')
        # Calling eval_jacobi(args, kwargs) (line 278)
        eval_jacobi_call_result_499080 = invoke(stypy.reporting.localization.Localization(__file__, 278, 21), eval_jacobi_499074, *[n_499075, a_499076, b_499077, x_499078], **kwargs_499079)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 278)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 278, 8), 'stypy_return_type', eval_jacobi_call_result_499080)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_249' in the type store
        # Getting the type of 'stypy_return_type' (line 278)
        stypy_return_type_499081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 8), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_499081)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_249'
        return stypy_return_type_499081

    # Assigning a type to the variable '_stypy_temp_lambda_249' (line 278)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 278, 8), '_stypy_temp_lambda_249', _stypy_temp_lambda_249)
    # Getting the type of '_stypy_temp_lambda_249' (line 278)
    _stypy_temp_lambda_249_499082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 8), '_stypy_temp_lambda_249')
    # Assigning a type to the variable 'f' (line 278)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 278, 4), 'f', _stypy_temp_lambda_249_499082)
    
    # Assigning a Lambda to a Name (line 279):
    
    # Assigning a Lambda to a Name (line 279):

    @norecursion
    def _stypy_temp_lambda_250(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_250'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_250', 279, 9, True)
        # Passed parameters checking function
        _stypy_temp_lambda_250.stypy_localization = localization
        _stypy_temp_lambda_250.stypy_type_of_self = None
        _stypy_temp_lambda_250.stypy_type_store = module_type_store
        _stypy_temp_lambda_250.stypy_function_name = '_stypy_temp_lambda_250'
        _stypy_temp_lambda_250.stypy_param_names_list = ['n', 'x']
        _stypy_temp_lambda_250.stypy_varargs_param_name = None
        _stypy_temp_lambda_250.stypy_kwargs_param_name = None
        _stypy_temp_lambda_250.stypy_call_defaults = defaults
        _stypy_temp_lambda_250.stypy_call_varargs = varargs
        _stypy_temp_lambda_250.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_250', ['n', 'x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_250', ['n', 'x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        float_499083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 22), 'float')
        # Getting the type of 'n' (line 279)
        n_499084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 29), 'n')
        # Getting the type of 'a' (line 279)
        a_499085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 33), 'a')
        # Applying the binary operator '+' (line 279)
        result_add_499086 = python_operator(stypy.reporting.localization.Localization(__file__, 279, 29), '+', n_499084, a_499085)
        
        # Getting the type of 'b' (line 279)
        b_499087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 37), 'b')
        # Applying the binary operator '+' (line 279)
        result_add_499088 = python_operator(stypy.reporting.localization.Localization(__file__, 279, 35), '+', result_add_499086, b_499087)
        
        int_499089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 41), 'int')
        # Applying the binary operator '+' (line 279)
        result_add_499090 = python_operator(stypy.reporting.localization.Localization(__file__, 279, 39), '+', result_add_499088, int_499089)
        
        # Applying the binary operator '*' (line 279)
        result_mul_499091 = python_operator(stypy.reporting.localization.Localization(__file__, 279, 22), '*', float_499083, result_add_499090)
        
        
        # Call to eval_jacobi(...): (line 280)
        # Processing the call arguments (line 280)
        # Getting the type of 'n' (line 280)
        n_499094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 43), 'n', False)
        int_499095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 280, 45), 'int')
        # Applying the binary operator '-' (line 280)
        result_sub_499096 = python_operator(stypy.reporting.localization.Localization(__file__, 280, 43), '-', n_499094, int_499095)
        
        # Getting the type of 'a' (line 280)
        a_499097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 48), 'a', False)
        int_499098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 280, 50), 'int')
        # Applying the binary operator '+' (line 280)
        result_add_499099 = python_operator(stypy.reporting.localization.Localization(__file__, 280, 48), '+', a_499097, int_499098)
        
        # Getting the type of 'b' (line 280)
        b_499100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 53), 'b', False)
        int_499101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 280, 55), 'int')
        # Applying the binary operator '+' (line 280)
        result_add_499102 = python_operator(stypy.reporting.localization.Localization(__file__, 280, 53), '+', b_499100, int_499101)
        
        # Getting the type of 'x' (line 280)
        x_499103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 58), 'x', False)
        # Processing the call keyword arguments (line 280)
        kwargs_499104 = {}
        # Getting the type of 'cephes' (line 280)
        cephes_499092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 24), 'cephes', False)
        # Obtaining the member 'eval_jacobi' of a type (line 280)
        eval_jacobi_499093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 280, 24), cephes_499092, 'eval_jacobi')
        # Calling eval_jacobi(args, kwargs) (line 280)
        eval_jacobi_call_result_499105 = invoke(stypy.reporting.localization.Localization(__file__, 280, 24), eval_jacobi_499093, *[result_sub_499096, result_add_499099, result_add_499102, x_499103], **kwargs_499104)
        
        # Applying the binary operator '*' (line 280)
        result_mul_499106 = python_operator(stypy.reporting.localization.Localization(__file__, 280, 22), '*', result_mul_499091, eval_jacobi_call_result_499105)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 279)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 279, 9), 'stypy_return_type', result_mul_499106)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_250' in the type store
        # Getting the type of 'stypy_return_type' (line 279)
        stypy_return_type_499107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 9), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_499107)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_250'
        return stypy_return_type_499107

    # Assigning a type to the variable '_stypy_temp_lambda_250' (line 279)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 279, 9), '_stypy_temp_lambda_250', _stypy_temp_lambda_250)
    # Getting the type of '_stypy_temp_lambda_250' (line 279)
    _stypy_temp_lambda_250_499108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 9), '_stypy_temp_lambda_250')
    # Assigning a type to the variable 'df' (line 279)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 279, 4), 'df', _stypy_temp_lambda_250_499108)
    
    # Call to _gen_roots_and_weights(...): (line 281)
    # Processing the call arguments (line 281)
    # Getting the type of 'm' (line 281)
    m_499110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 34), 'm', False)
    # Getting the type of 'mu0' (line 281)
    mu0_499111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 37), 'mu0', False)
    # Getting the type of 'an_func' (line 281)
    an_func_499112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 42), 'an_func', False)
    # Getting the type of 'bn_func' (line 281)
    bn_func_499113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 51), 'bn_func', False)
    # Getting the type of 'f' (line 281)
    f_499114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 60), 'f', False)
    # Getting the type of 'df' (line 281)
    df_499115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 63), 'df', False)
    # Getting the type of 'False' (line 281)
    False_499116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 67), 'False', False)
    # Getting the type of 'mu' (line 281)
    mu_499117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 74), 'mu', False)
    # Processing the call keyword arguments (line 281)
    kwargs_499118 = {}
    # Getting the type of '_gen_roots_and_weights' (line 281)
    _gen_roots_and_weights_499109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 11), '_gen_roots_and_weights', False)
    # Calling _gen_roots_and_weights(args, kwargs) (line 281)
    _gen_roots_and_weights_call_result_499119 = invoke(stypy.reporting.localization.Localization(__file__, 281, 11), _gen_roots_and_weights_499109, *[m_499110, mu0_499111, an_func_499112, bn_func_499113, f_499114, df_499115, False_499116, mu_499117], **kwargs_499118)
    
    # Assigning a type to the variable 'stypy_return_type' (line 281)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 281, 4), 'stypy_return_type', _gen_roots_and_weights_call_result_499119)
    
    # ################# End of 'roots_jacobi(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'roots_jacobi' in the type store
    # Getting the type of 'stypy_return_type' (line 220)
    stypy_return_type_499120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_499120)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'roots_jacobi'
    return stypy_return_type_499120

# Assigning a type to the variable 'roots_jacobi' (line 220)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 220, 0), 'roots_jacobi', roots_jacobi)

@norecursion
def jacobi(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 284)
    False_499121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 33), 'False')
    defaults = [False_499121]
    # Create a new context for function 'jacobi'
    module_type_store = module_type_store.open_function_context('jacobi', 284, 0, False)
    
    # Passed parameters checking function
    jacobi.stypy_localization = localization
    jacobi.stypy_type_of_self = None
    jacobi.stypy_type_store = module_type_store
    jacobi.stypy_function_name = 'jacobi'
    jacobi.stypy_param_names_list = ['n', 'alpha', 'beta', 'monic']
    jacobi.stypy_varargs_param_name = None
    jacobi.stypy_kwargs_param_name = None
    jacobi.stypy_call_defaults = defaults
    jacobi.stypy_call_varargs = varargs
    jacobi.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'jacobi', ['n', 'alpha', 'beta', 'monic'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'jacobi', localization, ['n', 'alpha', 'beta', 'monic'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'jacobi(...)' code ##################

    str_499122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 321, (-1)), 'str', 'Jacobi polynomial.\n\n    Defined to be the solution of\n\n    .. math::\n        (1 - x^2)\\frac{d^2}{dx^2}P_n^{(\\alpha, \\beta)}\n          + (\\beta - \\alpha - (\\alpha + \\beta + 2)x)\n            \\frac{d}{dx}P_n^{(\\alpha, \\beta)}\n          + n(n + \\alpha + \\beta + 1)P_n^{(\\alpha, \\beta)} = 0\n\n    for :math:`\\alpha, \\beta > -1`; :math:`P_n^{(\\alpha, \\beta)}` is a\n    polynomial of degree :math:`n`.\n\n    Parameters\n    ----------\n    n : int\n        Degree of the polynomial.\n    alpha : float\n        Parameter, must be greater than -1.\n    beta : float\n        Parameter, must be greater than -1.\n    monic : bool, optional\n        If `True`, scale the leading coefficient to be 1. Default is\n        `False`.\n\n    Returns\n    -------\n    P : orthopoly1d\n        Jacobi polynomial.\n\n    Notes\n    -----\n    For fixed :math:`\\alpha, \\beta`, the polynomials\n    :math:`P_n^{(\\alpha, \\beta)}` are orthogonal over :math:`[-1, 1]`\n    with weight function :math:`(1 - x)^\\alpha(1 + x)^\\beta`.\n\n    ')
    
    
    # Getting the type of 'n' (line 322)
    n_499123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 7), 'n')
    int_499124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 322, 11), 'int')
    # Applying the binary operator '<' (line 322)
    result_lt_499125 = python_operator(stypy.reporting.localization.Localization(__file__, 322, 7), '<', n_499123, int_499124)
    
    # Testing the type of an if condition (line 322)
    if_condition_499126 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 322, 4), result_lt_499125)
    # Assigning a type to the variable 'if_condition_499126' (line 322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 322, 4), 'if_condition_499126', if_condition_499126)
    # SSA begins for if statement (line 322)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 323)
    # Processing the call arguments (line 323)
    str_499128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, 25), 'str', 'n must be nonnegative.')
    # Processing the call keyword arguments (line 323)
    kwargs_499129 = {}
    # Getting the type of 'ValueError' (line 323)
    ValueError_499127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 323)
    ValueError_call_result_499130 = invoke(stypy.reporting.localization.Localization(__file__, 323, 14), ValueError_499127, *[str_499128], **kwargs_499129)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 323, 8), ValueError_call_result_499130, 'raise parameter', BaseException)
    # SSA join for if statement (line 322)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Lambda to a Name (line 325):
    
    # Assigning a Lambda to a Name (line 325):

    @norecursion
    def _stypy_temp_lambda_251(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_251'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_251', 325, 12, True)
        # Passed parameters checking function
        _stypy_temp_lambda_251.stypy_localization = localization
        _stypy_temp_lambda_251.stypy_type_of_self = None
        _stypy_temp_lambda_251.stypy_type_store = module_type_store
        _stypy_temp_lambda_251.stypy_function_name = '_stypy_temp_lambda_251'
        _stypy_temp_lambda_251.stypy_param_names_list = ['x']
        _stypy_temp_lambda_251.stypy_varargs_param_name = None
        _stypy_temp_lambda_251.stypy_kwargs_param_name = None
        _stypy_temp_lambda_251.stypy_call_defaults = defaults
        _stypy_temp_lambda_251.stypy_call_varargs = varargs
        _stypy_temp_lambda_251.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_251', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_251', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        int_499131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 325, 23), 'int')
        # Getting the type of 'x' (line 325)
        x_499132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 27), 'x')
        # Applying the binary operator '-' (line 325)
        result_sub_499133 = python_operator(stypy.reporting.localization.Localization(__file__, 325, 23), '-', int_499131, x_499132)
        
        # Getting the type of 'alpha' (line 325)
        alpha_499134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 31), 'alpha')
        # Applying the binary operator '**' (line 325)
        result_pow_499135 = python_operator(stypy.reporting.localization.Localization(__file__, 325, 22), '**', result_sub_499133, alpha_499134)
        
        int_499136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 325, 40), 'int')
        # Getting the type of 'x' (line 325)
        x_499137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 44), 'x')
        # Applying the binary operator '+' (line 325)
        result_add_499138 = python_operator(stypy.reporting.localization.Localization(__file__, 325, 40), '+', int_499136, x_499137)
        
        # Getting the type of 'beta' (line 325)
        beta_499139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 48), 'beta')
        # Applying the binary operator '**' (line 325)
        result_pow_499140 = python_operator(stypy.reporting.localization.Localization(__file__, 325, 39), '**', result_add_499138, beta_499139)
        
        # Applying the binary operator '*' (line 325)
        result_mul_499141 = python_operator(stypy.reporting.localization.Localization(__file__, 325, 22), '*', result_pow_499135, result_pow_499140)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 325)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 325, 12), 'stypy_return_type', result_mul_499141)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_251' in the type store
        # Getting the type of 'stypy_return_type' (line 325)
        stypy_return_type_499142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 12), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_499142)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_251'
        return stypy_return_type_499142

    # Assigning a type to the variable '_stypy_temp_lambda_251' (line 325)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 325, 12), '_stypy_temp_lambda_251', _stypy_temp_lambda_251)
    # Getting the type of '_stypy_temp_lambda_251' (line 325)
    _stypy_temp_lambda_251_499143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 12), '_stypy_temp_lambda_251')
    # Assigning a type to the variable 'wfunc' (line 325)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 325, 4), 'wfunc', _stypy_temp_lambda_251_499143)
    
    
    # Getting the type of 'n' (line 326)
    n_499144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 7), 'n')
    int_499145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 326, 12), 'int')
    # Applying the binary operator '==' (line 326)
    result_eq_499146 = python_operator(stypy.reporting.localization.Localization(__file__, 326, 7), '==', n_499144, int_499145)
    
    # Testing the type of an if condition (line 326)
    if_condition_499147 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 326, 4), result_eq_499146)
    # Assigning a type to the variable 'if_condition_499147' (line 326)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 326, 4), 'if_condition_499147', if_condition_499147)
    # SSA begins for if statement (line 326)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to orthopoly1d(...): (line 327)
    # Processing the call arguments (line 327)
    
    # Obtaining an instance of the builtin type 'list' (line 327)
    list_499149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 27), 'list')
    # Adding type elements to the builtin type 'list' instance (line 327)
    
    
    # Obtaining an instance of the builtin type 'list' (line 327)
    list_499150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 31), 'list')
    # Adding type elements to the builtin type 'list' instance (line 327)
    
    float_499151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 35), 'float')
    float_499152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 40), 'float')
    # Getting the type of 'wfunc' (line 327)
    wfunc_499153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 45), 'wfunc', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 327)
    tuple_499154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 53), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 327)
    # Adding element type (line 327)
    int_499155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 53), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 327, 53), tuple_499154, int_499155)
    # Adding element type (line 327)
    int_499156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 57), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 327, 53), tuple_499154, int_499156)
    
    # Getting the type of 'monic' (line 327)
    monic_499157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 61), 'monic', False)
    # Processing the call keyword arguments (line 327)
    # Getting the type of 'np' (line 328)
    np_499158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 37), 'np', False)
    # Obtaining the member 'ones_like' of a type (line 328)
    ones_like_499159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 328, 37), np_499158, 'ones_like')
    keyword_499160 = ones_like_499159
    kwargs_499161 = {'eval_func': keyword_499160}
    # Getting the type of 'orthopoly1d' (line 327)
    orthopoly1d_499148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 15), 'orthopoly1d', False)
    # Calling orthopoly1d(args, kwargs) (line 327)
    orthopoly1d_call_result_499162 = invoke(stypy.reporting.localization.Localization(__file__, 327, 15), orthopoly1d_499148, *[list_499149, list_499150, float_499151, float_499152, wfunc_499153, tuple_499154, monic_499157], **kwargs_499161)
    
    # Assigning a type to the variable 'stypy_return_type' (line 327)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 8), 'stypy_return_type', orthopoly1d_call_result_499162)
    # SSA join for if statement (line 326)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 329):
    
    # Assigning a Subscript to a Name (line 329):
    
    # Obtaining the type of the subscript
    int_499163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 329, 4), 'int')
    
    # Call to roots_jacobi(...): (line 329)
    # Processing the call arguments (line 329)
    # Getting the type of 'n' (line 329)
    n_499165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 28), 'n', False)
    # Getting the type of 'alpha' (line 329)
    alpha_499166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 31), 'alpha', False)
    # Getting the type of 'beta' (line 329)
    beta_499167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 38), 'beta', False)
    # Processing the call keyword arguments (line 329)
    # Getting the type of 'True' (line 329)
    True_499168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 47), 'True', False)
    keyword_499169 = True_499168
    kwargs_499170 = {'mu': keyword_499169}
    # Getting the type of 'roots_jacobi' (line 329)
    roots_jacobi_499164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 15), 'roots_jacobi', False)
    # Calling roots_jacobi(args, kwargs) (line 329)
    roots_jacobi_call_result_499171 = invoke(stypy.reporting.localization.Localization(__file__, 329, 15), roots_jacobi_499164, *[n_499165, alpha_499166, beta_499167], **kwargs_499170)
    
    # Obtaining the member '__getitem__' of a type (line 329)
    getitem___499172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 329, 4), roots_jacobi_call_result_499171, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 329)
    subscript_call_result_499173 = invoke(stypy.reporting.localization.Localization(__file__, 329, 4), getitem___499172, int_499163)
    
    # Assigning a type to the variable 'tuple_var_assignment_498393' (line 329)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 329, 4), 'tuple_var_assignment_498393', subscript_call_result_499173)
    
    # Assigning a Subscript to a Name (line 329):
    
    # Obtaining the type of the subscript
    int_499174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 329, 4), 'int')
    
    # Call to roots_jacobi(...): (line 329)
    # Processing the call arguments (line 329)
    # Getting the type of 'n' (line 329)
    n_499176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 28), 'n', False)
    # Getting the type of 'alpha' (line 329)
    alpha_499177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 31), 'alpha', False)
    # Getting the type of 'beta' (line 329)
    beta_499178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 38), 'beta', False)
    # Processing the call keyword arguments (line 329)
    # Getting the type of 'True' (line 329)
    True_499179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 47), 'True', False)
    keyword_499180 = True_499179
    kwargs_499181 = {'mu': keyword_499180}
    # Getting the type of 'roots_jacobi' (line 329)
    roots_jacobi_499175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 15), 'roots_jacobi', False)
    # Calling roots_jacobi(args, kwargs) (line 329)
    roots_jacobi_call_result_499182 = invoke(stypy.reporting.localization.Localization(__file__, 329, 15), roots_jacobi_499175, *[n_499176, alpha_499177, beta_499178], **kwargs_499181)
    
    # Obtaining the member '__getitem__' of a type (line 329)
    getitem___499183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 329, 4), roots_jacobi_call_result_499182, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 329)
    subscript_call_result_499184 = invoke(stypy.reporting.localization.Localization(__file__, 329, 4), getitem___499183, int_499174)
    
    # Assigning a type to the variable 'tuple_var_assignment_498394' (line 329)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 329, 4), 'tuple_var_assignment_498394', subscript_call_result_499184)
    
    # Assigning a Subscript to a Name (line 329):
    
    # Obtaining the type of the subscript
    int_499185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 329, 4), 'int')
    
    # Call to roots_jacobi(...): (line 329)
    # Processing the call arguments (line 329)
    # Getting the type of 'n' (line 329)
    n_499187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 28), 'n', False)
    # Getting the type of 'alpha' (line 329)
    alpha_499188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 31), 'alpha', False)
    # Getting the type of 'beta' (line 329)
    beta_499189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 38), 'beta', False)
    # Processing the call keyword arguments (line 329)
    # Getting the type of 'True' (line 329)
    True_499190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 47), 'True', False)
    keyword_499191 = True_499190
    kwargs_499192 = {'mu': keyword_499191}
    # Getting the type of 'roots_jacobi' (line 329)
    roots_jacobi_499186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 15), 'roots_jacobi', False)
    # Calling roots_jacobi(args, kwargs) (line 329)
    roots_jacobi_call_result_499193 = invoke(stypy.reporting.localization.Localization(__file__, 329, 15), roots_jacobi_499186, *[n_499187, alpha_499188, beta_499189], **kwargs_499192)
    
    # Obtaining the member '__getitem__' of a type (line 329)
    getitem___499194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 329, 4), roots_jacobi_call_result_499193, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 329)
    subscript_call_result_499195 = invoke(stypy.reporting.localization.Localization(__file__, 329, 4), getitem___499194, int_499185)
    
    # Assigning a type to the variable 'tuple_var_assignment_498395' (line 329)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 329, 4), 'tuple_var_assignment_498395', subscript_call_result_499195)
    
    # Assigning a Name to a Name (line 329):
    # Getting the type of 'tuple_var_assignment_498393' (line 329)
    tuple_var_assignment_498393_499196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 4), 'tuple_var_assignment_498393')
    # Assigning a type to the variable 'x' (line 329)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 329, 4), 'x', tuple_var_assignment_498393_499196)
    
    # Assigning a Name to a Name (line 329):
    # Getting the type of 'tuple_var_assignment_498394' (line 329)
    tuple_var_assignment_498394_499197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 4), 'tuple_var_assignment_498394')
    # Assigning a type to the variable 'w' (line 329)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 329, 7), 'w', tuple_var_assignment_498394_499197)
    
    # Assigning a Name to a Name (line 329):
    # Getting the type of 'tuple_var_assignment_498395' (line 329)
    tuple_var_assignment_498395_499198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 4), 'tuple_var_assignment_498395')
    # Assigning a type to the variable 'mu' (line 329)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 329, 10), 'mu', tuple_var_assignment_498395_499198)
    
    # Assigning a BinOp to a Name (line 330):
    
    # Assigning a BinOp to a Name (line 330):
    # Getting the type of 'alpha' (line 330)
    alpha_499199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 10), 'alpha')
    # Getting the type of 'beta' (line 330)
    beta_499200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 18), 'beta')
    # Applying the binary operator '+' (line 330)
    result_add_499201 = python_operator(stypy.reporting.localization.Localization(__file__, 330, 10), '+', alpha_499199, beta_499200)
    
    float_499202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 330, 25), 'float')
    # Applying the binary operator '+' (line 330)
    result_add_499203 = python_operator(stypy.reporting.localization.Localization(__file__, 330, 23), '+', result_add_499201, float_499202)
    
    # Assigning a type to the variable 'ab1' (line 330)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 330, 4), 'ab1', result_add_499203)
    
    # Assigning a BinOp to a Name (line 331):
    
    # Assigning a BinOp to a Name (line 331):
    int_499204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 331, 9), 'int')
    # Getting the type of 'ab1' (line 331)
    ab1_499205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 12), 'ab1')
    # Applying the binary operator '**' (line 331)
    result_pow_499206 = python_operator(stypy.reporting.localization.Localization(__file__, 331, 9), '**', int_499204, ab1_499205)
    
    int_499207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 331, 19), 'int')
    # Getting the type of 'n' (line 331)
    n_499208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 23), 'n')
    # Applying the binary operator '*' (line 331)
    result_mul_499209 = python_operator(stypy.reporting.localization.Localization(__file__, 331, 19), '*', int_499207, n_499208)
    
    # Getting the type of 'ab1' (line 331)
    ab1_499210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 27), 'ab1')
    # Applying the binary operator '+' (line 331)
    result_add_499211 = python_operator(stypy.reporting.localization.Localization(__file__, 331, 19), '+', result_mul_499209, ab1_499210)
    
    # Applying the binary operator 'div' (line 331)
    result_div_499212 = python_operator(stypy.reporting.localization.Localization(__file__, 331, 9), 'div', result_pow_499206, result_add_499211)
    
    
    # Call to _gam(...): (line 331)
    # Processing the call arguments (line 331)
    # Getting the type of 'n' (line 331)
    n_499214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 39), 'n', False)
    # Getting the type of 'alpha' (line 331)
    alpha_499215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 43), 'alpha', False)
    # Applying the binary operator '+' (line 331)
    result_add_499216 = python_operator(stypy.reporting.localization.Localization(__file__, 331, 39), '+', n_499214, alpha_499215)
    
    int_499217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 331, 51), 'int')
    # Applying the binary operator '+' (line 331)
    result_add_499218 = python_operator(stypy.reporting.localization.Localization(__file__, 331, 49), '+', result_add_499216, int_499217)
    
    # Processing the call keyword arguments (line 331)
    kwargs_499219 = {}
    # Getting the type of '_gam' (line 331)
    _gam_499213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 34), '_gam', False)
    # Calling _gam(args, kwargs) (line 331)
    _gam_call_result_499220 = invoke(stypy.reporting.localization.Localization(__file__, 331, 34), _gam_499213, *[result_add_499218], **kwargs_499219)
    
    # Applying the binary operator '*' (line 331)
    result_mul_499221 = python_operator(stypy.reporting.localization.Localization(__file__, 331, 32), '*', result_div_499212, _gam_call_result_499220)
    
    # Assigning a type to the variable 'hn' (line 331)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 331, 4), 'hn', result_mul_499221)
    
    # Getting the type of 'hn' (line 332)
    hn_499222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 4), 'hn')
    
    # Call to _gam(...): (line 332)
    # Processing the call arguments (line 332)
    # Getting the type of 'n' (line 332)
    n_499224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 15), 'n', False)
    # Getting the type of 'beta' (line 332)
    beta_499225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 19), 'beta', False)
    # Applying the binary operator '+' (line 332)
    result_add_499226 = python_operator(stypy.reporting.localization.Localization(__file__, 332, 15), '+', n_499224, beta_499225)
    
    float_499227 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 332, 26), 'float')
    # Applying the binary operator '+' (line 332)
    result_add_499228 = python_operator(stypy.reporting.localization.Localization(__file__, 332, 24), '+', result_add_499226, float_499227)
    
    # Processing the call keyword arguments (line 332)
    kwargs_499229 = {}
    # Getting the type of '_gam' (line 332)
    _gam_499223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 10), '_gam', False)
    # Calling _gam(args, kwargs) (line 332)
    _gam_call_result_499230 = invoke(stypy.reporting.localization.Localization(__file__, 332, 10), _gam_499223, *[result_add_499228], **kwargs_499229)
    
    
    # Call to _gam(...): (line 332)
    # Processing the call arguments (line 332)
    # Getting the type of 'n' (line 332)
    n_499232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 38), 'n', False)
    int_499233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 332, 42), 'int')
    # Applying the binary operator '+' (line 332)
    result_add_499234 = python_operator(stypy.reporting.localization.Localization(__file__, 332, 38), '+', n_499232, int_499233)
    
    # Processing the call keyword arguments (line 332)
    kwargs_499235 = {}
    # Getting the type of '_gam' (line 332)
    _gam_499231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 33), '_gam', False)
    # Calling _gam(args, kwargs) (line 332)
    _gam_call_result_499236 = invoke(stypy.reporting.localization.Localization(__file__, 332, 33), _gam_499231, *[result_add_499234], **kwargs_499235)
    
    # Applying the binary operator 'div' (line 332)
    result_div_499237 = python_operator(stypy.reporting.localization.Localization(__file__, 332, 10), 'div', _gam_call_result_499230, _gam_call_result_499236)
    
    
    # Call to _gam(...): (line 332)
    # Processing the call arguments (line 332)
    # Getting the type of 'n' (line 332)
    n_499239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 52), 'n', False)
    # Getting the type of 'ab1' (line 332)
    ab1_499240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 56), 'ab1', False)
    # Applying the binary operator '+' (line 332)
    result_add_499241 = python_operator(stypy.reporting.localization.Localization(__file__, 332, 52), '+', n_499239, ab1_499240)
    
    # Processing the call keyword arguments (line 332)
    kwargs_499242 = {}
    # Getting the type of '_gam' (line 332)
    _gam_499238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 47), '_gam', False)
    # Calling _gam(args, kwargs) (line 332)
    _gam_call_result_499243 = invoke(stypy.reporting.localization.Localization(__file__, 332, 47), _gam_499238, *[result_add_499241], **kwargs_499242)
    
    # Applying the binary operator 'div' (line 332)
    result_div_499244 = python_operator(stypy.reporting.localization.Localization(__file__, 332, 45), 'div', result_div_499237, _gam_call_result_499243)
    
    # Applying the binary operator '*=' (line 332)
    result_imul_499245 = python_operator(stypy.reporting.localization.Localization(__file__, 332, 4), '*=', hn_499222, result_div_499244)
    # Assigning a type to the variable 'hn' (line 332)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 332, 4), 'hn', result_imul_499245)
    
    
    # Assigning a BinOp to a Name (line 333):
    
    # Assigning a BinOp to a Name (line 333):
    
    # Call to _gam(...): (line 333)
    # Processing the call arguments (line 333)
    int_499247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 333, 14), 'int')
    # Getting the type of 'n' (line 333)
    n_499248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 18), 'n', False)
    # Applying the binary operator '*' (line 333)
    result_mul_499249 = python_operator(stypy.reporting.localization.Localization(__file__, 333, 14), '*', int_499247, n_499248)
    
    # Getting the type of 'ab1' (line 333)
    ab1_499250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 22), 'ab1', False)
    # Applying the binary operator '+' (line 333)
    result_add_499251 = python_operator(stypy.reporting.localization.Localization(__file__, 333, 14), '+', result_mul_499249, ab1_499250)
    
    # Processing the call keyword arguments (line 333)
    kwargs_499252 = {}
    # Getting the type of '_gam' (line 333)
    _gam_499246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 9), '_gam', False)
    # Calling _gam(args, kwargs) (line 333)
    _gam_call_result_499253 = invoke(stypy.reporting.localization.Localization(__file__, 333, 9), _gam_499246, *[result_add_499251], **kwargs_499252)
    
    float_499254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 333, 29), 'float')
    # Getting the type of 'n' (line 333)
    n_499255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 34), 'n')
    # Applying the binary operator '**' (line 333)
    result_pow_499256 = python_operator(stypy.reporting.localization.Localization(__file__, 333, 29), '**', float_499254, n_499255)
    
    # Applying the binary operator 'div' (line 333)
    result_div_499257 = python_operator(stypy.reporting.localization.Localization(__file__, 333, 9), 'div', _gam_call_result_499253, result_pow_499256)
    
    
    # Call to _gam(...): (line 333)
    # Processing the call arguments (line 333)
    # Getting the type of 'n' (line 333)
    n_499259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 43), 'n', False)
    int_499260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 333, 47), 'int')
    # Applying the binary operator '+' (line 333)
    result_add_499261 = python_operator(stypy.reporting.localization.Localization(__file__, 333, 43), '+', n_499259, int_499260)
    
    # Processing the call keyword arguments (line 333)
    kwargs_499262 = {}
    # Getting the type of '_gam' (line 333)
    _gam_499258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 38), '_gam', False)
    # Calling _gam(args, kwargs) (line 333)
    _gam_call_result_499263 = invoke(stypy.reporting.localization.Localization(__file__, 333, 38), _gam_499258, *[result_add_499261], **kwargs_499262)
    
    # Applying the binary operator 'div' (line 333)
    result_div_499264 = python_operator(stypy.reporting.localization.Localization(__file__, 333, 36), 'div', result_div_499257, _gam_call_result_499263)
    
    
    # Call to _gam(...): (line 333)
    # Processing the call arguments (line 333)
    # Getting the type of 'n' (line 333)
    n_499266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 57), 'n', False)
    # Getting the type of 'ab1' (line 333)
    ab1_499267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 61), 'ab1', False)
    # Applying the binary operator '+' (line 333)
    result_add_499268 = python_operator(stypy.reporting.localization.Localization(__file__, 333, 57), '+', n_499266, ab1_499267)
    
    # Processing the call keyword arguments (line 333)
    kwargs_499269 = {}
    # Getting the type of '_gam' (line 333)
    _gam_499265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 52), '_gam', False)
    # Calling _gam(args, kwargs) (line 333)
    _gam_call_result_499270 = invoke(stypy.reporting.localization.Localization(__file__, 333, 52), _gam_499265, *[result_add_499268], **kwargs_499269)
    
    # Applying the binary operator 'div' (line 333)
    result_div_499271 = python_operator(stypy.reporting.localization.Localization(__file__, 333, 50), 'div', result_div_499264, _gam_call_result_499270)
    
    # Assigning a type to the variable 'kn' (line 333)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 333, 4), 'kn', result_div_499271)
    
    # Assigning a Call to a Name (line 335):
    
    # Assigning a Call to a Name (line 335):
    
    # Call to orthopoly1d(...): (line 335)
    # Processing the call arguments (line 335)
    # Getting the type of 'x' (line 335)
    x_499273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 20), 'x', False)
    # Getting the type of 'w' (line 335)
    w_499274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 23), 'w', False)
    # Getting the type of 'hn' (line 335)
    hn_499275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 26), 'hn', False)
    # Getting the type of 'kn' (line 335)
    kn_499276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 30), 'kn', False)
    # Getting the type of 'wfunc' (line 335)
    wfunc_499277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 34), 'wfunc', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 335)
    tuple_499278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 335, 42), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 335)
    # Adding element type (line 335)
    int_499279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 335, 42), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 335, 42), tuple_499278, int_499279)
    # Adding element type (line 335)
    int_499280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 335, 46), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 335, 42), tuple_499278, int_499280)
    
    # Getting the type of 'monic' (line 335)
    monic_499281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 50), 'monic', False)

    @norecursion
    def _stypy_temp_lambda_252(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_252'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_252', 336, 20, True)
        # Passed parameters checking function
        _stypy_temp_lambda_252.stypy_localization = localization
        _stypy_temp_lambda_252.stypy_type_of_self = None
        _stypy_temp_lambda_252.stypy_type_store = module_type_store
        _stypy_temp_lambda_252.stypy_function_name = '_stypy_temp_lambda_252'
        _stypy_temp_lambda_252.stypy_param_names_list = ['x']
        _stypy_temp_lambda_252.stypy_varargs_param_name = None
        _stypy_temp_lambda_252.stypy_kwargs_param_name = None
        _stypy_temp_lambda_252.stypy_call_defaults = defaults
        _stypy_temp_lambda_252.stypy_call_varargs = varargs
        _stypy_temp_lambda_252.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_252', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_252', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to eval_jacobi(...): (line 336)
        # Processing the call arguments (line 336)
        # Getting the type of 'n' (line 336)
        n_499283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 42), 'n', False)
        # Getting the type of 'alpha' (line 336)
        alpha_499284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 45), 'alpha', False)
        # Getting the type of 'beta' (line 336)
        beta_499285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 52), 'beta', False)
        # Getting the type of 'x' (line 336)
        x_499286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 58), 'x', False)
        # Processing the call keyword arguments (line 336)
        kwargs_499287 = {}
        # Getting the type of 'eval_jacobi' (line 336)
        eval_jacobi_499282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 30), 'eval_jacobi', False)
        # Calling eval_jacobi(args, kwargs) (line 336)
        eval_jacobi_call_result_499288 = invoke(stypy.reporting.localization.Localization(__file__, 336, 30), eval_jacobi_499282, *[n_499283, alpha_499284, beta_499285, x_499286], **kwargs_499287)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 336)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 336, 20), 'stypy_return_type', eval_jacobi_call_result_499288)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_252' in the type store
        # Getting the type of 'stypy_return_type' (line 336)
        stypy_return_type_499289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 20), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_499289)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_252'
        return stypy_return_type_499289

    # Assigning a type to the variable '_stypy_temp_lambda_252' (line 336)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 336, 20), '_stypy_temp_lambda_252', _stypy_temp_lambda_252)
    # Getting the type of '_stypy_temp_lambda_252' (line 336)
    _stypy_temp_lambda_252_499290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 20), '_stypy_temp_lambda_252')
    # Processing the call keyword arguments (line 335)
    kwargs_499291 = {}
    # Getting the type of 'orthopoly1d' (line 335)
    orthopoly1d_499272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 8), 'orthopoly1d', False)
    # Calling orthopoly1d(args, kwargs) (line 335)
    orthopoly1d_call_result_499292 = invoke(stypy.reporting.localization.Localization(__file__, 335, 8), orthopoly1d_499272, *[x_499273, w_499274, hn_499275, kn_499276, wfunc_499277, tuple_499278, monic_499281, _stypy_temp_lambda_252_499290], **kwargs_499291)
    
    # Assigning a type to the variable 'p' (line 335)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 335, 4), 'p', orthopoly1d_call_result_499292)
    # Getting the type of 'p' (line 337)
    p_499293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 11), 'p')
    # Assigning a type to the variable 'stypy_return_type' (line 337)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 337, 4), 'stypy_return_type', p_499293)
    
    # ################# End of 'jacobi(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'jacobi' in the type store
    # Getting the type of 'stypy_return_type' (line 284)
    stypy_return_type_499294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_499294)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'jacobi'
    return stypy_return_type_499294

# Assigning a type to the variable 'jacobi' (line 284)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 284, 0), 'jacobi', jacobi)

@norecursion
def roots_sh_jacobi(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 342)
    False_499295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 34), 'False')
    defaults = [False_499295]
    # Create a new context for function 'roots_sh_jacobi'
    module_type_store = module_type_store.open_function_context('roots_sh_jacobi', 342, 0, False)
    
    # Passed parameters checking function
    roots_sh_jacobi.stypy_localization = localization
    roots_sh_jacobi.stypy_type_of_self = None
    roots_sh_jacobi.stypy_type_store = module_type_store
    roots_sh_jacobi.stypy_function_name = 'roots_sh_jacobi'
    roots_sh_jacobi.stypy_param_names_list = ['n', 'p1', 'q1', 'mu']
    roots_sh_jacobi.stypy_varargs_param_name = None
    roots_sh_jacobi.stypy_kwargs_param_name = None
    roots_sh_jacobi.stypy_call_defaults = defaults
    roots_sh_jacobi.stypy_call_varargs = varargs
    roots_sh_jacobi.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'roots_sh_jacobi', ['n', 'p1', 'q1', 'mu'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'roots_sh_jacobi', localization, ['n', 'p1', 'q1', 'mu'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'roots_sh_jacobi(...)' code ##################

    str_499296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, (-1)), 'str', 'Gauss-Jacobi (shifted) quadrature.\n\n    Computes the sample points and weights for Gauss-Jacobi (shifted)\n    quadrature. The sample points are the roots of the n-th degree shifted\n    Jacobi polynomial, :math:`G^{p,q}_n(x)`.  These sample points and weights\n    correctly integrate polynomials of degree :math:`2n - 1` or less over the\n    interval :math:`[0, 1]` with weight function\n    :math:`f(x) = (1 - x)^{p-q} x^{q-1}`\n\n    Parameters\n    ----------\n    n : int\n        quadrature order\n    p1 : float\n        (p1 - q1) must be > -1\n    q1 : float\n        q1 must be > 0\n    mu : bool, optional\n        If True, return the sum of the weights, optional.\n\n    Returns\n    -------\n    x : ndarray\n        Sample points\n    w : ndarray\n        Weights\n    mu : float\n        Sum of the weights\n\n    See Also\n    --------\n    scipy.integrate.quadrature\n    scipy.integrate.fixed_quad\n    ')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'p1' (line 377)
    p1_499297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 8), 'p1')
    # Getting the type of 'q1' (line 377)
    q1_499298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 11), 'q1')
    # Applying the binary operator '-' (line 377)
    result_sub_499299 = python_operator(stypy.reporting.localization.Localization(__file__, 377, 8), '-', p1_499297, q1_499298)
    
    int_499300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 377, 18), 'int')
    # Applying the binary operator '<=' (line 377)
    result_le_499301 = python_operator(stypy.reporting.localization.Localization(__file__, 377, 7), '<=', result_sub_499299, int_499300)
    
    
    # Getting the type of 'q1' (line 377)
    q1_499302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 24), 'q1')
    int_499303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 377, 30), 'int')
    # Applying the binary operator '<=' (line 377)
    result_le_499304 = python_operator(stypy.reporting.localization.Localization(__file__, 377, 24), '<=', q1_499302, int_499303)
    
    # Applying the binary operator 'or' (line 377)
    result_or_keyword_499305 = python_operator(stypy.reporting.localization.Localization(__file__, 377, 7), 'or', result_le_499301, result_le_499304)
    
    # Testing the type of an if condition (line 377)
    if_condition_499306 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 377, 4), result_or_keyword_499305)
    # Assigning a type to the variable 'if_condition_499306' (line 377)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 4), 'if_condition_499306', if_condition_499306)
    # SSA begins for if statement (line 377)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 378)
    # Processing the call arguments (line 378)
    str_499308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 378, 25), 'str', '(p - q) must be greater than -1, and q must be greater than 0.')
    # Processing the call keyword arguments (line 378)
    kwargs_499309 = {}
    # Getting the type of 'ValueError' (line 378)
    ValueError_499307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 378)
    ValueError_call_result_499310 = invoke(stypy.reporting.localization.Localization(__file__, 378, 14), ValueError_499307, *[str_499308], **kwargs_499309)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 378, 8), ValueError_call_result_499310, 'raise parameter', BaseException)
    # SSA join for if statement (line 377)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 379):
    
    # Assigning a Subscript to a Name (line 379):
    
    # Obtaining the type of the subscript
    int_499311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 379, 4), 'int')
    
    # Call to roots_jacobi(...): (line 379)
    # Processing the call arguments (line 379)
    # Getting the type of 'n' (line 379)
    n_499313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 27), 'n', False)
    # Getting the type of 'p1' (line 379)
    p1_499314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 30), 'p1', False)
    # Getting the type of 'q1' (line 379)
    q1_499315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 33), 'q1', False)
    # Applying the binary operator '-' (line 379)
    result_sub_499316 = python_operator(stypy.reporting.localization.Localization(__file__, 379, 30), '-', p1_499314, q1_499315)
    
    # Getting the type of 'q1' (line 379)
    q1_499317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 37), 'q1', False)
    int_499318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 379, 40), 'int')
    # Applying the binary operator '-' (line 379)
    result_sub_499319 = python_operator(stypy.reporting.localization.Localization(__file__, 379, 37), '-', q1_499317, int_499318)
    
    # Getting the type of 'True' (line 379)
    True_499320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 43), 'True', False)
    # Processing the call keyword arguments (line 379)
    kwargs_499321 = {}
    # Getting the type of 'roots_jacobi' (line 379)
    roots_jacobi_499312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 14), 'roots_jacobi', False)
    # Calling roots_jacobi(args, kwargs) (line 379)
    roots_jacobi_call_result_499322 = invoke(stypy.reporting.localization.Localization(__file__, 379, 14), roots_jacobi_499312, *[n_499313, result_sub_499316, result_sub_499319, True_499320], **kwargs_499321)
    
    # Obtaining the member '__getitem__' of a type (line 379)
    getitem___499323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 4), roots_jacobi_call_result_499322, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 379)
    subscript_call_result_499324 = invoke(stypy.reporting.localization.Localization(__file__, 379, 4), getitem___499323, int_499311)
    
    # Assigning a type to the variable 'tuple_var_assignment_498396' (line 379)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 4), 'tuple_var_assignment_498396', subscript_call_result_499324)
    
    # Assigning a Subscript to a Name (line 379):
    
    # Obtaining the type of the subscript
    int_499325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 379, 4), 'int')
    
    # Call to roots_jacobi(...): (line 379)
    # Processing the call arguments (line 379)
    # Getting the type of 'n' (line 379)
    n_499327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 27), 'n', False)
    # Getting the type of 'p1' (line 379)
    p1_499328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 30), 'p1', False)
    # Getting the type of 'q1' (line 379)
    q1_499329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 33), 'q1', False)
    # Applying the binary operator '-' (line 379)
    result_sub_499330 = python_operator(stypy.reporting.localization.Localization(__file__, 379, 30), '-', p1_499328, q1_499329)
    
    # Getting the type of 'q1' (line 379)
    q1_499331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 37), 'q1', False)
    int_499332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 379, 40), 'int')
    # Applying the binary operator '-' (line 379)
    result_sub_499333 = python_operator(stypy.reporting.localization.Localization(__file__, 379, 37), '-', q1_499331, int_499332)
    
    # Getting the type of 'True' (line 379)
    True_499334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 43), 'True', False)
    # Processing the call keyword arguments (line 379)
    kwargs_499335 = {}
    # Getting the type of 'roots_jacobi' (line 379)
    roots_jacobi_499326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 14), 'roots_jacobi', False)
    # Calling roots_jacobi(args, kwargs) (line 379)
    roots_jacobi_call_result_499336 = invoke(stypy.reporting.localization.Localization(__file__, 379, 14), roots_jacobi_499326, *[n_499327, result_sub_499330, result_sub_499333, True_499334], **kwargs_499335)
    
    # Obtaining the member '__getitem__' of a type (line 379)
    getitem___499337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 4), roots_jacobi_call_result_499336, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 379)
    subscript_call_result_499338 = invoke(stypy.reporting.localization.Localization(__file__, 379, 4), getitem___499337, int_499325)
    
    # Assigning a type to the variable 'tuple_var_assignment_498397' (line 379)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 4), 'tuple_var_assignment_498397', subscript_call_result_499338)
    
    # Assigning a Subscript to a Name (line 379):
    
    # Obtaining the type of the subscript
    int_499339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 379, 4), 'int')
    
    # Call to roots_jacobi(...): (line 379)
    # Processing the call arguments (line 379)
    # Getting the type of 'n' (line 379)
    n_499341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 27), 'n', False)
    # Getting the type of 'p1' (line 379)
    p1_499342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 30), 'p1', False)
    # Getting the type of 'q1' (line 379)
    q1_499343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 33), 'q1', False)
    # Applying the binary operator '-' (line 379)
    result_sub_499344 = python_operator(stypy.reporting.localization.Localization(__file__, 379, 30), '-', p1_499342, q1_499343)
    
    # Getting the type of 'q1' (line 379)
    q1_499345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 37), 'q1', False)
    int_499346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 379, 40), 'int')
    # Applying the binary operator '-' (line 379)
    result_sub_499347 = python_operator(stypy.reporting.localization.Localization(__file__, 379, 37), '-', q1_499345, int_499346)
    
    # Getting the type of 'True' (line 379)
    True_499348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 43), 'True', False)
    # Processing the call keyword arguments (line 379)
    kwargs_499349 = {}
    # Getting the type of 'roots_jacobi' (line 379)
    roots_jacobi_499340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 14), 'roots_jacobi', False)
    # Calling roots_jacobi(args, kwargs) (line 379)
    roots_jacobi_call_result_499350 = invoke(stypy.reporting.localization.Localization(__file__, 379, 14), roots_jacobi_499340, *[n_499341, result_sub_499344, result_sub_499347, True_499348], **kwargs_499349)
    
    # Obtaining the member '__getitem__' of a type (line 379)
    getitem___499351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 4), roots_jacobi_call_result_499350, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 379)
    subscript_call_result_499352 = invoke(stypy.reporting.localization.Localization(__file__, 379, 4), getitem___499351, int_499339)
    
    # Assigning a type to the variable 'tuple_var_assignment_498398' (line 379)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 4), 'tuple_var_assignment_498398', subscript_call_result_499352)
    
    # Assigning a Name to a Name (line 379):
    # Getting the type of 'tuple_var_assignment_498396' (line 379)
    tuple_var_assignment_498396_499353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 4), 'tuple_var_assignment_498396')
    # Assigning a type to the variable 'x' (line 379)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 4), 'x', tuple_var_assignment_498396_499353)
    
    # Assigning a Name to a Name (line 379):
    # Getting the type of 'tuple_var_assignment_498397' (line 379)
    tuple_var_assignment_498397_499354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 4), 'tuple_var_assignment_498397')
    # Assigning a type to the variable 'w' (line 379)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 7), 'w', tuple_var_assignment_498397_499354)
    
    # Assigning a Name to a Name (line 379):
    # Getting the type of 'tuple_var_assignment_498398' (line 379)
    tuple_var_assignment_498398_499355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 4), 'tuple_var_assignment_498398')
    # Assigning a type to the variable 'm' (line 379)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 10), 'm', tuple_var_assignment_498398_499355)
    
    # Assigning a BinOp to a Name (line 380):
    
    # Assigning a BinOp to a Name (line 380):
    # Getting the type of 'x' (line 380)
    x_499356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 9), 'x')
    int_499357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 380, 13), 'int')
    # Applying the binary operator '+' (line 380)
    result_add_499358 = python_operator(stypy.reporting.localization.Localization(__file__, 380, 9), '+', x_499356, int_499357)
    
    int_499359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 380, 18), 'int')
    # Applying the binary operator 'div' (line 380)
    result_div_499360 = python_operator(stypy.reporting.localization.Localization(__file__, 380, 8), 'div', result_add_499358, int_499359)
    
    # Assigning a type to the variable 'x' (line 380)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 380, 4), 'x', result_div_499360)
    
    # Assigning a BinOp to a Name (line 381):
    
    # Assigning a BinOp to a Name (line 381):
    float_499361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 381, 12), 'float')
    # Getting the type of 'p1' (line 381)
    p1_499362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 17), 'p1')
    # Applying the binary operator '**' (line 381)
    result_pow_499363 = python_operator(stypy.reporting.localization.Localization(__file__, 381, 12), '**', float_499361, p1_499362)
    
    # Assigning a type to the variable 'scale' (line 381)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 381, 4), 'scale', result_pow_499363)
    
    # Getting the type of 'w' (line 382)
    w_499364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 4), 'w')
    # Getting the type of 'scale' (line 382)
    scale_499365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 9), 'scale')
    # Applying the binary operator 'div=' (line 382)
    result_div_499366 = python_operator(stypy.reporting.localization.Localization(__file__, 382, 4), 'div=', w_499364, scale_499365)
    # Assigning a type to the variable 'w' (line 382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 4), 'w', result_div_499366)
    
    
    # Getting the type of 'm' (line 383)
    m_499367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 4), 'm')
    # Getting the type of 'scale' (line 383)
    scale_499368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 9), 'scale')
    # Applying the binary operator 'div=' (line 383)
    result_div_499369 = python_operator(stypy.reporting.localization.Localization(__file__, 383, 4), 'div=', m_499367, scale_499368)
    # Assigning a type to the variable 'm' (line 383)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 4), 'm', result_div_499369)
    
    
    # Getting the type of 'mu' (line 384)
    mu_499370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 7), 'mu')
    # Testing the type of an if condition (line 384)
    if_condition_499371 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 384, 4), mu_499370)
    # Assigning a type to the variable 'if_condition_499371' (line 384)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 384, 4), 'if_condition_499371', if_condition_499371)
    # SSA begins for if statement (line 384)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 385)
    tuple_499372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 385, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 385)
    # Adding element type (line 385)
    # Getting the type of 'x' (line 385)
    x_499373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 15), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 385, 15), tuple_499372, x_499373)
    # Adding element type (line 385)
    # Getting the type of 'w' (line 385)
    w_499374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 18), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 385, 15), tuple_499372, w_499374)
    # Adding element type (line 385)
    # Getting the type of 'm' (line 385)
    m_499375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 21), 'm')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 385, 15), tuple_499372, m_499375)
    
    # Assigning a type to the variable 'stypy_return_type' (line 385)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 385, 8), 'stypy_return_type', tuple_499372)
    # SSA branch for the else part of an if statement (line 384)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining an instance of the builtin type 'tuple' (line 387)
    tuple_499376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 387, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 387)
    # Adding element type (line 387)
    # Getting the type of 'x' (line 387)
    x_499377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 15), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 387, 15), tuple_499376, x_499377)
    # Adding element type (line 387)
    # Getting the type of 'w' (line 387)
    w_499378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 18), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 387, 15), tuple_499376, w_499378)
    
    # Assigning a type to the variable 'stypy_return_type' (line 387)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 387, 8), 'stypy_return_type', tuple_499376)
    # SSA join for if statement (line 384)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'roots_sh_jacobi(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'roots_sh_jacobi' in the type store
    # Getting the type of 'stypy_return_type' (line 342)
    stypy_return_type_499379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_499379)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'roots_sh_jacobi'
    return stypy_return_type_499379

# Assigning a type to the variable 'roots_sh_jacobi' (line 342)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 342, 0), 'roots_sh_jacobi', roots_sh_jacobi)

@norecursion
def sh_jacobi(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 389)
    False_499380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 29), 'False')
    defaults = [False_499380]
    # Create a new context for function 'sh_jacobi'
    module_type_store = module_type_store.open_function_context('sh_jacobi', 389, 0, False)
    
    # Passed parameters checking function
    sh_jacobi.stypy_localization = localization
    sh_jacobi.stypy_type_of_self = None
    sh_jacobi.stypy_type_store = module_type_store
    sh_jacobi.stypy_function_name = 'sh_jacobi'
    sh_jacobi.stypy_param_names_list = ['n', 'p', 'q', 'monic']
    sh_jacobi.stypy_varargs_param_name = None
    sh_jacobi.stypy_kwargs_param_name = None
    sh_jacobi.stypy_call_defaults = defaults
    sh_jacobi.stypy_call_varargs = varargs
    sh_jacobi.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'sh_jacobi', ['n', 'p', 'q', 'monic'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'sh_jacobi', localization, ['n', 'p', 'q', 'monic'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'sh_jacobi(...)' code ##################

    str_499381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 424, (-1)), 'str', 'Shifted Jacobi polynomial.\n\n    Defined by\n\n    .. math::\n\n        G_n^{(p, q)}(x) \n          = \\binom{2n + p - 1}{n}^{-1}P_n^{(p - q, q - 1)}(2x - 1),\n\n    where :math:`P_n^{(\\cdot, \\cdot)}` is the nth Jacobi polynomial.\n\n    Parameters\n    ----------\n    n : int\n        Degree of the polynomial.\n    p : float\n        Parameter, must have :math:`p > q - 1`.\n    q : float\n        Parameter, must be greater than 0.\n    monic : bool, optional\n        If `True`, scale the leading coefficient to be 1. Default is\n        `False`.\n\n    Returns\n    -------\n    G : orthopoly1d\n        Shifted Jacobi polynomial.\n\n    Notes\n    -----\n    For fixed :math:`p, q`, the polynomials :math:`G_n^{(p, q)}` are\n    orthogonal over :math:`[0, 1]` with weight function :math:`(1 -\n    x)^{p - q}x^{q - 1}`.\n\n    ')
    
    
    # Getting the type of 'n' (line 425)
    n_499382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 7), 'n')
    int_499383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 425, 11), 'int')
    # Applying the binary operator '<' (line 425)
    result_lt_499384 = python_operator(stypy.reporting.localization.Localization(__file__, 425, 7), '<', n_499382, int_499383)
    
    # Testing the type of an if condition (line 425)
    if_condition_499385 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 425, 4), result_lt_499384)
    # Assigning a type to the variable 'if_condition_499385' (line 425)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 425, 4), 'if_condition_499385', if_condition_499385)
    # SSA begins for if statement (line 425)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 426)
    # Processing the call arguments (line 426)
    str_499387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 25), 'str', 'n must be nonnegative.')
    # Processing the call keyword arguments (line 426)
    kwargs_499388 = {}
    # Getting the type of 'ValueError' (line 426)
    ValueError_499386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 426)
    ValueError_call_result_499389 = invoke(stypy.reporting.localization.Localization(__file__, 426, 14), ValueError_499386, *[str_499387], **kwargs_499388)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 426, 8), ValueError_call_result_499389, 'raise parameter', BaseException)
    # SSA join for if statement (line 425)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Lambda to a Name (line 428):
    
    # Assigning a Lambda to a Name (line 428):

    @norecursion
    def _stypy_temp_lambda_253(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_253'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_253', 428, 12, True)
        # Passed parameters checking function
        _stypy_temp_lambda_253.stypy_localization = localization
        _stypy_temp_lambda_253.stypy_type_of_self = None
        _stypy_temp_lambda_253.stypy_type_store = module_type_store
        _stypy_temp_lambda_253.stypy_function_name = '_stypy_temp_lambda_253'
        _stypy_temp_lambda_253.stypy_param_names_list = ['x']
        _stypy_temp_lambda_253.stypy_varargs_param_name = None
        _stypy_temp_lambda_253.stypy_kwargs_param_name = None
        _stypy_temp_lambda_253.stypy_call_defaults = defaults
        _stypy_temp_lambda_253.stypy_call_varargs = varargs
        _stypy_temp_lambda_253.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_253', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_253', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        float_499390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 428, 23), 'float')
        # Getting the type of 'x' (line 428)
        x_499391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 29), 'x')
        # Applying the binary operator '-' (line 428)
        result_sub_499392 = python_operator(stypy.reporting.localization.Localization(__file__, 428, 23), '-', float_499390, x_499391)
        
        # Getting the type of 'p' (line 428)
        p_499393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 34), 'p')
        # Getting the type of 'q' (line 428)
        q_499394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 38), 'q')
        # Applying the binary operator '-' (line 428)
        result_sub_499395 = python_operator(stypy.reporting.localization.Localization(__file__, 428, 34), '-', p_499393, q_499394)
        
        # Applying the binary operator '**' (line 428)
        result_pow_499396 = python_operator(stypy.reporting.localization.Localization(__file__, 428, 22), '**', result_sub_499392, result_sub_499395)
        
        # Getting the type of 'x' (line 428)
        x_499397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 44), 'x')
        # Getting the type of 'q' (line 428)
        q_499398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 49), 'q')
        float_499399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 428, 53), 'float')
        # Applying the binary operator '-' (line 428)
        result_sub_499400 = python_operator(stypy.reporting.localization.Localization(__file__, 428, 49), '-', q_499398, float_499399)
        
        # Applying the binary operator '**' (line 428)
        result_pow_499401 = python_operator(stypy.reporting.localization.Localization(__file__, 428, 43), '**', x_499397, result_sub_499400)
        
        # Applying the binary operator '*' (line 428)
        result_mul_499402 = python_operator(stypy.reporting.localization.Localization(__file__, 428, 22), '*', result_pow_499396, result_pow_499401)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 12), 'stypy_return_type', result_mul_499402)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_253' in the type store
        # Getting the type of 'stypy_return_type' (line 428)
        stypy_return_type_499403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 12), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_499403)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_253'
        return stypy_return_type_499403

    # Assigning a type to the variable '_stypy_temp_lambda_253' (line 428)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 12), '_stypy_temp_lambda_253', _stypy_temp_lambda_253)
    # Getting the type of '_stypy_temp_lambda_253' (line 428)
    _stypy_temp_lambda_253_499404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 12), '_stypy_temp_lambda_253')
    # Assigning a type to the variable 'wfunc' (line 428)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 4), 'wfunc', _stypy_temp_lambda_253_499404)
    
    
    # Getting the type of 'n' (line 429)
    n_499405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 7), 'n')
    int_499406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 429, 12), 'int')
    # Applying the binary operator '==' (line 429)
    result_eq_499407 = python_operator(stypy.reporting.localization.Localization(__file__, 429, 7), '==', n_499405, int_499406)
    
    # Testing the type of an if condition (line 429)
    if_condition_499408 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 429, 4), result_eq_499407)
    # Assigning a type to the variable 'if_condition_499408' (line 429)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 429, 4), 'if_condition_499408', if_condition_499408)
    # SSA begins for if statement (line 429)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to orthopoly1d(...): (line 430)
    # Processing the call arguments (line 430)
    
    # Obtaining an instance of the builtin type 'list' (line 430)
    list_499410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 430, 27), 'list')
    # Adding type elements to the builtin type 'list' instance (line 430)
    
    
    # Obtaining an instance of the builtin type 'list' (line 430)
    list_499411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 430, 31), 'list')
    # Adding type elements to the builtin type 'list' instance (line 430)
    
    float_499412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 430, 35), 'float')
    float_499413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 430, 40), 'float')
    # Getting the type of 'wfunc' (line 430)
    wfunc_499414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 45), 'wfunc', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 430)
    tuple_499415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 430, 53), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 430)
    # Adding element type (line 430)
    int_499416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 430, 53), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 430, 53), tuple_499415, int_499416)
    # Adding element type (line 430)
    int_499417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 430, 57), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 430, 53), tuple_499415, int_499417)
    
    # Getting the type of 'monic' (line 430)
    monic_499418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 61), 'monic', False)
    # Processing the call keyword arguments (line 430)
    # Getting the type of 'np' (line 431)
    np_499419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 37), 'np', False)
    # Obtaining the member 'ones_like' of a type (line 431)
    ones_like_499420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 431, 37), np_499419, 'ones_like')
    keyword_499421 = ones_like_499420
    kwargs_499422 = {'eval_func': keyword_499421}
    # Getting the type of 'orthopoly1d' (line 430)
    orthopoly1d_499409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 15), 'orthopoly1d', False)
    # Calling orthopoly1d(args, kwargs) (line 430)
    orthopoly1d_call_result_499423 = invoke(stypy.reporting.localization.Localization(__file__, 430, 15), orthopoly1d_499409, *[list_499410, list_499411, float_499412, float_499413, wfunc_499414, tuple_499415, monic_499418], **kwargs_499422)
    
    # Assigning a type to the variable 'stypy_return_type' (line 430)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 430, 8), 'stypy_return_type', orthopoly1d_call_result_499423)
    # SSA join for if statement (line 429)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 432):
    
    # Assigning a Name to a Name (line 432):
    # Getting the type of 'n' (line 432)
    n_499424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 9), 'n')
    # Assigning a type to the variable 'n1' (line 432)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 4), 'n1', n_499424)
    
    # Assigning a Call to a Tuple (line 433):
    
    # Assigning a Subscript to a Name (line 433):
    
    # Obtaining the type of the subscript
    int_499425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 433, 4), 'int')
    
    # Call to roots_sh_jacobi(...): (line 433)
    # Processing the call arguments (line 433)
    # Getting the type of 'n1' (line 433)
    n1_499427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 32), 'n1', False)
    # Getting the type of 'p' (line 433)
    p_499428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 36), 'p', False)
    # Getting the type of 'q' (line 433)
    q_499429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 39), 'q', False)
    # Processing the call keyword arguments (line 433)
    # Getting the type of 'True' (line 433)
    True_499430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 45), 'True', False)
    keyword_499431 = True_499430
    kwargs_499432 = {'mu': keyword_499431}
    # Getting the type of 'roots_sh_jacobi' (line 433)
    roots_sh_jacobi_499426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 16), 'roots_sh_jacobi', False)
    # Calling roots_sh_jacobi(args, kwargs) (line 433)
    roots_sh_jacobi_call_result_499433 = invoke(stypy.reporting.localization.Localization(__file__, 433, 16), roots_sh_jacobi_499426, *[n1_499427, p_499428, q_499429], **kwargs_499432)
    
    # Obtaining the member '__getitem__' of a type (line 433)
    getitem___499434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 4), roots_sh_jacobi_call_result_499433, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 433)
    subscript_call_result_499435 = invoke(stypy.reporting.localization.Localization(__file__, 433, 4), getitem___499434, int_499425)
    
    # Assigning a type to the variable 'tuple_var_assignment_498399' (line 433)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 433, 4), 'tuple_var_assignment_498399', subscript_call_result_499435)
    
    # Assigning a Subscript to a Name (line 433):
    
    # Obtaining the type of the subscript
    int_499436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 433, 4), 'int')
    
    # Call to roots_sh_jacobi(...): (line 433)
    # Processing the call arguments (line 433)
    # Getting the type of 'n1' (line 433)
    n1_499438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 32), 'n1', False)
    # Getting the type of 'p' (line 433)
    p_499439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 36), 'p', False)
    # Getting the type of 'q' (line 433)
    q_499440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 39), 'q', False)
    # Processing the call keyword arguments (line 433)
    # Getting the type of 'True' (line 433)
    True_499441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 45), 'True', False)
    keyword_499442 = True_499441
    kwargs_499443 = {'mu': keyword_499442}
    # Getting the type of 'roots_sh_jacobi' (line 433)
    roots_sh_jacobi_499437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 16), 'roots_sh_jacobi', False)
    # Calling roots_sh_jacobi(args, kwargs) (line 433)
    roots_sh_jacobi_call_result_499444 = invoke(stypy.reporting.localization.Localization(__file__, 433, 16), roots_sh_jacobi_499437, *[n1_499438, p_499439, q_499440], **kwargs_499443)
    
    # Obtaining the member '__getitem__' of a type (line 433)
    getitem___499445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 4), roots_sh_jacobi_call_result_499444, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 433)
    subscript_call_result_499446 = invoke(stypy.reporting.localization.Localization(__file__, 433, 4), getitem___499445, int_499436)
    
    # Assigning a type to the variable 'tuple_var_assignment_498400' (line 433)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 433, 4), 'tuple_var_assignment_498400', subscript_call_result_499446)
    
    # Assigning a Subscript to a Name (line 433):
    
    # Obtaining the type of the subscript
    int_499447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 433, 4), 'int')
    
    # Call to roots_sh_jacobi(...): (line 433)
    # Processing the call arguments (line 433)
    # Getting the type of 'n1' (line 433)
    n1_499449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 32), 'n1', False)
    # Getting the type of 'p' (line 433)
    p_499450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 36), 'p', False)
    # Getting the type of 'q' (line 433)
    q_499451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 39), 'q', False)
    # Processing the call keyword arguments (line 433)
    # Getting the type of 'True' (line 433)
    True_499452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 45), 'True', False)
    keyword_499453 = True_499452
    kwargs_499454 = {'mu': keyword_499453}
    # Getting the type of 'roots_sh_jacobi' (line 433)
    roots_sh_jacobi_499448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 16), 'roots_sh_jacobi', False)
    # Calling roots_sh_jacobi(args, kwargs) (line 433)
    roots_sh_jacobi_call_result_499455 = invoke(stypy.reporting.localization.Localization(__file__, 433, 16), roots_sh_jacobi_499448, *[n1_499449, p_499450, q_499451], **kwargs_499454)
    
    # Obtaining the member '__getitem__' of a type (line 433)
    getitem___499456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 4), roots_sh_jacobi_call_result_499455, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 433)
    subscript_call_result_499457 = invoke(stypy.reporting.localization.Localization(__file__, 433, 4), getitem___499456, int_499447)
    
    # Assigning a type to the variable 'tuple_var_assignment_498401' (line 433)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 433, 4), 'tuple_var_assignment_498401', subscript_call_result_499457)
    
    # Assigning a Name to a Name (line 433):
    # Getting the type of 'tuple_var_assignment_498399' (line 433)
    tuple_var_assignment_498399_499458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 4), 'tuple_var_assignment_498399')
    # Assigning a type to the variable 'x' (line 433)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 433, 4), 'x', tuple_var_assignment_498399_499458)
    
    # Assigning a Name to a Name (line 433):
    # Getting the type of 'tuple_var_assignment_498400' (line 433)
    tuple_var_assignment_498400_499459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 4), 'tuple_var_assignment_498400')
    # Assigning a type to the variable 'w' (line 433)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 433, 7), 'w', tuple_var_assignment_498400_499459)
    
    # Assigning a Name to a Name (line 433):
    # Getting the type of 'tuple_var_assignment_498401' (line 433)
    tuple_var_assignment_498401_499460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 4), 'tuple_var_assignment_498401')
    # Assigning a type to the variable 'mu0' (line 433)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 433, 10), 'mu0', tuple_var_assignment_498401_499460)
    
    # Assigning a BinOp to a Name (line 434):
    
    # Assigning a BinOp to a Name (line 434):
    
    # Call to _gam(...): (line 434)
    # Processing the call arguments (line 434)
    # Getting the type of 'n' (line 434)
    n_499462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 14), 'n', False)
    int_499463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 434, 18), 'int')
    # Applying the binary operator '+' (line 434)
    result_add_499464 = python_operator(stypy.reporting.localization.Localization(__file__, 434, 14), '+', n_499462, int_499463)
    
    # Processing the call keyword arguments (line 434)
    kwargs_499465 = {}
    # Getting the type of '_gam' (line 434)
    _gam_499461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 9), '_gam', False)
    # Calling _gam(args, kwargs) (line 434)
    _gam_call_result_499466 = invoke(stypy.reporting.localization.Localization(__file__, 434, 9), _gam_499461, *[result_add_499464], **kwargs_499465)
    
    
    # Call to _gam(...): (line 434)
    # Processing the call arguments (line 434)
    # Getting the type of 'n' (line 434)
    n_499468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 28), 'n', False)
    # Getting the type of 'q' (line 434)
    q_499469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 32), 'q', False)
    # Applying the binary operator '+' (line 434)
    result_add_499470 = python_operator(stypy.reporting.localization.Localization(__file__, 434, 28), '+', n_499468, q_499469)
    
    # Processing the call keyword arguments (line 434)
    kwargs_499471 = {}
    # Getting the type of '_gam' (line 434)
    _gam_499467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 23), '_gam', False)
    # Calling _gam(args, kwargs) (line 434)
    _gam_call_result_499472 = invoke(stypy.reporting.localization.Localization(__file__, 434, 23), _gam_499467, *[result_add_499470], **kwargs_499471)
    
    # Applying the binary operator '*' (line 434)
    result_mul_499473 = python_operator(stypy.reporting.localization.Localization(__file__, 434, 9), '*', _gam_call_result_499466, _gam_call_result_499472)
    
    
    # Call to _gam(...): (line 434)
    # Processing the call arguments (line 434)
    # Getting the type of 'n' (line 434)
    n_499475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 42), 'n', False)
    # Getting the type of 'p' (line 434)
    p_499476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 46), 'p', False)
    # Applying the binary operator '+' (line 434)
    result_add_499477 = python_operator(stypy.reporting.localization.Localization(__file__, 434, 42), '+', n_499475, p_499476)
    
    # Processing the call keyword arguments (line 434)
    kwargs_499478 = {}
    # Getting the type of '_gam' (line 434)
    _gam_499474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 37), '_gam', False)
    # Calling _gam(args, kwargs) (line 434)
    _gam_call_result_499479 = invoke(stypy.reporting.localization.Localization(__file__, 434, 37), _gam_499474, *[result_add_499477], **kwargs_499478)
    
    # Applying the binary operator '*' (line 434)
    result_mul_499480 = python_operator(stypy.reporting.localization.Localization(__file__, 434, 35), '*', result_mul_499473, _gam_call_result_499479)
    
    
    # Call to _gam(...): (line 434)
    # Processing the call arguments (line 434)
    # Getting the type of 'n' (line 434)
    n_499482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 56), 'n', False)
    # Getting the type of 'p' (line 434)
    p_499483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 60), 'p', False)
    # Applying the binary operator '+' (line 434)
    result_add_499484 = python_operator(stypy.reporting.localization.Localization(__file__, 434, 56), '+', n_499482, p_499483)
    
    # Getting the type of 'q' (line 434)
    q_499485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 64), 'q', False)
    # Applying the binary operator '-' (line 434)
    result_sub_499486 = python_operator(stypy.reporting.localization.Localization(__file__, 434, 62), '-', result_add_499484, q_499485)
    
    int_499487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 434, 68), 'int')
    # Applying the binary operator '+' (line 434)
    result_add_499488 = python_operator(stypy.reporting.localization.Localization(__file__, 434, 66), '+', result_sub_499486, int_499487)
    
    # Processing the call keyword arguments (line 434)
    kwargs_499489 = {}
    # Getting the type of '_gam' (line 434)
    _gam_499481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 51), '_gam', False)
    # Calling _gam(args, kwargs) (line 434)
    _gam_call_result_499490 = invoke(stypy.reporting.localization.Localization(__file__, 434, 51), _gam_499481, *[result_add_499488], **kwargs_499489)
    
    # Applying the binary operator '*' (line 434)
    result_mul_499491 = python_operator(stypy.reporting.localization.Localization(__file__, 434, 49), '*', result_mul_499480, _gam_call_result_499490)
    
    # Assigning a type to the variable 'hn' (line 434)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 4), 'hn', result_mul_499491)
    
    # Getting the type of 'hn' (line 435)
    hn_499492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 4), 'hn')
    int_499493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 435, 11), 'int')
    # Getting the type of 'n' (line 435)
    n_499494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 15), 'n')
    # Applying the binary operator '*' (line 435)
    result_mul_499495 = python_operator(stypy.reporting.localization.Localization(__file__, 435, 11), '*', int_499493, n_499494)
    
    # Getting the type of 'p' (line 435)
    p_499496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 19), 'p')
    # Applying the binary operator '+' (line 435)
    result_add_499497 = python_operator(stypy.reporting.localization.Localization(__file__, 435, 11), '+', result_mul_499495, p_499496)
    
    
    # Call to _gam(...): (line 435)
    # Processing the call arguments (line 435)
    int_499499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 435, 30), 'int')
    # Getting the type of 'n' (line 435)
    n_499500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 34), 'n', False)
    # Applying the binary operator '*' (line 435)
    result_mul_499501 = python_operator(stypy.reporting.localization.Localization(__file__, 435, 30), '*', int_499499, n_499500)
    
    # Getting the type of 'p' (line 435)
    p_499502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 38), 'p', False)
    # Applying the binary operator '+' (line 435)
    result_add_499503 = python_operator(stypy.reporting.localization.Localization(__file__, 435, 30), '+', result_mul_499501, p_499502)
    
    # Processing the call keyword arguments (line 435)
    kwargs_499504 = {}
    # Getting the type of '_gam' (line 435)
    _gam_499498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 25), '_gam', False)
    # Calling _gam(args, kwargs) (line 435)
    _gam_call_result_499505 = invoke(stypy.reporting.localization.Localization(__file__, 435, 25), _gam_499498, *[result_add_499503], **kwargs_499504)
    
    int_499506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 435, 42), 'int')
    # Applying the binary operator '**' (line 435)
    result_pow_499507 = python_operator(stypy.reporting.localization.Localization(__file__, 435, 25), '**', _gam_call_result_499505, int_499506)
    
    # Applying the binary operator '*' (line 435)
    result_mul_499508 = python_operator(stypy.reporting.localization.Localization(__file__, 435, 10), '*', result_add_499497, result_pow_499507)
    
    # Applying the binary operator 'div=' (line 435)
    result_div_499509 = python_operator(stypy.reporting.localization.Localization(__file__, 435, 4), 'div=', hn_499492, result_mul_499508)
    # Assigning a type to the variable 'hn' (line 435)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 4), 'hn', result_div_499509)
    
    
    # Assigning a Num to a Name (line 437):
    
    # Assigning a Num to a Name (line 437):
    float_499510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 437, 9), 'float')
    # Assigning a type to the variable 'kn' (line 437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 437, 4), 'kn', float_499510)
    
    # Assigning a Call to a Name (line 438):
    
    # Assigning a Call to a Name (line 438):
    
    # Call to orthopoly1d(...): (line 438)
    # Processing the call arguments (line 438)
    # Getting the type of 'x' (line 438)
    x_499512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 21), 'x', False)
    # Getting the type of 'w' (line 438)
    w_499513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 24), 'w', False)
    # Getting the type of 'hn' (line 438)
    hn_499514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 27), 'hn', False)
    # Getting the type of 'kn' (line 438)
    kn_499515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 31), 'kn', False)
    # Processing the call keyword arguments (line 438)
    # Getting the type of 'wfunc' (line 438)
    wfunc_499516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 41), 'wfunc', False)
    keyword_499517 = wfunc_499516
    
    # Obtaining an instance of the builtin type 'tuple' (line 438)
    tuple_499518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 438, 56), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 438)
    # Adding element type (line 438)
    int_499519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 438, 56), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 438, 56), tuple_499518, int_499519)
    # Adding element type (line 438)
    int_499520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 438, 59), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 438, 56), tuple_499518, int_499520)
    
    keyword_499521 = tuple_499518
    # Getting the type of 'monic' (line 438)
    monic_499522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 69), 'monic', False)
    keyword_499523 = monic_499522

    @norecursion
    def _stypy_temp_lambda_254(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_254'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_254', 439, 31, True)
        # Passed parameters checking function
        _stypy_temp_lambda_254.stypy_localization = localization
        _stypy_temp_lambda_254.stypy_type_of_self = None
        _stypy_temp_lambda_254.stypy_type_store = module_type_store
        _stypy_temp_lambda_254.stypy_function_name = '_stypy_temp_lambda_254'
        _stypy_temp_lambda_254.stypy_param_names_list = ['x']
        _stypy_temp_lambda_254.stypy_varargs_param_name = None
        _stypy_temp_lambda_254.stypy_kwargs_param_name = None
        _stypy_temp_lambda_254.stypy_call_defaults = defaults
        _stypy_temp_lambda_254.stypy_call_varargs = varargs
        _stypy_temp_lambda_254.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_254', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_254', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to eval_sh_jacobi(...): (line 439)
        # Processing the call arguments (line 439)
        # Getting the type of 'n' (line 439)
        n_499525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 56), 'n', False)
        # Getting the type of 'p' (line 439)
        p_499526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 59), 'p', False)
        # Getting the type of 'q' (line 439)
        q_499527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 62), 'q', False)
        # Getting the type of 'x' (line 439)
        x_499528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 65), 'x', False)
        # Processing the call keyword arguments (line 439)
        kwargs_499529 = {}
        # Getting the type of 'eval_sh_jacobi' (line 439)
        eval_sh_jacobi_499524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 41), 'eval_sh_jacobi', False)
        # Calling eval_sh_jacobi(args, kwargs) (line 439)
        eval_sh_jacobi_call_result_499530 = invoke(stypy.reporting.localization.Localization(__file__, 439, 41), eval_sh_jacobi_499524, *[n_499525, p_499526, q_499527, x_499528], **kwargs_499529)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 439, 31), 'stypy_return_type', eval_sh_jacobi_call_result_499530)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_254' in the type store
        # Getting the type of 'stypy_return_type' (line 439)
        stypy_return_type_499531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 31), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_499531)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_254'
        return stypy_return_type_499531

    # Assigning a type to the variable '_stypy_temp_lambda_254' (line 439)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 439, 31), '_stypy_temp_lambda_254', _stypy_temp_lambda_254)
    # Getting the type of '_stypy_temp_lambda_254' (line 439)
    _stypy_temp_lambda_254_499532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 31), '_stypy_temp_lambda_254')
    keyword_499533 = _stypy_temp_lambda_254_499532
    kwargs_499534 = {'wfunc': keyword_499517, 'eval_func': keyword_499533, 'limits': keyword_499521, 'monic': keyword_499523}
    # Getting the type of 'orthopoly1d' (line 438)
    orthopoly1d_499511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 9), 'orthopoly1d', False)
    # Calling orthopoly1d(args, kwargs) (line 438)
    orthopoly1d_call_result_499535 = invoke(stypy.reporting.localization.Localization(__file__, 438, 9), orthopoly1d_499511, *[x_499512, w_499513, hn_499514, kn_499515], **kwargs_499534)
    
    # Assigning a type to the variable 'pp' (line 438)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 438, 4), 'pp', orthopoly1d_call_result_499535)
    # Getting the type of 'pp' (line 440)
    pp_499536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 11), 'pp')
    # Assigning a type to the variable 'stypy_return_type' (line 440)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 440, 4), 'stypy_return_type', pp_499536)
    
    # ################# End of 'sh_jacobi(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'sh_jacobi' in the type store
    # Getting the type of 'stypy_return_type' (line 389)
    stypy_return_type_499537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_499537)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'sh_jacobi'
    return stypy_return_type_499537

# Assigning a type to the variable 'sh_jacobi' (line 389)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 0), 'sh_jacobi', sh_jacobi)

@norecursion
def roots_genlaguerre(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 445)
    False_499538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 35), 'False')
    defaults = [False_499538]
    # Create a new context for function 'roots_genlaguerre'
    module_type_store = module_type_store.open_function_context('roots_genlaguerre', 445, 0, False)
    
    # Passed parameters checking function
    roots_genlaguerre.stypy_localization = localization
    roots_genlaguerre.stypy_type_of_self = None
    roots_genlaguerre.stypy_type_store = module_type_store
    roots_genlaguerre.stypy_function_name = 'roots_genlaguerre'
    roots_genlaguerre.stypy_param_names_list = ['n', 'alpha', 'mu']
    roots_genlaguerre.stypy_varargs_param_name = None
    roots_genlaguerre.stypy_kwargs_param_name = None
    roots_genlaguerre.stypy_call_defaults = defaults
    roots_genlaguerre.stypy_call_varargs = varargs
    roots_genlaguerre.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'roots_genlaguerre', ['n', 'alpha', 'mu'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'roots_genlaguerre', localization, ['n', 'alpha', 'mu'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'roots_genlaguerre(...)' code ##################

    str_499539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, (-1)), 'str', 'Gauss-generalized Laguerre quadrature.\n\n    Computes the sample points and weights for Gauss-generalized Laguerre\n    quadrature. The sample points are the roots of the n-th degree generalized\n    Laguerre polynomial, :math:`L^{\\alpha}_n(x)`.  These sample points and\n    weights correctly integrate polynomials of degree :math:`2n - 1` or less\n    over the interval :math:`[0, \\infty]` with weight function\n    :math:`f(x) = x^{\\alpha} e^{-x}`.\n\n    Parameters\n    ----------\n    n : int\n        quadrature order\n    alpha : float\n        alpha must be > -1\n    mu : bool, optional\n        If True, return the sum of the weights, optional.\n\n    Returns\n    -------\n    x : ndarray\n        Sample points\n    w : ndarray\n        Weights\n    mu : float\n        Sum of the weights\n\n    See Also\n    --------\n    scipy.integrate.quadrature\n    scipy.integrate.fixed_quad\n    ')
    
    # Assigning a Call to a Name (line 478):
    
    # Assigning a Call to a Name (line 478):
    
    # Call to int(...): (line 478)
    # Processing the call arguments (line 478)
    # Getting the type of 'n' (line 478)
    n_499541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 12), 'n', False)
    # Processing the call keyword arguments (line 478)
    kwargs_499542 = {}
    # Getting the type of 'int' (line 478)
    int_499540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 8), 'int', False)
    # Calling int(args, kwargs) (line 478)
    int_call_result_499543 = invoke(stypy.reporting.localization.Localization(__file__, 478, 8), int_499540, *[n_499541], **kwargs_499542)
    
    # Assigning a type to the variable 'm' (line 478)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 4), 'm', int_call_result_499543)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'n' (line 479)
    n_499544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 7), 'n')
    int_499545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 479, 11), 'int')
    # Applying the binary operator '<' (line 479)
    result_lt_499546 = python_operator(stypy.reporting.localization.Localization(__file__, 479, 7), '<', n_499544, int_499545)
    
    
    # Getting the type of 'n' (line 479)
    n_499547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 16), 'n')
    # Getting the type of 'm' (line 479)
    m_499548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 21), 'm')
    # Applying the binary operator '!=' (line 479)
    result_ne_499549 = python_operator(stypy.reporting.localization.Localization(__file__, 479, 16), '!=', n_499547, m_499548)
    
    # Applying the binary operator 'or' (line 479)
    result_or_keyword_499550 = python_operator(stypy.reporting.localization.Localization(__file__, 479, 7), 'or', result_lt_499546, result_ne_499549)
    
    # Testing the type of an if condition (line 479)
    if_condition_499551 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 479, 4), result_or_keyword_499550)
    # Assigning a type to the variable 'if_condition_499551' (line 479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 479, 4), 'if_condition_499551', if_condition_499551)
    # SSA begins for if statement (line 479)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 480)
    # Processing the call arguments (line 480)
    str_499553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 480, 25), 'str', 'n must be a positive integer.')
    # Processing the call keyword arguments (line 480)
    kwargs_499554 = {}
    # Getting the type of 'ValueError' (line 480)
    ValueError_499552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 480)
    ValueError_call_result_499555 = invoke(stypy.reporting.localization.Localization(__file__, 480, 14), ValueError_499552, *[str_499553], **kwargs_499554)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 480, 8), ValueError_call_result_499555, 'raise parameter', BaseException)
    # SSA join for if statement (line 479)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'alpha' (line 481)
    alpha_499556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 7), 'alpha')
    int_499557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, 15), 'int')
    # Applying the binary operator '<' (line 481)
    result_lt_499558 = python_operator(stypy.reporting.localization.Localization(__file__, 481, 7), '<', alpha_499556, int_499557)
    
    # Testing the type of an if condition (line 481)
    if_condition_499559 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 481, 4), result_lt_499558)
    # Assigning a type to the variable 'if_condition_499559' (line 481)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 481, 4), 'if_condition_499559', if_condition_499559)
    # SSA begins for if statement (line 481)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 482)
    # Processing the call arguments (line 482)
    str_499561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 482, 25), 'str', 'alpha must be greater than -1.')
    # Processing the call keyword arguments (line 482)
    kwargs_499562 = {}
    # Getting the type of 'ValueError' (line 482)
    ValueError_499560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 482)
    ValueError_call_result_499563 = invoke(stypy.reporting.localization.Localization(__file__, 482, 14), ValueError_499560, *[str_499561], **kwargs_499562)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 482, 8), ValueError_call_result_499563, 'raise parameter', BaseException)
    # SSA join for if statement (line 481)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 484):
    
    # Assigning a Call to a Name (line 484):
    
    # Call to gamma(...): (line 484)
    # Processing the call arguments (line 484)
    # Getting the type of 'alpha' (line 484)
    alpha_499566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 23), 'alpha', False)
    int_499567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 484, 31), 'int')
    # Applying the binary operator '+' (line 484)
    result_add_499568 = python_operator(stypy.reporting.localization.Localization(__file__, 484, 23), '+', alpha_499566, int_499567)
    
    # Processing the call keyword arguments (line 484)
    kwargs_499569 = {}
    # Getting the type of 'cephes' (line 484)
    cephes_499564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 10), 'cephes', False)
    # Obtaining the member 'gamma' of a type (line 484)
    gamma_499565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 10), cephes_499564, 'gamma')
    # Calling gamma(args, kwargs) (line 484)
    gamma_call_result_499570 = invoke(stypy.reporting.localization.Localization(__file__, 484, 10), gamma_499565, *[result_add_499568], **kwargs_499569)
    
    # Assigning a type to the variable 'mu0' (line 484)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 484, 4), 'mu0', gamma_call_result_499570)
    
    
    # Getting the type of 'm' (line 486)
    m_499571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 7), 'm')
    int_499572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 486, 12), 'int')
    # Applying the binary operator '==' (line 486)
    result_eq_499573 = python_operator(stypy.reporting.localization.Localization(__file__, 486, 7), '==', m_499571, int_499572)
    
    # Testing the type of an if condition (line 486)
    if_condition_499574 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 486, 4), result_eq_499573)
    # Assigning a type to the variable 'if_condition_499574' (line 486)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 486, 4), 'if_condition_499574', if_condition_499574)
    # SSA begins for if statement (line 486)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 487):
    
    # Assigning a Call to a Name (line 487):
    
    # Call to array(...): (line 487)
    # Processing the call arguments (line 487)
    
    # Obtaining an instance of the builtin type 'list' (line 487)
    list_499577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 487, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 487)
    # Adding element type (line 487)
    # Getting the type of 'alpha' (line 487)
    alpha_499578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 22), 'alpha', False)
    float_499579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 487, 28), 'float')
    # Applying the binary operator '+' (line 487)
    result_add_499580 = python_operator(stypy.reporting.localization.Localization(__file__, 487, 22), '+', alpha_499578, float_499579)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 487, 21), list_499577, result_add_499580)
    
    str_499581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 487, 34), 'str', 'd')
    # Processing the call keyword arguments (line 487)
    kwargs_499582 = {}
    # Getting the type of 'np' (line 487)
    np_499575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 12), 'np', False)
    # Obtaining the member 'array' of a type (line 487)
    array_499576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 12), np_499575, 'array')
    # Calling array(args, kwargs) (line 487)
    array_call_result_499583 = invoke(stypy.reporting.localization.Localization(__file__, 487, 12), array_499576, *[list_499577, str_499581], **kwargs_499582)
    
    # Assigning a type to the variable 'x' (line 487)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 487, 8), 'x', array_call_result_499583)
    
    # Assigning a Call to a Name (line 488):
    
    # Assigning a Call to a Name (line 488):
    
    # Call to array(...): (line 488)
    # Processing the call arguments (line 488)
    
    # Obtaining an instance of the builtin type 'list' (line 488)
    list_499586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 488, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 488)
    # Adding element type (line 488)
    # Getting the type of 'mu0' (line 488)
    mu0_499587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 22), 'mu0', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 488, 21), list_499586, mu0_499587)
    
    str_499588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 488, 28), 'str', 'd')
    # Processing the call keyword arguments (line 488)
    kwargs_499589 = {}
    # Getting the type of 'np' (line 488)
    np_499584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 12), 'np', False)
    # Obtaining the member 'array' of a type (line 488)
    array_499585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 12), np_499584, 'array')
    # Calling array(args, kwargs) (line 488)
    array_call_result_499590 = invoke(stypy.reporting.localization.Localization(__file__, 488, 12), array_499585, *[list_499586, str_499588], **kwargs_499589)
    
    # Assigning a type to the variable 'w' (line 488)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 488, 8), 'w', array_call_result_499590)
    
    # Getting the type of 'mu' (line 489)
    mu_499591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 11), 'mu')
    # Testing the type of an if condition (line 489)
    if_condition_499592 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 489, 8), mu_499591)
    # Assigning a type to the variable 'if_condition_499592' (line 489)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 489, 8), 'if_condition_499592', if_condition_499592)
    # SSA begins for if statement (line 489)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 490)
    tuple_499593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 490, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 490)
    # Adding element type (line 490)
    # Getting the type of 'x' (line 490)
    x_499594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 19), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 490, 19), tuple_499593, x_499594)
    # Adding element type (line 490)
    # Getting the type of 'w' (line 490)
    w_499595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 22), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 490, 19), tuple_499593, w_499595)
    # Adding element type (line 490)
    # Getting the type of 'mu0' (line 490)
    mu0_499596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 25), 'mu0')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 490, 19), tuple_499593, mu0_499596)
    
    # Assigning a type to the variable 'stypy_return_type' (line 490)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 490, 12), 'stypy_return_type', tuple_499593)
    # SSA branch for the else part of an if statement (line 489)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining an instance of the builtin type 'tuple' (line 492)
    tuple_499597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 492, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 492)
    # Adding element type (line 492)
    # Getting the type of 'x' (line 492)
    x_499598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 19), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 492, 19), tuple_499597, x_499598)
    # Adding element type (line 492)
    # Getting the type of 'w' (line 492)
    w_499599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 22), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 492, 19), tuple_499597, w_499599)
    
    # Assigning a type to the variable 'stypy_return_type' (line 492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 492, 12), 'stypy_return_type', tuple_499597)
    # SSA join for if statement (line 489)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 486)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Lambda to a Name (line 494):
    
    # Assigning a Lambda to a Name (line 494):

    @norecursion
    def _stypy_temp_lambda_255(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_255'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_255', 494, 14, True)
        # Passed parameters checking function
        _stypy_temp_lambda_255.stypy_localization = localization
        _stypy_temp_lambda_255.stypy_type_of_self = None
        _stypy_temp_lambda_255.stypy_type_store = module_type_store
        _stypy_temp_lambda_255.stypy_function_name = '_stypy_temp_lambda_255'
        _stypy_temp_lambda_255.stypy_param_names_list = ['k']
        _stypy_temp_lambda_255.stypy_varargs_param_name = None
        _stypy_temp_lambda_255.stypy_kwargs_param_name = None
        _stypy_temp_lambda_255.stypy_call_defaults = defaults
        _stypy_temp_lambda_255.stypy_call_varargs = varargs
        _stypy_temp_lambda_255.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_255', ['k'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_255', ['k'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        int_499600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 494, 24), 'int')
        # Getting the type of 'k' (line 494)
        k_499601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 28), 'k')
        # Applying the binary operator '*' (line 494)
        result_mul_499602 = python_operator(stypy.reporting.localization.Localization(__file__, 494, 24), '*', int_499600, k_499601)
        
        # Getting the type of 'alpha' (line 494)
        alpha_499603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 32), 'alpha')
        # Applying the binary operator '+' (line 494)
        result_add_499604 = python_operator(stypy.reporting.localization.Localization(__file__, 494, 24), '+', result_mul_499602, alpha_499603)
        
        int_499605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 494, 40), 'int')
        # Applying the binary operator '+' (line 494)
        result_add_499606 = python_operator(stypy.reporting.localization.Localization(__file__, 494, 38), '+', result_add_499604, int_499605)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 494)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 494, 14), 'stypy_return_type', result_add_499606)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_255' in the type store
        # Getting the type of 'stypy_return_type' (line 494)
        stypy_return_type_499607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 14), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_499607)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_255'
        return stypy_return_type_499607

    # Assigning a type to the variable '_stypy_temp_lambda_255' (line 494)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 494, 14), '_stypy_temp_lambda_255', _stypy_temp_lambda_255)
    # Getting the type of '_stypy_temp_lambda_255' (line 494)
    _stypy_temp_lambda_255_499608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 14), '_stypy_temp_lambda_255')
    # Assigning a type to the variable 'an_func' (line 494)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 494, 4), 'an_func', _stypy_temp_lambda_255_499608)
    
    # Assigning a Lambda to a Name (line 495):
    
    # Assigning a Lambda to a Name (line 495):

    @norecursion
    def _stypy_temp_lambda_256(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_256'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_256', 495, 14, True)
        # Passed parameters checking function
        _stypy_temp_lambda_256.stypy_localization = localization
        _stypy_temp_lambda_256.stypy_type_of_self = None
        _stypy_temp_lambda_256.stypy_type_store = module_type_store
        _stypy_temp_lambda_256.stypy_function_name = '_stypy_temp_lambda_256'
        _stypy_temp_lambda_256.stypy_param_names_list = ['k']
        _stypy_temp_lambda_256.stypy_varargs_param_name = None
        _stypy_temp_lambda_256.stypy_kwargs_param_name = None
        _stypy_temp_lambda_256.stypy_call_defaults = defaults
        _stypy_temp_lambda_256.stypy_call_varargs = varargs
        _stypy_temp_lambda_256.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_256', ['k'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_256', ['k'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        
        # Call to sqrt(...): (line 495)
        # Processing the call arguments (line 495)
        # Getting the type of 'k' (line 495)
        k_499611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 33), 'k', False)
        # Getting the type of 'k' (line 495)
        k_499612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 38), 'k', False)
        # Getting the type of 'alpha' (line 495)
        alpha_499613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 42), 'alpha', False)
        # Applying the binary operator '+' (line 495)
        result_add_499614 = python_operator(stypy.reporting.localization.Localization(__file__, 495, 38), '+', k_499612, alpha_499613)
        
        # Applying the binary operator '*' (line 495)
        result_mul_499615 = python_operator(stypy.reporting.localization.Localization(__file__, 495, 33), '*', k_499611, result_add_499614)
        
        # Processing the call keyword arguments (line 495)
        kwargs_499616 = {}
        # Getting the type of 'np' (line 495)
        np_499609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 25), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 495)
        sqrt_499610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 495, 25), np_499609, 'sqrt')
        # Calling sqrt(args, kwargs) (line 495)
        sqrt_call_result_499617 = invoke(stypy.reporting.localization.Localization(__file__, 495, 25), sqrt_499610, *[result_mul_499615], **kwargs_499616)
        
        # Applying the 'usub' unary operator (line 495)
        result___neg___499618 = python_operator(stypy.reporting.localization.Localization(__file__, 495, 24), 'usub', sqrt_call_result_499617)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 495)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 495, 14), 'stypy_return_type', result___neg___499618)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_256' in the type store
        # Getting the type of 'stypy_return_type' (line 495)
        stypy_return_type_499619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 14), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_499619)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_256'
        return stypy_return_type_499619

    # Assigning a type to the variable '_stypy_temp_lambda_256' (line 495)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 495, 14), '_stypy_temp_lambda_256', _stypy_temp_lambda_256)
    # Getting the type of '_stypy_temp_lambda_256' (line 495)
    _stypy_temp_lambda_256_499620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 14), '_stypy_temp_lambda_256')
    # Assigning a type to the variable 'bn_func' (line 495)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 495, 4), 'bn_func', _stypy_temp_lambda_256_499620)
    
    # Assigning a Lambda to a Name (line 496):
    
    # Assigning a Lambda to a Name (line 496):

    @norecursion
    def _stypy_temp_lambda_257(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_257'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_257', 496, 8, True)
        # Passed parameters checking function
        _stypy_temp_lambda_257.stypy_localization = localization
        _stypy_temp_lambda_257.stypy_type_of_self = None
        _stypy_temp_lambda_257.stypy_type_store = module_type_store
        _stypy_temp_lambda_257.stypy_function_name = '_stypy_temp_lambda_257'
        _stypy_temp_lambda_257.stypy_param_names_list = ['n', 'x']
        _stypy_temp_lambda_257.stypy_varargs_param_name = None
        _stypy_temp_lambda_257.stypy_kwargs_param_name = None
        _stypy_temp_lambda_257.stypy_call_defaults = defaults
        _stypy_temp_lambda_257.stypy_call_varargs = varargs
        _stypy_temp_lambda_257.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_257', ['n', 'x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_257', ['n', 'x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to eval_genlaguerre(...): (line 496)
        # Processing the call arguments (line 496)
        # Getting the type of 'n' (line 496)
        n_499623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 45), 'n', False)
        # Getting the type of 'alpha' (line 496)
        alpha_499624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 48), 'alpha', False)
        # Getting the type of 'x' (line 496)
        x_499625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 55), 'x', False)
        # Processing the call keyword arguments (line 496)
        kwargs_499626 = {}
        # Getting the type of 'cephes' (line 496)
        cephes_499621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 21), 'cephes', False)
        # Obtaining the member 'eval_genlaguerre' of a type (line 496)
        eval_genlaguerre_499622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 21), cephes_499621, 'eval_genlaguerre')
        # Calling eval_genlaguerre(args, kwargs) (line 496)
        eval_genlaguerre_call_result_499627 = invoke(stypy.reporting.localization.Localization(__file__, 496, 21), eval_genlaguerre_499622, *[n_499623, alpha_499624, x_499625], **kwargs_499626)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 496)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 496, 8), 'stypy_return_type', eval_genlaguerre_call_result_499627)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_257' in the type store
        # Getting the type of 'stypy_return_type' (line 496)
        stypy_return_type_499628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 8), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_499628)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_257'
        return stypy_return_type_499628

    # Assigning a type to the variable '_stypy_temp_lambda_257' (line 496)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 496, 8), '_stypy_temp_lambda_257', _stypy_temp_lambda_257)
    # Getting the type of '_stypy_temp_lambda_257' (line 496)
    _stypy_temp_lambda_257_499629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 8), '_stypy_temp_lambda_257')
    # Assigning a type to the variable 'f' (line 496)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 496, 4), 'f', _stypy_temp_lambda_257_499629)
    
    # Assigning a Lambda to a Name (line 497):
    
    # Assigning a Lambda to a Name (line 497):

    @norecursion
    def _stypy_temp_lambda_258(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_258'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_258', 497, 9, True)
        # Passed parameters checking function
        _stypy_temp_lambda_258.stypy_localization = localization
        _stypy_temp_lambda_258.stypy_type_of_self = None
        _stypy_temp_lambda_258.stypy_type_store = module_type_store
        _stypy_temp_lambda_258.stypy_function_name = '_stypy_temp_lambda_258'
        _stypy_temp_lambda_258.stypy_param_names_list = ['n', 'x']
        _stypy_temp_lambda_258.stypy_varargs_param_name = None
        _stypy_temp_lambda_258.stypy_kwargs_param_name = None
        _stypy_temp_lambda_258.stypy_call_defaults = defaults
        _stypy_temp_lambda_258.stypy_call_varargs = varargs
        _stypy_temp_lambda_258.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_258', ['n', 'x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_258', ['n', 'x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        # Getting the type of 'n' (line 497)
        n_499630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 23), 'n')
        
        # Call to eval_genlaguerre(...): (line 497)
        # Processing the call arguments (line 497)
        # Getting the type of 'n' (line 497)
        n_499633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 49), 'n', False)
        # Getting the type of 'alpha' (line 497)
        alpha_499634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 52), 'alpha', False)
        # Getting the type of 'x' (line 497)
        x_499635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 59), 'x', False)
        # Processing the call keyword arguments (line 497)
        kwargs_499636 = {}
        # Getting the type of 'cephes' (line 497)
        cephes_499631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 25), 'cephes', False)
        # Obtaining the member 'eval_genlaguerre' of a type (line 497)
        eval_genlaguerre_499632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 25), cephes_499631, 'eval_genlaguerre')
        # Calling eval_genlaguerre(args, kwargs) (line 497)
        eval_genlaguerre_call_result_499637 = invoke(stypy.reporting.localization.Localization(__file__, 497, 25), eval_genlaguerre_499632, *[n_499633, alpha_499634, x_499635], **kwargs_499636)
        
        # Applying the binary operator '*' (line 497)
        result_mul_499638 = python_operator(stypy.reporting.localization.Localization(__file__, 497, 23), '*', n_499630, eval_genlaguerre_call_result_499637)
        
        # Getting the type of 'n' (line 498)
        n_499639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 24), 'n')
        # Getting the type of 'alpha' (line 498)
        alpha_499640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 28), 'alpha')
        # Applying the binary operator '+' (line 498)
        result_add_499641 = python_operator(stypy.reporting.localization.Localization(__file__, 498, 24), '+', n_499639, alpha_499640)
        
        
        # Call to eval_genlaguerre(...): (line 498)
        # Processing the call arguments (line 498)
        # Getting the type of 'n' (line 498)
        n_499644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 59), 'n', False)
        int_499645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 498, 61), 'int')
        # Applying the binary operator '-' (line 498)
        result_sub_499646 = python_operator(stypy.reporting.localization.Localization(__file__, 498, 59), '-', n_499644, int_499645)
        
        # Getting the type of 'alpha' (line 498)
        alpha_499647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 64), 'alpha', False)
        # Getting the type of 'x' (line 498)
        x_499648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 71), 'x', False)
        # Processing the call keyword arguments (line 498)
        kwargs_499649 = {}
        # Getting the type of 'cephes' (line 498)
        cephes_499642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 35), 'cephes', False)
        # Obtaining the member 'eval_genlaguerre' of a type (line 498)
        eval_genlaguerre_499643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 498, 35), cephes_499642, 'eval_genlaguerre')
        # Calling eval_genlaguerre(args, kwargs) (line 498)
        eval_genlaguerre_call_result_499650 = invoke(stypy.reporting.localization.Localization(__file__, 498, 35), eval_genlaguerre_499643, *[result_sub_499646, alpha_499647, x_499648], **kwargs_499649)
        
        # Applying the binary operator '*' (line 498)
        result_mul_499651 = python_operator(stypy.reporting.localization.Localization(__file__, 498, 23), '*', result_add_499641, eval_genlaguerre_call_result_499650)
        
        # Applying the binary operator '-' (line 497)
        result_sub_499652 = python_operator(stypy.reporting.localization.Localization(__file__, 497, 23), '-', result_mul_499638, result_mul_499651)
        
        # Getting the type of 'x' (line 498)
        x_499653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 75), 'x')
        # Applying the binary operator 'div' (line 497)
        result_div_499654 = python_operator(stypy.reporting.localization.Localization(__file__, 497, 22), 'div', result_sub_499652, x_499653)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 9), 'stypy_return_type', result_div_499654)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_258' in the type store
        # Getting the type of 'stypy_return_type' (line 497)
        stypy_return_type_499655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 9), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_499655)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_258'
        return stypy_return_type_499655

    # Assigning a type to the variable '_stypy_temp_lambda_258' (line 497)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 9), '_stypy_temp_lambda_258', _stypy_temp_lambda_258)
    # Getting the type of '_stypy_temp_lambda_258' (line 497)
    _stypy_temp_lambda_258_499656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 9), '_stypy_temp_lambda_258')
    # Assigning a type to the variable 'df' (line 497)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 4), 'df', _stypy_temp_lambda_258_499656)
    
    # Call to _gen_roots_and_weights(...): (line 499)
    # Processing the call arguments (line 499)
    # Getting the type of 'm' (line 499)
    m_499658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 34), 'm', False)
    # Getting the type of 'mu0' (line 499)
    mu0_499659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 37), 'mu0', False)
    # Getting the type of 'an_func' (line 499)
    an_func_499660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 42), 'an_func', False)
    # Getting the type of 'bn_func' (line 499)
    bn_func_499661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 51), 'bn_func', False)
    # Getting the type of 'f' (line 499)
    f_499662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 60), 'f', False)
    # Getting the type of 'df' (line 499)
    df_499663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 63), 'df', False)
    # Getting the type of 'False' (line 499)
    False_499664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 67), 'False', False)
    # Getting the type of 'mu' (line 499)
    mu_499665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 74), 'mu', False)
    # Processing the call keyword arguments (line 499)
    kwargs_499666 = {}
    # Getting the type of '_gen_roots_and_weights' (line 499)
    _gen_roots_and_weights_499657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 11), '_gen_roots_and_weights', False)
    # Calling _gen_roots_and_weights(args, kwargs) (line 499)
    _gen_roots_and_weights_call_result_499667 = invoke(stypy.reporting.localization.Localization(__file__, 499, 11), _gen_roots_and_weights_499657, *[m_499658, mu0_499659, an_func_499660, bn_func_499661, f_499662, df_499663, False_499664, mu_499665], **kwargs_499666)
    
    # Assigning a type to the variable 'stypy_return_type' (line 499)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 499, 4), 'stypy_return_type', _gen_roots_and_weights_call_result_499667)
    
    # ################# End of 'roots_genlaguerre(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'roots_genlaguerre' in the type store
    # Getting the type of 'stypy_return_type' (line 445)
    stypy_return_type_499668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_499668)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'roots_genlaguerre'
    return stypy_return_type_499668

# Assigning a type to the variable 'roots_genlaguerre' (line 445)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 445, 0), 'roots_genlaguerre', roots_genlaguerre)

@norecursion
def genlaguerre(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 502)
    False_499669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 32), 'False')
    defaults = [False_499669]
    # Create a new context for function 'genlaguerre'
    module_type_store = module_type_store.open_function_context('genlaguerre', 502, 0, False)
    
    # Passed parameters checking function
    genlaguerre.stypy_localization = localization
    genlaguerre.stypy_type_of_self = None
    genlaguerre.stypy_type_store = module_type_store
    genlaguerre.stypy_function_name = 'genlaguerre'
    genlaguerre.stypy_param_names_list = ['n', 'alpha', 'monic']
    genlaguerre.stypy_varargs_param_name = None
    genlaguerre.stypy_kwargs_param_name = None
    genlaguerre.stypy_call_defaults = defaults
    genlaguerre.stypy_call_varargs = varargs
    genlaguerre.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'genlaguerre', ['n', 'alpha', 'monic'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'genlaguerre', localization, ['n', 'alpha', 'monic'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'genlaguerre(...)' code ##################

    str_499670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 543, (-1)), 'str', 'Generalized (associated) Laguerre polynomial.\n\n    Defined to be the solution of\n\n    .. math::\n        x\\frac{d^2}{dx^2}L_n^{(\\alpha)} \n          + (\\alpha + 1 - x)\\frac{d}{dx}L_n^{(\\alpha)}\n          + nL_n^{(\\alpha)} = 0,\n\n    where :math:`\\alpha > -1`; :math:`L_n^{(\\alpha)}` is a polynomial\n    of degree :math:`n`.\n\n    Parameters\n    ----------\n    n : int\n        Degree of the polynomial.\n    alpha : float\n        Parameter, must be greater than -1.\n    monic : bool, optional\n        If `True`, scale the leading coefficient to be 1. Default is\n        `False`.\n\n    Returns\n    -------\n    L : orthopoly1d\n        Generalized Laguerre polynomial.\n\n    Notes\n    -----\n    For fixed :math:`\\alpha`, the polynomials :math:`L_n^{(\\alpha)}`\n    are orthogonal over :math:`[0, \\infty)` with weight function\n    :math:`e^{-x}x^\\alpha`.\n\n    The Laguerre polynomials are the special case where :math:`\\alpha\n    = 0`.\n\n    See Also\n    --------\n    laguerre : Laguerre polynomial.\n\n    ')
    
    
    # Getting the type of 'alpha' (line 544)
    alpha_499671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 7), 'alpha')
    int_499672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 544, 16), 'int')
    # Applying the binary operator '<=' (line 544)
    result_le_499673 = python_operator(stypy.reporting.localization.Localization(__file__, 544, 7), '<=', alpha_499671, int_499672)
    
    # Testing the type of an if condition (line 544)
    if_condition_499674 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 544, 4), result_le_499673)
    # Assigning a type to the variable 'if_condition_499674' (line 544)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 544, 4), 'if_condition_499674', if_condition_499674)
    # SSA begins for if statement (line 544)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 545)
    # Processing the call arguments (line 545)
    str_499676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 545, 25), 'str', 'alpha must be > -1')
    # Processing the call keyword arguments (line 545)
    kwargs_499677 = {}
    # Getting the type of 'ValueError' (line 545)
    ValueError_499675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 545)
    ValueError_call_result_499678 = invoke(stypy.reporting.localization.Localization(__file__, 545, 14), ValueError_499675, *[str_499676], **kwargs_499677)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 545, 8), ValueError_call_result_499678, 'raise parameter', BaseException)
    # SSA join for if statement (line 544)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 546)
    n_499679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 7), 'n')
    int_499680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 546, 11), 'int')
    # Applying the binary operator '<' (line 546)
    result_lt_499681 = python_operator(stypy.reporting.localization.Localization(__file__, 546, 7), '<', n_499679, int_499680)
    
    # Testing the type of an if condition (line 546)
    if_condition_499682 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 546, 4), result_lt_499681)
    # Assigning a type to the variable 'if_condition_499682' (line 546)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 546, 4), 'if_condition_499682', if_condition_499682)
    # SSA begins for if statement (line 546)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 547)
    # Processing the call arguments (line 547)
    str_499684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 25), 'str', 'n must be nonnegative.')
    # Processing the call keyword arguments (line 547)
    kwargs_499685 = {}
    # Getting the type of 'ValueError' (line 547)
    ValueError_499683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 547)
    ValueError_call_result_499686 = invoke(stypy.reporting.localization.Localization(__file__, 547, 14), ValueError_499683, *[str_499684], **kwargs_499685)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 547, 8), ValueError_call_result_499686, 'raise parameter', BaseException)
    # SSA join for if statement (line 546)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 549)
    n_499687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 7), 'n')
    int_499688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 549, 12), 'int')
    # Applying the binary operator '==' (line 549)
    result_eq_499689 = python_operator(stypy.reporting.localization.Localization(__file__, 549, 7), '==', n_499687, int_499688)
    
    # Testing the type of an if condition (line 549)
    if_condition_499690 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 549, 4), result_eq_499689)
    # Assigning a type to the variable 'if_condition_499690' (line 549)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 4), 'if_condition_499690', if_condition_499690)
    # SSA begins for if statement (line 549)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 550):
    
    # Assigning a BinOp to a Name (line 550):
    # Getting the type of 'n' (line 550)
    n_499691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 13), 'n')
    int_499692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 550, 17), 'int')
    # Applying the binary operator '+' (line 550)
    result_add_499693 = python_operator(stypy.reporting.localization.Localization(__file__, 550, 13), '+', n_499691, int_499692)
    
    # Assigning a type to the variable 'n1' (line 550)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 550, 8), 'n1', result_add_499693)
    # SSA branch for the else part of an if statement (line 549)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 552):
    
    # Assigning a Name to a Name (line 552):
    # Getting the type of 'n' (line 552)
    n_499694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 13), 'n')
    # Assigning a type to the variable 'n1' (line 552)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 8), 'n1', n_499694)
    # SSA join for if statement (line 549)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 553):
    
    # Assigning a Subscript to a Name (line 553):
    
    # Obtaining the type of the subscript
    int_499695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 553, 4), 'int')
    
    # Call to roots_genlaguerre(...): (line 553)
    # Processing the call arguments (line 553)
    # Getting the type of 'n1' (line 553)
    n1_499697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 34), 'n1', False)
    # Getting the type of 'alpha' (line 553)
    alpha_499698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 38), 'alpha', False)
    # Processing the call keyword arguments (line 553)
    # Getting the type of 'True' (line 553)
    True_499699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 48), 'True', False)
    keyword_499700 = True_499699
    kwargs_499701 = {'mu': keyword_499700}
    # Getting the type of 'roots_genlaguerre' (line 553)
    roots_genlaguerre_499696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 16), 'roots_genlaguerre', False)
    # Calling roots_genlaguerre(args, kwargs) (line 553)
    roots_genlaguerre_call_result_499702 = invoke(stypy.reporting.localization.Localization(__file__, 553, 16), roots_genlaguerre_499696, *[n1_499697, alpha_499698], **kwargs_499701)
    
    # Obtaining the member '__getitem__' of a type (line 553)
    getitem___499703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 4), roots_genlaguerre_call_result_499702, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 553)
    subscript_call_result_499704 = invoke(stypy.reporting.localization.Localization(__file__, 553, 4), getitem___499703, int_499695)
    
    # Assigning a type to the variable 'tuple_var_assignment_498402' (line 553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 4), 'tuple_var_assignment_498402', subscript_call_result_499704)
    
    # Assigning a Subscript to a Name (line 553):
    
    # Obtaining the type of the subscript
    int_499705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 553, 4), 'int')
    
    # Call to roots_genlaguerre(...): (line 553)
    # Processing the call arguments (line 553)
    # Getting the type of 'n1' (line 553)
    n1_499707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 34), 'n1', False)
    # Getting the type of 'alpha' (line 553)
    alpha_499708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 38), 'alpha', False)
    # Processing the call keyword arguments (line 553)
    # Getting the type of 'True' (line 553)
    True_499709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 48), 'True', False)
    keyword_499710 = True_499709
    kwargs_499711 = {'mu': keyword_499710}
    # Getting the type of 'roots_genlaguerre' (line 553)
    roots_genlaguerre_499706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 16), 'roots_genlaguerre', False)
    # Calling roots_genlaguerre(args, kwargs) (line 553)
    roots_genlaguerre_call_result_499712 = invoke(stypy.reporting.localization.Localization(__file__, 553, 16), roots_genlaguerre_499706, *[n1_499707, alpha_499708], **kwargs_499711)
    
    # Obtaining the member '__getitem__' of a type (line 553)
    getitem___499713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 4), roots_genlaguerre_call_result_499712, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 553)
    subscript_call_result_499714 = invoke(stypy.reporting.localization.Localization(__file__, 553, 4), getitem___499713, int_499705)
    
    # Assigning a type to the variable 'tuple_var_assignment_498403' (line 553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 4), 'tuple_var_assignment_498403', subscript_call_result_499714)
    
    # Assigning a Subscript to a Name (line 553):
    
    # Obtaining the type of the subscript
    int_499715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 553, 4), 'int')
    
    # Call to roots_genlaguerre(...): (line 553)
    # Processing the call arguments (line 553)
    # Getting the type of 'n1' (line 553)
    n1_499717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 34), 'n1', False)
    # Getting the type of 'alpha' (line 553)
    alpha_499718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 38), 'alpha', False)
    # Processing the call keyword arguments (line 553)
    # Getting the type of 'True' (line 553)
    True_499719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 48), 'True', False)
    keyword_499720 = True_499719
    kwargs_499721 = {'mu': keyword_499720}
    # Getting the type of 'roots_genlaguerre' (line 553)
    roots_genlaguerre_499716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 16), 'roots_genlaguerre', False)
    # Calling roots_genlaguerre(args, kwargs) (line 553)
    roots_genlaguerre_call_result_499722 = invoke(stypy.reporting.localization.Localization(__file__, 553, 16), roots_genlaguerre_499716, *[n1_499717, alpha_499718], **kwargs_499721)
    
    # Obtaining the member '__getitem__' of a type (line 553)
    getitem___499723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 4), roots_genlaguerre_call_result_499722, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 553)
    subscript_call_result_499724 = invoke(stypy.reporting.localization.Localization(__file__, 553, 4), getitem___499723, int_499715)
    
    # Assigning a type to the variable 'tuple_var_assignment_498404' (line 553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 4), 'tuple_var_assignment_498404', subscript_call_result_499724)
    
    # Assigning a Name to a Name (line 553):
    # Getting the type of 'tuple_var_assignment_498402' (line 553)
    tuple_var_assignment_498402_499725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 4), 'tuple_var_assignment_498402')
    # Assigning a type to the variable 'x' (line 553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 4), 'x', tuple_var_assignment_498402_499725)
    
    # Assigning a Name to a Name (line 553):
    # Getting the type of 'tuple_var_assignment_498403' (line 553)
    tuple_var_assignment_498403_499726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 4), 'tuple_var_assignment_498403')
    # Assigning a type to the variable 'w' (line 553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 7), 'w', tuple_var_assignment_498403_499726)
    
    # Assigning a Name to a Name (line 553):
    # Getting the type of 'tuple_var_assignment_498404' (line 553)
    tuple_var_assignment_498404_499727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 4), 'tuple_var_assignment_498404')
    # Assigning a type to the variable 'mu0' (line 553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 10), 'mu0', tuple_var_assignment_498404_499727)
    
    # Assigning a Lambda to a Name (line 554):
    
    # Assigning a Lambda to a Name (line 554):

    @norecursion
    def _stypy_temp_lambda_259(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_259'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_259', 554, 12, True)
        # Passed parameters checking function
        _stypy_temp_lambda_259.stypy_localization = localization
        _stypy_temp_lambda_259.stypy_type_of_self = None
        _stypy_temp_lambda_259.stypy_type_store = module_type_store
        _stypy_temp_lambda_259.stypy_function_name = '_stypy_temp_lambda_259'
        _stypy_temp_lambda_259.stypy_param_names_list = ['x']
        _stypy_temp_lambda_259.stypy_varargs_param_name = None
        _stypy_temp_lambda_259.stypy_kwargs_param_name = None
        _stypy_temp_lambda_259.stypy_call_defaults = defaults
        _stypy_temp_lambda_259.stypy_call_varargs = varargs
        _stypy_temp_lambda_259.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_259', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_259', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to exp(...): (line 554)
        # Processing the call arguments (line 554)
        
        # Getting the type of 'x' (line 554)
        x_499729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 27), 'x', False)
        # Applying the 'usub' unary operator (line 554)
        result___neg___499730 = python_operator(stypy.reporting.localization.Localization(__file__, 554, 26), 'usub', x_499729)
        
        # Processing the call keyword arguments (line 554)
        kwargs_499731 = {}
        # Getting the type of 'exp' (line 554)
        exp_499728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 22), 'exp', False)
        # Calling exp(args, kwargs) (line 554)
        exp_call_result_499732 = invoke(stypy.reporting.localization.Localization(__file__, 554, 22), exp_499728, *[result___neg___499730], **kwargs_499731)
        
        # Getting the type of 'x' (line 554)
        x_499733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 32), 'x')
        # Getting the type of 'alpha' (line 554)
        alpha_499734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 35), 'alpha')
        # Applying the binary operator '**' (line 554)
        result_pow_499735 = python_operator(stypy.reporting.localization.Localization(__file__, 554, 32), '**', x_499733, alpha_499734)
        
        # Applying the binary operator '*' (line 554)
        result_mul_499736 = python_operator(stypy.reporting.localization.Localization(__file__, 554, 22), '*', exp_call_result_499732, result_pow_499735)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 554)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 554, 12), 'stypy_return_type', result_mul_499736)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_259' in the type store
        # Getting the type of 'stypy_return_type' (line 554)
        stypy_return_type_499737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 12), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_499737)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_259'
        return stypy_return_type_499737

    # Assigning a type to the variable '_stypy_temp_lambda_259' (line 554)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 554, 12), '_stypy_temp_lambda_259', _stypy_temp_lambda_259)
    # Getting the type of '_stypy_temp_lambda_259' (line 554)
    _stypy_temp_lambda_259_499738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 12), '_stypy_temp_lambda_259')
    # Assigning a type to the variable 'wfunc' (line 554)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 554, 4), 'wfunc', _stypy_temp_lambda_259_499738)
    
    
    # Getting the type of 'n' (line 555)
    n_499739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 7), 'n')
    int_499740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 555, 12), 'int')
    # Applying the binary operator '==' (line 555)
    result_eq_499741 = python_operator(stypy.reporting.localization.Localization(__file__, 555, 7), '==', n_499739, int_499740)
    
    # Testing the type of an if condition (line 555)
    if_condition_499742 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 555, 4), result_eq_499741)
    # Assigning a type to the variable 'if_condition_499742' (line 555)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 555, 4), 'if_condition_499742', if_condition_499742)
    # SSA begins for if statement (line 555)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 556):
    
    # Assigning a List to a Name (line 556):
    
    # Obtaining an instance of the builtin type 'list' (line 556)
    list_499743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 556, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 556)
    
    # Assigning a type to the variable 'tuple_assignment_498405' (line 556)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 8), 'tuple_assignment_498405', list_499743)
    
    # Assigning a List to a Name (line 556):
    
    # Obtaining an instance of the builtin type 'list' (line 556)
    list_499744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 556, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 556)
    
    # Assigning a type to the variable 'tuple_assignment_498406' (line 556)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 8), 'tuple_assignment_498406', list_499744)
    
    # Assigning a Name to a Name (line 556):
    # Getting the type of 'tuple_assignment_498405' (line 556)
    tuple_assignment_498405_499745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 8), 'tuple_assignment_498405')
    # Assigning a type to the variable 'x' (line 556)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 8), 'x', tuple_assignment_498405_499745)
    
    # Assigning a Name to a Name (line 556):
    # Getting the type of 'tuple_assignment_498406' (line 556)
    tuple_assignment_498406_499746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 8), 'tuple_assignment_498406')
    # Assigning a type to the variable 'w' (line 556)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 11), 'w', tuple_assignment_498406_499746)
    # SSA join for if statement (line 555)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 557):
    
    # Assigning a BinOp to a Name (line 557):
    
    # Call to _gam(...): (line 557)
    # Processing the call arguments (line 557)
    # Getting the type of 'n' (line 557)
    n_499748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 14), 'n', False)
    # Getting the type of 'alpha' (line 557)
    alpha_499749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 18), 'alpha', False)
    # Applying the binary operator '+' (line 557)
    result_add_499750 = python_operator(stypy.reporting.localization.Localization(__file__, 557, 14), '+', n_499748, alpha_499749)
    
    int_499751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 557, 26), 'int')
    # Applying the binary operator '+' (line 557)
    result_add_499752 = python_operator(stypy.reporting.localization.Localization(__file__, 557, 24), '+', result_add_499750, int_499751)
    
    # Processing the call keyword arguments (line 557)
    kwargs_499753 = {}
    # Getting the type of '_gam' (line 557)
    _gam_499747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 9), '_gam', False)
    # Calling _gam(args, kwargs) (line 557)
    _gam_call_result_499754 = invoke(stypy.reporting.localization.Localization(__file__, 557, 9), _gam_499747, *[result_add_499752], **kwargs_499753)
    
    
    # Call to _gam(...): (line 557)
    # Processing the call arguments (line 557)
    # Getting the type of 'n' (line 557)
    n_499756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 36), 'n', False)
    int_499757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 557, 40), 'int')
    # Applying the binary operator '+' (line 557)
    result_add_499758 = python_operator(stypy.reporting.localization.Localization(__file__, 557, 36), '+', n_499756, int_499757)
    
    # Processing the call keyword arguments (line 557)
    kwargs_499759 = {}
    # Getting the type of '_gam' (line 557)
    _gam_499755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 31), '_gam', False)
    # Calling _gam(args, kwargs) (line 557)
    _gam_call_result_499760 = invoke(stypy.reporting.localization.Localization(__file__, 557, 31), _gam_499755, *[result_add_499758], **kwargs_499759)
    
    # Applying the binary operator 'div' (line 557)
    result_div_499761 = python_operator(stypy.reporting.localization.Localization(__file__, 557, 9), 'div', _gam_call_result_499754, _gam_call_result_499760)
    
    # Assigning a type to the variable 'hn' (line 557)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 557, 4), 'hn', result_div_499761)
    
    # Assigning a BinOp to a Name (line 558):
    
    # Assigning a BinOp to a Name (line 558):
    int_499762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 558, 10), 'int')
    # Getting the type of 'n' (line 558)
    n_499763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 15), 'n')
    # Applying the binary operator '**' (line 558)
    result_pow_499764 = python_operator(stypy.reporting.localization.Localization(__file__, 558, 9), '**', int_499762, n_499763)
    
    
    # Call to _gam(...): (line 558)
    # Processing the call arguments (line 558)
    # Getting the type of 'n' (line 558)
    n_499766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 24), 'n', False)
    int_499767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 558, 28), 'int')
    # Applying the binary operator '+' (line 558)
    result_add_499768 = python_operator(stypy.reporting.localization.Localization(__file__, 558, 24), '+', n_499766, int_499767)
    
    # Processing the call keyword arguments (line 558)
    kwargs_499769 = {}
    # Getting the type of '_gam' (line 558)
    _gam_499765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 19), '_gam', False)
    # Calling _gam(args, kwargs) (line 558)
    _gam_call_result_499770 = invoke(stypy.reporting.localization.Localization(__file__, 558, 19), _gam_499765, *[result_add_499768], **kwargs_499769)
    
    # Applying the binary operator 'div' (line 558)
    result_div_499771 = python_operator(stypy.reporting.localization.Localization(__file__, 558, 9), 'div', result_pow_499764, _gam_call_result_499770)
    
    # Assigning a type to the variable 'kn' (line 558)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 558, 4), 'kn', result_div_499771)
    
    # Assigning a Call to a Name (line 559):
    
    # Assigning a Call to a Name (line 559):
    
    # Call to orthopoly1d(...): (line 559)
    # Processing the call arguments (line 559)
    # Getting the type of 'x' (line 559)
    x_499773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 20), 'x', False)
    # Getting the type of 'w' (line 559)
    w_499774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 23), 'w', False)
    # Getting the type of 'hn' (line 559)
    hn_499775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 26), 'hn', False)
    # Getting the type of 'kn' (line 559)
    kn_499776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 30), 'kn', False)
    # Getting the type of 'wfunc' (line 559)
    wfunc_499777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 34), 'wfunc', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 559)
    tuple_499778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 42), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 559)
    # Adding element type (line 559)
    int_499779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 42), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 559, 42), tuple_499778, int_499779)
    # Adding element type (line 559)
    # Getting the type of 'inf' (line 559)
    inf_499780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 45), 'inf', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 559, 42), tuple_499778, inf_499780)
    
    # Getting the type of 'monic' (line 559)
    monic_499781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 51), 'monic', False)

    @norecursion
    def _stypy_temp_lambda_260(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_260'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_260', 560, 20, True)
        # Passed parameters checking function
        _stypy_temp_lambda_260.stypy_localization = localization
        _stypy_temp_lambda_260.stypy_type_of_self = None
        _stypy_temp_lambda_260.stypy_type_store = module_type_store
        _stypy_temp_lambda_260.stypy_function_name = '_stypy_temp_lambda_260'
        _stypy_temp_lambda_260.stypy_param_names_list = ['x']
        _stypy_temp_lambda_260.stypy_varargs_param_name = None
        _stypy_temp_lambda_260.stypy_kwargs_param_name = None
        _stypy_temp_lambda_260.stypy_call_defaults = defaults
        _stypy_temp_lambda_260.stypy_call_varargs = varargs
        _stypy_temp_lambda_260.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_260', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_260', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to eval_genlaguerre(...): (line 560)
        # Processing the call arguments (line 560)
        # Getting the type of 'n' (line 560)
        n_499783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 47), 'n', False)
        # Getting the type of 'alpha' (line 560)
        alpha_499784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 50), 'alpha', False)
        # Getting the type of 'x' (line 560)
        x_499785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 57), 'x', False)
        # Processing the call keyword arguments (line 560)
        kwargs_499786 = {}
        # Getting the type of 'eval_genlaguerre' (line 560)
        eval_genlaguerre_499782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 30), 'eval_genlaguerre', False)
        # Calling eval_genlaguerre(args, kwargs) (line 560)
        eval_genlaguerre_call_result_499787 = invoke(stypy.reporting.localization.Localization(__file__, 560, 30), eval_genlaguerre_499782, *[n_499783, alpha_499784, x_499785], **kwargs_499786)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 20), 'stypy_return_type', eval_genlaguerre_call_result_499787)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_260' in the type store
        # Getting the type of 'stypy_return_type' (line 560)
        stypy_return_type_499788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 20), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_499788)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_260'
        return stypy_return_type_499788

    # Assigning a type to the variable '_stypy_temp_lambda_260' (line 560)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 20), '_stypy_temp_lambda_260', _stypy_temp_lambda_260)
    # Getting the type of '_stypy_temp_lambda_260' (line 560)
    _stypy_temp_lambda_260_499789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 20), '_stypy_temp_lambda_260')
    # Processing the call keyword arguments (line 559)
    kwargs_499790 = {}
    # Getting the type of 'orthopoly1d' (line 559)
    orthopoly1d_499772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 8), 'orthopoly1d', False)
    # Calling orthopoly1d(args, kwargs) (line 559)
    orthopoly1d_call_result_499791 = invoke(stypy.reporting.localization.Localization(__file__, 559, 8), orthopoly1d_499772, *[x_499773, w_499774, hn_499775, kn_499776, wfunc_499777, tuple_499778, monic_499781, _stypy_temp_lambda_260_499789], **kwargs_499790)
    
    # Assigning a type to the variable 'p' (line 559)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 559, 4), 'p', orthopoly1d_call_result_499791)
    # Getting the type of 'p' (line 561)
    p_499792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 11), 'p')
    # Assigning a type to the variable 'stypy_return_type' (line 561)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 561, 4), 'stypy_return_type', p_499792)
    
    # ################# End of 'genlaguerre(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'genlaguerre' in the type store
    # Getting the type of 'stypy_return_type' (line 502)
    stypy_return_type_499793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_499793)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'genlaguerre'
    return stypy_return_type_499793

# Assigning a type to the variable 'genlaguerre' (line 502)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 502, 0), 'genlaguerre', genlaguerre)

@norecursion
def roots_laguerre(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 566)
    False_499794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 25), 'False')
    defaults = [False_499794]
    # Create a new context for function 'roots_laguerre'
    module_type_store = module_type_store.open_function_context('roots_laguerre', 566, 0, False)
    
    # Passed parameters checking function
    roots_laguerre.stypy_localization = localization
    roots_laguerre.stypy_type_of_self = None
    roots_laguerre.stypy_type_store = module_type_store
    roots_laguerre.stypy_function_name = 'roots_laguerre'
    roots_laguerre.stypy_param_names_list = ['n', 'mu']
    roots_laguerre.stypy_varargs_param_name = None
    roots_laguerre.stypy_kwargs_param_name = None
    roots_laguerre.stypy_call_defaults = defaults
    roots_laguerre.stypy_call_varargs = varargs
    roots_laguerre.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'roots_laguerre', ['n', 'mu'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'roots_laguerre', localization, ['n', 'mu'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'roots_laguerre(...)' code ##################

    str_499795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 596, (-1)), 'str', 'Gauss-Laguerre quadrature.\n\n    Computes the sample points and weights for Gauss-Laguerre quadrature.\n    The sample points are the roots of the n-th degree Laguerre polynomial,\n    :math:`L_n(x)`.  These sample points and weights correctly integrate\n    polynomials of degree :math:`2n - 1` or less over the interval\n    :math:`[0, \\infty]` with weight function :math:`f(x) = e^{-x}`.\n\n    Parameters\n    ----------\n    n : int\n        quadrature order\n    mu : bool, optional\n        If True, return the sum of the weights, optional.\n\n    Returns\n    -------\n    x : ndarray\n        Sample points\n    w : ndarray\n        Weights\n    mu : float\n        Sum of the weights\n\n    See Also\n    --------\n    scipy.integrate.quadrature\n    scipy.integrate.fixed_quad\n    numpy.polynomial.laguerre.laggauss\n    ')
    
    # Call to roots_genlaguerre(...): (line 597)
    # Processing the call arguments (line 597)
    # Getting the type of 'n' (line 597)
    n_499797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 29), 'n', False)
    float_499798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 597, 32), 'float')
    # Processing the call keyword arguments (line 597)
    # Getting the type of 'mu' (line 597)
    mu_499799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 40), 'mu', False)
    keyword_499800 = mu_499799
    kwargs_499801 = {'mu': keyword_499800}
    # Getting the type of 'roots_genlaguerre' (line 597)
    roots_genlaguerre_499796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 11), 'roots_genlaguerre', False)
    # Calling roots_genlaguerre(args, kwargs) (line 597)
    roots_genlaguerre_call_result_499802 = invoke(stypy.reporting.localization.Localization(__file__, 597, 11), roots_genlaguerre_499796, *[n_499797, float_499798], **kwargs_499801)
    
    # Assigning a type to the variable 'stypy_return_type' (line 597)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 597, 4), 'stypy_return_type', roots_genlaguerre_call_result_499802)
    
    # ################# End of 'roots_laguerre(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'roots_laguerre' in the type store
    # Getting the type of 'stypy_return_type' (line 566)
    stypy_return_type_499803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_499803)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'roots_laguerre'
    return stypy_return_type_499803

# Assigning a type to the variable 'roots_laguerre' (line 566)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 566, 0), 'roots_laguerre', roots_laguerre)

@norecursion
def laguerre(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 600)
    False_499804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 22), 'False')
    defaults = [False_499804]
    # Create a new context for function 'laguerre'
    module_type_store = module_type_store.open_function_context('laguerre', 600, 0, False)
    
    # Passed parameters checking function
    laguerre.stypy_localization = localization
    laguerre.stypy_type_of_self = None
    laguerre.stypy_type_store = module_type_store
    laguerre.stypy_function_name = 'laguerre'
    laguerre.stypy_param_names_list = ['n', 'monic']
    laguerre.stypy_varargs_param_name = None
    laguerre.stypy_kwargs_param_name = None
    laguerre.stypy_call_defaults = defaults
    laguerre.stypy_call_varargs = varargs
    laguerre.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'laguerre', ['n', 'monic'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'laguerre', localization, ['n', 'monic'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'laguerre(...)' code ##################

    str_499805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, (-1)), 'str', 'Laguerre polynomial.\n\n    Defined to be the solution of\n\n    .. math::\n        x\\frac{d^2}{dx^2}L_n + (1 - x)\\frac{d}{dx}L_n + nL_n = 0;\n\n    :math:`L_n` is a polynomial of degree :math:`n`.\n\n    Parameters\n    ----------\n    n : int\n        Degree of the polynomial.\n    monic : bool, optional\n        If `True`, scale the leading coefficient to be 1. Default is\n        `False`.\n\n    Returns\n    -------\n    L : orthopoly1d\n        Laguerre Polynomial.\n\n    Notes\n    -----\n    The polynomials :math:`L_n` are orthogonal over :math:`[0,\n    \\infty)` with weight function :math:`e^{-x}`.\n\n    ')
    
    
    # Getting the type of 'n' (line 629)
    n_499806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 7), 'n')
    int_499807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 11), 'int')
    # Applying the binary operator '<' (line 629)
    result_lt_499808 = python_operator(stypy.reporting.localization.Localization(__file__, 629, 7), '<', n_499806, int_499807)
    
    # Testing the type of an if condition (line 629)
    if_condition_499809 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 629, 4), result_lt_499808)
    # Assigning a type to the variable 'if_condition_499809' (line 629)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 629, 4), 'if_condition_499809', if_condition_499809)
    # SSA begins for if statement (line 629)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 630)
    # Processing the call arguments (line 630)
    str_499811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 630, 25), 'str', 'n must be nonnegative.')
    # Processing the call keyword arguments (line 630)
    kwargs_499812 = {}
    # Getting the type of 'ValueError' (line 630)
    ValueError_499810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 630)
    ValueError_call_result_499813 = invoke(stypy.reporting.localization.Localization(__file__, 630, 14), ValueError_499810, *[str_499811], **kwargs_499812)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 630, 8), ValueError_call_result_499813, 'raise parameter', BaseException)
    # SSA join for if statement (line 629)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 632)
    n_499814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 7), 'n')
    int_499815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 632, 12), 'int')
    # Applying the binary operator '==' (line 632)
    result_eq_499816 = python_operator(stypy.reporting.localization.Localization(__file__, 632, 7), '==', n_499814, int_499815)
    
    # Testing the type of an if condition (line 632)
    if_condition_499817 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 632, 4), result_eq_499816)
    # Assigning a type to the variable 'if_condition_499817' (line 632)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 632, 4), 'if_condition_499817', if_condition_499817)
    # SSA begins for if statement (line 632)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 633):
    
    # Assigning a BinOp to a Name (line 633):
    # Getting the type of 'n' (line 633)
    n_499818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 13), 'n')
    int_499819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 633, 17), 'int')
    # Applying the binary operator '+' (line 633)
    result_add_499820 = python_operator(stypy.reporting.localization.Localization(__file__, 633, 13), '+', n_499818, int_499819)
    
    # Assigning a type to the variable 'n1' (line 633)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 633, 8), 'n1', result_add_499820)
    # SSA branch for the else part of an if statement (line 632)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 635):
    
    # Assigning a Name to a Name (line 635):
    # Getting the type of 'n' (line 635)
    n_499821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 13), 'n')
    # Assigning a type to the variable 'n1' (line 635)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 635, 8), 'n1', n_499821)
    # SSA join for if statement (line 632)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 636):
    
    # Assigning a Subscript to a Name (line 636):
    
    # Obtaining the type of the subscript
    int_499822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 4), 'int')
    
    # Call to roots_laguerre(...): (line 636)
    # Processing the call arguments (line 636)
    # Getting the type of 'n1' (line 636)
    n1_499824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 31), 'n1', False)
    # Processing the call keyword arguments (line 636)
    # Getting the type of 'True' (line 636)
    True_499825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 38), 'True', False)
    keyword_499826 = True_499825
    kwargs_499827 = {'mu': keyword_499826}
    # Getting the type of 'roots_laguerre' (line 636)
    roots_laguerre_499823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 16), 'roots_laguerre', False)
    # Calling roots_laguerre(args, kwargs) (line 636)
    roots_laguerre_call_result_499828 = invoke(stypy.reporting.localization.Localization(__file__, 636, 16), roots_laguerre_499823, *[n1_499824], **kwargs_499827)
    
    # Obtaining the member '__getitem__' of a type (line 636)
    getitem___499829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 636, 4), roots_laguerre_call_result_499828, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 636)
    subscript_call_result_499830 = invoke(stypy.reporting.localization.Localization(__file__, 636, 4), getitem___499829, int_499822)
    
    # Assigning a type to the variable 'tuple_var_assignment_498407' (line 636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 636, 4), 'tuple_var_assignment_498407', subscript_call_result_499830)
    
    # Assigning a Subscript to a Name (line 636):
    
    # Obtaining the type of the subscript
    int_499831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 4), 'int')
    
    # Call to roots_laguerre(...): (line 636)
    # Processing the call arguments (line 636)
    # Getting the type of 'n1' (line 636)
    n1_499833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 31), 'n1', False)
    # Processing the call keyword arguments (line 636)
    # Getting the type of 'True' (line 636)
    True_499834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 38), 'True', False)
    keyword_499835 = True_499834
    kwargs_499836 = {'mu': keyword_499835}
    # Getting the type of 'roots_laguerre' (line 636)
    roots_laguerre_499832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 16), 'roots_laguerre', False)
    # Calling roots_laguerre(args, kwargs) (line 636)
    roots_laguerre_call_result_499837 = invoke(stypy.reporting.localization.Localization(__file__, 636, 16), roots_laguerre_499832, *[n1_499833], **kwargs_499836)
    
    # Obtaining the member '__getitem__' of a type (line 636)
    getitem___499838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 636, 4), roots_laguerre_call_result_499837, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 636)
    subscript_call_result_499839 = invoke(stypy.reporting.localization.Localization(__file__, 636, 4), getitem___499838, int_499831)
    
    # Assigning a type to the variable 'tuple_var_assignment_498408' (line 636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 636, 4), 'tuple_var_assignment_498408', subscript_call_result_499839)
    
    # Assigning a Subscript to a Name (line 636):
    
    # Obtaining the type of the subscript
    int_499840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 4), 'int')
    
    # Call to roots_laguerre(...): (line 636)
    # Processing the call arguments (line 636)
    # Getting the type of 'n1' (line 636)
    n1_499842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 31), 'n1', False)
    # Processing the call keyword arguments (line 636)
    # Getting the type of 'True' (line 636)
    True_499843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 38), 'True', False)
    keyword_499844 = True_499843
    kwargs_499845 = {'mu': keyword_499844}
    # Getting the type of 'roots_laguerre' (line 636)
    roots_laguerre_499841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 16), 'roots_laguerre', False)
    # Calling roots_laguerre(args, kwargs) (line 636)
    roots_laguerre_call_result_499846 = invoke(stypy.reporting.localization.Localization(__file__, 636, 16), roots_laguerre_499841, *[n1_499842], **kwargs_499845)
    
    # Obtaining the member '__getitem__' of a type (line 636)
    getitem___499847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 636, 4), roots_laguerre_call_result_499846, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 636)
    subscript_call_result_499848 = invoke(stypy.reporting.localization.Localization(__file__, 636, 4), getitem___499847, int_499840)
    
    # Assigning a type to the variable 'tuple_var_assignment_498409' (line 636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 636, 4), 'tuple_var_assignment_498409', subscript_call_result_499848)
    
    # Assigning a Name to a Name (line 636):
    # Getting the type of 'tuple_var_assignment_498407' (line 636)
    tuple_var_assignment_498407_499849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 4), 'tuple_var_assignment_498407')
    # Assigning a type to the variable 'x' (line 636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 636, 4), 'x', tuple_var_assignment_498407_499849)
    
    # Assigning a Name to a Name (line 636):
    # Getting the type of 'tuple_var_assignment_498408' (line 636)
    tuple_var_assignment_498408_499850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 4), 'tuple_var_assignment_498408')
    # Assigning a type to the variable 'w' (line 636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 636, 7), 'w', tuple_var_assignment_498408_499850)
    
    # Assigning a Name to a Name (line 636):
    # Getting the type of 'tuple_var_assignment_498409' (line 636)
    tuple_var_assignment_498409_499851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 4), 'tuple_var_assignment_498409')
    # Assigning a type to the variable 'mu0' (line 636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 636, 10), 'mu0', tuple_var_assignment_498409_499851)
    
    
    # Getting the type of 'n' (line 637)
    n_499852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 7), 'n')
    int_499853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, 12), 'int')
    # Applying the binary operator '==' (line 637)
    result_eq_499854 = python_operator(stypy.reporting.localization.Localization(__file__, 637, 7), '==', n_499852, int_499853)
    
    # Testing the type of an if condition (line 637)
    if_condition_499855 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 637, 4), result_eq_499854)
    # Assigning a type to the variable 'if_condition_499855' (line 637)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 637, 4), 'if_condition_499855', if_condition_499855)
    # SSA begins for if statement (line 637)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 638):
    
    # Assigning a List to a Name (line 638):
    
    # Obtaining an instance of the builtin type 'list' (line 638)
    list_499856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 638, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 638)
    
    # Assigning a type to the variable 'tuple_assignment_498410' (line 638)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 638, 8), 'tuple_assignment_498410', list_499856)
    
    # Assigning a List to a Name (line 638):
    
    # Obtaining an instance of the builtin type 'list' (line 638)
    list_499857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 638, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 638)
    
    # Assigning a type to the variable 'tuple_assignment_498411' (line 638)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 638, 8), 'tuple_assignment_498411', list_499857)
    
    # Assigning a Name to a Name (line 638):
    # Getting the type of 'tuple_assignment_498410' (line 638)
    tuple_assignment_498410_499858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 8), 'tuple_assignment_498410')
    # Assigning a type to the variable 'x' (line 638)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 638, 8), 'x', tuple_assignment_498410_499858)
    
    # Assigning a Name to a Name (line 638):
    # Getting the type of 'tuple_assignment_498411' (line 638)
    tuple_assignment_498411_499859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 8), 'tuple_assignment_498411')
    # Assigning a type to the variable 'w' (line 638)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 638, 11), 'w', tuple_assignment_498411_499859)
    # SSA join for if statement (line 637)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 639):
    
    # Assigning a Num to a Name (line 639):
    float_499860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 9), 'float')
    # Assigning a type to the variable 'hn' (line 639)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 639, 4), 'hn', float_499860)
    
    # Assigning a BinOp to a Name (line 640):
    
    # Assigning a BinOp to a Name (line 640):
    int_499861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 10), 'int')
    # Getting the type of 'n' (line 640)
    n_499862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 15), 'n')
    # Applying the binary operator '**' (line 640)
    result_pow_499863 = python_operator(stypy.reporting.localization.Localization(__file__, 640, 9), '**', int_499861, n_499862)
    
    
    # Call to _gam(...): (line 640)
    # Processing the call arguments (line 640)
    # Getting the type of 'n' (line 640)
    n_499865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 24), 'n', False)
    int_499866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 28), 'int')
    # Applying the binary operator '+' (line 640)
    result_add_499867 = python_operator(stypy.reporting.localization.Localization(__file__, 640, 24), '+', n_499865, int_499866)
    
    # Processing the call keyword arguments (line 640)
    kwargs_499868 = {}
    # Getting the type of '_gam' (line 640)
    _gam_499864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 19), '_gam', False)
    # Calling _gam(args, kwargs) (line 640)
    _gam_call_result_499869 = invoke(stypy.reporting.localization.Localization(__file__, 640, 19), _gam_499864, *[result_add_499867], **kwargs_499868)
    
    # Applying the binary operator 'div' (line 640)
    result_div_499870 = python_operator(stypy.reporting.localization.Localization(__file__, 640, 9), 'div', result_pow_499863, _gam_call_result_499869)
    
    # Assigning a type to the variable 'kn' (line 640)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 640, 4), 'kn', result_div_499870)
    
    # Assigning a Call to a Name (line 641):
    
    # Assigning a Call to a Name (line 641):
    
    # Call to orthopoly1d(...): (line 641)
    # Processing the call arguments (line 641)
    # Getting the type of 'x' (line 641)
    x_499872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 20), 'x', False)
    # Getting the type of 'w' (line 641)
    w_499873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 23), 'w', False)
    # Getting the type of 'hn' (line 641)
    hn_499874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 26), 'hn', False)
    # Getting the type of 'kn' (line 641)
    kn_499875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 30), 'kn', False)

    @norecursion
    def _stypy_temp_lambda_261(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_261'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_261', 641, 34, True)
        # Passed parameters checking function
        _stypy_temp_lambda_261.stypy_localization = localization
        _stypy_temp_lambda_261.stypy_type_of_self = None
        _stypy_temp_lambda_261.stypy_type_store = module_type_store
        _stypy_temp_lambda_261.stypy_function_name = '_stypy_temp_lambda_261'
        _stypy_temp_lambda_261.stypy_param_names_list = ['x']
        _stypy_temp_lambda_261.stypy_varargs_param_name = None
        _stypy_temp_lambda_261.stypy_kwargs_param_name = None
        _stypy_temp_lambda_261.stypy_call_defaults = defaults
        _stypy_temp_lambda_261.stypy_call_varargs = varargs
        _stypy_temp_lambda_261.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_261', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_261', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to exp(...): (line 641)
        # Processing the call arguments (line 641)
        
        # Getting the type of 'x' (line 641)
        x_499877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 49), 'x', False)
        # Applying the 'usub' unary operator (line 641)
        result___neg___499878 = python_operator(stypy.reporting.localization.Localization(__file__, 641, 48), 'usub', x_499877)
        
        # Processing the call keyword arguments (line 641)
        kwargs_499879 = {}
        # Getting the type of 'exp' (line 641)
        exp_499876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 44), 'exp', False)
        # Calling exp(args, kwargs) (line 641)
        exp_call_result_499880 = invoke(stypy.reporting.localization.Localization(__file__, 641, 44), exp_499876, *[result___neg___499878], **kwargs_499879)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 641)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 641, 34), 'stypy_return_type', exp_call_result_499880)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_261' in the type store
        # Getting the type of 'stypy_return_type' (line 641)
        stypy_return_type_499881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 34), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_499881)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_261'
        return stypy_return_type_499881

    # Assigning a type to the variable '_stypy_temp_lambda_261' (line 641)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 641, 34), '_stypy_temp_lambda_261', _stypy_temp_lambda_261)
    # Getting the type of '_stypy_temp_lambda_261' (line 641)
    _stypy_temp_lambda_261_499882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 34), '_stypy_temp_lambda_261')
    
    # Obtaining an instance of the builtin type 'tuple' (line 641)
    tuple_499883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 641, 54), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 641)
    # Adding element type (line 641)
    int_499884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 641, 54), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 641, 54), tuple_499883, int_499884)
    # Adding element type (line 641)
    # Getting the type of 'inf' (line 641)
    inf_499885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 57), 'inf', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 641, 54), tuple_499883, inf_499885)
    
    # Getting the type of 'monic' (line 641)
    monic_499886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 63), 'monic', False)

    @norecursion
    def _stypy_temp_lambda_262(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_262'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_262', 642, 20, True)
        # Passed parameters checking function
        _stypy_temp_lambda_262.stypy_localization = localization
        _stypy_temp_lambda_262.stypy_type_of_self = None
        _stypy_temp_lambda_262.stypy_type_store = module_type_store
        _stypy_temp_lambda_262.stypy_function_name = '_stypy_temp_lambda_262'
        _stypy_temp_lambda_262.stypy_param_names_list = ['x']
        _stypy_temp_lambda_262.stypy_varargs_param_name = None
        _stypy_temp_lambda_262.stypy_kwargs_param_name = None
        _stypy_temp_lambda_262.stypy_call_defaults = defaults
        _stypy_temp_lambda_262.stypy_call_varargs = varargs
        _stypy_temp_lambda_262.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_262', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_262', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to eval_laguerre(...): (line 642)
        # Processing the call arguments (line 642)
        # Getting the type of 'n' (line 642)
        n_499888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 44), 'n', False)
        # Getting the type of 'x' (line 642)
        x_499889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 47), 'x', False)
        # Processing the call keyword arguments (line 642)
        kwargs_499890 = {}
        # Getting the type of 'eval_laguerre' (line 642)
        eval_laguerre_499887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 30), 'eval_laguerre', False)
        # Calling eval_laguerre(args, kwargs) (line 642)
        eval_laguerre_call_result_499891 = invoke(stypy.reporting.localization.Localization(__file__, 642, 30), eval_laguerre_499887, *[n_499888, x_499889], **kwargs_499890)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 642)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 642, 20), 'stypy_return_type', eval_laguerre_call_result_499891)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_262' in the type store
        # Getting the type of 'stypy_return_type' (line 642)
        stypy_return_type_499892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 20), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_499892)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_262'
        return stypy_return_type_499892

    # Assigning a type to the variable '_stypy_temp_lambda_262' (line 642)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 642, 20), '_stypy_temp_lambda_262', _stypy_temp_lambda_262)
    # Getting the type of '_stypy_temp_lambda_262' (line 642)
    _stypy_temp_lambda_262_499893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 20), '_stypy_temp_lambda_262')
    # Processing the call keyword arguments (line 641)
    kwargs_499894 = {}
    # Getting the type of 'orthopoly1d' (line 641)
    orthopoly1d_499871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 8), 'orthopoly1d', False)
    # Calling orthopoly1d(args, kwargs) (line 641)
    orthopoly1d_call_result_499895 = invoke(stypy.reporting.localization.Localization(__file__, 641, 8), orthopoly1d_499871, *[x_499872, w_499873, hn_499874, kn_499875, _stypy_temp_lambda_261_499882, tuple_499883, monic_499886, _stypy_temp_lambda_262_499893], **kwargs_499894)
    
    # Assigning a type to the variable 'p' (line 641)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 641, 4), 'p', orthopoly1d_call_result_499895)
    # Getting the type of 'p' (line 643)
    p_499896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 11), 'p')
    # Assigning a type to the variable 'stypy_return_type' (line 643)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 643, 4), 'stypy_return_type', p_499896)
    
    # ################# End of 'laguerre(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'laguerre' in the type store
    # Getting the type of 'stypy_return_type' (line 600)
    stypy_return_type_499897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_499897)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'laguerre'
    return stypy_return_type_499897

# Assigning a type to the variable 'laguerre' (line 600)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 600, 0), 'laguerre', laguerre)

@norecursion
def roots_hermite(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 648)
    False_499898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 24), 'False')
    defaults = [False_499898]
    # Create a new context for function 'roots_hermite'
    module_type_store = module_type_store.open_function_context('roots_hermite', 648, 0, False)
    
    # Passed parameters checking function
    roots_hermite.stypy_localization = localization
    roots_hermite.stypy_type_of_self = None
    roots_hermite.stypy_type_store = module_type_store
    roots_hermite.stypy_function_name = 'roots_hermite'
    roots_hermite.stypy_param_names_list = ['n', 'mu']
    roots_hermite.stypy_varargs_param_name = None
    roots_hermite.stypy_kwargs_param_name = None
    roots_hermite.stypy_call_defaults = defaults
    roots_hermite.stypy_call_varargs = varargs
    roots_hermite.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'roots_hermite', ['n', 'mu'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'roots_hermite', localization, ['n', 'mu'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'roots_hermite(...)' code ##################

    str_499899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 705, (-1)), 'str', "Gauss-Hermite (physicst's) quadrature.\n\n    Computes the sample points and weights for Gauss-Hermite quadrature.\n    The sample points are the roots of the n-th degree Hermite polynomial,\n    :math:`H_n(x)`.  These sample points and weights correctly integrate\n    polynomials of degree :math:`2n - 1` or less over the interval\n    :math:`[-\\infty, \\infty]` with weight function :math:`f(x) = e^{-x^2}`.\n\n    Parameters\n    ----------\n    n : int\n        quadrature order\n    mu : bool, optional\n        If True, return the sum of the weights, optional.\n\n    Returns\n    -------\n    x : ndarray\n        Sample points\n    w : ndarray\n        Weights\n    mu : float\n        Sum of the weights\n\n    Notes\n    -----\n    For small n up to 150 a modified version of the Golub-Welsch\n    algorithm is used. Nodes are computed from the eigenvalue\n    problem and improved by one step of a Newton iteration.\n    The weights are computed from the well-known analytical formula.\n\n    For n larger than 150 an optimal asymptotic algorithm is applied\n    which computes nodes and weights in a numerically stable manner.\n    The algorithm has linear runtime making computation for very\n    large n (several thousand or more) feasible.\n\n    See Also\n    --------\n    scipy.integrate.quadrature\n    scipy.integrate.fixed_quad\n    numpy.polynomial.hermite.hermgauss\n    roots_hermitenorm\n\n    References\n    ----------\n    .. [townsend.trogdon.olver-2014]\n       Townsend, A. and Trogdon, T. and Olver, S. (2014)\n       *Fast computation of Gauss quadrature nodes and\n       weights on the whole real line*. :arXiv:`1410.5286`.\n\n    .. [townsend.trogdon.olver-2015]\n       Townsend, A. and Trogdon, T. and Olver, S. (2015)\n       *Fast computation of Gauss quadrature nodes and\n       weights on the whole real line*.\n       IMA Journal of Numerical Analysis\n       :doi:`10.1093/imanum/drv002`.\n    ")
    
    # Assigning a Call to a Name (line 706):
    
    # Assigning a Call to a Name (line 706):
    
    # Call to int(...): (line 706)
    # Processing the call arguments (line 706)
    # Getting the type of 'n' (line 706)
    n_499901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 12), 'n', False)
    # Processing the call keyword arguments (line 706)
    kwargs_499902 = {}
    # Getting the type of 'int' (line 706)
    int_499900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 8), 'int', False)
    # Calling int(args, kwargs) (line 706)
    int_call_result_499903 = invoke(stypy.reporting.localization.Localization(__file__, 706, 8), int_499900, *[n_499901], **kwargs_499902)
    
    # Assigning a type to the variable 'm' (line 706)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 706, 4), 'm', int_call_result_499903)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'n' (line 707)
    n_499904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 7), 'n')
    int_499905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 707, 11), 'int')
    # Applying the binary operator '<' (line 707)
    result_lt_499906 = python_operator(stypy.reporting.localization.Localization(__file__, 707, 7), '<', n_499904, int_499905)
    
    
    # Getting the type of 'n' (line 707)
    n_499907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 16), 'n')
    # Getting the type of 'm' (line 707)
    m_499908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 21), 'm')
    # Applying the binary operator '!=' (line 707)
    result_ne_499909 = python_operator(stypy.reporting.localization.Localization(__file__, 707, 16), '!=', n_499907, m_499908)
    
    # Applying the binary operator 'or' (line 707)
    result_or_keyword_499910 = python_operator(stypy.reporting.localization.Localization(__file__, 707, 7), 'or', result_lt_499906, result_ne_499909)
    
    # Testing the type of an if condition (line 707)
    if_condition_499911 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 707, 4), result_or_keyword_499910)
    # Assigning a type to the variable 'if_condition_499911' (line 707)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 707, 4), 'if_condition_499911', if_condition_499911)
    # SSA begins for if statement (line 707)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 708)
    # Processing the call arguments (line 708)
    str_499913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 25), 'str', 'n must be a positive integer.')
    # Processing the call keyword arguments (line 708)
    kwargs_499914 = {}
    # Getting the type of 'ValueError' (line 708)
    ValueError_499912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 708)
    ValueError_call_result_499915 = invoke(stypy.reporting.localization.Localization(__file__, 708, 14), ValueError_499912, *[str_499913], **kwargs_499914)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 708, 8), ValueError_call_result_499915, 'raise parameter', BaseException)
    # SSA join for if statement (line 707)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 710):
    
    # Assigning a Call to a Name (line 710):
    
    # Call to sqrt(...): (line 710)
    # Processing the call arguments (line 710)
    # Getting the type of 'np' (line 710)
    np_499918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 18), 'np', False)
    # Obtaining the member 'pi' of a type (line 710)
    pi_499919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 710, 18), np_499918, 'pi')
    # Processing the call keyword arguments (line 710)
    kwargs_499920 = {}
    # Getting the type of 'np' (line 710)
    np_499916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 10), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 710)
    sqrt_499917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 710, 10), np_499916, 'sqrt')
    # Calling sqrt(args, kwargs) (line 710)
    sqrt_call_result_499921 = invoke(stypy.reporting.localization.Localization(__file__, 710, 10), sqrt_499917, *[pi_499919], **kwargs_499920)
    
    # Assigning a type to the variable 'mu0' (line 710)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 710, 4), 'mu0', sqrt_call_result_499921)
    
    
    # Getting the type of 'n' (line 711)
    n_499922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 7), 'n')
    int_499923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 12), 'int')
    # Applying the binary operator '<=' (line 711)
    result_le_499924 = python_operator(stypy.reporting.localization.Localization(__file__, 711, 7), '<=', n_499922, int_499923)
    
    # Testing the type of an if condition (line 711)
    if_condition_499925 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 711, 4), result_le_499924)
    # Assigning a type to the variable 'if_condition_499925' (line 711)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 711, 4), 'if_condition_499925', if_condition_499925)
    # SSA begins for if statement (line 711)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Lambda to a Name (line 712):
    
    # Assigning a Lambda to a Name (line 712):

    @norecursion
    def _stypy_temp_lambda_263(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_263'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_263', 712, 18, True)
        # Passed parameters checking function
        _stypy_temp_lambda_263.stypy_localization = localization
        _stypy_temp_lambda_263.stypy_type_of_self = None
        _stypy_temp_lambda_263.stypy_type_store = module_type_store
        _stypy_temp_lambda_263.stypy_function_name = '_stypy_temp_lambda_263'
        _stypy_temp_lambda_263.stypy_param_names_list = ['k']
        _stypy_temp_lambda_263.stypy_varargs_param_name = None
        _stypy_temp_lambda_263.stypy_kwargs_param_name = None
        _stypy_temp_lambda_263.stypy_call_defaults = defaults
        _stypy_temp_lambda_263.stypy_call_varargs = varargs
        _stypy_temp_lambda_263.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_263', ['k'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_263', ['k'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        float_499926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 712, 28), 'float')
        # Getting the type of 'k' (line 712)
        k_499927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 32), 'k')
        # Applying the binary operator '*' (line 712)
        result_mul_499928 = python_operator(stypy.reporting.localization.Localization(__file__, 712, 28), '*', float_499926, k_499927)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 712)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 712, 18), 'stypy_return_type', result_mul_499928)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_263' in the type store
        # Getting the type of 'stypy_return_type' (line 712)
        stypy_return_type_499929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 18), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_499929)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_263'
        return stypy_return_type_499929

    # Assigning a type to the variable '_stypy_temp_lambda_263' (line 712)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 712, 18), '_stypy_temp_lambda_263', _stypy_temp_lambda_263)
    # Getting the type of '_stypy_temp_lambda_263' (line 712)
    _stypy_temp_lambda_263_499930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 18), '_stypy_temp_lambda_263')
    # Assigning a type to the variable 'an_func' (line 712)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 712, 8), 'an_func', _stypy_temp_lambda_263_499930)
    
    # Assigning a Lambda to a Name (line 713):
    
    # Assigning a Lambda to a Name (line 713):

    @norecursion
    def _stypy_temp_lambda_264(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_264'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_264', 713, 18, True)
        # Passed parameters checking function
        _stypy_temp_lambda_264.stypy_localization = localization
        _stypy_temp_lambda_264.stypy_type_of_self = None
        _stypy_temp_lambda_264.stypy_type_store = module_type_store
        _stypy_temp_lambda_264.stypy_function_name = '_stypy_temp_lambda_264'
        _stypy_temp_lambda_264.stypy_param_names_list = ['k']
        _stypy_temp_lambda_264.stypy_varargs_param_name = None
        _stypy_temp_lambda_264.stypy_kwargs_param_name = None
        _stypy_temp_lambda_264.stypy_call_defaults = defaults
        _stypy_temp_lambda_264.stypy_call_varargs = varargs
        _stypy_temp_lambda_264.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_264', ['k'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_264', ['k'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to sqrt(...): (line 713)
        # Processing the call arguments (line 713)
        # Getting the type of 'k' (line 713)
        k_499933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 36), 'k', False)
        float_499934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 713, 38), 'float')
        # Applying the binary operator 'div' (line 713)
        result_div_499935 = python_operator(stypy.reporting.localization.Localization(__file__, 713, 36), 'div', k_499933, float_499934)
        
        # Processing the call keyword arguments (line 713)
        kwargs_499936 = {}
        # Getting the type of 'np' (line 713)
        np_499931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 28), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 713)
        sqrt_499932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 28), np_499931, 'sqrt')
        # Calling sqrt(args, kwargs) (line 713)
        sqrt_call_result_499937 = invoke(stypy.reporting.localization.Localization(__file__, 713, 28), sqrt_499932, *[result_div_499935], **kwargs_499936)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 18), 'stypy_return_type', sqrt_call_result_499937)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_264' in the type store
        # Getting the type of 'stypy_return_type' (line 713)
        stypy_return_type_499938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 18), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_499938)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_264'
        return stypy_return_type_499938

    # Assigning a type to the variable '_stypy_temp_lambda_264' (line 713)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 18), '_stypy_temp_lambda_264', _stypy_temp_lambda_264)
    # Getting the type of '_stypy_temp_lambda_264' (line 713)
    _stypy_temp_lambda_264_499939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 18), '_stypy_temp_lambda_264')
    # Assigning a type to the variable 'bn_func' (line 713)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 8), 'bn_func', _stypy_temp_lambda_264_499939)
    
    # Assigning a Attribute to a Name (line 714):
    
    # Assigning a Attribute to a Name (line 714):
    # Getting the type of 'cephes' (line 714)
    cephes_499940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 12), 'cephes')
    # Obtaining the member 'eval_hermite' of a type (line 714)
    eval_hermite_499941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 714, 12), cephes_499940, 'eval_hermite')
    # Assigning a type to the variable 'f' (line 714)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 714, 8), 'f', eval_hermite_499941)
    
    # Assigning a Lambda to a Name (line 715):
    
    # Assigning a Lambda to a Name (line 715):

    @norecursion
    def _stypy_temp_lambda_265(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_265'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_265', 715, 13, True)
        # Passed parameters checking function
        _stypy_temp_lambda_265.stypy_localization = localization
        _stypy_temp_lambda_265.stypy_type_of_self = None
        _stypy_temp_lambda_265.stypy_type_store = module_type_store
        _stypy_temp_lambda_265.stypy_function_name = '_stypy_temp_lambda_265'
        _stypy_temp_lambda_265.stypy_param_names_list = ['n', 'x']
        _stypy_temp_lambda_265.stypy_varargs_param_name = None
        _stypy_temp_lambda_265.stypy_kwargs_param_name = None
        _stypy_temp_lambda_265.stypy_call_defaults = defaults
        _stypy_temp_lambda_265.stypy_call_varargs = varargs
        _stypy_temp_lambda_265.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_265', ['n', 'x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_265', ['n', 'x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        float_499942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 715, 26), 'float')
        # Getting the type of 'n' (line 715)
        n_499943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 32), 'n')
        # Applying the binary operator '*' (line 715)
        result_mul_499944 = python_operator(stypy.reporting.localization.Localization(__file__, 715, 26), '*', float_499942, n_499943)
        
        
        # Call to eval_hermite(...): (line 715)
        # Processing the call arguments (line 715)
        # Getting the type of 'n' (line 715)
        n_499947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 56), 'n', False)
        int_499948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 715, 58), 'int')
        # Applying the binary operator '-' (line 715)
        result_sub_499949 = python_operator(stypy.reporting.localization.Localization(__file__, 715, 56), '-', n_499947, int_499948)
        
        # Getting the type of 'x' (line 715)
        x_499950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 61), 'x', False)
        # Processing the call keyword arguments (line 715)
        kwargs_499951 = {}
        # Getting the type of 'cephes' (line 715)
        cephes_499945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 36), 'cephes', False)
        # Obtaining the member 'eval_hermite' of a type (line 715)
        eval_hermite_499946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 715, 36), cephes_499945, 'eval_hermite')
        # Calling eval_hermite(args, kwargs) (line 715)
        eval_hermite_call_result_499952 = invoke(stypy.reporting.localization.Localization(__file__, 715, 36), eval_hermite_499946, *[result_sub_499949, x_499950], **kwargs_499951)
        
        # Applying the binary operator '*' (line 715)
        result_mul_499953 = python_operator(stypy.reporting.localization.Localization(__file__, 715, 34), '*', result_mul_499944, eval_hermite_call_result_499952)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 715)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 715, 13), 'stypy_return_type', result_mul_499953)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_265' in the type store
        # Getting the type of 'stypy_return_type' (line 715)
        stypy_return_type_499954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 13), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_499954)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_265'
        return stypy_return_type_499954

    # Assigning a type to the variable '_stypy_temp_lambda_265' (line 715)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 715, 13), '_stypy_temp_lambda_265', _stypy_temp_lambda_265)
    # Getting the type of '_stypy_temp_lambda_265' (line 715)
    _stypy_temp_lambda_265_499955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 13), '_stypy_temp_lambda_265')
    # Assigning a type to the variable 'df' (line 715)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 715, 8), 'df', _stypy_temp_lambda_265_499955)
    
    # Call to _gen_roots_and_weights(...): (line 716)
    # Processing the call arguments (line 716)
    # Getting the type of 'm' (line 716)
    m_499957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 38), 'm', False)
    # Getting the type of 'mu0' (line 716)
    mu0_499958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 41), 'mu0', False)
    # Getting the type of 'an_func' (line 716)
    an_func_499959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 46), 'an_func', False)
    # Getting the type of 'bn_func' (line 716)
    bn_func_499960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 55), 'bn_func', False)
    # Getting the type of 'f' (line 716)
    f_499961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 64), 'f', False)
    # Getting the type of 'df' (line 716)
    df_499962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 67), 'df', False)
    # Getting the type of 'True' (line 716)
    True_499963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 71), 'True', False)
    # Getting the type of 'mu' (line 716)
    mu_499964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 77), 'mu', False)
    # Processing the call keyword arguments (line 716)
    kwargs_499965 = {}
    # Getting the type of '_gen_roots_and_weights' (line 716)
    _gen_roots_and_weights_499956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 15), '_gen_roots_and_weights', False)
    # Calling _gen_roots_and_weights(args, kwargs) (line 716)
    _gen_roots_and_weights_call_result_499966 = invoke(stypy.reporting.localization.Localization(__file__, 716, 15), _gen_roots_and_weights_499956, *[m_499957, mu0_499958, an_func_499959, bn_func_499960, f_499961, df_499962, True_499963, mu_499964], **kwargs_499965)
    
    # Assigning a type to the variable 'stypy_return_type' (line 716)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 716, 8), 'stypy_return_type', _gen_roots_and_weights_call_result_499966)
    # SSA branch for the else part of an if statement (line 711)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Tuple (line 718):
    
    # Assigning a Subscript to a Name (line 718):
    
    # Obtaining the type of the subscript
    int_499967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 718, 8), 'int')
    
    # Call to _roots_hermite_asy(...): (line 718)
    # Processing the call arguments (line 718)
    # Getting the type of 'm' (line 718)
    m_499969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 44), 'm', False)
    # Processing the call keyword arguments (line 718)
    kwargs_499970 = {}
    # Getting the type of '_roots_hermite_asy' (line 718)
    _roots_hermite_asy_499968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 25), '_roots_hermite_asy', False)
    # Calling _roots_hermite_asy(args, kwargs) (line 718)
    _roots_hermite_asy_call_result_499971 = invoke(stypy.reporting.localization.Localization(__file__, 718, 25), _roots_hermite_asy_499968, *[m_499969], **kwargs_499970)
    
    # Obtaining the member '__getitem__' of a type (line 718)
    getitem___499972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 718, 8), _roots_hermite_asy_call_result_499971, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 718)
    subscript_call_result_499973 = invoke(stypy.reporting.localization.Localization(__file__, 718, 8), getitem___499972, int_499967)
    
    # Assigning a type to the variable 'tuple_var_assignment_498412' (line 718)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 718, 8), 'tuple_var_assignment_498412', subscript_call_result_499973)
    
    # Assigning a Subscript to a Name (line 718):
    
    # Obtaining the type of the subscript
    int_499974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 718, 8), 'int')
    
    # Call to _roots_hermite_asy(...): (line 718)
    # Processing the call arguments (line 718)
    # Getting the type of 'm' (line 718)
    m_499976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 44), 'm', False)
    # Processing the call keyword arguments (line 718)
    kwargs_499977 = {}
    # Getting the type of '_roots_hermite_asy' (line 718)
    _roots_hermite_asy_499975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 25), '_roots_hermite_asy', False)
    # Calling _roots_hermite_asy(args, kwargs) (line 718)
    _roots_hermite_asy_call_result_499978 = invoke(stypy.reporting.localization.Localization(__file__, 718, 25), _roots_hermite_asy_499975, *[m_499976], **kwargs_499977)
    
    # Obtaining the member '__getitem__' of a type (line 718)
    getitem___499979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 718, 8), _roots_hermite_asy_call_result_499978, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 718)
    subscript_call_result_499980 = invoke(stypy.reporting.localization.Localization(__file__, 718, 8), getitem___499979, int_499974)
    
    # Assigning a type to the variable 'tuple_var_assignment_498413' (line 718)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 718, 8), 'tuple_var_assignment_498413', subscript_call_result_499980)
    
    # Assigning a Name to a Name (line 718):
    # Getting the type of 'tuple_var_assignment_498412' (line 718)
    tuple_var_assignment_498412_499981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 8), 'tuple_var_assignment_498412')
    # Assigning a type to the variable 'nodes' (line 718)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 718, 8), 'nodes', tuple_var_assignment_498412_499981)
    
    # Assigning a Name to a Name (line 718):
    # Getting the type of 'tuple_var_assignment_498413' (line 718)
    tuple_var_assignment_498413_499982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 8), 'tuple_var_assignment_498413')
    # Assigning a type to the variable 'weights' (line 718)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 718, 15), 'weights', tuple_var_assignment_498413_499982)
    
    # Getting the type of 'mu' (line 719)
    mu_499983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 11), 'mu')
    # Testing the type of an if condition (line 719)
    if_condition_499984 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 719, 8), mu_499983)
    # Assigning a type to the variable 'if_condition_499984' (line 719)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'if_condition_499984', if_condition_499984)
    # SSA begins for if statement (line 719)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 720)
    tuple_499985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 720, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 720)
    # Adding element type (line 720)
    # Getting the type of 'nodes' (line 720)
    nodes_499986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 19), 'nodes')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 720, 19), tuple_499985, nodes_499986)
    # Adding element type (line 720)
    # Getting the type of 'weights' (line 720)
    weights_499987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 26), 'weights')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 720, 19), tuple_499985, weights_499987)
    # Adding element type (line 720)
    # Getting the type of 'mu0' (line 720)
    mu0_499988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 35), 'mu0')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 720, 19), tuple_499985, mu0_499988)
    
    # Assigning a type to the variable 'stypy_return_type' (line 720)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 720, 12), 'stypy_return_type', tuple_499985)
    # SSA branch for the else part of an if statement (line 719)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining an instance of the builtin type 'tuple' (line 722)
    tuple_499989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 722, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 722)
    # Adding element type (line 722)
    # Getting the type of 'nodes' (line 722)
    nodes_499990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 19), 'nodes')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 722, 19), tuple_499989, nodes_499990)
    # Adding element type (line 722)
    # Getting the type of 'weights' (line 722)
    weights_499991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 26), 'weights')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 722, 19), tuple_499989, weights_499991)
    
    # Assigning a type to the variable 'stypy_return_type' (line 722)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 722, 12), 'stypy_return_type', tuple_499989)
    # SSA join for if statement (line 719)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 711)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'roots_hermite(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'roots_hermite' in the type store
    # Getting the type of 'stypy_return_type' (line 648)
    stypy_return_type_499992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_499992)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'roots_hermite'
    return stypy_return_type_499992

# Assigning a type to the variable 'roots_hermite' (line 648)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 0), 'roots_hermite', roots_hermite)

@norecursion
def _compute_tauk(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_499993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 725, 30), 'int')
    defaults = [int_499993]
    # Create a new context for function '_compute_tauk'
    module_type_store = module_type_store.open_function_context('_compute_tauk', 725, 0, False)
    
    # Passed parameters checking function
    _compute_tauk.stypy_localization = localization
    _compute_tauk.stypy_type_of_self = None
    _compute_tauk.stypy_type_store = module_type_store
    _compute_tauk.stypy_function_name = '_compute_tauk'
    _compute_tauk.stypy_param_names_list = ['n', 'k', 'maxit']
    _compute_tauk.stypy_varargs_param_name = None
    _compute_tauk.stypy_kwargs_param_name = None
    _compute_tauk.stypy_call_defaults = defaults
    _compute_tauk.stypy_call_varargs = varargs
    _compute_tauk.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_compute_tauk', ['n', 'k', 'maxit'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_compute_tauk', localization, ['n', 'k', 'maxit'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_compute_tauk(...)' code ##################

    str_499994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 750, (-1)), 'str', 'Helper function for Tricomi initial guesses\n\n    For details, see formula 3.1 in lemma 3.1 in the\n    original paper.\n\n    Parameters\n    ----------\n    n : int\n        Quadrature order\n    k : ndarray of type int\n        Index of roots :math:`\tau_k` to compute\n    maxit : int\n        Number of Newton maxit performed, the default\n        value of 5 is sufficient.\n\n    Returns\n    -------\n    tauk : ndarray\n        Roots of equation 3.1\n\n    See Also\n    --------\n    initial_nodes_a\n    roots_hermite_asy\n    ')
    
    # Assigning a BinOp to a Name (line 751):
    
    # Assigning a BinOp to a Name (line 751):
    # Getting the type of 'n' (line 751)
    n_499995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'n')
    int_499996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 12), 'int')
    # Applying the binary operator '%' (line 751)
    result_mod_499997 = python_operator(stypy.reporting.localization.Localization(__file__, 751, 8), '%', n_499995, int_499996)
    
    float_499998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 16), 'float')
    # Applying the binary operator '-' (line 751)
    result_sub_499999 = python_operator(stypy.reporting.localization.Localization(__file__, 751, 8), '-', result_mod_499997, float_499998)
    
    # Assigning a type to the variable 'a' (line 751)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 4), 'a', result_sub_499999)
    
    # Assigning a BinOp to a Name (line 752):
    
    # Assigning a BinOp to a Name (line 752):
    float_500000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 752, 9), 'float')
    
    # Call to floor(...): (line 752)
    # Processing the call arguments (line 752)
    # Getting the type of 'n' (line 752)
    n_500002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 19), 'n', False)
    float_500003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 752, 21), 'float')
    # Applying the binary operator 'div' (line 752)
    result_div_500004 = python_operator(stypy.reporting.localization.Localization(__file__, 752, 19), 'div', n_500002, float_500003)
    
    # Processing the call keyword arguments (line 752)
    kwargs_500005 = {}
    # Getting the type of 'floor' (line 752)
    floor_500001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 13), 'floor', False)
    # Calling floor(args, kwargs) (line 752)
    floor_call_result_500006 = invoke(stypy.reporting.localization.Localization(__file__, 752, 13), floor_500001, *[result_div_500004], **kwargs_500005)
    
    # Applying the binary operator '*' (line 752)
    result_mul_500007 = python_operator(stypy.reporting.localization.Localization(__file__, 752, 9), '*', float_500000, floor_call_result_500006)
    
    float_500008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 752, 28), 'float')
    # Getting the type of 'k' (line 752)
    k_500009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 32), 'k')
    # Applying the binary operator '*' (line 752)
    result_mul_500010 = python_operator(stypy.reporting.localization.Localization(__file__, 752, 28), '*', float_500008, k_500009)
    
    # Applying the binary operator '-' (line 752)
    result_sub_500011 = python_operator(stypy.reporting.localization.Localization(__file__, 752, 9), '-', result_mul_500007, result_mul_500010)
    
    float_500012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 752, 36), 'float')
    # Applying the binary operator '+' (line 752)
    result_add_500013 = python_operator(stypy.reporting.localization.Localization(__file__, 752, 34), '+', result_sub_500011, float_500012)
    
    # Getting the type of 'pi' (line 752)
    pi_500014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 41), 'pi')
    # Applying the binary operator '*' (line 752)
    result_mul_500015 = python_operator(stypy.reporting.localization.Localization(__file__, 752, 8), '*', result_add_500013, pi_500014)
    
    float_500016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 752, 47), 'float')
    
    # Call to floor(...): (line 752)
    # Processing the call arguments (line 752)
    # Getting the type of 'n' (line 752)
    n_500018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 57), 'n', False)
    float_500019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 752, 59), 'float')
    # Applying the binary operator 'div' (line 752)
    result_div_500020 = python_operator(stypy.reporting.localization.Localization(__file__, 752, 57), 'div', n_500018, float_500019)
    
    # Processing the call keyword arguments (line 752)
    kwargs_500021 = {}
    # Getting the type of 'floor' (line 752)
    floor_500017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 51), 'floor', False)
    # Calling floor(args, kwargs) (line 752)
    floor_call_result_500022 = invoke(stypy.reporting.localization.Localization(__file__, 752, 51), floor_500017, *[result_div_500020], **kwargs_500021)
    
    # Applying the binary operator '*' (line 752)
    result_mul_500023 = python_operator(stypy.reporting.localization.Localization(__file__, 752, 47), '*', float_500016, floor_call_result_500022)
    
    float_500024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 752, 66), 'float')
    # Getting the type of 'a' (line 752)
    a_500025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 70), 'a')
    # Applying the binary operator '*' (line 752)
    result_mul_500026 = python_operator(stypy.reporting.localization.Localization(__file__, 752, 66), '*', float_500024, a_500025)
    
    # Applying the binary operator '+' (line 752)
    result_add_500027 = python_operator(stypy.reporting.localization.Localization(__file__, 752, 47), '+', result_mul_500023, result_mul_500026)
    
    float_500028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 752, 74), 'float')
    # Applying the binary operator '+' (line 752)
    result_add_500029 = python_operator(stypy.reporting.localization.Localization(__file__, 752, 72), '+', result_add_500027, float_500028)
    
    # Applying the binary operator 'div' (line 752)
    result_div_500030 = python_operator(stypy.reporting.localization.Localization(__file__, 752, 44), 'div', result_mul_500015, result_add_500029)
    
    # Assigning a type to the variable 'c' (line 752)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 752, 4), 'c', result_div_500030)
    
    # Assigning a Lambda to a Name (line 753):
    
    # Assigning a Lambda to a Name (line 753):

    @norecursion
    def _stypy_temp_lambda_266(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_266'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_266', 753, 8, True)
        # Passed parameters checking function
        _stypy_temp_lambda_266.stypy_localization = localization
        _stypy_temp_lambda_266.stypy_type_of_self = None
        _stypy_temp_lambda_266.stypy_type_store = module_type_store
        _stypy_temp_lambda_266.stypy_function_name = '_stypy_temp_lambda_266'
        _stypy_temp_lambda_266.stypy_param_names_list = ['x']
        _stypy_temp_lambda_266.stypy_varargs_param_name = None
        _stypy_temp_lambda_266.stypy_kwargs_param_name = None
        _stypy_temp_lambda_266.stypy_call_defaults = defaults
        _stypy_temp_lambda_266.stypy_call_varargs = varargs
        _stypy_temp_lambda_266.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_266', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_266', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        # Getting the type of 'x' (line 753)
        x_500031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 18), 'x')
        
        # Call to sin(...): (line 753)
        # Processing the call arguments (line 753)
        # Getting the type of 'x' (line 753)
        x_500033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 26), 'x', False)
        # Processing the call keyword arguments (line 753)
        kwargs_500034 = {}
        # Getting the type of 'sin' (line 753)
        sin_500032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 22), 'sin', False)
        # Calling sin(args, kwargs) (line 753)
        sin_call_result_500035 = invoke(stypy.reporting.localization.Localization(__file__, 753, 22), sin_500032, *[x_500033], **kwargs_500034)
        
        # Applying the binary operator '-' (line 753)
        result_sub_500036 = python_operator(stypy.reporting.localization.Localization(__file__, 753, 18), '-', x_500031, sin_call_result_500035)
        
        # Getting the type of 'c' (line 753)
        c_500037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 31), 'c')
        # Applying the binary operator '-' (line 753)
        result_sub_500038 = python_operator(stypy.reporting.localization.Localization(__file__, 753, 29), '-', result_sub_500036, c_500037)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 8), 'stypy_return_type', result_sub_500038)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_266' in the type store
        # Getting the type of 'stypy_return_type' (line 753)
        stypy_return_type_500039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 8), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_500039)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_266'
        return stypy_return_type_500039

    # Assigning a type to the variable '_stypy_temp_lambda_266' (line 753)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 8), '_stypy_temp_lambda_266', _stypy_temp_lambda_266)
    # Getting the type of '_stypy_temp_lambda_266' (line 753)
    _stypy_temp_lambda_266_500040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 8), '_stypy_temp_lambda_266')
    # Assigning a type to the variable 'f' (line 753)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 4), 'f', _stypy_temp_lambda_266_500040)
    
    # Assigning a Lambda to a Name (line 754):
    
    # Assigning a Lambda to a Name (line 754):

    @norecursion
    def _stypy_temp_lambda_267(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_267'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_267', 754, 9, True)
        # Passed parameters checking function
        _stypy_temp_lambda_267.stypy_localization = localization
        _stypy_temp_lambda_267.stypy_type_of_self = None
        _stypy_temp_lambda_267.stypy_type_store = module_type_store
        _stypy_temp_lambda_267.stypy_function_name = '_stypy_temp_lambda_267'
        _stypy_temp_lambda_267.stypy_param_names_list = ['x']
        _stypy_temp_lambda_267.stypy_varargs_param_name = None
        _stypy_temp_lambda_267.stypy_kwargs_param_name = None
        _stypy_temp_lambda_267.stypy_call_defaults = defaults
        _stypy_temp_lambda_267.stypy_call_varargs = varargs
        _stypy_temp_lambda_267.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_267', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_267', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        float_500041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 754, 19), 'float')
        
        # Call to cos(...): (line 754)
        # Processing the call arguments (line 754)
        # Getting the type of 'x' (line 754)
        x_500043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 29), 'x', False)
        # Processing the call keyword arguments (line 754)
        kwargs_500044 = {}
        # Getting the type of 'cos' (line 754)
        cos_500042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 25), 'cos', False)
        # Calling cos(args, kwargs) (line 754)
        cos_call_result_500045 = invoke(stypy.reporting.localization.Localization(__file__, 754, 25), cos_500042, *[x_500043], **kwargs_500044)
        
        # Applying the binary operator '-' (line 754)
        result_sub_500046 = python_operator(stypy.reporting.localization.Localization(__file__, 754, 19), '-', float_500041, cos_call_result_500045)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 754, 9), 'stypy_return_type', result_sub_500046)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_267' in the type store
        # Getting the type of 'stypy_return_type' (line 754)
        stypy_return_type_500047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 9), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_500047)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_267'
        return stypy_return_type_500047

    # Assigning a type to the variable '_stypy_temp_lambda_267' (line 754)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 754, 9), '_stypy_temp_lambda_267', _stypy_temp_lambda_267)
    # Getting the type of '_stypy_temp_lambda_267' (line 754)
    _stypy_temp_lambda_267_500048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 9), '_stypy_temp_lambda_267')
    # Assigning a type to the variable 'df' (line 754)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 754, 4), 'df', _stypy_temp_lambda_267_500048)
    
    # Assigning a BinOp to a Name (line 755):
    
    # Assigning a BinOp to a Name (line 755):
    float_500049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 755, 9), 'float')
    # Getting the type of 'pi' (line 755)
    pi_500050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 13), 'pi')
    # Applying the binary operator '*' (line 755)
    result_mul_500051 = python_operator(stypy.reporting.localization.Localization(__file__, 755, 9), '*', float_500049, pi_500050)
    
    # Assigning a type to the variable 'xi' (line 755)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 4), 'xi', result_mul_500051)
    
    
    # Call to range(...): (line 756)
    # Processing the call arguments (line 756)
    # Getting the type of 'maxit' (line 756)
    maxit_500053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 19), 'maxit', False)
    # Processing the call keyword arguments (line 756)
    kwargs_500054 = {}
    # Getting the type of 'range' (line 756)
    range_500052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 13), 'range', False)
    # Calling range(args, kwargs) (line 756)
    range_call_result_500055 = invoke(stypy.reporting.localization.Localization(__file__, 756, 13), range_500052, *[maxit_500053], **kwargs_500054)
    
    # Testing the type of a for loop iterable (line 756)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 756, 4), range_call_result_500055)
    # Getting the type of the for loop variable (line 756)
    for_loop_var_500056 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 756, 4), range_call_result_500055)
    # Assigning a type to the variable 'i' (line 756)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 4), 'i', for_loop_var_500056)
    # SSA begins for a for statement (line 756)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Name (line 757):
    
    # Assigning a BinOp to a Name (line 757):
    # Getting the type of 'xi' (line 757)
    xi_500057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 13), 'xi')
    
    # Call to f(...): (line 757)
    # Processing the call arguments (line 757)
    # Getting the type of 'xi' (line 757)
    xi_500059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 20), 'xi', False)
    # Processing the call keyword arguments (line 757)
    kwargs_500060 = {}
    # Getting the type of 'f' (line 757)
    f_500058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 18), 'f', False)
    # Calling f(args, kwargs) (line 757)
    f_call_result_500061 = invoke(stypy.reporting.localization.Localization(__file__, 757, 18), f_500058, *[xi_500059], **kwargs_500060)
    
    
    # Call to df(...): (line 757)
    # Processing the call arguments (line 757)
    # Getting the type of 'xi' (line 757)
    xi_500063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 27), 'xi', False)
    # Processing the call keyword arguments (line 757)
    kwargs_500064 = {}
    # Getting the type of 'df' (line 757)
    df_500062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 24), 'df', False)
    # Calling df(args, kwargs) (line 757)
    df_call_result_500065 = invoke(stypy.reporting.localization.Localization(__file__, 757, 24), df_500062, *[xi_500063], **kwargs_500064)
    
    # Applying the binary operator 'div' (line 757)
    result_div_500066 = python_operator(stypy.reporting.localization.Localization(__file__, 757, 18), 'div', f_call_result_500061, df_call_result_500065)
    
    # Applying the binary operator '-' (line 757)
    result_sub_500067 = python_operator(stypy.reporting.localization.Localization(__file__, 757, 13), '-', xi_500057, result_div_500066)
    
    # Assigning a type to the variable 'xi' (line 757)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 8), 'xi', result_sub_500067)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'xi' (line 758)
    xi_500068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 11), 'xi')
    # Assigning a type to the variable 'stypy_return_type' (line 758)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 758, 4), 'stypy_return_type', xi_500068)
    
    # ################# End of '_compute_tauk(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_compute_tauk' in the type store
    # Getting the type of 'stypy_return_type' (line 725)
    stypy_return_type_500069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_500069)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_compute_tauk'
    return stypy_return_type_500069

# Assigning a type to the variable '_compute_tauk' (line 725)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 725, 0), '_compute_tauk', _compute_tauk)

@norecursion
def _initial_nodes_a(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_initial_nodes_a'
    module_type_store = module_type_store.open_function_context('_initial_nodes_a', 761, 0, False)
    
    # Passed parameters checking function
    _initial_nodes_a.stypy_localization = localization
    _initial_nodes_a.stypy_type_of_self = None
    _initial_nodes_a.stypy_type_store = module_type_store
    _initial_nodes_a.stypy_function_name = '_initial_nodes_a'
    _initial_nodes_a.stypy_param_names_list = ['n', 'k']
    _initial_nodes_a.stypy_varargs_param_name = None
    _initial_nodes_a.stypy_kwargs_param_name = None
    _initial_nodes_a.stypy_call_defaults = defaults
    _initial_nodes_a.stypy_call_varargs = varargs
    _initial_nodes_a.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_initial_nodes_a', ['n', 'k'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_initial_nodes_a', localization, ['n', 'k'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_initial_nodes_a(...)' code ##################

    str_500070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 786, (-1)), 'str', 'Tricomi initial guesses\n\n    Computes an initial approximation to the square of the `k`-th\n    (positive) root :math:`x_k` of the Hermite polynomial :math:`H_n`\n    of order :math:`n`. The formula is the one from lemma 3.1 in the\n    original paper. The guesses are accurate except in the region\n    near :math:`\\sqrt{2n + 1}`.\n\n    Parameters\n    ----------\n    n : int\n        Quadrature order\n    k : ndarray of type int\n        Index of roots to compute\n\n    Returns\n    -------\n    xksq : ndarray\n        Square of the approximate roots\n\n    See Also\n    --------\n    initial_nodes\n    roots_hermite_asy\n    ')
    
    # Assigning a Call to a Name (line 787):
    
    # Assigning a Call to a Name (line 787):
    
    # Call to _compute_tauk(...): (line 787)
    # Processing the call arguments (line 787)
    # Getting the type of 'n' (line 787)
    n_500072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 25), 'n', False)
    # Getting the type of 'k' (line 787)
    k_500073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 28), 'k', False)
    # Processing the call keyword arguments (line 787)
    kwargs_500074 = {}
    # Getting the type of '_compute_tauk' (line 787)
    _compute_tauk_500071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 11), '_compute_tauk', False)
    # Calling _compute_tauk(args, kwargs) (line 787)
    _compute_tauk_call_result_500075 = invoke(stypy.reporting.localization.Localization(__file__, 787, 11), _compute_tauk_500071, *[n_500072, k_500073], **kwargs_500074)
    
    # Assigning a type to the variable 'tauk' (line 787)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 787, 4), 'tauk', _compute_tauk_call_result_500075)
    
    # Assigning a BinOp to a Name (line 788):
    
    # Assigning a BinOp to a Name (line 788):
    
    # Call to cos(...): (line 788)
    # Processing the call arguments (line 788)
    float_500077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 788, 15), 'float')
    # Getting the type of 'tauk' (line 788)
    tauk_500078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 19), 'tauk', False)
    # Applying the binary operator '*' (line 788)
    result_mul_500079 = python_operator(stypy.reporting.localization.Localization(__file__, 788, 15), '*', float_500077, tauk_500078)
    
    # Processing the call keyword arguments (line 788)
    kwargs_500080 = {}
    # Getting the type of 'cos' (line 788)
    cos_500076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 11), 'cos', False)
    # Calling cos(args, kwargs) (line 788)
    cos_call_result_500081 = invoke(stypy.reporting.localization.Localization(__file__, 788, 11), cos_500076, *[result_mul_500079], **kwargs_500080)
    
    int_500082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 788, 26), 'int')
    # Applying the binary operator '**' (line 788)
    result_pow_500083 = python_operator(stypy.reporting.localization.Localization(__file__, 788, 11), '**', cos_call_result_500081, int_500082)
    
    # Assigning a type to the variable 'sigk' (line 788)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 788, 4), 'sigk', result_pow_500083)
    
    # Assigning a BinOp to a Name (line 789):
    
    # Assigning a BinOp to a Name (line 789):
    # Getting the type of 'n' (line 789)
    n_500084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 8), 'n')
    int_500085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 789, 12), 'int')
    # Applying the binary operator '%' (line 789)
    result_mod_500086 = python_operator(stypy.reporting.localization.Localization(__file__, 789, 8), '%', n_500084, int_500085)
    
    float_500087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 789, 16), 'float')
    # Applying the binary operator '-' (line 789)
    result_sub_500088 = python_operator(stypy.reporting.localization.Localization(__file__, 789, 8), '-', result_mod_500086, float_500087)
    
    # Assigning a type to the variable 'a' (line 789)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 789, 4), 'a', result_sub_500088)
    
    # Assigning a BinOp to a Name (line 790):
    
    # Assigning a BinOp to a Name (line 790):
    float_500089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 790, 9), 'float')
    
    # Call to floor(...): (line 790)
    # Processing the call arguments (line 790)
    # Getting the type of 'n' (line 790)
    n_500091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 19), 'n', False)
    float_500092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 790, 21), 'float')
    # Applying the binary operator 'div' (line 790)
    result_div_500093 = python_operator(stypy.reporting.localization.Localization(__file__, 790, 19), 'div', n_500091, float_500092)
    
    # Processing the call keyword arguments (line 790)
    kwargs_500094 = {}
    # Getting the type of 'floor' (line 790)
    floor_500090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 13), 'floor', False)
    # Calling floor(args, kwargs) (line 790)
    floor_call_result_500095 = invoke(stypy.reporting.localization.Localization(__file__, 790, 13), floor_500090, *[result_div_500093], **kwargs_500094)
    
    # Applying the binary operator '*' (line 790)
    result_mul_500096 = python_operator(stypy.reporting.localization.Localization(__file__, 790, 9), '*', float_500089, floor_call_result_500095)
    
    float_500097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 790, 28), 'float')
    # Getting the type of 'a' (line 790)
    a_500098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 32), 'a')
    # Applying the binary operator '*' (line 790)
    result_mul_500099 = python_operator(stypy.reporting.localization.Localization(__file__, 790, 28), '*', float_500097, a_500098)
    
    # Applying the binary operator '+' (line 790)
    result_add_500100 = python_operator(stypy.reporting.localization.Localization(__file__, 790, 9), '+', result_mul_500096, result_mul_500099)
    
    float_500101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 790, 36), 'float')
    # Applying the binary operator '+' (line 790)
    result_add_500102 = python_operator(stypy.reporting.localization.Localization(__file__, 790, 34), '+', result_add_500100, float_500101)
    
    # Assigning a type to the variable 'nu' (line 790)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 790, 4), 'nu', result_add_500102)
    
    # Assigning a BinOp to a Name (line 792):
    
    # Assigning a BinOp to a Name (line 792):
    # Getting the type of 'nu' (line 792)
    nu_500103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 11), 'nu')
    # Getting the type of 'sigk' (line 792)
    sigk_500104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 14), 'sigk')
    # Applying the binary operator '*' (line 792)
    result_mul_500105 = python_operator(stypy.reporting.localization.Localization(__file__, 792, 11), '*', nu_500103, sigk_500104)
    
    float_500106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 21), 'float')
    float_500107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 26), 'float')
    # Getting the type of 'nu' (line 792)
    nu_500108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 30), 'nu')
    # Applying the binary operator '*' (line 792)
    result_mul_500109 = python_operator(stypy.reporting.localization.Localization(__file__, 792, 26), '*', float_500107, nu_500108)
    
    # Applying the binary operator 'div' (line 792)
    result_div_500110 = python_operator(stypy.reporting.localization.Localization(__file__, 792, 21), 'div', float_500106, result_mul_500109)
    
    float_500111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 37), 'float')
    float_500112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 42), 'float')
    float_500113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 47), 'float')
    # Getting the type of 'sigk' (line 792)
    sigk_500114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 51), 'sigk')
    # Applying the binary operator '-' (line 792)
    result_sub_500115 = python_operator(stypy.reporting.localization.Localization(__file__, 792, 47), '-', float_500113, sigk_500114)
    
    int_500116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 58), 'int')
    # Applying the binary operator '**' (line 792)
    result_pow_500117 = python_operator(stypy.reporting.localization.Localization(__file__, 792, 46), '**', result_sub_500115, int_500116)
    
    # Applying the binary operator '*' (line 792)
    result_mul_500118 = python_operator(stypy.reporting.localization.Localization(__file__, 792, 42), '*', float_500112, result_pow_500117)
    
    # Applying the binary operator 'div' (line 792)
    result_div_500119 = python_operator(stypy.reporting.localization.Localization(__file__, 792, 37), 'div', float_500111, result_mul_500118)
    
    float_500120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 63), 'float')
    float_500121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 68), 'float')
    # Getting the type of 'sigk' (line 792)
    sigk_500122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 72), 'sigk')
    # Applying the binary operator '-' (line 792)
    result_sub_500123 = python_operator(stypy.reporting.localization.Localization(__file__, 792, 68), '-', float_500121, sigk_500122)
    
    # Applying the binary operator 'div' (line 792)
    result_div_500124 = python_operator(stypy.reporting.localization.Localization(__file__, 792, 63), 'div', float_500120, result_sub_500123)
    
    # Applying the binary operator '-' (line 792)
    result_sub_500125 = python_operator(stypy.reporting.localization.Localization(__file__, 792, 37), '-', result_div_500119, result_div_500124)
    
    float_500126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 80), 'float')
    # Applying the binary operator '-' (line 792)
    result_sub_500127 = python_operator(stypy.reporting.localization.Localization(__file__, 792, 78), '-', result_sub_500125, float_500126)
    
    # Applying the binary operator '*' (line 792)
    result_mul_500128 = python_operator(stypy.reporting.localization.Localization(__file__, 792, 34), '*', result_div_500110, result_sub_500127)
    
    # Applying the binary operator '-' (line 792)
    result_sub_500129 = python_operator(stypy.reporting.localization.Localization(__file__, 792, 11), '-', result_mul_500105, result_mul_500128)
    
    # Assigning a type to the variable 'xksq' (line 792)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 792, 4), 'xksq', result_sub_500129)
    # Getting the type of 'xksq' (line 793)
    xksq_500130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 11), 'xksq')
    # Assigning a type to the variable 'stypy_return_type' (line 793)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 793, 4), 'stypy_return_type', xksq_500130)
    
    # ################# End of '_initial_nodes_a(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_initial_nodes_a' in the type store
    # Getting the type of 'stypy_return_type' (line 761)
    stypy_return_type_500131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_500131)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_initial_nodes_a'
    return stypy_return_type_500131

# Assigning a type to the variable '_initial_nodes_a' (line 761)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 0), '_initial_nodes_a', _initial_nodes_a)

@norecursion
def _initial_nodes_b(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_initial_nodes_b'
    module_type_store = module_type_store.open_function_context('_initial_nodes_b', 796, 0, False)
    
    # Passed parameters checking function
    _initial_nodes_b.stypy_localization = localization
    _initial_nodes_b.stypy_type_of_self = None
    _initial_nodes_b.stypy_type_store = module_type_store
    _initial_nodes_b.stypy_function_name = '_initial_nodes_b'
    _initial_nodes_b.stypy_param_names_list = ['n', 'k']
    _initial_nodes_b.stypy_varargs_param_name = None
    _initial_nodes_b.stypy_kwargs_param_name = None
    _initial_nodes_b.stypy_call_defaults = defaults
    _initial_nodes_b.stypy_call_varargs = varargs
    _initial_nodes_b.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_initial_nodes_b', ['n', 'k'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_initial_nodes_b', localization, ['n', 'k'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_initial_nodes_b(...)' code ##################

    str_500132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 821, (-1)), 'str', 'Gatteschi initial guesses\n\n    Computes an initial approximation to the square of the `k`-th\n    (positive) root :math:`x_k` of the Hermite polynomial :math:`H_n`\n    of order :math:`n`. The formula is the one from lemma 3.2 in the\n    original paper. The guesses are accurate in the region just\n    below :math:`\\sqrt{2n + 1}`.\n\n    Parameters\n    ----------\n    n : int\n        Quadrature order\n    k : ndarray of type int\n        Index of roots to compute\n\n    Returns\n    -------\n    xksq : ndarray\n        Square of the approximate root\n\n    See Also\n    --------\n    initial_nodes\n    roots_hermite_asy\n    ')
    
    # Assigning a BinOp to a Name (line 822):
    
    # Assigning a BinOp to a Name (line 822):
    # Getting the type of 'n' (line 822)
    n_500133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'n')
    int_500134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 12), 'int')
    # Applying the binary operator '%' (line 822)
    result_mod_500135 = python_operator(stypy.reporting.localization.Localization(__file__, 822, 8), '%', n_500133, int_500134)
    
    float_500136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 16), 'float')
    # Applying the binary operator '-' (line 822)
    result_sub_500137 = python_operator(stypy.reporting.localization.Localization(__file__, 822, 8), '-', result_mod_500135, float_500136)
    
    # Assigning a type to the variable 'a' (line 822)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 4), 'a', result_sub_500137)
    
    # Assigning a BinOp to a Name (line 823):
    
    # Assigning a BinOp to a Name (line 823):
    float_500138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 823, 9), 'float')
    
    # Call to floor(...): (line 823)
    # Processing the call arguments (line 823)
    # Getting the type of 'n' (line 823)
    n_500140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 19), 'n', False)
    float_500141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 823, 21), 'float')
    # Applying the binary operator 'div' (line 823)
    result_div_500142 = python_operator(stypy.reporting.localization.Localization(__file__, 823, 19), 'div', n_500140, float_500141)
    
    # Processing the call keyword arguments (line 823)
    kwargs_500143 = {}
    # Getting the type of 'floor' (line 823)
    floor_500139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 13), 'floor', False)
    # Calling floor(args, kwargs) (line 823)
    floor_call_result_500144 = invoke(stypy.reporting.localization.Localization(__file__, 823, 13), floor_500139, *[result_div_500142], **kwargs_500143)
    
    # Applying the binary operator '*' (line 823)
    result_mul_500145 = python_operator(stypy.reporting.localization.Localization(__file__, 823, 9), '*', float_500138, floor_call_result_500144)
    
    float_500146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 823, 28), 'float')
    # Getting the type of 'a' (line 823)
    a_500147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 32), 'a')
    # Applying the binary operator '*' (line 823)
    result_mul_500148 = python_operator(stypy.reporting.localization.Localization(__file__, 823, 28), '*', float_500146, a_500147)
    
    # Applying the binary operator '+' (line 823)
    result_add_500149 = python_operator(stypy.reporting.localization.Localization(__file__, 823, 9), '+', result_mul_500145, result_mul_500148)
    
    float_500150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 823, 36), 'float')
    # Applying the binary operator '+' (line 823)
    result_add_500151 = python_operator(stypy.reporting.localization.Localization(__file__, 823, 34), '+', result_add_500149, float_500150)
    
    # Assigning a type to the variable 'nu' (line 823)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 823, 4), 'nu', result_add_500151)
    
    # Assigning a Subscript to a Name (line 825):
    
    # Assigning a Subscript to a Name (line 825):
    
    # Obtaining the type of the subscript
    int_500152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 41), 'int')
    slice_500153 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 825, 9), None, None, int_500152)
    
    # Obtaining the type of the subscript
    int_500154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 36), 'int')
    
    # Call to airyzo(...): (line 825)
    # Processing the call arguments (line 825)
    
    # Call to max(...): (line 825)
    # Processing the call keyword arguments (line 825)
    kwargs_500159 = {}
    # Getting the type of 'k' (line 825)
    k_500157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 24), 'k', False)
    # Obtaining the member 'max' of a type (line 825)
    max_500158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 24), k_500157, 'max')
    # Calling max(args, kwargs) (line 825)
    max_call_result_500160 = invoke(stypy.reporting.localization.Localization(__file__, 825, 24), max_500158, *[], **kwargs_500159)
    
    int_500161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 33), 'int')
    # Processing the call keyword arguments (line 825)
    kwargs_500162 = {}
    # Getting the type of 'specfun' (line 825)
    specfun_500155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 9), 'specfun', False)
    # Obtaining the member 'airyzo' of a type (line 825)
    airyzo_500156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 9), specfun_500155, 'airyzo')
    # Calling airyzo(args, kwargs) (line 825)
    airyzo_call_result_500163 = invoke(stypy.reporting.localization.Localization(__file__, 825, 9), airyzo_500156, *[max_call_result_500160, int_500161], **kwargs_500162)
    
    # Obtaining the member '__getitem__' of a type (line 825)
    getitem___500164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 9), airyzo_call_result_500163, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 825)
    subscript_call_result_500165 = invoke(stypy.reporting.localization.Localization(__file__, 825, 9), getitem___500164, int_500154)
    
    # Obtaining the member '__getitem__' of a type (line 825)
    getitem___500166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 9), subscript_call_result_500165, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 825)
    subscript_call_result_500167 = invoke(stypy.reporting.localization.Localization(__file__, 825, 9), getitem___500166, slice_500153)
    
    # Assigning a type to the variable 'ak' (line 825)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 4), 'ak', subscript_call_result_500167)
    
    # Assigning a BinOp to a Name (line 827):
    
    # Assigning a BinOp to a Name (line 827):
    # Getting the type of 'nu' (line 827)
    nu_500168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 12), 'nu')
    float_500169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 12), 'float')
    float_500170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 18), 'float')
    float_500171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 22), 'float')
    # Applying the binary operator 'div' (line 828)
    result_div_500172 = python_operator(stypy.reporting.localization.Localization(__file__, 828, 18), 'div', float_500170, float_500171)
    
    # Applying the binary operator '**' (line 828)
    result_pow_500173 = python_operator(stypy.reporting.localization.Localization(__file__, 828, 12), '**', float_500169, result_div_500172)
    
    # Getting the type of 'ak' (line 828)
    ak_500174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 29), 'ak')
    # Applying the binary operator '*' (line 828)
    result_mul_500175 = python_operator(stypy.reporting.localization.Localization(__file__, 828, 12), '*', result_pow_500173, ak_500174)
    
    # Getting the type of 'nu' (line 828)
    nu_500176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 34), 'nu')
    float_500177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 39), 'float')
    float_500178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 43), 'float')
    # Applying the binary operator 'div' (line 828)
    result_div_500179 = python_operator(stypy.reporting.localization.Localization(__file__, 828, 39), 'div', float_500177, float_500178)
    
    # Applying the binary operator '**' (line 828)
    result_pow_500180 = python_operator(stypy.reporting.localization.Localization(__file__, 828, 34), '**', nu_500176, result_div_500179)
    
    # Applying the binary operator '*' (line 828)
    result_mul_500181 = python_operator(stypy.reporting.localization.Localization(__file__, 828, 32), '*', result_mul_500175, result_pow_500180)
    
    # Applying the binary operator '+' (line 827)
    result_add_500182 = python_operator(stypy.reporting.localization.Localization(__file__, 827, 12), '+', nu_500168, result_mul_500181)
    
    float_500183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 12), 'float')
    float_500184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 16), 'float')
    # Applying the binary operator 'div' (line 829)
    result_div_500185 = python_operator(stypy.reporting.localization.Localization(__file__, 829, 12), 'div', float_500183, float_500184)
    
    float_500186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 22), 'float')
    float_500187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 28), 'float')
    float_500188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 32), 'float')
    # Applying the binary operator 'div' (line 829)
    result_div_500189 = python_operator(stypy.reporting.localization.Localization(__file__, 829, 28), 'div', float_500187, float_500188)
    
    # Applying the binary operator '**' (line 829)
    result_pow_500190 = python_operator(stypy.reporting.localization.Localization(__file__, 829, 22), '**', float_500186, result_div_500189)
    
    # Applying the binary operator '*' (line 829)
    result_mul_500191 = python_operator(stypy.reporting.localization.Localization(__file__, 829, 20), '*', result_div_500185, result_pow_500190)
    
    # Getting the type of 'ak' (line 829)
    ak_500192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 39), 'ak')
    int_500193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 43), 'int')
    # Applying the binary operator '**' (line 829)
    result_pow_500194 = python_operator(stypy.reporting.localization.Localization(__file__, 829, 39), '**', ak_500192, int_500193)
    
    # Applying the binary operator '*' (line 829)
    result_mul_500195 = python_operator(stypy.reporting.localization.Localization(__file__, 829, 37), '*', result_mul_500191, result_pow_500194)
    
    # Getting the type of 'nu' (line 829)
    nu_500196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 47), 'nu')
    float_500197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 52), 'float')
    float_500198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 57), 'float')
    # Applying the binary operator 'div' (line 829)
    result_div_500199 = python_operator(stypy.reporting.localization.Localization(__file__, 829, 52), 'div', float_500197, float_500198)
    
    # Applying the binary operator '**' (line 829)
    result_pow_500200 = python_operator(stypy.reporting.localization.Localization(__file__, 829, 47), '**', nu_500196, result_div_500199)
    
    # Applying the binary operator '*' (line 829)
    result_mul_500201 = python_operator(stypy.reporting.localization.Localization(__file__, 829, 45), '*', result_mul_500195, result_pow_500200)
    
    # Applying the binary operator '+' (line 828)
    result_add_500202 = python_operator(stypy.reporting.localization.Localization(__file__, 828, 48), '+', result_add_500182, result_mul_500201)
    
    float_500203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 830, 13), 'float')
    float_500204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 830, 17), 'float')
    # Applying the binary operator 'div' (line 830)
    result_div_500205 = python_operator(stypy.reporting.localization.Localization(__file__, 830, 13), 'div', float_500203, float_500204)
    
    float_500206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 830, 25), 'float')
    float_500207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 830, 30), 'float')
    # Applying the binary operator 'div' (line 830)
    result_div_500208 = python_operator(stypy.reporting.localization.Localization(__file__, 830, 25), 'div', float_500206, float_500207)
    
    # Getting the type of 'ak' (line 830)
    ak_500209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 38), 'ak')
    int_500210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 830, 42), 'int')
    # Applying the binary operator '**' (line 830)
    result_pow_500211 = python_operator(stypy.reporting.localization.Localization(__file__, 830, 38), '**', ak_500209, int_500210)
    
    # Applying the binary operator '*' (line 830)
    result_mul_500212 = python_operator(stypy.reporting.localization.Localization(__file__, 830, 36), '*', result_div_500208, result_pow_500211)
    
    # Applying the binary operator '-' (line 830)
    result_sub_500213 = python_operator(stypy.reporting.localization.Localization(__file__, 830, 13), '-', result_div_500205, result_mul_500212)
    
    # Getting the type of 'nu' (line 830)
    nu_500214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 47), 'nu')
    float_500215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 830, 52), 'float')
    # Applying the binary operator '**' (line 830)
    result_pow_500216 = python_operator(stypy.reporting.localization.Localization(__file__, 830, 47), '**', nu_500214, float_500215)
    
    # Applying the binary operator '*' (line 830)
    result_mul_500217 = python_operator(stypy.reporting.localization.Localization(__file__, 830, 12), '*', result_sub_500213, result_pow_500216)
    
    # Applying the binary operator '+' (line 829)
    result_add_500218 = python_operator(stypy.reporting.localization.Localization(__file__, 829, 62), '+', result_add_500202, result_mul_500217)
    
    float_500219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 831, 13), 'float')
    float_500220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 831, 18), 'float')
    # Applying the binary operator 'div' (line 831)
    result_div_500221 = python_operator(stypy.reporting.localization.Localization(__file__, 831, 13), 'div', float_500219, float_500220)
    
    # Getting the type of 'ak' (line 831)
    ak_500222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 27), 'ak')
    # Applying the binary operator '*' (line 831)
    result_mul_500223 = python_operator(stypy.reporting.localization.Localization(__file__, 831, 25), '*', result_div_500221, ak_500222)
    
    float_500224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 831, 32), 'float')
    float_500225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 831, 37), 'float')
    # Applying the binary operator 'div' (line 831)
    result_div_500226 = python_operator(stypy.reporting.localization.Localization(__file__, 831, 32), 'div', float_500224, float_500225)
    
    # Getting the type of 'ak' (line 831)
    ak_500227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 46), 'ak')
    int_500228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 831, 50), 'int')
    # Applying the binary operator '**' (line 831)
    result_pow_500229 = python_operator(stypy.reporting.localization.Localization(__file__, 831, 46), '**', ak_500227, int_500228)
    
    # Applying the binary operator '*' (line 831)
    result_mul_500230 = python_operator(stypy.reporting.localization.Localization(__file__, 831, 44), '*', result_div_500226, result_pow_500229)
    
    # Applying the binary operator '+' (line 831)
    result_add_500231 = python_operator(stypy.reporting.localization.Localization(__file__, 831, 13), '+', result_mul_500223, result_mul_500230)
    
    float_500232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 831, 55), 'float')
    float_500233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 831, 61), 'float')
    float_500234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 831, 65), 'float')
    # Applying the binary operator 'div' (line 831)
    result_div_500235 = python_operator(stypy.reporting.localization.Localization(__file__, 831, 61), 'div', float_500233, float_500234)
    
    # Applying the binary operator '**' (line 831)
    result_pow_500236 = python_operator(stypy.reporting.localization.Localization(__file__, 831, 55), '**', float_500232, result_div_500235)
    
    # Applying the binary operator '*' (line 831)
    result_mul_500237 = python_operator(stypy.reporting.localization.Localization(__file__, 831, 12), '*', result_add_500231, result_pow_500236)
    
    # Getting the type of 'nu' (line 831)
    nu_500238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 72), 'nu')
    float_500239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 831, 77), 'float')
    float_500240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 831, 82), 'float')
    # Applying the binary operator 'div' (line 831)
    result_div_500241 = python_operator(stypy.reporting.localization.Localization(__file__, 831, 77), 'div', float_500239, float_500240)
    
    # Applying the binary operator '**' (line 831)
    result_pow_500242 = python_operator(stypy.reporting.localization.Localization(__file__, 831, 72), '**', nu_500238, result_div_500241)
    
    # Applying the binary operator '*' (line 831)
    result_mul_500243 = python_operator(stypy.reporting.localization.Localization(__file__, 831, 70), '*', result_mul_500237, result_pow_500242)
    
    # Applying the binary operator '+' (line 830)
    result_add_500244 = python_operator(stypy.reporting.localization.Localization(__file__, 830, 58), '+', result_add_500218, result_mul_500243)
    
    float_500245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 13), 'float')
    float_500246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 21), 'float')
    # Applying the binary operator 'div' (line 832)
    result_div_500247 = python_operator(stypy.reporting.localization.Localization(__file__, 832, 13), 'div', float_500245, float_500246)
    
    # Getting the type of 'ak' (line 832)
    ak_500248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 33), 'ak')
    int_500249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 37), 'int')
    # Applying the binary operator '**' (line 832)
    result_pow_500250 = python_operator(stypy.reporting.localization.Localization(__file__, 832, 33), '**', ak_500248, int_500249)
    
    # Applying the binary operator '*' (line 832)
    result_mul_500251 = python_operator(stypy.reporting.localization.Localization(__file__, 832, 31), '*', result_div_500247, result_pow_500250)
    
    float_500252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 41), 'float')
    float_500253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 48), 'float')
    # Applying the binary operator 'div' (line 832)
    result_div_500254 = python_operator(stypy.reporting.localization.Localization(__file__, 832, 41), 'div', float_500252, float_500253)
    
    # Getting the type of 'ak' (line 832)
    ak_500255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 59), 'ak')
    int_500256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 63), 'int')
    # Applying the binary operator '**' (line 832)
    result_pow_500257 = python_operator(stypy.reporting.localization.Localization(__file__, 832, 59), '**', ak_500255, int_500256)
    
    # Applying the binary operator '*' (line 832)
    result_mul_500258 = python_operator(stypy.reporting.localization.Localization(__file__, 832, 57), '*', result_div_500254, result_pow_500257)
    
    # Applying the binary operator '+' (line 832)
    result_add_500259 = python_operator(stypy.reporting.localization.Localization(__file__, 832, 13), '+', result_mul_500251, result_mul_500258)
    
    float_500260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 68), 'float')
    float_500261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 74), 'float')
    float_500262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 78), 'float')
    # Applying the binary operator 'div' (line 832)
    result_div_500263 = python_operator(stypy.reporting.localization.Localization(__file__, 832, 74), 'div', float_500261, float_500262)
    
    # Applying the binary operator '**' (line 832)
    result_pow_500264 = python_operator(stypy.reporting.localization.Localization(__file__, 832, 68), '**', float_500260, result_div_500263)
    
    # Applying the binary operator '*' (line 832)
    result_mul_500265 = python_operator(stypy.reporting.localization.Localization(__file__, 832, 12), '*', result_add_500259, result_pow_500264)
    
    # Getting the type of 'nu' (line 832)
    nu_500266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 85), 'nu')
    float_500267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 90), 'float')
    float_500268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 95), 'float')
    # Applying the binary operator 'div' (line 832)
    result_div_500269 = python_operator(stypy.reporting.localization.Localization(__file__, 832, 90), 'div', float_500267, float_500268)
    
    # Applying the binary operator '**' (line 832)
    result_pow_500270 = python_operator(stypy.reporting.localization.Localization(__file__, 832, 85), '**', nu_500266, result_div_500269)
    
    # Applying the binary operator '*' (line 832)
    result_mul_500271 = python_operator(stypy.reporting.localization.Localization(__file__, 832, 83), '*', result_mul_500265, result_pow_500270)
    
    # Applying the binary operator '-' (line 831)
    result_sub_500272 = python_operator(stypy.reporting.localization.Localization(__file__, 831, 87), '-', result_add_500244, result_mul_500271)
    
    # Assigning a type to the variable 'xksq' (line 827)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 827, 4), 'xksq', result_sub_500272)
    # Getting the type of 'xksq' (line 833)
    xksq_500273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 11), 'xksq')
    # Assigning a type to the variable 'stypy_return_type' (line 833)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 833, 4), 'stypy_return_type', xksq_500273)
    
    # ################# End of '_initial_nodes_b(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_initial_nodes_b' in the type store
    # Getting the type of 'stypy_return_type' (line 796)
    stypy_return_type_500274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_500274)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_initial_nodes_b'
    return stypy_return_type_500274

# Assigning a type to the variable '_initial_nodes_b' (line 796)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 0), '_initial_nodes_b', _initial_nodes_b)

@norecursion
def _initial_nodes(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_initial_nodes'
    module_type_store = module_type_store.open_function_context('_initial_nodes', 836, 0, False)
    
    # Passed parameters checking function
    _initial_nodes.stypy_localization = localization
    _initial_nodes.stypy_type_of_self = None
    _initial_nodes.stypy_type_store = module_type_store
    _initial_nodes.stypy_function_name = '_initial_nodes'
    _initial_nodes.stypy_param_names_list = ['n']
    _initial_nodes.stypy_varargs_param_name = None
    _initial_nodes.stypy_kwargs_param_name = None
    _initial_nodes.stypy_call_defaults = defaults
    _initial_nodes.stypy_call_varargs = varargs
    _initial_nodes.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_initial_nodes', ['n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_initial_nodes', localization, ['n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_initial_nodes(...)' code ##################

    str_500275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 857, (-1)), 'str', 'Initial guesses for the Hermite roots\n\n    Computes an initial approximation to the non-negative\n    roots :math:`x_k` of the Hermite polynomial :math:`H_n`\n    of order :math:`n`. The Tricomi and Gatteschi initial\n    guesses are used in the region where they are accurate.\n\n    Parameters\n    ----------\n    n : int\n        Quadrature order\n\n    Returns\n    -------\n    xk : ndarray\n        Approximate roots\n\n    See Also\n    --------\n    roots_hermite_asy\n    ')
    
    # Assigning a BinOp to a Name (line 860):
    
    # Assigning a BinOp to a Name (line 860):
    float_500276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 860, 10), 'float')
    # Getting the type of 'n' (line 860)
    n_500277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 21), 'n')
    # Applying the binary operator '*' (line 860)
    result_mul_500278 = python_operator(stypy.reporting.localization.Localization(__file__, 860, 10), '*', float_500276, n_500277)
    
    float_500279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 860, 25), 'float')
    # Applying the binary operator '-' (line 860)
    result_sub_500280 = python_operator(stypy.reporting.localization.Localization(__file__, 860, 10), '-', result_mul_500278, float_500279)
    
    # Assigning a type to the variable 'fit' (line 860)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 860, 4), 'fit', result_sub_500280)
    
    # Assigning a Call to a Name (line 861):
    
    # Assigning a Call to a Name (line 861):
    
    # Call to astype(...): (line 861)
    # Processing the call arguments (line 861)
    # Getting the type of 'int' (line 861)
    int_500286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 34), 'int', False)
    # Processing the call keyword arguments (line 861)
    kwargs_500287 = {}
    
    # Call to around(...): (line 861)
    # Processing the call arguments (line 861)
    # Getting the type of 'fit' (line 861)
    fit_500282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 22), 'fit', False)
    # Processing the call keyword arguments (line 861)
    kwargs_500283 = {}
    # Getting the type of 'around' (line 861)
    around_500281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 15), 'around', False)
    # Calling around(args, kwargs) (line 861)
    around_call_result_500284 = invoke(stypy.reporting.localization.Localization(__file__, 861, 15), around_500281, *[fit_500282], **kwargs_500283)
    
    # Obtaining the member 'astype' of a type (line 861)
    astype_500285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 15), around_call_result_500284, 'astype')
    # Calling astype(args, kwargs) (line 861)
    astype_call_result_500288 = invoke(stypy.reporting.localization.Localization(__file__, 861, 15), astype_500285, *[int_500286], **kwargs_500287)
    
    # Assigning a type to the variable 'turnover' (line 861)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 861, 4), 'turnover', astype_call_result_500288)
    
    # Assigning a Call to a Name (line 863):
    
    # Assigning a Call to a Name (line 863):
    
    # Call to arange(...): (line 863)
    # Processing the call arguments (line 863)
    int_500290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 863, 16), 'int')
    
    # Call to int(...): (line 863)
    # Processing the call arguments (line 863)
    
    # Call to floor(...): (line 863)
    # Processing the call arguments (line 863)
    # Getting the type of 'n' (line 863)
    n_500293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 29), 'n', False)
    float_500294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 863, 31), 'float')
    # Applying the binary operator '*' (line 863)
    result_mul_500295 = python_operator(stypy.reporting.localization.Localization(__file__, 863, 29), '*', n_500293, float_500294)
    
    # Processing the call keyword arguments (line 863)
    kwargs_500296 = {}
    # Getting the type of 'floor' (line 863)
    floor_500292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 23), 'floor', False)
    # Calling floor(args, kwargs) (line 863)
    floor_call_result_500297 = invoke(stypy.reporting.localization.Localization(__file__, 863, 23), floor_500292, *[result_mul_500295], **kwargs_500296)
    
    int_500298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 863, 36), 'int')
    # Applying the binary operator '+' (line 863)
    result_add_500299 = python_operator(stypy.reporting.localization.Localization(__file__, 863, 23), '+', floor_call_result_500297, int_500298)
    
    # Processing the call keyword arguments (line 863)
    kwargs_500300 = {}
    # Getting the type of 'int' (line 863)
    int_500291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 19), 'int', False)
    # Calling int(args, kwargs) (line 863)
    int_call_result_500301 = invoke(stypy.reporting.localization.Localization(__file__, 863, 19), int_500291, *[result_add_500299], **kwargs_500300)
    
    # Processing the call keyword arguments (line 863)
    kwargs_500302 = {}
    # Getting the type of 'arange' (line 863)
    arange_500289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 9), 'arange', False)
    # Calling arange(args, kwargs) (line 863)
    arange_call_result_500303 = invoke(stypy.reporting.localization.Localization(__file__, 863, 9), arange_500289, *[int_500290, int_call_result_500301], **kwargs_500302)
    
    # Assigning a type to the variable 'ia' (line 863)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 863, 4), 'ia', arange_call_result_500303)
    
    # Assigning a Subscript to a Name (line 864):
    
    # Assigning a Subscript to a Name (line 864):
    
    # Obtaining the type of the subscript
    int_500304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 864, 14), 'int')
    slice_500305 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 864, 9), None, None, int_500304)
    # Getting the type of 'ia' (line 864)
    ia_500306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 9), 'ia')
    # Obtaining the member '__getitem__' of a type (line 864)
    getitem___500307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 864, 9), ia_500306, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 864)
    subscript_call_result_500308 = invoke(stypy.reporting.localization.Localization(__file__, 864, 9), getitem___500307, slice_500305)
    
    # Assigning a type to the variable 'ib' (line 864)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 864, 4), 'ib', subscript_call_result_500308)
    
    # Assigning a Call to a Name (line 865):
    
    # Assigning a Call to a Name (line 865):
    
    # Call to _initial_nodes_a(...): (line 865)
    # Processing the call arguments (line 865)
    # Getting the type of 'n' (line 865)
    n_500310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 28), 'n', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'turnover' (line 865)
    turnover_500311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 35), 'turnover', False)
    int_500312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 865, 44), 'int')
    # Applying the binary operator '+' (line 865)
    result_add_500313 = python_operator(stypy.reporting.localization.Localization(__file__, 865, 35), '+', turnover_500311, int_500312)
    
    slice_500314 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 865, 31), None, result_add_500313, None)
    # Getting the type of 'ia' (line 865)
    ia_500315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 31), 'ia', False)
    # Obtaining the member '__getitem__' of a type (line 865)
    getitem___500316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 865, 31), ia_500315, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 865)
    subscript_call_result_500317 = invoke(stypy.reporting.localization.Localization(__file__, 865, 31), getitem___500316, slice_500314)
    
    # Processing the call keyword arguments (line 865)
    kwargs_500318 = {}
    # Getting the type of '_initial_nodes_a' (line 865)
    _initial_nodes_a_500309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 11), '_initial_nodes_a', False)
    # Calling _initial_nodes_a(args, kwargs) (line 865)
    _initial_nodes_a_call_result_500319 = invoke(stypy.reporting.localization.Localization(__file__, 865, 11), _initial_nodes_a_500309, *[n_500310, subscript_call_result_500317], **kwargs_500318)
    
    # Assigning a type to the variable 'xasq' (line 865)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 865, 4), 'xasq', _initial_nodes_a_call_result_500319)
    
    # Assigning a Call to a Name (line 866):
    
    # Assigning a Call to a Name (line 866):
    
    # Call to _initial_nodes_b(...): (line 866)
    # Processing the call arguments (line 866)
    # Getting the type of 'n' (line 866)
    n_500321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 28), 'n', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'turnover' (line 866)
    turnover_500322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 34), 'turnover', False)
    int_500323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 866, 43), 'int')
    # Applying the binary operator '+' (line 866)
    result_add_500324 = python_operator(stypy.reporting.localization.Localization(__file__, 866, 34), '+', turnover_500322, int_500323)
    
    slice_500325 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 866, 31), result_add_500324, None, None)
    # Getting the type of 'ib' (line 866)
    ib_500326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 31), 'ib', False)
    # Obtaining the member '__getitem__' of a type (line 866)
    getitem___500327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 866, 31), ib_500326, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 866)
    subscript_call_result_500328 = invoke(stypy.reporting.localization.Localization(__file__, 866, 31), getitem___500327, slice_500325)
    
    # Processing the call keyword arguments (line 866)
    kwargs_500329 = {}
    # Getting the type of '_initial_nodes_b' (line 866)
    _initial_nodes_b_500320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 11), '_initial_nodes_b', False)
    # Calling _initial_nodes_b(args, kwargs) (line 866)
    _initial_nodes_b_call_result_500330 = invoke(stypy.reporting.localization.Localization(__file__, 866, 11), _initial_nodes_b_500320, *[n_500321, subscript_call_result_500328], **kwargs_500329)
    
    # Assigning a type to the variable 'xbsq' (line 866)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 866, 4), 'xbsq', _initial_nodes_b_call_result_500330)
    
    # Assigning a Call to a Name (line 868):
    
    # Assigning a Call to a Name (line 868):
    
    # Call to sqrt(...): (line 868)
    # Processing the call arguments (line 868)
    
    # Call to hstack(...): (line 868)
    # Processing the call arguments (line 868)
    
    # Obtaining an instance of the builtin type 'list' (line 868)
    list_500333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 868, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 868)
    # Adding element type (line 868)
    # Getting the type of 'xasq' (line 868)
    xasq_500334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 22), 'xasq', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 868, 21), list_500333, xasq_500334)
    # Adding element type (line 868)
    # Getting the type of 'xbsq' (line 868)
    xbsq_500335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 28), 'xbsq', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 868, 21), list_500333, xbsq_500335)
    
    # Processing the call keyword arguments (line 868)
    kwargs_500336 = {}
    # Getting the type of 'hstack' (line 868)
    hstack_500332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 14), 'hstack', False)
    # Calling hstack(args, kwargs) (line 868)
    hstack_call_result_500337 = invoke(stypy.reporting.localization.Localization(__file__, 868, 14), hstack_500332, *[list_500333], **kwargs_500336)
    
    # Processing the call keyword arguments (line 868)
    kwargs_500338 = {}
    # Getting the type of 'sqrt' (line 868)
    sqrt_500331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 9), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 868)
    sqrt_call_result_500339 = invoke(stypy.reporting.localization.Localization(__file__, 868, 9), sqrt_500331, *[hstack_call_result_500337], **kwargs_500338)
    
    # Assigning a type to the variable 'iv' (line 868)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 868, 4), 'iv', sqrt_call_result_500339)
    
    
    # Getting the type of 'n' (line 870)
    n_500340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 7), 'n')
    int_500341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 11), 'int')
    # Applying the binary operator '%' (line 870)
    result_mod_500342 = python_operator(stypy.reporting.localization.Localization(__file__, 870, 7), '%', n_500340, int_500341)
    
    int_500343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 16), 'int')
    # Applying the binary operator '==' (line 870)
    result_eq_500344 = python_operator(stypy.reporting.localization.Localization(__file__, 870, 7), '==', result_mod_500342, int_500343)
    
    # Testing the type of an if condition (line 870)
    if_condition_500345 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 870, 4), result_eq_500344)
    # Assigning a type to the variable 'if_condition_500345' (line 870)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 870, 4), 'if_condition_500345', if_condition_500345)
    # SSA begins for if statement (line 870)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 871):
    
    # Assigning a Call to a Name (line 871):
    
    # Call to hstack(...): (line 871)
    # Processing the call arguments (line 871)
    
    # Obtaining an instance of the builtin type 'list' (line 871)
    list_500347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 871, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 871)
    # Adding element type (line 871)
    float_500348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 871, 21), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 871, 20), list_500347, float_500348)
    # Adding element type (line 871)
    # Getting the type of 'iv' (line 871)
    iv_500349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 26), 'iv', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 871, 20), list_500347, iv_500349)
    
    # Processing the call keyword arguments (line 871)
    kwargs_500350 = {}
    # Getting the type of 'hstack' (line 871)
    hstack_500346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 13), 'hstack', False)
    # Calling hstack(args, kwargs) (line 871)
    hstack_call_result_500351 = invoke(stypy.reporting.localization.Localization(__file__, 871, 13), hstack_500346, *[list_500347], **kwargs_500350)
    
    # Assigning a type to the variable 'iv' (line 871)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 8), 'iv', hstack_call_result_500351)
    # SSA join for if statement (line 870)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'iv' (line 872)
    iv_500352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 11), 'iv')
    # Assigning a type to the variable 'stypy_return_type' (line 872)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 872, 4), 'stypy_return_type', iv_500352)
    
    # ################# End of '_initial_nodes(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_initial_nodes' in the type store
    # Getting the type of 'stypy_return_type' (line 836)
    stypy_return_type_500353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_500353)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_initial_nodes'
    return stypy_return_type_500353

# Assigning a type to the variable '_initial_nodes' (line 836)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 836, 0), '_initial_nodes', _initial_nodes)

@norecursion
def _pbcf(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_pbcf'
    module_type_store = module_type_store.open_function_context('_pbcf', 875, 0, False)
    
    # Passed parameters checking function
    _pbcf.stypy_localization = localization
    _pbcf.stypy_type_of_self = None
    _pbcf.stypy_type_store = module_type_store
    _pbcf.stypy_function_name = '_pbcf'
    _pbcf.stypy_param_names_list = ['n', 'theta']
    _pbcf.stypy_varargs_param_name = None
    _pbcf.stypy_kwargs_param_name = None
    _pbcf.stypy_call_defaults = defaults
    _pbcf.stypy_call_varargs = varargs
    _pbcf.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_pbcf', ['n', 'theta'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_pbcf', localization, ['n', 'theta'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_pbcf(...)' code ##################

    str_500354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 908, (-1)), 'str', 'Asymptotic series expansion of parabolic cylinder function\n\n    The implementation is based on sections 3.2 and 3.3 from the\n    original paper. Compared to the published version this code\n    adds one more term to the asymptotic series. The detailed\n    formulas can be found at [parabolic-asymptotics]_. The evaluation\n    is done in a transformed variable :math:`\\theta := \\arccos(t)`\n    where :math:`t := x / \\mu` and :math:`\\mu := \\sqrt{2n + 1}`.\n\n    Parameters\n    ----------\n    n : int\n        Quadrature order\n    theta : ndarray\n        Transformed position variable\n\n    Returns\n    -------\n    U : ndarray\n        Value of the parabolic cylinder function :math:`U(a, \\theta)`.\n    Ud : ndarray\n        Value of the derivative :math:`U^{\\prime}(a, \\theta)` of\n        the parabolic cylinder function.\n\n    See Also\n    --------\n    roots_hermite_asy\n\n    References\n    ----------\n    .. [parabolic-asymptotics]\n       http://dlmf.nist.gov/12.10#vii\n    ')
    
    # Assigning a Call to a Name (line 909):
    
    # Assigning a Call to a Name (line 909):
    
    # Call to sin(...): (line 909)
    # Processing the call arguments (line 909)
    # Getting the type of 'theta' (line 909)
    theta_500356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 13), 'theta', False)
    # Processing the call keyword arguments (line 909)
    kwargs_500357 = {}
    # Getting the type of 'sin' (line 909)
    sin_500355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 9), 'sin', False)
    # Calling sin(args, kwargs) (line 909)
    sin_call_result_500358 = invoke(stypy.reporting.localization.Localization(__file__, 909, 9), sin_500355, *[theta_500356], **kwargs_500357)
    
    # Assigning a type to the variable 'st' (line 909)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 909, 4), 'st', sin_call_result_500358)
    
    # Assigning a Call to a Name (line 910):
    
    # Assigning a Call to a Name (line 910):
    
    # Call to cos(...): (line 910)
    # Processing the call arguments (line 910)
    # Getting the type of 'theta' (line 910)
    theta_500360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 13), 'theta', False)
    # Processing the call keyword arguments (line 910)
    kwargs_500361 = {}
    # Getting the type of 'cos' (line 910)
    cos_500359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 9), 'cos', False)
    # Calling cos(args, kwargs) (line 910)
    cos_call_result_500362 = invoke(stypy.reporting.localization.Localization(__file__, 910, 9), cos_500359, *[theta_500360], **kwargs_500361)
    
    # Assigning a type to the variable 'ct' (line 910)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 910, 4), 'ct', cos_call_result_500362)
    
    # Assigning a BinOp to a Name (line 912):
    
    # Assigning a BinOp to a Name (line 912):
    float_500363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 912, 9), 'float')
    # Getting the type of 'n' (line 912)
    n_500364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 13), 'n')
    # Applying the binary operator '*' (line 912)
    result_mul_500365 = python_operator(stypy.reporting.localization.Localization(__file__, 912, 9), '*', float_500363, n_500364)
    
    float_500366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 912, 17), 'float')
    # Applying the binary operator '+' (line 912)
    result_add_500367 = python_operator(stypy.reporting.localization.Localization(__file__, 912, 9), '+', result_mul_500365, float_500366)
    
    # Assigning a type to the variable 'mu' (line 912)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 4), 'mu', result_add_500367)
    
    # Assigning a BinOp to a Name (line 914):
    
    # Assigning a BinOp to a Name (line 914):
    float_500368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 914, 10), 'float')
    # Getting the type of 'theta' (line 914)
    theta_500369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 14), 'theta')
    # Applying the binary operator '*' (line 914)
    result_mul_500370 = python_operator(stypy.reporting.localization.Localization(__file__, 914, 10), '*', float_500368, theta_500369)
    
    float_500371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 914, 22), 'float')
    # Getting the type of 'st' (line 914)
    st_500372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 26), 'st')
    # Applying the binary operator '*' (line 914)
    result_mul_500373 = python_operator(stypy.reporting.localization.Localization(__file__, 914, 22), '*', float_500371, st_500372)
    
    # Getting the type of 'ct' (line 914)
    ct_500374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 29), 'ct')
    # Applying the binary operator '*' (line 914)
    result_mul_500375 = python_operator(stypy.reporting.localization.Localization(__file__, 914, 28), '*', result_mul_500373, ct_500374)
    
    # Applying the binary operator '-' (line 914)
    result_sub_500376 = python_operator(stypy.reporting.localization.Localization(__file__, 914, 10), '-', result_mul_500370, result_mul_500375)
    
    # Assigning a type to the variable 'eta' (line 914)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 914, 4), 'eta', result_sub_500376)
    
    # Assigning a UnaryOp to a Name (line 916):
    
    # Assigning a UnaryOp to a Name (line 916):
    
    float_500377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 916, 13), 'float')
    # Getting the type of 'eta' (line 916)
    eta_500378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 17), 'eta')
    # Applying the binary operator '*' (line 916)
    result_mul_500379 = python_operator(stypy.reporting.localization.Localization(__file__, 916, 13), '*', float_500377, eta_500378)
    
    float_500380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 916, 21), 'float')
    # Applying the binary operator 'div' (line 916)
    result_div_500381 = python_operator(stypy.reporting.localization.Localization(__file__, 916, 20), 'div', result_mul_500379, float_500380)
    
    float_500382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 916, 30), 'float')
    float_500383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 916, 34), 'float')
    # Applying the binary operator 'div' (line 916)
    result_div_500384 = python_operator(stypy.reporting.localization.Localization(__file__, 916, 30), 'div', float_500382, float_500383)
    
    # Applying the binary operator '**' (line 916)
    result_pow_500385 = python_operator(stypy.reporting.localization.Localization(__file__, 916, 12), '**', result_div_500381, result_div_500384)
    
    # Applying the 'usub' unary operator (line 916)
    result___neg___500386 = python_operator(stypy.reporting.localization.Localization(__file__, 916, 11), 'usub', result_pow_500385)
    
    # Assigning a type to the variable 'zeta' (line 916)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 916, 4), 'zeta', result___neg___500386)
    
    # Assigning a BinOp to a Name (line 918):
    
    # Assigning a BinOp to a Name (line 918):
    
    # Getting the type of 'zeta' (line 918)
    zeta_500387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 12), 'zeta')
    # Applying the 'usub' unary operator (line 918)
    result___neg___500388 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 11), 'usub', zeta_500387)
    
    # Getting the type of 'st' (line 918)
    st_500389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 19), 'st')
    int_500390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 918, 23), 'int')
    # Applying the binary operator '**' (line 918)
    result_pow_500391 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 19), '**', st_500389, int_500390)
    
    # Applying the binary operator 'div' (line 918)
    result_div_500392 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 11), 'div', result___neg___500388, result_pow_500391)
    
    float_500393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 918, 30), 'float')
    # Applying the binary operator '**' (line 918)
    result_pow_500394 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 10), '**', result_div_500392, float_500393)
    
    # Assigning a type to the variable 'phi' (line 918)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 918, 4), 'phi', result_pow_500394)
    
    # Assigning a Num to a Name (line 921):
    
    # Assigning a Num to a Name (line 921):
    float_500395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 921, 9), 'float')
    # Assigning a type to the variable 'a0' (line 921)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 921, 4), 'a0', float_500395)
    
    # Assigning a Num to a Name (line 922):
    
    # Assigning a Num to a Name (line 922):
    float_500396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 922, 9), 'float')
    # Assigning a type to the variable 'a1' (line 922)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 922, 4), 'a1', float_500396)
    
    # Assigning a Num to a Name (line 923):
    
    # Assigning a Num to a Name (line 923):
    float_500397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 923, 9), 'float')
    # Assigning a type to the variable 'a2' (line 923)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 923, 4), 'a2', float_500397)
    
    # Assigning a Num to a Name (line 924):
    
    # Assigning a Num to a Name (line 924):
    float_500398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 924, 9), 'float')
    # Assigning a type to the variable 'a3' (line 924)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 4), 'a3', float_500398)
    
    # Assigning a Num to a Name (line 925):
    
    # Assigning a Num to a Name (line 925):
    float_500399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 925, 9), 'float')
    # Assigning a type to the variable 'a4' (line 925)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 925, 4), 'a4', float_500399)
    
    # Assigning a Num to a Name (line 926):
    
    # Assigning a Num to a Name (line 926):
    float_500400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 926, 9), 'float')
    # Assigning a type to the variable 'a5' (line 926)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 926, 4), 'a5', float_500400)
    
    # Assigning a Num to a Name (line 927):
    
    # Assigning a Num to a Name (line 927):
    float_500401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 927, 9), 'float')
    # Assigning a type to the variable 'b0' (line 927)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 927, 4), 'b0', float_500401)
    
    # Assigning a Num to a Name (line 928):
    
    # Assigning a Num to a Name (line 928):
    float_500402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 928, 9), 'float')
    # Assigning a type to the variable 'b1' (line 928)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 928, 4), 'b1', float_500402)
    
    # Assigning a Num to a Name (line 929):
    
    # Assigning a Num to a Name (line 929):
    float_500403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 929, 9), 'float')
    # Assigning a type to the variable 'b2' (line 929)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 4), 'b2', float_500403)
    
    # Assigning a Num to a Name (line 930):
    
    # Assigning a Num to a Name (line 930):
    float_500404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 930, 9), 'float')
    # Assigning a type to the variable 'b3' (line 930)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 930, 4), 'b3', float_500404)
    
    # Assigning a Num to a Name (line 931):
    
    # Assigning a Num to a Name (line 931):
    float_500405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 931, 9), 'float')
    # Assigning a type to the variable 'b4' (line 931)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 931, 4), 'b4', float_500405)
    
    # Assigning a Num to a Name (line 932):
    
    # Assigning a Num to a Name (line 932):
    float_500406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 932, 9), 'float')
    # Assigning a type to the variable 'b5' (line 932)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 932, 4), 'b5', float_500406)
    
    # Assigning a BinOp to a Name (line 936):
    
    # Assigning a BinOp to a Name (line 936):
    # Getting the type of 'ct' (line 936)
    ct_500407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 10), 'ct')
    
    # Call to reshape(...): (line 936)
    # Processing the call arguments (line 936)
    
    # Obtaining an instance of the builtin type 'tuple' (line 936)
    tuple_500413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 936, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 936)
    # Adding element type (line 936)
    int_500414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 936, 36), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 936, 36), tuple_500413, int_500414)
    # Adding element type (line 936)
    int_500415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 936, 39), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 936, 36), tuple_500413, int_500415)
    
    # Processing the call keyword arguments (line 936)
    kwargs_500416 = {}
    
    # Call to arange(...): (line 936)
    # Processing the call arguments (line 936)
    int_500409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 936, 23), 'int')
    # Processing the call keyword arguments (line 936)
    kwargs_500410 = {}
    # Getting the type of 'arange' (line 936)
    arange_500408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 16), 'arange', False)
    # Calling arange(args, kwargs) (line 936)
    arange_call_result_500411 = invoke(stypy.reporting.localization.Localization(__file__, 936, 16), arange_500408, *[int_500409], **kwargs_500410)
    
    # Obtaining the member 'reshape' of a type (line 936)
    reshape_500412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 936, 16), arange_call_result_500411, 'reshape')
    # Calling reshape(args, kwargs) (line 936)
    reshape_call_result_500417 = invoke(stypy.reporting.localization.Localization(__file__, 936, 16), reshape_500412, *[tuple_500413], **kwargs_500416)
    
    # Applying the binary operator '**' (line 936)
    result_pow_500418 = python_operator(stypy.reporting.localization.Localization(__file__, 936, 10), '**', ct_500407, reshape_call_result_500417)
    
    # Assigning a type to the variable 'ctp' (line 936)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 936, 4), 'ctp', result_pow_500418)
    
    # Assigning a Num to a Name (line 937):
    
    # Assigning a Num to a Name (line 937):
    float_500419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 937, 9), 'float')
    # Assigning a type to the variable 'u0' (line 937)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 4), 'u0', float_500419)
    
    # Assigning a BinOp to a Name (line 938):
    
    # Assigning a BinOp to a Name (line 938):
    float_500420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 10), 'float')
    
    # Obtaining the type of the subscript
    int_500421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 18), 'int')
    slice_500422 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 938, 14), None, None, None)
    # Getting the type of 'ctp' (line 938)
    ctp_500423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 14), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 938)
    getitem___500424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 14), ctp_500423, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 938)
    subscript_call_result_500425 = invoke(stypy.reporting.localization.Localization(__file__, 938, 14), getitem___500424, (int_500421, slice_500422))
    
    # Applying the binary operator '*' (line 938)
    result_mul_500426 = python_operator(stypy.reporting.localization.Localization(__file__, 938, 10), '*', float_500420, subscript_call_result_500425)
    
    float_500427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 25), 'float')
    # Getting the type of 'ct' (line 938)
    ct_500428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 29), 'ct')
    # Applying the binary operator '*' (line 938)
    result_mul_500429 = python_operator(stypy.reporting.localization.Localization(__file__, 938, 25), '*', float_500427, ct_500428)
    
    # Applying the binary operator '-' (line 938)
    result_sub_500430 = python_operator(stypy.reporting.localization.Localization(__file__, 938, 10), '-', result_mul_500426, result_mul_500429)
    
    float_500431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 35), 'float')
    # Applying the binary operator 'div' (line 938)
    result_div_500432 = python_operator(stypy.reporting.localization.Localization(__file__, 938, 9), 'div', result_sub_500430, float_500431)
    
    # Assigning a type to the variable 'u1' (line 938)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 4), 'u1', result_div_500432)
    
    # Assigning a BinOp to a Name (line 939):
    
    # Assigning a BinOp to a Name (line 939):
    float_500433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 939, 10), 'float')
    
    # Obtaining the type of the subscript
    int_500434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 939, 19), 'int')
    slice_500435 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 939, 15), None, None, None)
    # Getting the type of 'ctp' (line 939)
    ctp_500436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 15), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 939)
    getitem___500437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 939, 15), ctp_500436, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 939)
    subscript_call_result_500438 = invoke(stypy.reporting.localization.Localization(__file__, 939, 15), getitem___500437, (int_500434, slice_500435))
    
    # Applying the binary operator '*' (line 939)
    result_mul_500439 = python_operator(stypy.reporting.localization.Localization(__file__, 939, 10), '*', float_500433, subscript_call_result_500438)
    
    float_500440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 939, 26), 'float')
    
    # Obtaining the type of the subscript
    int_500441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 939, 36), 'int')
    slice_500442 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 939, 32), None, None, None)
    # Getting the type of 'ctp' (line 939)
    ctp_500443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 32), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 939)
    getitem___500444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 939, 32), ctp_500443, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 939)
    subscript_call_result_500445 = invoke(stypy.reporting.localization.Localization(__file__, 939, 32), getitem___500444, (int_500441, slice_500442))
    
    # Applying the binary operator '*' (line 939)
    result_mul_500446 = python_operator(stypy.reporting.localization.Localization(__file__, 939, 26), '*', float_500440, subscript_call_result_500445)
    
    # Applying the binary operator '+' (line 939)
    result_add_500447 = python_operator(stypy.reporting.localization.Localization(__file__, 939, 10), '+', result_mul_500439, result_mul_500446)
    
    float_500448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 939, 43), 'float')
    # Applying the binary operator '+' (line 939)
    result_add_500449 = python_operator(stypy.reporting.localization.Localization(__file__, 939, 41), '+', result_add_500447, float_500448)
    
    float_500450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 939, 52), 'float')
    # Applying the binary operator 'div' (line 939)
    result_div_500451 = python_operator(stypy.reporting.localization.Localization(__file__, 939, 9), 'div', result_add_500449, float_500450)
    
    # Assigning a type to the variable 'u2' (line 939)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 939, 4), 'u2', result_div_500451)
    
    # Assigning a BinOp to a Name (line 940):
    
    # Assigning a BinOp to a Name (line 940):
    float_500452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 10), 'float')
    
    # Obtaining the type of the subscript
    int_500453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 22), 'int')
    slice_500454 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 940, 18), None, None, None)
    # Getting the type of 'ctp' (line 940)
    ctp_500455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 18), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 940)
    getitem___500456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 940, 18), ctp_500455, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 940)
    subscript_call_result_500457 = invoke(stypy.reporting.localization.Localization(__file__, 940, 18), getitem___500456, (int_500453, slice_500454))
    
    # Applying the binary operator '*' (line 940)
    result_mul_500458 = python_operator(stypy.reporting.localization.Localization(__file__, 940, 10), '*', float_500452, subscript_call_result_500457)
    
    float_500459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 29), 'float')
    
    # Obtaining the type of the subscript
    int_500460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 41), 'int')
    slice_500461 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 940, 37), None, None, None)
    # Getting the type of 'ctp' (line 940)
    ctp_500462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 37), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 940)
    getitem___500463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 940, 37), ctp_500462, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 940)
    subscript_call_result_500464 = invoke(stypy.reporting.localization.Localization(__file__, 940, 37), getitem___500463, (int_500460, slice_500461))
    
    # Applying the binary operator '*' (line 940)
    result_mul_500465 = python_operator(stypy.reporting.localization.Localization(__file__, 940, 29), '*', float_500459, subscript_call_result_500464)
    
    # Applying the binary operator '+' (line 940)
    result_add_500466 = python_operator(stypy.reporting.localization.Localization(__file__, 940, 10), '+', result_mul_500458, result_mul_500465)
    
    float_500467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 48), 'float')
    
    # Obtaining the type of the subscript
    int_500468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 60), 'int')
    slice_500469 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 940, 56), None, None, None)
    # Getting the type of 'ctp' (line 940)
    ctp_500470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 56), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 940)
    getitem___500471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 940, 56), ctp_500470, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 940)
    subscript_call_result_500472 = invoke(stypy.reporting.localization.Localization(__file__, 940, 56), getitem___500471, (int_500468, slice_500469))
    
    # Applying the binary operator '*' (line 940)
    result_mul_500473 = python_operator(stypy.reporting.localization.Localization(__file__, 940, 48), '*', float_500467, subscript_call_result_500472)
    
    # Applying the binary operator '-' (line 940)
    result_sub_500474 = python_operator(stypy.reporting.localization.Localization(__file__, 940, 46), '-', result_add_500466, result_mul_500473)
    
    float_500475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 67), 'float')
    
    # Obtaining the type of the subscript
    int_500476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 80), 'int')
    slice_500477 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 940, 76), None, None, None)
    # Getting the type of 'ctp' (line 940)
    ctp_500478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 76), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 940)
    getitem___500479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 940, 76), ctp_500478, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 940)
    subscript_call_result_500480 = invoke(stypy.reporting.localization.Localization(__file__, 940, 76), getitem___500479, (int_500476, slice_500477))
    
    # Applying the binary operator '*' (line 940)
    result_mul_500481 = python_operator(stypy.reporting.localization.Localization(__file__, 940, 67), '*', float_500475, subscript_call_result_500480)
    
    # Applying the binary operator '-' (line 940)
    result_sub_500482 = python_operator(stypy.reporting.localization.Localization(__file__, 940, 65), '-', result_sub_500474, result_mul_500481)
    
    float_500483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 87), 'float')
    # Getting the type of 'ct' (line 940)
    ct_500484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 96), 'ct')
    # Applying the binary operator '*' (line 940)
    result_mul_500485 = python_operator(stypy.reporting.localization.Localization(__file__, 940, 87), '*', float_500483, ct_500484)
    
    # Applying the binary operator '-' (line 940)
    result_sub_500486 = python_operator(stypy.reporting.localization.Localization(__file__, 940, 85), '-', result_sub_500482, result_mul_500485)
    
    float_500487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 102), 'float')
    # Applying the binary operator 'div' (line 940)
    result_div_500488 = python_operator(stypy.reporting.localization.Localization(__file__, 940, 9), 'div', result_sub_500486, float_500487)
    
    # Assigning a type to the variable 'u3' (line 940)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 940, 4), 'u3', result_div_500488)
    
    # Assigning a BinOp to a Name (line 941):
    
    # Assigning a BinOp to a Name (line 941):
    float_500489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 10), 'float')
    
    # Obtaining the type of the subscript
    int_500490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 22), 'int')
    slice_500491 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 941, 18), None, None, None)
    # Getting the type of 'ctp' (line 941)
    ctp_500492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 18), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 941)
    getitem___500493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 941, 18), ctp_500492, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 941)
    subscript_call_result_500494 = invoke(stypy.reporting.localization.Localization(__file__, 941, 18), getitem___500493, (int_500490, slice_500491))
    
    # Applying the binary operator '*' (line 941)
    result_mul_500495 = python_operator(stypy.reporting.localization.Localization(__file__, 941, 10), '*', float_500489, subscript_call_result_500494)
    
    float_500496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 30), 'float')
    
    # Obtaining the type of the subscript
    int_500497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 43), 'int')
    slice_500498 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 941, 39), None, None, None)
    # Getting the type of 'ctp' (line 941)
    ctp_500499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 39), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 941)
    getitem___500500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 941, 39), ctp_500499, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 941)
    subscript_call_result_500501 = invoke(stypy.reporting.localization.Localization(__file__, 941, 39), getitem___500500, (int_500497, slice_500498))
    
    # Applying the binary operator '*' (line 941)
    result_mul_500502 = python_operator(stypy.reporting.localization.Localization(__file__, 941, 30), '*', float_500496, subscript_call_result_500501)
    
    # Applying the binary operator '-' (line 941)
    result_sub_500503 = python_operator(stypy.reporting.localization.Localization(__file__, 941, 10), '-', result_mul_500495, result_mul_500502)
    
    float_500504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 50), 'float')
    
    # Obtaining the type of the subscript
    int_500505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 63), 'int')
    slice_500506 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 941, 59), None, None, None)
    # Getting the type of 'ctp' (line 941)
    ctp_500507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 59), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 941)
    getitem___500508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 941, 59), ctp_500507, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 941)
    subscript_call_result_500509 = invoke(stypy.reporting.localization.Localization(__file__, 941, 59), getitem___500508, (int_500505, slice_500506))
    
    # Applying the binary operator '*' (line 941)
    result_mul_500510 = python_operator(stypy.reporting.localization.Localization(__file__, 941, 50), '*', float_500504, subscript_call_result_500509)
    
    # Applying the binary operator '-' (line 941)
    result_sub_500511 = python_operator(stypy.reporting.localization.Localization(__file__, 941, 48), '-', result_sub_500503, result_mul_500510)
    
    float_500512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 70), 'float')
    
    # Obtaining the type of the subscript
    int_500513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 85), 'int')
    slice_500514 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 941, 81), None, None, None)
    # Getting the type of 'ctp' (line 941)
    ctp_500515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 81), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 941)
    getitem___500516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 941, 81), ctp_500515, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 941)
    subscript_call_result_500517 = invoke(stypy.reporting.localization.Localization(__file__, 941, 81), getitem___500516, (int_500513, slice_500514))
    
    # Applying the binary operator '*' (line 941)
    result_mul_500518 = python_operator(stypy.reporting.localization.Localization(__file__, 941, 70), '*', float_500512, subscript_call_result_500517)
    
    # Applying the binary operator '+' (line 941)
    result_add_500519 = python_operator(stypy.reporting.localization.Localization(__file__, 941, 68), '+', result_sub_500511, result_mul_500518)
    
    float_500520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 92), 'float')
    
    # Obtaining the type of the subscript
    int_500521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 108), 'int')
    slice_500522 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 941, 104), None, None, None)
    # Getting the type of 'ctp' (line 941)
    ctp_500523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 104), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 941)
    getitem___500524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 941, 104), ctp_500523, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 941)
    subscript_call_result_500525 = invoke(stypy.reporting.localization.Localization(__file__, 941, 104), getitem___500524, (int_500521, slice_500522))
    
    # Applying the binary operator '*' (line 941)
    result_mul_500526 = python_operator(stypy.reporting.localization.Localization(__file__, 941, 92), '*', float_500520, subscript_call_result_500525)
    
    # Applying the binary operator '+' (line 941)
    result_add_500527 = python_operator(stypy.reporting.localization.Localization(__file__, 941, 90), '+', result_add_500519, result_mul_500526)
    
    float_500528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 115), 'float')
    # Applying the binary operator '+' (line 941)
    result_add_500529 = python_operator(stypy.reporting.localization.Localization(__file__, 941, 113), '+', result_add_500527, float_500528)
    
    float_500530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 129), 'float')
    # Applying the binary operator 'div' (line 941)
    result_div_500531 = python_operator(stypy.reporting.localization.Localization(__file__, 941, 9), 'div', result_add_500529, float_500530)
    
    # Assigning a type to the variable 'u4' (line 941)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 941, 4), 'u4', result_div_500531)
    
    # Assigning a BinOp to a Name (line 942):
    
    # Assigning a BinOp to a Name (line 942):
    float_500532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 10), 'float')
    
    # Obtaining the type of the subscript
    int_500533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 25), 'int')
    slice_500534 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 942, 21), None, None, None)
    # Getting the type of 'ctp' (line 942)
    ctp_500535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 21), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 942)
    getitem___500536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 21), ctp_500535, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 942)
    subscript_call_result_500537 = invoke(stypy.reporting.localization.Localization(__file__, 942, 21), getitem___500536, (int_500533, slice_500534))
    
    # Applying the binary operator '*' (line 942)
    result_mul_500538 = python_operator(stypy.reporting.localization.Localization(__file__, 942, 10), '*', float_500532, subscript_call_result_500537)
    
    float_500539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 33), 'float')
    
    # Obtaining the type of the subscript
    int_500540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 49), 'int')
    slice_500541 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 942, 45), None, None, None)
    # Getting the type of 'ctp' (line 942)
    ctp_500542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 45), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 942)
    getitem___500543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 45), ctp_500542, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 942)
    subscript_call_result_500544 = invoke(stypy.reporting.localization.Localization(__file__, 942, 45), getitem___500543, (int_500540, slice_500541))
    
    # Applying the binary operator '*' (line 942)
    result_mul_500545 = python_operator(stypy.reporting.localization.Localization(__file__, 942, 33), '*', float_500539, subscript_call_result_500544)
    
    # Applying the binary operator '-' (line 942)
    result_sub_500546 = python_operator(stypy.reporting.localization.Localization(__file__, 942, 10), '-', result_mul_500538, result_mul_500545)
    
    float_500547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 57), 'float')
    
    # Obtaining the type of the subscript
    int_500548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 74), 'int')
    slice_500549 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 942, 70), None, None, None)
    # Getting the type of 'ctp' (line 942)
    ctp_500550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 70), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 942)
    getitem___500551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 70), ctp_500550, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 942)
    subscript_call_result_500552 = invoke(stypy.reporting.localization.Localization(__file__, 942, 70), getitem___500551, (int_500548, slice_500549))
    
    # Applying the binary operator '*' (line 942)
    result_mul_500553 = python_operator(stypy.reporting.localization.Localization(__file__, 942, 57), '*', float_500547, subscript_call_result_500552)
    
    # Applying the binary operator '+' (line 942)
    result_add_500554 = python_operator(stypy.reporting.localization.Localization(__file__, 942, 55), '+', result_sub_500546, result_mul_500553)
    
    float_500555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 82), 'float')
    
    # Obtaining the type of the subscript
    int_500556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 99), 'int')
    slice_500557 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 942, 95), None, None, None)
    # Getting the type of 'ctp' (line 942)
    ctp_500558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 95), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 942)
    getitem___500559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 95), ctp_500558, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 942)
    subscript_call_result_500560 = invoke(stypy.reporting.localization.Localization(__file__, 942, 95), getitem___500559, (int_500556, slice_500557))
    
    # Applying the binary operator '*' (line 942)
    result_mul_500561 = python_operator(stypy.reporting.localization.Localization(__file__, 942, 82), '*', float_500555, subscript_call_result_500560)
    
    # Applying the binary operator '-' (line 942)
    result_sub_500562 = python_operator(stypy.reporting.localization.Localization(__file__, 942, 80), '-', result_add_500554, result_mul_500561)
    
    float_500563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 106), 'float')
    
    # Obtaining the type of the subscript
    int_500564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 123), 'int')
    slice_500565 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 942, 119), None, None, None)
    # Getting the type of 'ctp' (line 942)
    ctp_500566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 119), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 942)
    getitem___500567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 119), ctp_500566, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 942)
    subscript_call_result_500568 = invoke(stypy.reporting.localization.Localization(__file__, 942, 119), getitem___500567, (int_500564, slice_500565))
    
    # Applying the binary operator '*' (line 942)
    result_mul_500569 = python_operator(stypy.reporting.localization.Localization(__file__, 942, 106), '*', float_500563, subscript_call_result_500568)
    
    # Applying the binary operator '+' (line 942)
    result_add_500570 = python_operator(stypy.reporting.localization.Localization(__file__, 942, 104), '+', result_sub_500562, result_mul_500569)
    
    float_500571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 943, 12), 'float')
    
    # Obtaining the type of the subscript
    int_500572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 943, 30), 'int')
    slice_500573 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 943, 26), None, None, None)
    # Getting the type of 'ctp' (line 943)
    ctp_500574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 26), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 943)
    getitem___500575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 943, 26), ctp_500574, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 943)
    subscript_call_result_500576 = invoke(stypy.reporting.localization.Localization(__file__, 943, 26), getitem___500575, (int_500572, slice_500573))
    
    # Applying the binary operator '*' (line 943)
    result_mul_500577 = python_operator(stypy.reporting.localization.Localization(__file__, 943, 12), '*', float_500571, subscript_call_result_500576)
    
    # Applying the binary operator '-' (line 943)
    result_sub_500578 = python_operator(stypy.reporting.localization.Localization(__file__, 943, 10), '-', result_add_500570, result_mul_500577)
    
    float_500579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 943, 37), 'float')
    
    # Obtaining the type of the subscript
    int_500580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 943, 56), 'int')
    slice_500581 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 943, 52), None, None, None)
    # Getting the type of 'ctp' (line 943)
    ctp_500582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 52), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 943)
    getitem___500583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 943, 52), ctp_500582, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 943)
    subscript_call_result_500584 = invoke(stypy.reporting.localization.Localization(__file__, 943, 52), getitem___500583, (int_500580, slice_500581))
    
    # Applying the binary operator '*' (line 943)
    result_mul_500585 = python_operator(stypy.reporting.localization.Localization(__file__, 943, 37), '*', float_500579, subscript_call_result_500584)
    
    # Applying the binary operator '-' (line 943)
    result_sub_500586 = python_operator(stypy.reporting.localization.Localization(__file__, 943, 35), '-', result_sub_500578, result_mul_500585)
    
    float_500587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 943, 63), 'float')
    # Getting the type of 'ct' (line 943)
    ct_500588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 77), 'ct')
    # Applying the binary operator '*' (line 943)
    result_mul_500589 = python_operator(stypy.reporting.localization.Localization(__file__, 943, 63), '*', float_500587, ct_500588)
    
    # Applying the binary operator '-' (line 943)
    result_sub_500590 = python_operator(stypy.reporting.localization.Localization(__file__, 943, 61), '-', result_sub_500586, result_mul_500589)
    
    float_500591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 943, 83), 'float')
    # Applying the binary operator 'div' (line 942)
    result_div_500592 = python_operator(stypy.reporting.localization.Localization(__file__, 942, 9), 'div', result_sub_500590, float_500591)
    
    # Assigning a type to the variable 'u5' (line 942)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 4), 'u5', result_div_500592)
    
    # Assigning a Num to a Name (line 944):
    
    # Assigning a Num to a Name (line 944):
    float_500593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 944, 9), 'float')
    # Assigning a type to the variable 'v0' (line 944)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 944, 4), 'v0', float_500593)
    
    # Assigning a BinOp to a Name (line 945):
    
    # Assigning a BinOp to a Name (line 945):
    float_500594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 945, 10), 'float')
    
    # Obtaining the type of the subscript
    int_500595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 945, 18), 'int')
    slice_500596 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 945, 14), None, None, None)
    # Getting the type of 'ctp' (line 945)
    ctp_500597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 14), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 945)
    getitem___500598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 945, 14), ctp_500597, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 945)
    subscript_call_result_500599 = invoke(stypy.reporting.localization.Localization(__file__, 945, 14), getitem___500598, (int_500595, slice_500596))
    
    # Applying the binary operator '*' (line 945)
    result_mul_500600 = python_operator(stypy.reporting.localization.Localization(__file__, 945, 10), '*', float_500594, subscript_call_result_500599)
    
    float_500601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 945, 25), 'float')
    # Getting the type of 'ct' (line 945)
    ct_500602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 29), 'ct')
    # Applying the binary operator '*' (line 945)
    result_mul_500603 = python_operator(stypy.reporting.localization.Localization(__file__, 945, 25), '*', float_500601, ct_500602)
    
    # Applying the binary operator '+' (line 945)
    result_add_500604 = python_operator(stypy.reporting.localization.Localization(__file__, 945, 10), '+', result_mul_500600, result_mul_500603)
    
    float_500605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 945, 35), 'float')
    # Applying the binary operator 'div' (line 945)
    result_div_500606 = python_operator(stypy.reporting.localization.Localization(__file__, 945, 9), 'div', result_add_500604, float_500605)
    
    # Assigning a type to the variable 'v1' (line 945)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 945, 4), 'v1', result_div_500606)
    
    # Assigning a BinOp to a Name (line 946):
    
    # Assigning a BinOp to a Name (line 946):
    float_500607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 946, 10), 'float')
    
    # Obtaining the type of the subscript
    int_500608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 946, 19), 'int')
    slice_500609 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 946, 15), None, None, None)
    # Getting the type of 'ctp' (line 946)
    ctp_500610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 15), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 946)
    getitem___500611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 946, 15), ctp_500610, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 946)
    subscript_call_result_500612 = invoke(stypy.reporting.localization.Localization(__file__, 946, 15), getitem___500611, (int_500608, slice_500609))
    
    # Applying the binary operator '*' (line 946)
    result_mul_500613 = python_operator(stypy.reporting.localization.Localization(__file__, 946, 10), '*', float_500607, subscript_call_result_500612)
    
    float_500614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 946, 26), 'float')
    
    # Obtaining the type of the subscript
    int_500615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 946, 36), 'int')
    slice_500616 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 946, 32), None, None, None)
    # Getting the type of 'ctp' (line 946)
    ctp_500617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 32), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 946)
    getitem___500618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 946, 32), ctp_500617, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 946)
    subscript_call_result_500619 = invoke(stypy.reporting.localization.Localization(__file__, 946, 32), getitem___500618, (int_500615, slice_500616))
    
    # Applying the binary operator '*' (line 946)
    result_mul_500620 = python_operator(stypy.reporting.localization.Localization(__file__, 946, 26), '*', float_500614, subscript_call_result_500619)
    
    # Applying the binary operator '-' (line 946)
    result_sub_500621 = python_operator(stypy.reporting.localization.Localization(__file__, 946, 10), '-', result_mul_500613, result_mul_500620)
    
    float_500622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 946, 43), 'float')
    # Applying the binary operator '-' (line 946)
    result_sub_500623 = python_operator(stypy.reporting.localization.Localization(__file__, 946, 41), '-', result_sub_500621, float_500622)
    
    float_500624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 946, 52), 'float')
    # Applying the binary operator 'div' (line 946)
    result_div_500625 = python_operator(stypy.reporting.localization.Localization(__file__, 946, 9), 'div', result_sub_500623, float_500624)
    
    # Assigning a type to the variable 'v2' (line 946)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 946, 4), 'v2', result_div_500625)
    
    # Assigning a BinOp to a Name (line 947):
    
    # Assigning a BinOp to a Name (line 947):
    float_500626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 947, 10), 'float')
    
    # Obtaining the type of the subscript
    int_500627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 947, 22), 'int')
    slice_500628 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 947, 18), None, None, None)
    # Getting the type of 'ctp' (line 947)
    ctp_500629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 18), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 947)
    getitem___500630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 947, 18), ctp_500629, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 947)
    subscript_call_result_500631 = invoke(stypy.reporting.localization.Localization(__file__, 947, 18), getitem___500630, (int_500627, slice_500628))
    
    # Applying the binary operator '*' (line 947)
    result_mul_500632 = python_operator(stypy.reporting.localization.Localization(__file__, 947, 10), '*', float_500626, subscript_call_result_500631)
    
    float_500633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 947, 29), 'float')
    
    # Obtaining the type of the subscript
    int_500634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 947, 41), 'int')
    slice_500635 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 947, 37), None, None, None)
    # Getting the type of 'ctp' (line 947)
    ctp_500636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 37), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 947)
    getitem___500637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 947, 37), ctp_500636, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 947)
    subscript_call_result_500638 = invoke(stypy.reporting.localization.Localization(__file__, 947, 37), getitem___500637, (int_500634, slice_500635))
    
    # Applying the binary operator '*' (line 947)
    result_mul_500639 = python_operator(stypy.reporting.localization.Localization(__file__, 947, 29), '*', float_500633, subscript_call_result_500638)
    
    # Applying the binary operator '+' (line 947)
    result_add_500640 = python_operator(stypy.reporting.localization.Localization(__file__, 947, 10), '+', result_mul_500632, result_mul_500639)
    
    float_500641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 947, 48), 'float')
    
    # Obtaining the type of the subscript
    int_500642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 947, 60), 'int')
    slice_500643 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 947, 56), None, None, None)
    # Getting the type of 'ctp' (line 947)
    ctp_500644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 56), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 947)
    getitem___500645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 947, 56), ctp_500644, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 947)
    subscript_call_result_500646 = invoke(stypy.reporting.localization.Localization(__file__, 947, 56), getitem___500645, (int_500642, slice_500643))
    
    # Applying the binary operator '*' (line 947)
    result_mul_500647 = python_operator(stypy.reporting.localization.Localization(__file__, 947, 48), '*', float_500641, subscript_call_result_500646)
    
    # Applying the binary operator '-' (line 947)
    result_sub_500648 = python_operator(stypy.reporting.localization.Localization(__file__, 947, 46), '-', result_add_500640, result_mul_500647)
    
    float_500649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 947, 67), 'float')
    
    # Obtaining the type of the subscript
    int_500650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 947, 80), 'int')
    slice_500651 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 947, 76), None, None, None)
    # Getting the type of 'ctp' (line 947)
    ctp_500652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 76), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 947)
    getitem___500653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 947, 76), ctp_500652, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 947)
    subscript_call_result_500654 = invoke(stypy.reporting.localization.Localization(__file__, 947, 76), getitem___500653, (int_500650, slice_500651))
    
    # Applying the binary operator '*' (line 947)
    result_mul_500655 = python_operator(stypy.reporting.localization.Localization(__file__, 947, 67), '*', float_500649, subscript_call_result_500654)
    
    # Applying the binary operator '+' (line 947)
    result_add_500656 = python_operator(stypy.reporting.localization.Localization(__file__, 947, 65), '+', result_sub_500648, result_mul_500655)
    
    float_500657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 947, 87), 'float')
    # Getting the type of 'ct' (line 947)
    ct_500658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 96), 'ct')
    # Applying the binary operator '*' (line 947)
    result_mul_500659 = python_operator(stypy.reporting.localization.Localization(__file__, 947, 87), '*', float_500657, ct_500658)
    
    # Applying the binary operator '+' (line 947)
    result_add_500660 = python_operator(stypy.reporting.localization.Localization(__file__, 947, 85), '+', result_add_500656, result_mul_500659)
    
    float_500661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 947, 102), 'float')
    # Applying the binary operator 'div' (line 947)
    result_div_500662 = python_operator(stypy.reporting.localization.Localization(__file__, 947, 9), 'div', result_add_500660, float_500661)
    
    # Assigning a type to the variable 'v3' (line 947)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 947, 4), 'v3', result_div_500662)
    
    # Assigning a BinOp to a Name (line 948):
    
    # Assigning a BinOp to a Name (line 948):
    float_500663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 10), 'float')
    
    # Obtaining the type of the subscript
    int_500664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 24), 'int')
    slice_500665 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 948, 20), None, None, None)
    # Getting the type of 'ctp' (line 948)
    ctp_500666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 20), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 948)
    getitem___500667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 948, 20), ctp_500666, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 948)
    subscript_call_result_500668 = invoke(stypy.reporting.localization.Localization(__file__, 948, 20), getitem___500667, (int_500664, slice_500665))
    
    # Applying the binary operator '*' (line 948)
    result_mul_500669 = python_operator(stypy.reporting.localization.Localization(__file__, 948, 10), '*', float_500663, subscript_call_result_500668)
    
    float_500670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 32), 'float')
    
    # Obtaining the type of the subscript
    int_500671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 45), 'int')
    slice_500672 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 948, 41), None, None, None)
    # Getting the type of 'ctp' (line 948)
    ctp_500673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 41), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 948)
    getitem___500674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 948, 41), ctp_500673, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 948)
    subscript_call_result_500675 = invoke(stypy.reporting.localization.Localization(__file__, 948, 41), getitem___500674, (int_500671, slice_500672))
    
    # Applying the binary operator '*' (line 948)
    result_mul_500676 = python_operator(stypy.reporting.localization.Localization(__file__, 948, 32), '*', float_500670, subscript_call_result_500675)
    
    # Applying the binary operator '+' (line 948)
    result_add_500677 = python_operator(stypy.reporting.localization.Localization(__file__, 948, 10), '+', result_mul_500669, result_mul_500676)
    
    float_500678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 52), 'float')
    
    # Obtaining the type of the subscript
    int_500679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 65), 'int')
    slice_500680 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 948, 61), None, None, None)
    # Getting the type of 'ctp' (line 948)
    ctp_500681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 61), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 948)
    getitem___500682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 948, 61), ctp_500681, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 948)
    subscript_call_result_500683 = invoke(stypy.reporting.localization.Localization(__file__, 948, 61), getitem___500682, (int_500679, slice_500680))
    
    # Applying the binary operator '*' (line 948)
    result_mul_500684 = python_operator(stypy.reporting.localization.Localization(__file__, 948, 52), '*', float_500678, subscript_call_result_500683)
    
    # Applying the binary operator '-' (line 948)
    result_sub_500685 = python_operator(stypy.reporting.localization.Localization(__file__, 948, 50), '-', result_add_500677, result_mul_500684)
    
    float_500686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 72), 'float')
    
    # Obtaining the type of the subscript
    int_500687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 87), 'int')
    slice_500688 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 948, 83), None, None, None)
    # Getting the type of 'ctp' (line 948)
    ctp_500689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 83), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 948)
    getitem___500690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 948, 83), ctp_500689, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 948)
    subscript_call_result_500691 = invoke(stypy.reporting.localization.Localization(__file__, 948, 83), getitem___500690, (int_500687, slice_500688))
    
    # Applying the binary operator '*' (line 948)
    result_mul_500692 = python_operator(stypy.reporting.localization.Localization(__file__, 948, 72), '*', float_500686, subscript_call_result_500691)
    
    # Applying the binary operator '-' (line 948)
    result_sub_500693 = python_operator(stypy.reporting.localization.Localization(__file__, 948, 70), '-', result_sub_500685, result_mul_500692)
    
    float_500694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 94), 'float')
    
    # Obtaining the type of the subscript
    int_500695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 110), 'int')
    slice_500696 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 948, 106), None, None, None)
    # Getting the type of 'ctp' (line 948)
    ctp_500697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 106), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 948)
    getitem___500698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 948, 106), ctp_500697, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 948)
    subscript_call_result_500699 = invoke(stypy.reporting.localization.Localization(__file__, 948, 106), getitem___500698, (int_500695, slice_500696))
    
    # Applying the binary operator '*' (line 948)
    result_mul_500700 = python_operator(stypy.reporting.localization.Localization(__file__, 948, 94), '*', float_500694, subscript_call_result_500699)
    
    # Applying the binary operator '-' (line 948)
    result_sub_500701 = python_operator(stypy.reporting.localization.Localization(__file__, 948, 92), '-', result_sub_500693, result_mul_500700)
    
    int_500702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 117), 'int')
    # Applying the binary operator '-' (line 948)
    result_sub_500703 = python_operator(stypy.reporting.localization.Localization(__file__, 948, 115), '-', result_sub_500701, int_500702)
    
    float_500704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 129), 'float')
    # Applying the binary operator 'div' (line 948)
    result_div_500705 = python_operator(stypy.reporting.localization.Localization(__file__, 948, 9), 'div', result_sub_500703, float_500704)
    
    # Assigning a type to the variable 'v4' (line 948)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 948, 4), 'v4', result_div_500705)
    
    # Assigning a BinOp to a Name (line 949):
    
    # Assigning a BinOp to a Name (line 949):
    float_500706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 10), 'float')
    
    # Obtaining the type of the subscript
    int_500707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 25), 'int')
    slice_500708 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 949, 21), None, None, None)
    # Getting the type of 'ctp' (line 949)
    ctp_500709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 21), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 949)
    getitem___500710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 21), ctp_500709, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 949)
    subscript_call_result_500711 = invoke(stypy.reporting.localization.Localization(__file__, 949, 21), getitem___500710, (int_500707, slice_500708))
    
    # Applying the binary operator '*' (line 949)
    result_mul_500712 = python_operator(stypy.reporting.localization.Localization(__file__, 949, 10), '*', float_500706, subscript_call_result_500711)
    
    float_500713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 33), 'float')
    
    # Obtaining the type of the subscript
    int_500714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 49), 'int')
    slice_500715 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 949, 45), None, None, None)
    # Getting the type of 'ctp' (line 949)
    ctp_500716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 45), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 949)
    getitem___500717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 45), ctp_500716, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 949)
    subscript_call_result_500718 = invoke(stypy.reporting.localization.Localization(__file__, 949, 45), getitem___500717, (int_500714, slice_500715))
    
    # Applying the binary operator '*' (line 949)
    result_mul_500719 = python_operator(stypy.reporting.localization.Localization(__file__, 949, 33), '*', float_500713, subscript_call_result_500718)
    
    # Applying the binary operator '-' (line 949)
    result_sub_500720 = python_operator(stypy.reporting.localization.Localization(__file__, 949, 10), '-', result_mul_500712, result_mul_500719)
    
    float_500721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 57), 'float')
    
    # Obtaining the type of the subscript
    int_500722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 74), 'int')
    slice_500723 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 949, 70), None, None, None)
    # Getting the type of 'ctp' (line 949)
    ctp_500724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 70), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 949)
    getitem___500725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 70), ctp_500724, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 949)
    subscript_call_result_500726 = invoke(stypy.reporting.localization.Localization(__file__, 949, 70), getitem___500725, (int_500722, slice_500723))
    
    # Applying the binary operator '*' (line 949)
    result_mul_500727 = python_operator(stypy.reporting.localization.Localization(__file__, 949, 57), '*', float_500721, subscript_call_result_500726)
    
    # Applying the binary operator '+' (line 949)
    result_add_500728 = python_operator(stypy.reporting.localization.Localization(__file__, 949, 55), '+', result_sub_500720, result_mul_500727)
    
    float_500729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 82), 'float')
    
    # Obtaining the type of the subscript
    int_500730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 99), 'int')
    slice_500731 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 949, 95), None, None, None)
    # Getting the type of 'ctp' (line 949)
    ctp_500732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 95), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 949)
    getitem___500733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 95), ctp_500732, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 949)
    subscript_call_result_500734 = invoke(stypy.reporting.localization.Localization(__file__, 949, 95), getitem___500733, (int_500730, slice_500731))
    
    # Applying the binary operator '*' (line 949)
    result_mul_500735 = python_operator(stypy.reporting.localization.Localization(__file__, 949, 82), '*', float_500729, subscript_call_result_500734)
    
    # Applying the binary operator '-' (line 949)
    result_sub_500736 = python_operator(stypy.reporting.localization.Localization(__file__, 949, 80), '-', result_add_500728, result_mul_500735)
    
    float_500737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 106), 'float')
    
    # Obtaining the type of the subscript
    int_500738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 123), 'int')
    slice_500739 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 949, 119), None, None, None)
    # Getting the type of 'ctp' (line 949)
    ctp_500740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 119), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 949)
    getitem___500741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 119), ctp_500740, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 949)
    subscript_call_result_500742 = invoke(stypy.reporting.localization.Localization(__file__, 949, 119), getitem___500741, (int_500738, slice_500739))
    
    # Applying the binary operator '*' (line 949)
    result_mul_500743 = python_operator(stypy.reporting.localization.Localization(__file__, 949, 106), '*', float_500737, subscript_call_result_500742)
    
    # Applying the binary operator '+' (line 949)
    result_add_500744 = python_operator(stypy.reporting.localization.Localization(__file__, 949, 104), '+', result_sub_500736, result_mul_500743)
    
    float_500745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 950, 12), 'float')
    
    # Obtaining the type of the subscript
    int_500746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 950, 30), 'int')
    slice_500747 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 950, 26), None, None, None)
    # Getting the type of 'ctp' (line 950)
    ctp_500748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 26), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 950)
    getitem___500749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 26), ctp_500748, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 950)
    subscript_call_result_500750 = invoke(stypy.reporting.localization.Localization(__file__, 950, 26), getitem___500749, (int_500746, slice_500747))
    
    # Applying the binary operator '*' (line 950)
    result_mul_500751 = python_operator(stypy.reporting.localization.Localization(__file__, 950, 12), '*', float_500745, subscript_call_result_500750)
    
    # Applying the binary operator '+' (line 950)
    result_add_500752 = python_operator(stypy.reporting.localization.Localization(__file__, 950, 10), '+', result_add_500744, result_mul_500751)
    
    float_500753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 950, 37), 'float')
    
    # Obtaining the type of the subscript
    int_500754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 950, 56), 'int')
    slice_500755 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 950, 52), None, None, None)
    # Getting the type of 'ctp' (line 950)
    ctp_500756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 52), 'ctp')
    # Obtaining the member '__getitem__' of a type (line 950)
    getitem___500757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 52), ctp_500756, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 950)
    subscript_call_result_500758 = invoke(stypy.reporting.localization.Localization(__file__, 950, 52), getitem___500757, (int_500754, slice_500755))
    
    # Applying the binary operator '*' (line 950)
    result_mul_500759 = python_operator(stypy.reporting.localization.Localization(__file__, 950, 37), '*', float_500753, subscript_call_result_500758)
    
    # Applying the binary operator '+' (line 950)
    result_add_500760 = python_operator(stypy.reporting.localization.Localization(__file__, 950, 35), '+', result_add_500752, result_mul_500759)
    
    long_500761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 950, 63), 'long')
    # Getting the type of 'ct' (line 950)
    ct_500762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 75), 'ct')
    # Applying the binary operator '*' (line 950)
    result_mul_500763 = python_operator(stypy.reporting.localization.Localization(__file__, 950, 63), '*', long_500761, ct_500762)
    
    # Applying the binary operator '+' (line 950)
    result_add_500764 = python_operator(stypy.reporting.localization.Localization(__file__, 950, 61), '+', result_add_500760, result_mul_500763)
    
    float_500765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 950, 81), 'float')
    # Applying the binary operator 'div' (line 949)
    result_div_500766 = python_operator(stypy.reporting.localization.Localization(__file__, 949, 9), 'div', result_add_500764, float_500765)
    
    # Assigning a type to the variable 'v5' (line 949)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 949, 4), 'v5', result_div_500766)
    
    # Assigning a Call to a Tuple (line 952):
    
    # Assigning a Subscript to a Name (line 952):
    
    # Obtaining the type of the subscript
    int_500767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 4), 'int')
    
    # Call to airy(...): (line 952)
    # Processing the call arguments (line 952)
    # Getting the type of 'mu' (line 952)
    mu_500769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 28), 'mu', False)
    float_500770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 33), 'float')
    float_500771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 37), 'float')
    # Applying the binary operator 'div' (line 952)
    result_div_500772 = python_operator(stypy.reporting.localization.Localization(__file__, 952, 33), 'div', float_500770, float_500771)
    
    # Applying the binary operator '**' (line 952)
    result_pow_500773 = python_operator(stypy.reporting.localization.Localization(__file__, 952, 28), '**', mu_500769, result_div_500772)
    
    # Getting the type of 'zeta' (line 952)
    zeta_500774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 44), 'zeta', False)
    # Applying the binary operator '*' (line 952)
    result_mul_500775 = python_operator(stypy.reporting.localization.Localization(__file__, 952, 28), '*', result_pow_500773, zeta_500774)
    
    # Processing the call keyword arguments (line 952)
    kwargs_500776 = {}
    # Getting the type of 'airy' (line 952)
    airy_500768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 23), 'airy', False)
    # Calling airy(args, kwargs) (line 952)
    airy_call_result_500777 = invoke(stypy.reporting.localization.Localization(__file__, 952, 23), airy_500768, *[result_mul_500775], **kwargs_500776)
    
    # Obtaining the member '__getitem__' of a type (line 952)
    getitem___500778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 4), airy_call_result_500777, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 952)
    subscript_call_result_500779 = invoke(stypy.reporting.localization.Localization(__file__, 952, 4), getitem___500778, int_500767)
    
    # Assigning a type to the variable 'tuple_var_assignment_498414' (line 952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 4), 'tuple_var_assignment_498414', subscript_call_result_500779)
    
    # Assigning a Subscript to a Name (line 952):
    
    # Obtaining the type of the subscript
    int_500780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 4), 'int')
    
    # Call to airy(...): (line 952)
    # Processing the call arguments (line 952)
    # Getting the type of 'mu' (line 952)
    mu_500782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 28), 'mu', False)
    float_500783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 33), 'float')
    float_500784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 37), 'float')
    # Applying the binary operator 'div' (line 952)
    result_div_500785 = python_operator(stypy.reporting.localization.Localization(__file__, 952, 33), 'div', float_500783, float_500784)
    
    # Applying the binary operator '**' (line 952)
    result_pow_500786 = python_operator(stypy.reporting.localization.Localization(__file__, 952, 28), '**', mu_500782, result_div_500785)
    
    # Getting the type of 'zeta' (line 952)
    zeta_500787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 44), 'zeta', False)
    # Applying the binary operator '*' (line 952)
    result_mul_500788 = python_operator(stypy.reporting.localization.Localization(__file__, 952, 28), '*', result_pow_500786, zeta_500787)
    
    # Processing the call keyword arguments (line 952)
    kwargs_500789 = {}
    # Getting the type of 'airy' (line 952)
    airy_500781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 23), 'airy', False)
    # Calling airy(args, kwargs) (line 952)
    airy_call_result_500790 = invoke(stypy.reporting.localization.Localization(__file__, 952, 23), airy_500781, *[result_mul_500788], **kwargs_500789)
    
    # Obtaining the member '__getitem__' of a type (line 952)
    getitem___500791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 4), airy_call_result_500790, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 952)
    subscript_call_result_500792 = invoke(stypy.reporting.localization.Localization(__file__, 952, 4), getitem___500791, int_500780)
    
    # Assigning a type to the variable 'tuple_var_assignment_498415' (line 952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 4), 'tuple_var_assignment_498415', subscript_call_result_500792)
    
    # Assigning a Subscript to a Name (line 952):
    
    # Obtaining the type of the subscript
    int_500793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 4), 'int')
    
    # Call to airy(...): (line 952)
    # Processing the call arguments (line 952)
    # Getting the type of 'mu' (line 952)
    mu_500795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 28), 'mu', False)
    float_500796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 33), 'float')
    float_500797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 37), 'float')
    # Applying the binary operator 'div' (line 952)
    result_div_500798 = python_operator(stypy.reporting.localization.Localization(__file__, 952, 33), 'div', float_500796, float_500797)
    
    # Applying the binary operator '**' (line 952)
    result_pow_500799 = python_operator(stypy.reporting.localization.Localization(__file__, 952, 28), '**', mu_500795, result_div_500798)
    
    # Getting the type of 'zeta' (line 952)
    zeta_500800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 44), 'zeta', False)
    # Applying the binary operator '*' (line 952)
    result_mul_500801 = python_operator(stypy.reporting.localization.Localization(__file__, 952, 28), '*', result_pow_500799, zeta_500800)
    
    # Processing the call keyword arguments (line 952)
    kwargs_500802 = {}
    # Getting the type of 'airy' (line 952)
    airy_500794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 23), 'airy', False)
    # Calling airy(args, kwargs) (line 952)
    airy_call_result_500803 = invoke(stypy.reporting.localization.Localization(__file__, 952, 23), airy_500794, *[result_mul_500801], **kwargs_500802)
    
    # Obtaining the member '__getitem__' of a type (line 952)
    getitem___500804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 4), airy_call_result_500803, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 952)
    subscript_call_result_500805 = invoke(stypy.reporting.localization.Localization(__file__, 952, 4), getitem___500804, int_500793)
    
    # Assigning a type to the variable 'tuple_var_assignment_498416' (line 952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 4), 'tuple_var_assignment_498416', subscript_call_result_500805)
    
    # Assigning a Subscript to a Name (line 952):
    
    # Obtaining the type of the subscript
    int_500806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 4), 'int')
    
    # Call to airy(...): (line 952)
    # Processing the call arguments (line 952)
    # Getting the type of 'mu' (line 952)
    mu_500808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 28), 'mu', False)
    float_500809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 33), 'float')
    float_500810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 37), 'float')
    # Applying the binary operator 'div' (line 952)
    result_div_500811 = python_operator(stypy.reporting.localization.Localization(__file__, 952, 33), 'div', float_500809, float_500810)
    
    # Applying the binary operator '**' (line 952)
    result_pow_500812 = python_operator(stypy.reporting.localization.Localization(__file__, 952, 28), '**', mu_500808, result_div_500811)
    
    # Getting the type of 'zeta' (line 952)
    zeta_500813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 44), 'zeta', False)
    # Applying the binary operator '*' (line 952)
    result_mul_500814 = python_operator(stypy.reporting.localization.Localization(__file__, 952, 28), '*', result_pow_500812, zeta_500813)
    
    # Processing the call keyword arguments (line 952)
    kwargs_500815 = {}
    # Getting the type of 'airy' (line 952)
    airy_500807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 23), 'airy', False)
    # Calling airy(args, kwargs) (line 952)
    airy_call_result_500816 = invoke(stypy.reporting.localization.Localization(__file__, 952, 23), airy_500807, *[result_mul_500814], **kwargs_500815)
    
    # Obtaining the member '__getitem__' of a type (line 952)
    getitem___500817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 4), airy_call_result_500816, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 952)
    subscript_call_result_500818 = invoke(stypy.reporting.localization.Localization(__file__, 952, 4), getitem___500817, int_500806)
    
    # Assigning a type to the variable 'tuple_var_assignment_498417' (line 952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 4), 'tuple_var_assignment_498417', subscript_call_result_500818)
    
    # Assigning a Name to a Name (line 952):
    # Getting the type of 'tuple_var_assignment_498414' (line 952)
    tuple_var_assignment_498414_500819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 4), 'tuple_var_assignment_498414')
    # Assigning a type to the variable 'Ai' (line 952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 4), 'Ai', tuple_var_assignment_498414_500819)
    
    # Assigning a Name to a Name (line 952):
    # Getting the type of 'tuple_var_assignment_498415' (line 952)
    tuple_var_assignment_498415_500820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 4), 'tuple_var_assignment_498415')
    # Assigning a type to the variable 'Aip' (line 952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 8), 'Aip', tuple_var_assignment_498415_500820)
    
    # Assigning a Name to a Name (line 952):
    # Getting the type of 'tuple_var_assignment_498416' (line 952)
    tuple_var_assignment_498416_500821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 4), 'tuple_var_assignment_498416')
    # Assigning a type to the variable 'Bi' (line 952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 13), 'Bi', tuple_var_assignment_498416_500821)
    
    # Assigning a Name to a Name (line 952):
    # Getting the type of 'tuple_var_assignment_498417' (line 952)
    tuple_var_assignment_498417_500822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 4), 'tuple_var_assignment_498417')
    # Assigning a type to the variable 'Bip' (line 952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 17), 'Bip', tuple_var_assignment_498417_500822)
    
    # Assigning a BinOp to a Name (line 954):
    
    # Assigning a BinOp to a Name (line 954):
    float_500823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 954, 8), 'float')
    
    # Call to sqrt(...): (line 954)
    # Processing the call arguments (line 954)
    # Getting the type of 'pi' (line 954)
    pi_500825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 17), 'pi', False)
    # Processing the call keyword arguments (line 954)
    kwargs_500826 = {}
    # Getting the type of 'sqrt' (line 954)
    sqrt_500824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 12), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 954)
    sqrt_call_result_500827 = invoke(stypy.reporting.localization.Localization(__file__, 954, 12), sqrt_500824, *[pi_500825], **kwargs_500826)
    
    # Applying the binary operator '*' (line 954)
    result_mul_500828 = python_operator(stypy.reporting.localization.Localization(__file__, 954, 8), '*', float_500823, sqrt_call_result_500827)
    
    # Getting the type of 'mu' (line 954)
    mu_500829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 23), 'mu')
    float_500830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 954, 28), 'float')
    float_500831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 954, 32), 'float')
    # Applying the binary operator 'div' (line 954)
    result_div_500832 = python_operator(stypy.reporting.localization.Localization(__file__, 954, 28), 'div', float_500830, float_500831)
    
    # Applying the binary operator '**' (line 954)
    result_pow_500833 = python_operator(stypy.reporting.localization.Localization(__file__, 954, 23), '**', mu_500829, result_div_500832)
    
    # Applying the binary operator '*' (line 954)
    result_mul_500834 = python_operator(stypy.reporting.localization.Localization(__file__, 954, 21), '*', result_mul_500828, result_pow_500833)
    
    # Getting the type of 'phi' (line 954)
    phi_500835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 39), 'phi')
    # Applying the binary operator '*' (line 954)
    result_mul_500836 = python_operator(stypy.reporting.localization.Localization(__file__, 954, 37), '*', result_mul_500834, phi_500835)
    
    # Assigning a type to the variable 'P' (line 954)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 954, 4), 'P', result_mul_500836)
    
    # Assigning a BinOp to a Name (line 957):
    
    # Assigning a BinOp to a Name (line 957):
    # Getting the type of 'phi' (line 957)
    phi_500837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 11), 'phi')
    
    # Call to reshape(...): (line 957)
    # Processing the call arguments (line 957)
    
    # Obtaining an instance of the builtin type 'tuple' (line 957)
    tuple_500845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 44), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 957)
    # Adding element type (line 957)
    int_500846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 44), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 957, 44), tuple_500845, int_500846)
    # Adding element type (line 957)
    int_500847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 47), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 957, 44), tuple_500845, int_500847)
    
    # Processing the call keyword arguments (line 957)
    kwargs_500848 = {}
    
    # Call to arange(...): (line 957)
    # Processing the call arguments (line 957)
    int_500839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 25), 'int')
    int_500840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 28), 'int')
    int_500841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 32), 'int')
    # Processing the call keyword arguments (line 957)
    kwargs_500842 = {}
    # Getting the type of 'arange' (line 957)
    arange_500838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 18), 'arange', False)
    # Calling arange(args, kwargs) (line 957)
    arange_call_result_500843 = invoke(stypy.reporting.localization.Localization(__file__, 957, 18), arange_500838, *[int_500839, int_500840, int_500841], **kwargs_500842)
    
    # Obtaining the member 'reshape' of a type (line 957)
    reshape_500844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 18), arange_call_result_500843, 'reshape')
    # Calling reshape(args, kwargs) (line 957)
    reshape_call_result_500849 = invoke(stypy.reporting.localization.Localization(__file__, 957, 18), reshape_500844, *[tuple_500845], **kwargs_500848)
    
    # Applying the binary operator '**' (line 957)
    result_pow_500850 = python_operator(stypy.reporting.localization.Localization(__file__, 957, 11), '**', phi_500837, reshape_call_result_500849)
    
    # Assigning a type to the variable 'phip' (line 957)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 4), 'phip', result_pow_500850)
    
    # Assigning a BinOp to a Name (line 958):
    
    # Assigning a BinOp to a Name (line 958):
    # Getting the type of 'b0' (line 958)
    b0_500851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 9), 'b0')
    # Getting the type of 'u0' (line 958)
    u0_500852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 12), 'u0')
    # Applying the binary operator '*' (line 958)
    result_mul_500853 = python_operator(stypy.reporting.localization.Localization(__file__, 958, 9), '*', b0_500851, u0_500852)
    
    # Assigning a type to the variable 'A0' (line 958)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 4), 'A0', result_mul_500853)
    
    # Assigning a BinOp to a Name (line 959):
    
    # Assigning a BinOp to a Name (line 959):
    # Getting the type of 'b2' (line 959)
    b2_500854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 10), 'b2')
    # Getting the type of 'u0' (line 959)
    u0_500855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 13), 'u0')
    # Applying the binary operator '*' (line 959)
    result_mul_500856 = python_operator(stypy.reporting.localization.Localization(__file__, 959, 10), '*', b2_500854, u0_500855)
    
    
    # Obtaining the type of the subscript
    int_500857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 959, 23), 'int')
    slice_500858 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 959, 18), None, None, None)
    # Getting the type of 'phip' (line 959)
    phip_500859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 18), 'phip')
    # Obtaining the member '__getitem__' of a type (line 959)
    getitem___500860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 18), phip_500859, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 959)
    subscript_call_result_500861 = invoke(stypy.reporting.localization.Localization(__file__, 959, 18), getitem___500860, (int_500857, slice_500858))
    
    # Getting the type of 'b1' (line 959)
    b1_500862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 28), 'b1')
    # Applying the binary operator '*' (line 959)
    result_mul_500863 = python_operator(stypy.reporting.localization.Localization(__file__, 959, 18), '*', subscript_call_result_500861, b1_500862)
    
    # Getting the type of 'u1' (line 959)
    u1_500864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 31), 'u1')
    # Applying the binary operator '*' (line 959)
    result_mul_500865 = python_operator(stypy.reporting.localization.Localization(__file__, 959, 30), '*', result_mul_500863, u1_500864)
    
    # Applying the binary operator '+' (line 959)
    result_add_500866 = python_operator(stypy.reporting.localization.Localization(__file__, 959, 10), '+', result_mul_500856, result_mul_500865)
    
    
    # Obtaining the type of the subscript
    int_500867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 959, 41), 'int')
    slice_500868 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 959, 36), None, None, None)
    # Getting the type of 'phip' (line 959)
    phip_500869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 36), 'phip')
    # Obtaining the member '__getitem__' of a type (line 959)
    getitem___500870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 36), phip_500869, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 959)
    subscript_call_result_500871 = invoke(stypy.reporting.localization.Localization(__file__, 959, 36), getitem___500870, (int_500867, slice_500868))
    
    # Getting the type of 'b0' (line 959)
    b0_500872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 46), 'b0')
    # Applying the binary operator '*' (line 959)
    result_mul_500873 = python_operator(stypy.reporting.localization.Localization(__file__, 959, 36), '*', subscript_call_result_500871, b0_500872)
    
    # Getting the type of 'u2' (line 959)
    u2_500874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 49), 'u2')
    # Applying the binary operator '*' (line 959)
    result_mul_500875 = python_operator(stypy.reporting.localization.Localization(__file__, 959, 48), '*', result_mul_500873, u2_500874)
    
    # Applying the binary operator '+' (line 959)
    result_add_500876 = python_operator(stypy.reporting.localization.Localization(__file__, 959, 34), '+', result_add_500866, result_mul_500875)
    
    # Getting the type of 'zeta' (line 959)
    zeta_500877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 55), 'zeta')
    int_500878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 959, 61), 'int')
    # Applying the binary operator '**' (line 959)
    result_pow_500879 = python_operator(stypy.reporting.localization.Localization(__file__, 959, 55), '**', zeta_500877, int_500878)
    
    # Applying the binary operator 'div' (line 959)
    result_div_500880 = python_operator(stypy.reporting.localization.Localization(__file__, 959, 9), 'div', result_add_500876, result_pow_500879)
    
    # Assigning a type to the variable 'A1' (line 959)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 959, 4), 'A1', result_div_500880)
    
    # Assigning a BinOp to a Name (line 960):
    
    # Assigning a BinOp to a Name (line 960):
    # Getting the type of 'b4' (line 960)
    b4_500881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 10), 'b4')
    # Getting the type of 'u0' (line 960)
    u0_500882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 13), 'u0')
    # Applying the binary operator '*' (line 960)
    result_mul_500883 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 10), '*', b4_500881, u0_500882)
    
    
    # Obtaining the type of the subscript
    int_500884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 960, 23), 'int')
    slice_500885 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 960, 18), None, None, None)
    # Getting the type of 'phip' (line 960)
    phip_500886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 18), 'phip')
    # Obtaining the member '__getitem__' of a type (line 960)
    getitem___500887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 18), phip_500886, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 960)
    subscript_call_result_500888 = invoke(stypy.reporting.localization.Localization(__file__, 960, 18), getitem___500887, (int_500884, slice_500885))
    
    # Getting the type of 'b3' (line 960)
    b3_500889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 28), 'b3')
    # Applying the binary operator '*' (line 960)
    result_mul_500890 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 18), '*', subscript_call_result_500888, b3_500889)
    
    # Getting the type of 'u1' (line 960)
    u1_500891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 31), 'u1')
    # Applying the binary operator '*' (line 960)
    result_mul_500892 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 30), '*', result_mul_500890, u1_500891)
    
    # Applying the binary operator '+' (line 960)
    result_add_500893 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 10), '+', result_mul_500883, result_mul_500892)
    
    
    # Obtaining the type of the subscript
    int_500894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 960, 41), 'int')
    slice_500895 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 960, 36), None, None, None)
    # Getting the type of 'phip' (line 960)
    phip_500896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 36), 'phip')
    # Obtaining the member '__getitem__' of a type (line 960)
    getitem___500897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 36), phip_500896, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 960)
    subscript_call_result_500898 = invoke(stypy.reporting.localization.Localization(__file__, 960, 36), getitem___500897, (int_500894, slice_500895))
    
    # Getting the type of 'b2' (line 960)
    b2_500899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 46), 'b2')
    # Applying the binary operator '*' (line 960)
    result_mul_500900 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 36), '*', subscript_call_result_500898, b2_500899)
    
    # Getting the type of 'u2' (line 960)
    u2_500901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 49), 'u2')
    # Applying the binary operator '*' (line 960)
    result_mul_500902 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 48), '*', result_mul_500900, u2_500901)
    
    # Applying the binary operator '+' (line 960)
    result_add_500903 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 34), '+', result_add_500893, result_mul_500902)
    
    
    # Obtaining the type of the subscript
    int_500904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 960, 59), 'int')
    slice_500905 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 960, 54), None, None, None)
    # Getting the type of 'phip' (line 960)
    phip_500906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 54), 'phip')
    # Obtaining the member '__getitem__' of a type (line 960)
    getitem___500907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 54), phip_500906, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 960)
    subscript_call_result_500908 = invoke(stypy.reporting.localization.Localization(__file__, 960, 54), getitem___500907, (int_500904, slice_500905))
    
    # Getting the type of 'b1' (line 960)
    b1_500909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 64), 'b1')
    # Applying the binary operator '*' (line 960)
    result_mul_500910 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 54), '*', subscript_call_result_500908, b1_500909)
    
    # Getting the type of 'u3' (line 960)
    u3_500911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 67), 'u3')
    # Applying the binary operator '*' (line 960)
    result_mul_500912 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 66), '*', result_mul_500910, u3_500911)
    
    # Applying the binary operator '+' (line 960)
    result_add_500913 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 52), '+', result_add_500903, result_mul_500912)
    
    
    # Obtaining the type of the subscript
    int_500914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 960, 77), 'int')
    slice_500915 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 960, 72), None, None, None)
    # Getting the type of 'phip' (line 960)
    phip_500916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 72), 'phip')
    # Obtaining the member '__getitem__' of a type (line 960)
    getitem___500917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 72), phip_500916, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 960)
    subscript_call_result_500918 = invoke(stypy.reporting.localization.Localization(__file__, 960, 72), getitem___500917, (int_500914, slice_500915))
    
    # Getting the type of 'b0' (line 960)
    b0_500919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 82), 'b0')
    # Applying the binary operator '*' (line 960)
    result_mul_500920 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 72), '*', subscript_call_result_500918, b0_500919)
    
    # Getting the type of 'u4' (line 960)
    u4_500921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 85), 'u4')
    # Applying the binary operator '*' (line 960)
    result_mul_500922 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 84), '*', result_mul_500920, u4_500921)
    
    # Applying the binary operator '+' (line 960)
    result_add_500923 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 70), '+', result_add_500913, result_mul_500922)
    
    # Getting the type of 'zeta' (line 960)
    zeta_500924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 91), 'zeta')
    int_500925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 960, 97), 'int')
    # Applying the binary operator '**' (line 960)
    result_pow_500926 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 91), '**', zeta_500924, int_500925)
    
    # Applying the binary operator 'div' (line 960)
    result_div_500927 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 9), 'div', result_add_500923, result_pow_500926)
    
    # Assigning a type to the variable 'A2' (line 960)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 960, 4), 'A2', result_div_500927)
    
    # Assigning a BinOp to a Name (line 961):
    
    # Assigning a BinOp to a Name (line 961):
    
    # Getting the type of 'a1' (line 961)
    a1_500928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 11), 'a1')
    # Getting the type of 'u0' (line 961)
    u0_500929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 14), 'u0')
    # Applying the binary operator '*' (line 961)
    result_mul_500930 = python_operator(stypy.reporting.localization.Localization(__file__, 961, 11), '*', a1_500928, u0_500929)
    
    
    # Obtaining the type of the subscript
    int_500931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 961, 24), 'int')
    slice_500932 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 961, 19), None, None, None)
    # Getting the type of 'phip' (line 961)
    phip_500933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 19), 'phip')
    # Obtaining the member '__getitem__' of a type (line 961)
    getitem___500934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 961, 19), phip_500933, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 961)
    subscript_call_result_500935 = invoke(stypy.reporting.localization.Localization(__file__, 961, 19), getitem___500934, (int_500931, slice_500932))
    
    # Getting the type of 'a0' (line 961)
    a0_500936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 29), 'a0')
    # Applying the binary operator '*' (line 961)
    result_mul_500937 = python_operator(stypy.reporting.localization.Localization(__file__, 961, 19), '*', subscript_call_result_500935, a0_500936)
    
    # Getting the type of 'u1' (line 961)
    u1_500938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 32), 'u1')
    # Applying the binary operator '*' (line 961)
    result_mul_500939 = python_operator(stypy.reporting.localization.Localization(__file__, 961, 31), '*', result_mul_500937, u1_500938)
    
    # Applying the binary operator '+' (line 961)
    result_add_500940 = python_operator(stypy.reporting.localization.Localization(__file__, 961, 11), '+', result_mul_500930, result_mul_500939)
    
    # Applying the 'usub' unary operator (line 961)
    result___neg___500941 = python_operator(stypy.reporting.localization.Localization(__file__, 961, 9), 'usub', result_add_500940)
    
    # Getting the type of 'zeta' (line 961)
    zeta_500942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 38), 'zeta')
    int_500943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 961, 44), 'int')
    # Applying the binary operator '**' (line 961)
    result_pow_500944 = python_operator(stypy.reporting.localization.Localization(__file__, 961, 38), '**', zeta_500942, int_500943)
    
    # Applying the binary operator 'div' (line 961)
    result_div_500945 = python_operator(stypy.reporting.localization.Localization(__file__, 961, 9), 'div', result___neg___500941, result_pow_500944)
    
    # Assigning a type to the variable 'B0' (line 961)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 961, 4), 'B0', result_div_500945)
    
    # Assigning a BinOp to a Name (line 962):
    
    # Assigning a BinOp to a Name (line 962):
    
    # Getting the type of 'a3' (line 962)
    a3_500946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 11), 'a3')
    # Getting the type of 'u0' (line 962)
    u0_500947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 14), 'u0')
    # Applying the binary operator '*' (line 962)
    result_mul_500948 = python_operator(stypy.reporting.localization.Localization(__file__, 962, 11), '*', a3_500946, u0_500947)
    
    
    # Obtaining the type of the subscript
    int_500949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 962, 24), 'int')
    slice_500950 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 962, 19), None, None, None)
    # Getting the type of 'phip' (line 962)
    phip_500951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 19), 'phip')
    # Obtaining the member '__getitem__' of a type (line 962)
    getitem___500952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 19), phip_500951, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 962)
    subscript_call_result_500953 = invoke(stypy.reporting.localization.Localization(__file__, 962, 19), getitem___500952, (int_500949, slice_500950))
    
    # Getting the type of 'a2' (line 962)
    a2_500954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 29), 'a2')
    # Applying the binary operator '*' (line 962)
    result_mul_500955 = python_operator(stypy.reporting.localization.Localization(__file__, 962, 19), '*', subscript_call_result_500953, a2_500954)
    
    # Getting the type of 'u1' (line 962)
    u1_500956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 32), 'u1')
    # Applying the binary operator '*' (line 962)
    result_mul_500957 = python_operator(stypy.reporting.localization.Localization(__file__, 962, 31), '*', result_mul_500955, u1_500956)
    
    # Applying the binary operator '+' (line 962)
    result_add_500958 = python_operator(stypy.reporting.localization.Localization(__file__, 962, 11), '+', result_mul_500948, result_mul_500957)
    
    
    # Obtaining the type of the subscript
    int_500959 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 962, 42), 'int')
    slice_500960 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 962, 37), None, None, None)
    # Getting the type of 'phip' (line 962)
    phip_500961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 37), 'phip')
    # Obtaining the member '__getitem__' of a type (line 962)
    getitem___500962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 37), phip_500961, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 962)
    subscript_call_result_500963 = invoke(stypy.reporting.localization.Localization(__file__, 962, 37), getitem___500962, (int_500959, slice_500960))
    
    # Getting the type of 'a1' (line 962)
    a1_500964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 47), 'a1')
    # Applying the binary operator '*' (line 962)
    result_mul_500965 = python_operator(stypy.reporting.localization.Localization(__file__, 962, 37), '*', subscript_call_result_500963, a1_500964)
    
    # Getting the type of 'u2' (line 962)
    u2_500966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 50), 'u2')
    # Applying the binary operator '*' (line 962)
    result_mul_500967 = python_operator(stypy.reporting.localization.Localization(__file__, 962, 49), '*', result_mul_500965, u2_500966)
    
    # Applying the binary operator '+' (line 962)
    result_add_500968 = python_operator(stypy.reporting.localization.Localization(__file__, 962, 35), '+', result_add_500958, result_mul_500967)
    
    
    # Obtaining the type of the subscript
    int_500969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 962, 60), 'int')
    slice_500970 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 962, 55), None, None, None)
    # Getting the type of 'phip' (line 962)
    phip_500971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 55), 'phip')
    # Obtaining the member '__getitem__' of a type (line 962)
    getitem___500972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 55), phip_500971, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 962)
    subscript_call_result_500973 = invoke(stypy.reporting.localization.Localization(__file__, 962, 55), getitem___500972, (int_500969, slice_500970))
    
    # Getting the type of 'a0' (line 962)
    a0_500974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 65), 'a0')
    # Applying the binary operator '*' (line 962)
    result_mul_500975 = python_operator(stypy.reporting.localization.Localization(__file__, 962, 55), '*', subscript_call_result_500973, a0_500974)
    
    # Getting the type of 'u3' (line 962)
    u3_500976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 68), 'u3')
    # Applying the binary operator '*' (line 962)
    result_mul_500977 = python_operator(stypy.reporting.localization.Localization(__file__, 962, 67), '*', result_mul_500975, u3_500976)
    
    # Applying the binary operator '+' (line 962)
    result_add_500978 = python_operator(stypy.reporting.localization.Localization(__file__, 962, 53), '+', result_add_500968, result_mul_500977)
    
    # Applying the 'usub' unary operator (line 962)
    result___neg___500979 = python_operator(stypy.reporting.localization.Localization(__file__, 962, 9), 'usub', result_add_500978)
    
    # Getting the type of 'zeta' (line 962)
    zeta_500980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 74), 'zeta')
    int_500981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 962, 80), 'int')
    # Applying the binary operator '**' (line 962)
    result_pow_500982 = python_operator(stypy.reporting.localization.Localization(__file__, 962, 74), '**', zeta_500980, int_500981)
    
    # Applying the binary operator 'div' (line 962)
    result_div_500983 = python_operator(stypy.reporting.localization.Localization(__file__, 962, 9), 'div', result___neg___500979, result_pow_500982)
    
    # Assigning a type to the variable 'B1' (line 962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 4), 'B1', result_div_500983)
    
    # Assigning a BinOp to a Name (line 963):
    
    # Assigning a BinOp to a Name (line 963):
    
    # Getting the type of 'a5' (line 963)
    a5_500984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 11), 'a5')
    # Getting the type of 'u0' (line 963)
    u0_500985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 14), 'u0')
    # Applying the binary operator '*' (line 963)
    result_mul_500986 = python_operator(stypy.reporting.localization.Localization(__file__, 963, 11), '*', a5_500984, u0_500985)
    
    
    # Obtaining the type of the subscript
    int_500987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 963, 24), 'int')
    slice_500988 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 963, 19), None, None, None)
    # Getting the type of 'phip' (line 963)
    phip_500989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 19), 'phip')
    # Obtaining the member '__getitem__' of a type (line 963)
    getitem___500990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 963, 19), phip_500989, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 963)
    subscript_call_result_500991 = invoke(stypy.reporting.localization.Localization(__file__, 963, 19), getitem___500990, (int_500987, slice_500988))
    
    # Getting the type of 'a4' (line 963)
    a4_500992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 29), 'a4')
    # Applying the binary operator '*' (line 963)
    result_mul_500993 = python_operator(stypy.reporting.localization.Localization(__file__, 963, 19), '*', subscript_call_result_500991, a4_500992)
    
    # Getting the type of 'u1' (line 963)
    u1_500994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 32), 'u1')
    # Applying the binary operator '*' (line 963)
    result_mul_500995 = python_operator(stypy.reporting.localization.Localization(__file__, 963, 31), '*', result_mul_500993, u1_500994)
    
    # Applying the binary operator '+' (line 963)
    result_add_500996 = python_operator(stypy.reporting.localization.Localization(__file__, 963, 11), '+', result_mul_500986, result_mul_500995)
    
    
    # Obtaining the type of the subscript
    int_500997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 963, 42), 'int')
    slice_500998 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 963, 37), None, None, None)
    # Getting the type of 'phip' (line 963)
    phip_500999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 37), 'phip')
    # Obtaining the member '__getitem__' of a type (line 963)
    getitem___501000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 963, 37), phip_500999, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 963)
    subscript_call_result_501001 = invoke(stypy.reporting.localization.Localization(__file__, 963, 37), getitem___501000, (int_500997, slice_500998))
    
    # Getting the type of 'a3' (line 963)
    a3_501002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 47), 'a3')
    # Applying the binary operator '*' (line 963)
    result_mul_501003 = python_operator(stypy.reporting.localization.Localization(__file__, 963, 37), '*', subscript_call_result_501001, a3_501002)
    
    # Getting the type of 'u2' (line 963)
    u2_501004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 50), 'u2')
    # Applying the binary operator '*' (line 963)
    result_mul_501005 = python_operator(stypy.reporting.localization.Localization(__file__, 963, 49), '*', result_mul_501003, u2_501004)
    
    # Applying the binary operator '+' (line 963)
    result_add_501006 = python_operator(stypy.reporting.localization.Localization(__file__, 963, 35), '+', result_add_500996, result_mul_501005)
    
    
    # Obtaining the type of the subscript
    int_501007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 963, 60), 'int')
    slice_501008 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 963, 55), None, None, None)
    # Getting the type of 'phip' (line 963)
    phip_501009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 55), 'phip')
    # Obtaining the member '__getitem__' of a type (line 963)
    getitem___501010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 963, 55), phip_501009, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 963)
    subscript_call_result_501011 = invoke(stypy.reporting.localization.Localization(__file__, 963, 55), getitem___501010, (int_501007, slice_501008))
    
    # Getting the type of 'a2' (line 963)
    a2_501012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 65), 'a2')
    # Applying the binary operator '*' (line 963)
    result_mul_501013 = python_operator(stypy.reporting.localization.Localization(__file__, 963, 55), '*', subscript_call_result_501011, a2_501012)
    
    # Getting the type of 'u3' (line 963)
    u3_501014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 68), 'u3')
    # Applying the binary operator '*' (line 963)
    result_mul_501015 = python_operator(stypy.reporting.localization.Localization(__file__, 963, 67), '*', result_mul_501013, u3_501014)
    
    # Applying the binary operator '+' (line 963)
    result_add_501016 = python_operator(stypy.reporting.localization.Localization(__file__, 963, 53), '+', result_add_501006, result_mul_501015)
    
    
    # Obtaining the type of the subscript
    int_501017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 963, 78), 'int')
    slice_501018 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 963, 73), None, None, None)
    # Getting the type of 'phip' (line 963)
    phip_501019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 73), 'phip')
    # Obtaining the member '__getitem__' of a type (line 963)
    getitem___501020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 963, 73), phip_501019, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 963)
    subscript_call_result_501021 = invoke(stypy.reporting.localization.Localization(__file__, 963, 73), getitem___501020, (int_501017, slice_501018))
    
    # Getting the type of 'a1' (line 963)
    a1_501022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 83), 'a1')
    # Applying the binary operator '*' (line 963)
    result_mul_501023 = python_operator(stypy.reporting.localization.Localization(__file__, 963, 73), '*', subscript_call_result_501021, a1_501022)
    
    # Getting the type of 'u4' (line 963)
    u4_501024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 86), 'u4')
    # Applying the binary operator '*' (line 963)
    result_mul_501025 = python_operator(stypy.reporting.localization.Localization(__file__, 963, 85), '*', result_mul_501023, u4_501024)
    
    # Applying the binary operator '+' (line 963)
    result_add_501026 = python_operator(stypy.reporting.localization.Localization(__file__, 963, 71), '+', result_add_501016, result_mul_501025)
    
    
    # Obtaining the type of the subscript
    int_501027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 963, 96), 'int')
    slice_501028 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 963, 91), None, None, None)
    # Getting the type of 'phip' (line 963)
    phip_501029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 91), 'phip')
    # Obtaining the member '__getitem__' of a type (line 963)
    getitem___501030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 963, 91), phip_501029, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 963)
    subscript_call_result_501031 = invoke(stypy.reporting.localization.Localization(__file__, 963, 91), getitem___501030, (int_501027, slice_501028))
    
    # Getting the type of 'a0' (line 963)
    a0_501032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 101), 'a0')
    # Applying the binary operator '*' (line 963)
    result_mul_501033 = python_operator(stypy.reporting.localization.Localization(__file__, 963, 91), '*', subscript_call_result_501031, a0_501032)
    
    # Getting the type of 'u5' (line 963)
    u5_501034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 104), 'u5')
    # Applying the binary operator '*' (line 963)
    result_mul_501035 = python_operator(stypy.reporting.localization.Localization(__file__, 963, 103), '*', result_mul_501033, u5_501034)
    
    # Applying the binary operator '+' (line 963)
    result_add_501036 = python_operator(stypy.reporting.localization.Localization(__file__, 963, 89), '+', result_add_501026, result_mul_501035)
    
    # Applying the 'usub' unary operator (line 963)
    result___neg___501037 = python_operator(stypy.reporting.localization.Localization(__file__, 963, 9), 'usub', result_add_501036)
    
    # Getting the type of 'zeta' (line 963)
    zeta_501038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 110), 'zeta')
    int_501039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 963, 116), 'int')
    # Applying the binary operator '**' (line 963)
    result_pow_501040 = python_operator(stypy.reporting.localization.Localization(__file__, 963, 110), '**', zeta_501038, int_501039)
    
    # Applying the binary operator 'div' (line 963)
    result_div_501041 = python_operator(stypy.reporting.localization.Localization(__file__, 963, 9), 'div', result___neg___501037, result_pow_501040)
    
    # Assigning a type to the variable 'B2' (line 963)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 963, 4), 'B2', result_div_501041)
    
    # Assigning a BinOp to a Name (line 966):
    
    # Assigning a BinOp to a Name (line 966):
    # Getting the type of 'P' (line 966)
    P_501042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 8), 'P')
    # Getting the type of 'Ai' (line 966)
    Ai_501043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 13), 'Ai')
    # Getting the type of 'A0' (line 966)
    A0_501044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 19), 'A0')
    # Getting the type of 'A1' (line 966)
    A1_501045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 24), 'A1')
    # Getting the type of 'mu' (line 966)
    mu_501046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 27), 'mu')
    float_501047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 966, 31), 'float')
    # Applying the binary operator '**' (line 966)
    result_pow_501048 = python_operator(stypy.reporting.localization.Localization(__file__, 966, 27), '**', mu_501046, float_501047)
    
    # Applying the binary operator 'div' (line 966)
    result_div_501049 = python_operator(stypy.reporting.localization.Localization(__file__, 966, 24), 'div', A1_501045, result_pow_501048)
    
    # Applying the binary operator '+' (line 966)
    result_add_501050 = python_operator(stypy.reporting.localization.Localization(__file__, 966, 19), '+', A0_501044, result_div_501049)
    
    # Getting the type of 'A2' (line 966)
    A2_501051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 37), 'A2')
    # Getting the type of 'mu' (line 966)
    mu_501052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 40), 'mu')
    float_501053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 966, 44), 'float')
    # Applying the binary operator '**' (line 966)
    result_pow_501054 = python_operator(stypy.reporting.localization.Localization(__file__, 966, 40), '**', mu_501052, float_501053)
    
    # Applying the binary operator 'div' (line 966)
    result_div_501055 = python_operator(stypy.reporting.localization.Localization(__file__, 966, 37), 'div', A2_501051, result_pow_501054)
    
    # Applying the binary operator '+' (line 966)
    result_add_501056 = python_operator(stypy.reporting.localization.Localization(__file__, 966, 35), '+', result_add_501050, result_div_501055)
    
    # Applying the binary operator '*' (line 966)
    result_mul_501057 = python_operator(stypy.reporting.localization.Localization(__file__, 966, 13), '*', Ai_501043, result_add_501056)
    
    # Getting the type of 'Aip' (line 967)
    Aip_501058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 13), 'Aip')
    # Getting the type of 'B0' (line 967)
    B0_501059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 20), 'B0')
    # Getting the type of 'B1' (line 967)
    B1_501060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 25), 'B1')
    # Getting the type of 'mu' (line 967)
    mu_501061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 28), 'mu')
    float_501062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 967, 32), 'float')
    # Applying the binary operator '**' (line 967)
    result_pow_501063 = python_operator(stypy.reporting.localization.Localization(__file__, 967, 28), '**', mu_501061, float_501062)
    
    # Applying the binary operator 'div' (line 967)
    result_div_501064 = python_operator(stypy.reporting.localization.Localization(__file__, 967, 25), 'div', B1_501060, result_pow_501063)
    
    # Applying the binary operator '+' (line 967)
    result_add_501065 = python_operator(stypy.reporting.localization.Localization(__file__, 967, 20), '+', B0_501059, result_div_501064)
    
    # Getting the type of 'B2' (line 967)
    B2_501066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 38), 'B2')
    # Getting the type of 'mu' (line 967)
    mu_501067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 41), 'mu')
    float_501068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 967, 45), 'float')
    # Applying the binary operator '**' (line 967)
    result_pow_501069 = python_operator(stypy.reporting.localization.Localization(__file__, 967, 41), '**', mu_501067, float_501068)
    
    # Applying the binary operator 'div' (line 967)
    result_div_501070 = python_operator(stypy.reporting.localization.Localization(__file__, 967, 38), 'div', B2_501066, result_pow_501069)
    
    # Applying the binary operator '+' (line 967)
    result_add_501071 = python_operator(stypy.reporting.localization.Localization(__file__, 967, 36), '+', result_add_501065, result_div_501070)
    
    # Applying the binary operator '*' (line 967)
    result_mul_501072 = python_operator(stypy.reporting.localization.Localization(__file__, 967, 13), '*', Aip_501058, result_add_501071)
    
    # Getting the type of 'mu' (line 967)
    mu_501073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 52), 'mu')
    float_501074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 967, 57), 'float')
    float_501075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 967, 61), 'float')
    # Applying the binary operator 'div' (line 967)
    result_div_501076 = python_operator(stypy.reporting.localization.Localization(__file__, 967, 57), 'div', float_501074, float_501075)
    
    # Applying the binary operator '**' (line 967)
    result_pow_501077 = python_operator(stypy.reporting.localization.Localization(__file__, 967, 52), '**', mu_501073, result_div_501076)
    
    # Applying the binary operator 'div' (line 967)
    result_div_501078 = python_operator(stypy.reporting.localization.Localization(__file__, 967, 50), 'div', result_mul_501072, result_pow_501077)
    
    # Applying the binary operator '+' (line 966)
    result_add_501079 = python_operator(stypy.reporting.localization.Localization(__file__, 966, 13), '+', result_mul_501057, result_div_501078)
    
    # Applying the binary operator '*' (line 966)
    result_mul_501080 = python_operator(stypy.reporting.localization.Localization(__file__, 966, 8), '*', P_501042, result_add_501079)
    
    # Assigning a type to the variable 'U' (line 966)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 966, 4), 'U', result_mul_501080)
    
    # Assigning a BinOp to a Name (line 969):
    
    # Assigning a BinOp to a Name (line 969):
    
    # Call to sqrt(...): (line 969)
    # Processing the call arguments (line 969)
    float_501082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 969, 14), 'float')
    # Getting the type of 'pi' (line 969)
    pi_501083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 18), 'pi', False)
    # Applying the binary operator '*' (line 969)
    result_mul_501084 = python_operator(stypy.reporting.localization.Localization(__file__, 969, 14), '*', float_501082, pi_501083)
    
    # Processing the call keyword arguments (line 969)
    kwargs_501085 = {}
    # Getting the type of 'sqrt' (line 969)
    sqrt_501081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 9), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 969)
    sqrt_call_result_501086 = invoke(stypy.reporting.localization.Localization(__file__, 969, 9), sqrt_501081, *[result_mul_501084], **kwargs_501085)
    
    # Getting the type of 'mu' (line 969)
    mu_501087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 24), 'mu')
    float_501088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 969, 29), 'float')
    float_501089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 969, 33), 'float')
    # Applying the binary operator 'div' (line 969)
    result_div_501090 = python_operator(stypy.reporting.localization.Localization(__file__, 969, 29), 'div', float_501088, float_501089)
    
    # Applying the binary operator '**' (line 969)
    result_pow_501091 = python_operator(stypy.reporting.localization.Localization(__file__, 969, 24), '**', mu_501087, result_div_501090)
    
    # Applying the binary operator '*' (line 969)
    result_mul_501092 = python_operator(stypy.reporting.localization.Localization(__file__, 969, 9), '*', sqrt_call_result_501086, result_pow_501091)
    
    # Getting the type of 'phi' (line 969)
    phi_501093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 40), 'phi')
    # Applying the binary operator 'div' (line 969)
    result_div_501094 = python_operator(stypy.reporting.localization.Localization(__file__, 969, 38), 'div', result_mul_501092, phi_501093)
    
    # Assigning a type to the variable 'Pd' (line 969)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 969, 4), 'Pd', result_div_501094)
    
    # Assigning a BinOp to a Name (line 972):
    
    # Assigning a BinOp to a Name (line 972):
    
    # Getting the type of 'b1' (line 972)
    b1_501095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 11), 'b1')
    # Getting the type of 'v0' (line 972)
    v0_501096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 14), 'v0')
    # Applying the binary operator '*' (line 972)
    result_mul_501097 = python_operator(stypy.reporting.localization.Localization(__file__, 972, 11), '*', b1_501095, v0_501096)
    
    
    # Obtaining the type of the subscript
    int_501098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 972, 24), 'int')
    slice_501099 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 972, 19), None, None, None)
    # Getting the type of 'phip' (line 972)
    phip_501100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 19), 'phip')
    # Obtaining the member '__getitem__' of a type (line 972)
    getitem___501101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 972, 19), phip_501100, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 972)
    subscript_call_result_501102 = invoke(stypy.reporting.localization.Localization(__file__, 972, 19), getitem___501101, (int_501098, slice_501099))
    
    # Getting the type of 'b0' (line 972)
    b0_501103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 29), 'b0')
    # Applying the binary operator '*' (line 972)
    result_mul_501104 = python_operator(stypy.reporting.localization.Localization(__file__, 972, 19), '*', subscript_call_result_501102, b0_501103)
    
    # Getting the type of 'v1' (line 972)
    v1_501105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 32), 'v1')
    # Applying the binary operator '*' (line 972)
    result_mul_501106 = python_operator(stypy.reporting.localization.Localization(__file__, 972, 31), '*', result_mul_501104, v1_501105)
    
    # Applying the binary operator '+' (line 972)
    result_add_501107 = python_operator(stypy.reporting.localization.Localization(__file__, 972, 11), '+', result_mul_501097, result_mul_501106)
    
    # Applying the 'usub' unary operator (line 972)
    result___neg___501108 = python_operator(stypy.reporting.localization.Localization(__file__, 972, 9), 'usub', result_add_501107)
    
    # Getting the type of 'zeta' (line 972)
    zeta_501109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 38), 'zeta')
    # Applying the binary operator 'div' (line 972)
    result_div_501110 = python_operator(stypy.reporting.localization.Localization(__file__, 972, 9), 'div', result___neg___501108, zeta_501109)
    
    # Assigning a type to the variable 'C0' (line 972)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 972, 4), 'C0', result_div_501110)
    
    # Assigning a BinOp to a Name (line 973):
    
    # Assigning a BinOp to a Name (line 973):
    
    # Getting the type of 'b3' (line 973)
    b3_501111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 11), 'b3')
    # Getting the type of 'v0' (line 973)
    v0_501112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 14), 'v0')
    # Applying the binary operator '*' (line 973)
    result_mul_501113 = python_operator(stypy.reporting.localization.Localization(__file__, 973, 11), '*', b3_501111, v0_501112)
    
    
    # Obtaining the type of the subscript
    int_501114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 973, 24), 'int')
    slice_501115 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 973, 19), None, None, None)
    # Getting the type of 'phip' (line 973)
    phip_501116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 19), 'phip')
    # Obtaining the member '__getitem__' of a type (line 973)
    getitem___501117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 973, 19), phip_501116, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 973)
    subscript_call_result_501118 = invoke(stypy.reporting.localization.Localization(__file__, 973, 19), getitem___501117, (int_501114, slice_501115))
    
    # Getting the type of 'b2' (line 973)
    b2_501119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 29), 'b2')
    # Applying the binary operator '*' (line 973)
    result_mul_501120 = python_operator(stypy.reporting.localization.Localization(__file__, 973, 19), '*', subscript_call_result_501118, b2_501119)
    
    # Getting the type of 'v1' (line 973)
    v1_501121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 32), 'v1')
    # Applying the binary operator '*' (line 973)
    result_mul_501122 = python_operator(stypy.reporting.localization.Localization(__file__, 973, 31), '*', result_mul_501120, v1_501121)
    
    # Applying the binary operator '+' (line 973)
    result_add_501123 = python_operator(stypy.reporting.localization.Localization(__file__, 973, 11), '+', result_mul_501113, result_mul_501122)
    
    
    # Obtaining the type of the subscript
    int_501124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 973, 42), 'int')
    slice_501125 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 973, 37), None, None, None)
    # Getting the type of 'phip' (line 973)
    phip_501126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 37), 'phip')
    # Obtaining the member '__getitem__' of a type (line 973)
    getitem___501127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 973, 37), phip_501126, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 973)
    subscript_call_result_501128 = invoke(stypy.reporting.localization.Localization(__file__, 973, 37), getitem___501127, (int_501124, slice_501125))
    
    # Getting the type of 'b1' (line 973)
    b1_501129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 47), 'b1')
    # Applying the binary operator '*' (line 973)
    result_mul_501130 = python_operator(stypy.reporting.localization.Localization(__file__, 973, 37), '*', subscript_call_result_501128, b1_501129)
    
    # Getting the type of 'v2' (line 973)
    v2_501131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 50), 'v2')
    # Applying the binary operator '*' (line 973)
    result_mul_501132 = python_operator(stypy.reporting.localization.Localization(__file__, 973, 49), '*', result_mul_501130, v2_501131)
    
    # Applying the binary operator '+' (line 973)
    result_add_501133 = python_operator(stypy.reporting.localization.Localization(__file__, 973, 35), '+', result_add_501123, result_mul_501132)
    
    
    # Obtaining the type of the subscript
    int_501134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 973, 60), 'int')
    slice_501135 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 973, 55), None, None, None)
    # Getting the type of 'phip' (line 973)
    phip_501136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 55), 'phip')
    # Obtaining the member '__getitem__' of a type (line 973)
    getitem___501137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 973, 55), phip_501136, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 973)
    subscript_call_result_501138 = invoke(stypy.reporting.localization.Localization(__file__, 973, 55), getitem___501137, (int_501134, slice_501135))
    
    # Getting the type of 'b0' (line 973)
    b0_501139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 65), 'b0')
    # Applying the binary operator '*' (line 973)
    result_mul_501140 = python_operator(stypy.reporting.localization.Localization(__file__, 973, 55), '*', subscript_call_result_501138, b0_501139)
    
    # Getting the type of 'v3' (line 973)
    v3_501141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 68), 'v3')
    # Applying the binary operator '*' (line 973)
    result_mul_501142 = python_operator(stypy.reporting.localization.Localization(__file__, 973, 67), '*', result_mul_501140, v3_501141)
    
    # Applying the binary operator '+' (line 973)
    result_add_501143 = python_operator(stypy.reporting.localization.Localization(__file__, 973, 53), '+', result_add_501133, result_mul_501142)
    
    # Applying the 'usub' unary operator (line 973)
    result___neg___501144 = python_operator(stypy.reporting.localization.Localization(__file__, 973, 9), 'usub', result_add_501143)
    
    # Getting the type of 'zeta' (line 973)
    zeta_501145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 74), 'zeta')
    int_501146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 973, 80), 'int')
    # Applying the binary operator '**' (line 973)
    result_pow_501147 = python_operator(stypy.reporting.localization.Localization(__file__, 973, 74), '**', zeta_501145, int_501146)
    
    # Applying the binary operator 'div' (line 973)
    result_div_501148 = python_operator(stypy.reporting.localization.Localization(__file__, 973, 9), 'div', result___neg___501144, result_pow_501147)
    
    # Assigning a type to the variable 'C1' (line 973)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 973, 4), 'C1', result_div_501148)
    
    # Assigning a BinOp to a Name (line 974):
    
    # Assigning a BinOp to a Name (line 974):
    
    # Getting the type of 'b5' (line 974)
    b5_501149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 11), 'b5')
    # Getting the type of 'v0' (line 974)
    v0_501150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 14), 'v0')
    # Applying the binary operator '*' (line 974)
    result_mul_501151 = python_operator(stypy.reporting.localization.Localization(__file__, 974, 11), '*', b5_501149, v0_501150)
    
    
    # Obtaining the type of the subscript
    int_501152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 974, 24), 'int')
    slice_501153 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 974, 19), None, None, None)
    # Getting the type of 'phip' (line 974)
    phip_501154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 19), 'phip')
    # Obtaining the member '__getitem__' of a type (line 974)
    getitem___501155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 974, 19), phip_501154, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 974)
    subscript_call_result_501156 = invoke(stypy.reporting.localization.Localization(__file__, 974, 19), getitem___501155, (int_501152, slice_501153))
    
    # Getting the type of 'b4' (line 974)
    b4_501157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 29), 'b4')
    # Applying the binary operator '*' (line 974)
    result_mul_501158 = python_operator(stypy.reporting.localization.Localization(__file__, 974, 19), '*', subscript_call_result_501156, b4_501157)
    
    # Getting the type of 'v1' (line 974)
    v1_501159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 32), 'v1')
    # Applying the binary operator '*' (line 974)
    result_mul_501160 = python_operator(stypy.reporting.localization.Localization(__file__, 974, 31), '*', result_mul_501158, v1_501159)
    
    # Applying the binary operator '+' (line 974)
    result_add_501161 = python_operator(stypy.reporting.localization.Localization(__file__, 974, 11), '+', result_mul_501151, result_mul_501160)
    
    
    # Obtaining the type of the subscript
    int_501162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 974, 42), 'int')
    slice_501163 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 974, 37), None, None, None)
    # Getting the type of 'phip' (line 974)
    phip_501164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 37), 'phip')
    # Obtaining the member '__getitem__' of a type (line 974)
    getitem___501165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 974, 37), phip_501164, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 974)
    subscript_call_result_501166 = invoke(stypy.reporting.localization.Localization(__file__, 974, 37), getitem___501165, (int_501162, slice_501163))
    
    # Getting the type of 'b3' (line 974)
    b3_501167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 47), 'b3')
    # Applying the binary operator '*' (line 974)
    result_mul_501168 = python_operator(stypy.reporting.localization.Localization(__file__, 974, 37), '*', subscript_call_result_501166, b3_501167)
    
    # Getting the type of 'v2' (line 974)
    v2_501169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 50), 'v2')
    # Applying the binary operator '*' (line 974)
    result_mul_501170 = python_operator(stypy.reporting.localization.Localization(__file__, 974, 49), '*', result_mul_501168, v2_501169)
    
    # Applying the binary operator '+' (line 974)
    result_add_501171 = python_operator(stypy.reporting.localization.Localization(__file__, 974, 35), '+', result_add_501161, result_mul_501170)
    
    
    # Obtaining the type of the subscript
    int_501172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 974, 60), 'int')
    slice_501173 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 974, 55), None, None, None)
    # Getting the type of 'phip' (line 974)
    phip_501174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 55), 'phip')
    # Obtaining the member '__getitem__' of a type (line 974)
    getitem___501175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 974, 55), phip_501174, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 974)
    subscript_call_result_501176 = invoke(stypy.reporting.localization.Localization(__file__, 974, 55), getitem___501175, (int_501172, slice_501173))
    
    # Getting the type of 'b2' (line 974)
    b2_501177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 65), 'b2')
    # Applying the binary operator '*' (line 974)
    result_mul_501178 = python_operator(stypy.reporting.localization.Localization(__file__, 974, 55), '*', subscript_call_result_501176, b2_501177)
    
    # Getting the type of 'v3' (line 974)
    v3_501179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 68), 'v3')
    # Applying the binary operator '*' (line 974)
    result_mul_501180 = python_operator(stypy.reporting.localization.Localization(__file__, 974, 67), '*', result_mul_501178, v3_501179)
    
    # Applying the binary operator '+' (line 974)
    result_add_501181 = python_operator(stypy.reporting.localization.Localization(__file__, 974, 53), '+', result_add_501171, result_mul_501180)
    
    
    # Obtaining the type of the subscript
    int_501182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 974, 78), 'int')
    slice_501183 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 974, 73), None, None, None)
    # Getting the type of 'phip' (line 974)
    phip_501184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 73), 'phip')
    # Obtaining the member '__getitem__' of a type (line 974)
    getitem___501185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 974, 73), phip_501184, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 974)
    subscript_call_result_501186 = invoke(stypy.reporting.localization.Localization(__file__, 974, 73), getitem___501185, (int_501182, slice_501183))
    
    # Getting the type of 'b1' (line 974)
    b1_501187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 83), 'b1')
    # Applying the binary operator '*' (line 974)
    result_mul_501188 = python_operator(stypy.reporting.localization.Localization(__file__, 974, 73), '*', subscript_call_result_501186, b1_501187)
    
    # Getting the type of 'v4' (line 974)
    v4_501189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 86), 'v4')
    # Applying the binary operator '*' (line 974)
    result_mul_501190 = python_operator(stypy.reporting.localization.Localization(__file__, 974, 85), '*', result_mul_501188, v4_501189)
    
    # Applying the binary operator '+' (line 974)
    result_add_501191 = python_operator(stypy.reporting.localization.Localization(__file__, 974, 71), '+', result_add_501181, result_mul_501190)
    
    
    # Obtaining the type of the subscript
    int_501192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 974, 96), 'int')
    slice_501193 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 974, 91), None, None, None)
    # Getting the type of 'phip' (line 974)
    phip_501194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 91), 'phip')
    # Obtaining the member '__getitem__' of a type (line 974)
    getitem___501195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 974, 91), phip_501194, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 974)
    subscript_call_result_501196 = invoke(stypy.reporting.localization.Localization(__file__, 974, 91), getitem___501195, (int_501192, slice_501193))
    
    # Getting the type of 'b0' (line 974)
    b0_501197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 101), 'b0')
    # Applying the binary operator '*' (line 974)
    result_mul_501198 = python_operator(stypy.reporting.localization.Localization(__file__, 974, 91), '*', subscript_call_result_501196, b0_501197)
    
    # Getting the type of 'v5' (line 974)
    v5_501199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 104), 'v5')
    # Applying the binary operator '*' (line 974)
    result_mul_501200 = python_operator(stypy.reporting.localization.Localization(__file__, 974, 103), '*', result_mul_501198, v5_501199)
    
    # Applying the binary operator '+' (line 974)
    result_add_501201 = python_operator(stypy.reporting.localization.Localization(__file__, 974, 89), '+', result_add_501191, result_mul_501200)
    
    # Applying the 'usub' unary operator (line 974)
    result___neg___501202 = python_operator(stypy.reporting.localization.Localization(__file__, 974, 9), 'usub', result_add_501201)
    
    # Getting the type of 'zeta' (line 974)
    zeta_501203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 110), 'zeta')
    int_501204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 974, 116), 'int')
    # Applying the binary operator '**' (line 974)
    result_pow_501205 = python_operator(stypy.reporting.localization.Localization(__file__, 974, 110), '**', zeta_501203, int_501204)
    
    # Applying the binary operator 'div' (line 974)
    result_div_501206 = python_operator(stypy.reporting.localization.Localization(__file__, 974, 9), 'div', result___neg___501202, result_pow_501205)
    
    # Assigning a type to the variable 'C2' (line 974)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 974, 4), 'C2', result_div_501206)
    
    # Assigning a BinOp to a Name (line 975):
    
    # Assigning a BinOp to a Name (line 975):
    # Getting the type of 'a0' (line 975)
    a0_501207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 9), 'a0')
    # Getting the type of 'v0' (line 975)
    v0_501208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 12), 'v0')
    # Applying the binary operator '*' (line 975)
    result_mul_501209 = python_operator(stypy.reporting.localization.Localization(__file__, 975, 9), '*', a0_501207, v0_501208)
    
    # Assigning a type to the variable 'D0' (line 975)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 975, 4), 'D0', result_mul_501209)
    
    # Assigning a BinOp to a Name (line 976):
    
    # Assigning a BinOp to a Name (line 976):
    # Getting the type of 'a2' (line 976)
    a2_501210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 10), 'a2')
    # Getting the type of 'v0' (line 976)
    v0_501211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 13), 'v0')
    # Applying the binary operator '*' (line 976)
    result_mul_501212 = python_operator(stypy.reporting.localization.Localization(__file__, 976, 10), '*', a2_501210, v0_501211)
    
    
    # Obtaining the type of the subscript
    int_501213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 976, 23), 'int')
    slice_501214 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 976, 18), None, None, None)
    # Getting the type of 'phip' (line 976)
    phip_501215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 18), 'phip')
    # Obtaining the member '__getitem__' of a type (line 976)
    getitem___501216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 18), phip_501215, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 976)
    subscript_call_result_501217 = invoke(stypy.reporting.localization.Localization(__file__, 976, 18), getitem___501216, (int_501213, slice_501214))
    
    # Getting the type of 'a1' (line 976)
    a1_501218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 28), 'a1')
    # Applying the binary operator '*' (line 976)
    result_mul_501219 = python_operator(stypy.reporting.localization.Localization(__file__, 976, 18), '*', subscript_call_result_501217, a1_501218)
    
    # Getting the type of 'v1' (line 976)
    v1_501220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 31), 'v1')
    # Applying the binary operator '*' (line 976)
    result_mul_501221 = python_operator(stypy.reporting.localization.Localization(__file__, 976, 30), '*', result_mul_501219, v1_501220)
    
    # Applying the binary operator '+' (line 976)
    result_add_501222 = python_operator(stypy.reporting.localization.Localization(__file__, 976, 10), '+', result_mul_501212, result_mul_501221)
    
    
    # Obtaining the type of the subscript
    int_501223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 976, 41), 'int')
    slice_501224 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 976, 36), None, None, None)
    # Getting the type of 'phip' (line 976)
    phip_501225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 36), 'phip')
    # Obtaining the member '__getitem__' of a type (line 976)
    getitem___501226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 36), phip_501225, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 976)
    subscript_call_result_501227 = invoke(stypy.reporting.localization.Localization(__file__, 976, 36), getitem___501226, (int_501223, slice_501224))
    
    # Getting the type of 'a0' (line 976)
    a0_501228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 46), 'a0')
    # Applying the binary operator '*' (line 976)
    result_mul_501229 = python_operator(stypy.reporting.localization.Localization(__file__, 976, 36), '*', subscript_call_result_501227, a0_501228)
    
    # Getting the type of 'v2' (line 976)
    v2_501230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 49), 'v2')
    # Applying the binary operator '*' (line 976)
    result_mul_501231 = python_operator(stypy.reporting.localization.Localization(__file__, 976, 48), '*', result_mul_501229, v2_501230)
    
    # Applying the binary operator '+' (line 976)
    result_add_501232 = python_operator(stypy.reporting.localization.Localization(__file__, 976, 34), '+', result_add_501222, result_mul_501231)
    
    # Getting the type of 'zeta' (line 976)
    zeta_501233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 55), 'zeta')
    int_501234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 976, 61), 'int')
    # Applying the binary operator '**' (line 976)
    result_pow_501235 = python_operator(stypy.reporting.localization.Localization(__file__, 976, 55), '**', zeta_501233, int_501234)
    
    # Applying the binary operator 'div' (line 976)
    result_div_501236 = python_operator(stypy.reporting.localization.Localization(__file__, 976, 9), 'div', result_add_501232, result_pow_501235)
    
    # Assigning a type to the variable 'D1' (line 976)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 4), 'D1', result_div_501236)
    
    # Assigning a BinOp to a Name (line 977):
    
    # Assigning a BinOp to a Name (line 977):
    # Getting the type of 'a4' (line 977)
    a4_501237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 10), 'a4')
    # Getting the type of 'v0' (line 977)
    v0_501238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 13), 'v0')
    # Applying the binary operator '*' (line 977)
    result_mul_501239 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 10), '*', a4_501237, v0_501238)
    
    
    # Obtaining the type of the subscript
    int_501240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 977, 23), 'int')
    slice_501241 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 977, 18), None, None, None)
    # Getting the type of 'phip' (line 977)
    phip_501242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 18), 'phip')
    # Obtaining the member '__getitem__' of a type (line 977)
    getitem___501243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 977, 18), phip_501242, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 977)
    subscript_call_result_501244 = invoke(stypy.reporting.localization.Localization(__file__, 977, 18), getitem___501243, (int_501240, slice_501241))
    
    # Getting the type of 'a3' (line 977)
    a3_501245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 28), 'a3')
    # Applying the binary operator '*' (line 977)
    result_mul_501246 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 18), '*', subscript_call_result_501244, a3_501245)
    
    # Getting the type of 'v1' (line 977)
    v1_501247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 31), 'v1')
    # Applying the binary operator '*' (line 977)
    result_mul_501248 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 30), '*', result_mul_501246, v1_501247)
    
    # Applying the binary operator '+' (line 977)
    result_add_501249 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 10), '+', result_mul_501239, result_mul_501248)
    
    
    # Obtaining the type of the subscript
    int_501250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 977, 41), 'int')
    slice_501251 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 977, 36), None, None, None)
    # Getting the type of 'phip' (line 977)
    phip_501252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 36), 'phip')
    # Obtaining the member '__getitem__' of a type (line 977)
    getitem___501253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 977, 36), phip_501252, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 977)
    subscript_call_result_501254 = invoke(stypy.reporting.localization.Localization(__file__, 977, 36), getitem___501253, (int_501250, slice_501251))
    
    # Getting the type of 'a2' (line 977)
    a2_501255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 46), 'a2')
    # Applying the binary operator '*' (line 977)
    result_mul_501256 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 36), '*', subscript_call_result_501254, a2_501255)
    
    # Getting the type of 'v2' (line 977)
    v2_501257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 49), 'v2')
    # Applying the binary operator '*' (line 977)
    result_mul_501258 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 48), '*', result_mul_501256, v2_501257)
    
    # Applying the binary operator '+' (line 977)
    result_add_501259 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 34), '+', result_add_501249, result_mul_501258)
    
    
    # Obtaining the type of the subscript
    int_501260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 977, 59), 'int')
    slice_501261 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 977, 54), None, None, None)
    # Getting the type of 'phip' (line 977)
    phip_501262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 54), 'phip')
    # Obtaining the member '__getitem__' of a type (line 977)
    getitem___501263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 977, 54), phip_501262, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 977)
    subscript_call_result_501264 = invoke(stypy.reporting.localization.Localization(__file__, 977, 54), getitem___501263, (int_501260, slice_501261))
    
    # Getting the type of 'a1' (line 977)
    a1_501265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 64), 'a1')
    # Applying the binary operator '*' (line 977)
    result_mul_501266 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 54), '*', subscript_call_result_501264, a1_501265)
    
    # Getting the type of 'v3' (line 977)
    v3_501267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 67), 'v3')
    # Applying the binary operator '*' (line 977)
    result_mul_501268 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 66), '*', result_mul_501266, v3_501267)
    
    # Applying the binary operator '+' (line 977)
    result_add_501269 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 52), '+', result_add_501259, result_mul_501268)
    
    
    # Obtaining the type of the subscript
    int_501270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 977, 77), 'int')
    slice_501271 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 977, 72), None, None, None)
    # Getting the type of 'phip' (line 977)
    phip_501272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 72), 'phip')
    # Obtaining the member '__getitem__' of a type (line 977)
    getitem___501273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 977, 72), phip_501272, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 977)
    subscript_call_result_501274 = invoke(stypy.reporting.localization.Localization(__file__, 977, 72), getitem___501273, (int_501270, slice_501271))
    
    # Getting the type of 'a0' (line 977)
    a0_501275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 82), 'a0')
    # Applying the binary operator '*' (line 977)
    result_mul_501276 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 72), '*', subscript_call_result_501274, a0_501275)
    
    # Getting the type of 'v4' (line 977)
    v4_501277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 85), 'v4')
    # Applying the binary operator '*' (line 977)
    result_mul_501278 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 84), '*', result_mul_501276, v4_501277)
    
    # Applying the binary operator '+' (line 977)
    result_add_501279 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 70), '+', result_add_501269, result_mul_501278)
    
    # Getting the type of 'zeta' (line 977)
    zeta_501280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 91), 'zeta')
    int_501281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 977, 97), 'int')
    # Applying the binary operator '**' (line 977)
    result_pow_501282 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 91), '**', zeta_501280, int_501281)
    
    # Applying the binary operator 'div' (line 977)
    result_div_501283 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 9), 'div', result_add_501279, result_pow_501282)
    
    # Assigning a type to the variable 'D2' (line 977)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 977, 4), 'D2', result_div_501283)
    
    # Assigning a BinOp to a Name (line 980):
    
    # Assigning a BinOp to a Name (line 980):
    # Getting the type of 'Pd' (line 980)
    Pd_501284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 9), 'Pd')
    # Getting the type of 'Ai' (line 980)
    Ai_501285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 15), 'Ai')
    # Getting the type of 'C0' (line 980)
    C0_501286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 21), 'C0')
    # Getting the type of 'C1' (line 980)
    C1_501287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 26), 'C1')
    # Getting the type of 'mu' (line 980)
    mu_501288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 29), 'mu')
    float_501289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 980, 33), 'float')
    # Applying the binary operator '**' (line 980)
    result_pow_501290 = python_operator(stypy.reporting.localization.Localization(__file__, 980, 29), '**', mu_501288, float_501289)
    
    # Applying the binary operator 'div' (line 980)
    result_div_501291 = python_operator(stypy.reporting.localization.Localization(__file__, 980, 26), 'div', C1_501287, result_pow_501290)
    
    # Applying the binary operator '+' (line 980)
    result_add_501292 = python_operator(stypy.reporting.localization.Localization(__file__, 980, 21), '+', C0_501286, result_div_501291)
    
    # Getting the type of 'C2' (line 980)
    C2_501293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 39), 'C2')
    # Getting the type of 'mu' (line 980)
    mu_501294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 42), 'mu')
    float_501295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 980, 46), 'float')
    # Applying the binary operator '**' (line 980)
    result_pow_501296 = python_operator(stypy.reporting.localization.Localization(__file__, 980, 42), '**', mu_501294, float_501295)
    
    # Applying the binary operator 'div' (line 980)
    result_div_501297 = python_operator(stypy.reporting.localization.Localization(__file__, 980, 39), 'div', C2_501293, result_pow_501296)
    
    # Applying the binary operator '+' (line 980)
    result_add_501298 = python_operator(stypy.reporting.localization.Localization(__file__, 980, 37), '+', result_add_501292, result_div_501297)
    
    # Applying the binary operator '*' (line 980)
    result_mul_501299 = python_operator(stypy.reporting.localization.Localization(__file__, 980, 15), '*', Ai_501285, result_add_501298)
    
    # Getting the type of 'mu' (line 980)
    mu_501300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 53), 'mu')
    float_501301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 980, 58), 'float')
    float_501302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 980, 62), 'float')
    # Applying the binary operator 'div' (line 980)
    result_div_501303 = python_operator(stypy.reporting.localization.Localization(__file__, 980, 58), 'div', float_501301, float_501302)
    
    # Applying the binary operator '**' (line 980)
    result_pow_501304 = python_operator(stypy.reporting.localization.Localization(__file__, 980, 53), '**', mu_501300, result_div_501303)
    
    # Applying the binary operator 'div' (line 980)
    result_div_501305 = python_operator(stypy.reporting.localization.Localization(__file__, 980, 51), 'div', result_mul_501299, result_pow_501304)
    
    # Getting the type of 'Aip' (line 981)
    Aip_501306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 15), 'Aip')
    # Getting the type of 'D0' (line 981)
    D0_501307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 22), 'D0')
    # Getting the type of 'D1' (line 981)
    D1_501308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 27), 'D1')
    # Getting the type of 'mu' (line 981)
    mu_501309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 30), 'mu')
    float_501310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 981, 34), 'float')
    # Applying the binary operator '**' (line 981)
    result_pow_501311 = python_operator(stypy.reporting.localization.Localization(__file__, 981, 30), '**', mu_501309, float_501310)
    
    # Applying the binary operator 'div' (line 981)
    result_div_501312 = python_operator(stypy.reporting.localization.Localization(__file__, 981, 27), 'div', D1_501308, result_pow_501311)
    
    # Applying the binary operator '+' (line 981)
    result_add_501313 = python_operator(stypy.reporting.localization.Localization(__file__, 981, 22), '+', D0_501307, result_div_501312)
    
    # Getting the type of 'D2' (line 981)
    D2_501314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 40), 'D2')
    # Getting the type of 'mu' (line 981)
    mu_501315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 43), 'mu')
    float_501316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 981, 47), 'float')
    # Applying the binary operator '**' (line 981)
    result_pow_501317 = python_operator(stypy.reporting.localization.Localization(__file__, 981, 43), '**', mu_501315, float_501316)
    
    # Applying the binary operator 'div' (line 981)
    result_div_501318 = python_operator(stypy.reporting.localization.Localization(__file__, 981, 40), 'div', D2_501314, result_pow_501317)
    
    # Applying the binary operator '+' (line 981)
    result_add_501319 = python_operator(stypy.reporting.localization.Localization(__file__, 981, 38), '+', result_add_501313, result_div_501318)
    
    # Applying the binary operator '*' (line 981)
    result_mul_501320 = python_operator(stypy.reporting.localization.Localization(__file__, 981, 15), '*', Aip_501306, result_add_501319)
    
    # Applying the binary operator '+' (line 980)
    result_add_501321 = python_operator(stypy.reporting.localization.Localization(__file__, 980, 15), '+', result_div_501305, result_mul_501320)
    
    # Applying the binary operator '*' (line 980)
    result_mul_501322 = python_operator(stypy.reporting.localization.Localization(__file__, 980, 9), '*', Pd_501284, result_add_501321)
    
    # Assigning a type to the variable 'Ud' (line 980)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 980, 4), 'Ud', result_mul_501322)
    
    # Obtaining an instance of the builtin type 'tuple' (line 982)
    tuple_501323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 982, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 982)
    # Adding element type (line 982)
    # Getting the type of 'U' (line 982)
    U_501324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 11), 'U')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 982, 11), tuple_501323, U_501324)
    # Adding element type (line 982)
    # Getting the type of 'Ud' (line 982)
    Ud_501325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 14), 'Ud')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 982, 11), tuple_501323, Ud_501325)
    
    # Assigning a type to the variable 'stypy_return_type' (line 982)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 4), 'stypy_return_type', tuple_501323)
    
    # ################# End of '_pbcf(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_pbcf' in the type store
    # Getting the type of 'stypy_return_type' (line 875)
    stypy_return_type_501326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_501326)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_pbcf'
    return stypy_return_type_501326

# Assigning a type to the variable '_pbcf' (line 875)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 875, 0), '_pbcf', _pbcf)

@norecursion
def _newton(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_501327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 985, 32), 'int')
    defaults = [int_501327]
    # Create a new context for function '_newton'
    module_type_store = module_type_store.open_function_context('_newton', 985, 0, False)
    
    # Passed parameters checking function
    _newton.stypy_localization = localization
    _newton.stypy_type_of_self = None
    _newton.stypy_type_store = module_type_store
    _newton.stypy_function_name = '_newton'
    _newton.stypy_param_names_list = ['n', 'x_initial', 'maxit']
    _newton.stypy_varargs_param_name = None
    _newton.stypy_kwargs_param_name = None
    _newton.stypy_call_defaults = defaults
    _newton.stypy_call_varargs = varargs
    _newton.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_newton', ['n', 'x_initial', 'maxit'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_newton', localization, ['n', 'x_initial', 'maxit'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_newton(...)' code ##################

    str_501328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1010, (-1)), 'str', 'Newton iteration for polishing the asymptotic approximation\n    to the zeros of the Hermite polynomials.\n\n    Parameters\n    ----------\n    n : int\n        Quadrature order\n    x_initial : ndarray\n        Initial guesses for the roots\n    maxit : int\n        Maximal number of Newton iterations.\n        The default 5 is sufficient, usually\n        only one or two steps are needed.\n\n    Returns\n    -------\n    nodes : ndarray\n        Quadrature nodes\n    weights : ndarray\n        Quadrature weights\n\n    See Also\n    --------\n    roots_hermite_asy\n    ')
    
    # Assigning a Call to a Name (line 1012):
    
    # Assigning a Call to a Name (line 1012):
    
    # Call to sqrt(...): (line 1012)
    # Processing the call arguments (line 1012)
    float_501330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1012, 14), 'float')
    # Getting the type of 'n' (line 1012)
    n_501331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 18), 'n', False)
    # Applying the binary operator '*' (line 1012)
    result_mul_501332 = python_operator(stypy.reporting.localization.Localization(__file__, 1012, 14), '*', float_501330, n_501331)
    
    float_501333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1012, 22), 'float')
    # Applying the binary operator '+' (line 1012)
    result_add_501334 = python_operator(stypy.reporting.localization.Localization(__file__, 1012, 14), '+', result_mul_501332, float_501333)
    
    # Processing the call keyword arguments (line 1012)
    kwargs_501335 = {}
    # Getting the type of 'sqrt' (line 1012)
    sqrt_501329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 9), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 1012)
    sqrt_call_result_501336 = invoke(stypy.reporting.localization.Localization(__file__, 1012, 9), sqrt_501329, *[result_add_501334], **kwargs_501335)
    
    # Assigning a type to the variable 'mu' (line 1012)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1012, 4), 'mu', sqrt_call_result_501336)
    
    # Assigning a BinOp to a Name (line 1013):
    
    # Assigning a BinOp to a Name (line 1013):
    # Getting the type of 'x_initial' (line 1013)
    x_initial_501337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 8), 'x_initial')
    # Getting the type of 'mu' (line 1013)
    mu_501338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 20), 'mu')
    # Applying the binary operator 'div' (line 1013)
    result_div_501339 = python_operator(stypy.reporting.localization.Localization(__file__, 1013, 8), 'div', x_initial_501337, mu_501338)
    
    # Assigning a type to the variable 't' (line 1013)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1013, 4), 't', result_div_501339)
    
    # Assigning a Call to a Name (line 1014):
    
    # Assigning a Call to a Name (line 1014):
    
    # Call to arccos(...): (line 1014)
    # Processing the call arguments (line 1014)
    # Getting the type of 't' (line 1014)
    t_501341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 19), 't', False)
    # Processing the call keyword arguments (line 1014)
    kwargs_501342 = {}
    # Getting the type of 'arccos' (line 1014)
    arccos_501340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 12), 'arccos', False)
    # Calling arccos(args, kwargs) (line 1014)
    arccos_call_result_501343 = invoke(stypy.reporting.localization.Localization(__file__, 1014, 12), arccos_501340, *[t_501341], **kwargs_501342)
    
    # Assigning a type to the variable 'theta' (line 1014)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1014, 4), 'theta', arccos_call_result_501343)
    
    
    # Call to range(...): (line 1016)
    # Processing the call arguments (line 1016)
    # Getting the type of 'maxit' (line 1016)
    maxit_501345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 19), 'maxit', False)
    # Processing the call keyword arguments (line 1016)
    kwargs_501346 = {}
    # Getting the type of 'range' (line 1016)
    range_501344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 13), 'range', False)
    # Calling range(args, kwargs) (line 1016)
    range_call_result_501347 = invoke(stypy.reporting.localization.Localization(__file__, 1016, 13), range_501344, *[maxit_501345], **kwargs_501346)
    
    # Testing the type of a for loop iterable (line 1016)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1016, 4), range_call_result_501347)
    # Getting the type of the for loop variable (line 1016)
    for_loop_var_501348 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1016, 4), range_call_result_501347)
    # Assigning a type to the variable 'i' (line 1016)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1016, 4), 'i', for_loop_var_501348)
    # SSA begins for a for statement (line 1016)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Tuple (line 1017):
    
    # Assigning a Subscript to a Name (line 1017):
    
    # Obtaining the type of the subscript
    int_501349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1017, 8), 'int')
    
    # Call to _pbcf(...): (line 1017)
    # Processing the call arguments (line 1017)
    # Getting the type of 'n' (line 1017)
    n_501351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 22), 'n', False)
    # Getting the type of 'theta' (line 1017)
    theta_501352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 25), 'theta', False)
    # Processing the call keyword arguments (line 1017)
    kwargs_501353 = {}
    # Getting the type of '_pbcf' (line 1017)
    _pbcf_501350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 16), '_pbcf', False)
    # Calling _pbcf(args, kwargs) (line 1017)
    _pbcf_call_result_501354 = invoke(stypy.reporting.localization.Localization(__file__, 1017, 16), _pbcf_501350, *[n_501351, theta_501352], **kwargs_501353)
    
    # Obtaining the member '__getitem__' of a type (line 1017)
    getitem___501355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1017, 8), _pbcf_call_result_501354, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1017)
    subscript_call_result_501356 = invoke(stypy.reporting.localization.Localization(__file__, 1017, 8), getitem___501355, int_501349)
    
    # Assigning a type to the variable 'tuple_var_assignment_498418' (line 1017)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1017, 8), 'tuple_var_assignment_498418', subscript_call_result_501356)
    
    # Assigning a Subscript to a Name (line 1017):
    
    # Obtaining the type of the subscript
    int_501357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1017, 8), 'int')
    
    # Call to _pbcf(...): (line 1017)
    # Processing the call arguments (line 1017)
    # Getting the type of 'n' (line 1017)
    n_501359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 22), 'n', False)
    # Getting the type of 'theta' (line 1017)
    theta_501360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 25), 'theta', False)
    # Processing the call keyword arguments (line 1017)
    kwargs_501361 = {}
    # Getting the type of '_pbcf' (line 1017)
    _pbcf_501358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 16), '_pbcf', False)
    # Calling _pbcf(args, kwargs) (line 1017)
    _pbcf_call_result_501362 = invoke(stypy.reporting.localization.Localization(__file__, 1017, 16), _pbcf_501358, *[n_501359, theta_501360], **kwargs_501361)
    
    # Obtaining the member '__getitem__' of a type (line 1017)
    getitem___501363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1017, 8), _pbcf_call_result_501362, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1017)
    subscript_call_result_501364 = invoke(stypy.reporting.localization.Localization(__file__, 1017, 8), getitem___501363, int_501357)
    
    # Assigning a type to the variable 'tuple_var_assignment_498419' (line 1017)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1017, 8), 'tuple_var_assignment_498419', subscript_call_result_501364)
    
    # Assigning a Name to a Name (line 1017):
    # Getting the type of 'tuple_var_assignment_498418' (line 1017)
    tuple_var_assignment_498418_501365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 8), 'tuple_var_assignment_498418')
    # Assigning a type to the variable 'u' (line 1017)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1017, 8), 'u', tuple_var_assignment_498418_501365)
    
    # Assigning a Name to a Name (line 1017):
    # Getting the type of 'tuple_var_assignment_498419' (line 1017)
    tuple_var_assignment_498419_501366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 8), 'tuple_var_assignment_498419')
    # Assigning a type to the variable 'ud' (line 1017)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1017, 11), 'ud', tuple_var_assignment_498419_501366)
    
    # Assigning a BinOp to a Name (line 1018):
    
    # Assigning a BinOp to a Name (line 1018):
    # Getting the type of 'u' (line 1018)
    u_501367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 17), 'u')
    
    # Call to sqrt(...): (line 1018)
    # Processing the call arguments (line 1018)
    float_501369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1018, 27), 'float')
    # Processing the call keyword arguments (line 1018)
    kwargs_501370 = {}
    # Getting the type of 'sqrt' (line 1018)
    sqrt_501368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 22), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 1018)
    sqrt_call_result_501371 = invoke(stypy.reporting.localization.Localization(__file__, 1018, 22), sqrt_501368, *[float_501369], **kwargs_501370)
    
    # Getting the type of 'mu' (line 1018)
    mu_501372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 34), 'mu')
    # Applying the binary operator '*' (line 1018)
    result_mul_501373 = python_operator(stypy.reporting.localization.Localization(__file__, 1018, 22), '*', sqrt_call_result_501371, mu_501372)
    
    
    # Call to sin(...): (line 1018)
    # Processing the call arguments (line 1018)
    # Getting the type of 'theta' (line 1018)
    theta_501375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 43), 'theta', False)
    # Processing the call keyword arguments (line 1018)
    kwargs_501376 = {}
    # Getting the type of 'sin' (line 1018)
    sin_501374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 39), 'sin', False)
    # Calling sin(args, kwargs) (line 1018)
    sin_call_result_501377 = invoke(stypy.reporting.localization.Localization(__file__, 1018, 39), sin_501374, *[theta_501375], **kwargs_501376)
    
    # Applying the binary operator '*' (line 1018)
    result_mul_501378 = python_operator(stypy.reporting.localization.Localization(__file__, 1018, 37), '*', result_mul_501373, sin_call_result_501377)
    
    # Getting the type of 'ud' (line 1018)
    ud_501379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 52), 'ud')
    # Applying the binary operator '*' (line 1018)
    result_mul_501380 = python_operator(stypy.reporting.localization.Localization(__file__, 1018, 50), '*', result_mul_501378, ud_501379)
    
    # Applying the binary operator 'div' (line 1018)
    result_div_501381 = python_operator(stypy.reporting.localization.Localization(__file__, 1018, 17), 'div', u_501367, result_mul_501380)
    
    # Assigning a type to the variable 'dtheta' (line 1018)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1018, 8), 'dtheta', result_div_501381)
    
    # Assigning a BinOp to a Name (line 1019):
    
    # Assigning a BinOp to a Name (line 1019):
    # Getting the type of 'theta' (line 1019)
    theta_501382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 16), 'theta')
    # Getting the type of 'dtheta' (line 1019)
    dtheta_501383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 24), 'dtheta')
    # Applying the binary operator '+' (line 1019)
    result_add_501384 = python_operator(stypy.reporting.localization.Localization(__file__, 1019, 16), '+', theta_501382, dtheta_501383)
    
    # Assigning a type to the variable 'theta' (line 1019)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1019, 8), 'theta', result_add_501384)
    
    
    
    # Call to max(...): (line 1020)
    # Processing the call arguments (line 1020)
    
    # Call to abs(...): (line 1020)
    # Processing the call arguments (line 1020)
    # Getting the type of 'dtheta' (line 1020)
    dtheta_501387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 19), 'dtheta', False)
    # Processing the call keyword arguments (line 1020)
    kwargs_501388 = {}
    # Getting the type of 'abs' (line 1020)
    abs_501386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 15), 'abs', False)
    # Calling abs(args, kwargs) (line 1020)
    abs_call_result_501389 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 15), abs_501386, *[dtheta_501387], **kwargs_501388)
    
    # Processing the call keyword arguments (line 1020)
    kwargs_501390 = {}
    # Getting the type of 'max' (line 1020)
    max_501385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 11), 'max', False)
    # Calling max(args, kwargs) (line 1020)
    max_call_result_501391 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 11), max_501385, *[abs_call_result_501389], **kwargs_501390)
    
    float_501392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 30), 'float')
    # Applying the binary operator '<' (line 1020)
    result_lt_501393 = python_operator(stypy.reporting.localization.Localization(__file__, 1020, 11), '<', max_call_result_501391, float_501392)
    
    # Testing the type of an if condition (line 1020)
    if_condition_501394 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1020, 8), result_lt_501393)
    # Assigning a type to the variable 'if_condition_501394' (line 1020)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1020, 8), 'if_condition_501394', if_condition_501394)
    # SSA begins for if statement (line 1020)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 1020)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1023):
    
    # Assigning a BinOp to a Name (line 1023):
    # Getting the type of 'mu' (line 1023)
    mu_501395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 8), 'mu')
    
    # Call to cos(...): (line 1023)
    # Processing the call arguments (line 1023)
    # Getting the type of 'theta' (line 1023)
    theta_501397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 17), 'theta', False)
    # Processing the call keyword arguments (line 1023)
    kwargs_501398 = {}
    # Getting the type of 'cos' (line 1023)
    cos_501396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 13), 'cos', False)
    # Calling cos(args, kwargs) (line 1023)
    cos_call_result_501399 = invoke(stypy.reporting.localization.Localization(__file__, 1023, 13), cos_501396, *[theta_501397], **kwargs_501398)
    
    # Applying the binary operator '*' (line 1023)
    result_mul_501400 = python_operator(stypy.reporting.localization.Localization(__file__, 1023, 8), '*', mu_501395, cos_call_result_501399)
    
    # Assigning a type to the variable 'x' (line 1023)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1023, 4), 'x', result_mul_501400)
    
    
    # Getting the type of 'n' (line 1025)
    n_501401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 7), 'n')
    int_501402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1025, 11), 'int')
    # Applying the binary operator '%' (line 1025)
    result_mod_501403 = python_operator(stypy.reporting.localization.Localization(__file__, 1025, 7), '%', n_501401, int_501402)
    
    int_501404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1025, 16), 'int')
    # Applying the binary operator '==' (line 1025)
    result_eq_501405 = python_operator(stypy.reporting.localization.Localization(__file__, 1025, 7), '==', result_mod_501403, int_501404)
    
    # Testing the type of an if condition (line 1025)
    if_condition_501406 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1025, 4), result_eq_501405)
    # Assigning a type to the variable 'if_condition_501406' (line 1025)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1025, 4), 'if_condition_501406', if_condition_501406)
    # SSA begins for if statement (line 1025)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Subscript (line 1026):
    
    # Assigning a Num to a Subscript (line 1026):
    float_501407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1026, 15), 'float')
    # Getting the type of 'x' (line 1026)
    x_501408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 8), 'x')
    int_501409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1026, 10), 'int')
    # Storing an element on a container (line 1026)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1026, 8), x_501408, (int_501409, float_501407))
    # SSA join for if statement (line 1025)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1028):
    
    # Assigning a BinOp to a Name (line 1028):
    
    # Call to exp(...): (line 1028)
    # Processing the call arguments (line 1028)
    
    # Getting the type of 'x' (line 1028)
    x_501411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 13), 'x', False)
    int_501412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1028, 16), 'int')
    # Applying the binary operator '**' (line 1028)
    result_pow_501413 = python_operator(stypy.reporting.localization.Localization(__file__, 1028, 13), '**', x_501411, int_501412)
    
    # Applying the 'usub' unary operator (line 1028)
    result___neg___501414 = python_operator(stypy.reporting.localization.Localization(__file__, 1028, 12), 'usub', result_pow_501413)
    
    # Processing the call keyword arguments (line 1028)
    kwargs_501415 = {}
    # Getting the type of 'exp' (line 1028)
    exp_501410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 8), 'exp', False)
    # Calling exp(args, kwargs) (line 1028)
    exp_call_result_501416 = invoke(stypy.reporting.localization.Localization(__file__, 1028, 8), exp_501410, *[result___neg___501414], **kwargs_501415)
    
    float_501417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1028, 22), 'float')
    # Getting the type of 'ud' (line 1028)
    ud_501418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 26), 'ud')
    int_501419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1028, 30), 'int')
    # Applying the binary operator '**' (line 1028)
    result_pow_501420 = python_operator(stypy.reporting.localization.Localization(__file__, 1028, 26), '**', ud_501418, int_501419)
    
    # Applying the binary operator '*' (line 1028)
    result_mul_501421 = python_operator(stypy.reporting.localization.Localization(__file__, 1028, 22), '*', float_501417, result_pow_501420)
    
    # Applying the binary operator 'div' (line 1028)
    result_div_501422 = python_operator(stypy.reporting.localization.Localization(__file__, 1028, 8), 'div', exp_call_result_501416, result_mul_501421)
    
    # Assigning a type to the variable 'w' (line 1028)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1028, 4), 'w', result_div_501422)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1029)
    tuple_501423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1029, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1029)
    # Adding element type (line 1029)
    # Getting the type of 'x' (line 1029)
    x_501424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 11), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1029, 11), tuple_501423, x_501424)
    # Adding element type (line 1029)
    # Getting the type of 'w' (line 1029)
    w_501425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 14), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1029, 11), tuple_501423, w_501425)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1029)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1029, 4), 'stypy_return_type', tuple_501423)
    
    # ################# End of '_newton(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_newton' in the type store
    # Getting the type of 'stypy_return_type' (line 985)
    stypy_return_type_501426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_501426)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_newton'
    return stypy_return_type_501426

# Assigning a type to the variable '_newton' (line 985)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 985, 0), '_newton', _newton)

@norecursion
def _roots_hermite_asy(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_roots_hermite_asy'
    module_type_store = module_type_store.open_function_context('_roots_hermite_asy', 1032, 0, False)
    
    # Passed parameters checking function
    _roots_hermite_asy.stypy_localization = localization
    _roots_hermite_asy.stypy_type_of_self = None
    _roots_hermite_asy.stypy_type_store = module_type_store
    _roots_hermite_asy.stypy_function_name = '_roots_hermite_asy'
    _roots_hermite_asy.stypy_param_names_list = ['n']
    _roots_hermite_asy.stypy_varargs_param_name = None
    _roots_hermite_asy.stypy_kwargs_param_name = None
    _roots_hermite_asy.stypy_call_defaults = defaults
    _roots_hermite_asy.stypy_call_varargs = varargs
    _roots_hermite_asy.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_roots_hermite_asy', ['n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_roots_hermite_asy', localization, ['n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_roots_hermite_asy(...)' code ##################

    str_501427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1074, (-1)), 'str', "Gauss-Hermite (physicst's) quadrature for large n.\n\n    Computes the sample points and weights for Gauss-Hermite quadrature.\n    The sample points are the roots of the n-th degree Hermite polynomial,\n    :math:`H_n(x)`.  These sample points and weights correctly integrate\n    polynomials of degree :math:`2n - 1` or less over the interval\n    :math:`[-\\infty, \\infty]` with weight function :math:`f(x) = e^{-x^2}`.\n\n    This method relies on asymptotic expansions which work best for n > 150.\n    The algorithm has linear runtime making computation for very large n\n    feasible.\n\n    Parameters\n    ----------\n    n : int\n        quadrature order\n\n    Returns\n    -------\n    nodes : ndarray\n        Quadrature nodes\n    weights : ndarray\n        Quadrature weights\n\n    See Also\n    --------\n    roots_hermite\n\n    References\n    ----------\n    .. [townsend.trogdon.olver-2014]\n       Townsend, A. and Trogdon, T. and Olver, S. (2014)\n       *Fast computation of Gauss quadrature nodes and\n       weights on the whole real line*. :arXiv:`1410.5286`.\n\n    .. [townsend.trogdon.olver-2015]\n       Townsend, A. and Trogdon, T. and Olver, S. (2015)\n       *Fast computation of Gauss quadrature nodes and\n       weights on the whole real line*.\n       IMA Journal of Numerical Analysis\n       :doi:`10.1093/imanum/drv002`.\n    ")
    
    # Assigning a Call to a Name (line 1075):
    
    # Assigning a Call to a Name (line 1075):
    
    # Call to _initial_nodes(...): (line 1075)
    # Processing the call arguments (line 1075)
    # Getting the type of 'n' (line 1075)
    n_501429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 24), 'n', False)
    # Processing the call keyword arguments (line 1075)
    kwargs_501430 = {}
    # Getting the type of '_initial_nodes' (line 1075)
    _initial_nodes_501428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 9), '_initial_nodes', False)
    # Calling _initial_nodes(args, kwargs) (line 1075)
    _initial_nodes_call_result_501431 = invoke(stypy.reporting.localization.Localization(__file__, 1075, 9), _initial_nodes_501428, *[n_501429], **kwargs_501430)
    
    # Assigning a type to the variable 'iv' (line 1075)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1075, 4), 'iv', _initial_nodes_call_result_501431)
    
    # Assigning a Call to a Tuple (line 1076):
    
    # Assigning a Subscript to a Name (line 1076):
    
    # Obtaining the type of the subscript
    int_501432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1076, 4), 'int')
    
    # Call to _newton(...): (line 1076)
    # Processing the call arguments (line 1076)
    # Getting the type of 'n' (line 1076)
    n_501434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 29), 'n', False)
    # Getting the type of 'iv' (line 1076)
    iv_501435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 32), 'iv', False)
    # Processing the call keyword arguments (line 1076)
    kwargs_501436 = {}
    # Getting the type of '_newton' (line 1076)
    _newton_501433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 21), '_newton', False)
    # Calling _newton(args, kwargs) (line 1076)
    _newton_call_result_501437 = invoke(stypy.reporting.localization.Localization(__file__, 1076, 21), _newton_501433, *[n_501434, iv_501435], **kwargs_501436)
    
    # Obtaining the member '__getitem__' of a type (line 1076)
    getitem___501438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1076, 4), _newton_call_result_501437, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1076)
    subscript_call_result_501439 = invoke(stypy.reporting.localization.Localization(__file__, 1076, 4), getitem___501438, int_501432)
    
    # Assigning a type to the variable 'tuple_var_assignment_498420' (line 1076)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1076, 4), 'tuple_var_assignment_498420', subscript_call_result_501439)
    
    # Assigning a Subscript to a Name (line 1076):
    
    # Obtaining the type of the subscript
    int_501440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1076, 4), 'int')
    
    # Call to _newton(...): (line 1076)
    # Processing the call arguments (line 1076)
    # Getting the type of 'n' (line 1076)
    n_501442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 29), 'n', False)
    # Getting the type of 'iv' (line 1076)
    iv_501443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 32), 'iv', False)
    # Processing the call keyword arguments (line 1076)
    kwargs_501444 = {}
    # Getting the type of '_newton' (line 1076)
    _newton_501441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 21), '_newton', False)
    # Calling _newton(args, kwargs) (line 1076)
    _newton_call_result_501445 = invoke(stypy.reporting.localization.Localization(__file__, 1076, 21), _newton_501441, *[n_501442, iv_501443], **kwargs_501444)
    
    # Obtaining the member '__getitem__' of a type (line 1076)
    getitem___501446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1076, 4), _newton_call_result_501445, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1076)
    subscript_call_result_501447 = invoke(stypy.reporting.localization.Localization(__file__, 1076, 4), getitem___501446, int_501440)
    
    # Assigning a type to the variable 'tuple_var_assignment_498421' (line 1076)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1076, 4), 'tuple_var_assignment_498421', subscript_call_result_501447)
    
    # Assigning a Name to a Name (line 1076):
    # Getting the type of 'tuple_var_assignment_498420' (line 1076)
    tuple_var_assignment_498420_501448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 4), 'tuple_var_assignment_498420')
    # Assigning a type to the variable 'nodes' (line 1076)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1076, 4), 'nodes', tuple_var_assignment_498420_501448)
    
    # Assigning a Name to a Name (line 1076):
    # Getting the type of 'tuple_var_assignment_498421' (line 1076)
    tuple_var_assignment_498421_501449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 4), 'tuple_var_assignment_498421')
    # Assigning a type to the variable 'weights' (line 1076)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1076, 11), 'weights', tuple_var_assignment_498421_501449)
    
    
    # Getting the type of 'n' (line 1078)
    n_501450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 7), 'n')
    int_501451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1078, 11), 'int')
    # Applying the binary operator '%' (line 1078)
    result_mod_501452 = python_operator(stypy.reporting.localization.Localization(__file__, 1078, 7), '%', n_501450, int_501451)
    
    int_501453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1078, 16), 'int')
    # Applying the binary operator '==' (line 1078)
    result_eq_501454 = python_operator(stypy.reporting.localization.Localization(__file__, 1078, 7), '==', result_mod_501452, int_501453)
    
    # Testing the type of an if condition (line 1078)
    if_condition_501455 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1078, 4), result_eq_501454)
    # Assigning a type to the variable 'if_condition_501455' (line 1078)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1078, 4), 'if_condition_501455', if_condition_501455)
    # SSA begins for if statement (line 1078)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1079):
    
    # Assigning a Call to a Name (line 1079):
    
    # Call to hstack(...): (line 1079)
    # Processing the call arguments (line 1079)
    
    # Obtaining an instance of the builtin type 'list' (line 1079)
    list_501457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1079, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1079)
    # Adding element type (line 1079)
    
    
    # Obtaining the type of the subscript
    int_501458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1079, 33), 'int')
    slice_501459 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1079, 25), None, None, int_501458)
    # Getting the type of 'nodes' (line 1079)
    nodes_501460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 25), 'nodes', False)
    # Obtaining the member '__getitem__' of a type (line 1079)
    getitem___501461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1079, 25), nodes_501460, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1079)
    subscript_call_result_501462 = invoke(stypy.reporting.localization.Localization(__file__, 1079, 25), getitem___501461, slice_501459)
    
    # Applying the 'usub' unary operator (line 1079)
    result___neg___501463 = python_operator(stypy.reporting.localization.Localization(__file__, 1079, 24), 'usub', subscript_call_result_501462)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1079, 23), list_501457, result___neg___501463)
    # Adding element type (line 1079)
    # Getting the type of 'nodes' (line 1079)
    nodes_501464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 38), 'nodes', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1079, 23), list_501457, nodes_501464)
    
    # Processing the call keyword arguments (line 1079)
    kwargs_501465 = {}
    # Getting the type of 'hstack' (line 1079)
    hstack_501456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 16), 'hstack', False)
    # Calling hstack(args, kwargs) (line 1079)
    hstack_call_result_501466 = invoke(stypy.reporting.localization.Localization(__file__, 1079, 16), hstack_501456, *[list_501457], **kwargs_501465)
    
    # Assigning a type to the variable 'nodes' (line 1079)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1079, 8), 'nodes', hstack_call_result_501466)
    
    # Assigning a Call to a Name (line 1080):
    
    # Assigning a Call to a Name (line 1080):
    
    # Call to hstack(...): (line 1080)
    # Processing the call arguments (line 1080)
    
    # Obtaining an instance of the builtin type 'list' (line 1080)
    list_501468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1080, 25), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1080)
    # Adding element type (line 1080)
    
    # Obtaining the type of the subscript
    int_501469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1080, 36), 'int')
    slice_501470 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1080, 26), None, None, int_501469)
    # Getting the type of 'weights' (line 1080)
    weights_501471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 26), 'weights', False)
    # Obtaining the member '__getitem__' of a type (line 1080)
    getitem___501472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1080, 26), weights_501471, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1080)
    subscript_call_result_501473 = invoke(stypy.reporting.localization.Localization(__file__, 1080, 26), getitem___501472, slice_501470)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1080, 25), list_501468, subscript_call_result_501473)
    # Adding element type (line 1080)
    # Getting the type of 'weights' (line 1080)
    weights_501474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 41), 'weights', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1080, 25), list_501468, weights_501474)
    
    # Processing the call keyword arguments (line 1080)
    kwargs_501475 = {}
    # Getting the type of 'hstack' (line 1080)
    hstack_501467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 18), 'hstack', False)
    # Calling hstack(args, kwargs) (line 1080)
    hstack_call_result_501476 = invoke(stypy.reporting.localization.Localization(__file__, 1080, 18), hstack_501467, *[list_501468], **kwargs_501475)
    
    # Assigning a type to the variable 'weights' (line 1080)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1080, 8), 'weights', hstack_call_result_501476)
    # SSA branch for the else part of an if statement (line 1078)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1082):
    
    # Assigning a Call to a Name (line 1082):
    
    # Call to hstack(...): (line 1082)
    # Processing the call arguments (line 1082)
    
    # Obtaining an instance of the builtin type 'list' (line 1082)
    list_501478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1082, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1082)
    # Adding element type (line 1082)
    
    
    # Obtaining the type of the subscript
    int_501479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1082, 31), 'int')
    int_501480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1082, 34), 'int')
    int_501481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1082, 36), 'int')
    slice_501482 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1082, 25), int_501479, int_501480, int_501481)
    # Getting the type of 'nodes' (line 1082)
    nodes_501483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 25), 'nodes', False)
    # Obtaining the member '__getitem__' of a type (line 1082)
    getitem___501484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1082, 25), nodes_501483, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1082)
    subscript_call_result_501485 = invoke(stypy.reporting.localization.Localization(__file__, 1082, 25), getitem___501484, slice_501482)
    
    # Applying the 'usub' unary operator (line 1082)
    result___neg___501486 = python_operator(stypy.reporting.localization.Localization(__file__, 1082, 24), 'usub', subscript_call_result_501485)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1082, 23), list_501478, result___neg___501486)
    # Adding element type (line 1082)
    # Getting the type of 'nodes' (line 1082)
    nodes_501487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 41), 'nodes', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1082, 23), list_501478, nodes_501487)
    
    # Processing the call keyword arguments (line 1082)
    kwargs_501488 = {}
    # Getting the type of 'hstack' (line 1082)
    hstack_501477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 16), 'hstack', False)
    # Calling hstack(args, kwargs) (line 1082)
    hstack_call_result_501489 = invoke(stypy.reporting.localization.Localization(__file__, 1082, 16), hstack_501477, *[list_501478], **kwargs_501488)
    
    # Assigning a type to the variable 'nodes' (line 1082)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1082, 8), 'nodes', hstack_call_result_501489)
    
    # Assigning a Call to a Name (line 1083):
    
    # Assigning a Call to a Name (line 1083):
    
    # Call to hstack(...): (line 1083)
    # Processing the call arguments (line 1083)
    
    # Obtaining an instance of the builtin type 'list' (line 1083)
    list_501491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1083, 25), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1083)
    # Adding element type (line 1083)
    
    # Obtaining the type of the subscript
    int_501492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1083, 34), 'int')
    int_501493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1083, 37), 'int')
    int_501494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1083, 39), 'int')
    slice_501495 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1083, 26), int_501492, int_501493, int_501494)
    # Getting the type of 'weights' (line 1083)
    weights_501496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 26), 'weights', False)
    # Obtaining the member '__getitem__' of a type (line 1083)
    getitem___501497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1083, 26), weights_501496, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1083)
    subscript_call_result_501498 = invoke(stypy.reporting.localization.Localization(__file__, 1083, 26), getitem___501497, slice_501495)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1083, 25), list_501491, subscript_call_result_501498)
    # Adding element type (line 1083)
    # Getting the type of 'weights' (line 1083)
    weights_501499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 44), 'weights', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1083, 25), list_501491, weights_501499)
    
    # Processing the call keyword arguments (line 1083)
    kwargs_501500 = {}
    # Getting the type of 'hstack' (line 1083)
    hstack_501490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 18), 'hstack', False)
    # Calling hstack(args, kwargs) (line 1083)
    hstack_call_result_501501 = invoke(stypy.reporting.localization.Localization(__file__, 1083, 18), hstack_501490, *[list_501491], **kwargs_501500)
    
    # Assigning a type to the variable 'weights' (line 1083)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1083, 8), 'weights', hstack_call_result_501501)
    # SSA join for if statement (line 1078)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'weights' (line 1085)
    weights_501502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 4), 'weights')
    
    # Call to sqrt(...): (line 1085)
    # Processing the call arguments (line 1085)
    # Getting the type of 'pi' (line 1085)
    pi_501504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 20), 'pi', False)
    # Processing the call keyword arguments (line 1085)
    kwargs_501505 = {}
    # Getting the type of 'sqrt' (line 1085)
    sqrt_501503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 15), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 1085)
    sqrt_call_result_501506 = invoke(stypy.reporting.localization.Localization(__file__, 1085, 15), sqrt_501503, *[pi_501504], **kwargs_501505)
    
    
    # Call to sum(...): (line 1085)
    # Processing the call arguments (line 1085)
    # Getting the type of 'weights' (line 1085)
    weights_501508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 30), 'weights', False)
    # Processing the call keyword arguments (line 1085)
    kwargs_501509 = {}
    # Getting the type of 'sum' (line 1085)
    sum_501507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 26), 'sum', False)
    # Calling sum(args, kwargs) (line 1085)
    sum_call_result_501510 = invoke(stypy.reporting.localization.Localization(__file__, 1085, 26), sum_501507, *[weights_501508], **kwargs_501509)
    
    # Applying the binary operator 'div' (line 1085)
    result_div_501511 = python_operator(stypy.reporting.localization.Localization(__file__, 1085, 15), 'div', sqrt_call_result_501506, sum_call_result_501510)
    
    # Applying the binary operator '*=' (line 1085)
    result_imul_501512 = python_operator(stypy.reporting.localization.Localization(__file__, 1085, 4), '*=', weights_501502, result_div_501511)
    # Assigning a type to the variable 'weights' (line 1085)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1085, 4), 'weights', result_imul_501512)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1086)
    tuple_501513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1086, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1086)
    # Adding element type (line 1086)
    # Getting the type of 'nodes' (line 1086)
    nodes_501514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 11), 'nodes')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1086, 11), tuple_501513, nodes_501514)
    # Adding element type (line 1086)
    # Getting the type of 'weights' (line 1086)
    weights_501515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 18), 'weights')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1086, 11), tuple_501513, weights_501515)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1086)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1086, 4), 'stypy_return_type', tuple_501513)
    
    # ################# End of '_roots_hermite_asy(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_roots_hermite_asy' in the type store
    # Getting the type of 'stypy_return_type' (line 1032)
    stypy_return_type_501516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_501516)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_roots_hermite_asy'
    return stypy_return_type_501516

# Assigning a type to the variable '_roots_hermite_asy' (line 1032)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1032, 0), '_roots_hermite_asy', _roots_hermite_asy)

@norecursion
def hermite(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1089)
    False_501517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 21), 'False')
    defaults = [False_501517]
    # Create a new context for function 'hermite'
    module_type_store = module_type_store.open_function_context('hermite', 1089, 0, False)
    
    # Passed parameters checking function
    hermite.stypy_localization = localization
    hermite.stypy_type_of_self = None
    hermite.stypy_type_store = module_type_store
    hermite.stypy_function_name = 'hermite'
    hermite.stypy_param_names_list = ['n', 'monic']
    hermite.stypy_varargs_param_name = None
    hermite.stypy_kwargs_param_name = None
    hermite.stypy_call_defaults = defaults
    hermite.stypy_call_varargs = varargs
    hermite.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'hermite', ['n', 'monic'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'hermite', localization, ['n', 'monic'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'hermite(...)' code ##################

    str_501518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1118, (-1)), 'str', "Physicist's Hermite polynomial.\n\n    Defined by\n\n    .. math::\n\n        H_n(x) = (-1)^ne^{x^2}\\frac{d^n}{dx^n}e^{-x^2};\n\n    :math:`H_n` is a polynomial of degree :math:`n`.\n\n    Parameters\n    ----------\n    n : int\n        Degree of the polynomial.\n    monic : bool, optional\n        If `True`, scale the leading coefficient to be 1. Default is\n        `False`.\n\n    Returns\n    -------\n    H : orthopoly1d\n        Hermite polynomial.\n\n    Notes\n    -----\n    The polynomials :math:`H_n` are orthogonal over :math:`(-\\infty,\n    \\infty)` with weight function :math:`e^{-x^2}`.\n\n    ")
    
    
    # Getting the type of 'n' (line 1119)
    n_501519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 7), 'n')
    int_501520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1119, 11), 'int')
    # Applying the binary operator '<' (line 1119)
    result_lt_501521 = python_operator(stypy.reporting.localization.Localization(__file__, 1119, 7), '<', n_501519, int_501520)
    
    # Testing the type of an if condition (line 1119)
    if_condition_501522 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1119, 4), result_lt_501521)
    # Assigning a type to the variable 'if_condition_501522' (line 1119)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 4), 'if_condition_501522', if_condition_501522)
    # SSA begins for if statement (line 1119)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1120)
    # Processing the call arguments (line 1120)
    str_501524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1120, 25), 'str', 'n must be nonnegative.')
    # Processing the call keyword arguments (line 1120)
    kwargs_501525 = {}
    # Getting the type of 'ValueError' (line 1120)
    ValueError_501523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1120)
    ValueError_call_result_501526 = invoke(stypy.reporting.localization.Localization(__file__, 1120, 14), ValueError_501523, *[str_501524], **kwargs_501525)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1120, 8), ValueError_call_result_501526, 'raise parameter', BaseException)
    # SSA join for if statement (line 1119)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 1122)
    n_501527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 7), 'n')
    int_501528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1122, 12), 'int')
    # Applying the binary operator '==' (line 1122)
    result_eq_501529 = python_operator(stypy.reporting.localization.Localization(__file__, 1122, 7), '==', n_501527, int_501528)
    
    # Testing the type of an if condition (line 1122)
    if_condition_501530 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1122, 4), result_eq_501529)
    # Assigning a type to the variable 'if_condition_501530' (line 1122)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1122, 4), 'if_condition_501530', if_condition_501530)
    # SSA begins for if statement (line 1122)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1123):
    
    # Assigning a BinOp to a Name (line 1123):
    # Getting the type of 'n' (line 1123)
    n_501531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 13), 'n')
    int_501532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1123, 17), 'int')
    # Applying the binary operator '+' (line 1123)
    result_add_501533 = python_operator(stypy.reporting.localization.Localization(__file__, 1123, 13), '+', n_501531, int_501532)
    
    # Assigning a type to the variable 'n1' (line 1123)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1123, 8), 'n1', result_add_501533)
    # SSA branch for the else part of an if statement (line 1122)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1125):
    
    # Assigning a Name to a Name (line 1125):
    # Getting the type of 'n' (line 1125)
    n_501534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 13), 'n')
    # Assigning a type to the variable 'n1' (line 1125)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1125, 8), 'n1', n_501534)
    # SSA join for if statement (line 1122)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 1126):
    
    # Assigning a Subscript to a Name (line 1126):
    
    # Obtaining the type of the subscript
    int_501535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1126, 4), 'int')
    
    # Call to roots_hermite(...): (line 1126)
    # Processing the call arguments (line 1126)
    # Getting the type of 'n1' (line 1126)
    n1_501537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 30), 'n1', False)
    # Processing the call keyword arguments (line 1126)
    # Getting the type of 'True' (line 1126)
    True_501538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 37), 'True', False)
    keyword_501539 = True_501538
    kwargs_501540 = {'mu': keyword_501539}
    # Getting the type of 'roots_hermite' (line 1126)
    roots_hermite_501536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 16), 'roots_hermite', False)
    # Calling roots_hermite(args, kwargs) (line 1126)
    roots_hermite_call_result_501541 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 16), roots_hermite_501536, *[n1_501537], **kwargs_501540)
    
    # Obtaining the member '__getitem__' of a type (line 1126)
    getitem___501542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 4), roots_hermite_call_result_501541, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1126)
    subscript_call_result_501543 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 4), getitem___501542, int_501535)
    
    # Assigning a type to the variable 'tuple_var_assignment_498422' (line 1126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 4), 'tuple_var_assignment_498422', subscript_call_result_501543)
    
    # Assigning a Subscript to a Name (line 1126):
    
    # Obtaining the type of the subscript
    int_501544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1126, 4), 'int')
    
    # Call to roots_hermite(...): (line 1126)
    # Processing the call arguments (line 1126)
    # Getting the type of 'n1' (line 1126)
    n1_501546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 30), 'n1', False)
    # Processing the call keyword arguments (line 1126)
    # Getting the type of 'True' (line 1126)
    True_501547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 37), 'True', False)
    keyword_501548 = True_501547
    kwargs_501549 = {'mu': keyword_501548}
    # Getting the type of 'roots_hermite' (line 1126)
    roots_hermite_501545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 16), 'roots_hermite', False)
    # Calling roots_hermite(args, kwargs) (line 1126)
    roots_hermite_call_result_501550 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 16), roots_hermite_501545, *[n1_501546], **kwargs_501549)
    
    # Obtaining the member '__getitem__' of a type (line 1126)
    getitem___501551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 4), roots_hermite_call_result_501550, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1126)
    subscript_call_result_501552 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 4), getitem___501551, int_501544)
    
    # Assigning a type to the variable 'tuple_var_assignment_498423' (line 1126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 4), 'tuple_var_assignment_498423', subscript_call_result_501552)
    
    # Assigning a Subscript to a Name (line 1126):
    
    # Obtaining the type of the subscript
    int_501553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1126, 4), 'int')
    
    # Call to roots_hermite(...): (line 1126)
    # Processing the call arguments (line 1126)
    # Getting the type of 'n1' (line 1126)
    n1_501555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 30), 'n1', False)
    # Processing the call keyword arguments (line 1126)
    # Getting the type of 'True' (line 1126)
    True_501556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 37), 'True', False)
    keyword_501557 = True_501556
    kwargs_501558 = {'mu': keyword_501557}
    # Getting the type of 'roots_hermite' (line 1126)
    roots_hermite_501554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 16), 'roots_hermite', False)
    # Calling roots_hermite(args, kwargs) (line 1126)
    roots_hermite_call_result_501559 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 16), roots_hermite_501554, *[n1_501555], **kwargs_501558)
    
    # Obtaining the member '__getitem__' of a type (line 1126)
    getitem___501560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 4), roots_hermite_call_result_501559, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1126)
    subscript_call_result_501561 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 4), getitem___501560, int_501553)
    
    # Assigning a type to the variable 'tuple_var_assignment_498424' (line 1126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 4), 'tuple_var_assignment_498424', subscript_call_result_501561)
    
    # Assigning a Name to a Name (line 1126):
    # Getting the type of 'tuple_var_assignment_498422' (line 1126)
    tuple_var_assignment_498422_501562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 4), 'tuple_var_assignment_498422')
    # Assigning a type to the variable 'x' (line 1126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 4), 'x', tuple_var_assignment_498422_501562)
    
    # Assigning a Name to a Name (line 1126):
    # Getting the type of 'tuple_var_assignment_498423' (line 1126)
    tuple_var_assignment_498423_501563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 4), 'tuple_var_assignment_498423')
    # Assigning a type to the variable 'w' (line 1126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 7), 'w', tuple_var_assignment_498423_501563)
    
    # Assigning a Name to a Name (line 1126):
    # Getting the type of 'tuple_var_assignment_498424' (line 1126)
    tuple_var_assignment_498424_501564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 4), 'tuple_var_assignment_498424')
    # Assigning a type to the variable 'mu0' (line 1126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 10), 'mu0', tuple_var_assignment_498424_501564)
    
    # Assigning a Lambda to a Name (line 1127):
    
    # Assigning a Lambda to a Name (line 1127):

    @norecursion
    def _stypy_temp_lambda_268(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_268'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_268', 1127, 12, True)
        # Passed parameters checking function
        _stypy_temp_lambda_268.stypy_localization = localization
        _stypy_temp_lambda_268.stypy_type_of_self = None
        _stypy_temp_lambda_268.stypy_type_store = module_type_store
        _stypy_temp_lambda_268.stypy_function_name = '_stypy_temp_lambda_268'
        _stypy_temp_lambda_268.stypy_param_names_list = ['x']
        _stypy_temp_lambda_268.stypy_varargs_param_name = None
        _stypy_temp_lambda_268.stypy_kwargs_param_name = None
        _stypy_temp_lambda_268.stypy_call_defaults = defaults
        _stypy_temp_lambda_268.stypy_call_varargs = varargs
        _stypy_temp_lambda_268.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_268', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_268', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to exp(...): (line 1127)
        # Processing the call arguments (line 1127)
        
        # Getting the type of 'x' (line 1127)
        x_501566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 27), 'x', False)
        # Applying the 'usub' unary operator (line 1127)
        result___neg___501567 = python_operator(stypy.reporting.localization.Localization(__file__, 1127, 26), 'usub', x_501566)
        
        # Getting the type of 'x' (line 1127)
        x_501568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 31), 'x', False)
        # Applying the binary operator '*' (line 1127)
        result_mul_501569 = python_operator(stypy.reporting.localization.Localization(__file__, 1127, 26), '*', result___neg___501567, x_501568)
        
        # Processing the call keyword arguments (line 1127)
        kwargs_501570 = {}
        # Getting the type of 'exp' (line 1127)
        exp_501565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 22), 'exp', False)
        # Calling exp(args, kwargs) (line 1127)
        exp_call_result_501571 = invoke(stypy.reporting.localization.Localization(__file__, 1127, 22), exp_501565, *[result_mul_501569], **kwargs_501570)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 12), 'stypy_return_type', exp_call_result_501571)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_268' in the type store
        # Getting the type of 'stypy_return_type' (line 1127)
        stypy_return_type_501572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 12), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_501572)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_268'
        return stypy_return_type_501572

    # Assigning a type to the variable '_stypy_temp_lambda_268' (line 1127)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 12), '_stypy_temp_lambda_268', _stypy_temp_lambda_268)
    # Getting the type of '_stypy_temp_lambda_268' (line 1127)
    _stypy_temp_lambda_268_501573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 12), '_stypy_temp_lambda_268')
    # Assigning a type to the variable 'wfunc' (line 1127)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 4), 'wfunc', _stypy_temp_lambda_268_501573)
    
    
    # Getting the type of 'n' (line 1128)
    n_501574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 7), 'n')
    int_501575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1128, 12), 'int')
    # Applying the binary operator '==' (line 1128)
    result_eq_501576 = python_operator(stypy.reporting.localization.Localization(__file__, 1128, 7), '==', n_501574, int_501575)
    
    # Testing the type of an if condition (line 1128)
    if_condition_501577 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1128, 4), result_eq_501576)
    # Assigning a type to the variable 'if_condition_501577' (line 1128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1128, 4), 'if_condition_501577', if_condition_501577)
    # SSA begins for if statement (line 1128)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 1129):
    
    # Assigning a List to a Name (line 1129):
    
    # Obtaining an instance of the builtin type 'list' (line 1129)
    list_501578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1129, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1129)
    
    # Assigning a type to the variable 'tuple_assignment_498425' (line 1129)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1129, 8), 'tuple_assignment_498425', list_501578)
    
    # Assigning a List to a Name (line 1129):
    
    # Obtaining an instance of the builtin type 'list' (line 1129)
    list_501579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1129, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1129)
    
    # Assigning a type to the variable 'tuple_assignment_498426' (line 1129)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1129, 8), 'tuple_assignment_498426', list_501579)
    
    # Assigning a Name to a Name (line 1129):
    # Getting the type of 'tuple_assignment_498425' (line 1129)
    tuple_assignment_498425_501580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 8), 'tuple_assignment_498425')
    # Assigning a type to the variable 'x' (line 1129)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1129, 8), 'x', tuple_assignment_498425_501580)
    
    # Assigning a Name to a Name (line 1129):
    # Getting the type of 'tuple_assignment_498426' (line 1129)
    tuple_assignment_498426_501581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 8), 'tuple_assignment_498426')
    # Assigning a type to the variable 'w' (line 1129)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1129, 11), 'w', tuple_assignment_498426_501581)
    # SSA join for if statement (line 1128)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1130):
    
    # Assigning a BinOp to a Name (line 1130):
    int_501582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1130, 9), 'int')
    # Getting the type of 'n' (line 1130)
    n_501583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 12), 'n')
    # Applying the binary operator '**' (line 1130)
    result_pow_501584 = python_operator(stypy.reporting.localization.Localization(__file__, 1130, 9), '**', int_501582, n_501583)
    
    
    # Call to _gam(...): (line 1130)
    # Processing the call arguments (line 1130)
    # Getting the type of 'n' (line 1130)
    n_501586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 21), 'n', False)
    int_501587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1130, 25), 'int')
    # Applying the binary operator '+' (line 1130)
    result_add_501588 = python_operator(stypy.reporting.localization.Localization(__file__, 1130, 21), '+', n_501586, int_501587)
    
    # Processing the call keyword arguments (line 1130)
    kwargs_501589 = {}
    # Getting the type of '_gam' (line 1130)
    _gam_501585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 16), '_gam', False)
    # Calling _gam(args, kwargs) (line 1130)
    _gam_call_result_501590 = invoke(stypy.reporting.localization.Localization(__file__, 1130, 16), _gam_501585, *[result_add_501588], **kwargs_501589)
    
    # Applying the binary operator '*' (line 1130)
    result_mul_501591 = python_operator(stypy.reporting.localization.Localization(__file__, 1130, 9), '*', result_pow_501584, _gam_call_result_501590)
    
    
    # Call to sqrt(...): (line 1130)
    # Processing the call arguments (line 1130)
    # Getting the type of 'pi' (line 1130)
    pi_501593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 35), 'pi', False)
    # Processing the call keyword arguments (line 1130)
    kwargs_501594 = {}
    # Getting the type of 'sqrt' (line 1130)
    sqrt_501592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 30), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 1130)
    sqrt_call_result_501595 = invoke(stypy.reporting.localization.Localization(__file__, 1130, 30), sqrt_501592, *[pi_501593], **kwargs_501594)
    
    # Applying the binary operator '*' (line 1130)
    result_mul_501596 = python_operator(stypy.reporting.localization.Localization(__file__, 1130, 28), '*', result_mul_501591, sqrt_call_result_501595)
    
    # Assigning a type to the variable 'hn' (line 1130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1130, 4), 'hn', result_mul_501596)
    
    # Assigning a BinOp to a Name (line 1131):
    
    # Assigning a BinOp to a Name (line 1131):
    int_501597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1131, 9), 'int')
    # Getting the type of 'n' (line 1131)
    n_501598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 12), 'n')
    # Applying the binary operator '**' (line 1131)
    result_pow_501599 = python_operator(stypy.reporting.localization.Localization(__file__, 1131, 9), '**', int_501597, n_501598)
    
    # Assigning a type to the variable 'kn' (line 1131)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1131, 4), 'kn', result_pow_501599)
    
    # Assigning a Call to a Name (line 1132):
    
    # Assigning a Call to a Name (line 1132):
    
    # Call to orthopoly1d(...): (line 1132)
    # Processing the call arguments (line 1132)
    # Getting the type of 'x' (line 1132)
    x_501601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 20), 'x', False)
    # Getting the type of 'w' (line 1132)
    w_501602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 23), 'w', False)
    # Getting the type of 'hn' (line 1132)
    hn_501603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 26), 'hn', False)
    # Getting the type of 'kn' (line 1132)
    kn_501604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 30), 'kn', False)
    # Getting the type of 'wfunc' (line 1132)
    wfunc_501605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 34), 'wfunc', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1132)
    tuple_501606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1132, 42), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1132)
    # Adding element type (line 1132)
    
    # Getting the type of 'inf' (line 1132)
    inf_501607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 43), 'inf', False)
    # Applying the 'usub' unary operator (line 1132)
    result___neg___501608 = python_operator(stypy.reporting.localization.Localization(__file__, 1132, 42), 'usub', inf_501607)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1132, 42), tuple_501606, result___neg___501608)
    # Adding element type (line 1132)
    # Getting the type of 'inf' (line 1132)
    inf_501609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 48), 'inf', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1132, 42), tuple_501606, inf_501609)
    
    # Getting the type of 'monic' (line 1132)
    monic_501610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 54), 'monic', False)

    @norecursion
    def _stypy_temp_lambda_269(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_269'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_269', 1133, 20, True)
        # Passed parameters checking function
        _stypy_temp_lambda_269.stypy_localization = localization
        _stypy_temp_lambda_269.stypy_type_of_self = None
        _stypy_temp_lambda_269.stypy_type_store = module_type_store
        _stypy_temp_lambda_269.stypy_function_name = '_stypy_temp_lambda_269'
        _stypy_temp_lambda_269.stypy_param_names_list = ['x']
        _stypy_temp_lambda_269.stypy_varargs_param_name = None
        _stypy_temp_lambda_269.stypy_kwargs_param_name = None
        _stypy_temp_lambda_269.stypy_call_defaults = defaults
        _stypy_temp_lambda_269.stypy_call_varargs = varargs
        _stypy_temp_lambda_269.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_269', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_269', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to eval_hermite(...): (line 1133)
        # Processing the call arguments (line 1133)
        # Getting the type of 'n' (line 1133)
        n_501612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 43), 'n', False)
        # Getting the type of 'x' (line 1133)
        x_501613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 46), 'x', False)
        # Processing the call keyword arguments (line 1133)
        kwargs_501614 = {}
        # Getting the type of 'eval_hermite' (line 1133)
        eval_hermite_501611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 30), 'eval_hermite', False)
        # Calling eval_hermite(args, kwargs) (line 1133)
        eval_hermite_call_result_501615 = invoke(stypy.reporting.localization.Localization(__file__, 1133, 30), eval_hermite_501611, *[n_501612, x_501613], **kwargs_501614)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1133)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1133, 20), 'stypy_return_type', eval_hermite_call_result_501615)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_269' in the type store
        # Getting the type of 'stypy_return_type' (line 1133)
        stypy_return_type_501616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 20), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_501616)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_269'
        return stypy_return_type_501616

    # Assigning a type to the variable '_stypy_temp_lambda_269' (line 1133)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1133, 20), '_stypy_temp_lambda_269', _stypy_temp_lambda_269)
    # Getting the type of '_stypy_temp_lambda_269' (line 1133)
    _stypy_temp_lambda_269_501617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 20), '_stypy_temp_lambda_269')
    # Processing the call keyword arguments (line 1132)
    kwargs_501618 = {}
    # Getting the type of 'orthopoly1d' (line 1132)
    orthopoly1d_501600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 8), 'orthopoly1d', False)
    # Calling orthopoly1d(args, kwargs) (line 1132)
    orthopoly1d_call_result_501619 = invoke(stypy.reporting.localization.Localization(__file__, 1132, 8), orthopoly1d_501600, *[x_501601, w_501602, hn_501603, kn_501604, wfunc_501605, tuple_501606, monic_501610, _stypy_temp_lambda_269_501617], **kwargs_501618)
    
    # Assigning a type to the variable 'p' (line 1132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 4), 'p', orthopoly1d_call_result_501619)
    # Getting the type of 'p' (line 1134)
    p_501620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 11), 'p')
    # Assigning a type to the variable 'stypy_return_type' (line 1134)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1134, 4), 'stypy_return_type', p_501620)
    
    # ################# End of 'hermite(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'hermite' in the type store
    # Getting the type of 'stypy_return_type' (line 1089)
    stypy_return_type_501621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_501621)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'hermite'
    return stypy_return_type_501621

# Assigning a type to the variable 'hermite' (line 1089)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1089, 0), 'hermite', hermite)

@norecursion
def roots_hermitenorm(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1139)
    False_501622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 28), 'False')
    defaults = [False_501622]
    # Create a new context for function 'roots_hermitenorm'
    module_type_store = module_type_store.open_function_context('roots_hermitenorm', 1139, 0, False)
    
    # Passed parameters checking function
    roots_hermitenorm.stypy_localization = localization
    roots_hermitenorm.stypy_type_of_self = None
    roots_hermitenorm.stypy_type_store = module_type_store
    roots_hermitenorm.stypy_function_name = 'roots_hermitenorm'
    roots_hermitenorm.stypy_param_names_list = ['n', 'mu']
    roots_hermitenorm.stypy_varargs_param_name = None
    roots_hermitenorm.stypy_kwargs_param_name = None
    roots_hermitenorm.stypy_call_defaults = defaults
    roots_hermitenorm.stypy_call_varargs = varargs
    roots_hermitenorm.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'roots_hermitenorm', ['n', 'mu'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'roots_hermitenorm', localization, ['n', 'mu'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'roots_hermitenorm(...)' code ##################

    str_501623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1181, (-1)), 'str', "Gauss-Hermite (statistician's) quadrature.\n\n    Computes the sample points and weights for Gauss-Hermite quadrature.\n    The sample points are the roots of the n-th degree Hermite polynomial,\n    :math:`He_n(x)`.  These sample points and weights correctly integrate\n    polynomials of degree :math:`2n - 1` or less over the interval\n    :math:`[-\\infty, \\infty]` with weight function :math:`f(x) = e^{-x^2/2}`.\n\n    Parameters\n    ----------\n    n : int\n        quadrature order\n    mu : bool, optional\n        If True, return the sum of the weights, optional.\n\n    Returns\n    -------\n    x : ndarray\n        Sample points\n    w : ndarray\n        Weights\n    mu : float\n        Sum of the weights\n\n    Notes\n    -----\n    For small n up to 150 a modified version of the Golub-Welsch\n    algorithm is used. Nodes are computed from the eigenvalue\n    problem and improved by one step of a Newton iteration.\n    The weights are computed from the well-known analytical formula.\n\n    For n larger than 150 an optimal asymptotic algorithm is used\n    which computes nodes and weights in a numerical stable manner.\n    The algorithm has linear runtime making computation for very\n    large n (several thousand or more) feasible.\n\n    See Also\n    --------\n    scipy.integrate.quadrature\n    scipy.integrate.fixed_quad\n    numpy.polynomial.hermite_e.hermegauss\n    ")
    
    # Assigning a Call to a Name (line 1182):
    
    # Assigning a Call to a Name (line 1182):
    
    # Call to int(...): (line 1182)
    # Processing the call arguments (line 1182)
    # Getting the type of 'n' (line 1182)
    n_501625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 12), 'n', False)
    # Processing the call keyword arguments (line 1182)
    kwargs_501626 = {}
    # Getting the type of 'int' (line 1182)
    int_501624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 8), 'int', False)
    # Calling int(args, kwargs) (line 1182)
    int_call_result_501627 = invoke(stypy.reporting.localization.Localization(__file__, 1182, 8), int_501624, *[n_501625], **kwargs_501626)
    
    # Assigning a type to the variable 'm' (line 1182)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1182, 4), 'm', int_call_result_501627)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'n' (line 1183)
    n_501628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 7), 'n')
    int_501629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1183, 11), 'int')
    # Applying the binary operator '<' (line 1183)
    result_lt_501630 = python_operator(stypy.reporting.localization.Localization(__file__, 1183, 7), '<', n_501628, int_501629)
    
    
    # Getting the type of 'n' (line 1183)
    n_501631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 16), 'n')
    # Getting the type of 'm' (line 1183)
    m_501632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 21), 'm')
    # Applying the binary operator '!=' (line 1183)
    result_ne_501633 = python_operator(stypy.reporting.localization.Localization(__file__, 1183, 16), '!=', n_501631, m_501632)
    
    # Applying the binary operator 'or' (line 1183)
    result_or_keyword_501634 = python_operator(stypy.reporting.localization.Localization(__file__, 1183, 7), 'or', result_lt_501630, result_ne_501633)
    
    # Testing the type of an if condition (line 1183)
    if_condition_501635 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1183, 4), result_or_keyword_501634)
    # Assigning a type to the variable 'if_condition_501635' (line 1183)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1183, 4), 'if_condition_501635', if_condition_501635)
    # SSA begins for if statement (line 1183)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1184)
    # Processing the call arguments (line 1184)
    str_501637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1184, 25), 'str', 'n must be a positive integer.')
    # Processing the call keyword arguments (line 1184)
    kwargs_501638 = {}
    # Getting the type of 'ValueError' (line 1184)
    ValueError_501636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1184)
    ValueError_call_result_501639 = invoke(stypy.reporting.localization.Localization(__file__, 1184, 14), ValueError_501636, *[str_501637], **kwargs_501638)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1184, 8), ValueError_call_result_501639, 'raise parameter', BaseException)
    # SSA join for if statement (line 1183)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1186):
    
    # Assigning a Call to a Name (line 1186):
    
    # Call to sqrt(...): (line 1186)
    # Processing the call arguments (line 1186)
    float_501642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1186, 18), 'float')
    # Getting the type of 'np' (line 1186)
    np_501643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 22), 'np', False)
    # Obtaining the member 'pi' of a type (line 1186)
    pi_501644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1186, 22), np_501643, 'pi')
    # Applying the binary operator '*' (line 1186)
    result_mul_501645 = python_operator(stypy.reporting.localization.Localization(__file__, 1186, 18), '*', float_501642, pi_501644)
    
    # Processing the call keyword arguments (line 1186)
    kwargs_501646 = {}
    # Getting the type of 'np' (line 1186)
    np_501640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 10), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 1186)
    sqrt_501641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1186, 10), np_501640, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1186)
    sqrt_call_result_501647 = invoke(stypy.reporting.localization.Localization(__file__, 1186, 10), sqrt_501641, *[result_mul_501645], **kwargs_501646)
    
    # Assigning a type to the variable 'mu0' (line 1186)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1186, 4), 'mu0', sqrt_call_result_501647)
    
    
    # Getting the type of 'n' (line 1187)
    n_501648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 7), 'n')
    int_501649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1187, 12), 'int')
    # Applying the binary operator '<=' (line 1187)
    result_le_501650 = python_operator(stypy.reporting.localization.Localization(__file__, 1187, 7), '<=', n_501648, int_501649)
    
    # Testing the type of an if condition (line 1187)
    if_condition_501651 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1187, 4), result_le_501650)
    # Assigning a type to the variable 'if_condition_501651' (line 1187)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1187, 4), 'if_condition_501651', if_condition_501651)
    # SSA begins for if statement (line 1187)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Lambda to a Name (line 1188):
    
    # Assigning a Lambda to a Name (line 1188):

    @norecursion
    def _stypy_temp_lambda_270(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_270'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_270', 1188, 18, True)
        # Passed parameters checking function
        _stypy_temp_lambda_270.stypy_localization = localization
        _stypy_temp_lambda_270.stypy_type_of_self = None
        _stypy_temp_lambda_270.stypy_type_store = module_type_store
        _stypy_temp_lambda_270.stypy_function_name = '_stypy_temp_lambda_270'
        _stypy_temp_lambda_270.stypy_param_names_list = ['k']
        _stypy_temp_lambda_270.stypy_varargs_param_name = None
        _stypy_temp_lambda_270.stypy_kwargs_param_name = None
        _stypy_temp_lambda_270.stypy_call_defaults = defaults
        _stypy_temp_lambda_270.stypy_call_varargs = varargs
        _stypy_temp_lambda_270.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_270', ['k'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_270', ['k'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        float_501652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1188, 28), 'float')
        # Getting the type of 'k' (line 1188)
        k_501653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 32), 'k')
        # Applying the binary operator '*' (line 1188)
        result_mul_501654 = python_operator(stypy.reporting.localization.Localization(__file__, 1188, 28), '*', float_501652, k_501653)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1188, 18), 'stypy_return_type', result_mul_501654)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_270' in the type store
        # Getting the type of 'stypy_return_type' (line 1188)
        stypy_return_type_501655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 18), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_501655)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_270'
        return stypy_return_type_501655

    # Assigning a type to the variable '_stypy_temp_lambda_270' (line 1188)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1188, 18), '_stypy_temp_lambda_270', _stypy_temp_lambda_270)
    # Getting the type of '_stypy_temp_lambda_270' (line 1188)
    _stypy_temp_lambda_270_501656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 18), '_stypy_temp_lambda_270')
    # Assigning a type to the variable 'an_func' (line 1188)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1188, 8), 'an_func', _stypy_temp_lambda_270_501656)
    
    # Assigning a Lambda to a Name (line 1189):
    
    # Assigning a Lambda to a Name (line 1189):

    @norecursion
    def _stypy_temp_lambda_271(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_271'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_271', 1189, 18, True)
        # Passed parameters checking function
        _stypy_temp_lambda_271.stypy_localization = localization
        _stypy_temp_lambda_271.stypy_type_of_self = None
        _stypy_temp_lambda_271.stypy_type_store = module_type_store
        _stypy_temp_lambda_271.stypy_function_name = '_stypy_temp_lambda_271'
        _stypy_temp_lambda_271.stypy_param_names_list = ['k']
        _stypy_temp_lambda_271.stypy_varargs_param_name = None
        _stypy_temp_lambda_271.stypy_kwargs_param_name = None
        _stypy_temp_lambda_271.stypy_call_defaults = defaults
        _stypy_temp_lambda_271.stypy_call_varargs = varargs
        _stypy_temp_lambda_271.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_271', ['k'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_271', ['k'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to sqrt(...): (line 1189)
        # Processing the call arguments (line 1189)
        # Getting the type of 'k' (line 1189)
        k_501659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 36), 'k', False)
        # Processing the call keyword arguments (line 1189)
        kwargs_501660 = {}
        # Getting the type of 'np' (line 1189)
        np_501657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 28), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 1189)
        sqrt_501658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1189, 28), np_501657, 'sqrt')
        # Calling sqrt(args, kwargs) (line 1189)
        sqrt_call_result_501661 = invoke(stypy.reporting.localization.Localization(__file__, 1189, 28), sqrt_501658, *[k_501659], **kwargs_501660)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1189, 18), 'stypy_return_type', sqrt_call_result_501661)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_271' in the type store
        # Getting the type of 'stypy_return_type' (line 1189)
        stypy_return_type_501662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 18), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_501662)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_271'
        return stypy_return_type_501662

    # Assigning a type to the variable '_stypy_temp_lambda_271' (line 1189)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1189, 18), '_stypy_temp_lambda_271', _stypy_temp_lambda_271)
    # Getting the type of '_stypy_temp_lambda_271' (line 1189)
    _stypy_temp_lambda_271_501663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 18), '_stypy_temp_lambda_271')
    # Assigning a type to the variable 'bn_func' (line 1189)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1189, 8), 'bn_func', _stypy_temp_lambda_271_501663)
    
    # Assigning a Attribute to a Name (line 1190):
    
    # Assigning a Attribute to a Name (line 1190):
    # Getting the type of 'cephes' (line 1190)
    cephes_501664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 12), 'cephes')
    # Obtaining the member 'eval_hermitenorm' of a type (line 1190)
    eval_hermitenorm_501665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1190, 12), cephes_501664, 'eval_hermitenorm')
    # Assigning a type to the variable 'f' (line 1190)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1190, 8), 'f', eval_hermitenorm_501665)
    
    # Assigning a Lambda to a Name (line 1191):
    
    # Assigning a Lambda to a Name (line 1191):

    @norecursion
    def _stypy_temp_lambda_272(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_272'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_272', 1191, 13, True)
        # Passed parameters checking function
        _stypy_temp_lambda_272.stypy_localization = localization
        _stypy_temp_lambda_272.stypy_type_of_self = None
        _stypy_temp_lambda_272.stypy_type_store = module_type_store
        _stypy_temp_lambda_272.stypy_function_name = '_stypy_temp_lambda_272'
        _stypy_temp_lambda_272.stypy_param_names_list = ['n', 'x']
        _stypy_temp_lambda_272.stypy_varargs_param_name = None
        _stypy_temp_lambda_272.stypy_kwargs_param_name = None
        _stypy_temp_lambda_272.stypy_call_defaults = defaults
        _stypy_temp_lambda_272.stypy_call_varargs = varargs
        _stypy_temp_lambda_272.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_272', ['n', 'x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_272', ['n', 'x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        # Getting the type of 'n' (line 1191)
        n_501666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 26), 'n')
        
        # Call to eval_hermitenorm(...): (line 1191)
        # Processing the call arguments (line 1191)
        # Getting the type of 'n' (line 1191)
        n_501669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 54), 'n', False)
        int_501670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1191, 56), 'int')
        # Applying the binary operator '-' (line 1191)
        result_sub_501671 = python_operator(stypy.reporting.localization.Localization(__file__, 1191, 54), '-', n_501669, int_501670)
        
        # Getting the type of 'x' (line 1191)
        x_501672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 59), 'x', False)
        # Processing the call keyword arguments (line 1191)
        kwargs_501673 = {}
        # Getting the type of 'cephes' (line 1191)
        cephes_501667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 30), 'cephes', False)
        # Obtaining the member 'eval_hermitenorm' of a type (line 1191)
        eval_hermitenorm_501668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1191, 30), cephes_501667, 'eval_hermitenorm')
        # Calling eval_hermitenorm(args, kwargs) (line 1191)
        eval_hermitenorm_call_result_501674 = invoke(stypy.reporting.localization.Localization(__file__, 1191, 30), eval_hermitenorm_501668, *[result_sub_501671, x_501672], **kwargs_501673)
        
        # Applying the binary operator '*' (line 1191)
        result_mul_501675 = python_operator(stypy.reporting.localization.Localization(__file__, 1191, 26), '*', n_501666, eval_hermitenorm_call_result_501674)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1191, 13), 'stypy_return_type', result_mul_501675)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_272' in the type store
        # Getting the type of 'stypy_return_type' (line 1191)
        stypy_return_type_501676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 13), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_501676)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_272'
        return stypy_return_type_501676

    # Assigning a type to the variable '_stypy_temp_lambda_272' (line 1191)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1191, 13), '_stypy_temp_lambda_272', _stypy_temp_lambda_272)
    # Getting the type of '_stypy_temp_lambda_272' (line 1191)
    _stypy_temp_lambda_272_501677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 13), '_stypy_temp_lambda_272')
    # Assigning a type to the variable 'df' (line 1191)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1191, 8), 'df', _stypy_temp_lambda_272_501677)
    
    # Call to _gen_roots_and_weights(...): (line 1192)
    # Processing the call arguments (line 1192)
    # Getting the type of 'm' (line 1192)
    m_501679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 38), 'm', False)
    # Getting the type of 'mu0' (line 1192)
    mu0_501680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 41), 'mu0', False)
    # Getting the type of 'an_func' (line 1192)
    an_func_501681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 46), 'an_func', False)
    # Getting the type of 'bn_func' (line 1192)
    bn_func_501682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 55), 'bn_func', False)
    # Getting the type of 'f' (line 1192)
    f_501683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 64), 'f', False)
    # Getting the type of 'df' (line 1192)
    df_501684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 67), 'df', False)
    # Getting the type of 'True' (line 1192)
    True_501685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 71), 'True', False)
    # Getting the type of 'mu' (line 1192)
    mu_501686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 77), 'mu', False)
    # Processing the call keyword arguments (line 1192)
    kwargs_501687 = {}
    # Getting the type of '_gen_roots_and_weights' (line 1192)
    _gen_roots_and_weights_501678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 15), '_gen_roots_and_weights', False)
    # Calling _gen_roots_and_weights(args, kwargs) (line 1192)
    _gen_roots_and_weights_call_result_501688 = invoke(stypy.reporting.localization.Localization(__file__, 1192, 15), _gen_roots_and_weights_501678, *[m_501679, mu0_501680, an_func_501681, bn_func_501682, f_501683, df_501684, True_501685, mu_501686], **kwargs_501687)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1192)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1192, 8), 'stypy_return_type', _gen_roots_and_weights_call_result_501688)
    # SSA branch for the else part of an if statement (line 1187)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Tuple (line 1194):
    
    # Assigning a Subscript to a Name (line 1194):
    
    # Obtaining the type of the subscript
    int_501689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1194, 8), 'int')
    
    # Call to _roots_hermite_asy(...): (line 1194)
    # Processing the call arguments (line 1194)
    # Getting the type of 'm' (line 1194)
    m_501691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 44), 'm', False)
    # Processing the call keyword arguments (line 1194)
    kwargs_501692 = {}
    # Getting the type of '_roots_hermite_asy' (line 1194)
    _roots_hermite_asy_501690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 25), '_roots_hermite_asy', False)
    # Calling _roots_hermite_asy(args, kwargs) (line 1194)
    _roots_hermite_asy_call_result_501693 = invoke(stypy.reporting.localization.Localization(__file__, 1194, 25), _roots_hermite_asy_501690, *[m_501691], **kwargs_501692)
    
    # Obtaining the member '__getitem__' of a type (line 1194)
    getitem___501694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1194, 8), _roots_hermite_asy_call_result_501693, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1194)
    subscript_call_result_501695 = invoke(stypy.reporting.localization.Localization(__file__, 1194, 8), getitem___501694, int_501689)
    
    # Assigning a type to the variable 'tuple_var_assignment_498427' (line 1194)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1194, 8), 'tuple_var_assignment_498427', subscript_call_result_501695)
    
    # Assigning a Subscript to a Name (line 1194):
    
    # Obtaining the type of the subscript
    int_501696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1194, 8), 'int')
    
    # Call to _roots_hermite_asy(...): (line 1194)
    # Processing the call arguments (line 1194)
    # Getting the type of 'm' (line 1194)
    m_501698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 44), 'm', False)
    # Processing the call keyword arguments (line 1194)
    kwargs_501699 = {}
    # Getting the type of '_roots_hermite_asy' (line 1194)
    _roots_hermite_asy_501697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 25), '_roots_hermite_asy', False)
    # Calling _roots_hermite_asy(args, kwargs) (line 1194)
    _roots_hermite_asy_call_result_501700 = invoke(stypy.reporting.localization.Localization(__file__, 1194, 25), _roots_hermite_asy_501697, *[m_501698], **kwargs_501699)
    
    # Obtaining the member '__getitem__' of a type (line 1194)
    getitem___501701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1194, 8), _roots_hermite_asy_call_result_501700, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1194)
    subscript_call_result_501702 = invoke(stypy.reporting.localization.Localization(__file__, 1194, 8), getitem___501701, int_501696)
    
    # Assigning a type to the variable 'tuple_var_assignment_498428' (line 1194)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1194, 8), 'tuple_var_assignment_498428', subscript_call_result_501702)
    
    # Assigning a Name to a Name (line 1194):
    # Getting the type of 'tuple_var_assignment_498427' (line 1194)
    tuple_var_assignment_498427_501703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 8), 'tuple_var_assignment_498427')
    # Assigning a type to the variable 'nodes' (line 1194)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1194, 8), 'nodes', tuple_var_assignment_498427_501703)
    
    # Assigning a Name to a Name (line 1194):
    # Getting the type of 'tuple_var_assignment_498428' (line 1194)
    tuple_var_assignment_498428_501704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 8), 'tuple_var_assignment_498428')
    # Assigning a type to the variable 'weights' (line 1194)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1194, 15), 'weights', tuple_var_assignment_498428_501704)
    
    # Getting the type of 'nodes' (line 1196)
    nodes_501705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 8), 'nodes')
    
    # Call to sqrt(...): (line 1196)
    # Processing the call arguments (line 1196)
    int_501707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1196, 22), 'int')
    # Processing the call keyword arguments (line 1196)
    kwargs_501708 = {}
    # Getting the type of 'sqrt' (line 1196)
    sqrt_501706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 17), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 1196)
    sqrt_call_result_501709 = invoke(stypy.reporting.localization.Localization(__file__, 1196, 17), sqrt_501706, *[int_501707], **kwargs_501708)
    
    # Applying the binary operator '*=' (line 1196)
    result_imul_501710 = python_operator(stypy.reporting.localization.Localization(__file__, 1196, 8), '*=', nodes_501705, sqrt_call_result_501709)
    # Assigning a type to the variable 'nodes' (line 1196)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1196, 8), 'nodes', result_imul_501710)
    
    
    # Getting the type of 'weights' (line 1197)
    weights_501711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 8), 'weights')
    
    # Call to sqrt(...): (line 1197)
    # Processing the call arguments (line 1197)
    int_501713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1197, 24), 'int')
    # Processing the call keyword arguments (line 1197)
    kwargs_501714 = {}
    # Getting the type of 'sqrt' (line 1197)
    sqrt_501712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 19), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 1197)
    sqrt_call_result_501715 = invoke(stypy.reporting.localization.Localization(__file__, 1197, 19), sqrt_501712, *[int_501713], **kwargs_501714)
    
    # Applying the binary operator '*=' (line 1197)
    result_imul_501716 = python_operator(stypy.reporting.localization.Localization(__file__, 1197, 8), '*=', weights_501711, sqrt_call_result_501715)
    # Assigning a type to the variable 'weights' (line 1197)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1197, 8), 'weights', result_imul_501716)
    
    
    # Getting the type of 'mu' (line 1198)
    mu_501717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 11), 'mu')
    # Testing the type of an if condition (line 1198)
    if_condition_501718 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1198, 8), mu_501717)
    # Assigning a type to the variable 'if_condition_501718' (line 1198)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1198, 8), 'if_condition_501718', if_condition_501718)
    # SSA begins for if statement (line 1198)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1199)
    tuple_501719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1199, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1199)
    # Adding element type (line 1199)
    # Getting the type of 'nodes' (line 1199)
    nodes_501720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 19), 'nodes')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1199, 19), tuple_501719, nodes_501720)
    # Adding element type (line 1199)
    # Getting the type of 'weights' (line 1199)
    weights_501721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 26), 'weights')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1199, 19), tuple_501719, weights_501721)
    # Adding element type (line 1199)
    # Getting the type of 'mu0' (line 1199)
    mu0_501722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 35), 'mu0')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1199, 19), tuple_501719, mu0_501722)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1199)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1199, 12), 'stypy_return_type', tuple_501719)
    # SSA branch for the else part of an if statement (line 1198)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1201)
    tuple_501723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1201, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1201)
    # Adding element type (line 1201)
    # Getting the type of 'nodes' (line 1201)
    nodes_501724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 19), 'nodes')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1201, 19), tuple_501723, nodes_501724)
    # Adding element type (line 1201)
    # Getting the type of 'weights' (line 1201)
    weights_501725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 26), 'weights')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1201, 19), tuple_501723, weights_501725)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1201)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1201, 12), 'stypy_return_type', tuple_501723)
    # SSA join for if statement (line 1198)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1187)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'roots_hermitenorm(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'roots_hermitenorm' in the type store
    # Getting the type of 'stypy_return_type' (line 1139)
    stypy_return_type_501726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_501726)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'roots_hermitenorm'
    return stypy_return_type_501726

# Assigning a type to the variable 'roots_hermitenorm' (line 1139)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1139, 0), 'roots_hermitenorm', roots_hermitenorm)

@norecursion
def hermitenorm(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1204)
    False_501727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 25), 'False')
    defaults = [False_501727]
    # Create a new context for function 'hermitenorm'
    module_type_store = module_type_store.open_function_context('hermitenorm', 1204, 0, False)
    
    # Passed parameters checking function
    hermitenorm.stypy_localization = localization
    hermitenorm.stypy_type_of_self = None
    hermitenorm.stypy_type_store = module_type_store
    hermitenorm.stypy_function_name = 'hermitenorm'
    hermitenorm.stypy_param_names_list = ['n', 'monic']
    hermitenorm.stypy_varargs_param_name = None
    hermitenorm.stypy_kwargs_param_name = None
    hermitenorm.stypy_call_defaults = defaults
    hermitenorm.stypy_call_varargs = varargs
    hermitenorm.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'hermitenorm', ['n', 'monic'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'hermitenorm', localization, ['n', 'monic'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'hermitenorm(...)' code ##################

    str_501728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1234, (-1)), 'str', "Normalized (probabilist's) Hermite polynomial.\n\n    Defined by\n\n    .. math::\n\n        He_n(x) = (-1)^ne^{x^2/2}\\frac{d^n}{dx^n}e^{-x^2/2};\n\n    :math:`He_n` is a polynomial of degree :math:`n`.\n\n    Parameters\n    ----------\n    n : int\n        Degree of the polynomial.\n    monic : bool, optional\n        If `True`, scale the leading coefficient to be 1. Default is\n        `False`.\n\n    Returns\n    -------\n    He : orthopoly1d\n        Hermite polynomial.\n\n    Notes\n    -----\n\n    The polynomials :math:`He_n` are orthogonal over :math:`(-\\infty,\n    \\infty)` with weight function :math:`e^{-x^2/2}`.\n\n    ")
    
    
    # Getting the type of 'n' (line 1235)
    n_501729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 7), 'n')
    int_501730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1235, 11), 'int')
    # Applying the binary operator '<' (line 1235)
    result_lt_501731 = python_operator(stypy.reporting.localization.Localization(__file__, 1235, 7), '<', n_501729, int_501730)
    
    # Testing the type of an if condition (line 1235)
    if_condition_501732 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1235, 4), result_lt_501731)
    # Assigning a type to the variable 'if_condition_501732' (line 1235)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1235, 4), 'if_condition_501732', if_condition_501732)
    # SSA begins for if statement (line 1235)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1236)
    # Processing the call arguments (line 1236)
    str_501734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1236, 25), 'str', 'n must be nonnegative.')
    # Processing the call keyword arguments (line 1236)
    kwargs_501735 = {}
    # Getting the type of 'ValueError' (line 1236)
    ValueError_501733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1236)
    ValueError_call_result_501736 = invoke(stypy.reporting.localization.Localization(__file__, 1236, 14), ValueError_501733, *[str_501734], **kwargs_501735)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1236, 8), ValueError_call_result_501736, 'raise parameter', BaseException)
    # SSA join for if statement (line 1235)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 1238)
    n_501737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 7), 'n')
    int_501738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, 12), 'int')
    # Applying the binary operator '==' (line 1238)
    result_eq_501739 = python_operator(stypy.reporting.localization.Localization(__file__, 1238, 7), '==', n_501737, int_501738)
    
    # Testing the type of an if condition (line 1238)
    if_condition_501740 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1238, 4), result_eq_501739)
    # Assigning a type to the variable 'if_condition_501740' (line 1238)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1238, 4), 'if_condition_501740', if_condition_501740)
    # SSA begins for if statement (line 1238)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1239):
    
    # Assigning a BinOp to a Name (line 1239):
    # Getting the type of 'n' (line 1239)
    n_501741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 13), 'n')
    int_501742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1239, 17), 'int')
    # Applying the binary operator '+' (line 1239)
    result_add_501743 = python_operator(stypy.reporting.localization.Localization(__file__, 1239, 13), '+', n_501741, int_501742)
    
    # Assigning a type to the variable 'n1' (line 1239)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1239, 8), 'n1', result_add_501743)
    # SSA branch for the else part of an if statement (line 1238)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1241):
    
    # Assigning a Name to a Name (line 1241):
    # Getting the type of 'n' (line 1241)
    n_501744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 13), 'n')
    # Assigning a type to the variable 'n1' (line 1241)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1241, 8), 'n1', n_501744)
    # SSA join for if statement (line 1238)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 1242):
    
    # Assigning a Subscript to a Name (line 1242):
    
    # Obtaining the type of the subscript
    int_501745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1242, 4), 'int')
    
    # Call to roots_hermitenorm(...): (line 1242)
    # Processing the call arguments (line 1242)
    # Getting the type of 'n1' (line 1242)
    n1_501747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 34), 'n1', False)
    # Processing the call keyword arguments (line 1242)
    # Getting the type of 'True' (line 1242)
    True_501748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 41), 'True', False)
    keyword_501749 = True_501748
    kwargs_501750 = {'mu': keyword_501749}
    # Getting the type of 'roots_hermitenorm' (line 1242)
    roots_hermitenorm_501746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 16), 'roots_hermitenorm', False)
    # Calling roots_hermitenorm(args, kwargs) (line 1242)
    roots_hermitenorm_call_result_501751 = invoke(stypy.reporting.localization.Localization(__file__, 1242, 16), roots_hermitenorm_501746, *[n1_501747], **kwargs_501750)
    
    # Obtaining the member '__getitem__' of a type (line 1242)
    getitem___501752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1242, 4), roots_hermitenorm_call_result_501751, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1242)
    subscript_call_result_501753 = invoke(stypy.reporting.localization.Localization(__file__, 1242, 4), getitem___501752, int_501745)
    
    # Assigning a type to the variable 'tuple_var_assignment_498429' (line 1242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1242, 4), 'tuple_var_assignment_498429', subscript_call_result_501753)
    
    # Assigning a Subscript to a Name (line 1242):
    
    # Obtaining the type of the subscript
    int_501754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1242, 4), 'int')
    
    # Call to roots_hermitenorm(...): (line 1242)
    # Processing the call arguments (line 1242)
    # Getting the type of 'n1' (line 1242)
    n1_501756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 34), 'n1', False)
    # Processing the call keyword arguments (line 1242)
    # Getting the type of 'True' (line 1242)
    True_501757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 41), 'True', False)
    keyword_501758 = True_501757
    kwargs_501759 = {'mu': keyword_501758}
    # Getting the type of 'roots_hermitenorm' (line 1242)
    roots_hermitenorm_501755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 16), 'roots_hermitenorm', False)
    # Calling roots_hermitenorm(args, kwargs) (line 1242)
    roots_hermitenorm_call_result_501760 = invoke(stypy.reporting.localization.Localization(__file__, 1242, 16), roots_hermitenorm_501755, *[n1_501756], **kwargs_501759)
    
    # Obtaining the member '__getitem__' of a type (line 1242)
    getitem___501761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1242, 4), roots_hermitenorm_call_result_501760, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1242)
    subscript_call_result_501762 = invoke(stypy.reporting.localization.Localization(__file__, 1242, 4), getitem___501761, int_501754)
    
    # Assigning a type to the variable 'tuple_var_assignment_498430' (line 1242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1242, 4), 'tuple_var_assignment_498430', subscript_call_result_501762)
    
    # Assigning a Subscript to a Name (line 1242):
    
    # Obtaining the type of the subscript
    int_501763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1242, 4), 'int')
    
    # Call to roots_hermitenorm(...): (line 1242)
    # Processing the call arguments (line 1242)
    # Getting the type of 'n1' (line 1242)
    n1_501765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 34), 'n1', False)
    # Processing the call keyword arguments (line 1242)
    # Getting the type of 'True' (line 1242)
    True_501766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 41), 'True', False)
    keyword_501767 = True_501766
    kwargs_501768 = {'mu': keyword_501767}
    # Getting the type of 'roots_hermitenorm' (line 1242)
    roots_hermitenorm_501764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 16), 'roots_hermitenorm', False)
    # Calling roots_hermitenorm(args, kwargs) (line 1242)
    roots_hermitenorm_call_result_501769 = invoke(stypy.reporting.localization.Localization(__file__, 1242, 16), roots_hermitenorm_501764, *[n1_501765], **kwargs_501768)
    
    # Obtaining the member '__getitem__' of a type (line 1242)
    getitem___501770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1242, 4), roots_hermitenorm_call_result_501769, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1242)
    subscript_call_result_501771 = invoke(stypy.reporting.localization.Localization(__file__, 1242, 4), getitem___501770, int_501763)
    
    # Assigning a type to the variable 'tuple_var_assignment_498431' (line 1242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1242, 4), 'tuple_var_assignment_498431', subscript_call_result_501771)
    
    # Assigning a Name to a Name (line 1242):
    # Getting the type of 'tuple_var_assignment_498429' (line 1242)
    tuple_var_assignment_498429_501772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 4), 'tuple_var_assignment_498429')
    # Assigning a type to the variable 'x' (line 1242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1242, 4), 'x', tuple_var_assignment_498429_501772)
    
    # Assigning a Name to a Name (line 1242):
    # Getting the type of 'tuple_var_assignment_498430' (line 1242)
    tuple_var_assignment_498430_501773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 4), 'tuple_var_assignment_498430')
    # Assigning a type to the variable 'w' (line 1242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1242, 7), 'w', tuple_var_assignment_498430_501773)
    
    # Assigning a Name to a Name (line 1242):
    # Getting the type of 'tuple_var_assignment_498431' (line 1242)
    tuple_var_assignment_498431_501774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 4), 'tuple_var_assignment_498431')
    # Assigning a type to the variable 'mu0' (line 1242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1242, 10), 'mu0', tuple_var_assignment_498431_501774)
    
    # Assigning a Lambda to a Name (line 1243):
    
    # Assigning a Lambda to a Name (line 1243):

    @norecursion
    def _stypy_temp_lambda_273(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_273'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_273', 1243, 12, True)
        # Passed parameters checking function
        _stypy_temp_lambda_273.stypy_localization = localization
        _stypy_temp_lambda_273.stypy_type_of_self = None
        _stypy_temp_lambda_273.stypy_type_store = module_type_store
        _stypy_temp_lambda_273.stypy_function_name = '_stypy_temp_lambda_273'
        _stypy_temp_lambda_273.stypy_param_names_list = ['x']
        _stypy_temp_lambda_273.stypy_varargs_param_name = None
        _stypy_temp_lambda_273.stypy_kwargs_param_name = None
        _stypy_temp_lambda_273.stypy_call_defaults = defaults
        _stypy_temp_lambda_273.stypy_call_varargs = varargs
        _stypy_temp_lambda_273.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_273', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_273', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to exp(...): (line 1243)
        # Processing the call arguments (line 1243)
        
        # Getting the type of 'x' (line 1243)
        x_501776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 27), 'x', False)
        # Applying the 'usub' unary operator (line 1243)
        result___neg___501777 = python_operator(stypy.reporting.localization.Localization(__file__, 1243, 26), 'usub', x_501776)
        
        # Getting the type of 'x' (line 1243)
        x_501778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 31), 'x', False)
        # Applying the binary operator '*' (line 1243)
        result_mul_501779 = python_operator(stypy.reporting.localization.Localization(__file__, 1243, 26), '*', result___neg___501777, x_501778)
        
        float_501780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1243, 35), 'float')
        # Applying the binary operator 'div' (line 1243)
        result_div_501781 = python_operator(stypy.reporting.localization.Localization(__file__, 1243, 33), 'div', result_mul_501779, float_501780)
        
        # Processing the call keyword arguments (line 1243)
        kwargs_501782 = {}
        # Getting the type of 'exp' (line 1243)
        exp_501775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 22), 'exp', False)
        # Calling exp(args, kwargs) (line 1243)
        exp_call_result_501783 = invoke(stypy.reporting.localization.Localization(__file__, 1243, 22), exp_501775, *[result_div_501781], **kwargs_501782)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1243, 12), 'stypy_return_type', exp_call_result_501783)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_273' in the type store
        # Getting the type of 'stypy_return_type' (line 1243)
        stypy_return_type_501784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 12), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_501784)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_273'
        return stypy_return_type_501784

    # Assigning a type to the variable '_stypy_temp_lambda_273' (line 1243)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1243, 12), '_stypy_temp_lambda_273', _stypy_temp_lambda_273)
    # Getting the type of '_stypy_temp_lambda_273' (line 1243)
    _stypy_temp_lambda_273_501785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 12), '_stypy_temp_lambda_273')
    # Assigning a type to the variable 'wfunc' (line 1243)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1243, 4), 'wfunc', _stypy_temp_lambda_273_501785)
    
    
    # Getting the type of 'n' (line 1244)
    n_501786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 7), 'n')
    int_501787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1244, 12), 'int')
    # Applying the binary operator '==' (line 1244)
    result_eq_501788 = python_operator(stypy.reporting.localization.Localization(__file__, 1244, 7), '==', n_501786, int_501787)
    
    # Testing the type of an if condition (line 1244)
    if_condition_501789 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1244, 4), result_eq_501788)
    # Assigning a type to the variable 'if_condition_501789' (line 1244)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1244, 4), 'if_condition_501789', if_condition_501789)
    # SSA begins for if statement (line 1244)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 1245):
    
    # Assigning a List to a Name (line 1245):
    
    # Obtaining an instance of the builtin type 'list' (line 1245)
    list_501790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1245, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1245)
    
    # Assigning a type to the variable 'tuple_assignment_498432' (line 1245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1245, 8), 'tuple_assignment_498432', list_501790)
    
    # Assigning a List to a Name (line 1245):
    
    # Obtaining an instance of the builtin type 'list' (line 1245)
    list_501791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1245, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1245)
    
    # Assigning a type to the variable 'tuple_assignment_498433' (line 1245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1245, 8), 'tuple_assignment_498433', list_501791)
    
    # Assigning a Name to a Name (line 1245):
    # Getting the type of 'tuple_assignment_498432' (line 1245)
    tuple_assignment_498432_501792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 8), 'tuple_assignment_498432')
    # Assigning a type to the variable 'x' (line 1245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1245, 8), 'x', tuple_assignment_498432_501792)
    
    # Assigning a Name to a Name (line 1245):
    # Getting the type of 'tuple_assignment_498433' (line 1245)
    tuple_assignment_498433_501793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 8), 'tuple_assignment_498433')
    # Assigning a type to the variable 'w' (line 1245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1245, 11), 'w', tuple_assignment_498433_501793)
    # SSA join for if statement (line 1244)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1246):
    
    # Assigning a BinOp to a Name (line 1246):
    
    # Call to sqrt(...): (line 1246)
    # Processing the call arguments (line 1246)
    int_501795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1246, 14), 'int')
    # Getting the type of 'pi' (line 1246)
    pi_501796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 18), 'pi', False)
    # Applying the binary operator '*' (line 1246)
    result_mul_501797 = python_operator(stypy.reporting.localization.Localization(__file__, 1246, 14), '*', int_501795, pi_501796)
    
    # Processing the call keyword arguments (line 1246)
    kwargs_501798 = {}
    # Getting the type of 'sqrt' (line 1246)
    sqrt_501794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 9), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 1246)
    sqrt_call_result_501799 = invoke(stypy.reporting.localization.Localization(__file__, 1246, 9), sqrt_501794, *[result_mul_501797], **kwargs_501798)
    
    
    # Call to _gam(...): (line 1246)
    # Processing the call arguments (line 1246)
    # Getting the type of 'n' (line 1246)
    n_501801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 29), 'n', False)
    int_501802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1246, 33), 'int')
    # Applying the binary operator '+' (line 1246)
    result_add_501803 = python_operator(stypy.reporting.localization.Localization(__file__, 1246, 29), '+', n_501801, int_501802)
    
    # Processing the call keyword arguments (line 1246)
    kwargs_501804 = {}
    # Getting the type of '_gam' (line 1246)
    _gam_501800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 24), '_gam', False)
    # Calling _gam(args, kwargs) (line 1246)
    _gam_call_result_501805 = invoke(stypy.reporting.localization.Localization(__file__, 1246, 24), _gam_501800, *[result_add_501803], **kwargs_501804)
    
    # Applying the binary operator '*' (line 1246)
    result_mul_501806 = python_operator(stypy.reporting.localization.Localization(__file__, 1246, 9), '*', sqrt_call_result_501799, _gam_call_result_501805)
    
    # Assigning a type to the variable 'hn' (line 1246)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1246, 4), 'hn', result_mul_501806)
    
    # Assigning a Num to a Name (line 1247):
    
    # Assigning a Num to a Name (line 1247):
    float_501807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1247, 9), 'float')
    # Assigning a type to the variable 'kn' (line 1247)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1247, 4), 'kn', float_501807)
    
    # Assigning a Call to a Name (line 1248):
    
    # Assigning a Call to a Name (line 1248):
    
    # Call to orthopoly1d(...): (line 1248)
    # Processing the call arguments (line 1248)
    # Getting the type of 'x' (line 1248)
    x_501809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 20), 'x', False)
    # Getting the type of 'w' (line 1248)
    w_501810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 23), 'w', False)
    # Getting the type of 'hn' (line 1248)
    hn_501811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 26), 'hn', False)
    # Getting the type of 'kn' (line 1248)
    kn_501812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 30), 'kn', False)
    # Processing the call keyword arguments (line 1248)
    # Getting the type of 'wfunc' (line 1248)
    wfunc_501813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 40), 'wfunc', False)
    keyword_501814 = wfunc_501813
    
    # Obtaining an instance of the builtin type 'tuple' (line 1248)
    tuple_501815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1248, 55), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1248)
    # Adding element type (line 1248)
    
    # Getting the type of 'inf' (line 1248)
    inf_501816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 56), 'inf', False)
    # Applying the 'usub' unary operator (line 1248)
    result___neg___501817 = python_operator(stypy.reporting.localization.Localization(__file__, 1248, 55), 'usub', inf_501816)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1248, 55), tuple_501815, result___neg___501817)
    # Adding element type (line 1248)
    # Getting the type of 'inf' (line 1248)
    inf_501818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 61), 'inf', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1248, 55), tuple_501815, inf_501818)
    
    keyword_501819 = tuple_501815
    # Getting the type of 'monic' (line 1248)
    monic_501820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 73), 'monic', False)
    keyword_501821 = monic_501820

    @norecursion
    def _stypy_temp_lambda_274(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_274'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_274', 1249, 30, True)
        # Passed parameters checking function
        _stypy_temp_lambda_274.stypy_localization = localization
        _stypy_temp_lambda_274.stypy_type_of_self = None
        _stypy_temp_lambda_274.stypy_type_store = module_type_store
        _stypy_temp_lambda_274.stypy_function_name = '_stypy_temp_lambda_274'
        _stypy_temp_lambda_274.stypy_param_names_list = ['x']
        _stypy_temp_lambda_274.stypy_varargs_param_name = None
        _stypy_temp_lambda_274.stypy_kwargs_param_name = None
        _stypy_temp_lambda_274.stypy_call_defaults = defaults
        _stypy_temp_lambda_274.stypy_call_varargs = varargs
        _stypy_temp_lambda_274.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_274', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_274', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to eval_hermitenorm(...): (line 1249)
        # Processing the call arguments (line 1249)
        # Getting the type of 'n' (line 1249)
        n_501823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 57), 'n', False)
        # Getting the type of 'x' (line 1249)
        x_501824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 60), 'x', False)
        # Processing the call keyword arguments (line 1249)
        kwargs_501825 = {}
        # Getting the type of 'eval_hermitenorm' (line 1249)
        eval_hermitenorm_501822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 40), 'eval_hermitenorm', False)
        # Calling eval_hermitenorm(args, kwargs) (line 1249)
        eval_hermitenorm_call_result_501826 = invoke(stypy.reporting.localization.Localization(__file__, 1249, 40), eval_hermitenorm_501822, *[n_501823, x_501824], **kwargs_501825)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1249, 30), 'stypy_return_type', eval_hermitenorm_call_result_501826)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_274' in the type store
        # Getting the type of 'stypy_return_type' (line 1249)
        stypy_return_type_501827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 30), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_501827)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_274'
        return stypy_return_type_501827

    # Assigning a type to the variable '_stypy_temp_lambda_274' (line 1249)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1249, 30), '_stypy_temp_lambda_274', _stypy_temp_lambda_274)
    # Getting the type of '_stypy_temp_lambda_274' (line 1249)
    _stypy_temp_lambda_274_501828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 30), '_stypy_temp_lambda_274')
    keyword_501829 = _stypy_temp_lambda_274_501828
    kwargs_501830 = {'wfunc': keyword_501814, 'eval_func': keyword_501829, 'limits': keyword_501819, 'monic': keyword_501821}
    # Getting the type of 'orthopoly1d' (line 1248)
    orthopoly1d_501808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 8), 'orthopoly1d', False)
    # Calling orthopoly1d(args, kwargs) (line 1248)
    orthopoly1d_call_result_501831 = invoke(stypy.reporting.localization.Localization(__file__, 1248, 8), orthopoly1d_501808, *[x_501809, w_501810, hn_501811, kn_501812], **kwargs_501830)
    
    # Assigning a type to the variable 'p' (line 1248)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1248, 4), 'p', orthopoly1d_call_result_501831)
    # Getting the type of 'p' (line 1250)
    p_501832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 11), 'p')
    # Assigning a type to the variable 'stypy_return_type' (line 1250)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1250, 4), 'stypy_return_type', p_501832)
    
    # ################# End of 'hermitenorm(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'hermitenorm' in the type store
    # Getting the type of 'stypy_return_type' (line 1204)
    stypy_return_type_501833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_501833)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'hermitenorm'
    return stypy_return_type_501833

# Assigning a type to the variable 'hermitenorm' (line 1204)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1204, 0), 'hermitenorm', hermitenorm)

@norecursion
def roots_gegenbauer(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1257)
    False_501834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 34), 'False')
    defaults = [False_501834]
    # Create a new context for function 'roots_gegenbauer'
    module_type_store = module_type_store.open_function_context('roots_gegenbauer', 1257, 0, False)
    
    # Passed parameters checking function
    roots_gegenbauer.stypy_localization = localization
    roots_gegenbauer.stypy_type_of_self = None
    roots_gegenbauer.stypy_type_store = module_type_store
    roots_gegenbauer.stypy_function_name = 'roots_gegenbauer'
    roots_gegenbauer.stypy_param_names_list = ['n', 'alpha', 'mu']
    roots_gegenbauer.stypy_varargs_param_name = None
    roots_gegenbauer.stypy_kwargs_param_name = None
    roots_gegenbauer.stypy_call_defaults = defaults
    roots_gegenbauer.stypy_call_varargs = varargs
    roots_gegenbauer.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'roots_gegenbauer', ['n', 'alpha', 'mu'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'roots_gegenbauer', localization, ['n', 'alpha', 'mu'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'roots_gegenbauer(...)' code ##################

    str_501835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1289, (-1)), 'str', 'Gauss-Gegenbauer quadrature.\n\n    Computes the sample points and weights for Gauss-Gegenbauer quadrature.\n    The sample points are the roots of the n-th degree Gegenbauer polynomial,\n    :math:`C^{\\alpha}_n(x)`.  These sample points and weights correctly\n    integrate polynomials of degree :math:`2n - 1` or less over the interval\n    :math:`[-1, 1]` with weight function\n    :math:`f(x) = (1 - x^2)^{\\alpha - 1/2}`.\n\n    Parameters\n    ----------\n    n : int\n        quadrature order\n    alpha : float\n        alpha must be > -0.5\n    mu : bool, optional\n        If True, return the sum of the weights, optional.\n\n    Returns\n    -------\n    x : ndarray\n        Sample points\n    w : ndarray\n        Weights\n    mu : float\n        Sum of the weights\n\n    See Also\n    --------\n    scipy.integrate.quadrature\n    scipy.integrate.fixed_quad\n    ')
    
    # Assigning a Call to a Name (line 1290):
    
    # Assigning a Call to a Name (line 1290):
    
    # Call to int(...): (line 1290)
    # Processing the call arguments (line 1290)
    # Getting the type of 'n' (line 1290)
    n_501837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 12), 'n', False)
    # Processing the call keyword arguments (line 1290)
    kwargs_501838 = {}
    # Getting the type of 'int' (line 1290)
    int_501836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 8), 'int', False)
    # Calling int(args, kwargs) (line 1290)
    int_call_result_501839 = invoke(stypy.reporting.localization.Localization(__file__, 1290, 8), int_501836, *[n_501837], **kwargs_501838)
    
    # Assigning a type to the variable 'm' (line 1290)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1290, 4), 'm', int_call_result_501839)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'n' (line 1291)
    n_501840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 7), 'n')
    int_501841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1291, 11), 'int')
    # Applying the binary operator '<' (line 1291)
    result_lt_501842 = python_operator(stypy.reporting.localization.Localization(__file__, 1291, 7), '<', n_501840, int_501841)
    
    
    # Getting the type of 'n' (line 1291)
    n_501843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 16), 'n')
    # Getting the type of 'm' (line 1291)
    m_501844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 21), 'm')
    # Applying the binary operator '!=' (line 1291)
    result_ne_501845 = python_operator(stypy.reporting.localization.Localization(__file__, 1291, 16), '!=', n_501843, m_501844)
    
    # Applying the binary operator 'or' (line 1291)
    result_or_keyword_501846 = python_operator(stypy.reporting.localization.Localization(__file__, 1291, 7), 'or', result_lt_501842, result_ne_501845)
    
    # Testing the type of an if condition (line 1291)
    if_condition_501847 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1291, 4), result_or_keyword_501846)
    # Assigning a type to the variable 'if_condition_501847' (line 1291)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1291, 4), 'if_condition_501847', if_condition_501847)
    # SSA begins for if statement (line 1291)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1292)
    # Processing the call arguments (line 1292)
    str_501849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1292, 25), 'str', 'n must be a positive integer.')
    # Processing the call keyword arguments (line 1292)
    kwargs_501850 = {}
    # Getting the type of 'ValueError' (line 1292)
    ValueError_501848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1292)
    ValueError_call_result_501851 = invoke(stypy.reporting.localization.Localization(__file__, 1292, 14), ValueError_501848, *[str_501849], **kwargs_501850)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1292, 8), ValueError_call_result_501851, 'raise parameter', BaseException)
    # SSA join for if statement (line 1291)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'alpha' (line 1293)
    alpha_501852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 7), 'alpha')
    float_501853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1293, 15), 'float')
    # Applying the binary operator '<' (line 1293)
    result_lt_501854 = python_operator(stypy.reporting.localization.Localization(__file__, 1293, 7), '<', alpha_501852, float_501853)
    
    # Testing the type of an if condition (line 1293)
    if_condition_501855 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1293, 4), result_lt_501854)
    # Assigning a type to the variable 'if_condition_501855' (line 1293)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1293, 4), 'if_condition_501855', if_condition_501855)
    # SSA begins for if statement (line 1293)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1294)
    # Processing the call arguments (line 1294)
    str_501857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1294, 25), 'str', 'alpha must be greater than -0.5.')
    # Processing the call keyword arguments (line 1294)
    kwargs_501858 = {}
    # Getting the type of 'ValueError' (line 1294)
    ValueError_501856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1294)
    ValueError_call_result_501859 = invoke(stypy.reporting.localization.Localization(__file__, 1294, 14), ValueError_501856, *[str_501857], **kwargs_501858)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1294, 8), ValueError_call_result_501859, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 1293)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'alpha' (line 1295)
    alpha_501860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 9), 'alpha')
    float_501861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1295, 18), 'float')
    # Applying the binary operator '==' (line 1295)
    result_eq_501862 = python_operator(stypy.reporting.localization.Localization(__file__, 1295, 9), '==', alpha_501860, float_501861)
    
    # Testing the type of an if condition (line 1295)
    if_condition_501863 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1295, 9), result_eq_501862)
    # Assigning a type to the variable 'if_condition_501863' (line 1295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1295, 9), 'if_condition_501863', if_condition_501863)
    # SSA begins for if statement (line 1295)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to roots_chebyt(...): (line 1300)
    # Processing the call arguments (line 1300)
    # Getting the type of 'n' (line 1300)
    n_501865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 28), 'n', False)
    # Getting the type of 'mu' (line 1300)
    mu_501866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 31), 'mu', False)
    # Processing the call keyword arguments (line 1300)
    kwargs_501867 = {}
    # Getting the type of 'roots_chebyt' (line 1300)
    roots_chebyt_501864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 15), 'roots_chebyt', False)
    # Calling roots_chebyt(args, kwargs) (line 1300)
    roots_chebyt_call_result_501868 = invoke(stypy.reporting.localization.Localization(__file__, 1300, 15), roots_chebyt_501864, *[n_501865, mu_501866], **kwargs_501867)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1300)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1300, 8), 'stypy_return_type', roots_chebyt_call_result_501868)
    # SSA join for if statement (line 1295)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1293)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1302):
    
    # Assigning a BinOp to a Name (line 1302):
    
    # Call to sqrt(...): (line 1302)
    # Processing the call arguments (line 1302)
    # Getting the type of 'np' (line 1302)
    np_501871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 18), 'np', False)
    # Obtaining the member 'pi' of a type (line 1302)
    pi_501872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 18), np_501871, 'pi')
    # Processing the call keyword arguments (line 1302)
    kwargs_501873 = {}
    # Getting the type of 'np' (line 1302)
    np_501869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 10), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 1302)
    sqrt_501870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 10), np_501869, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1302)
    sqrt_call_result_501874 = invoke(stypy.reporting.localization.Localization(__file__, 1302, 10), sqrt_501870, *[pi_501872], **kwargs_501873)
    
    
    # Call to gamma(...): (line 1302)
    # Processing the call arguments (line 1302)
    # Getting the type of 'alpha' (line 1302)
    alpha_501877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 40), 'alpha', False)
    float_501878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1302, 48), 'float')
    # Applying the binary operator '+' (line 1302)
    result_add_501879 = python_operator(stypy.reporting.localization.Localization(__file__, 1302, 40), '+', alpha_501877, float_501878)
    
    # Processing the call keyword arguments (line 1302)
    kwargs_501880 = {}
    # Getting the type of 'cephes' (line 1302)
    cephes_501875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 27), 'cephes', False)
    # Obtaining the member 'gamma' of a type (line 1302)
    gamma_501876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 27), cephes_501875, 'gamma')
    # Calling gamma(args, kwargs) (line 1302)
    gamma_call_result_501881 = invoke(stypy.reporting.localization.Localization(__file__, 1302, 27), gamma_501876, *[result_add_501879], **kwargs_501880)
    
    # Applying the binary operator '*' (line 1302)
    result_mul_501882 = python_operator(stypy.reporting.localization.Localization(__file__, 1302, 10), '*', sqrt_call_result_501874, gamma_call_result_501881)
    
    
    # Call to gamma(...): (line 1302)
    # Processing the call arguments (line 1302)
    # Getting the type of 'alpha' (line 1302)
    alpha_501885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 68), 'alpha', False)
    int_501886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1302, 76), 'int')
    # Applying the binary operator '+' (line 1302)
    result_add_501887 = python_operator(stypy.reporting.localization.Localization(__file__, 1302, 68), '+', alpha_501885, int_501886)
    
    # Processing the call keyword arguments (line 1302)
    kwargs_501888 = {}
    # Getting the type of 'cephes' (line 1302)
    cephes_501883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 55), 'cephes', False)
    # Obtaining the member 'gamma' of a type (line 1302)
    gamma_501884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 55), cephes_501883, 'gamma')
    # Calling gamma(args, kwargs) (line 1302)
    gamma_call_result_501889 = invoke(stypy.reporting.localization.Localization(__file__, 1302, 55), gamma_501884, *[result_add_501887], **kwargs_501888)
    
    # Applying the binary operator 'div' (line 1302)
    result_div_501890 = python_operator(stypy.reporting.localization.Localization(__file__, 1302, 53), 'div', result_mul_501882, gamma_call_result_501889)
    
    # Assigning a type to the variable 'mu0' (line 1302)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1302, 4), 'mu0', result_div_501890)
    
    # Assigning a Lambda to a Name (line 1303):
    
    # Assigning a Lambda to a Name (line 1303):

    @norecursion
    def _stypy_temp_lambda_275(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_275'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_275', 1303, 14, True)
        # Passed parameters checking function
        _stypy_temp_lambda_275.stypy_localization = localization
        _stypy_temp_lambda_275.stypy_type_of_self = None
        _stypy_temp_lambda_275.stypy_type_store = module_type_store
        _stypy_temp_lambda_275.stypy_function_name = '_stypy_temp_lambda_275'
        _stypy_temp_lambda_275.stypy_param_names_list = ['k']
        _stypy_temp_lambda_275.stypy_varargs_param_name = None
        _stypy_temp_lambda_275.stypy_kwargs_param_name = None
        _stypy_temp_lambda_275.stypy_call_defaults = defaults
        _stypy_temp_lambda_275.stypy_call_varargs = varargs
        _stypy_temp_lambda_275.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_275', ['k'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_275', ['k'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        float_501891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1303, 24), 'float')
        # Getting the type of 'k' (line 1303)
        k_501892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 30), 'k')
        # Applying the binary operator '*' (line 1303)
        result_mul_501893 = python_operator(stypy.reporting.localization.Localization(__file__, 1303, 24), '*', float_501891, k_501892)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1303)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1303, 14), 'stypy_return_type', result_mul_501893)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_275' in the type store
        # Getting the type of 'stypy_return_type' (line 1303)
        stypy_return_type_501894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 14), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_501894)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_275'
        return stypy_return_type_501894

    # Assigning a type to the variable '_stypy_temp_lambda_275' (line 1303)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1303, 14), '_stypy_temp_lambda_275', _stypy_temp_lambda_275)
    # Getting the type of '_stypy_temp_lambda_275' (line 1303)
    _stypy_temp_lambda_275_501895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 14), '_stypy_temp_lambda_275')
    # Assigning a type to the variable 'an_func' (line 1303)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1303, 4), 'an_func', _stypy_temp_lambda_275_501895)
    
    # Assigning a Lambda to a Name (line 1304):
    
    # Assigning a Lambda to a Name (line 1304):

    @norecursion
    def _stypy_temp_lambda_276(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_276'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_276', 1304, 14, True)
        # Passed parameters checking function
        _stypy_temp_lambda_276.stypy_localization = localization
        _stypy_temp_lambda_276.stypy_type_of_self = None
        _stypy_temp_lambda_276.stypy_type_store = module_type_store
        _stypy_temp_lambda_276.stypy_function_name = '_stypy_temp_lambda_276'
        _stypy_temp_lambda_276.stypy_param_names_list = ['k']
        _stypy_temp_lambda_276.stypy_varargs_param_name = None
        _stypy_temp_lambda_276.stypy_kwargs_param_name = None
        _stypy_temp_lambda_276.stypy_call_defaults = defaults
        _stypy_temp_lambda_276.stypy_call_varargs = varargs
        _stypy_temp_lambda_276.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_276', ['k'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_276', ['k'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to sqrt(...): (line 1304)
        # Processing the call arguments (line 1304)
        # Getting the type of 'k' (line 1304)
        k_501898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 32), 'k', False)
        # Getting the type of 'k' (line 1304)
        k_501899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 37), 'k', False)
        int_501900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1304, 41), 'int')
        # Getting the type of 'alpha' (line 1304)
        alpha_501901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 45), 'alpha', False)
        # Applying the binary operator '*' (line 1304)
        result_mul_501902 = python_operator(stypy.reporting.localization.Localization(__file__, 1304, 41), '*', int_501900, alpha_501901)
        
        # Applying the binary operator '+' (line 1304)
        result_add_501903 = python_operator(stypy.reporting.localization.Localization(__file__, 1304, 37), '+', k_501899, result_mul_501902)
        
        int_501904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1304, 53), 'int')
        # Applying the binary operator '-' (line 1304)
        result_sub_501905 = python_operator(stypy.reporting.localization.Localization(__file__, 1304, 51), '-', result_add_501903, int_501904)
        
        # Applying the binary operator '*' (line 1304)
        result_mul_501906 = python_operator(stypy.reporting.localization.Localization(__file__, 1304, 32), '*', k_501898, result_sub_501905)
        
        int_501907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1305, 27), 'int')
        # Getting the type of 'k' (line 1305)
        k_501908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 32), 'k', False)
        # Getting the type of 'alpha' (line 1305)
        alpha_501909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 36), 'alpha', False)
        # Applying the binary operator '+' (line 1305)
        result_add_501910 = python_operator(stypy.reporting.localization.Localization(__file__, 1305, 32), '+', k_501908, alpha_501909)
        
        # Applying the binary operator '*' (line 1305)
        result_mul_501911 = python_operator(stypy.reporting.localization.Localization(__file__, 1305, 27), '*', int_501907, result_add_501910)
        
        # Getting the type of 'k' (line 1305)
        k_501912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 46), 'k', False)
        # Getting the type of 'alpha' (line 1305)
        alpha_501913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 50), 'alpha', False)
        # Applying the binary operator '+' (line 1305)
        result_add_501914 = python_operator(stypy.reporting.localization.Localization(__file__, 1305, 46), '+', k_501912, alpha_501913)
        
        int_501915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1305, 58), 'int')
        # Applying the binary operator '-' (line 1305)
        result_sub_501916 = python_operator(stypy.reporting.localization.Localization(__file__, 1305, 56), '-', result_add_501914, int_501915)
        
        # Applying the binary operator '*' (line 1305)
        result_mul_501917 = python_operator(stypy.reporting.localization.Localization(__file__, 1305, 43), '*', result_mul_501911, result_sub_501916)
        
        # Applying the binary operator 'div' (line 1305)
        result_div_501918 = python_operator(stypy.reporting.localization.Localization(__file__, 1305, 24), 'div', result_mul_501906, result_mul_501917)
        
        # Processing the call keyword arguments (line 1304)
        kwargs_501919 = {}
        # Getting the type of 'np' (line 1304)
        np_501896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 24), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 1304)
        sqrt_501897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1304, 24), np_501896, 'sqrt')
        # Calling sqrt(args, kwargs) (line 1304)
        sqrt_call_result_501920 = invoke(stypy.reporting.localization.Localization(__file__, 1304, 24), sqrt_501897, *[result_div_501918], **kwargs_501919)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 14), 'stypy_return_type', sqrt_call_result_501920)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_276' in the type store
        # Getting the type of 'stypy_return_type' (line 1304)
        stypy_return_type_501921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 14), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_501921)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_276'
        return stypy_return_type_501921

    # Assigning a type to the variable '_stypy_temp_lambda_276' (line 1304)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 14), '_stypy_temp_lambda_276', _stypy_temp_lambda_276)
    # Getting the type of '_stypy_temp_lambda_276' (line 1304)
    _stypy_temp_lambda_276_501922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 14), '_stypy_temp_lambda_276')
    # Assigning a type to the variable 'bn_func' (line 1304)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 4), 'bn_func', _stypy_temp_lambda_276_501922)
    
    # Assigning a Lambda to a Name (line 1306):
    
    # Assigning a Lambda to a Name (line 1306):

    @norecursion
    def _stypy_temp_lambda_277(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_277'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_277', 1306, 8, True)
        # Passed parameters checking function
        _stypy_temp_lambda_277.stypy_localization = localization
        _stypy_temp_lambda_277.stypy_type_of_self = None
        _stypy_temp_lambda_277.stypy_type_store = module_type_store
        _stypy_temp_lambda_277.stypy_function_name = '_stypy_temp_lambda_277'
        _stypy_temp_lambda_277.stypy_param_names_list = ['n', 'x']
        _stypy_temp_lambda_277.stypy_varargs_param_name = None
        _stypy_temp_lambda_277.stypy_kwargs_param_name = None
        _stypy_temp_lambda_277.stypy_call_defaults = defaults
        _stypy_temp_lambda_277.stypy_call_varargs = varargs
        _stypy_temp_lambda_277.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_277', ['n', 'x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_277', ['n', 'x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to eval_gegenbauer(...): (line 1306)
        # Processing the call arguments (line 1306)
        # Getting the type of 'n' (line 1306)
        n_501925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 44), 'n', False)
        # Getting the type of 'alpha' (line 1306)
        alpha_501926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 47), 'alpha', False)
        # Getting the type of 'x' (line 1306)
        x_501927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 54), 'x', False)
        # Processing the call keyword arguments (line 1306)
        kwargs_501928 = {}
        # Getting the type of 'cephes' (line 1306)
        cephes_501923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 21), 'cephes', False)
        # Obtaining the member 'eval_gegenbauer' of a type (line 1306)
        eval_gegenbauer_501924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1306, 21), cephes_501923, 'eval_gegenbauer')
        # Calling eval_gegenbauer(args, kwargs) (line 1306)
        eval_gegenbauer_call_result_501929 = invoke(stypy.reporting.localization.Localization(__file__, 1306, 21), eval_gegenbauer_501924, *[n_501925, alpha_501926, x_501927], **kwargs_501928)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1306)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1306, 8), 'stypy_return_type', eval_gegenbauer_call_result_501929)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_277' in the type store
        # Getting the type of 'stypy_return_type' (line 1306)
        stypy_return_type_501930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 8), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_501930)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_277'
        return stypy_return_type_501930

    # Assigning a type to the variable '_stypy_temp_lambda_277' (line 1306)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1306, 8), '_stypy_temp_lambda_277', _stypy_temp_lambda_277)
    # Getting the type of '_stypy_temp_lambda_277' (line 1306)
    _stypy_temp_lambda_277_501931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 8), '_stypy_temp_lambda_277')
    # Assigning a type to the variable 'f' (line 1306)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1306, 4), 'f', _stypy_temp_lambda_277_501931)
    
    # Assigning a Lambda to a Name (line 1307):
    
    # Assigning a Lambda to a Name (line 1307):

    @norecursion
    def _stypy_temp_lambda_278(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_278'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_278', 1307, 9, True)
        # Passed parameters checking function
        _stypy_temp_lambda_278.stypy_localization = localization
        _stypy_temp_lambda_278.stypy_type_of_self = None
        _stypy_temp_lambda_278.stypy_type_store = module_type_store
        _stypy_temp_lambda_278.stypy_function_name = '_stypy_temp_lambda_278'
        _stypy_temp_lambda_278.stypy_param_names_list = ['n', 'x']
        _stypy_temp_lambda_278.stypy_varargs_param_name = None
        _stypy_temp_lambda_278.stypy_kwargs_param_name = None
        _stypy_temp_lambda_278.stypy_call_defaults = defaults
        _stypy_temp_lambda_278.stypy_call_varargs = varargs
        _stypy_temp_lambda_278.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_278', ['n', 'x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_278', ['n', 'x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Getting the type of 'n' (line 1307)
        n_501932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 24), 'n')
        # Applying the 'usub' unary operator (line 1307)
        result___neg___501933 = python_operator(stypy.reporting.localization.Localization(__file__, 1307, 23), 'usub', n_501932)
        
        # Getting the type of 'x' (line 1307)
        x_501934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 26), 'x')
        # Applying the binary operator '*' (line 1307)
        result_mul_501935 = python_operator(stypy.reporting.localization.Localization(__file__, 1307, 23), '*', result___neg___501933, x_501934)
        
        
        # Call to eval_gegenbauer(...): (line 1307)
        # Processing the call arguments (line 1307)
        # Getting the type of 'n' (line 1307)
        n_501938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 51), 'n', False)
        # Getting the type of 'alpha' (line 1307)
        alpha_501939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 54), 'alpha', False)
        # Getting the type of 'x' (line 1307)
        x_501940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 61), 'x', False)
        # Processing the call keyword arguments (line 1307)
        kwargs_501941 = {}
        # Getting the type of 'cephes' (line 1307)
        cephes_501936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 28), 'cephes', False)
        # Obtaining the member 'eval_gegenbauer' of a type (line 1307)
        eval_gegenbauer_501937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1307, 28), cephes_501936, 'eval_gegenbauer')
        # Calling eval_gegenbauer(args, kwargs) (line 1307)
        eval_gegenbauer_call_result_501942 = invoke(stypy.reporting.localization.Localization(__file__, 1307, 28), eval_gegenbauer_501937, *[n_501938, alpha_501939, x_501940], **kwargs_501941)
        
        # Applying the binary operator '*' (line 1307)
        result_mul_501943 = python_operator(stypy.reporting.localization.Localization(__file__, 1307, 27), '*', result_mul_501935, eval_gegenbauer_call_result_501942)
        
        # Getting the type of 'n' (line 1308)
        n_501944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 12), 'n')
        int_501945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1308, 16), 'int')
        # Getting the type of 'alpha' (line 1308)
        alpha_501946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 18), 'alpha')
        # Applying the binary operator '*' (line 1308)
        result_mul_501947 = python_operator(stypy.reporting.localization.Localization(__file__, 1308, 16), '*', int_501945, alpha_501946)
        
        # Applying the binary operator '+' (line 1308)
        result_add_501948 = python_operator(stypy.reporting.localization.Localization(__file__, 1308, 12), '+', n_501944, result_mul_501947)
        
        int_501949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1308, 26), 'int')
        # Applying the binary operator '-' (line 1308)
        result_sub_501950 = python_operator(stypy.reporting.localization.Localization(__file__, 1308, 24), '-', result_add_501948, int_501949)
        
        
        # Call to eval_gegenbauer(...): (line 1308)
        # Processing the call arguments (line 1308)
        # Getting the type of 'n' (line 1308)
        n_501953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 52), 'n', False)
        int_501954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1308, 54), 'int')
        # Applying the binary operator '-' (line 1308)
        result_sub_501955 = python_operator(stypy.reporting.localization.Localization(__file__, 1308, 52), '-', n_501953, int_501954)
        
        # Getting the type of 'alpha' (line 1308)
        alpha_501956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 57), 'alpha', False)
        # Getting the type of 'x' (line 1308)
        x_501957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 64), 'x', False)
        # Processing the call keyword arguments (line 1308)
        kwargs_501958 = {}
        # Getting the type of 'cephes' (line 1308)
        cephes_501951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 29), 'cephes', False)
        # Obtaining the member 'eval_gegenbauer' of a type (line 1308)
        eval_gegenbauer_501952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1308, 29), cephes_501951, 'eval_gegenbauer')
        # Calling eval_gegenbauer(args, kwargs) (line 1308)
        eval_gegenbauer_call_result_501959 = invoke(stypy.reporting.localization.Localization(__file__, 1308, 29), eval_gegenbauer_501952, *[result_sub_501955, alpha_501956, x_501957], **kwargs_501958)
        
        # Applying the binary operator '*' (line 1308)
        result_mul_501960 = python_operator(stypy.reporting.localization.Localization(__file__, 1308, 11), '*', result_sub_501950, eval_gegenbauer_call_result_501959)
        
        # Applying the binary operator '+' (line 1307)
        result_add_501961 = python_operator(stypy.reporting.localization.Localization(__file__, 1307, 23), '+', result_mul_501943, result_mul_501960)
        
        int_501962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1308, 69), 'int')
        # Getting the type of 'x' (line 1308)
        x_501963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 71), 'x')
        int_501964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1308, 74), 'int')
        # Applying the binary operator '**' (line 1308)
        result_pow_501965 = python_operator(stypy.reporting.localization.Localization(__file__, 1308, 71), '**', x_501963, int_501964)
        
        # Applying the binary operator '-' (line 1308)
        result_sub_501966 = python_operator(stypy.reporting.localization.Localization(__file__, 1308, 69), '-', int_501962, result_pow_501965)
        
        # Applying the binary operator 'div' (line 1307)
        result_div_501967 = python_operator(stypy.reporting.localization.Localization(__file__, 1307, 22), 'div', result_add_501961, result_sub_501966)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 9), 'stypy_return_type', result_div_501967)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_278' in the type store
        # Getting the type of 'stypy_return_type' (line 1307)
        stypy_return_type_501968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 9), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_501968)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_278'
        return stypy_return_type_501968

    # Assigning a type to the variable '_stypy_temp_lambda_278' (line 1307)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 9), '_stypy_temp_lambda_278', _stypy_temp_lambda_278)
    # Getting the type of '_stypy_temp_lambda_278' (line 1307)
    _stypy_temp_lambda_278_501969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 9), '_stypy_temp_lambda_278')
    # Assigning a type to the variable 'df' (line 1307)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 4), 'df', _stypy_temp_lambda_278_501969)
    
    # Call to _gen_roots_and_weights(...): (line 1309)
    # Processing the call arguments (line 1309)
    # Getting the type of 'm' (line 1309)
    m_501971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 34), 'm', False)
    # Getting the type of 'mu0' (line 1309)
    mu0_501972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 37), 'mu0', False)
    # Getting the type of 'an_func' (line 1309)
    an_func_501973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 42), 'an_func', False)
    # Getting the type of 'bn_func' (line 1309)
    bn_func_501974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 51), 'bn_func', False)
    # Getting the type of 'f' (line 1309)
    f_501975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 60), 'f', False)
    # Getting the type of 'df' (line 1309)
    df_501976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 63), 'df', False)
    # Getting the type of 'True' (line 1309)
    True_501977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 67), 'True', False)
    # Getting the type of 'mu' (line 1309)
    mu_501978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 73), 'mu', False)
    # Processing the call keyword arguments (line 1309)
    kwargs_501979 = {}
    # Getting the type of '_gen_roots_and_weights' (line 1309)
    _gen_roots_and_weights_501970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 11), '_gen_roots_and_weights', False)
    # Calling _gen_roots_and_weights(args, kwargs) (line 1309)
    _gen_roots_and_weights_call_result_501980 = invoke(stypy.reporting.localization.Localization(__file__, 1309, 11), _gen_roots_and_weights_501970, *[m_501971, mu0_501972, an_func_501973, bn_func_501974, f_501975, df_501976, True_501977, mu_501978], **kwargs_501979)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1309)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1309, 4), 'stypy_return_type', _gen_roots_and_weights_call_result_501980)
    
    # ################# End of 'roots_gegenbauer(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'roots_gegenbauer' in the type store
    # Getting the type of 'stypy_return_type' (line 1257)
    stypy_return_type_501981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_501981)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'roots_gegenbauer'
    return stypy_return_type_501981

# Assigning a type to the variable 'roots_gegenbauer' (line 1257)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1257, 0), 'roots_gegenbauer', roots_gegenbauer)

@norecursion
def gegenbauer(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1312)
    False_501982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 31), 'False')
    defaults = [False_501982]
    # Create a new context for function 'gegenbauer'
    module_type_store = module_type_store.open_function_context('gegenbauer', 1312, 0, False)
    
    # Passed parameters checking function
    gegenbauer.stypy_localization = localization
    gegenbauer.stypy_type_of_self = None
    gegenbauer.stypy_type_store = module_type_store
    gegenbauer.stypy_function_name = 'gegenbauer'
    gegenbauer.stypy_param_names_list = ['n', 'alpha', 'monic']
    gegenbauer.stypy_varargs_param_name = None
    gegenbauer.stypy_kwargs_param_name = None
    gegenbauer.stypy_call_defaults = defaults
    gegenbauer.stypy_call_varargs = varargs
    gegenbauer.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'gegenbauer', ['n', 'alpha', 'monic'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'gegenbauer', localization, ['n', 'alpha', 'monic'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'gegenbauer(...)' code ##################

    str_501983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1344, (-1)), 'str', 'Gegenbauer (ultraspherical) polynomial.\n\n    Defined to be the solution of\n\n    .. math::\n        (1 - x^2)\\frac{d^2}{dx^2}C_n^{(\\alpha)}\n          - (2\\alpha + 1)x\\frac{d}{dx}C_n^{(\\alpha)}\n          + n(n + 2\\alpha)C_n^{(\\alpha)} = 0\n\n    for :math:`\\alpha > -1/2`; :math:`C_n^{(\\alpha)}` is a polynomial\n    of degree :math:`n`.\n\n    Parameters\n    ----------\n    n : int\n        Degree of the polynomial.\n    monic : bool, optional\n        If `True`, scale the leading coefficient to be 1. Default is\n        `False`.\n\n    Returns\n    -------\n    C : orthopoly1d\n        Gegenbauer polynomial.\n\n    Notes\n    -----\n    The polynomials :math:`C_n^{(\\alpha)}` are orthogonal over\n    :math:`[-1,1]` with weight function :math:`(1 - x^2)^{(\\alpha -\n    1/2)}`.\n\n    ')
    
    # Assigning a Call to a Name (line 1345):
    
    # Assigning a Call to a Name (line 1345):
    
    # Call to jacobi(...): (line 1345)
    # Processing the call arguments (line 1345)
    # Getting the type of 'n' (line 1345)
    n_501985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 18), 'n', False)
    # Getting the type of 'alpha' (line 1345)
    alpha_501986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 21), 'alpha', False)
    float_501987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1345, 29), 'float')
    # Applying the binary operator '-' (line 1345)
    result_sub_501988 = python_operator(stypy.reporting.localization.Localization(__file__, 1345, 21), '-', alpha_501986, float_501987)
    
    # Getting the type of 'alpha' (line 1345)
    alpha_501989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 34), 'alpha', False)
    float_501990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1345, 42), 'float')
    # Applying the binary operator '-' (line 1345)
    result_sub_501991 = python_operator(stypy.reporting.localization.Localization(__file__, 1345, 34), '-', alpha_501989, float_501990)
    
    # Processing the call keyword arguments (line 1345)
    # Getting the type of 'monic' (line 1345)
    monic_501992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 53), 'monic', False)
    keyword_501993 = monic_501992
    kwargs_501994 = {'monic': keyword_501993}
    # Getting the type of 'jacobi' (line 1345)
    jacobi_501984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 11), 'jacobi', False)
    # Calling jacobi(args, kwargs) (line 1345)
    jacobi_call_result_501995 = invoke(stypy.reporting.localization.Localization(__file__, 1345, 11), jacobi_501984, *[n_501985, result_sub_501988, result_sub_501991], **kwargs_501994)
    
    # Assigning a type to the variable 'base' (line 1345)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1345, 4), 'base', jacobi_call_result_501995)
    
    # Getting the type of 'monic' (line 1346)
    monic_501996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 7), 'monic')
    # Testing the type of an if condition (line 1346)
    if_condition_501997 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1346, 4), monic_501996)
    # Assigning a type to the variable 'if_condition_501997' (line 1346)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1346, 4), 'if_condition_501997', if_condition_501997)
    # SSA begins for if statement (line 1346)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'base' (line 1347)
    base_501998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 15), 'base')
    # Assigning a type to the variable 'stypy_return_type' (line 1347)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1347, 8), 'stypy_return_type', base_501998)
    # SSA join for if statement (line 1346)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1349):
    
    # Assigning a BinOp to a Name (line 1349):
    
    # Call to _gam(...): (line 1349)
    # Processing the call arguments (line 1349)
    int_502000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1349, 19), 'int')
    # Getting the type of 'alpha' (line 1349)
    alpha_502001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 21), 'alpha', False)
    # Applying the binary operator '*' (line 1349)
    result_mul_502002 = python_operator(stypy.reporting.localization.Localization(__file__, 1349, 19), '*', int_502000, alpha_502001)
    
    # Getting the type of 'n' (line 1349)
    n_502003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 29), 'n', False)
    # Applying the binary operator '+' (line 1349)
    result_add_502004 = python_operator(stypy.reporting.localization.Localization(__file__, 1349, 19), '+', result_mul_502002, n_502003)
    
    # Processing the call keyword arguments (line 1349)
    kwargs_502005 = {}
    # Getting the type of '_gam' (line 1349)
    _gam_501999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 14), '_gam', False)
    # Calling _gam(args, kwargs) (line 1349)
    _gam_call_result_502006 = invoke(stypy.reporting.localization.Localization(__file__, 1349, 14), _gam_501999, *[result_add_502004], **kwargs_502005)
    
    
    # Call to _gam(...): (line 1349)
    # Processing the call arguments (line 1349)
    # Getting the type of 'alpha' (line 1349)
    alpha_502008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 39), 'alpha', False)
    float_502009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1349, 47), 'float')
    # Applying the binary operator '+' (line 1349)
    result_add_502010 = python_operator(stypy.reporting.localization.Localization(__file__, 1349, 39), '+', alpha_502008, float_502009)
    
    # Processing the call keyword arguments (line 1349)
    kwargs_502011 = {}
    # Getting the type of '_gam' (line 1349)
    _gam_502007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 34), '_gam', False)
    # Calling _gam(args, kwargs) (line 1349)
    _gam_call_result_502012 = invoke(stypy.reporting.localization.Localization(__file__, 1349, 34), _gam_502007, *[result_add_502010], **kwargs_502011)
    
    # Applying the binary operator '*' (line 1349)
    result_mul_502013 = python_operator(stypy.reporting.localization.Localization(__file__, 1349, 14), '*', _gam_call_result_502006, _gam_call_result_502012)
    
    
    # Call to _gam(...): (line 1350)
    # Processing the call arguments (line 1350)
    int_502015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1350, 19), 'int')
    # Getting the type of 'alpha' (line 1350)
    alpha_502016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 21), 'alpha', False)
    # Applying the binary operator '*' (line 1350)
    result_mul_502017 = python_operator(stypy.reporting.localization.Localization(__file__, 1350, 19), '*', int_502015, alpha_502016)
    
    # Processing the call keyword arguments (line 1350)
    kwargs_502018 = {}
    # Getting the type of '_gam' (line 1350)
    _gam_502014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 14), '_gam', False)
    # Calling _gam(args, kwargs) (line 1350)
    _gam_call_result_502019 = invoke(stypy.reporting.localization.Localization(__file__, 1350, 14), _gam_502014, *[result_mul_502017], **kwargs_502018)
    
    # Applying the binary operator 'div' (line 1349)
    result_div_502020 = python_operator(stypy.reporting.localization.Localization(__file__, 1349, 52), 'div', result_mul_502013, _gam_call_result_502019)
    
    
    # Call to _gam(...): (line 1350)
    # Processing the call arguments (line 1350)
    # Getting the type of 'alpha' (line 1350)
    alpha_502022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 35), 'alpha', False)
    float_502023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1350, 43), 'float')
    # Applying the binary operator '+' (line 1350)
    result_add_502024 = python_operator(stypy.reporting.localization.Localization(__file__, 1350, 35), '+', alpha_502022, float_502023)
    
    # Getting the type of 'n' (line 1350)
    n_502025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 49), 'n', False)
    # Applying the binary operator '+' (line 1350)
    result_add_502026 = python_operator(stypy.reporting.localization.Localization(__file__, 1350, 47), '+', result_add_502024, n_502025)
    
    # Processing the call keyword arguments (line 1350)
    kwargs_502027 = {}
    # Getting the type of '_gam' (line 1350)
    _gam_502021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 30), '_gam', False)
    # Calling _gam(args, kwargs) (line 1350)
    _gam_call_result_502028 = invoke(stypy.reporting.localization.Localization(__file__, 1350, 30), _gam_502021, *[result_add_502026], **kwargs_502027)
    
    # Applying the binary operator 'div' (line 1350)
    result_div_502029 = python_operator(stypy.reporting.localization.Localization(__file__, 1350, 28), 'div', result_div_502020, _gam_call_result_502028)
    
    # Assigning a type to the variable 'factor' (line 1349)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1349, 4), 'factor', result_div_502029)
    
    # Call to _scale(...): (line 1351)
    # Processing the call arguments (line 1351)
    # Getting the type of 'factor' (line 1351)
    factor_502032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 16), 'factor', False)
    # Processing the call keyword arguments (line 1351)
    kwargs_502033 = {}
    # Getting the type of 'base' (line 1351)
    base_502030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 4), 'base', False)
    # Obtaining the member '_scale' of a type (line 1351)
    _scale_502031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1351, 4), base_502030, '_scale')
    # Calling _scale(args, kwargs) (line 1351)
    _scale_call_result_502034 = invoke(stypy.reporting.localization.Localization(__file__, 1351, 4), _scale_502031, *[factor_502032], **kwargs_502033)
    
    
    # Assigning a Lambda to a Subscript (line 1352):
    
    # Assigning a Lambda to a Subscript (line 1352):

    @norecursion
    def _stypy_temp_lambda_279(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_279'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_279', 1352, 34, True)
        # Passed parameters checking function
        _stypy_temp_lambda_279.stypy_localization = localization
        _stypy_temp_lambda_279.stypy_type_of_self = None
        _stypy_temp_lambda_279.stypy_type_store = module_type_store
        _stypy_temp_lambda_279.stypy_function_name = '_stypy_temp_lambda_279'
        _stypy_temp_lambda_279.stypy_param_names_list = ['x']
        _stypy_temp_lambda_279.stypy_varargs_param_name = None
        _stypy_temp_lambda_279.stypy_kwargs_param_name = None
        _stypy_temp_lambda_279.stypy_call_defaults = defaults
        _stypy_temp_lambda_279.stypy_call_varargs = varargs
        _stypy_temp_lambda_279.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_279', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_279', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to eval_gegenbauer(...): (line 1352)
        # Processing the call arguments (line 1352)
        
        # Call to float(...): (line 1352)
        # Processing the call arguments (line 1352)
        # Getting the type of 'n' (line 1352)
        n_502037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 66), 'n', False)
        # Processing the call keyword arguments (line 1352)
        kwargs_502038 = {}
        # Getting the type of 'float' (line 1352)
        float_502036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 60), 'float', False)
        # Calling float(args, kwargs) (line 1352)
        float_call_result_502039 = invoke(stypy.reporting.localization.Localization(__file__, 1352, 60), float_502036, *[n_502037], **kwargs_502038)
        
        # Getting the type of 'alpha' (line 1352)
        alpha_502040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 70), 'alpha', False)
        # Getting the type of 'x' (line 1352)
        x_502041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 77), 'x', False)
        # Processing the call keyword arguments (line 1352)
        kwargs_502042 = {}
        # Getting the type of 'eval_gegenbauer' (line 1352)
        eval_gegenbauer_502035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 44), 'eval_gegenbauer', False)
        # Calling eval_gegenbauer(args, kwargs) (line 1352)
        eval_gegenbauer_call_result_502043 = invoke(stypy.reporting.localization.Localization(__file__, 1352, 44), eval_gegenbauer_502035, *[float_call_result_502039, alpha_502040, x_502041], **kwargs_502042)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1352, 34), 'stypy_return_type', eval_gegenbauer_call_result_502043)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_279' in the type store
        # Getting the type of 'stypy_return_type' (line 1352)
        stypy_return_type_502044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 34), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_502044)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_279'
        return stypy_return_type_502044

    # Assigning a type to the variable '_stypy_temp_lambda_279' (line 1352)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1352, 34), '_stypy_temp_lambda_279', _stypy_temp_lambda_279)
    # Getting the type of '_stypy_temp_lambda_279' (line 1352)
    _stypy_temp_lambda_279_502045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 34), '_stypy_temp_lambda_279')
    # Getting the type of 'base' (line 1352)
    base_502046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 4), 'base')
    # Obtaining the member '__dict__' of a type (line 1352)
    dict___502047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1352, 4), base_502046, '__dict__')
    str_502048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1352, 18), 'str', '_eval_func')
    # Storing an element on a container (line 1352)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1352, 4), dict___502047, (str_502048, _stypy_temp_lambda_279_502045))
    # Getting the type of 'base' (line 1353)
    base_502049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 11), 'base')
    # Assigning a type to the variable 'stypy_return_type' (line 1353)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1353, 4), 'stypy_return_type', base_502049)
    
    # ################# End of 'gegenbauer(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'gegenbauer' in the type store
    # Getting the type of 'stypy_return_type' (line 1312)
    stypy_return_type_502050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_502050)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'gegenbauer'
    return stypy_return_type_502050

# Assigning a type to the variable 'gegenbauer' (line 1312)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 0), 'gegenbauer', gegenbauer)

@norecursion
def roots_chebyt(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1360)
    False_502051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 23), 'False')
    defaults = [False_502051]
    # Create a new context for function 'roots_chebyt'
    module_type_store = module_type_store.open_function_context('roots_chebyt', 1360, 0, False)
    
    # Passed parameters checking function
    roots_chebyt.stypy_localization = localization
    roots_chebyt.stypy_type_of_self = None
    roots_chebyt.stypy_type_store = module_type_store
    roots_chebyt.stypy_function_name = 'roots_chebyt'
    roots_chebyt.stypy_param_names_list = ['n', 'mu']
    roots_chebyt.stypy_varargs_param_name = None
    roots_chebyt.stypy_kwargs_param_name = None
    roots_chebyt.stypy_call_defaults = defaults
    roots_chebyt.stypy_call_varargs = varargs
    roots_chebyt.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'roots_chebyt', ['n', 'mu'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'roots_chebyt', localization, ['n', 'mu'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'roots_chebyt(...)' code ##################

    str_502052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1390, (-1)), 'str', 'Gauss-Chebyshev (first kind) quadrature.\n\n    Computes the sample points and weights for Gauss-Chebyshev quadrature.\n    The sample points are the roots of the n-th degree Chebyshev polynomial of\n    the first kind, :math:`T_n(x)`.  These sample points and weights correctly\n    integrate polynomials of degree :math:`2n - 1` or less over the interval\n    :math:`[-1, 1]` with weight function :math:`f(x) = 1/\\sqrt{1 - x^2}`.\n\n    Parameters\n    ----------\n    n : int\n        quadrature order\n    mu : bool, optional\n        If True, return the sum of the weights, optional.\n\n    Returns\n    -------\n    x : ndarray\n        Sample points\n    w : ndarray\n        Weights\n    mu : float\n        Sum of the weights\n\n    See Also\n    --------\n    scipy.integrate.quadrature\n    scipy.integrate.fixed_quad\n    numpy.polynomial.chebyshev.chebgauss\n    ')
    
    # Assigning a Call to a Name (line 1391):
    
    # Assigning a Call to a Name (line 1391):
    
    # Call to int(...): (line 1391)
    # Processing the call arguments (line 1391)
    # Getting the type of 'n' (line 1391)
    n_502054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 12), 'n', False)
    # Processing the call keyword arguments (line 1391)
    kwargs_502055 = {}
    # Getting the type of 'int' (line 1391)
    int_502053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 8), 'int', False)
    # Calling int(args, kwargs) (line 1391)
    int_call_result_502056 = invoke(stypy.reporting.localization.Localization(__file__, 1391, 8), int_502053, *[n_502054], **kwargs_502055)
    
    # Assigning a type to the variable 'm' (line 1391)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1391, 4), 'm', int_call_result_502056)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'n' (line 1392)
    n_502057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 7), 'n')
    int_502058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1392, 11), 'int')
    # Applying the binary operator '<' (line 1392)
    result_lt_502059 = python_operator(stypy.reporting.localization.Localization(__file__, 1392, 7), '<', n_502057, int_502058)
    
    
    # Getting the type of 'n' (line 1392)
    n_502060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 16), 'n')
    # Getting the type of 'm' (line 1392)
    m_502061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 21), 'm')
    # Applying the binary operator '!=' (line 1392)
    result_ne_502062 = python_operator(stypy.reporting.localization.Localization(__file__, 1392, 16), '!=', n_502060, m_502061)
    
    # Applying the binary operator 'or' (line 1392)
    result_or_keyword_502063 = python_operator(stypy.reporting.localization.Localization(__file__, 1392, 7), 'or', result_lt_502059, result_ne_502062)
    
    # Testing the type of an if condition (line 1392)
    if_condition_502064 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1392, 4), result_or_keyword_502063)
    # Assigning a type to the variable 'if_condition_502064' (line 1392)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1392, 4), 'if_condition_502064', if_condition_502064)
    # SSA begins for if statement (line 1392)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1393)
    # Processing the call arguments (line 1393)
    str_502066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1393, 25), 'str', 'n must be a positive integer.')
    # Processing the call keyword arguments (line 1393)
    kwargs_502067 = {}
    # Getting the type of 'ValueError' (line 1393)
    ValueError_502065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1393)
    ValueError_call_result_502068 = invoke(stypy.reporting.localization.Localization(__file__, 1393, 14), ValueError_502065, *[str_502066], **kwargs_502067)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1393, 8), ValueError_call_result_502068, 'raise parameter', BaseException)
    # SSA join for if statement (line 1392)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1394):
    
    # Assigning a Call to a Name (line 1394):
    
    # Call to cos(...): (line 1394)
    # Processing the call arguments (line 1394)
    
    # Call to arange(...): (line 1394)
    # Processing the call arguments (line 1394)
    int_502073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1394, 25), 'int')
    # Getting the type of 'm' (line 1394)
    m_502074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 29), 'm', False)
    # Applying the binary operator '*' (line 1394)
    result_mul_502075 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 25), '*', int_502073, m_502074)
    
    int_502076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1394, 33), 'int')
    # Applying the binary operator '-' (line 1394)
    result_sub_502077 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 25), '-', result_mul_502075, int_502076)
    
    int_502078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1394, 36), 'int')
    int_502079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1394, 39), 'int')
    # Processing the call keyword arguments (line 1394)
    kwargs_502080 = {}
    # Getting the type of 'np' (line 1394)
    np_502071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 15), 'np', False)
    # Obtaining the member 'arange' of a type (line 1394)
    arange_502072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1394, 15), np_502071, 'arange')
    # Calling arange(args, kwargs) (line 1394)
    arange_call_result_502081 = invoke(stypy.reporting.localization.Localization(__file__, 1394, 15), arange_502072, *[result_sub_502077, int_502078, int_502079], **kwargs_502080)
    
    # Getting the type of 'pi' (line 1394)
    pi_502082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 45), 'pi', False)
    # Applying the binary operator '*' (line 1394)
    result_mul_502083 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 15), '*', arange_call_result_502081, pi_502082)
    
    int_502084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1394, 51), 'int')
    # Getting the type of 'm' (line 1394)
    m_502085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 55), 'm', False)
    # Applying the binary operator '*' (line 1394)
    result_mul_502086 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 51), '*', int_502084, m_502085)
    
    # Applying the binary operator 'div' (line 1394)
    result_div_502087 = python_operator(stypy.reporting.localization.Localization(__file__, 1394, 48), 'div', result_mul_502083, result_mul_502086)
    
    # Processing the call keyword arguments (line 1394)
    kwargs_502088 = {}
    # Getting the type of 'np' (line 1394)
    np_502069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 8), 'np', False)
    # Obtaining the member 'cos' of a type (line 1394)
    cos_502070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1394, 8), np_502069, 'cos')
    # Calling cos(args, kwargs) (line 1394)
    cos_call_result_502089 = invoke(stypy.reporting.localization.Localization(__file__, 1394, 8), cos_502070, *[result_div_502087], **kwargs_502088)
    
    # Assigning a type to the variable 'x' (line 1394)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1394, 4), 'x', cos_call_result_502089)
    
    # Assigning a Call to a Name (line 1395):
    
    # Assigning a Call to a Name (line 1395):
    
    # Call to empty_like(...): (line 1395)
    # Processing the call arguments (line 1395)
    # Getting the type of 'x' (line 1395)
    x_502092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 22), 'x', False)
    # Processing the call keyword arguments (line 1395)
    kwargs_502093 = {}
    # Getting the type of 'np' (line 1395)
    np_502090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 8), 'np', False)
    # Obtaining the member 'empty_like' of a type (line 1395)
    empty_like_502091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1395, 8), np_502090, 'empty_like')
    # Calling empty_like(args, kwargs) (line 1395)
    empty_like_call_result_502094 = invoke(stypy.reporting.localization.Localization(__file__, 1395, 8), empty_like_502091, *[x_502092], **kwargs_502093)
    
    # Assigning a type to the variable 'w' (line 1395)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1395, 4), 'w', empty_like_call_result_502094)
    
    # Call to fill(...): (line 1396)
    # Processing the call arguments (line 1396)
    # Getting the type of 'pi' (line 1396)
    pi_502097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 11), 'pi', False)
    # Getting the type of 'm' (line 1396)
    m_502098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 14), 'm', False)
    # Applying the binary operator 'div' (line 1396)
    result_div_502099 = python_operator(stypy.reporting.localization.Localization(__file__, 1396, 11), 'div', pi_502097, m_502098)
    
    # Processing the call keyword arguments (line 1396)
    kwargs_502100 = {}
    # Getting the type of 'w' (line 1396)
    w_502095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 4), 'w', False)
    # Obtaining the member 'fill' of a type (line 1396)
    fill_502096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1396, 4), w_502095, 'fill')
    # Calling fill(args, kwargs) (line 1396)
    fill_call_result_502101 = invoke(stypy.reporting.localization.Localization(__file__, 1396, 4), fill_502096, *[result_div_502099], **kwargs_502100)
    
    
    # Getting the type of 'mu' (line 1397)
    mu_502102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 7), 'mu')
    # Testing the type of an if condition (line 1397)
    if_condition_502103 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1397, 4), mu_502102)
    # Assigning a type to the variable 'if_condition_502103' (line 1397)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1397, 4), 'if_condition_502103', if_condition_502103)
    # SSA begins for if statement (line 1397)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1398)
    tuple_502104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1398, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1398)
    # Adding element type (line 1398)
    # Getting the type of 'x' (line 1398)
    x_502105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 15), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1398, 15), tuple_502104, x_502105)
    # Adding element type (line 1398)
    # Getting the type of 'w' (line 1398)
    w_502106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 18), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1398, 15), tuple_502104, w_502106)
    # Adding element type (line 1398)
    # Getting the type of 'pi' (line 1398)
    pi_502107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 21), 'pi')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1398, 15), tuple_502104, pi_502107)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1398)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1398, 8), 'stypy_return_type', tuple_502104)
    # SSA branch for the else part of an if statement (line 1397)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1400)
    tuple_502108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1400)
    # Adding element type (line 1400)
    # Getting the type of 'x' (line 1400)
    x_502109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 15), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1400, 15), tuple_502108, x_502109)
    # Adding element type (line 1400)
    # Getting the type of 'w' (line 1400)
    w_502110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 18), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1400, 15), tuple_502108, w_502110)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 8), 'stypy_return_type', tuple_502108)
    # SSA join for if statement (line 1397)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'roots_chebyt(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'roots_chebyt' in the type store
    # Getting the type of 'stypy_return_type' (line 1360)
    stypy_return_type_502111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_502111)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'roots_chebyt'
    return stypy_return_type_502111

# Assigning a type to the variable 'roots_chebyt' (line 1360)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1360, 0), 'roots_chebyt', roots_chebyt)

@norecursion
def chebyt(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1403)
    False_502112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 20), 'False')
    defaults = [False_502112]
    # Create a new context for function 'chebyt'
    module_type_store = module_type_store.open_function_context('chebyt', 1403, 0, False)
    
    # Passed parameters checking function
    chebyt.stypy_localization = localization
    chebyt.stypy_type_of_self = None
    chebyt.stypy_type_store = module_type_store
    chebyt.stypy_function_name = 'chebyt'
    chebyt.stypy_param_names_list = ['n', 'monic']
    chebyt.stypy_varargs_param_name = None
    chebyt.stypy_kwargs_param_name = None
    chebyt.stypy_call_defaults = defaults
    chebyt.stypy_call_varargs = varargs
    chebyt.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'chebyt', ['n', 'monic'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'chebyt', localization, ['n', 'monic'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'chebyt(...)' code ##################

    str_502113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1435, (-1)), 'str', 'Chebyshev polynomial of the first kind.\n\n    Defined to be the solution of\n\n    .. math::\n        (1 - x^2)\\frac{d^2}{dx^2}T_n - x\\frac{d}{dx}T_n + n^2T_n = 0;\n\n    :math:`T_n` is a polynomial of degree :math:`n`.\n\n    Parameters\n    ----------\n    n : int\n        Degree of the polynomial.\n    monic : bool, optional\n        If `True`, scale the leading coefficient to be 1. Default is\n        `False`.\n\n    Returns\n    -------\n    T : orthopoly1d\n        Chebyshev polynomial of the first kind.\n\n    Notes\n    -----\n    The polynomials :math:`T_n` are orthogonal over :math:`[-1, 1]`\n    with weight function :math:`(1 - x^2)^{-1/2}`.\n\n    See Also\n    --------\n    chebyu : Chebyshev polynomial of the second kind.\n\n    ')
    
    
    # Getting the type of 'n' (line 1436)
    n_502114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 7), 'n')
    int_502115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1436, 11), 'int')
    # Applying the binary operator '<' (line 1436)
    result_lt_502116 = python_operator(stypy.reporting.localization.Localization(__file__, 1436, 7), '<', n_502114, int_502115)
    
    # Testing the type of an if condition (line 1436)
    if_condition_502117 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1436, 4), result_lt_502116)
    # Assigning a type to the variable 'if_condition_502117' (line 1436)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1436, 4), 'if_condition_502117', if_condition_502117)
    # SSA begins for if statement (line 1436)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1437)
    # Processing the call arguments (line 1437)
    str_502119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1437, 25), 'str', 'n must be nonnegative.')
    # Processing the call keyword arguments (line 1437)
    kwargs_502120 = {}
    # Getting the type of 'ValueError' (line 1437)
    ValueError_502118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1437)
    ValueError_call_result_502121 = invoke(stypy.reporting.localization.Localization(__file__, 1437, 14), ValueError_502118, *[str_502119], **kwargs_502120)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1437, 8), ValueError_call_result_502121, 'raise parameter', BaseException)
    # SSA join for if statement (line 1436)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Lambda to a Name (line 1439):
    
    # Assigning a Lambda to a Name (line 1439):

    @norecursion
    def _stypy_temp_lambda_280(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_280'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_280', 1439, 12, True)
        # Passed parameters checking function
        _stypy_temp_lambda_280.stypy_localization = localization
        _stypy_temp_lambda_280.stypy_type_of_self = None
        _stypy_temp_lambda_280.stypy_type_store = module_type_store
        _stypy_temp_lambda_280.stypy_function_name = '_stypy_temp_lambda_280'
        _stypy_temp_lambda_280.stypy_param_names_list = ['x']
        _stypy_temp_lambda_280.stypy_varargs_param_name = None
        _stypy_temp_lambda_280.stypy_kwargs_param_name = None
        _stypy_temp_lambda_280.stypy_call_defaults = defaults
        _stypy_temp_lambda_280.stypy_call_varargs = varargs
        _stypy_temp_lambda_280.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_280', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_280', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        float_502122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1439, 22), 'float')
        
        # Call to sqrt(...): (line 1439)
        # Processing the call arguments (line 1439)
        int_502124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1439, 33), 'int')
        # Getting the type of 'x' (line 1439)
        x_502125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 37), 'x', False)
        # Getting the type of 'x' (line 1439)
        x_502126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 41), 'x', False)
        # Applying the binary operator '*' (line 1439)
        result_mul_502127 = python_operator(stypy.reporting.localization.Localization(__file__, 1439, 37), '*', x_502125, x_502126)
        
        # Applying the binary operator '-' (line 1439)
        result_sub_502128 = python_operator(stypy.reporting.localization.Localization(__file__, 1439, 33), '-', int_502124, result_mul_502127)
        
        # Processing the call keyword arguments (line 1439)
        kwargs_502129 = {}
        # Getting the type of 'sqrt' (line 1439)
        sqrt_502123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 28), 'sqrt', False)
        # Calling sqrt(args, kwargs) (line 1439)
        sqrt_call_result_502130 = invoke(stypy.reporting.localization.Localization(__file__, 1439, 28), sqrt_502123, *[result_sub_502128], **kwargs_502129)
        
        # Applying the binary operator 'div' (line 1439)
        result_div_502131 = python_operator(stypy.reporting.localization.Localization(__file__, 1439, 22), 'div', float_502122, sqrt_call_result_502130)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1439, 12), 'stypy_return_type', result_div_502131)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_280' in the type store
        # Getting the type of 'stypy_return_type' (line 1439)
        stypy_return_type_502132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 12), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_502132)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_280'
        return stypy_return_type_502132

    # Assigning a type to the variable '_stypy_temp_lambda_280' (line 1439)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1439, 12), '_stypy_temp_lambda_280', _stypy_temp_lambda_280)
    # Getting the type of '_stypy_temp_lambda_280' (line 1439)
    _stypy_temp_lambda_280_502133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 12), '_stypy_temp_lambda_280')
    # Assigning a type to the variable 'wfunc' (line 1439)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1439, 4), 'wfunc', _stypy_temp_lambda_280_502133)
    
    
    # Getting the type of 'n' (line 1440)
    n_502134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 7), 'n')
    int_502135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1440, 12), 'int')
    # Applying the binary operator '==' (line 1440)
    result_eq_502136 = python_operator(stypy.reporting.localization.Localization(__file__, 1440, 7), '==', n_502134, int_502135)
    
    # Testing the type of an if condition (line 1440)
    if_condition_502137 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1440, 4), result_eq_502136)
    # Assigning a type to the variable 'if_condition_502137' (line 1440)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1440, 4), 'if_condition_502137', if_condition_502137)
    # SSA begins for if statement (line 1440)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to orthopoly1d(...): (line 1441)
    # Processing the call arguments (line 1441)
    
    # Obtaining an instance of the builtin type 'list' (line 1441)
    list_502139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 27), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1441)
    
    
    # Obtaining an instance of the builtin type 'list' (line 1441)
    list_502140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 31), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1441)
    
    # Getting the type of 'pi' (line 1441)
    pi_502141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 35), 'pi', False)
    float_502142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 39), 'float')
    # Getting the type of 'wfunc' (line 1441)
    wfunc_502143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 44), 'wfunc', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1441)
    tuple_502144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 52), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1441)
    # Adding element type (line 1441)
    int_502145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 52), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1441, 52), tuple_502144, int_502145)
    # Adding element type (line 1441)
    int_502146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 56), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1441, 52), tuple_502144, int_502146)
    
    # Getting the type of 'monic' (line 1441)
    monic_502147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 60), 'monic', False)

    @norecursion
    def _stypy_temp_lambda_281(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_281'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_281', 1442, 27, True)
        # Passed parameters checking function
        _stypy_temp_lambda_281.stypy_localization = localization
        _stypy_temp_lambda_281.stypy_type_of_self = None
        _stypy_temp_lambda_281.stypy_type_store = module_type_store
        _stypy_temp_lambda_281.stypy_function_name = '_stypy_temp_lambda_281'
        _stypy_temp_lambda_281.stypy_param_names_list = ['x']
        _stypy_temp_lambda_281.stypy_varargs_param_name = None
        _stypy_temp_lambda_281.stypy_kwargs_param_name = None
        _stypy_temp_lambda_281.stypy_call_defaults = defaults
        _stypy_temp_lambda_281.stypy_call_varargs = varargs
        _stypy_temp_lambda_281.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_281', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_281', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to eval_chebyt(...): (line 1442)
        # Processing the call arguments (line 1442)
        # Getting the type of 'n' (line 1442)
        n_502149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 49), 'n', False)
        # Getting the type of 'x' (line 1442)
        x_502150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 52), 'x', False)
        # Processing the call keyword arguments (line 1442)
        kwargs_502151 = {}
        # Getting the type of 'eval_chebyt' (line 1442)
        eval_chebyt_502148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 37), 'eval_chebyt', False)
        # Calling eval_chebyt(args, kwargs) (line 1442)
        eval_chebyt_call_result_502152 = invoke(stypy.reporting.localization.Localization(__file__, 1442, 37), eval_chebyt_502148, *[n_502149, x_502150], **kwargs_502151)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1442, 27), 'stypy_return_type', eval_chebyt_call_result_502152)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_281' in the type store
        # Getting the type of 'stypy_return_type' (line 1442)
        stypy_return_type_502153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 27), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_502153)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_281'
        return stypy_return_type_502153

    # Assigning a type to the variable '_stypy_temp_lambda_281' (line 1442)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1442, 27), '_stypy_temp_lambda_281', _stypy_temp_lambda_281)
    # Getting the type of '_stypy_temp_lambda_281' (line 1442)
    _stypy_temp_lambda_281_502154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 27), '_stypy_temp_lambda_281')
    # Processing the call keyword arguments (line 1441)
    kwargs_502155 = {}
    # Getting the type of 'orthopoly1d' (line 1441)
    orthopoly1d_502138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 15), 'orthopoly1d', False)
    # Calling orthopoly1d(args, kwargs) (line 1441)
    orthopoly1d_call_result_502156 = invoke(stypy.reporting.localization.Localization(__file__, 1441, 15), orthopoly1d_502138, *[list_502139, list_502140, pi_502141, float_502142, wfunc_502143, tuple_502144, monic_502147, _stypy_temp_lambda_281_502154], **kwargs_502155)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1441)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1441, 8), 'stypy_return_type', orthopoly1d_call_result_502156)
    # SSA join for if statement (line 1440)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 1443):
    
    # Assigning a Name to a Name (line 1443):
    # Getting the type of 'n' (line 1443)
    n_502157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1443, 9), 'n')
    # Assigning a type to the variable 'n1' (line 1443)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1443, 4), 'n1', n_502157)
    
    # Assigning a Call to a Tuple (line 1444):
    
    # Assigning a Subscript to a Name (line 1444):
    
    # Obtaining the type of the subscript
    int_502158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1444, 4), 'int')
    
    # Call to roots_chebyt(...): (line 1444)
    # Processing the call arguments (line 1444)
    # Getting the type of 'n1' (line 1444)
    n1_502160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 28), 'n1', False)
    # Processing the call keyword arguments (line 1444)
    # Getting the type of 'True' (line 1444)
    True_502161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 35), 'True', False)
    keyword_502162 = True_502161
    kwargs_502163 = {'mu': keyword_502162}
    # Getting the type of 'roots_chebyt' (line 1444)
    roots_chebyt_502159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 15), 'roots_chebyt', False)
    # Calling roots_chebyt(args, kwargs) (line 1444)
    roots_chebyt_call_result_502164 = invoke(stypy.reporting.localization.Localization(__file__, 1444, 15), roots_chebyt_502159, *[n1_502160], **kwargs_502163)
    
    # Obtaining the member '__getitem__' of a type (line 1444)
    getitem___502165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 4), roots_chebyt_call_result_502164, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1444)
    subscript_call_result_502166 = invoke(stypy.reporting.localization.Localization(__file__, 1444, 4), getitem___502165, int_502158)
    
    # Assigning a type to the variable 'tuple_var_assignment_498434' (line 1444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1444, 4), 'tuple_var_assignment_498434', subscript_call_result_502166)
    
    # Assigning a Subscript to a Name (line 1444):
    
    # Obtaining the type of the subscript
    int_502167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1444, 4), 'int')
    
    # Call to roots_chebyt(...): (line 1444)
    # Processing the call arguments (line 1444)
    # Getting the type of 'n1' (line 1444)
    n1_502169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 28), 'n1', False)
    # Processing the call keyword arguments (line 1444)
    # Getting the type of 'True' (line 1444)
    True_502170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 35), 'True', False)
    keyword_502171 = True_502170
    kwargs_502172 = {'mu': keyword_502171}
    # Getting the type of 'roots_chebyt' (line 1444)
    roots_chebyt_502168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 15), 'roots_chebyt', False)
    # Calling roots_chebyt(args, kwargs) (line 1444)
    roots_chebyt_call_result_502173 = invoke(stypy.reporting.localization.Localization(__file__, 1444, 15), roots_chebyt_502168, *[n1_502169], **kwargs_502172)
    
    # Obtaining the member '__getitem__' of a type (line 1444)
    getitem___502174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 4), roots_chebyt_call_result_502173, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1444)
    subscript_call_result_502175 = invoke(stypy.reporting.localization.Localization(__file__, 1444, 4), getitem___502174, int_502167)
    
    # Assigning a type to the variable 'tuple_var_assignment_498435' (line 1444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1444, 4), 'tuple_var_assignment_498435', subscript_call_result_502175)
    
    # Assigning a Subscript to a Name (line 1444):
    
    # Obtaining the type of the subscript
    int_502176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1444, 4), 'int')
    
    # Call to roots_chebyt(...): (line 1444)
    # Processing the call arguments (line 1444)
    # Getting the type of 'n1' (line 1444)
    n1_502178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 28), 'n1', False)
    # Processing the call keyword arguments (line 1444)
    # Getting the type of 'True' (line 1444)
    True_502179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 35), 'True', False)
    keyword_502180 = True_502179
    kwargs_502181 = {'mu': keyword_502180}
    # Getting the type of 'roots_chebyt' (line 1444)
    roots_chebyt_502177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 15), 'roots_chebyt', False)
    # Calling roots_chebyt(args, kwargs) (line 1444)
    roots_chebyt_call_result_502182 = invoke(stypy.reporting.localization.Localization(__file__, 1444, 15), roots_chebyt_502177, *[n1_502178], **kwargs_502181)
    
    # Obtaining the member '__getitem__' of a type (line 1444)
    getitem___502183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 4), roots_chebyt_call_result_502182, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1444)
    subscript_call_result_502184 = invoke(stypy.reporting.localization.Localization(__file__, 1444, 4), getitem___502183, int_502176)
    
    # Assigning a type to the variable 'tuple_var_assignment_498436' (line 1444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1444, 4), 'tuple_var_assignment_498436', subscript_call_result_502184)
    
    # Assigning a Name to a Name (line 1444):
    # Getting the type of 'tuple_var_assignment_498434' (line 1444)
    tuple_var_assignment_498434_502185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 4), 'tuple_var_assignment_498434')
    # Assigning a type to the variable 'x' (line 1444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1444, 4), 'x', tuple_var_assignment_498434_502185)
    
    # Assigning a Name to a Name (line 1444):
    # Getting the type of 'tuple_var_assignment_498435' (line 1444)
    tuple_var_assignment_498435_502186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 4), 'tuple_var_assignment_498435')
    # Assigning a type to the variable 'w' (line 1444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1444, 7), 'w', tuple_var_assignment_498435_502186)
    
    # Assigning a Name to a Name (line 1444):
    # Getting the type of 'tuple_var_assignment_498436' (line 1444)
    tuple_var_assignment_498436_502187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 4), 'tuple_var_assignment_498436')
    # Assigning a type to the variable 'mu' (line 1444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1444, 10), 'mu', tuple_var_assignment_498436_502187)
    
    # Assigning a BinOp to a Name (line 1445):
    
    # Assigning a BinOp to a Name (line 1445):
    # Getting the type of 'pi' (line 1445)
    pi_502188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 9), 'pi')
    int_502189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1445, 14), 'int')
    # Applying the binary operator 'div' (line 1445)
    result_div_502190 = python_operator(stypy.reporting.localization.Localization(__file__, 1445, 9), 'div', pi_502188, int_502189)
    
    # Assigning a type to the variable 'hn' (line 1445)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1445, 4), 'hn', result_div_502190)
    
    # Assigning a BinOp to a Name (line 1446):
    
    # Assigning a BinOp to a Name (line 1446):
    int_502191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1446, 9), 'int')
    # Getting the type of 'n' (line 1446)
    n_502192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 13), 'n')
    int_502193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1446, 17), 'int')
    # Applying the binary operator '-' (line 1446)
    result_sub_502194 = python_operator(stypy.reporting.localization.Localization(__file__, 1446, 13), '-', n_502192, int_502193)
    
    # Applying the binary operator '**' (line 1446)
    result_pow_502195 = python_operator(stypy.reporting.localization.Localization(__file__, 1446, 9), '**', int_502191, result_sub_502194)
    
    # Assigning a type to the variable 'kn' (line 1446)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1446, 4), 'kn', result_pow_502195)
    
    # Assigning a Call to a Name (line 1447):
    
    # Assigning a Call to a Name (line 1447):
    
    # Call to orthopoly1d(...): (line 1447)
    # Processing the call arguments (line 1447)
    # Getting the type of 'x' (line 1447)
    x_502197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 20), 'x', False)
    # Getting the type of 'w' (line 1447)
    w_502198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 23), 'w', False)
    # Getting the type of 'hn' (line 1447)
    hn_502199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 26), 'hn', False)
    # Getting the type of 'kn' (line 1447)
    kn_502200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 30), 'kn', False)
    # Getting the type of 'wfunc' (line 1447)
    wfunc_502201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 34), 'wfunc', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1447)
    tuple_502202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1447, 42), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1447)
    # Adding element type (line 1447)
    int_502203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1447, 42), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1447, 42), tuple_502202, int_502203)
    # Adding element type (line 1447)
    int_502204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1447, 46), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1447, 42), tuple_502202, int_502204)
    
    # Getting the type of 'monic' (line 1447)
    monic_502205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 50), 'monic', False)

    @norecursion
    def _stypy_temp_lambda_282(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_282'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_282', 1448, 20, True)
        # Passed parameters checking function
        _stypy_temp_lambda_282.stypy_localization = localization
        _stypy_temp_lambda_282.stypy_type_of_self = None
        _stypy_temp_lambda_282.stypy_type_store = module_type_store
        _stypy_temp_lambda_282.stypy_function_name = '_stypy_temp_lambda_282'
        _stypy_temp_lambda_282.stypy_param_names_list = ['x']
        _stypy_temp_lambda_282.stypy_varargs_param_name = None
        _stypy_temp_lambda_282.stypy_kwargs_param_name = None
        _stypy_temp_lambda_282.stypy_call_defaults = defaults
        _stypy_temp_lambda_282.stypy_call_varargs = varargs
        _stypy_temp_lambda_282.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_282', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_282', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to eval_chebyt(...): (line 1448)
        # Processing the call arguments (line 1448)
        # Getting the type of 'n' (line 1448)
        n_502207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 42), 'n', False)
        # Getting the type of 'x' (line 1448)
        x_502208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 45), 'x', False)
        # Processing the call keyword arguments (line 1448)
        kwargs_502209 = {}
        # Getting the type of 'eval_chebyt' (line 1448)
        eval_chebyt_502206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 30), 'eval_chebyt', False)
        # Calling eval_chebyt(args, kwargs) (line 1448)
        eval_chebyt_call_result_502210 = invoke(stypy.reporting.localization.Localization(__file__, 1448, 30), eval_chebyt_502206, *[n_502207, x_502208], **kwargs_502209)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1448, 20), 'stypy_return_type', eval_chebyt_call_result_502210)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_282' in the type store
        # Getting the type of 'stypy_return_type' (line 1448)
        stypy_return_type_502211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 20), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_502211)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_282'
        return stypy_return_type_502211

    # Assigning a type to the variable '_stypy_temp_lambda_282' (line 1448)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1448, 20), '_stypy_temp_lambda_282', _stypy_temp_lambda_282)
    # Getting the type of '_stypy_temp_lambda_282' (line 1448)
    _stypy_temp_lambda_282_502212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 20), '_stypy_temp_lambda_282')
    # Processing the call keyword arguments (line 1447)
    kwargs_502213 = {}
    # Getting the type of 'orthopoly1d' (line 1447)
    orthopoly1d_502196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 8), 'orthopoly1d', False)
    # Calling orthopoly1d(args, kwargs) (line 1447)
    orthopoly1d_call_result_502214 = invoke(stypy.reporting.localization.Localization(__file__, 1447, 8), orthopoly1d_502196, *[x_502197, w_502198, hn_502199, kn_502200, wfunc_502201, tuple_502202, monic_502205, _stypy_temp_lambda_282_502212], **kwargs_502213)
    
    # Assigning a type to the variable 'p' (line 1447)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1447, 4), 'p', orthopoly1d_call_result_502214)
    # Getting the type of 'p' (line 1449)
    p_502215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 11), 'p')
    # Assigning a type to the variable 'stypy_return_type' (line 1449)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1449, 4), 'stypy_return_type', p_502215)
    
    # ################# End of 'chebyt(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'chebyt' in the type store
    # Getting the type of 'stypy_return_type' (line 1403)
    stypy_return_type_502216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_502216)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'chebyt'
    return stypy_return_type_502216

# Assigning a type to the variable 'chebyt' (line 1403)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1403, 0), 'chebyt', chebyt)

@norecursion
def roots_chebyu(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1455)
    False_502217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 23), 'False')
    defaults = [False_502217]
    # Create a new context for function 'roots_chebyu'
    module_type_store = module_type_store.open_function_context('roots_chebyu', 1455, 0, False)
    
    # Passed parameters checking function
    roots_chebyu.stypy_localization = localization
    roots_chebyu.stypy_type_of_self = None
    roots_chebyu.stypy_type_store = module_type_store
    roots_chebyu.stypy_function_name = 'roots_chebyu'
    roots_chebyu.stypy_param_names_list = ['n', 'mu']
    roots_chebyu.stypy_varargs_param_name = None
    roots_chebyu.stypy_kwargs_param_name = None
    roots_chebyu.stypy_call_defaults = defaults
    roots_chebyu.stypy_call_varargs = varargs
    roots_chebyu.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'roots_chebyu', ['n', 'mu'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'roots_chebyu', localization, ['n', 'mu'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'roots_chebyu(...)' code ##################

    str_502218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1484, (-1)), 'str', 'Gauss-Chebyshev (second kind) quadrature.\n\n    Computes the sample points and weights for Gauss-Chebyshev quadrature.\n    The sample points are the roots of the n-th degree Chebyshev polynomial of\n    the second kind, :math:`U_n(x)`.  These sample points and weights correctly\n    integrate polynomials of degree :math:`2n - 1` or less over the interval\n    :math:`[-1, 1]` with weight function :math:`f(x) = \\sqrt{1 - x^2}`.\n\n    Parameters\n    ----------\n    n : int\n        quadrature order\n    mu : bool, optional\n        If True, return the sum of the weights, optional.\n\n    Returns\n    -------\n    x : ndarray\n        Sample points\n    w : ndarray\n        Weights\n    mu : float\n        Sum of the weights\n\n    See Also\n    --------\n    scipy.integrate.quadrature\n    scipy.integrate.fixed_quad\n    ')
    
    # Assigning a Call to a Name (line 1485):
    
    # Assigning a Call to a Name (line 1485):
    
    # Call to int(...): (line 1485)
    # Processing the call arguments (line 1485)
    # Getting the type of 'n' (line 1485)
    n_502220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 12), 'n', False)
    # Processing the call keyword arguments (line 1485)
    kwargs_502221 = {}
    # Getting the type of 'int' (line 1485)
    int_502219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 8), 'int', False)
    # Calling int(args, kwargs) (line 1485)
    int_call_result_502222 = invoke(stypy.reporting.localization.Localization(__file__, 1485, 8), int_502219, *[n_502220], **kwargs_502221)
    
    # Assigning a type to the variable 'm' (line 1485)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1485, 4), 'm', int_call_result_502222)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'n' (line 1486)
    n_502223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 7), 'n')
    int_502224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1486, 11), 'int')
    # Applying the binary operator '<' (line 1486)
    result_lt_502225 = python_operator(stypy.reporting.localization.Localization(__file__, 1486, 7), '<', n_502223, int_502224)
    
    
    # Getting the type of 'n' (line 1486)
    n_502226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 16), 'n')
    # Getting the type of 'm' (line 1486)
    m_502227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 21), 'm')
    # Applying the binary operator '!=' (line 1486)
    result_ne_502228 = python_operator(stypy.reporting.localization.Localization(__file__, 1486, 16), '!=', n_502226, m_502227)
    
    # Applying the binary operator 'or' (line 1486)
    result_or_keyword_502229 = python_operator(stypy.reporting.localization.Localization(__file__, 1486, 7), 'or', result_lt_502225, result_ne_502228)
    
    # Testing the type of an if condition (line 1486)
    if_condition_502230 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1486, 4), result_or_keyword_502229)
    # Assigning a type to the variable 'if_condition_502230' (line 1486)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1486, 4), 'if_condition_502230', if_condition_502230)
    # SSA begins for if statement (line 1486)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1487)
    # Processing the call arguments (line 1487)
    str_502232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1487, 25), 'str', 'n must be a positive integer.')
    # Processing the call keyword arguments (line 1487)
    kwargs_502233 = {}
    # Getting the type of 'ValueError' (line 1487)
    ValueError_502231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1487)
    ValueError_call_result_502234 = invoke(stypy.reporting.localization.Localization(__file__, 1487, 14), ValueError_502231, *[str_502232], **kwargs_502233)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1487, 8), ValueError_call_result_502234, 'raise parameter', BaseException)
    # SSA join for if statement (line 1486)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1488):
    
    # Assigning a BinOp to a Name (line 1488):
    
    # Call to arange(...): (line 1488)
    # Processing the call arguments (line 1488)
    # Getting the type of 'm' (line 1488)
    m_502237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 18), 'm', False)
    int_502238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1488, 21), 'int')
    int_502239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1488, 24), 'int')
    # Processing the call keyword arguments (line 1488)
    kwargs_502240 = {}
    # Getting the type of 'np' (line 1488)
    np_502235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 8), 'np', False)
    # Obtaining the member 'arange' of a type (line 1488)
    arange_502236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1488, 8), np_502235, 'arange')
    # Calling arange(args, kwargs) (line 1488)
    arange_call_result_502241 = invoke(stypy.reporting.localization.Localization(__file__, 1488, 8), arange_502236, *[m_502237, int_502238, int_502239], **kwargs_502240)
    
    # Getting the type of 'pi' (line 1488)
    pi_502242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 30), 'pi')
    # Applying the binary operator '*' (line 1488)
    result_mul_502243 = python_operator(stypy.reporting.localization.Localization(__file__, 1488, 8), '*', arange_call_result_502241, pi_502242)
    
    # Getting the type of 'm' (line 1488)
    m_502244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 36), 'm')
    int_502245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1488, 40), 'int')
    # Applying the binary operator '+' (line 1488)
    result_add_502246 = python_operator(stypy.reporting.localization.Localization(__file__, 1488, 36), '+', m_502244, int_502245)
    
    # Applying the binary operator 'div' (line 1488)
    result_div_502247 = python_operator(stypy.reporting.localization.Localization(__file__, 1488, 33), 'div', result_mul_502243, result_add_502246)
    
    # Assigning a type to the variable 't' (line 1488)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1488, 4), 't', result_div_502247)
    
    # Assigning a Call to a Name (line 1489):
    
    # Assigning a Call to a Name (line 1489):
    
    # Call to cos(...): (line 1489)
    # Processing the call arguments (line 1489)
    # Getting the type of 't' (line 1489)
    t_502250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 15), 't', False)
    # Processing the call keyword arguments (line 1489)
    kwargs_502251 = {}
    # Getting the type of 'np' (line 1489)
    np_502248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 8), 'np', False)
    # Obtaining the member 'cos' of a type (line 1489)
    cos_502249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1489, 8), np_502248, 'cos')
    # Calling cos(args, kwargs) (line 1489)
    cos_call_result_502252 = invoke(stypy.reporting.localization.Localization(__file__, 1489, 8), cos_502249, *[t_502250], **kwargs_502251)
    
    # Assigning a type to the variable 'x' (line 1489)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1489, 4), 'x', cos_call_result_502252)
    
    # Assigning a BinOp to a Name (line 1490):
    
    # Assigning a BinOp to a Name (line 1490):
    # Getting the type of 'pi' (line 1490)
    pi_502253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 8), 'pi')
    
    # Call to sin(...): (line 1490)
    # Processing the call arguments (line 1490)
    # Getting the type of 't' (line 1490)
    t_502256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 20), 't', False)
    # Processing the call keyword arguments (line 1490)
    kwargs_502257 = {}
    # Getting the type of 'np' (line 1490)
    np_502254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 13), 'np', False)
    # Obtaining the member 'sin' of a type (line 1490)
    sin_502255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1490, 13), np_502254, 'sin')
    # Calling sin(args, kwargs) (line 1490)
    sin_call_result_502258 = invoke(stypy.reporting.localization.Localization(__file__, 1490, 13), sin_502255, *[t_502256], **kwargs_502257)
    
    int_502259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1490, 24), 'int')
    # Applying the binary operator '**' (line 1490)
    result_pow_502260 = python_operator(stypy.reporting.localization.Localization(__file__, 1490, 13), '**', sin_call_result_502258, int_502259)
    
    # Applying the binary operator '*' (line 1490)
    result_mul_502261 = python_operator(stypy.reporting.localization.Localization(__file__, 1490, 8), '*', pi_502253, result_pow_502260)
    
    # Getting the type of 'm' (line 1490)
    m_502262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 29), 'm')
    int_502263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1490, 33), 'int')
    # Applying the binary operator '+' (line 1490)
    result_add_502264 = python_operator(stypy.reporting.localization.Localization(__file__, 1490, 29), '+', m_502262, int_502263)
    
    # Applying the binary operator 'div' (line 1490)
    result_div_502265 = python_operator(stypy.reporting.localization.Localization(__file__, 1490, 26), 'div', result_mul_502261, result_add_502264)
    
    # Assigning a type to the variable 'w' (line 1490)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1490, 4), 'w', result_div_502265)
    
    # Getting the type of 'mu' (line 1491)
    mu_502266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 7), 'mu')
    # Testing the type of an if condition (line 1491)
    if_condition_502267 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1491, 4), mu_502266)
    # Assigning a type to the variable 'if_condition_502267' (line 1491)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1491, 4), 'if_condition_502267', if_condition_502267)
    # SSA begins for if statement (line 1491)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1492)
    tuple_502268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1492, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1492)
    # Adding element type (line 1492)
    # Getting the type of 'x' (line 1492)
    x_502269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 15), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1492, 15), tuple_502268, x_502269)
    # Adding element type (line 1492)
    # Getting the type of 'w' (line 1492)
    w_502270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 18), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1492, 15), tuple_502268, w_502270)
    # Adding element type (line 1492)
    # Getting the type of 'pi' (line 1492)
    pi_502271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 21), 'pi')
    int_502272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1492, 26), 'int')
    # Applying the binary operator 'div' (line 1492)
    result_div_502273 = python_operator(stypy.reporting.localization.Localization(__file__, 1492, 21), 'div', pi_502271, int_502272)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1492, 15), tuple_502268, result_div_502273)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 8), 'stypy_return_type', tuple_502268)
    # SSA branch for the else part of an if statement (line 1491)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1494)
    tuple_502274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1494, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1494)
    # Adding element type (line 1494)
    # Getting the type of 'x' (line 1494)
    x_502275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 15), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1494, 15), tuple_502274, x_502275)
    # Adding element type (line 1494)
    # Getting the type of 'w' (line 1494)
    w_502276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 18), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1494, 15), tuple_502274, w_502276)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1494)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1494, 8), 'stypy_return_type', tuple_502274)
    # SSA join for if statement (line 1491)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'roots_chebyu(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'roots_chebyu' in the type store
    # Getting the type of 'stypy_return_type' (line 1455)
    stypy_return_type_502277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_502277)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'roots_chebyu'
    return stypy_return_type_502277

# Assigning a type to the variable 'roots_chebyu' (line 1455)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1455, 0), 'roots_chebyu', roots_chebyu)

@norecursion
def chebyu(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1497)
    False_502278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 20), 'False')
    defaults = [False_502278]
    # Create a new context for function 'chebyu'
    module_type_store = module_type_store.open_function_context('chebyu', 1497, 0, False)
    
    # Passed parameters checking function
    chebyu.stypy_localization = localization
    chebyu.stypy_type_of_self = None
    chebyu.stypy_type_store = module_type_store
    chebyu.stypy_function_name = 'chebyu'
    chebyu.stypy_param_names_list = ['n', 'monic']
    chebyu.stypy_varargs_param_name = None
    chebyu.stypy_kwargs_param_name = None
    chebyu.stypy_call_defaults = defaults
    chebyu.stypy_call_varargs = varargs
    chebyu.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'chebyu', ['n', 'monic'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'chebyu', localization, ['n', 'monic'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'chebyu(...)' code ##################

    str_502279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1530, (-1)), 'str', 'Chebyshev polynomial of the second kind.\n\n    Defined to be the solution of\n\n    .. math::\n        (1 - x^2)\\frac{d^2}{dx^2}U_n - 3x\\frac{d}{dx}U_n\n          + n(n + 2)U_n = 0;\n\n    :math:`U_n` is a polynomial of degree :math:`n`.\n\n    Parameters\n    ----------\n    n : int\n        Degree of the polynomial.\n    monic : bool, optional\n        If `True`, scale the leading coefficient to be 1. Default is\n        `False`.\n\n    Returns\n    -------\n    U : orthopoly1d\n        Chebyshev polynomial of the second kind.\n\n    Notes\n    -----\n    The polynomials :math:`U_n` are orthogonal over :math:`[-1, 1]`\n    with weight function :math:`(1 - x^2)^{1/2}`.\n\n    See Also\n    --------\n    chebyt : Chebyshev polynomial of the first kind.\n\n    ')
    
    # Assigning a Call to a Name (line 1531):
    
    # Assigning a Call to a Name (line 1531):
    
    # Call to jacobi(...): (line 1531)
    # Processing the call arguments (line 1531)
    # Getting the type of 'n' (line 1531)
    n_502281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 18), 'n', False)
    float_502282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1531, 21), 'float')
    float_502283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1531, 26), 'float')
    # Processing the call keyword arguments (line 1531)
    # Getting the type of 'monic' (line 1531)
    monic_502284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 37), 'monic', False)
    keyword_502285 = monic_502284
    kwargs_502286 = {'monic': keyword_502285}
    # Getting the type of 'jacobi' (line 1531)
    jacobi_502280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 11), 'jacobi', False)
    # Calling jacobi(args, kwargs) (line 1531)
    jacobi_call_result_502287 = invoke(stypy.reporting.localization.Localization(__file__, 1531, 11), jacobi_502280, *[n_502281, float_502282, float_502283], **kwargs_502286)
    
    # Assigning a type to the variable 'base' (line 1531)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1531, 4), 'base', jacobi_call_result_502287)
    
    # Getting the type of 'monic' (line 1532)
    monic_502288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 7), 'monic')
    # Testing the type of an if condition (line 1532)
    if_condition_502289 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1532, 4), monic_502288)
    # Assigning a type to the variable 'if_condition_502289' (line 1532)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 4), 'if_condition_502289', if_condition_502289)
    # SSA begins for if statement (line 1532)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'base' (line 1533)
    base_502290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 15), 'base')
    # Assigning a type to the variable 'stypy_return_type' (line 1533)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1533, 8), 'stypy_return_type', base_502290)
    # SSA join for if statement (line 1532)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1534):
    
    # Assigning a BinOp to a Name (line 1534):
    
    # Call to sqrt(...): (line 1534)
    # Processing the call arguments (line 1534)
    # Getting the type of 'pi' (line 1534)
    pi_502292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 18), 'pi', False)
    # Processing the call keyword arguments (line 1534)
    kwargs_502293 = {}
    # Getting the type of 'sqrt' (line 1534)
    sqrt_502291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 13), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 1534)
    sqrt_call_result_502294 = invoke(stypy.reporting.localization.Localization(__file__, 1534, 13), sqrt_502291, *[pi_502292], **kwargs_502293)
    
    float_502295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1534, 24), 'float')
    # Applying the binary operator 'div' (line 1534)
    result_div_502296 = python_operator(stypy.reporting.localization.Localization(__file__, 1534, 13), 'div', sqrt_call_result_502294, float_502295)
    
    
    # Call to _gam(...): (line 1534)
    # Processing the call arguments (line 1534)
    # Getting the type of 'n' (line 1534)
    n_502298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 35), 'n', False)
    int_502299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1534, 39), 'int')
    # Applying the binary operator '+' (line 1534)
    result_add_502300 = python_operator(stypy.reporting.localization.Localization(__file__, 1534, 35), '+', n_502298, int_502299)
    
    # Processing the call keyword arguments (line 1534)
    kwargs_502301 = {}
    # Getting the type of '_gam' (line 1534)
    _gam_502297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 30), '_gam', False)
    # Calling _gam(args, kwargs) (line 1534)
    _gam_call_result_502302 = invoke(stypy.reporting.localization.Localization(__file__, 1534, 30), _gam_502297, *[result_add_502300], **kwargs_502301)
    
    # Applying the binary operator '*' (line 1534)
    result_mul_502303 = python_operator(stypy.reporting.localization.Localization(__file__, 1534, 28), '*', result_div_502296, _gam_call_result_502302)
    
    
    # Call to _gam(...): (line 1534)
    # Processing the call arguments (line 1534)
    # Getting the type of 'n' (line 1534)
    n_502305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 49), 'n', False)
    float_502306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1534, 53), 'float')
    # Applying the binary operator '+' (line 1534)
    result_add_502307 = python_operator(stypy.reporting.localization.Localization(__file__, 1534, 49), '+', n_502305, float_502306)
    
    # Processing the call keyword arguments (line 1534)
    kwargs_502308 = {}
    # Getting the type of '_gam' (line 1534)
    _gam_502304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 44), '_gam', False)
    # Calling _gam(args, kwargs) (line 1534)
    _gam_call_result_502309 = invoke(stypy.reporting.localization.Localization(__file__, 1534, 44), _gam_502304, *[result_add_502307], **kwargs_502308)
    
    # Applying the binary operator 'div' (line 1534)
    result_div_502310 = python_operator(stypy.reporting.localization.Localization(__file__, 1534, 42), 'div', result_mul_502303, _gam_call_result_502309)
    
    # Assigning a type to the variable 'factor' (line 1534)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1534, 4), 'factor', result_div_502310)
    
    # Call to _scale(...): (line 1535)
    # Processing the call arguments (line 1535)
    # Getting the type of 'factor' (line 1535)
    factor_502313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 16), 'factor', False)
    # Processing the call keyword arguments (line 1535)
    kwargs_502314 = {}
    # Getting the type of 'base' (line 1535)
    base_502311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 4), 'base', False)
    # Obtaining the member '_scale' of a type (line 1535)
    _scale_502312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1535, 4), base_502311, '_scale')
    # Calling _scale(args, kwargs) (line 1535)
    _scale_call_result_502315 = invoke(stypy.reporting.localization.Localization(__file__, 1535, 4), _scale_502312, *[factor_502313], **kwargs_502314)
    
    # Getting the type of 'base' (line 1536)
    base_502316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 11), 'base')
    # Assigning a type to the variable 'stypy_return_type' (line 1536)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1536, 4), 'stypy_return_type', base_502316)
    
    # ################# End of 'chebyu(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'chebyu' in the type store
    # Getting the type of 'stypy_return_type' (line 1497)
    stypy_return_type_502317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_502317)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'chebyu'
    return stypy_return_type_502317

# Assigning a type to the variable 'chebyu' (line 1497)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1497, 0), 'chebyu', chebyu)

@norecursion
def roots_chebyc(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1541)
    False_502318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 23), 'False')
    defaults = [False_502318]
    # Create a new context for function 'roots_chebyc'
    module_type_store = module_type_store.open_function_context('roots_chebyc', 1541, 0, False)
    
    # Passed parameters checking function
    roots_chebyc.stypy_localization = localization
    roots_chebyc.stypy_type_of_self = None
    roots_chebyc.stypy_type_store = module_type_store
    roots_chebyc.stypy_function_name = 'roots_chebyc'
    roots_chebyc.stypy_param_names_list = ['n', 'mu']
    roots_chebyc.stypy_varargs_param_name = None
    roots_chebyc.stypy_kwargs_param_name = None
    roots_chebyc.stypy_call_defaults = defaults
    roots_chebyc.stypy_call_varargs = varargs
    roots_chebyc.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'roots_chebyc', ['n', 'mu'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'roots_chebyc', localization, ['n', 'mu'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'roots_chebyc(...)' code ##################

    str_502319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1570, (-1)), 'str', 'Gauss-Chebyshev (first kind) quadrature.\n\n    Computes the sample points and weights for Gauss-Chebyshev quadrature.\n    The sample points are the roots of the n-th degree Chebyshev polynomial of\n    the first kind, :math:`C_n(x)`.  These sample points and weights correctly\n    integrate polynomials of degree :math:`2n - 1` or less over the interval\n    :math:`[-2, 2]` with weight function :math:`f(x) = 1/\\sqrt{1 - (x/2)^2}`.\n\n    Parameters\n    ----------\n    n : int\n        quadrature order\n    mu : bool, optional\n        If True, return the sum of the weights, optional.\n\n    Returns\n    -------\n    x : ndarray\n        Sample points\n    w : ndarray\n        Weights\n    mu : float\n        Sum of the weights\n\n    See Also\n    --------\n    scipy.integrate.quadrature\n    scipy.integrate.fixed_quad\n    ')
    
    # Assigning a Call to a Tuple (line 1571):
    
    # Assigning a Subscript to a Name (line 1571):
    
    # Obtaining the type of the subscript
    int_502320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1571, 4), 'int')
    
    # Call to roots_chebyt(...): (line 1571)
    # Processing the call arguments (line 1571)
    # Getting the type of 'n' (line 1571)
    n_502322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 27), 'n', False)
    # Getting the type of 'True' (line 1571)
    True_502323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 30), 'True', False)
    # Processing the call keyword arguments (line 1571)
    kwargs_502324 = {}
    # Getting the type of 'roots_chebyt' (line 1571)
    roots_chebyt_502321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 14), 'roots_chebyt', False)
    # Calling roots_chebyt(args, kwargs) (line 1571)
    roots_chebyt_call_result_502325 = invoke(stypy.reporting.localization.Localization(__file__, 1571, 14), roots_chebyt_502321, *[n_502322, True_502323], **kwargs_502324)
    
    # Obtaining the member '__getitem__' of a type (line 1571)
    getitem___502326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1571, 4), roots_chebyt_call_result_502325, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1571)
    subscript_call_result_502327 = invoke(stypy.reporting.localization.Localization(__file__, 1571, 4), getitem___502326, int_502320)
    
    # Assigning a type to the variable 'tuple_var_assignment_498437' (line 1571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1571, 4), 'tuple_var_assignment_498437', subscript_call_result_502327)
    
    # Assigning a Subscript to a Name (line 1571):
    
    # Obtaining the type of the subscript
    int_502328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1571, 4), 'int')
    
    # Call to roots_chebyt(...): (line 1571)
    # Processing the call arguments (line 1571)
    # Getting the type of 'n' (line 1571)
    n_502330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 27), 'n', False)
    # Getting the type of 'True' (line 1571)
    True_502331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 30), 'True', False)
    # Processing the call keyword arguments (line 1571)
    kwargs_502332 = {}
    # Getting the type of 'roots_chebyt' (line 1571)
    roots_chebyt_502329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 14), 'roots_chebyt', False)
    # Calling roots_chebyt(args, kwargs) (line 1571)
    roots_chebyt_call_result_502333 = invoke(stypy.reporting.localization.Localization(__file__, 1571, 14), roots_chebyt_502329, *[n_502330, True_502331], **kwargs_502332)
    
    # Obtaining the member '__getitem__' of a type (line 1571)
    getitem___502334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1571, 4), roots_chebyt_call_result_502333, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1571)
    subscript_call_result_502335 = invoke(stypy.reporting.localization.Localization(__file__, 1571, 4), getitem___502334, int_502328)
    
    # Assigning a type to the variable 'tuple_var_assignment_498438' (line 1571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1571, 4), 'tuple_var_assignment_498438', subscript_call_result_502335)
    
    # Assigning a Subscript to a Name (line 1571):
    
    # Obtaining the type of the subscript
    int_502336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1571, 4), 'int')
    
    # Call to roots_chebyt(...): (line 1571)
    # Processing the call arguments (line 1571)
    # Getting the type of 'n' (line 1571)
    n_502338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 27), 'n', False)
    # Getting the type of 'True' (line 1571)
    True_502339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 30), 'True', False)
    # Processing the call keyword arguments (line 1571)
    kwargs_502340 = {}
    # Getting the type of 'roots_chebyt' (line 1571)
    roots_chebyt_502337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 14), 'roots_chebyt', False)
    # Calling roots_chebyt(args, kwargs) (line 1571)
    roots_chebyt_call_result_502341 = invoke(stypy.reporting.localization.Localization(__file__, 1571, 14), roots_chebyt_502337, *[n_502338, True_502339], **kwargs_502340)
    
    # Obtaining the member '__getitem__' of a type (line 1571)
    getitem___502342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1571, 4), roots_chebyt_call_result_502341, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1571)
    subscript_call_result_502343 = invoke(stypy.reporting.localization.Localization(__file__, 1571, 4), getitem___502342, int_502336)
    
    # Assigning a type to the variable 'tuple_var_assignment_498439' (line 1571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1571, 4), 'tuple_var_assignment_498439', subscript_call_result_502343)
    
    # Assigning a Name to a Name (line 1571):
    # Getting the type of 'tuple_var_assignment_498437' (line 1571)
    tuple_var_assignment_498437_502344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 4), 'tuple_var_assignment_498437')
    # Assigning a type to the variable 'x' (line 1571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1571, 4), 'x', tuple_var_assignment_498437_502344)
    
    # Assigning a Name to a Name (line 1571):
    # Getting the type of 'tuple_var_assignment_498438' (line 1571)
    tuple_var_assignment_498438_502345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 4), 'tuple_var_assignment_498438')
    # Assigning a type to the variable 'w' (line 1571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1571, 7), 'w', tuple_var_assignment_498438_502345)
    
    # Assigning a Name to a Name (line 1571):
    # Getting the type of 'tuple_var_assignment_498439' (line 1571)
    tuple_var_assignment_498439_502346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 4), 'tuple_var_assignment_498439')
    # Assigning a type to the variable 'm' (line 1571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1571, 10), 'm', tuple_var_assignment_498439_502346)
    
    # Getting the type of 'x' (line 1572)
    x_502347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1572, 4), 'x')
    int_502348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1572, 9), 'int')
    # Applying the binary operator '*=' (line 1572)
    result_imul_502349 = python_operator(stypy.reporting.localization.Localization(__file__, 1572, 4), '*=', x_502347, int_502348)
    # Assigning a type to the variable 'x' (line 1572)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1572, 4), 'x', result_imul_502349)
    
    
    # Getting the type of 'w' (line 1573)
    w_502350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 4), 'w')
    int_502351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1573, 9), 'int')
    # Applying the binary operator '*=' (line 1573)
    result_imul_502352 = python_operator(stypy.reporting.localization.Localization(__file__, 1573, 4), '*=', w_502350, int_502351)
    # Assigning a type to the variable 'w' (line 1573)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1573, 4), 'w', result_imul_502352)
    
    
    # Getting the type of 'm' (line 1574)
    m_502353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 4), 'm')
    int_502354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1574, 9), 'int')
    # Applying the binary operator '*=' (line 1574)
    result_imul_502355 = python_operator(stypy.reporting.localization.Localization(__file__, 1574, 4), '*=', m_502353, int_502354)
    # Assigning a type to the variable 'm' (line 1574)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1574, 4), 'm', result_imul_502355)
    
    
    # Getting the type of 'mu' (line 1575)
    mu_502356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 7), 'mu')
    # Testing the type of an if condition (line 1575)
    if_condition_502357 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1575, 4), mu_502356)
    # Assigning a type to the variable 'if_condition_502357' (line 1575)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1575, 4), 'if_condition_502357', if_condition_502357)
    # SSA begins for if statement (line 1575)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1576)
    tuple_502358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1576, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1576)
    # Adding element type (line 1576)
    # Getting the type of 'x' (line 1576)
    x_502359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 15), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1576, 15), tuple_502358, x_502359)
    # Adding element type (line 1576)
    # Getting the type of 'w' (line 1576)
    w_502360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 18), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1576, 15), tuple_502358, w_502360)
    # Adding element type (line 1576)
    # Getting the type of 'm' (line 1576)
    m_502361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 21), 'm')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1576, 15), tuple_502358, m_502361)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1576)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1576, 8), 'stypy_return_type', tuple_502358)
    # SSA branch for the else part of an if statement (line 1575)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1578)
    tuple_502362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1578, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1578)
    # Adding element type (line 1578)
    # Getting the type of 'x' (line 1578)
    x_502363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 15), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1578, 15), tuple_502362, x_502363)
    # Adding element type (line 1578)
    # Getting the type of 'w' (line 1578)
    w_502364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 18), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1578, 15), tuple_502362, w_502364)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1578)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1578, 8), 'stypy_return_type', tuple_502362)
    # SSA join for if statement (line 1575)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'roots_chebyc(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'roots_chebyc' in the type store
    # Getting the type of 'stypy_return_type' (line 1541)
    stypy_return_type_502365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_502365)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'roots_chebyc'
    return stypy_return_type_502365

# Assigning a type to the variable 'roots_chebyc' (line 1541)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1541, 0), 'roots_chebyc', roots_chebyc)

@norecursion
def chebyc(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1581)
    False_502366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 20), 'False')
    defaults = [False_502366]
    # Create a new context for function 'chebyc'
    module_type_store = module_type_store.open_function_context('chebyc', 1581, 0, False)
    
    # Passed parameters checking function
    chebyc.stypy_localization = localization
    chebyc.stypy_type_of_self = None
    chebyc.stypy_type_store = module_type_store
    chebyc.stypy_function_name = 'chebyc'
    chebyc.stypy_param_names_list = ['n', 'monic']
    chebyc.stypy_varargs_param_name = None
    chebyc.stypy_kwargs_param_name = None
    chebyc.stypy_call_defaults = defaults
    chebyc.stypy_call_varargs = varargs
    chebyc.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'chebyc', ['n', 'monic'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'chebyc', localization, ['n', 'monic'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'chebyc(...)' code ##################

    str_502367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1614, (-1)), 'str', 'Chebyshev polynomial of the first kind on :math:`[-2, 2]`.\n\n    Defined as :math:`C_n(x) = 2T_n(x/2)`, where :math:`T_n` is the\n    nth Chebychev polynomial of the first kind.\n\n    Parameters\n    ----------\n    n : int\n        Degree of the polynomial.\n    monic : bool, optional\n        If `True`, scale the leading coefficient to be 1. Default is\n        `False`.\n\n    Returns\n    -------\n    C : orthopoly1d\n        Chebyshev polynomial of the first kind on :math:`[-2, 2]`.\n\n    Notes\n    -----\n    The polynomials :math:`C_n(x)` are orthogonal over :math:`[-2, 2]`\n    with weight function :math:`1/\\sqrt{1 - (x/2)^2}`.\n\n    See Also\n    --------\n    chebyt : Chebyshev polynomial of the first kind.\n\n    References\n    ----------\n    .. [1] Abramowitz and Stegun, "Handbook of Mathematical Functions"\n           Section 22. National Bureau of Standards, 1972.\n\n    ')
    
    
    # Getting the type of 'n' (line 1615)
    n_502368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 7), 'n')
    int_502369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1615, 11), 'int')
    # Applying the binary operator '<' (line 1615)
    result_lt_502370 = python_operator(stypy.reporting.localization.Localization(__file__, 1615, 7), '<', n_502368, int_502369)
    
    # Testing the type of an if condition (line 1615)
    if_condition_502371 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1615, 4), result_lt_502370)
    # Assigning a type to the variable 'if_condition_502371' (line 1615)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1615, 4), 'if_condition_502371', if_condition_502371)
    # SSA begins for if statement (line 1615)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1616)
    # Processing the call arguments (line 1616)
    str_502373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1616, 25), 'str', 'n must be nonnegative.')
    # Processing the call keyword arguments (line 1616)
    kwargs_502374 = {}
    # Getting the type of 'ValueError' (line 1616)
    ValueError_502372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1616)
    ValueError_call_result_502375 = invoke(stypy.reporting.localization.Localization(__file__, 1616, 14), ValueError_502372, *[str_502373], **kwargs_502374)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1616, 8), ValueError_call_result_502375, 'raise parameter', BaseException)
    # SSA join for if statement (line 1615)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 1618)
    n_502376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 7), 'n')
    int_502377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1618, 12), 'int')
    # Applying the binary operator '==' (line 1618)
    result_eq_502378 = python_operator(stypy.reporting.localization.Localization(__file__, 1618, 7), '==', n_502376, int_502377)
    
    # Testing the type of an if condition (line 1618)
    if_condition_502379 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1618, 4), result_eq_502378)
    # Assigning a type to the variable 'if_condition_502379' (line 1618)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1618, 4), 'if_condition_502379', if_condition_502379)
    # SSA begins for if statement (line 1618)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1619):
    
    # Assigning a BinOp to a Name (line 1619):
    # Getting the type of 'n' (line 1619)
    n_502380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 13), 'n')
    int_502381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1619, 17), 'int')
    # Applying the binary operator '+' (line 1619)
    result_add_502382 = python_operator(stypy.reporting.localization.Localization(__file__, 1619, 13), '+', n_502380, int_502381)
    
    # Assigning a type to the variable 'n1' (line 1619)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1619, 8), 'n1', result_add_502382)
    # SSA branch for the else part of an if statement (line 1618)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1621):
    
    # Assigning a Name to a Name (line 1621):
    # Getting the type of 'n' (line 1621)
    n_502383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 13), 'n')
    # Assigning a type to the variable 'n1' (line 1621)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1621, 8), 'n1', n_502383)
    # SSA join for if statement (line 1618)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 1622):
    
    # Assigning a Subscript to a Name (line 1622):
    
    # Obtaining the type of the subscript
    int_502384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1622, 4), 'int')
    
    # Call to roots_chebyc(...): (line 1622)
    # Processing the call arguments (line 1622)
    # Getting the type of 'n1' (line 1622)
    n1_502386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 29), 'n1', False)
    # Processing the call keyword arguments (line 1622)
    # Getting the type of 'True' (line 1622)
    True_502387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 36), 'True', False)
    keyword_502388 = True_502387
    kwargs_502389 = {'mu': keyword_502388}
    # Getting the type of 'roots_chebyc' (line 1622)
    roots_chebyc_502385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 16), 'roots_chebyc', False)
    # Calling roots_chebyc(args, kwargs) (line 1622)
    roots_chebyc_call_result_502390 = invoke(stypy.reporting.localization.Localization(__file__, 1622, 16), roots_chebyc_502385, *[n1_502386], **kwargs_502389)
    
    # Obtaining the member '__getitem__' of a type (line 1622)
    getitem___502391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1622, 4), roots_chebyc_call_result_502390, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1622)
    subscript_call_result_502392 = invoke(stypy.reporting.localization.Localization(__file__, 1622, 4), getitem___502391, int_502384)
    
    # Assigning a type to the variable 'tuple_var_assignment_498440' (line 1622)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1622, 4), 'tuple_var_assignment_498440', subscript_call_result_502392)
    
    # Assigning a Subscript to a Name (line 1622):
    
    # Obtaining the type of the subscript
    int_502393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1622, 4), 'int')
    
    # Call to roots_chebyc(...): (line 1622)
    # Processing the call arguments (line 1622)
    # Getting the type of 'n1' (line 1622)
    n1_502395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 29), 'n1', False)
    # Processing the call keyword arguments (line 1622)
    # Getting the type of 'True' (line 1622)
    True_502396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 36), 'True', False)
    keyword_502397 = True_502396
    kwargs_502398 = {'mu': keyword_502397}
    # Getting the type of 'roots_chebyc' (line 1622)
    roots_chebyc_502394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 16), 'roots_chebyc', False)
    # Calling roots_chebyc(args, kwargs) (line 1622)
    roots_chebyc_call_result_502399 = invoke(stypy.reporting.localization.Localization(__file__, 1622, 16), roots_chebyc_502394, *[n1_502395], **kwargs_502398)
    
    # Obtaining the member '__getitem__' of a type (line 1622)
    getitem___502400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1622, 4), roots_chebyc_call_result_502399, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1622)
    subscript_call_result_502401 = invoke(stypy.reporting.localization.Localization(__file__, 1622, 4), getitem___502400, int_502393)
    
    # Assigning a type to the variable 'tuple_var_assignment_498441' (line 1622)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1622, 4), 'tuple_var_assignment_498441', subscript_call_result_502401)
    
    # Assigning a Subscript to a Name (line 1622):
    
    # Obtaining the type of the subscript
    int_502402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1622, 4), 'int')
    
    # Call to roots_chebyc(...): (line 1622)
    # Processing the call arguments (line 1622)
    # Getting the type of 'n1' (line 1622)
    n1_502404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 29), 'n1', False)
    # Processing the call keyword arguments (line 1622)
    # Getting the type of 'True' (line 1622)
    True_502405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 36), 'True', False)
    keyword_502406 = True_502405
    kwargs_502407 = {'mu': keyword_502406}
    # Getting the type of 'roots_chebyc' (line 1622)
    roots_chebyc_502403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 16), 'roots_chebyc', False)
    # Calling roots_chebyc(args, kwargs) (line 1622)
    roots_chebyc_call_result_502408 = invoke(stypy.reporting.localization.Localization(__file__, 1622, 16), roots_chebyc_502403, *[n1_502404], **kwargs_502407)
    
    # Obtaining the member '__getitem__' of a type (line 1622)
    getitem___502409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1622, 4), roots_chebyc_call_result_502408, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1622)
    subscript_call_result_502410 = invoke(stypy.reporting.localization.Localization(__file__, 1622, 4), getitem___502409, int_502402)
    
    # Assigning a type to the variable 'tuple_var_assignment_498442' (line 1622)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1622, 4), 'tuple_var_assignment_498442', subscript_call_result_502410)
    
    # Assigning a Name to a Name (line 1622):
    # Getting the type of 'tuple_var_assignment_498440' (line 1622)
    tuple_var_assignment_498440_502411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 4), 'tuple_var_assignment_498440')
    # Assigning a type to the variable 'x' (line 1622)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1622, 4), 'x', tuple_var_assignment_498440_502411)
    
    # Assigning a Name to a Name (line 1622):
    # Getting the type of 'tuple_var_assignment_498441' (line 1622)
    tuple_var_assignment_498441_502412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 4), 'tuple_var_assignment_498441')
    # Assigning a type to the variable 'w' (line 1622)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1622, 7), 'w', tuple_var_assignment_498441_502412)
    
    # Assigning a Name to a Name (line 1622):
    # Getting the type of 'tuple_var_assignment_498442' (line 1622)
    tuple_var_assignment_498442_502413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 4), 'tuple_var_assignment_498442')
    # Assigning a type to the variable 'mu0' (line 1622)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1622, 10), 'mu0', tuple_var_assignment_498442_502413)
    
    
    # Getting the type of 'n' (line 1623)
    n_502414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 7), 'n')
    int_502415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1623, 12), 'int')
    # Applying the binary operator '==' (line 1623)
    result_eq_502416 = python_operator(stypy.reporting.localization.Localization(__file__, 1623, 7), '==', n_502414, int_502415)
    
    # Testing the type of an if condition (line 1623)
    if_condition_502417 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1623, 4), result_eq_502416)
    # Assigning a type to the variable 'if_condition_502417' (line 1623)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1623, 4), 'if_condition_502417', if_condition_502417)
    # SSA begins for if statement (line 1623)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 1624):
    
    # Assigning a List to a Name (line 1624):
    
    # Obtaining an instance of the builtin type 'list' (line 1624)
    list_502418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1624, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1624)
    
    # Assigning a type to the variable 'tuple_assignment_498443' (line 1624)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1624, 8), 'tuple_assignment_498443', list_502418)
    
    # Assigning a List to a Name (line 1624):
    
    # Obtaining an instance of the builtin type 'list' (line 1624)
    list_502419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1624, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1624)
    
    # Assigning a type to the variable 'tuple_assignment_498444' (line 1624)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1624, 8), 'tuple_assignment_498444', list_502419)
    
    # Assigning a Name to a Name (line 1624):
    # Getting the type of 'tuple_assignment_498443' (line 1624)
    tuple_assignment_498443_502420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1624, 8), 'tuple_assignment_498443')
    # Assigning a type to the variable 'x' (line 1624)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1624, 8), 'x', tuple_assignment_498443_502420)
    
    # Assigning a Name to a Name (line 1624):
    # Getting the type of 'tuple_assignment_498444' (line 1624)
    tuple_assignment_498444_502421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1624, 8), 'tuple_assignment_498444')
    # Assigning a type to the variable 'w' (line 1624)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1624, 11), 'w', tuple_assignment_498444_502421)
    # SSA join for if statement (line 1623)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1625):
    
    # Assigning a BinOp to a Name (line 1625):
    int_502422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1625, 9), 'int')
    # Getting the type of 'pi' (line 1625)
    pi_502423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 13), 'pi')
    # Applying the binary operator '*' (line 1625)
    result_mul_502424 = python_operator(stypy.reporting.localization.Localization(__file__, 1625, 9), '*', int_502422, pi_502423)
    
    
    # Getting the type of 'n' (line 1625)
    n_502425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 20), 'n')
    int_502426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1625, 25), 'int')
    # Applying the binary operator '==' (line 1625)
    result_eq_502427 = python_operator(stypy.reporting.localization.Localization(__file__, 1625, 20), '==', n_502425, int_502426)
    
    int_502428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1625, 30), 'int')
    # Applying the binary operator '+' (line 1625)
    result_add_502429 = python_operator(stypy.reporting.localization.Localization(__file__, 1625, 19), '+', result_eq_502427, int_502428)
    
    # Applying the binary operator '*' (line 1625)
    result_mul_502430 = python_operator(stypy.reporting.localization.Localization(__file__, 1625, 16), '*', result_mul_502424, result_add_502429)
    
    # Assigning a type to the variable 'hn' (line 1625)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1625, 4), 'hn', result_mul_502430)
    
    # Assigning a Num to a Name (line 1626):
    
    # Assigning a Num to a Name (line 1626):
    float_502431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1626, 9), 'float')
    # Assigning a type to the variable 'kn' (line 1626)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1626, 4), 'kn', float_502431)
    
    # Assigning a Call to a Name (line 1627):
    
    # Assigning a Call to a Name (line 1627):
    
    # Call to orthopoly1d(...): (line 1627)
    # Processing the call arguments (line 1627)
    # Getting the type of 'x' (line 1627)
    x_502433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 20), 'x', False)
    # Getting the type of 'w' (line 1627)
    w_502434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 23), 'w', False)
    # Getting the type of 'hn' (line 1627)
    hn_502435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 26), 'hn', False)
    # Getting the type of 'kn' (line 1627)
    kn_502436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 30), 'kn', False)
    # Processing the call keyword arguments (line 1627)

    @norecursion
    def _stypy_temp_lambda_283(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_283'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_283', 1628, 26, True)
        # Passed parameters checking function
        _stypy_temp_lambda_283.stypy_localization = localization
        _stypy_temp_lambda_283.stypy_type_of_self = None
        _stypy_temp_lambda_283.stypy_type_store = module_type_store
        _stypy_temp_lambda_283.stypy_function_name = '_stypy_temp_lambda_283'
        _stypy_temp_lambda_283.stypy_param_names_list = ['x']
        _stypy_temp_lambda_283.stypy_varargs_param_name = None
        _stypy_temp_lambda_283.stypy_kwargs_param_name = None
        _stypy_temp_lambda_283.stypy_call_defaults = defaults
        _stypy_temp_lambda_283.stypy_call_varargs = varargs
        _stypy_temp_lambda_283.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_283', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_283', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        float_502437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1628, 36), 'float')
        
        # Call to sqrt(...): (line 1628)
        # Processing the call arguments (line 1628)
        int_502439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1628, 47), 'int')
        # Getting the type of 'x' (line 1628)
        x_502440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 51), 'x', False)
        # Getting the type of 'x' (line 1628)
        x_502441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 55), 'x', False)
        # Applying the binary operator '*' (line 1628)
        result_mul_502442 = python_operator(stypy.reporting.localization.Localization(__file__, 1628, 51), '*', x_502440, x_502441)
        
        float_502443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1628, 59), 'float')
        # Applying the binary operator 'div' (line 1628)
        result_div_502444 = python_operator(stypy.reporting.localization.Localization(__file__, 1628, 57), 'div', result_mul_502442, float_502443)
        
        # Applying the binary operator '-' (line 1628)
        result_sub_502445 = python_operator(stypy.reporting.localization.Localization(__file__, 1628, 47), '-', int_502439, result_div_502444)
        
        # Processing the call keyword arguments (line 1628)
        kwargs_502446 = {}
        # Getting the type of 'sqrt' (line 1628)
        sqrt_502438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 42), 'sqrt', False)
        # Calling sqrt(args, kwargs) (line 1628)
        sqrt_call_result_502447 = invoke(stypy.reporting.localization.Localization(__file__, 1628, 42), sqrt_502438, *[result_sub_502445], **kwargs_502446)
        
        # Applying the binary operator 'div' (line 1628)
        result_div_502448 = python_operator(stypy.reporting.localization.Localization(__file__, 1628, 36), 'div', float_502437, sqrt_call_result_502447)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1628, 26), 'stypy_return_type', result_div_502448)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_283' in the type store
        # Getting the type of 'stypy_return_type' (line 1628)
        stypy_return_type_502449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 26), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_502449)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_283'
        return stypy_return_type_502449

    # Assigning a type to the variable '_stypy_temp_lambda_283' (line 1628)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1628, 26), '_stypy_temp_lambda_283', _stypy_temp_lambda_283)
    # Getting the type of '_stypy_temp_lambda_283' (line 1628)
    _stypy_temp_lambda_283_502450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 26), '_stypy_temp_lambda_283')
    keyword_502451 = _stypy_temp_lambda_283_502450
    
    # Obtaining an instance of the builtin type 'tuple' (line 1629)
    tuple_502452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1629, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1629)
    # Adding element type (line 1629)
    int_502453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1629, 28), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1629, 28), tuple_502452, int_502453)
    # Adding element type (line 1629)
    int_502454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1629, 32), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1629, 28), tuple_502452, int_502454)
    
    keyword_502455 = tuple_502452
    # Getting the type of 'monic' (line 1629)
    monic_502456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 42), 'monic', False)
    keyword_502457 = monic_502456
    kwargs_502458 = {'wfunc': keyword_502451, 'limits': keyword_502455, 'monic': keyword_502457}
    # Getting the type of 'orthopoly1d' (line 1627)
    orthopoly1d_502432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 8), 'orthopoly1d', False)
    # Calling orthopoly1d(args, kwargs) (line 1627)
    orthopoly1d_call_result_502459 = invoke(stypy.reporting.localization.Localization(__file__, 1627, 8), orthopoly1d_502432, *[x_502433, w_502434, hn_502435, kn_502436], **kwargs_502458)
    
    # Assigning a type to the variable 'p' (line 1627)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1627, 4), 'p', orthopoly1d_call_result_502459)
    
    
    # Getting the type of 'monic' (line 1630)
    monic_502460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 11), 'monic')
    # Applying the 'not' unary operator (line 1630)
    result_not__502461 = python_operator(stypy.reporting.localization.Localization(__file__, 1630, 7), 'not', monic_502460)
    
    # Testing the type of an if condition (line 1630)
    if_condition_502462 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1630, 4), result_not__502461)
    # Assigning a type to the variable 'if_condition_502462' (line 1630)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1630, 4), 'if_condition_502462', if_condition_502462)
    # SSA begins for if statement (line 1630)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _scale(...): (line 1631)
    # Processing the call arguments (line 1631)
    float_502465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1631, 17), 'float')
    
    # Call to p(...): (line 1631)
    # Processing the call arguments (line 1631)
    int_502467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1631, 25), 'int')
    # Processing the call keyword arguments (line 1631)
    kwargs_502468 = {}
    # Getting the type of 'p' (line 1631)
    p_502466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 23), 'p', False)
    # Calling p(args, kwargs) (line 1631)
    p_call_result_502469 = invoke(stypy.reporting.localization.Localization(__file__, 1631, 23), p_502466, *[int_502467], **kwargs_502468)
    
    # Applying the binary operator 'div' (line 1631)
    result_div_502470 = python_operator(stypy.reporting.localization.Localization(__file__, 1631, 17), 'div', float_502465, p_call_result_502469)
    
    # Processing the call keyword arguments (line 1631)
    kwargs_502471 = {}
    # Getting the type of 'p' (line 1631)
    p_502463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 8), 'p', False)
    # Obtaining the member '_scale' of a type (line 1631)
    _scale_502464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1631, 8), p_502463, '_scale')
    # Calling _scale(args, kwargs) (line 1631)
    _scale_call_result_502472 = invoke(stypy.reporting.localization.Localization(__file__, 1631, 8), _scale_502464, *[result_div_502470], **kwargs_502471)
    
    
    # Assigning a Lambda to a Subscript (line 1632):
    
    # Assigning a Lambda to a Subscript (line 1632):

    @norecursion
    def _stypy_temp_lambda_284(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_284'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_284', 1632, 35, True)
        # Passed parameters checking function
        _stypy_temp_lambda_284.stypy_localization = localization
        _stypy_temp_lambda_284.stypy_type_of_self = None
        _stypy_temp_lambda_284.stypy_type_store = module_type_store
        _stypy_temp_lambda_284.stypy_function_name = '_stypy_temp_lambda_284'
        _stypy_temp_lambda_284.stypy_param_names_list = ['x']
        _stypy_temp_lambda_284.stypy_varargs_param_name = None
        _stypy_temp_lambda_284.stypy_kwargs_param_name = None
        _stypy_temp_lambda_284.stypy_call_defaults = defaults
        _stypy_temp_lambda_284.stypy_call_varargs = varargs
        _stypy_temp_lambda_284.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_284', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_284', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to eval_chebyc(...): (line 1632)
        # Processing the call arguments (line 1632)
        # Getting the type of 'n' (line 1632)
        n_502474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 57), 'n', False)
        # Getting the type of 'x' (line 1632)
        x_502475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 60), 'x', False)
        # Processing the call keyword arguments (line 1632)
        kwargs_502476 = {}
        # Getting the type of 'eval_chebyc' (line 1632)
        eval_chebyc_502473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 45), 'eval_chebyc', False)
        # Calling eval_chebyc(args, kwargs) (line 1632)
        eval_chebyc_call_result_502477 = invoke(stypy.reporting.localization.Localization(__file__, 1632, 45), eval_chebyc_502473, *[n_502474, x_502475], **kwargs_502476)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1632)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1632, 35), 'stypy_return_type', eval_chebyc_call_result_502477)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_284' in the type store
        # Getting the type of 'stypy_return_type' (line 1632)
        stypy_return_type_502478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 35), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_502478)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_284'
        return stypy_return_type_502478

    # Assigning a type to the variable '_stypy_temp_lambda_284' (line 1632)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1632, 35), '_stypy_temp_lambda_284', _stypy_temp_lambda_284)
    # Getting the type of '_stypy_temp_lambda_284' (line 1632)
    _stypy_temp_lambda_284_502479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 35), '_stypy_temp_lambda_284')
    # Getting the type of 'p' (line 1632)
    p_502480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 8), 'p')
    # Obtaining the member '__dict__' of a type (line 1632)
    dict___502481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1632, 8), p_502480, '__dict__')
    str_502482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1632, 19), 'str', '_eval_func')
    # Storing an element on a container (line 1632)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1632, 8), dict___502481, (str_502482, _stypy_temp_lambda_284_502479))
    # SSA join for if statement (line 1630)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'p' (line 1633)
    p_502483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1633, 11), 'p')
    # Assigning a type to the variable 'stypy_return_type' (line 1633)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1633, 4), 'stypy_return_type', p_502483)
    
    # ################# End of 'chebyc(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'chebyc' in the type store
    # Getting the type of 'stypy_return_type' (line 1581)
    stypy_return_type_502484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_502484)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'chebyc'
    return stypy_return_type_502484

# Assigning a type to the variable 'chebyc' (line 1581)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1581, 0), 'chebyc', chebyc)

@norecursion
def roots_chebys(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1638)
    False_502485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 23), 'False')
    defaults = [False_502485]
    # Create a new context for function 'roots_chebys'
    module_type_store = module_type_store.open_function_context('roots_chebys', 1638, 0, False)
    
    # Passed parameters checking function
    roots_chebys.stypy_localization = localization
    roots_chebys.stypy_type_of_self = None
    roots_chebys.stypy_type_store = module_type_store
    roots_chebys.stypy_function_name = 'roots_chebys'
    roots_chebys.stypy_param_names_list = ['n', 'mu']
    roots_chebys.stypy_varargs_param_name = None
    roots_chebys.stypy_kwargs_param_name = None
    roots_chebys.stypy_call_defaults = defaults
    roots_chebys.stypy_call_varargs = varargs
    roots_chebys.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'roots_chebys', ['n', 'mu'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'roots_chebys', localization, ['n', 'mu'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'roots_chebys(...)' code ##################

    str_502486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, (-1)), 'str', 'Gauss-Chebyshev (second kind) quadrature.\n\n    Computes the sample points and weights for Gauss-Chebyshev quadrature.\n    The sample points are the roots of the n-th degree Chebyshev polynomial of\n    the second kind, :math:`S_n(x)`.  These sample points and weights correctly\n    integrate polynomials of degree :math:`2n - 1` or less over the interval\n    :math:`[-2, 2]` with weight function :math:`f(x) = \\sqrt{1 - (x/2)^2}`.\n\n    Parameters\n    ----------\n    n : int\n        quadrature order\n    mu : bool, optional\n        If True, return the sum of the weights, optional.\n\n    Returns\n    -------\n    x : ndarray\n        Sample points\n    w : ndarray\n        Weights\n    mu : float\n        Sum of the weights\n\n    See Also\n    --------\n    scipy.integrate.quadrature\n    scipy.integrate.fixed_quad\n    ')
    
    # Assigning a Call to a Tuple (line 1668):
    
    # Assigning a Subscript to a Name (line 1668):
    
    # Obtaining the type of the subscript
    int_502487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1668, 4), 'int')
    
    # Call to roots_chebyu(...): (line 1668)
    # Processing the call arguments (line 1668)
    # Getting the type of 'n' (line 1668)
    n_502489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 27), 'n', False)
    # Getting the type of 'True' (line 1668)
    True_502490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 30), 'True', False)
    # Processing the call keyword arguments (line 1668)
    kwargs_502491 = {}
    # Getting the type of 'roots_chebyu' (line 1668)
    roots_chebyu_502488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 14), 'roots_chebyu', False)
    # Calling roots_chebyu(args, kwargs) (line 1668)
    roots_chebyu_call_result_502492 = invoke(stypy.reporting.localization.Localization(__file__, 1668, 14), roots_chebyu_502488, *[n_502489, True_502490], **kwargs_502491)
    
    # Obtaining the member '__getitem__' of a type (line 1668)
    getitem___502493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1668, 4), roots_chebyu_call_result_502492, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1668)
    subscript_call_result_502494 = invoke(stypy.reporting.localization.Localization(__file__, 1668, 4), getitem___502493, int_502487)
    
    # Assigning a type to the variable 'tuple_var_assignment_498445' (line 1668)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 4), 'tuple_var_assignment_498445', subscript_call_result_502494)
    
    # Assigning a Subscript to a Name (line 1668):
    
    # Obtaining the type of the subscript
    int_502495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1668, 4), 'int')
    
    # Call to roots_chebyu(...): (line 1668)
    # Processing the call arguments (line 1668)
    # Getting the type of 'n' (line 1668)
    n_502497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 27), 'n', False)
    # Getting the type of 'True' (line 1668)
    True_502498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 30), 'True', False)
    # Processing the call keyword arguments (line 1668)
    kwargs_502499 = {}
    # Getting the type of 'roots_chebyu' (line 1668)
    roots_chebyu_502496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 14), 'roots_chebyu', False)
    # Calling roots_chebyu(args, kwargs) (line 1668)
    roots_chebyu_call_result_502500 = invoke(stypy.reporting.localization.Localization(__file__, 1668, 14), roots_chebyu_502496, *[n_502497, True_502498], **kwargs_502499)
    
    # Obtaining the member '__getitem__' of a type (line 1668)
    getitem___502501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1668, 4), roots_chebyu_call_result_502500, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1668)
    subscript_call_result_502502 = invoke(stypy.reporting.localization.Localization(__file__, 1668, 4), getitem___502501, int_502495)
    
    # Assigning a type to the variable 'tuple_var_assignment_498446' (line 1668)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 4), 'tuple_var_assignment_498446', subscript_call_result_502502)
    
    # Assigning a Subscript to a Name (line 1668):
    
    # Obtaining the type of the subscript
    int_502503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1668, 4), 'int')
    
    # Call to roots_chebyu(...): (line 1668)
    # Processing the call arguments (line 1668)
    # Getting the type of 'n' (line 1668)
    n_502505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 27), 'n', False)
    # Getting the type of 'True' (line 1668)
    True_502506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 30), 'True', False)
    # Processing the call keyword arguments (line 1668)
    kwargs_502507 = {}
    # Getting the type of 'roots_chebyu' (line 1668)
    roots_chebyu_502504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 14), 'roots_chebyu', False)
    # Calling roots_chebyu(args, kwargs) (line 1668)
    roots_chebyu_call_result_502508 = invoke(stypy.reporting.localization.Localization(__file__, 1668, 14), roots_chebyu_502504, *[n_502505, True_502506], **kwargs_502507)
    
    # Obtaining the member '__getitem__' of a type (line 1668)
    getitem___502509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1668, 4), roots_chebyu_call_result_502508, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1668)
    subscript_call_result_502510 = invoke(stypy.reporting.localization.Localization(__file__, 1668, 4), getitem___502509, int_502503)
    
    # Assigning a type to the variable 'tuple_var_assignment_498447' (line 1668)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 4), 'tuple_var_assignment_498447', subscript_call_result_502510)
    
    # Assigning a Name to a Name (line 1668):
    # Getting the type of 'tuple_var_assignment_498445' (line 1668)
    tuple_var_assignment_498445_502511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 4), 'tuple_var_assignment_498445')
    # Assigning a type to the variable 'x' (line 1668)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 4), 'x', tuple_var_assignment_498445_502511)
    
    # Assigning a Name to a Name (line 1668):
    # Getting the type of 'tuple_var_assignment_498446' (line 1668)
    tuple_var_assignment_498446_502512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 4), 'tuple_var_assignment_498446')
    # Assigning a type to the variable 'w' (line 1668)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 7), 'w', tuple_var_assignment_498446_502512)
    
    # Assigning a Name to a Name (line 1668):
    # Getting the type of 'tuple_var_assignment_498447' (line 1668)
    tuple_var_assignment_498447_502513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 4), 'tuple_var_assignment_498447')
    # Assigning a type to the variable 'm' (line 1668)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 10), 'm', tuple_var_assignment_498447_502513)
    
    # Getting the type of 'x' (line 1669)
    x_502514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 4), 'x')
    int_502515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1669, 9), 'int')
    # Applying the binary operator '*=' (line 1669)
    result_imul_502516 = python_operator(stypy.reporting.localization.Localization(__file__, 1669, 4), '*=', x_502514, int_502515)
    # Assigning a type to the variable 'x' (line 1669)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1669, 4), 'x', result_imul_502516)
    
    
    # Getting the type of 'w' (line 1670)
    w_502517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 4), 'w')
    int_502518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1670, 9), 'int')
    # Applying the binary operator '*=' (line 1670)
    result_imul_502519 = python_operator(stypy.reporting.localization.Localization(__file__, 1670, 4), '*=', w_502517, int_502518)
    # Assigning a type to the variable 'w' (line 1670)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 4), 'w', result_imul_502519)
    
    
    # Getting the type of 'm' (line 1671)
    m_502520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 4), 'm')
    int_502521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1671, 9), 'int')
    # Applying the binary operator '*=' (line 1671)
    result_imul_502522 = python_operator(stypy.reporting.localization.Localization(__file__, 1671, 4), '*=', m_502520, int_502521)
    # Assigning a type to the variable 'm' (line 1671)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1671, 4), 'm', result_imul_502522)
    
    
    # Getting the type of 'mu' (line 1672)
    mu_502523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 7), 'mu')
    # Testing the type of an if condition (line 1672)
    if_condition_502524 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1672, 4), mu_502523)
    # Assigning a type to the variable 'if_condition_502524' (line 1672)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1672, 4), 'if_condition_502524', if_condition_502524)
    # SSA begins for if statement (line 1672)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1673)
    tuple_502525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1673, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1673)
    # Adding element type (line 1673)
    # Getting the type of 'x' (line 1673)
    x_502526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 15), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1673, 15), tuple_502525, x_502526)
    # Adding element type (line 1673)
    # Getting the type of 'w' (line 1673)
    w_502527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 18), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1673, 15), tuple_502525, w_502527)
    # Adding element type (line 1673)
    # Getting the type of 'm' (line 1673)
    m_502528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 21), 'm')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1673, 15), tuple_502525, m_502528)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1673)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1673, 8), 'stypy_return_type', tuple_502525)
    # SSA branch for the else part of an if statement (line 1672)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1675)
    tuple_502529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1675, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1675)
    # Adding element type (line 1675)
    # Getting the type of 'x' (line 1675)
    x_502530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 15), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1675, 15), tuple_502529, x_502530)
    # Adding element type (line 1675)
    # Getting the type of 'w' (line 1675)
    w_502531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 18), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1675, 15), tuple_502529, w_502531)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1675)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1675, 8), 'stypy_return_type', tuple_502529)
    # SSA join for if statement (line 1672)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'roots_chebys(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'roots_chebys' in the type store
    # Getting the type of 'stypy_return_type' (line 1638)
    stypy_return_type_502532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_502532)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'roots_chebys'
    return stypy_return_type_502532

# Assigning a type to the variable 'roots_chebys' (line 1638)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1638, 0), 'roots_chebys', roots_chebys)

@norecursion
def chebys(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1678)
    False_502533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 20), 'False')
    defaults = [False_502533]
    # Create a new context for function 'chebys'
    module_type_store = module_type_store.open_function_context('chebys', 1678, 0, False)
    
    # Passed parameters checking function
    chebys.stypy_localization = localization
    chebys.stypy_type_of_self = None
    chebys.stypy_type_store = module_type_store
    chebys.stypy_function_name = 'chebys'
    chebys.stypy_param_names_list = ['n', 'monic']
    chebys.stypy_varargs_param_name = None
    chebys.stypy_kwargs_param_name = None
    chebys.stypy_call_defaults = defaults
    chebys.stypy_call_varargs = varargs
    chebys.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'chebys', ['n', 'monic'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'chebys', localization, ['n', 'monic'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'chebys(...)' code ##################

    str_502534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1711, (-1)), 'str', 'Chebyshev polynomial of the second kind on :math:`[-2, 2]`.\n\n    Defined as :math:`S_n(x) = U_n(x/2)` where :math:`U_n` is the\n    nth Chebychev polynomial of the second kind.\n\n    Parameters\n    ----------\n    n : int\n        Degree of the polynomial.\n    monic : bool, optional\n        If `True`, scale the leading coefficient to be 1. Default is\n        `False`.\n\n    Returns\n    -------\n    S : orthopoly1d\n        Chebyshev polynomial of the second kind on :math:`[-2, 2]`.\n\n    Notes\n    -----\n    The polynomials :math:`S_n(x)` are orthogonal over :math:`[-2, 2]`\n    with weight function :math:`\\sqrt{1 - (x/2)}^2`.\n\n    See Also\n    --------\n    chebyu : Chebyshev polynomial of the second kind\n\n    References\n    ----------\n    .. [1] Abramowitz and Stegun, "Handbook of Mathematical Functions"\n           Section 22. National Bureau of Standards, 1972.\n\n    ')
    
    
    # Getting the type of 'n' (line 1712)
    n_502535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 7), 'n')
    int_502536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1712, 11), 'int')
    # Applying the binary operator '<' (line 1712)
    result_lt_502537 = python_operator(stypy.reporting.localization.Localization(__file__, 1712, 7), '<', n_502535, int_502536)
    
    # Testing the type of an if condition (line 1712)
    if_condition_502538 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1712, 4), result_lt_502537)
    # Assigning a type to the variable 'if_condition_502538' (line 1712)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1712, 4), 'if_condition_502538', if_condition_502538)
    # SSA begins for if statement (line 1712)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1713)
    # Processing the call arguments (line 1713)
    str_502540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1713, 25), 'str', 'n must be nonnegative.')
    # Processing the call keyword arguments (line 1713)
    kwargs_502541 = {}
    # Getting the type of 'ValueError' (line 1713)
    ValueError_502539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1713, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1713)
    ValueError_call_result_502542 = invoke(stypy.reporting.localization.Localization(__file__, 1713, 14), ValueError_502539, *[str_502540], **kwargs_502541)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1713, 8), ValueError_call_result_502542, 'raise parameter', BaseException)
    # SSA join for if statement (line 1712)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 1715)
    n_502543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 7), 'n')
    int_502544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1715, 12), 'int')
    # Applying the binary operator '==' (line 1715)
    result_eq_502545 = python_operator(stypy.reporting.localization.Localization(__file__, 1715, 7), '==', n_502543, int_502544)
    
    # Testing the type of an if condition (line 1715)
    if_condition_502546 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1715, 4), result_eq_502545)
    # Assigning a type to the variable 'if_condition_502546' (line 1715)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1715, 4), 'if_condition_502546', if_condition_502546)
    # SSA begins for if statement (line 1715)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1716):
    
    # Assigning a BinOp to a Name (line 1716):
    # Getting the type of 'n' (line 1716)
    n_502547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 13), 'n')
    int_502548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1716, 17), 'int')
    # Applying the binary operator '+' (line 1716)
    result_add_502549 = python_operator(stypy.reporting.localization.Localization(__file__, 1716, 13), '+', n_502547, int_502548)
    
    # Assigning a type to the variable 'n1' (line 1716)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1716, 8), 'n1', result_add_502549)
    # SSA branch for the else part of an if statement (line 1715)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1718):
    
    # Assigning a Name to a Name (line 1718):
    # Getting the type of 'n' (line 1718)
    n_502550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 13), 'n')
    # Assigning a type to the variable 'n1' (line 1718)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1718, 8), 'n1', n_502550)
    # SSA join for if statement (line 1715)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 1719):
    
    # Assigning a Subscript to a Name (line 1719):
    
    # Obtaining the type of the subscript
    int_502551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1719, 4), 'int')
    
    # Call to roots_chebys(...): (line 1719)
    # Processing the call arguments (line 1719)
    # Getting the type of 'n1' (line 1719)
    n1_502553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 29), 'n1', False)
    # Processing the call keyword arguments (line 1719)
    # Getting the type of 'True' (line 1719)
    True_502554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 36), 'True', False)
    keyword_502555 = True_502554
    kwargs_502556 = {'mu': keyword_502555}
    # Getting the type of 'roots_chebys' (line 1719)
    roots_chebys_502552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 16), 'roots_chebys', False)
    # Calling roots_chebys(args, kwargs) (line 1719)
    roots_chebys_call_result_502557 = invoke(stypy.reporting.localization.Localization(__file__, 1719, 16), roots_chebys_502552, *[n1_502553], **kwargs_502556)
    
    # Obtaining the member '__getitem__' of a type (line 1719)
    getitem___502558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1719, 4), roots_chebys_call_result_502557, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1719)
    subscript_call_result_502559 = invoke(stypy.reporting.localization.Localization(__file__, 1719, 4), getitem___502558, int_502551)
    
    # Assigning a type to the variable 'tuple_var_assignment_498448' (line 1719)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1719, 4), 'tuple_var_assignment_498448', subscript_call_result_502559)
    
    # Assigning a Subscript to a Name (line 1719):
    
    # Obtaining the type of the subscript
    int_502560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1719, 4), 'int')
    
    # Call to roots_chebys(...): (line 1719)
    # Processing the call arguments (line 1719)
    # Getting the type of 'n1' (line 1719)
    n1_502562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 29), 'n1', False)
    # Processing the call keyword arguments (line 1719)
    # Getting the type of 'True' (line 1719)
    True_502563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 36), 'True', False)
    keyword_502564 = True_502563
    kwargs_502565 = {'mu': keyword_502564}
    # Getting the type of 'roots_chebys' (line 1719)
    roots_chebys_502561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 16), 'roots_chebys', False)
    # Calling roots_chebys(args, kwargs) (line 1719)
    roots_chebys_call_result_502566 = invoke(stypy.reporting.localization.Localization(__file__, 1719, 16), roots_chebys_502561, *[n1_502562], **kwargs_502565)
    
    # Obtaining the member '__getitem__' of a type (line 1719)
    getitem___502567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1719, 4), roots_chebys_call_result_502566, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1719)
    subscript_call_result_502568 = invoke(stypy.reporting.localization.Localization(__file__, 1719, 4), getitem___502567, int_502560)
    
    # Assigning a type to the variable 'tuple_var_assignment_498449' (line 1719)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1719, 4), 'tuple_var_assignment_498449', subscript_call_result_502568)
    
    # Assigning a Subscript to a Name (line 1719):
    
    # Obtaining the type of the subscript
    int_502569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1719, 4), 'int')
    
    # Call to roots_chebys(...): (line 1719)
    # Processing the call arguments (line 1719)
    # Getting the type of 'n1' (line 1719)
    n1_502571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 29), 'n1', False)
    # Processing the call keyword arguments (line 1719)
    # Getting the type of 'True' (line 1719)
    True_502572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 36), 'True', False)
    keyword_502573 = True_502572
    kwargs_502574 = {'mu': keyword_502573}
    # Getting the type of 'roots_chebys' (line 1719)
    roots_chebys_502570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 16), 'roots_chebys', False)
    # Calling roots_chebys(args, kwargs) (line 1719)
    roots_chebys_call_result_502575 = invoke(stypy.reporting.localization.Localization(__file__, 1719, 16), roots_chebys_502570, *[n1_502571], **kwargs_502574)
    
    # Obtaining the member '__getitem__' of a type (line 1719)
    getitem___502576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1719, 4), roots_chebys_call_result_502575, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1719)
    subscript_call_result_502577 = invoke(stypy.reporting.localization.Localization(__file__, 1719, 4), getitem___502576, int_502569)
    
    # Assigning a type to the variable 'tuple_var_assignment_498450' (line 1719)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1719, 4), 'tuple_var_assignment_498450', subscript_call_result_502577)
    
    # Assigning a Name to a Name (line 1719):
    # Getting the type of 'tuple_var_assignment_498448' (line 1719)
    tuple_var_assignment_498448_502578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 4), 'tuple_var_assignment_498448')
    # Assigning a type to the variable 'x' (line 1719)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1719, 4), 'x', tuple_var_assignment_498448_502578)
    
    # Assigning a Name to a Name (line 1719):
    # Getting the type of 'tuple_var_assignment_498449' (line 1719)
    tuple_var_assignment_498449_502579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 4), 'tuple_var_assignment_498449')
    # Assigning a type to the variable 'w' (line 1719)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1719, 7), 'w', tuple_var_assignment_498449_502579)
    
    # Assigning a Name to a Name (line 1719):
    # Getting the type of 'tuple_var_assignment_498450' (line 1719)
    tuple_var_assignment_498450_502580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 4), 'tuple_var_assignment_498450')
    # Assigning a type to the variable 'mu0' (line 1719)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1719, 10), 'mu0', tuple_var_assignment_498450_502580)
    
    
    # Getting the type of 'n' (line 1720)
    n_502581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 7), 'n')
    int_502582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1720, 12), 'int')
    # Applying the binary operator '==' (line 1720)
    result_eq_502583 = python_operator(stypy.reporting.localization.Localization(__file__, 1720, 7), '==', n_502581, int_502582)
    
    # Testing the type of an if condition (line 1720)
    if_condition_502584 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1720, 4), result_eq_502583)
    # Assigning a type to the variable 'if_condition_502584' (line 1720)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1720, 4), 'if_condition_502584', if_condition_502584)
    # SSA begins for if statement (line 1720)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 1721):
    
    # Assigning a List to a Name (line 1721):
    
    # Obtaining an instance of the builtin type 'list' (line 1721)
    list_502585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1721, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1721)
    
    # Assigning a type to the variable 'tuple_assignment_498451' (line 1721)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1721, 8), 'tuple_assignment_498451', list_502585)
    
    # Assigning a List to a Name (line 1721):
    
    # Obtaining an instance of the builtin type 'list' (line 1721)
    list_502586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1721, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1721)
    
    # Assigning a type to the variable 'tuple_assignment_498452' (line 1721)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1721, 8), 'tuple_assignment_498452', list_502586)
    
    # Assigning a Name to a Name (line 1721):
    # Getting the type of 'tuple_assignment_498451' (line 1721)
    tuple_assignment_498451_502587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 8), 'tuple_assignment_498451')
    # Assigning a type to the variable 'x' (line 1721)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1721, 8), 'x', tuple_assignment_498451_502587)
    
    # Assigning a Name to a Name (line 1721):
    # Getting the type of 'tuple_assignment_498452' (line 1721)
    tuple_assignment_498452_502588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 8), 'tuple_assignment_498452')
    # Assigning a type to the variable 'w' (line 1721)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1721, 11), 'w', tuple_assignment_498452_502588)
    # SSA join for if statement (line 1720)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 1722):
    
    # Assigning a Name to a Name (line 1722):
    # Getting the type of 'pi' (line 1722)
    pi_502589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 9), 'pi')
    # Assigning a type to the variable 'hn' (line 1722)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1722, 4), 'hn', pi_502589)
    
    # Assigning a Num to a Name (line 1723):
    
    # Assigning a Num to a Name (line 1723):
    float_502590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1723, 9), 'float')
    # Assigning a type to the variable 'kn' (line 1723)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1723, 4), 'kn', float_502590)
    
    # Assigning a Call to a Name (line 1724):
    
    # Assigning a Call to a Name (line 1724):
    
    # Call to orthopoly1d(...): (line 1724)
    # Processing the call arguments (line 1724)
    # Getting the type of 'x' (line 1724)
    x_502592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 20), 'x', False)
    # Getting the type of 'w' (line 1724)
    w_502593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 23), 'w', False)
    # Getting the type of 'hn' (line 1724)
    hn_502594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 26), 'hn', False)
    # Getting the type of 'kn' (line 1724)
    kn_502595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 30), 'kn', False)
    # Processing the call keyword arguments (line 1724)

    @norecursion
    def _stypy_temp_lambda_285(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_285'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_285', 1725, 26, True)
        # Passed parameters checking function
        _stypy_temp_lambda_285.stypy_localization = localization
        _stypy_temp_lambda_285.stypy_type_of_self = None
        _stypy_temp_lambda_285.stypy_type_store = module_type_store
        _stypy_temp_lambda_285.stypy_function_name = '_stypy_temp_lambda_285'
        _stypy_temp_lambda_285.stypy_param_names_list = ['x']
        _stypy_temp_lambda_285.stypy_varargs_param_name = None
        _stypy_temp_lambda_285.stypy_kwargs_param_name = None
        _stypy_temp_lambda_285.stypy_call_defaults = defaults
        _stypy_temp_lambda_285.stypy_call_varargs = varargs
        _stypy_temp_lambda_285.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_285', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_285', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to sqrt(...): (line 1725)
        # Processing the call arguments (line 1725)
        int_502597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1725, 41), 'int')
        # Getting the type of 'x' (line 1725)
        x_502598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 45), 'x', False)
        # Getting the type of 'x' (line 1725)
        x_502599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 49), 'x', False)
        # Applying the binary operator '*' (line 1725)
        result_mul_502600 = python_operator(stypy.reporting.localization.Localization(__file__, 1725, 45), '*', x_502598, x_502599)
        
        float_502601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1725, 53), 'float')
        # Applying the binary operator 'div' (line 1725)
        result_div_502602 = python_operator(stypy.reporting.localization.Localization(__file__, 1725, 51), 'div', result_mul_502600, float_502601)
        
        # Applying the binary operator '-' (line 1725)
        result_sub_502603 = python_operator(stypy.reporting.localization.Localization(__file__, 1725, 41), '-', int_502597, result_div_502602)
        
        # Processing the call keyword arguments (line 1725)
        kwargs_502604 = {}
        # Getting the type of 'sqrt' (line 1725)
        sqrt_502596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 36), 'sqrt', False)
        # Calling sqrt(args, kwargs) (line 1725)
        sqrt_call_result_502605 = invoke(stypy.reporting.localization.Localization(__file__, 1725, 36), sqrt_502596, *[result_sub_502603], **kwargs_502604)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1725)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1725, 26), 'stypy_return_type', sqrt_call_result_502605)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_285' in the type store
        # Getting the type of 'stypy_return_type' (line 1725)
        stypy_return_type_502606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 26), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_502606)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_285'
        return stypy_return_type_502606

    # Assigning a type to the variable '_stypy_temp_lambda_285' (line 1725)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1725, 26), '_stypy_temp_lambda_285', _stypy_temp_lambda_285)
    # Getting the type of '_stypy_temp_lambda_285' (line 1725)
    _stypy_temp_lambda_285_502607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 26), '_stypy_temp_lambda_285')
    keyword_502608 = _stypy_temp_lambda_285_502607
    
    # Obtaining an instance of the builtin type 'tuple' (line 1726)
    tuple_502609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1726, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1726)
    # Adding element type (line 1726)
    int_502610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1726, 28), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1726, 28), tuple_502609, int_502610)
    # Adding element type (line 1726)
    int_502611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1726, 32), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1726, 28), tuple_502609, int_502611)
    
    keyword_502612 = tuple_502609
    # Getting the type of 'monic' (line 1726)
    monic_502613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 42), 'monic', False)
    keyword_502614 = monic_502613
    kwargs_502615 = {'wfunc': keyword_502608, 'limits': keyword_502612, 'monic': keyword_502614}
    # Getting the type of 'orthopoly1d' (line 1724)
    orthopoly1d_502591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 8), 'orthopoly1d', False)
    # Calling orthopoly1d(args, kwargs) (line 1724)
    orthopoly1d_call_result_502616 = invoke(stypy.reporting.localization.Localization(__file__, 1724, 8), orthopoly1d_502591, *[x_502592, w_502593, hn_502594, kn_502595], **kwargs_502615)
    
    # Assigning a type to the variable 'p' (line 1724)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1724, 4), 'p', orthopoly1d_call_result_502616)
    
    
    # Getting the type of 'monic' (line 1727)
    monic_502617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 11), 'monic')
    # Applying the 'not' unary operator (line 1727)
    result_not__502618 = python_operator(stypy.reporting.localization.Localization(__file__, 1727, 7), 'not', monic_502617)
    
    # Testing the type of an if condition (line 1727)
    if_condition_502619 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1727, 4), result_not__502618)
    # Assigning a type to the variable 'if_condition_502619' (line 1727)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1727, 4), 'if_condition_502619', if_condition_502619)
    # SSA begins for if statement (line 1727)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1728):
    
    # Assigning a BinOp to a Name (line 1728):
    # Getting the type of 'n' (line 1728)
    n_502620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 18), 'n')
    float_502621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1728, 22), 'float')
    # Applying the binary operator '+' (line 1728)
    result_add_502622 = python_operator(stypy.reporting.localization.Localization(__file__, 1728, 18), '+', n_502620, float_502621)
    
    
    # Call to p(...): (line 1728)
    # Processing the call arguments (line 1728)
    int_502624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1728, 31), 'int')
    # Processing the call keyword arguments (line 1728)
    kwargs_502625 = {}
    # Getting the type of 'p' (line 1728)
    p_502623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 29), 'p', False)
    # Calling p(args, kwargs) (line 1728)
    p_call_result_502626 = invoke(stypy.reporting.localization.Localization(__file__, 1728, 29), p_502623, *[int_502624], **kwargs_502625)
    
    # Applying the binary operator 'div' (line 1728)
    result_div_502627 = python_operator(stypy.reporting.localization.Localization(__file__, 1728, 17), 'div', result_add_502622, p_call_result_502626)
    
    # Assigning a type to the variable 'factor' (line 1728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1728, 8), 'factor', result_div_502627)
    
    # Call to _scale(...): (line 1729)
    # Processing the call arguments (line 1729)
    # Getting the type of 'factor' (line 1729)
    factor_502630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 17), 'factor', False)
    # Processing the call keyword arguments (line 1729)
    kwargs_502631 = {}
    # Getting the type of 'p' (line 1729)
    p_502628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 8), 'p', False)
    # Obtaining the member '_scale' of a type (line 1729)
    _scale_502629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1729, 8), p_502628, '_scale')
    # Calling _scale(args, kwargs) (line 1729)
    _scale_call_result_502632 = invoke(stypy.reporting.localization.Localization(__file__, 1729, 8), _scale_502629, *[factor_502630], **kwargs_502631)
    
    
    # Assigning a Lambda to a Subscript (line 1730):
    
    # Assigning a Lambda to a Subscript (line 1730):

    @norecursion
    def _stypy_temp_lambda_286(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_286'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_286', 1730, 35, True)
        # Passed parameters checking function
        _stypy_temp_lambda_286.stypy_localization = localization
        _stypy_temp_lambda_286.stypy_type_of_self = None
        _stypy_temp_lambda_286.stypy_type_store = module_type_store
        _stypy_temp_lambda_286.stypy_function_name = '_stypy_temp_lambda_286'
        _stypy_temp_lambda_286.stypy_param_names_list = ['x']
        _stypy_temp_lambda_286.stypy_varargs_param_name = None
        _stypy_temp_lambda_286.stypy_kwargs_param_name = None
        _stypy_temp_lambda_286.stypy_call_defaults = defaults
        _stypy_temp_lambda_286.stypy_call_varargs = varargs
        _stypy_temp_lambda_286.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_286', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_286', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to eval_chebys(...): (line 1730)
        # Processing the call arguments (line 1730)
        # Getting the type of 'n' (line 1730)
        n_502634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 57), 'n', False)
        # Getting the type of 'x' (line 1730)
        x_502635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 60), 'x', False)
        # Processing the call keyword arguments (line 1730)
        kwargs_502636 = {}
        # Getting the type of 'eval_chebys' (line 1730)
        eval_chebys_502633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 45), 'eval_chebys', False)
        # Calling eval_chebys(args, kwargs) (line 1730)
        eval_chebys_call_result_502637 = invoke(stypy.reporting.localization.Localization(__file__, 1730, 45), eval_chebys_502633, *[n_502634, x_502635], **kwargs_502636)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1730, 35), 'stypy_return_type', eval_chebys_call_result_502637)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_286' in the type store
        # Getting the type of 'stypy_return_type' (line 1730)
        stypy_return_type_502638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 35), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_502638)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_286'
        return stypy_return_type_502638

    # Assigning a type to the variable '_stypy_temp_lambda_286' (line 1730)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1730, 35), '_stypy_temp_lambda_286', _stypy_temp_lambda_286)
    # Getting the type of '_stypy_temp_lambda_286' (line 1730)
    _stypy_temp_lambda_286_502639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 35), '_stypy_temp_lambda_286')
    # Getting the type of 'p' (line 1730)
    p_502640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 8), 'p')
    # Obtaining the member '__dict__' of a type (line 1730)
    dict___502641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1730, 8), p_502640, '__dict__')
    str_502642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1730, 19), 'str', '_eval_func')
    # Storing an element on a container (line 1730)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1730, 8), dict___502641, (str_502642, _stypy_temp_lambda_286_502639))
    # SSA join for if statement (line 1727)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'p' (line 1731)
    p_502643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 11), 'p')
    # Assigning a type to the variable 'stypy_return_type' (line 1731)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1731, 4), 'stypy_return_type', p_502643)
    
    # ################# End of 'chebys(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'chebys' in the type store
    # Getting the type of 'stypy_return_type' (line 1678)
    stypy_return_type_502644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_502644)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'chebys'
    return stypy_return_type_502644

# Assigning a type to the variable 'chebys' (line 1678)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1678, 0), 'chebys', chebys)

@norecursion
def roots_sh_chebyt(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1736)
    False_502645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 26), 'False')
    defaults = [False_502645]
    # Create a new context for function 'roots_sh_chebyt'
    module_type_store = module_type_store.open_function_context('roots_sh_chebyt', 1736, 0, False)
    
    # Passed parameters checking function
    roots_sh_chebyt.stypy_localization = localization
    roots_sh_chebyt.stypy_type_of_self = None
    roots_sh_chebyt.stypy_type_store = module_type_store
    roots_sh_chebyt.stypy_function_name = 'roots_sh_chebyt'
    roots_sh_chebyt.stypy_param_names_list = ['n', 'mu']
    roots_sh_chebyt.stypy_varargs_param_name = None
    roots_sh_chebyt.stypy_kwargs_param_name = None
    roots_sh_chebyt.stypy_call_defaults = defaults
    roots_sh_chebyt.stypy_call_varargs = varargs
    roots_sh_chebyt.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'roots_sh_chebyt', ['n', 'mu'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'roots_sh_chebyt', localization, ['n', 'mu'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'roots_sh_chebyt(...)' code ##################

    str_502646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1766, (-1)), 'str', 'Gauss-Chebyshev (first kind, shifted) quadrature.\n\n    Computes the sample points and weights for Gauss-Chebyshev quadrature.\n    The sample points are the roots of the n-th degree shifted Chebyshev\n    polynomial of the first kind, :math:`T_n(x)`.  These sample points and\n    weights correctly integrate polynomials of degree :math:`2n - 1` or less\n    over the interval :math:`[0, 1]` with weight function\n    :math:`f(x) = 1/\\sqrt{x - x^2}`.\n\n    Parameters\n    ----------\n    n : int\n        quadrature order\n    mu : bool, optional\n        If True, return the sum of the weights, optional.\n\n    Returns\n    -------\n    x : ndarray\n        Sample points\n    w : ndarray\n        Weights\n    mu : float\n        Sum of the weights\n\n    See Also\n    --------\n    scipy.integrate.quadrature\n    scipy.integrate.fixed_quad\n    ')
    
    # Assigning a Call to a Name (line 1767):
    
    # Assigning a Call to a Name (line 1767):
    
    # Call to roots_chebyt(...): (line 1767)
    # Processing the call arguments (line 1767)
    # Getting the type of 'n' (line 1767)
    n_502648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 22), 'n', False)
    # Getting the type of 'mu' (line 1767)
    mu_502649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 25), 'mu', False)
    # Processing the call keyword arguments (line 1767)
    kwargs_502650 = {}
    # Getting the type of 'roots_chebyt' (line 1767)
    roots_chebyt_502647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 9), 'roots_chebyt', False)
    # Calling roots_chebyt(args, kwargs) (line 1767)
    roots_chebyt_call_result_502651 = invoke(stypy.reporting.localization.Localization(__file__, 1767, 9), roots_chebyt_502647, *[n_502648, mu_502649], **kwargs_502650)
    
    # Assigning a type to the variable 'xw' (line 1767)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1767, 4), 'xw', roots_chebyt_call_result_502651)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1768)
    tuple_502652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1768, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1768)
    # Adding element type (line 1768)
    
    # Obtaining the type of the subscript
    int_502653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1768, 16), 'int')
    # Getting the type of 'xw' (line 1768)
    xw_502654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 13), 'xw')
    # Obtaining the member '__getitem__' of a type (line 1768)
    getitem___502655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1768, 13), xw_502654, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1768)
    subscript_call_result_502656 = invoke(stypy.reporting.localization.Localization(__file__, 1768, 13), getitem___502655, int_502653)
    
    int_502657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1768, 21), 'int')
    # Applying the binary operator '+' (line 1768)
    result_add_502658 = python_operator(stypy.reporting.localization.Localization(__file__, 1768, 13), '+', subscript_call_result_502656, int_502657)
    
    int_502659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1768, 26), 'int')
    # Applying the binary operator 'div' (line 1768)
    result_div_502660 = python_operator(stypy.reporting.localization.Localization(__file__, 1768, 12), 'div', result_add_502658, int_502659)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1768, 12), tuple_502652, result_div_502660)
    
    
    # Obtaining the type of the subscript
    int_502661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1768, 35), 'int')
    slice_502662 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1768, 32), int_502661, None, None)
    # Getting the type of 'xw' (line 1768)
    xw_502663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 32), 'xw')
    # Obtaining the member '__getitem__' of a type (line 1768)
    getitem___502664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1768, 32), xw_502663, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1768)
    subscript_call_result_502665 = invoke(stypy.reporting.localization.Localization(__file__, 1768, 32), getitem___502664, slice_502662)
    
    # Applying the binary operator '+' (line 1768)
    result_add_502666 = python_operator(stypy.reporting.localization.Localization(__file__, 1768, 11), '+', tuple_502652, subscript_call_result_502665)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1768)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1768, 4), 'stypy_return_type', result_add_502666)
    
    # ################# End of 'roots_sh_chebyt(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'roots_sh_chebyt' in the type store
    # Getting the type of 'stypy_return_type' (line 1736)
    stypy_return_type_502667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_502667)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'roots_sh_chebyt'
    return stypy_return_type_502667

# Assigning a type to the variable 'roots_sh_chebyt' (line 1736)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 0), 'roots_sh_chebyt', roots_sh_chebyt)

@norecursion
def sh_chebyt(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1771)
    False_502668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 23), 'False')
    defaults = [False_502668]
    # Create a new context for function 'sh_chebyt'
    module_type_store = module_type_store.open_function_context('sh_chebyt', 1771, 0, False)
    
    # Passed parameters checking function
    sh_chebyt.stypy_localization = localization
    sh_chebyt.stypy_type_of_self = None
    sh_chebyt.stypy_type_store = module_type_store
    sh_chebyt.stypy_function_name = 'sh_chebyt'
    sh_chebyt.stypy_param_names_list = ['n', 'monic']
    sh_chebyt.stypy_varargs_param_name = None
    sh_chebyt.stypy_kwargs_param_name = None
    sh_chebyt.stypy_call_defaults = defaults
    sh_chebyt.stypy_call_varargs = varargs
    sh_chebyt.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'sh_chebyt', ['n', 'monic'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'sh_chebyt', localization, ['n', 'monic'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'sh_chebyt(...)' code ##################

    str_502669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1795, (-1)), 'str', 'Shifted Chebyshev polynomial of the first kind.\n\n    Defined as :math:`T^*_n(x) = T_n(2x - 1)` for :math:`T_n` the nth\n    Chebyshev polynomial of the first kind.\n\n    Parameters\n    ----------\n    n : int\n        Degree of the polynomial.\n    monic : bool, optional\n        If `True`, scale the leading coefficient to be 1. Default is\n        `False`.\n\n    Returns\n    -------\n    T : orthopoly1d\n        Shifted Chebyshev polynomial of the first kind.\n\n    Notes\n    -----\n    The polynomials :math:`T^*_n` are orthogonal over :math:`[0, 1]`\n    with weight function :math:`(x - x^2)^{-1/2}`.\n\n    ')
    
    # Assigning a Call to a Name (line 1796):
    
    # Assigning a Call to a Name (line 1796):
    
    # Call to sh_jacobi(...): (line 1796)
    # Processing the call arguments (line 1796)
    # Getting the type of 'n' (line 1796)
    n_502671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 21), 'n', False)
    float_502672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1796, 24), 'float')
    float_502673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1796, 29), 'float')
    # Processing the call keyword arguments (line 1796)
    # Getting the type of 'monic' (line 1796)
    monic_502674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 40), 'monic', False)
    keyword_502675 = monic_502674
    kwargs_502676 = {'monic': keyword_502675}
    # Getting the type of 'sh_jacobi' (line 1796)
    sh_jacobi_502670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 11), 'sh_jacobi', False)
    # Calling sh_jacobi(args, kwargs) (line 1796)
    sh_jacobi_call_result_502677 = invoke(stypy.reporting.localization.Localization(__file__, 1796, 11), sh_jacobi_502670, *[n_502671, float_502672, float_502673], **kwargs_502676)
    
    # Assigning a type to the variable 'base' (line 1796)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1796, 4), 'base', sh_jacobi_call_result_502677)
    
    # Getting the type of 'monic' (line 1797)
    monic_502678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 7), 'monic')
    # Testing the type of an if condition (line 1797)
    if_condition_502679 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1797, 4), monic_502678)
    # Assigning a type to the variable 'if_condition_502679' (line 1797)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1797, 4), 'if_condition_502679', if_condition_502679)
    # SSA begins for if statement (line 1797)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'base' (line 1798)
    base_502680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 15), 'base')
    # Assigning a type to the variable 'stypy_return_type' (line 1798)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1798, 8), 'stypy_return_type', base_502680)
    # SSA join for if statement (line 1797)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 1799)
    n_502681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 7), 'n')
    int_502682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1799, 11), 'int')
    # Applying the binary operator '>' (line 1799)
    result_gt_502683 = python_operator(stypy.reporting.localization.Localization(__file__, 1799, 7), '>', n_502681, int_502682)
    
    # Testing the type of an if condition (line 1799)
    if_condition_502684 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1799, 4), result_gt_502683)
    # Assigning a type to the variable 'if_condition_502684' (line 1799)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1799, 4), 'if_condition_502684', if_condition_502684)
    # SSA begins for if statement (line 1799)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1800):
    
    # Assigning a BinOp to a Name (line 1800):
    int_502685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1800, 17), 'int')
    # Getting the type of 'n' (line 1800)
    n_502686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 20), 'n')
    # Applying the binary operator '**' (line 1800)
    result_pow_502687 = python_operator(stypy.reporting.localization.Localization(__file__, 1800, 17), '**', int_502685, n_502686)
    
    float_502688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1800, 24), 'float')
    # Applying the binary operator 'div' (line 1800)
    result_div_502689 = python_operator(stypy.reporting.localization.Localization(__file__, 1800, 17), 'div', result_pow_502687, float_502688)
    
    # Assigning a type to the variable 'factor' (line 1800)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1800, 8), 'factor', result_div_502689)
    # SSA branch for the else part of an if statement (line 1799)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Name (line 1802):
    
    # Assigning a Num to a Name (line 1802):
    float_502690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1802, 17), 'float')
    # Assigning a type to the variable 'factor' (line 1802)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1802, 8), 'factor', float_502690)
    # SSA join for if statement (line 1799)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to _scale(...): (line 1803)
    # Processing the call arguments (line 1803)
    # Getting the type of 'factor' (line 1803)
    factor_502693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1803, 16), 'factor', False)
    # Processing the call keyword arguments (line 1803)
    kwargs_502694 = {}
    # Getting the type of 'base' (line 1803)
    base_502691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1803, 4), 'base', False)
    # Obtaining the member '_scale' of a type (line 1803)
    _scale_502692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1803, 4), base_502691, '_scale')
    # Calling _scale(args, kwargs) (line 1803)
    _scale_call_result_502695 = invoke(stypy.reporting.localization.Localization(__file__, 1803, 4), _scale_502692, *[factor_502693], **kwargs_502694)
    
    # Getting the type of 'base' (line 1804)
    base_502696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 11), 'base')
    # Assigning a type to the variable 'stypy_return_type' (line 1804)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1804, 4), 'stypy_return_type', base_502696)
    
    # ################# End of 'sh_chebyt(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'sh_chebyt' in the type store
    # Getting the type of 'stypy_return_type' (line 1771)
    stypy_return_type_502697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_502697)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'sh_chebyt'
    return stypy_return_type_502697

# Assigning a type to the variable 'sh_chebyt' (line 1771)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1771, 0), 'sh_chebyt', sh_chebyt)

@norecursion
def roots_sh_chebyu(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1808)
    False_502698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 26), 'False')
    defaults = [False_502698]
    # Create a new context for function 'roots_sh_chebyu'
    module_type_store = module_type_store.open_function_context('roots_sh_chebyu', 1808, 0, False)
    
    # Passed parameters checking function
    roots_sh_chebyu.stypy_localization = localization
    roots_sh_chebyu.stypy_type_of_self = None
    roots_sh_chebyu.stypy_type_store = module_type_store
    roots_sh_chebyu.stypy_function_name = 'roots_sh_chebyu'
    roots_sh_chebyu.stypy_param_names_list = ['n', 'mu']
    roots_sh_chebyu.stypy_varargs_param_name = None
    roots_sh_chebyu.stypy_kwargs_param_name = None
    roots_sh_chebyu.stypy_call_defaults = defaults
    roots_sh_chebyu.stypy_call_varargs = varargs
    roots_sh_chebyu.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'roots_sh_chebyu', ['n', 'mu'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'roots_sh_chebyu', localization, ['n', 'mu'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'roots_sh_chebyu(...)' code ##################

    str_502699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1838, (-1)), 'str', 'Gauss-Chebyshev (second kind, shifted) quadrature.\n\n    Computes the sample points and weights for Gauss-Chebyshev quadrature.\n    The sample points are the roots of the n-th degree shifted Chebyshev\n    polynomial of the second kind, :math:`U_n(x)`.  These sample points and\n    weights correctly integrate polynomials of degree :math:`2n - 1` or less\n    over the interval :math:`[0, 1]` with weight function\n    :math:`f(x) = \\sqrt{x - x^2}`.\n\n    Parameters\n    ----------\n    n : int\n        quadrature order\n    mu : bool, optional\n        If True, return the sum of the weights, optional.\n\n    Returns\n    -------\n    x : ndarray\n        Sample points\n    w : ndarray\n        Weights\n    mu : float\n        Sum of the weights\n\n    See Also\n    --------\n    scipy.integrate.quadrature\n    scipy.integrate.fixed_quad\n    ')
    
    # Assigning a Call to a Tuple (line 1839):
    
    # Assigning a Subscript to a Name (line 1839):
    
    # Obtaining the type of the subscript
    int_502700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1839, 4), 'int')
    
    # Call to roots_chebyu(...): (line 1839)
    # Processing the call arguments (line 1839)
    # Getting the type of 'n' (line 1839)
    n_502702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 27), 'n', False)
    # Getting the type of 'True' (line 1839)
    True_502703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 30), 'True', False)
    # Processing the call keyword arguments (line 1839)
    kwargs_502704 = {}
    # Getting the type of 'roots_chebyu' (line 1839)
    roots_chebyu_502701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 14), 'roots_chebyu', False)
    # Calling roots_chebyu(args, kwargs) (line 1839)
    roots_chebyu_call_result_502705 = invoke(stypy.reporting.localization.Localization(__file__, 1839, 14), roots_chebyu_502701, *[n_502702, True_502703], **kwargs_502704)
    
    # Obtaining the member '__getitem__' of a type (line 1839)
    getitem___502706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1839, 4), roots_chebyu_call_result_502705, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1839)
    subscript_call_result_502707 = invoke(stypy.reporting.localization.Localization(__file__, 1839, 4), getitem___502706, int_502700)
    
    # Assigning a type to the variable 'tuple_var_assignment_498453' (line 1839)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1839, 4), 'tuple_var_assignment_498453', subscript_call_result_502707)
    
    # Assigning a Subscript to a Name (line 1839):
    
    # Obtaining the type of the subscript
    int_502708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1839, 4), 'int')
    
    # Call to roots_chebyu(...): (line 1839)
    # Processing the call arguments (line 1839)
    # Getting the type of 'n' (line 1839)
    n_502710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 27), 'n', False)
    # Getting the type of 'True' (line 1839)
    True_502711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 30), 'True', False)
    # Processing the call keyword arguments (line 1839)
    kwargs_502712 = {}
    # Getting the type of 'roots_chebyu' (line 1839)
    roots_chebyu_502709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 14), 'roots_chebyu', False)
    # Calling roots_chebyu(args, kwargs) (line 1839)
    roots_chebyu_call_result_502713 = invoke(stypy.reporting.localization.Localization(__file__, 1839, 14), roots_chebyu_502709, *[n_502710, True_502711], **kwargs_502712)
    
    # Obtaining the member '__getitem__' of a type (line 1839)
    getitem___502714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1839, 4), roots_chebyu_call_result_502713, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1839)
    subscript_call_result_502715 = invoke(stypy.reporting.localization.Localization(__file__, 1839, 4), getitem___502714, int_502708)
    
    # Assigning a type to the variable 'tuple_var_assignment_498454' (line 1839)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1839, 4), 'tuple_var_assignment_498454', subscript_call_result_502715)
    
    # Assigning a Subscript to a Name (line 1839):
    
    # Obtaining the type of the subscript
    int_502716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1839, 4), 'int')
    
    # Call to roots_chebyu(...): (line 1839)
    # Processing the call arguments (line 1839)
    # Getting the type of 'n' (line 1839)
    n_502718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 27), 'n', False)
    # Getting the type of 'True' (line 1839)
    True_502719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 30), 'True', False)
    # Processing the call keyword arguments (line 1839)
    kwargs_502720 = {}
    # Getting the type of 'roots_chebyu' (line 1839)
    roots_chebyu_502717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 14), 'roots_chebyu', False)
    # Calling roots_chebyu(args, kwargs) (line 1839)
    roots_chebyu_call_result_502721 = invoke(stypy.reporting.localization.Localization(__file__, 1839, 14), roots_chebyu_502717, *[n_502718, True_502719], **kwargs_502720)
    
    # Obtaining the member '__getitem__' of a type (line 1839)
    getitem___502722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1839, 4), roots_chebyu_call_result_502721, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1839)
    subscript_call_result_502723 = invoke(stypy.reporting.localization.Localization(__file__, 1839, 4), getitem___502722, int_502716)
    
    # Assigning a type to the variable 'tuple_var_assignment_498455' (line 1839)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1839, 4), 'tuple_var_assignment_498455', subscript_call_result_502723)
    
    # Assigning a Name to a Name (line 1839):
    # Getting the type of 'tuple_var_assignment_498453' (line 1839)
    tuple_var_assignment_498453_502724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 4), 'tuple_var_assignment_498453')
    # Assigning a type to the variable 'x' (line 1839)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1839, 4), 'x', tuple_var_assignment_498453_502724)
    
    # Assigning a Name to a Name (line 1839):
    # Getting the type of 'tuple_var_assignment_498454' (line 1839)
    tuple_var_assignment_498454_502725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 4), 'tuple_var_assignment_498454')
    # Assigning a type to the variable 'w' (line 1839)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1839, 7), 'w', tuple_var_assignment_498454_502725)
    
    # Assigning a Name to a Name (line 1839):
    # Getting the type of 'tuple_var_assignment_498455' (line 1839)
    tuple_var_assignment_498455_502726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 4), 'tuple_var_assignment_498455')
    # Assigning a type to the variable 'm' (line 1839)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1839, 10), 'm', tuple_var_assignment_498455_502726)
    
    # Assigning a BinOp to a Name (line 1840):
    
    # Assigning a BinOp to a Name (line 1840):
    # Getting the type of 'x' (line 1840)
    x_502727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1840, 9), 'x')
    int_502728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1840, 13), 'int')
    # Applying the binary operator '+' (line 1840)
    result_add_502729 = python_operator(stypy.reporting.localization.Localization(__file__, 1840, 9), '+', x_502727, int_502728)
    
    int_502730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1840, 18), 'int')
    # Applying the binary operator 'div' (line 1840)
    result_div_502731 = python_operator(stypy.reporting.localization.Localization(__file__, 1840, 8), 'div', result_add_502729, int_502730)
    
    # Assigning a type to the variable 'x' (line 1840)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1840, 4), 'x', result_div_502731)
    
    # Assigning a Call to a Name (line 1841):
    
    # Assigning a Call to a Name (line 1841):
    
    # Call to beta(...): (line 1841)
    # Processing the call arguments (line 1841)
    float_502734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1841, 23), 'float')
    float_502735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1841, 28), 'float')
    # Processing the call keyword arguments (line 1841)
    kwargs_502736 = {}
    # Getting the type of 'cephes' (line 1841)
    cephes_502732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 11), 'cephes', False)
    # Obtaining the member 'beta' of a type (line 1841)
    beta_502733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1841, 11), cephes_502732, 'beta')
    # Calling beta(args, kwargs) (line 1841)
    beta_call_result_502737 = invoke(stypy.reporting.localization.Localization(__file__, 1841, 11), beta_502733, *[float_502734, float_502735], **kwargs_502736)
    
    # Assigning a type to the variable 'm_us' (line 1841)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1841, 4), 'm_us', beta_call_result_502737)
    
    # Getting the type of 'w' (line 1842)
    w_502738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 4), 'w')
    # Getting the type of 'm_us' (line 1842)
    m_us_502739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 9), 'm_us')
    # Getting the type of 'm' (line 1842)
    m_502740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 16), 'm')
    # Applying the binary operator 'div' (line 1842)
    result_div_502741 = python_operator(stypy.reporting.localization.Localization(__file__, 1842, 9), 'div', m_us_502739, m_502740)
    
    # Applying the binary operator '*=' (line 1842)
    result_imul_502742 = python_operator(stypy.reporting.localization.Localization(__file__, 1842, 4), '*=', w_502738, result_div_502741)
    # Assigning a type to the variable 'w' (line 1842)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1842, 4), 'w', result_imul_502742)
    
    
    # Getting the type of 'mu' (line 1843)
    mu_502743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 7), 'mu')
    # Testing the type of an if condition (line 1843)
    if_condition_502744 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1843, 4), mu_502743)
    # Assigning a type to the variable 'if_condition_502744' (line 1843)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1843, 4), 'if_condition_502744', if_condition_502744)
    # SSA begins for if statement (line 1843)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1844)
    tuple_502745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1844, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1844)
    # Adding element type (line 1844)
    # Getting the type of 'x' (line 1844)
    x_502746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 15), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1844, 15), tuple_502745, x_502746)
    # Adding element type (line 1844)
    # Getting the type of 'w' (line 1844)
    w_502747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 18), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1844, 15), tuple_502745, w_502747)
    # Adding element type (line 1844)
    # Getting the type of 'm_us' (line 1844)
    m_us_502748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 21), 'm_us')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1844, 15), tuple_502745, m_us_502748)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1844)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1844, 8), 'stypy_return_type', tuple_502745)
    # SSA branch for the else part of an if statement (line 1843)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1846)
    tuple_502749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1846, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1846)
    # Adding element type (line 1846)
    # Getting the type of 'x' (line 1846)
    x_502750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 15), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1846, 15), tuple_502749, x_502750)
    # Adding element type (line 1846)
    # Getting the type of 'w' (line 1846)
    w_502751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 18), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1846, 15), tuple_502749, w_502751)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1846)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1846, 8), 'stypy_return_type', tuple_502749)
    # SSA join for if statement (line 1843)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'roots_sh_chebyu(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'roots_sh_chebyu' in the type store
    # Getting the type of 'stypy_return_type' (line 1808)
    stypy_return_type_502752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_502752)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'roots_sh_chebyu'
    return stypy_return_type_502752

# Assigning a type to the variable 'roots_sh_chebyu' (line 1808)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1808, 0), 'roots_sh_chebyu', roots_sh_chebyu)

@norecursion
def sh_chebyu(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1849)
    False_502753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 23), 'False')
    defaults = [False_502753]
    # Create a new context for function 'sh_chebyu'
    module_type_store = module_type_store.open_function_context('sh_chebyu', 1849, 0, False)
    
    # Passed parameters checking function
    sh_chebyu.stypy_localization = localization
    sh_chebyu.stypy_type_of_self = None
    sh_chebyu.stypy_type_store = module_type_store
    sh_chebyu.stypy_function_name = 'sh_chebyu'
    sh_chebyu.stypy_param_names_list = ['n', 'monic']
    sh_chebyu.stypy_varargs_param_name = None
    sh_chebyu.stypy_kwargs_param_name = None
    sh_chebyu.stypy_call_defaults = defaults
    sh_chebyu.stypy_call_varargs = varargs
    sh_chebyu.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'sh_chebyu', ['n', 'monic'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'sh_chebyu', localization, ['n', 'monic'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'sh_chebyu(...)' code ##################

    str_502754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1873, (-1)), 'str', 'Shifted Chebyshev polynomial of the second kind.\n\n    Defined as :math:`U^*_n(x) = U_n(2x - 1)` for :math:`U_n` the nth\n    Chebyshev polynomial of the second kind.\n\n    Parameters\n    ----------\n    n : int\n        Degree of the polynomial.\n    monic : bool, optional\n        If `True`, scale the leading coefficient to be 1. Default is\n        `False`.\n\n    Returns\n    -------\n    U : orthopoly1d\n        Shifted Chebyshev polynomial of the second kind.\n\n    Notes\n    -----\n    The polynomials :math:`U^*_n` are orthogonal over :math:`[0, 1]`\n    with weight function :math:`(x - x^2)^{1/2}`.\n\n    ')
    
    # Assigning a Call to a Name (line 1874):
    
    # Assigning a Call to a Name (line 1874):
    
    # Call to sh_jacobi(...): (line 1874)
    # Processing the call arguments (line 1874)
    # Getting the type of 'n' (line 1874)
    n_502756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 21), 'n', False)
    float_502757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1874, 24), 'float')
    float_502758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1874, 29), 'float')
    # Processing the call keyword arguments (line 1874)
    # Getting the type of 'monic' (line 1874)
    monic_502759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 40), 'monic', False)
    keyword_502760 = monic_502759
    kwargs_502761 = {'monic': keyword_502760}
    # Getting the type of 'sh_jacobi' (line 1874)
    sh_jacobi_502755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 11), 'sh_jacobi', False)
    # Calling sh_jacobi(args, kwargs) (line 1874)
    sh_jacobi_call_result_502762 = invoke(stypy.reporting.localization.Localization(__file__, 1874, 11), sh_jacobi_502755, *[n_502756, float_502757, float_502758], **kwargs_502761)
    
    # Assigning a type to the variable 'base' (line 1874)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1874, 4), 'base', sh_jacobi_call_result_502762)
    
    # Getting the type of 'monic' (line 1875)
    monic_502763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1875, 7), 'monic')
    # Testing the type of an if condition (line 1875)
    if_condition_502764 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1875, 4), monic_502763)
    # Assigning a type to the variable 'if_condition_502764' (line 1875)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1875, 4), 'if_condition_502764', if_condition_502764)
    # SSA begins for if statement (line 1875)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'base' (line 1876)
    base_502765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 15), 'base')
    # Assigning a type to the variable 'stypy_return_type' (line 1876)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1876, 8), 'stypy_return_type', base_502765)
    # SSA join for if statement (line 1875)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1877):
    
    # Assigning a BinOp to a Name (line 1877):
    int_502766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1877, 13), 'int')
    # Getting the type of 'n' (line 1877)
    n_502767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 16), 'n')
    # Applying the binary operator '**' (line 1877)
    result_pow_502768 = python_operator(stypy.reporting.localization.Localization(__file__, 1877, 13), '**', int_502766, n_502767)
    
    # Assigning a type to the variable 'factor' (line 1877)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1877, 4), 'factor', result_pow_502768)
    
    # Call to _scale(...): (line 1878)
    # Processing the call arguments (line 1878)
    # Getting the type of 'factor' (line 1878)
    factor_502771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 16), 'factor', False)
    # Processing the call keyword arguments (line 1878)
    kwargs_502772 = {}
    # Getting the type of 'base' (line 1878)
    base_502769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 4), 'base', False)
    # Obtaining the member '_scale' of a type (line 1878)
    _scale_502770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1878, 4), base_502769, '_scale')
    # Calling _scale(args, kwargs) (line 1878)
    _scale_call_result_502773 = invoke(stypy.reporting.localization.Localization(__file__, 1878, 4), _scale_502770, *[factor_502771], **kwargs_502772)
    
    # Getting the type of 'base' (line 1879)
    base_502774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 11), 'base')
    # Assigning a type to the variable 'stypy_return_type' (line 1879)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1879, 4), 'stypy_return_type', base_502774)
    
    # ################# End of 'sh_chebyu(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'sh_chebyu' in the type store
    # Getting the type of 'stypy_return_type' (line 1849)
    stypy_return_type_502775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_502775)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'sh_chebyu'
    return stypy_return_type_502775

# Assigning a type to the variable 'sh_chebyu' (line 1849)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1849, 0), 'sh_chebyu', sh_chebyu)

@norecursion
def roots_legendre(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1884)
    False_502776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 25), 'False')
    defaults = [False_502776]
    # Create a new context for function 'roots_legendre'
    module_type_store = module_type_store.open_function_context('roots_legendre', 1884, 0, False)
    
    # Passed parameters checking function
    roots_legendre.stypy_localization = localization
    roots_legendre.stypy_type_of_self = None
    roots_legendre.stypy_type_store = module_type_store
    roots_legendre.stypy_function_name = 'roots_legendre'
    roots_legendre.stypy_param_names_list = ['n', 'mu']
    roots_legendre.stypy_varargs_param_name = None
    roots_legendre.stypy_kwargs_param_name = None
    roots_legendre.stypy_call_defaults = defaults
    roots_legendre.stypy_call_varargs = varargs
    roots_legendre.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'roots_legendre', ['n', 'mu'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'roots_legendre', localization, ['n', 'mu'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'roots_legendre(...)' code ##################

    str_502777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1914, (-1)), 'str', 'Gauss-Legendre quadrature.\n\n    Computes the sample points and weights for Gauss-Legendre quadrature.\n    The sample points are the roots of the n-th degree Legendre polynomial\n    :math:`P_n(x)`.  These sample points and weights correctly integrate\n    polynomials of degree :math:`2n - 1` or less over the interval\n    :math:`[-1, 1]` with weight function :math:`f(x) = 1.0`.\n\n    Parameters\n    ----------\n    n : int\n        quadrature order\n    mu : bool, optional\n        If True, return the sum of the weights, optional.\n\n    Returns\n    -------\n    x : ndarray\n        Sample points\n    w : ndarray\n        Weights\n    mu : float\n        Sum of the weights\n\n    See Also\n    --------\n    scipy.integrate.quadrature\n    scipy.integrate.fixed_quad\n    numpy.polynomial.legendre.leggauss\n    ')
    
    # Assigning a Call to a Name (line 1915):
    
    # Assigning a Call to a Name (line 1915):
    
    # Call to int(...): (line 1915)
    # Processing the call arguments (line 1915)
    # Getting the type of 'n' (line 1915)
    n_502779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1915, 12), 'n', False)
    # Processing the call keyword arguments (line 1915)
    kwargs_502780 = {}
    # Getting the type of 'int' (line 1915)
    int_502778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1915, 8), 'int', False)
    # Calling int(args, kwargs) (line 1915)
    int_call_result_502781 = invoke(stypy.reporting.localization.Localization(__file__, 1915, 8), int_502778, *[n_502779], **kwargs_502780)
    
    # Assigning a type to the variable 'm' (line 1915)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1915, 4), 'm', int_call_result_502781)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'n' (line 1916)
    n_502782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 7), 'n')
    int_502783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1916, 11), 'int')
    # Applying the binary operator '<' (line 1916)
    result_lt_502784 = python_operator(stypy.reporting.localization.Localization(__file__, 1916, 7), '<', n_502782, int_502783)
    
    
    # Getting the type of 'n' (line 1916)
    n_502785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 16), 'n')
    # Getting the type of 'm' (line 1916)
    m_502786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 21), 'm')
    # Applying the binary operator '!=' (line 1916)
    result_ne_502787 = python_operator(stypy.reporting.localization.Localization(__file__, 1916, 16), '!=', n_502785, m_502786)
    
    # Applying the binary operator 'or' (line 1916)
    result_or_keyword_502788 = python_operator(stypy.reporting.localization.Localization(__file__, 1916, 7), 'or', result_lt_502784, result_ne_502787)
    
    # Testing the type of an if condition (line 1916)
    if_condition_502789 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1916, 4), result_or_keyword_502788)
    # Assigning a type to the variable 'if_condition_502789' (line 1916)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1916, 4), 'if_condition_502789', if_condition_502789)
    # SSA begins for if statement (line 1916)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1917)
    # Processing the call arguments (line 1917)
    str_502791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1917, 25), 'str', 'n must be a positive integer.')
    # Processing the call keyword arguments (line 1917)
    kwargs_502792 = {}
    # Getting the type of 'ValueError' (line 1917)
    ValueError_502790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1917, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1917)
    ValueError_call_result_502793 = invoke(stypy.reporting.localization.Localization(__file__, 1917, 14), ValueError_502790, *[str_502791], **kwargs_502792)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1917, 8), ValueError_call_result_502793, 'raise parameter', BaseException)
    # SSA join for if statement (line 1916)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 1919):
    
    # Assigning a Num to a Name (line 1919):
    float_502794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1919, 10), 'float')
    # Assigning a type to the variable 'mu0' (line 1919)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1919, 4), 'mu0', float_502794)
    
    # Assigning a Lambda to a Name (line 1920):
    
    # Assigning a Lambda to a Name (line 1920):

    @norecursion
    def _stypy_temp_lambda_287(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_287'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_287', 1920, 14, True)
        # Passed parameters checking function
        _stypy_temp_lambda_287.stypy_localization = localization
        _stypy_temp_lambda_287.stypy_type_of_self = None
        _stypy_temp_lambda_287.stypy_type_store = module_type_store
        _stypy_temp_lambda_287.stypy_function_name = '_stypy_temp_lambda_287'
        _stypy_temp_lambda_287.stypy_param_names_list = ['k']
        _stypy_temp_lambda_287.stypy_varargs_param_name = None
        _stypy_temp_lambda_287.stypy_kwargs_param_name = None
        _stypy_temp_lambda_287.stypy_call_defaults = defaults
        _stypy_temp_lambda_287.stypy_call_varargs = varargs
        _stypy_temp_lambda_287.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_287', ['k'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_287', ['k'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        float_502795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1920, 24), 'float')
        # Getting the type of 'k' (line 1920)
        k_502796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 30), 'k')
        # Applying the binary operator '*' (line 1920)
        result_mul_502797 = python_operator(stypy.reporting.localization.Localization(__file__, 1920, 24), '*', float_502795, k_502796)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1920, 14), 'stypy_return_type', result_mul_502797)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_287' in the type store
        # Getting the type of 'stypy_return_type' (line 1920)
        stypy_return_type_502798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 14), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_502798)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_287'
        return stypy_return_type_502798

    # Assigning a type to the variable '_stypy_temp_lambda_287' (line 1920)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1920, 14), '_stypy_temp_lambda_287', _stypy_temp_lambda_287)
    # Getting the type of '_stypy_temp_lambda_287' (line 1920)
    _stypy_temp_lambda_287_502799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 14), '_stypy_temp_lambda_287')
    # Assigning a type to the variable 'an_func' (line 1920)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1920, 4), 'an_func', _stypy_temp_lambda_287_502799)
    
    # Assigning a Lambda to a Name (line 1921):
    
    # Assigning a Lambda to a Name (line 1921):

    @norecursion
    def _stypy_temp_lambda_288(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_288'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_288', 1921, 14, True)
        # Passed parameters checking function
        _stypy_temp_lambda_288.stypy_localization = localization
        _stypy_temp_lambda_288.stypy_type_of_self = None
        _stypy_temp_lambda_288.stypy_type_store = module_type_store
        _stypy_temp_lambda_288.stypy_function_name = '_stypy_temp_lambda_288'
        _stypy_temp_lambda_288.stypy_param_names_list = ['k']
        _stypy_temp_lambda_288.stypy_varargs_param_name = None
        _stypy_temp_lambda_288.stypy_kwargs_param_name = None
        _stypy_temp_lambda_288.stypy_call_defaults = defaults
        _stypy_temp_lambda_288.stypy_call_varargs = varargs
        _stypy_temp_lambda_288.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_288', ['k'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_288', ['k'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        # Getting the type of 'k' (line 1921)
        k_502800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 24), 'k')
        
        # Call to sqrt(...): (line 1921)
        # Processing the call arguments (line 1921)
        float_502803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1921, 36), 'float')
        int_502804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1921, 43), 'int')
        # Getting the type of 'k' (line 1921)
        k_502805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 47), 'k', False)
        # Applying the binary operator '*' (line 1921)
        result_mul_502806 = python_operator(stypy.reporting.localization.Localization(__file__, 1921, 43), '*', int_502804, k_502805)
        
        # Getting the type of 'k' (line 1921)
        k_502807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 51), 'k', False)
        # Applying the binary operator '*' (line 1921)
        result_mul_502808 = python_operator(stypy.reporting.localization.Localization(__file__, 1921, 49), '*', result_mul_502806, k_502807)
        
        int_502809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1921, 55), 'int')
        # Applying the binary operator '-' (line 1921)
        result_sub_502810 = python_operator(stypy.reporting.localization.Localization(__file__, 1921, 43), '-', result_mul_502808, int_502809)
        
        # Applying the binary operator 'div' (line 1921)
        result_div_502811 = python_operator(stypy.reporting.localization.Localization(__file__, 1921, 36), 'div', float_502803, result_sub_502810)
        
        # Processing the call keyword arguments (line 1921)
        kwargs_502812 = {}
        # Getting the type of 'np' (line 1921)
        np_502801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 28), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 1921)
        sqrt_502802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1921, 28), np_502801, 'sqrt')
        # Calling sqrt(args, kwargs) (line 1921)
        sqrt_call_result_502813 = invoke(stypy.reporting.localization.Localization(__file__, 1921, 28), sqrt_502802, *[result_div_502811], **kwargs_502812)
        
        # Applying the binary operator '*' (line 1921)
        result_mul_502814 = python_operator(stypy.reporting.localization.Localization(__file__, 1921, 24), '*', k_502800, sqrt_call_result_502813)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1921)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1921, 14), 'stypy_return_type', result_mul_502814)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_288' in the type store
        # Getting the type of 'stypy_return_type' (line 1921)
        stypy_return_type_502815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 14), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_502815)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_288'
        return stypy_return_type_502815

    # Assigning a type to the variable '_stypy_temp_lambda_288' (line 1921)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1921, 14), '_stypy_temp_lambda_288', _stypy_temp_lambda_288)
    # Getting the type of '_stypy_temp_lambda_288' (line 1921)
    _stypy_temp_lambda_288_502816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 14), '_stypy_temp_lambda_288')
    # Assigning a type to the variable 'bn_func' (line 1921)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1921, 4), 'bn_func', _stypy_temp_lambda_288_502816)
    
    # Assigning a Attribute to a Name (line 1922):
    
    # Assigning a Attribute to a Name (line 1922):
    # Getting the type of 'cephes' (line 1922)
    cephes_502817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 8), 'cephes')
    # Obtaining the member 'eval_legendre' of a type (line 1922)
    eval_legendre_502818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1922, 8), cephes_502817, 'eval_legendre')
    # Assigning a type to the variable 'f' (line 1922)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1922, 4), 'f', eval_legendre_502818)
    
    # Assigning a Lambda to a Name (line 1923):
    
    # Assigning a Lambda to a Name (line 1923):

    @norecursion
    def _stypy_temp_lambda_289(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_289'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_289', 1923, 9, True)
        # Passed parameters checking function
        _stypy_temp_lambda_289.stypy_localization = localization
        _stypy_temp_lambda_289.stypy_type_of_self = None
        _stypy_temp_lambda_289.stypy_type_store = module_type_store
        _stypy_temp_lambda_289.stypy_function_name = '_stypy_temp_lambda_289'
        _stypy_temp_lambda_289.stypy_param_names_list = ['n', 'x']
        _stypy_temp_lambda_289.stypy_varargs_param_name = None
        _stypy_temp_lambda_289.stypy_kwargs_param_name = None
        _stypy_temp_lambda_289.stypy_call_defaults = defaults
        _stypy_temp_lambda_289.stypy_call_varargs = varargs
        _stypy_temp_lambda_289.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_289', ['n', 'x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_289', ['n', 'x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Getting the type of 'n' (line 1923)
        n_502819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 24), 'n')
        # Applying the 'usub' unary operator (line 1923)
        result___neg___502820 = python_operator(stypy.reporting.localization.Localization(__file__, 1923, 23), 'usub', n_502819)
        
        # Getting the type of 'x' (line 1923)
        x_502821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 26), 'x')
        # Applying the binary operator '*' (line 1923)
        result_mul_502822 = python_operator(stypy.reporting.localization.Localization(__file__, 1923, 23), '*', result___neg___502820, x_502821)
        
        
        # Call to eval_legendre(...): (line 1923)
        # Processing the call arguments (line 1923)
        # Getting the type of 'n' (line 1923)
        n_502825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 49), 'n', False)
        # Getting the type of 'x' (line 1923)
        x_502826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 52), 'x', False)
        # Processing the call keyword arguments (line 1923)
        kwargs_502827 = {}
        # Getting the type of 'cephes' (line 1923)
        cephes_502823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 28), 'cephes', False)
        # Obtaining the member 'eval_legendre' of a type (line 1923)
        eval_legendre_502824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1923, 28), cephes_502823, 'eval_legendre')
        # Calling eval_legendre(args, kwargs) (line 1923)
        eval_legendre_call_result_502828 = invoke(stypy.reporting.localization.Localization(__file__, 1923, 28), eval_legendre_502824, *[n_502825, x_502826], **kwargs_502827)
        
        # Applying the binary operator '*' (line 1923)
        result_mul_502829 = python_operator(stypy.reporting.localization.Localization(__file__, 1923, 27), '*', result_mul_502822, eval_legendre_call_result_502828)
        
        # Getting the type of 'n' (line 1924)
        n_502830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 23), 'n')
        
        # Call to eval_legendre(...): (line 1924)
        # Processing the call arguments (line 1924)
        # Getting the type of 'n' (line 1924)
        n_502833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 46), 'n', False)
        int_502834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1924, 48), 'int')
        # Applying the binary operator '-' (line 1924)
        result_sub_502835 = python_operator(stypy.reporting.localization.Localization(__file__, 1924, 46), '-', n_502833, int_502834)
        
        # Getting the type of 'x' (line 1924)
        x_502836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 51), 'x', False)
        # Processing the call keyword arguments (line 1924)
        kwargs_502837 = {}
        # Getting the type of 'cephes' (line 1924)
        cephes_502831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 25), 'cephes', False)
        # Obtaining the member 'eval_legendre' of a type (line 1924)
        eval_legendre_502832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1924, 25), cephes_502831, 'eval_legendre')
        # Calling eval_legendre(args, kwargs) (line 1924)
        eval_legendre_call_result_502838 = invoke(stypy.reporting.localization.Localization(__file__, 1924, 25), eval_legendre_502832, *[result_sub_502835, x_502836], **kwargs_502837)
        
        # Applying the binary operator '*' (line 1924)
        result_mul_502839 = python_operator(stypy.reporting.localization.Localization(__file__, 1924, 23), '*', n_502830, eval_legendre_call_result_502838)
        
        # Applying the binary operator '+' (line 1923)
        result_add_502840 = python_operator(stypy.reporting.localization.Localization(__file__, 1923, 23), '+', result_mul_502829, result_mul_502839)
        
        int_502841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1924, 56), 'int')
        # Getting the type of 'x' (line 1924)
        x_502842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 58), 'x')
        int_502843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1924, 61), 'int')
        # Applying the binary operator '**' (line 1924)
        result_pow_502844 = python_operator(stypy.reporting.localization.Localization(__file__, 1924, 58), '**', x_502842, int_502843)
        
        # Applying the binary operator '-' (line 1924)
        result_sub_502845 = python_operator(stypy.reporting.localization.Localization(__file__, 1924, 56), '-', int_502841, result_pow_502844)
        
        # Applying the binary operator 'div' (line 1923)
        result_div_502846 = python_operator(stypy.reporting.localization.Localization(__file__, 1923, 22), 'div', result_add_502840, result_sub_502845)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1923)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1923, 9), 'stypy_return_type', result_div_502846)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_289' in the type store
        # Getting the type of 'stypy_return_type' (line 1923)
        stypy_return_type_502847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 9), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_502847)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_289'
        return stypy_return_type_502847

    # Assigning a type to the variable '_stypy_temp_lambda_289' (line 1923)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1923, 9), '_stypy_temp_lambda_289', _stypy_temp_lambda_289)
    # Getting the type of '_stypy_temp_lambda_289' (line 1923)
    _stypy_temp_lambda_289_502848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 9), '_stypy_temp_lambda_289')
    # Assigning a type to the variable 'df' (line 1923)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1923, 4), 'df', _stypy_temp_lambda_289_502848)
    
    # Call to _gen_roots_and_weights(...): (line 1925)
    # Processing the call arguments (line 1925)
    # Getting the type of 'm' (line 1925)
    m_502850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 34), 'm', False)
    # Getting the type of 'mu0' (line 1925)
    mu0_502851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 37), 'mu0', False)
    # Getting the type of 'an_func' (line 1925)
    an_func_502852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 42), 'an_func', False)
    # Getting the type of 'bn_func' (line 1925)
    bn_func_502853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 51), 'bn_func', False)
    # Getting the type of 'f' (line 1925)
    f_502854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 60), 'f', False)
    # Getting the type of 'df' (line 1925)
    df_502855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 63), 'df', False)
    # Getting the type of 'True' (line 1925)
    True_502856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 67), 'True', False)
    # Getting the type of 'mu' (line 1925)
    mu_502857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 73), 'mu', False)
    # Processing the call keyword arguments (line 1925)
    kwargs_502858 = {}
    # Getting the type of '_gen_roots_and_weights' (line 1925)
    _gen_roots_and_weights_502849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 11), '_gen_roots_and_weights', False)
    # Calling _gen_roots_and_weights(args, kwargs) (line 1925)
    _gen_roots_and_weights_call_result_502859 = invoke(stypy.reporting.localization.Localization(__file__, 1925, 11), _gen_roots_and_weights_502849, *[m_502850, mu0_502851, an_func_502852, bn_func_502853, f_502854, df_502855, True_502856, mu_502857], **kwargs_502858)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1925)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1925, 4), 'stypy_return_type', _gen_roots_and_weights_call_result_502859)
    
    # ################# End of 'roots_legendre(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'roots_legendre' in the type store
    # Getting the type of 'stypy_return_type' (line 1884)
    stypy_return_type_502860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_502860)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'roots_legendre'
    return stypy_return_type_502860

# Assigning a type to the variable 'roots_legendre' (line 1884)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1884, 0), 'roots_legendre', roots_legendre)

@norecursion
def legendre(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1928)
    False_502861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 22), 'False')
    defaults = [False_502861]
    # Create a new context for function 'legendre'
    module_type_store = module_type_store.open_function_context('legendre', 1928, 0, False)
    
    # Passed parameters checking function
    legendre.stypy_localization = localization
    legendre.stypy_type_of_self = None
    legendre.stypy_type_store = module_type_store
    legendre.stypy_function_name = 'legendre'
    legendre.stypy_param_names_list = ['n', 'monic']
    legendre.stypy_varargs_param_name = None
    legendre.stypy_kwargs_param_name = None
    legendre.stypy_call_defaults = defaults
    legendre.stypy_call_varargs = varargs
    legendre.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'legendre', ['n', 'monic'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'legendre', localization, ['n', 'monic'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'legendre(...)' code ##################

    str_502862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1965, (-1)), 'str', 'Legendre polynomial.\n\n    Defined to be the solution of\n\n    .. math::\n        \\frac{d}{dx}\\left[(1 - x^2)\\frac{d}{dx}P_n(x)\\right]\n          + n(n + 1)P_n(x) = 0;\n\n    :math:`P_n(x)` is a polynomial of degree :math:`n`.\n\n    Parameters\n    ----------\n    n : int\n        Degree of the polynomial.\n    monic : bool, optional\n        If `True`, scale the leading coefficient to be 1. Default is\n        `False`.\n\n    Returns\n    -------\n    P : orthopoly1d\n        Legendre polynomial.\n\n    Notes\n    -----\n    The polynomials :math:`P_n` are orthogonal over :math:`[-1, 1]`\n    with weight function 1.\n\n    Examples\n    --------\n    Generate the 3rd-order Legendre polynomial 1/2*(5x^3 + 0x^2 - 3x + 0):\n\n    >>> from scipy.special import legendre\n    >>> legendre(3)\n    poly1d([ 2.5,  0. , -1.5,  0. ])\n\n    ')
    
    
    # Getting the type of 'n' (line 1966)
    n_502863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1966, 7), 'n')
    int_502864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1966, 11), 'int')
    # Applying the binary operator '<' (line 1966)
    result_lt_502865 = python_operator(stypy.reporting.localization.Localization(__file__, 1966, 7), '<', n_502863, int_502864)
    
    # Testing the type of an if condition (line 1966)
    if_condition_502866 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1966, 4), result_lt_502865)
    # Assigning a type to the variable 'if_condition_502866' (line 1966)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1966, 4), 'if_condition_502866', if_condition_502866)
    # SSA begins for if statement (line 1966)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1967)
    # Processing the call arguments (line 1967)
    str_502868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1967, 25), 'str', 'n must be nonnegative.')
    # Processing the call keyword arguments (line 1967)
    kwargs_502869 = {}
    # Getting the type of 'ValueError' (line 1967)
    ValueError_502867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1967, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1967)
    ValueError_call_result_502870 = invoke(stypy.reporting.localization.Localization(__file__, 1967, 14), ValueError_502867, *[str_502868], **kwargs_502869)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1967, 8), ValueError_call_result_502870, 'raise parameter', BaseException)
    # SSA join for if statement (line 1966)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 1969)
    n_502871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1969, 7), 'n')
    int_502872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1969, 12), 'int')
    # Applying the binary operator '==' (line 1969)
    result_eq_502873 = python_operator(stypy.reporting.localization.Localization(__file__, 1969, 7), '==', n_502871, int_502872)
    
    # Testing the type of an if condition (line 1969)
    if_condition_502874 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1969, 4), result_eq_502873)
    # Assigning a type to the variable 'if_condition_502874' (line 1969)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1969, 4), 'if_condition_502874', if_condition_502874)
    # SSA begins for if statement (line 1969)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1970):
    
    # Assigning a BinOp to a Name (line 1970):
    # Getting the type of 'n' (line 1970)
    n_502875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 13), 'n')
    int_502876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1970, 17), 'int')
    # Applying the binary operator '+' (line 1970)
    result_add_502877 = python_operator(stypy.reporting.localization.Localization(__file__, 1970, 13), '+', n_502875, int_502876)
    
    # Assigning a type to the variable 'n1' (line 1970)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1970, 8), 'n1', result_add_502877)
    # SSA branch for the else part of an if statement (line 1969)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1972):
    
    # Assigning a Name to a Name (line 1972):
    # Getting the type of 'n' (line 1972)
    n_502878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 13), 'n')
    # Assigning a type to the variable 'n1' (line 1972)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1972, 8), 'n1', n_502878)
    # SSA join for if statement (line 1969)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 1973):
    
    # Assigning a Subscript to a Name (line 1973):
    
    # Obtaining the type of the subscript
    int_502879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1973, 4), 'int')
    
    # Call to roots_legendre(...): (line 1973)
    # Processing the call arguments (line 1973)
    # Getting the type of 'n1' (line 1973)
    n1_502881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 31), 'n1', False)
    # Processing the call keyword arguments (line 1973)
    # Getting the type of 'True' (line 1973)
    True_502882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 38), 'True', False)
    keyword_502883 = True_502882
    kwargs_502884 = {'mu': keyword_502883}
    # Getting the type of 'roots_legendre' (line 1973)
    roots_legendre_502880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 16), 'roots_legendre', False)
    # Calling roots_legendre(args, kwargs) (line 1973)
    roots_legendre_call_result_502885 = invoke(stypy.reporting.localization.Localization(__file__, 1973, 16), roots_legendre_502880, *[n1_502881], **kwargs_502884)
    
    # Obtaining the member '__getitem__' of a type (line 1973)
    getitem___502886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1973, 4), roots_legendre_call_result_502885, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1973)
    subscript_call_result_502887 = invoke(stypy.reporting.localization.Localization(__file__, 1973, 4), getitem___502886, int_502879)
    
    # Assigning a type to the variable 'tuple_var_assignment_498456' (line 1973)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 4), 'tuple_var_assignment_498456', subscript_call_result_502887)
    
    # Assigning a Subscript to a Name (line 1973):
    
    # Obtaining the type of the subscript
    int_502888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1973, 4), 'int')
    
    # Call to roots_legendre(...): (line 1973)
    # Processing the call arguments (line 1973)
    # Getting the type of 'n1' (line 1973)
    n1_502890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 31), 'n1', False)
    # Processing the call keyword arguments (line 1973)
    # Getting the type of 'True' (line 1973)
    True_502891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 38), 'True', False)
    keyword_502892 = True_502891
    kwargs_502893 = {'mu': keyword_502892}
    # Getting the type of 'roots_legendre' (line 1973)
    roots_legendre_502889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 16), 'roots_legendre', False)
    # Calling roots_legendre(args, kwargs) (line 1973)
    roots_legendre_call_result_502894 = invoke(stypy.reporting.localization.Localization(__file__, 1973, 16), roots_legendre_502889, *[n1_502890], **kwargs_502893)
    
    # Obtaining the member '__getitem__' of a type (line 1973)
    getitem___502895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1973, 4), roots_legendre_call_result_502894, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1973)
    subscript_call_result_502896 = invoke(stypy.reporting.localization.Localization(__file__, 1973, 4), getitem___502895, int_502888)
    
    # Assigning a type to the variable 'tuple_var_assignment_498457' (line 1973)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 4), 'tuple_var_assignment_498457', subscript_call_result_502896)
    
    # Assigning a Subscript to a Name (line 1973):
    
    # Obtaining the type of the subscript
    int_502897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1973, 4), 'int')
    
    # Call to roots_legendre(...): (line 1973)
    # Processing the call arguments (line 1973)
    # Getting the type of 'n1' (line 1973)
    n1_502899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 31), 'n1', False)
    # Processing the call keyword arguments (line 1973)
    # Getting the type of 'True' (line 1973)
    True_502900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 38), 'True', False)
    keyword_502901 = True_502900
    kwargs_502902 = {'mu': keyword_502901}
    # Getting the type of 'roots_legendre' (line 1973)
    roots_legendre_502898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 16), 'roots_legendre', False)
    # Calling roots_legendre(args, kwargs) (line 1973)
    roots_legendre_call_result_502903 = invoke(stypy.reporting.localization.Localization(__file__, 1973, 16), roots_legendre_502898, *[n1_502899], **kwargs_502902)
    
    # Obtaining the member '__getitem__' of a type (line 1973)
    getitem___502904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1973, 4), roots_legendre_call_result_502903, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1973)
    subscript_call_result_502905 = invoke(stypy.reporting.localization.Localization(__file__, 1973, 4), getitem___502904, int_502897)
    
    # Assigning a type to the variable 'tuple_var_assignment_498458' (line 1973)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 4), 'tuple_var_assignment_498458', subscript_call_result_502905)
    
    # Assigning a Name to a Name (line 1973):
    # Getting the type of 'tuple_var_assignment_498456' (line 1973)
    tuple_var_assignment_498456_502906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 4), 'tuple_var_assignment_498456')
    # Assigning a type to the variable 'x' (line 1973)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 4), 'x', tuple_var_assignment_498456_502906)
    
    # Assigning a Name to a Name (line 1973):
    # Getting the type of 'tuple_var_assignment_498457' (line 1973)
    tuple_var_assignment_498457_502907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 4), 'tuple_var_assignment_498457')
    # Assigning a type to the variable 'w' (line 1973)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 7), 'w', tuple_var_assignment_498457_502907)
    
    # Assigning a Name to a Name (line 1973):
    # Getting the type of 'tuple_var_assignment_498458' (line 1973)
    tuple_var_assignment_498458_502908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 4), 'tuple_var_assignment_498458')
    # Assigning a type to the variable 'mu0' (line 1973)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 10), 'mu0', tuple_var_assignment_498458_502908)
    
    
    # Getting the type of 'n' (line 1974)
    n_502909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 7), 'n')
    int_502910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1974, 12), 'int')
    # Applying the binary operator '==' (line 1974)
    result_eq_502911 = python_operator(stypy.reporting.localization.Localization(__file__, 1974, 7), '==', n_502909, int_502910)
    
    # Testing the type of an if condition (line 1974)
    if_condition_502912 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1974, 4), result_eq_502911)
    # Assigning a type to the variable 'if_condition_502912' (line 1974)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1974, 4), 'if_condition_502912', if_condition_502912)
    # SSA begins for if statement (line 1974)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 1975):
    
    # Assigning a List to a Name (line 1975):
    
    # Obtaining an instance of the builtin type 'list' (line 1975)
    list_502913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1975, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1975)
    
    # Assigning a type to the variable 'tuple_assignment_498459' (line 1975)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1975, 8), 'tuple_assignment_498459', list_502913)
    
    # Assigning a List to a Name (line 1975):
    
    # Obtaining an instance of the builtin type 'list' (line 1975)
    list_502914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1975, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1975)
    
    # Assigning a type to the variable 'tuple_assignment_498460' (line 1975)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1975, 8), 'tuple_assignment_498460', list_502914)
    
    # Assigning a Name to a Name (line 1975):
    # Getting the type of 'tuple_assignment_498459' (line 1975)
    tuple_assignment_498459_502915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1975, 8), 'tuple_assignment_498459')
    # Assigning a type to the variable 'x' (line 1975)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1975, 8), 'x', tuple_assignment_498459_502915)
    
    # Assigning a Name to a Name (line 1975):
    # Getting the type of 'tuple_assignment_498460' (line 1975)
    tuple_assignment_498460_502916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1975, 8), 'tuple_assignment_498460')
    # Assigning a type to the variable 'w' (line 1975)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1975, 11), 'w', tuple_assignment_498460_502916)
    # SSA join for if statement (line 1974)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1976):
    
    # Assigning a BinOp to a Name (line 1976):
    float_502917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1976, 9), 'float')
    int_502918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1976, 16), 'int')
    # Getting the type of 'n' (line 1976)
    n_502919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1976, 20), 'n')
    # Applying the binary operator '*' (line 1976)
    result_mul_502920 = python_operator(stypy.reporting.localization.Localization(__file__, 1976, 16), '*', int_502918, n_502919)
    
    int_502921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1976, 24), 'int')
    # Applying the binary operator '+' (line 1976)
    result_add_502922 = python_operator(stypy.reporting.localization.Localization(__file__, 1976, 16), '+', result_mul_502920, int_502921)
    
    # Applying the binary operator 'div' (line 1976)
    result_div_502923 = python_operator(stypy.reporting.localization.Localization(__file__, 1976, 9), 'div', float_502917, result_add_502922)
    
    # Assigning a type to the variable 'hn' (line 1976)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1976, 4), 'hn', result_div_502923)
    
    # Assigning a BinOp to a Name (line 1977):
    
    # Assigning a BinOp to a Name (line 1977):
    
    # Call to _gam(...): (line 1977)
    # Processing the call arguments (line 1977)
    int_502925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1977, 14), 'int')
    # Getting the type of 'n' (line 1977)
    n_502926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1977, 18), 'n', False)
    # Applying the binary operator '*' (line 1977)
    result_mul_502927 = python_operator(stypy.reporting.localization.Localization(__file__, 1977, 14), '*', int_502925, n_502926)
    
    int_502928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1977, 22), 'int')
    # Applying the binary operator '+' (line 1977)
    result_add_502929 = python_operator(stypy.reporting.localization.Localization(__file__, 1977, 14), '+', result_mul_502927, int_502928)
    
    # Processing the call keyword arguments (line 1977)
    kwargs_502930 = {}
    # Getting the type of '_gam' (line 1977)
    _gam_502924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1977, 9), '_gam', False)
    # Calling _gam(args, kwargs) (line 1977)
    _gam_call_result_502931 = invoke(stypy.reporting.localization.Localization(__file__, 1977, 9), _gam_502924, *[result_add_502929], **kwargs_502930)
    
    
    # Call to _gam(...): (line 1977)
    # Processing the call arguments (line 1977)
    # Getting the type of 'n' (line 1977)
    n_502933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1977, 32), 'n', False)
    int_502934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1977, 36), 'int')
    # Applying the binary operator '+' (line 1977)
    result_add_502935 = python_operator(stypy.reporting.localization.Localization(__file__, 1977, 32), '+', n_502933, int_502934)
    
    # Processing the call keyword arguments (line 1977)
    kwargs_502936 = {}
    # Getting the type of '_gam' (line 1977)
    _gam_502932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1977, 27), '_gam', False)
    # Calling _gam(args, kwargs) (line 1977)
    _gam_call_result_502937 = invoke(stypy.reporting.localization.Localization(__file__, 1977, 27), _gam_502932, *[result_add_502935], **kwargs_502936)
    
    int_502938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1977, 40), 'int')
    # Applying the binary operator '**' (line 1977)
    result_pow_502939 = python_operator(stypy.reporting.localization.Localization(__file__, 1977, 27), '**', _gam_call_result_502937, int_502938)
    
    # Applying the binary operator 'div' (line 1977)
    result_div_502940 = python_operator(stypy.reporting.localization.Localization(__file__, 1977, 9), 'div', _gam_call_result_502931, result_pow_502939)
    
    float_502941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1977, 44), 'float')
    # Getting the type of 'n' (line 1977)
    n_502942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1977, 49), 'n')
    # Applying the binary operator '**' (line 1977)
    result_pow_502943 = python_operator(stypy.reporting.localization.Localization(__file__, 1977, 44), '**', float_502941, n_502942)
    
    # Applying the binary operator 'div' (line 1977)
    result_div_502944 = python_operator(stypy.reporting.localization.Localization(__file__, 1977, 42), 'div', result_div_502940, result_pow_502943)
    
    # Assigning a type to the variable 'kn' (line 1977)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1977, 4), 'kn', result_div_502944)
    
    # Assigning a Call to a Name (line 1978):
    
    # Assigning a Call to a Name (line 1978):
    
    # Call to orthopoly1d(...): (line 1978)
    # Processing the call arguments (line 1978)
    # Getting the type of 'x' (line 1978)
    x_502946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 20), 'x', False)
    # Getting the type of 'w' (line 1978)
    w_502947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 23), 'w', False)
    # Getting the type of 'hn' (line 1978)
    hn_502948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 26), 'hn', False)
    # Getting the type of 'kn' (line 1978)
    kn_502949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 30), 'kn', False)
    # Processing the call keyword arguments (line 1978)

    @norecursion
    def _stypy_temp_lambda_290(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_290'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_290', 1978, 40, True)
        # Passed parameters checking function
        _stypy_temp_lambda_290.stypy_localization = localization
        _stypy_temp_lambda_290.stypy_type_of_self = None
        _stypy_temp_lambda_290.stypy_type_store = module_type_store
        _stypy_temp_lambda_290.stypy_function_name = '_stypy_temp_lambda_290'
        _stypy_temp_lambda_290.stypy_param_names_list = ['x']
        _stypy_temp_lambda_290.stypy_varargs_param_name = None
        _stypy_temp_lambda_290.stypy_kwargs_param_name = None
        _stypy_temp_lambda_290.stypy_call_defaults = defaults
        _stypy_temp_lambda_290.stypy_call_varargs = varargs
        _stypy_temp_lambda_290.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_290', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_290', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        float_502950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1978, 50), 'float')
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1978)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1978, 40), 'stypy_return_type', float_502950)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_290' in the type store
        # Getting the type of 'stypy_return_type' (line 1978)
        stypy_return_type_502951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 40), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_502951)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_290'
        return stypy_return_type_502951

    # Assigning a type to the variable '_stypy_temp_lambda_290' (line 1978)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1978, 40), '_stypy_temp_lambda_290', _stypy_temp_lambda_290)
    # Getting the type of '_stypy_temp_lambda_290' (line 1978)
    _stypy_temp_lambda_290_502952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 40), '_stypy_temp_lambda_290')
    keyword_502953 = _stypy_temp_lambda_290_502952
    
    # Obtaining an instance of the builtin type 'tuple' (line 1978)
    tuple_502954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1978, 63), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1978)
    # Adding element type (line 1978)
    int_502955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1978, 63), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1978, 63), tuple_502954, int_502955)
    # Adding element type (line 1978)
    int_502956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1978, 67), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1978, 63), tuple_502954, int_502956)
    
    keyword_502957 = tuple_502954
    # Getting the type of 'monic' (line 1979)
    monic_502958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1979, 26), 'monic', False)
    keyword_502959 = monic_502958

    @norecursion
    def _stypy_temp_lambda_291(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_291'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_291', 1979, 43, True)
        # Passed parameters checking function
        _stypy_temp_lambda_291.stypy_localization = localization
        _stypy_temp_lambda_291.stypy_type_of_self = None
        _stypy_temp_lambda_291.stypy_type_store = module_type_store
        _stypy_temp_lambda_291.stypy_function_name = '_stypy_temp_lambda_291'
        _stypy_temp_lambda_291.stypy_param_names_list = ['x']
        _stypy_temp_lambda_291.stypy_varargs_param_name = None
        _stypy_temp_lambda_291.stypy_kwargs_param_name = None
        _stypy_temp_lambda_291.stypy_call_defaults = defaults
        _stypy_temp_lambda_291.stypy_call_varargs = varargs
        _stypy_temp_lambda_291.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_291', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_291', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to eval_legendre(...): (line 1979)
        # Processing the call arguments (line 1979)
        # Getting the type of 'n' (line 1979)
        n_502961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1979, 67), 'n', False)
        # Getting the type of 'x' (line 1979)
        x_502962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1979, 70), 'x', False)
        # Processing the call keyword arguments (line 1979)
        kwargs_502963 = {}
        # Getting the type of 'eval_legendre' (line 1979)
        eval_legendre_502960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1979, 53), 'eval_legendre', False)
        # Calling eval_legendre(args, kwargs) (line 1979)
        eval_legendre_call_result_502964 = invoke(stypy.reporting.localization.Localization(__file__, 1979, 53), eval_legendre_502960, *[n_502961, x_502962], **kwargs_502963)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1979)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1979, 43), 'stypy_return_type', eval_legendre_call_result_502964)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_291' in the type store
        # Getting the type of 'stypy_return_type' (line 1979)
        stypy_return_type_502965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1979, 43), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_502965)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_291'
        return stypy_return_type_502965

    # Assigning a type to the variable '_stypy_temp_lambda_291' (line 1979)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1979, 43), '_stypy_temp_lambda_291', _stypy_temp_lambda_291)
    # Getting the type of '_stypy_temp_lambda_291' (line 1979)
    _stypy_temp_lambda_291_502966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1979, 43), '_stypy_temp_lambda_291')
    keyword_502967 = _stypy_temp_lambda_291_502966
    kwargs_502968 = {'wfunc': keyword_502953, 'eval_func': keyword_502967, 'limits': keyword_502957, 'monic': keyword_502959}
    # Getting the type of 'orthopoly1d' (line 1978)
    orthopoly1d_502945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 8), 'orthopoly1d', False)
    # Calling orthopoly1d(args, kwargs) (line 1978)
    orthopoly1d_call_result_502969 = invoke(stypy.reporting.localization.Localization(__file__, 1978, 8), orthopoly1d_502945, *[x_502946, w_502947, hn_502948, kn_502949], **kwargs_502968)
    
    # Assigning a type to the variable 'p' (line 1978)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1978, 4), 'p', orthopoly1d_call_result_502969)
    # Getting the type of 'p' (line 1980)
    p_502970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 11), 'p')
    # Assigning a type to the variable 'stypy_return_type' (line 1980)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1980, 4), 'stypy_return_type', p_502970)
    
    # ################# End of 'legendre(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'legendre' in the type store
    # Getting the type of 'stypy_return_type' (line 1928)
    stypy_return_type_502971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_502971)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'legendre'
    return stypy_return_type_502971

# Assigning a type to the variable 'legendre' (line 1928)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1928, 0), 'legendre', legendre)

@norecursion
def roots_sh_legendre(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1985)
    False_502972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 28), 'False')
    defaults = [False_502972]
    # Create a new context for function 'roots_sh_legendre'
    module_type_store = module_type_store.open_function_context('roots_sh_legendre', 1985, 0, False)
    
    # Passed parameters checking function
    roots_sh_legendre.stypy_localization = localization
    roots_sh_legendre.stypy_type_of_self = None
    roots_sh_legendre.stypy_type_store = module_type_store
    roots_sh_legendre.stypy_function_name = 'roots_sh_legendre'
    roots_sh_legendre.stypy_param_names_list = ['n', 'mu']
    roots_sh_legendre.stypy_varargs_param_name = None
    roots_sh_legendre.stypy_kwargs_param_name = None
    roots_sh_legendre.stypy_call_defaults = defaults
    roots_sh_legendre.stypy_call_varargs = varargs
    roots_sh_legendre.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'roots_sh_legendre', ['n', 'mu'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'roots_sh_legendre', localization, ['n', 'mu'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'roots_sh_legendre(...)' code ##################

    str_502973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2014, (-1)), 'str', 'Gauss-Legendre (shifted) quadrature.\n\n    Computes the sample points and weights for Gauss-Legendre quadrature.\n    The sample points are the roots of the n-th degree shifted Legendre\n    polynomial :math:`P^*_n(x)`.  These sample points and weights correctly\n    integrate polynomials of degree :math:`2n - 1` or less over the interval\n    :math:`[0, 1]` with weight function :math:`f(x) = 1.0`.\n\n    Parameters\n    ----------\n    n : int\n        quadrature order\n    mu : bool, optional\n        If True, return the sum of the weights, optional.\n\n    Returns\n    -------\n    x : ndarray\n        Sample points\n    w : ndarray\n        Weights\n    mu : float\n        Sum of the weights\n\n    See Also\n    --------\n    scipy.integrate.quadrature\n    scipy.integrate.fixed_quad\n    ')
    
    # Assigning a Call to a Tuple (line 2015):
    
    # Assigning a Subscript to a Name (line 2015):
    
    # Obtaining the type of the subscript
    int_502974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2015, 4), 'int')
    
    # Call to roots_legendre(...): (line 2015)
    # Processing the call arguments (line 2015)
    # Getting the type of 'n' (line 2015)
    n_502976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 26), 'n', False)
    # Processing the call keyword arguments (line 2015)
    kwargs_502977 = {}
    # Getting the type of 'roots_legendre' (line 2015)
    roots_legendre_502975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 11), 'roots_legendre', False)
    # Calling roots_legendre(args, kwargs) (line 2015)
    roots_legendre_call_result_502978 = invoke(stypy.reporting.localization.Localization(__file__, 2015, 11), roots_legendre_502975, *[n_502976], **kwargs_502977)
    
    # Obtaining the member '__getitem__' of a type (line 2015)
    getitem___502979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2015, 4), roots_legendre_call_result_502978, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2015)
    subscript_call_result_502980 = invoke(stypy.reporting.localization.Localization(__file__, 2015, 4), getitem___502979, int_502974)
    
    # Assigning a type to the variable 'tuple_var_assignment_498461' (line 2015)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2015, 4), 'tuple_var_assignment_498461', subscript_call_result_502980)
    
    # Assigning a Subscript to a Name (line 2015):
    
    # Obtaining the type of the subscript
    int_502981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2015, 4), 'int')
    
    # Call to roots_legendre(...): (line 2015)
    # Processing the call arguments (line 2015)
    # Getting the type of 'n' (line 2015)
    n_502983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 26), 'n', False)
    # Processing the call keyword arguments (line 2015)
    kwargs_502984 = {}
    # Getting the type of 'roots_legendre' (line 2015)
    roots_legendre_502982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 11), 'roots_legendre', False)
    # Calling roots_legendre(args, kwargs) (line 2015)
    roots_legendre_call_result_502985 = invoke(stypy.reporting.localization.Localization(__file__, 2015, 11), roots_legendre_502982, *[n_502983], **kwargs_502984)
    
    # Obtaining the member '__getitem__' of a type (line 2015)
    getitem___502986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2015, 4), roots_legendre_call_result_502985, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2015)
    subscript_call_result_502987 = invoke(stypy.reporting.localization.Localization(__file__, 2015, 4), getitem___502986, int_502981)
    
    # Assigning a type to the variable 'tuple_var_assignment_498462' (line 2015)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2015, 4), 'tuple_var_assignment_498462', subscript_call_result_502987)
    
    # Assigning a Name to a Name (line 2015):
    # Getting the type of 'tuple_var_assignment_498461' (line 2015)
    tuple_var_assignment_498461_502988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 4), 'tuple_var_assignment_498461')
    # Assigning a type to the variable 'x' (line 2015)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2015, 4), 'x', tuple_var_assignment_498461_502988)
    
    # Assigning a Name to a Name (line 2015):
    # Getting the type of 'tuple_var_assignment_498462' (line 2015)
    tuple_var_assignment_498462_502989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 4), 'tuple_var_assignment_498462')
    # Assigning a type to the variable 'w' (line 2015)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2015, 7), 'w', tuple_var_assignment_498462_502989)
    
    # Assigning a BinOp to a Name (line 2016):
    
    # Assigning a BinOp to a Name (line 2016):
    # Getting the type of 'x' (line 2016)
    x_502990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2016, 9), 'x')
    int_502991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2016, 13), 'int')
    # Applying the binary operator '+' (line 2016)
    result_add_502992 = python_operator(stypy.reporting.localization.Localization(__file__, 2016, 9), '+', x_502990, int_502991)
    
    int_502993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2016, 18), 'int')
    # Applying the binary operator 'div' (line 2016)
    result_div_502994 = python_operator(stypy.reporting.localization.Localization(__file__, 2016, 8), 'div', result_add_502992, int_502993)
    
    # Assigning a type to the variable 'x' (line 2016)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2016, 4), 'x', result_div_502994)
    
    # Getting the type of 'w' (line 2017)
    w_502995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2017, 4), 'w')
    int_502996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2017, 9), 'int')
    # Applying the binary operator 'div=' (line 2017)
    result_div_502997 = python_operator(stypy.reporting.localization.Localization(__file__, 2017, 4), 'div=', w_502995, int_502996)
    # Assigning a type to the variable 'w' (line 2017)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2017, 4), 'w', result_div_502997)
    
    
    # Getting the type of 'mu' (line 2018)
    mu_502998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2018, 7), 'mu')
    # Testing the type of an if condition (line 2018)
    if_condition_502999 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2018, 4), mu_502998)
    # Assigning a type to the variable 'if_condition_502999' (line 2018)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2018, 4), 'if_condition_502999', if_condition_502999)
    # SSA begins for if statement (line 2018)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2019)
    tuple_503000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2019, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2019)
    # Adding element type (line 2019)
    # Getting the type of 'x' (line 2019)
    x_503001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2019, 15), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2019, 15), tuple_503000, x_503001)
    # Adding element type (line 2019)
    # Getting the type of 'w' (line 2019)
    w_503002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2019, 18), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2019, 15), tuple_503000, w_503002)
    # Adding element type (line 2019)
    float_503003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2019, 21), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2019, 15), tuple_503000, float_503003)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2019)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2019, 8), 'stypy_return_type', tuple_503000)
    # SSA branch for the else part of an if statement (line 2018)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2021)
    tuple_503004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2021, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2021)
    # Adding element type (line 2021)
    # Getting the type of 'x' (line 2021)
    x_503005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2021, 15), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2021, 15), tuple_503004, x_503005)
    # Adding element type (line 2021)
    # Getting the type of 'w' (line 2021)
    w_503006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2021, 18), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2021, 15), tuple_503004, w_503006)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2021)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2021, 8), 'stypy_return_type', tuple_503004)
    # SSA join for if statement (line 2018)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'roots_sh_legendre(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'roots_sh_legendre' in the type store
    # Getting the type of 'stypy_return_type' (line 1985)
    stypy_return_type_503007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_503007)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'roots_sh_legendre'
    return stypy_return_type_503007

# Assigning a type to the variable 'roots_sh_legendre' (line 1985)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1985, 0), 'roots_sh_legendre', roots_sh_legendre)

@norecursion
def sh_legendre(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 2023)
    False_503008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 25), 'False')
    defaults = [False_503008]
    # Create a new context for function 'sh_legendre'
    module_type_store = module_type_store.open_function_context('sh_legendre', 2023, 0, False)
    
    # Passed parameters checking function
    sh_legendre.stypy_localization = localization
    sh_legendre.stypy_type_of_self = None
    sh_legendre.stypy_type_store = module_type_store
    sh_legendre.stypy_function_name = 'sh_legendre'
    sh_legendre.stypy_param_names_list = ['n', 'monic']
    sh_legendre.stypy_varargs_param_name = None
    sh_legendre.stypy_kwargs_param_name = None
    sh_legendre.stypy_call_defaults = defaults
    sh_legendre.stypy_call_varargs = varargs
    sh_legendre.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'sh_legendre', ['n', 'monic'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'sh_legendre', localization, ['n', 'monic'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'sh_legendre(...)' code ##################

    str_503009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2047, (-1)), 'str', 'Shifted Legendre polynomial.\n\n    Defined as :math:`P^*_n(x) = P_n(2x - 1)` for :math:`P_n` the nth\n    Legendre polynomial.\n\n    Parameters\n    ----------\n    n : int\n        Degree of the polynomial.\n    monic : bool, optional\n        If `True`, scale the leading coefficient to be 1. Default is\n        `False`.\n\n    Returns\n    -------\n    P : orthopoly1d\n        Shifted Legendre polynomial.\n\n    Notes\n    -----\n    The polynomials :math:`P^*_n` are orthogonal over :math:`[0, 1]`\n    with weight function 1.\n\n    ')
    
    
    # Getting the type of 'n' (line 2048)
    n_503010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2048, 7), 'n')
    int_503011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2048, 11), 'int')
    # Applying the binary operator '<' (line 2048)
    result_lt_503012 = python_operator(stypy.reporting.localization.Localization(__file__, 2048, 7), '<', n_503010, int_503011)
    
    # Testing the type of an if condition (line 2048)
    if_condition_503013 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2048, 4), result_lt_503012)
    # Assigning a type to the variable 'if_condition_503013' (line 2048)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2048, 4), 'if_condition_503013', if_condition_503013)
    # SSA begins for if statement (line 2048)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2049)
    # Processing the call arguments (line 2049)
    str_503015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2049, 25), 'str', 'n must be nonnegative.')
    # Processing the call keyword arguments (line 2049)
    kwargs_503016 = {}
    # Getting the type of 'ValueError' (line 2049)
    ValueError_503014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2049, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2049)
    ValueError_call_result_503017 = invoke(stypy.reporting.localization.Localization(__file__, 2049, 14), ValueError_503014, *[str_503015], **kwargs_503016)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2049, 8), ValueError_call_result_503017, 'raise parameter', BaseException)
    # SSA join for if statement (line 2048)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Lambda to a Name (line 2051):
    
    # Assigning a Lambda to a Name (line 2051):

    @norecursion
    def _stypy_temp_lambda_292(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_292'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_292', 2051, 12, True)
        # Passed parameters checking function
        _stypy_temp_lambda_292.stypy_localization = localization
        _stypy_temp_lambda_292.stypy_type_of_self = None
        _stypy_temp_lambda_292.stypy_type_store = module_type_store
        _stypy_temp_lambda_292.stypy_function_name = '_stypy_temp_lambda_292'
        _stypy_temp_lambda_292.stypy_param_names_list = ['x']
        _stypy_temp_lambda_292.stypy_varargs_param_name = None
        _stypy_temp_lambda_292.stypy_kwargs_param_name = None
        _stypy_temp_lambda_292.stypy_call_defaults = defaults
        _stypy_temp_lambda_292.stypy_call_varargs = varargs
        _stypy_temp_lambda_292.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_292', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_292', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        float_503018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2051, 22), 'float')
        # Getting the type of 'x' (line 2051)
        x_503019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2051, 28), 'x')
        # Applying the binary operator '*' (line 2051)
        result_mul_503020 = python_operator(stypy.reporting.localization.Localization(__file__, 2051, 22), '*', float_503018, x_503019)
        
        float_503021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2051, 32), 'float')
        # Applying the binary operator '+' (line 2051)
        result_add_503022 = python_operator(stypy.reporting.localization.Localization(__file__, 2051, 22), '+', result_mul_503020, float_503021)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 2051)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2051, 12), 'stypy_return_type', result_add_503022)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_292' in the type store
        # Getting the type of 'stypy_return_type' (line 2051)
        stypy_return_type_503023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2051, 12), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_503023)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_292'
        return stypy_return_type_503023

    # Assigning a type to the variable '_stypy_temp_lambda_292' (line 2051)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2051, 12), '_stypy_temp_lambda_292', _stypy_temp_lambda_292)
    # Getting the type of '_stypy_temp_lambda_292' (line 2051)
    _stypy_temp_lambda_292_503024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2051, 12), '_stypy_temp_lambda_292')
    # Assigning a type to the variable 'wfunc' (line 2051)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2051, 4), 'wfunc', _stypy_temp_lambda_292_503024)
    
    
    # Getting the type of 'n' (line 2052)
    n_503025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2052, 7), 'n')
    int_503026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2052, 12), 'int')
    # Applying the binary operator '==' (line 2052)
    result_eq_503027 = python_operator(stypy.reporting.localization.Localization(__file__, 2052, 7), '==', n_503025, int_503026)
    
    # Testing the type of an if condition (line 2052)
    if_condition_503028 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2052, 4), result_eq_503027)
    # Assigning a type to the variable 'if_condition_503028' (line 2052)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2052, 4), 'if_condition_503028', if_condition_503028)
    # SSA begins for if statement (line 2052)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to orthopoly1d(...): (line 2053)
    # Processing the call arguments (line 2053)
    
    # Obtaining an instance of the builtin type 'list' (line 2053)
    list_503030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2053, 27), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2053)
    
    
    # Obtaining an instance of the builtin type 'list' (line 2053)
    list_503031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2053, 31), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2053)
    
    float_503032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2053, 35), 'float')
    float_503033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2053, 40), 'float')
    # Getting the type of 'wfunc' (line 2053)
    wfunc_503034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2053, 45), 'wfunc', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2053)
    tuple_503035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2053, 53), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2053)
    # Adding element type (line 2053)
    int_503036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2053, 53), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2053, 53), tuple_503035, int_503036)
    # Adding element type (line 2053)
    int_503037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2053, 56), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2053, 53), tuple_503035, int_503037)
    
    # Getting the type of 'monic' (line 2053)
    monic_503038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2053, 60), 'monic', False)

    @norecursion
    def _stypy_temp_lambda_293(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_293'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_293', 2054, 27, True)
        # Passed parameters checking function
        _stypy_temp_lambda_293.stypy_localization = localization
        _stypy_temp_lambda_293.stypy_type_of_self = None
        _stypy_temp_lambda_293.stypy_type_store = module_type_store
        _stypy_temp_lambda_293.stypy_function_name = '_stypy_temp_lambda_293'
        _stypy_temp_lambda_293.stypy_param_names_list = ['x']
        _stypy_temp_lambda_293.stypy_varargs_param_name = None
        _stypy_temp_lambda_293.stypy_kwargs_param_name = None
        _stypy_temp_lambda_293.stypy_call_defaults = defaults
        _stypy_temp_lambda_293.stypy_call_varargs = varargs
        _stypy_temp_lambda_293.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_293', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_293', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to eval_sh_legendre(...): (line 2054)
        # Processing the call arguments (line 2054)
        # Getting the type of 'n' (line 2054)
        n_503040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2054, 54), 'n', False)
        # Getting the type of 'x' (line 2054)
        x_503041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2054, 57), 'x', False)
        # Processing the call keyword arguments (line 2054)
        kwargs_503042 = {}
        # Getting the type of 'eval_sh_legendre' (line 2054)
        eval_sh_legendre_503039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2054, 37), 'eval_sh_legendre', False)
        # Calling eval_sh_legendre(args, kwargs) (line 2054)
        eval_sh_legendre_call_result_503043 = invoke(stypy.reporting.localization.Localization(__file__, 2054, 37), eval_sh_legendre_503039, *[n_503040, x_503041], **kwargs_503042)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 2054)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2054, 27), 'stypy_return_type', eval_sh_legendre_call_result_503043)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_293' in the type store
        # Getting the type of 'stypy_return_type' (line 2054)
        stypy_return_type_503044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2054, 27), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_503044)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_293'
        return stypy_return_type_503044

    # Assigning a type to the variable '_stypy_temp_lambda_293' (line 2054)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2054, 27), '_stypy_temp_lambda_293', _stypy_temp_lambda_293)
    # Getting the type of '_stypy_temp_lambda_293' (line 2054)
    _stypy_temp_lambda_293_503045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2054, 27), '_stypy_temp_lambda_293')
    # Processing the call keyword arguments (line 2053)
    kwargs_503046 = {}
    # Getting the type of 'orthopoly1d' (line 2053)
    orthopoly1d_503029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2053, 15), 'orthopoly1d', False)
    # Calling orthopoly1d(args, kwargs) (line 2053)
    orthopoly1d_call_result_503047 = invoke(stypy.reporting.localization.Localization(__file__, 2053, 15), orthopoly1d_503029, *[list_503030, list_503031, float_503032, float_503033, wfunc_503034, tuple_503035, monic_503038, _stypy_temp_lambda_293_503045], **kwargs_503046)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2053)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2053, 8), 'stypy_return_type', orthopoly1d_call_result_503047)
    # SSA join for if statement (line 2052)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 2055):
    
    # Assigning a Subscript to a Name (line 2055):
    
    # Obtaining the type of the subscript
    int_503048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2055, 4), 'int')
    
    # Call to roots_sh_legendre(...): (line 2055)
    # Processing the call arguments (line 2055)
    # Getting the type of 'n' (line 2055)
    n_503050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 34), 'n', False)
    # Processing the call keyword arguments (line 2055)
    # Getting the type of 'True' (line 2055)
    True_503051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 40), 'True', False)
    keyword_503052 = True_503051
    kwargs_503053 = {'mu': keyword_503052}
    # Getting the type of 'roots_sh_legendre' (line 2055)
    roots_sh_legendre_503049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 16), 'roots_sh_legendre', False)
    # Calling roots_sh_legendre(args, kwargs) (line 2055)
    roots_sh_legendre_call_result_503054 = invoke(stypy.reporting.localization.Localization(__file__, 2055, 16), roots_sh_legendre_503049, *[n_503050], **kwargs_503053)
    
    # Obtaining the member '__getitem__' of a type (line 2055)
    getitem___503055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2055, 4), roots_sh_legendre_call_result_503054, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2055)
    subscript_call_result_503056 = invoke(stypy.reporting.localization.Localization(__file__, 2055, 4), getitem___503055, int_503048)
    
    # Assigning a type to the variable 'tuple_var_assignment_498463' (line 2055)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2055, 4), 'tuple_var_assignment_498463', subscript_call_result_503056)
    
    # Assigning a Subscript to a Name (line 2055):
    
    # Obtaining the type of the subscript
    int_503057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2055, 4), 'int')
    
    # Call to roots_sh_legendre(...): (line 2055)
    # Processing the call arguments (line 2055)
    # Getting the type of 'n' (line 2055)
    n_503059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 34), 'n', False)
    # Processing the call keyword arguments (line 2055)
    # Getting the type of 'True' (line 2055)
    True_503060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 40), 'True', False)
    keyword_503061 = True_503060
    kwargs_503062 = {'mu': keyword_503061}
    # Getting the type of 'roots_sh_legendre' (line 2055)
    roots_sh_legendre_503058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 16), 'roots_sh_legendre', False)
    # Calling roots_sh_legendre(args, kwargs) (line 2055)
    roots_sh_legendre_call_result_503063 = invoke(stypy.reporting.localization.Localization(__file__, 2055, 16), roots_sh_legendre_503058, *[n_503059], **kwargs_503062)
    
    # Obtaining the member '__getitem__' of a type (line 2055)
    getitem___503064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2055, 4), roots_sh_legendre_call_result_503063, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2055)
    subscript_call_result_503065 = invoke(stypy.reporting.localization.Localization(__file__, 2055, 4), getitem___503064, int_503057)
    
    # Assigning a type to the variable 'tuple_var_assignment_498464' (line 2055)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2055, 4), 'tuple_var_assignment_498464', subscript_call_result_503065)
    
    # Assigning a Subscript to a Name (line 2055):
    
    # Obtaining the type of the subscript
    int_503066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2055, 4), 'int')
    
    # Call to roots_sh_legendre(...): (line 2055)
    # Processing the call arguments (line 2055)
    # Getting the type of 'n' (line 2055)
    n_503068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 34), 'n', False)
    # Processing the call keyword arguments (line 2055)
    # Getting the type of 'True' (line 2055)
    True_503069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 40), 'True', False)
    keyword_503070 = True_503069
    kwargs_503071 = {'mu': keyword_503070}
    # Getting the type of 'roots_sh_legendre' (line 2055)
    roots_sh_legendre_503067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 16), 'roots_sh_legendre', False)
    # Calling roots_sh_legendre(args, kwargs) (line 2055)
    roots_sh_legendre_call_result_503072 = invoke(stypy.reporting.localization.Localization(__file__, 2055, 16), roots_sh_legendre_503067, *[n_503068], **kwargs_503071)
    
    # Obtaining the member '__getitem__' of a type (line 2055)
    getitem___503073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2055, 4), roots_sh_legendre_call_result_503072, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2055)
    subscript_call_result_503074 = invoke(stypy.reporting.localization.Localization(__file__, 2055, 4), getitem___503073, int_503066)
    
    # Assigning a type to the variable 'tuple_var_assignment_498465' (line 2055)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2055, 4), 'tuple_var_assignment_498465', subscript_call_result_503074)
    
    # Assigning a Name to a Name (line 2055):
    # Getting the type of 'tuple_var_assignment_498463' (line 2055)
    tuple_var_assignment_498463_503075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 4), 'tuple_var_assignment_498463')
    # Assigning a type to the variable 'x' (line 2055)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2055, 4), 'x', tuple_var_assignment_498463_503075)
    
    # Assigning a Name to a Name (line 2055):
    # Getting the type of 'tuple_var_assignment_498464' (line 2055)
    tuple_var_assignment_498464_503076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 4), 'tuple_var_assignment_498464')
    # Assigning a type to the variable 'w' (line 2055)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2055, 7), 'w', tuple_var_assignment_498464_503076)
    
    # Assigning a Name to a Name (line 2055):
    # Getting the type of 'tuple_var_assignment_498465' (line 2055)
    tuple_var_assignment_498465_503077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 4), 'tuple_var_assignment_498465')
    # Assigning a type to the variable 'mu0' (line 2055)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2055, 10), 'mu0', tuple_var_assignment_498465_503077)
    
    # Assigning a BinOp to a Name (line 2056):
    
    # Assigning a BinOp to a Name (line 2056):
    float_503078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2056, 9), 'float')
    int_503079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2056, 16), 'int')
    # Getting the type of 'n' (line 2056)
    n_503080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2056, 20), 'n')
    # Applying the binary operator '*' (line 2056)
    result_mul_503081 = python_operator(stypy.reporting.localization.Localization(__file__, 2056, 16), '*', int_503079, n_503080)
    
    float_503082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2056, 24), 'float')
    # Applying the binary operator '+' (line 2056)
    result_add_503083 = python_operator(stypy.reporting.localization.Localization(__file__, 2056, 16), '+', result_mul_503081, float_503082)
    
    # Applying the binary operator 'div' (line 2056)
    result_div_503084 = python_operator(stypy.reporting.localization.Localization(__file__, 2056, 9), 'div', float_503078, result_add_503083)
    
    # Assigning a type to the variable 'hn' (line 2056)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2056, 4), 'hn', result_div_503084)
    
    # Assigning a BinOp to a Name (line 2057):
    
    # Assigning a BinOp to a Name (line 2057):
    
    # Call to _gam(...): (line 2057)
    # Processing the call arguments (line 2057)
    int_503086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2057, 14), 'int')
    # Getting the type of 'n' (line 2057)
    n_503087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2057, 18), 'n', False)
    # Applying the binary operator '*' (line 2057)
    result_mul_503088 = python_operator(stypy.reporting.localization.Localization(__file__, 2057, 14), '*', int_503086, n_503087)
    
    int_503089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2057, 22), 'int')
    # Applying the binary operator '+' (line 2057)
    result_add_503090 = python_operator(stypy.reporting.localization.Localization(__file__, 2057, 14), '+', result_mul_503088, int_503089)
    
    # Processing the call keyword arguments (line 2057)
    kwargs_503091 = {}
    # Getting the type of '_gam' (line 2057)
    _gam_503085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2057, 9), '_gam', False)
    # Calling _gam(args, kwargs) (line 2057)
    _gam_call_result_503092 = invoke(stypy.reporting.localization.Localization(__file__, 2057, 9), _gam_503085, *[result_add_503090], **kwargs_503091)
    
    
    # Call to _gam(...): (line 2057)
    # Processing the call arguments (line 2057)
    # Getting the type of 'n' (line 2057)
    n_503094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2057, 32), 'n', False)
    int_503095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2057, 36), 'int')
    # Applying the binary operator '+' (line 2057)
    result_add_503096 = python_operator(stypy.reporting.localization.Localization(__file__, 2057, 32), '+', n_503094, int_503095)
    
    # Processing the call keyword arguments (line 2057)
    kwargs_503097 = {}
    # Getting the type of '_gam' (line 2057)
    _gam_503093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2057, 27), '_gam', False)
    # Calling _gam(args, kwargs) (line 2057)
    _gam_call_result_503098 = invoke(stypy.reporting.localization.Localization(__file__, 2057, 27), _gam_503093, *[result_add_503096], **kwargs_503097)
    
    int_503099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2057, 40), 'int')
    # Applying the binary operator '**' (line 2057)
    result_pow_503100 = python_operator(stypy.reporting.localization.Localization(__file__, 2057, 27), '**', _gam_call_result_503098, int_503099)
    
    # Applying the binary operator 'div' (line 2057)
    result_div_503101 = python_operator(stypy.reporting.localization.Localization(__file__, 2057, 9), 'div', _gam_call_result_503092, result_pow_503100)
    
    # Assigning a type to the variable 'kn' (line 2057)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2057, 4), 'kn', result_div_503101)
    
    # Assigning a Call to a Name (line 2058):
    
    # Assigning a Call to a Name (line 2058):
    
    # Call to orthopoly1d(...): (line 2058)
    # Processing the call arguments (line 2058)
    # Getting the type of 'x' (line 2058)
    x_503103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 20), 'x', False)
    # Getting the type of 'w' (line 2058)
    w_503104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 23), 'w', False)
    # Getting the type of 'hn' (line 2058)
    hn_503105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 26), 'hn', False)
    # Getting the type of 'kn' (line 2058)
    kn_503106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 30), 'kn', False)
    # Getting the type of 'wfunc' (line 2058)
    wfunc_503107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 34), 'wfunc', False)
    # Processing the call keyword arguments (line 2058)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2058)
    tuple_503108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2058, 49), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2058)
    # Adding element type (line 2058)
    int_503109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2058, 49), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2058, 49), tuple_503108, int_503109)
    # Adding element type (line 2058)
    int_503110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2058, 52), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2058, 49), tuple_503108, int_503110)
    
    keyword_503111 = tuple_503108
    # Getting the type of 'monic' (line 2058)
    monic_503112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 62), 'monic', False)
    keyword_503113 = monic_503112

    @norecursion
    def _stypy_temp_lambda_294(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_294'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_294', 2059, 30, True)
        # Passed parameters checking function
        _stypy_temp_lambda_294.stypy_localization = localization
        _stypy_temp_lambda_294.stypy_type_of_self = None
        _stypy_temp_lambda_294.stypy_type_store = module_type_store
        _stypy_temp_lambda_294.stypy_function_name = '_stypy_temp_lambda_294'
        _stypy_temp_lambda_294.stypy_param_names_list = ['x']
        _stypy_temp_lambda_294.stypy_varargs_param_name = None
        _stypy_temp_lambda_294.stypy_kwargs_param_name = None
        _stypy_temp_lambda_294.stypy_call_defaults = defaults
        _stypy_temp_lambda_294.stypy_call_varargs = varargs
        _stypy_temp_lambda_294.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_294', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_294', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to eval_sh_legendre(...): (line 2059)
        # Processing the call arguments (line 2059)
        # Getting the type of 'n' (line 2059)
        n_503115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 57), 'n', False)
        # Getting the type of 'x' (line 2059)
        x_503116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 60), 'x', False)
        # Processing the call keyword arguments (line 2059)
        kwargs_503117 = {}
        # Getting the type of 'eval_sh_legendre' (line 2059)
        eval_sh_legendre_503114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 40), 'eval_sh_legendre', False)
        # Calling eval_sh_legendre(args, kwargs) (line 2059)
        eval_sh_legendre_call_result_503118 = invoke(stypy.reporting.localization.Localization(__file__, 2059, 40), eval_sh_legendre_503114, *[n_503115, x_503116], **kwargs_503117)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 2059)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2059, 30), 'stypy_return_type', eval_sh_legendre_call_result_503118)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_294' in the type store
        # Getting the type of 'stypy_return_type' (line 2059)
        stypy_return_type_503119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 30), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_503119)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_294'
        return stypy_return_type_503119

    # Assigning a type to the variable '_stypy_temp_lambda_294' (line 2059)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2059, 30), '_stypy_temp_lambda_294', _stypy_temp_lambda_294)
    # Getting the type of '_stypy_temp_lambda_294' (line 2059)
    _stypy_temp_lambda_294_503120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 30), '_stypy_temp_lambda_294')
    keyword_503121 = _stypy_temp_lambda_294_503120
    kwargs_503122 = {'eval_func': keyword_503121, 'limits': keyword_503111, 'monic': keyword_503113}
    # Getting the type of 'orthopoly1d' (line 2058)
    orthopoly1d_503102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 8), 'orthopoly1d', False)
    # Calling orthopoly1d(args, kwargs) (line 2058)
    orthopoly1d_call_result_503123 = invoke(stypy.reporting.localization.Localization(__file__, 2058, 8), orthopoly1d_503102, *[x_503103, w_503104, hn_503105, kn_503106, wfunc_503107], **kwargs_503122)
    
    # Assigning a type to the variable 'p' (line 2058)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2058, 4), 'p', orthopoly1d_call_result_503123)
    # Getting the type of 'p' (line 2060)
    p_503124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2060, 11), 'p')
    # Assigning a type to the variable 'stypy_return_type' (line 2060)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2060, 4), 'stypy_return_type', p_503124)
    
    # ################# End of 'sh_legendre(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'sh_legendre' in the type store
    # Getting the type of 'stypy_return_type' (line 2023)
    stypy_return_type_503125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_503125)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'sh_legendre'
    return stypy_return_type_503125

# Assigning a type to the variable 'sh_legendre' (line 2023)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2023, 0), 'sh_legendre', sh_legendre)

# Assigning a Attribute to a Name (line 2069):

# Assigning a Attribute to a Name (line 2069):
# Getting the type of 'cephes' (line 2069)
cephes_503126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2069, 7), 'cephes')
# Obtaining the member 'poch' of a type (line 2069)
poch_503127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2069, 7), cephes_503126, 'poch')
# Assigning a type to the variable 'poch' (line 2069)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2069, 0), 'poch', poch_503127)
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2071, 0))

# 'from scipy.special._ufuncs import binom, eval_jacobi, eval_sh_jacobi, eval_gegenbauer, eval_chebyt, eval_chebyu, eval_chebys, eval_chebyc, eval_sh_chebyt, eval_sh_chebyu, eval_legendre, eval_sh_legendre, eval_genlaguerre, eval_laguerre, eval_hermite, eval_hermitenorm' statement (line 2071)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/special/')
import_503128 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2071, 0), 'scipy.special._ufuncs')

if (type(import_503128) is not StypyTypeError):

    if (import_503128 != 'pyd_module'):
        __import__(import_503128)
        sys_modules_503129 = sys.modules[import_503128]
        import_from_module(stypy.reporting.localization.Localization(__file__, 2071, 0), 'scipy.special._ufuncs', sys_modules_503129.module_type_store, module_type_store, ['binom', 'eval_jacobi', 'eval_sh_jacobi', 'eval_gegenbauer', 'eval_chebyt', 'eval_chebyu', 'eval_chebys', 'eval_chebyc', 'eval_sh_chebyt', 'eval_sh_chebyu', 'eval_legendre', 'eval_sh_legendre', 'eval_genlaguerre', 'eval_laguerre', 'eval_hermite', 'eval_hermitenorm'])
        nest_module(stypy.reporting.localization.Localization(__file__, 2071, 0), __file__, sys_modules_503129, sys_modules_503129.module_type_store, module_type_store)
    else:
        from scipy.special._ufuncs import binom, eval_jacobi, eval_sh_jacobi, eval_gegenbauer, eval_chebyt, eval_chebyu, eval_chebys, eval_chebyc, eval_sh_chebyt, eval_sh_chebyu, eval_legendre, eval_sh_legendre, eval_genlaguerre, eval_laguerre, eval_hermite, eval_hermitenorm

        import_from_module(stypy.reporting.localization.Localization(__file__, 2071, 0), 'scipy.special._ufuncs', None, module_type_store, ['binom', 'eval_jacobi', 'eval_sh_jacobi', 'eval_gegenbauer', 'eval_chebyt', 'eval_chebyu', 'eval_chebys', 'eval_chebyc', 'eval_sh_chebyt', 'eval_sh_chebyu', 'eval_legendre', 'eval_sh_legendre', 'eval_genlaguerre', 'eval_laguerre', 'eval_hermite', 'eval_hermitenorm'], [binom, eval_jacobi, eval_sh_jacobi, eval_gegenbauer, eval_chebyt, eval_chebyu, eval_chebys, eval_chebyc, eval_sh_chebyt, eval_sh_chebyu, eval_legendre, eval_sh_legendre, eval_genlaguerre, eval_laguerre, eval_hermite, eval_hermitenorm])

else:
    # Assigning a type to the variable 'scipy.special._ufuncs' (line 2071)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2071, 0), 'scipy.special._ufuncs', import_503128)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/special/')


# Assigning a Call to a Name (line 2078):

# Assigning a Call to a Name (line 2078):

# Call to globals(...): (line 2078)
# Processing the call keyword arguments (line 2078)
kwargs_503131 = {}
# Getting the type of 'globals' (line 2078)
globals_503130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 12), 'globals', False)
# Calling globals(args, kwargs) (line 2078)
globals_call_result_503132 = invoke(stypy.reporting.localization.Localization(__file__, 2078, 12), globals_503130, *[], **kwargs_503131)

# Assigning a type to the variable '_modattrs' (line 2078)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2078, 0), '_modattrs', globals_call_result_503132)


# Call to items(...): (line 2079)
# Processing the call keyword arguments (line 2079)
kwargs_503135 = {}
# Getting the type of '_rootfuns_map' (line 2079)
_rootfuns_map_503133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 22), '_rootfuns_map', False)
# Obtaining the member 'items' of a type (line 2079)
items_503134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2079, 22), _rootfuns_map_503133, 'items')
# Calling items(args, kwargs) (line 2079)
items_call_result_503136 = invoke(stypy.reporting.localization.Localization(__file__, 2079, 22), items_503134, *[], **kwargs_503135)

# Testing the type of a for loop iterable (line 2079)
is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2079, 0), items_call_result_503136)
# Getting the type of the for loop variable (line 2079)
for_loop_var_503137 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2079, 0), items_call_result_503136)
# Assigning a type to the variable 'newfun' (line 2079)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2079, 0), 'newfun', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2079, 0), for_loop_var_503137))
# Assigning a type to the variable 'oldfun' (line 2079)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2079, 0), 'oldfun', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2079, 0), for_loop_var_503137))
# SSA begins for a for statement (line 2079)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')

# Assigning a Subscript to a Subscript (line 2080):

# Assigning a Subscript to a Subscript (line 2080):

# Obtaining the type of the subscript
# Getting the type of 'newfun' (line 2080)
newfun_503138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 34), 'newfun')
# Getting the type of '_modattrs' (line 2080)
_modattrs_503139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 24), '_modattrs')
# Obtaining the member '__getitem__' of a type (line 2080)
getitem___503140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2080, 24), _modattrs_503139, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 2080)
subscript_call_result_503141 = invoke(stypy.reporting.localization.Localization(__file__, 2080, 24), getitem___503140, newfun_503138)

# Getting the type of '_modattrs' (line 2080)
_modattrs_503142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 4), '_modattrs')
# Getting the type of 'oldfun' (line 2080)
oldfun_503143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 14), 'oldfun')
# Storing an element on a container (line 2080)
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2080, 4), _modattrs_503142, (oldfun_503143, subscript_call_result_503141))

# Call to append(...): (line 2081)
# Processing the call arguments (line 2081)
# Getting the type of 'oldfun' (line 2081)
oldfun_503146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2081, 19), 'oldfun', False)
# Processing the call keyword arguments (line 2081)
kwargs_503147 = {}
# Getting the type of '__all__' (line 2081)
all___503144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2081, 4), '__all__', False)
# Obtaining the member 'append' of a type (line 2081)
append_503145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2081, 4), all___503144, 'append')
# Calling append(args, kwargs) (line 2081)
append_call_result_503148 = invoke(stypy.reporting.localization.Localization(__file__, 2081, 4), append_503145, *[oldfun_503146], **kwargs_503147)

# SSA join for a for statement
module_type_store = module_type_store.join_ssa_context()


# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
