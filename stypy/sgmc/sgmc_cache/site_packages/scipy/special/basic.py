
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: #
2: # Author:  Travis Oliphant, 2002
3: #
4: 
5: from __future__ import division, print_function, absolute_import
6: 
7: import operator
8: import numpy as np
9: import math
10: from scipy._lib.six import xrange
11: from numpy import (pi, asarray, floor, isscalar, iscomplex, real,
12:                    imag, sqrt, where, mgrid, sin, place, issubdtype,
13:                    extract, less, inexact, nan, zeros, sinc)
14: from . import _ufuncs as ufuncs
15: from ._ufuncs import (ellipkm1, mathieu_a, mathieu_b, iv, jv, gamma,
16:                       psi, _zeta, hankel1, hankel2, yv, kv, ndtri,
17:                       poch, binom, hyp0f1)
18: from . import specfun
19: from . import orthogonal
20: from ._comb import _comb_int
21: 
22: 
23: __all__ = ['ai_zeros', 'assoc_laguerre', 'bei_zeros', 'beip_zeros',
24:            'ber_zeros', 'bernoulli', 'berp_zeros',
25:            'bessel_diff_formula', 'bi_zeros', 'clpmn', 'comb',
26:            'digamma', 'diric', 'ellipk', 'erf_zeros', 'erfcinv',
27:            'erfinv', 'euler', 'factorial', 'factorialk', 'factorial2',
28:            'fresnel_zeros', 'fresnelc_zeros', 'fresnels_zeros',
29:            'gamma', 'h1vp', 'h2vp', 'hankel1', 'hankel2', 'hyp0f1',
30:            'iv', 'ivp', 'jn_zeros', 'jnjnp_zeros', 'jnp_zeros',
31:            'jnyn_zeros', 'jv', 'jvp', 'kei_zeros', 'keip_zeros',
32:            'kelvin_zeros', 'ker_zeros', 'kerp_zeros', 'kv', 'kvp',
33:            'lmbda', 'lpmn', 'lpn', 'lqmn', 'lqn', 'mathieu_a',
34:            'mathieu_b', 'mathieu_even_coef', 'mathieu_odd_coef',
35:            'ndtri', 'obl_cv_seq', 'pbdn_seq', 'pbdv_seq', 'pbvv_seq',
36:            'perm', 'polygamma', 'pro_cv_seq', 'psi', 'riccati_jn',
37:            'riccati_yn', 'sinc', 'y0_zeros', 'y1_zeros', 'y1p_zeros',
38:            'yn_zeros', 'ynp_zeros', 'yv', 'yvp', 'zeta']
39: 
40: 
41: def _nonneg_int_or_fail(n, var_name, strict=True):
42:     try:
43:         if strict:
44:             # Raises an exception if float
45:             n = operator.index(n)
46:         elif n == floor(n):
47:             n = int(n)
48:         else:
49:             raise ValueError()
50:         if n < 0:
51:             raise ValueError()
52:     except (ValueError, TypeError) as err:
53:         raise err.__class__("{} must be a non-negative integer".format(var_name))
54:     return n
55: 
56: 
57: def diric(x, n):
58:     '''Periodic sinc function, also called the Dirichlet function.
59: 
60:     The Dirichlet function is defined as::
61: 
62:         diric(x) = sin(x * n/2) / (n * sin(x / 2)),
63: 
64:     where `n` is a positive integer.
65: 
66:     Parameters
67:     ----------
68:     x : array_like
69:         Input data
70:     n : int
71:         Integer defining the periodicity.
72: 
73:     Returns
74:     -------
75:     diric : ndarray
76: 
77:     Examples
78:     --------
79:     >>> from scipy import special
80:     >>> import matplotlib.pyplot as plt
81: 
82:     >>> x = np.linspace(-8*np.pi, 8*np.pi, num=201)
83:     >>> plt.figure(figsize=(8, 8));
84:     >>> for idx, n in enumerate([2, 3, 4, 9]):
85:     ...     plt.subplot(2, 2, idx+1)
86:     ...     plt.plot(x, special.diric(x, n))
87:     ...     plt.title('diric, n={}'.format(n))
88:     >>> plt.show()
89: 
90:     The following example demonstrates that `diric` gives the magnitudes
91:     (modulo the sign and scaling) of the Fourier coefficients of a
92:     rectangular pulse.
93: 
94:     Suppress output of values that are effectively 0:
95: 
96:     >>> np.set_printoptions(suppress=True)
97: 
98:     Create a signal `x` of length `m` with `k` ones:
99: 
100:     >>> m = 8
101:     >>> k = 3
102:     >>> x = np.zeros(m)
103:     >>> x[:k] = 1
104: 
105:     Use the FFT to compute the Fourier transform of `x`, and
106:     inspect the magnitudes of the coefficients:
107: 
108:     >>> np.abs(np.fft.fft(x))
109:     array([ 3.        ,  2.41421356,  1.        ,  0.41421356,  1.        ,
110:             0.41421356,  1.        ,  2.41421356])
111: 
112:     Now find the same values (up to sign) using `diric`.  We multiply
113:     by `k` to account for the different scaling conventions of
114:     `numpy.fft.fft` and `diric`:
115: 
116:     >>> theta = np.linspace(0, 2*np.pi, m, endpoint=False)
117:     >>> k * special.diric(theta, k)
118:     array([ 3.        ,  2.41421356,  1.        , -0.41421356, -1.        ,
119:            -0.41421356,  1.        ,  2.41421356])
120:     '''
121:     x, n = asarray(x), asarray(n)
122:     n = asarray(n + (x-x))
123:     x = asarray(x + (n-n))
124:     if issubdtype(x.dtype, inexact):
125:         ytype = x.dtype
126:     else:
127:         ytype = float
128:     y = zeros(x.shape, ytype)
129: 
130:     # empirical minval for 32, 64 or 128 bit float computations
131:     # where sin(x/2) < minval, result is fixed at +1 or -1
132:     if np.finfo(ytype).eps < 1e-18:
133:         minval = 1e-11
134:     elif np.finfo(ytype).eps < 1e-15:
135:         minval = 1e-7
136:     else:
137:         minval = 1e-3
138: 
139:     mask1 = (n <= 0) | (n != floor(n))
140:     place(y, mask1, nan)
141: 
142:     x = x / 2
143:     denom = sin(x)
144:     mask2 = (1-mask1) & (abs(denom) < minval)
145:     xsub = extract(mask2, x)
146:     nsub = extract(mask2, n)
147:     zsub = xsub / pi
148:     place(y, mask2, pow(-1, np.round(zsub)*(nsub-1)))
149: 
150:     mask = (1-mask1) & (1-mask2)
151:     xsub = extract(mask, x)
152:     nsub = extract(mask, n)
153:     dsub = extract(mask, denom)
154:     place(y, mask, sin(nsub*xsub)/(nsub*dsub))
155:     return y
156: 
157: 
158: def jnjnp_zeros(nt):
159:     '''Compute zeros of integer-order Bessel functions Jn and Jn'.
160: 
161:     Results are arranged in order of the magnitudes of the zeros.
162: 
163:     Parameters
164:     ----------
165:     nt : int
166:         Number (<=1200) of zeros to compute
167: 
168:     Returns
169:     -------
170:     zo[l-1] : ndarray
171:         Value of the lth zero of Jn(x) and Jn'(x). Of length `nt`.
172:     n[l-1] : ndarray
173:         Order of the Jn(x) or Jn'(x) associated with lth zero. Of length `nt`.
174:     m[l-1] : ndarray
175:         Serial number of the zeros of Jn(x) or Jn'(x) associated
176:         with lth zero. Of length `nt`.
177:     t[l-1] : ndarray
178:         0 if lth zero in zo is zero of Jn(x), 1 if it is a zero of Jn'(x). Of
179:         length `nt`.
180: 
181:     See Also
182:     --------
183:     jn_zeros, jnp_zeros : to get separated arrays of zeros.
184: 
185:     References
186:     ----------
187:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
188:            Functions", John Wiley and Sons, 1996, chapter 5.
189:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
190: 
191:     '''
192:     if not isscalar(nt) or (floor(nt) != nt) or (nt > 1200):
193:         raise ValueError("Number must be integer <= 1200.")
194:     nt = int(nt)
195:     n, m, t, zo = specfun.jdzo(nt)
196:     return zo[1:nt+1], n[:nt], m[:nt], t[:nt]
197: 
198: 
199: def jnyn_zeros(n, nt):
200:     '''Compute nt zeros of Bessel functions Jn(x), Jn'(x), Yn(x), and Yn'(x).
201: 
202:     Returns 4 arrays of length `nt`, corresponding to the first `nt` zeros of
203:     Jn(x), Jn'(x), Yn(x), and Yn'(x), respectively.
204: 
205:     Parameters
206:     ----------
207:     n : int
208:         Order of the Bessel functions
209:     nt : int
210:         Number (<=1200) of zeros to compute
211: 
212:     See jn_zeros, jnp_zeros, yn_zeros, ynp_zeros to get separate arrays.
213: 
214:     References
215:     ----------
216:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
217:            Functions", John Wiley and Sons, 1996, chapter 5.
218:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
219: 
220:     '''
221:     if not (isscalar(nt) and isscalar(n)):
222:         raise ValueError("Arguments must be scalars.")
223:     if (floor(n) != n) or (floor(nt) != nt):
224:         raise ValueError("Arguments must be integers.")
225:     if (nt <= 0):
226:         raise ValueError("nt > 0")
227:     return specfun.jyzo(abs(n), nt)
228: 
229: 
230: def jn_zeros(n, nt):
231:     '''Compute zeros of integer-order Bessel function Jn(x).
232: 
233:     Parameters
234:     ----------
235:     n : int
236:         Order of Bessel function
237:     nt : int
238:         Number of zeros to return
239: 
240:     References
241:     ----------
242:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
243:            Functions", John Wiley and Sons, 1996, chapter 5.
244:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
245: 
246:     '''
247:     return jnyn_zeros(n, nt)[0]
248: 
249: 
250: def jnp_zeros(n, nt):
251:     '''Compute zeros of integer-order Bessel function derivative Jn'(x).
252: 
253:     Parameters
254:     ----------
255:     n : int
256:         Order of Bessel function
257:     nt : int
258:         Number of zeros to return
259: 
260:     References
261:     ----------
262:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
263:            Functions", John Wiley and Sons, 1996, chapter 5.
264:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
265: 
266:     '''
267:     return jnyn_zeros(n, nt)[1]
268: 
269: 
270: def yn_zeros(n, nt):
271:     '''Compute zeros of integer-order Bessel function Yn(x).
272: 
273:     Parameters
274:     ----------
275:     n : int
276:         Order of Bessel function
277:     nt : int
278:         Number of zeros to return
279: 
280:     References
281:     ----------
282:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
283:            Functions", John Wiley and Sons, 1996, chapter 5.
284:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
285: 
286:     '''
287:     return jnyn_zeros(n, nt)[2]
288: 
289: 
290: def ynp_zeros(n, nt):
291:     '''Compute zeros of integer-order Bessel function derivative Yn'(x).
292: 
293:     Parameters
294:     ----------
295:     n : int
296:         Order of Bessel function
297:     nt : int
298:         Number of zeros to return
299: 
300:     References
301:     ----------
302:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
303:            Functions", John Wiley and Sons, 1996, chapter 5.
304:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
305: 
306:     '''
307:     return jnyn_zeros(n, nt)[3]
308: 
309: 
310: def y0_zeros(nt, complex=False):
311:     '''Compute nt zeros of Bessel function Y0(z), and derivative at each zero.
312: 
313:     The derivatives are given by Y0'(z0) = -Y1(z0) at each zero z0.
314: 
315:     Parameters
316:     ----------
317:     nt : int
318:         Number of zeros to return
319:     complex : bool, default False
320:         Set to False to return only the real zeros; set to True to return only
321:         the complex zeros with negative real part and positive imaginary part.
322:         Note that the complex conjugates of the latter are also zeros of the
323:         function, but are not returned by this routine.
324: 
325:     Returns
326:     -------
327:     z0n : ndarray
328:         Location of nth zero of Y0(z)
329:     y0pz0n : ndarray
330:         Value of derivative Y0'(z0) for nth zero
331: 
332:     References
333:     ----------
334:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
335:            Functions", John Wiley and Sons, 1996, chapter 5.
336:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
337: 
338:     '''
339:     if not isscalar(nt) or (floor(nt) != nt) or (nt <= 0):
340:         raise ValueError("Arguments must be scalar positive integer.")
341:     kf = 0
342:     kc = not complex
343:     return specfun.cyzo(nt, kf, kc)
344: 
345: 
346: def y1_zeros(nt, complex=False):
347:     '''Compute nt zeros of Bessel function Y1(z), and derivative at each zero.
348: 
349:     The derivatives are given by Y1'(z1) = Y0(z1) at each zero z1.
350: 
351:     Parameters
352:     ----------
353:     nt : int
354:         Number of zeros to return
355:     complex : bool, default False
356:         Set to False to return only the real zeros; set to True to return only
357:         the complex zeros with negative real part and positive imaginary part.
358:         Note that the complex conjugates of the latter are also zeros of the
359:         function, but are not returned by this routine.
360: 
361:     Returns
362:     -------
363:     z1n : ndarray
364:         Location of nth zero of Y1(z)
365:     y1pz1n : ndarray
366:         Value of derivative Y1'(z1) for nth zero
367: 
368:     References
369:     ----------
370:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
371:            Functions", John Wiley and Sons, 1996, chapter 5.
372:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
373: 
374:     '''
375:     if not isscalar(nt) or (floor(nt) != nt) or (nt <= 0):
376:         raise ValueError("Arguments must be scalar positive integer.")
377:     kf = 1
378:     kc = not complex
379:     return specfun.cyzo(nt, kf, kc)
380: 
381: 
382: def y1p_zeros(nt, complex=False):
383:     '''Compute nt zeros of Bessel derivative Y1'(z), and value at each zero.
384: 
385:     The values are given by Y1(z1) at each z1 where Y1'(z1)=0.
386: 
387:     Parameters
388:     ----------
389:     nt : int
390:         Number of zeros to return
391:     complex : bool, default False
392:         Set to False to return only the real zeros; set to True to return only
393:         the complex zeros with negative real part and positive imaginary part.
394:         Note that the complex conjugates of the latter are also zeros of the
395:         function, but are not returned by this routine.
396: 
397:     Returns
398:     -------
399:     z1pn : ndarray
400:         Location of nth zero of Y1'(z)
401:     y1z1pn : ndarray
402:         Value of derivative Y1(z1) for nth zero
403: 
404:     References
405:     ----------
406:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
407:            Functions", John Wiley and Sons, 1996, chapter 5.
408:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
409: 
410:     '''
411:     if not isscalar(nt) or (floor(nt) != nt) or (nt <= 0):
412:         raise ValueError("Arguments must be scalar positive integer.")
413:     kf = 2
414:     kc = not complex
415:     return specfun.cyzo(nt, kf, kc)
416: 
417: 
418: def _bessel_diff_formula(v, z, n, L, phase):
419:     # from AMS55.
420:     # L(v, z) = J(v, z), Y(v, z), H1(v, z), H2(v, z), phase = -1
421:     # L(v, z) = I(v, z) or exp(v*pi*i)K(v, z), phase = 1
422:     # For K, you can pull out the exp((v-k)*pi*i) into the caller
423:     v = asarray(v)
424:     p = 1.0
425:     s = L(v-n, z)
426:     for i in xrange(1, n+1):
427:         p = phase * (p * (n-i+1)) / i   # = choose(k, i)
428:         s += p*L(v-n + i*2, z)
429:     return s / (2.**n)
430: 
431: 
432: bessel_diff_formula = np.deprecate(_bessel_diff_formula,
433:     message="bessel_diff_formula is a private function, do not use it!")
434: 
435: 
436: def jvp(v, z, n=1):
437:     '''Compute nth derivative of Bessel function Jv(z) with respect to `z`.
438: 
439:     Parameters
440:     ----------
441:     v : float
442:         Order of Bessel function
443:     z : complex
444:         Argument at which to evaluate the derivative
445:     n : int, default 1
446:         Order of derivative
447: 
448:     Notes
449:     -----
450:     The derivative is computed using the relation DLFM 10.6.7 [2]_.
451: 
452:     References
453:     ----------
454:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
455:            Functions", John Wiley and Sons, 1996, chapter 5.
456:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
457:     .. [2] NIST Digital Library of Mathematical Functions.
458:            http://dlmf.nist.gov/10.6.E7
459: 
460:     '''
461:     n = _nonneg_int_or_fail(n, 'n')
462:     if n == 0:
463:         return jv(v, z)
464:     else:
465:         return _bessel_diff_formula(v, z, n, jv, -1)
466: 
467: 
468: def yvp(v, z, n=1):
469:     '''Compute nth derivative of Bessel function Yv(z) with respect to `z`.
470: 
471:     Parameters
472:     ----------
473:     v : float
474:         Order of Bessel function
475:     z : complex
476:         Argument at which to evaluate the derivative
477:     n : int, default 1
478:         Order of derivative
479: 
480:     Notes
481:     -----
482:     The derivative is computed using the relation DLFM 10.6.7 [2]_.
483: 
484:     References
485:     ----------
486:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
487:            Functions", John Wiley and Sons, 1996, chapter 5.
488:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
489:     .. [2] NIST Digital Library of Mathematical Functions.
490:            http://dlmf.nist.gov/10.6.E7
491: 
492:     '''
493:     n = _nonneg_int_or_fail(n, 'n')
494:     if n == 0:
495:         return yv(v, z)
496:     else:
497:         return _bessel_diff_formula(v, z, n, yv, -1)
498: 
499: 
500: def kvp(v, z, n=1):
501:     '''Compute nth derivative of real-order modified Bessel function Kv(z)
502: 
503:     Kv(z) is the modified Bessel function of the second kind.
504:     Derivative is calculated with respect to `z`.
505: 
506:     Parameters
507:     ----------
508:     v : array_like of float
509:         Order of Bessel function
510:     z : array_like of complex
511:         Argument at which to evaluate the derivative
512:     n : int
513:         Order of derivative.  Default is first derivative.
514: 
515:     Returns
516:     -------
517:     out : ndarray
518:         The results
519: 
520:     Examples
521:     --------
522:     Calculate multiple values at order 5:
523: 
524:     >>> from scipy.special import kvp
525:     >>> kvp(5, (1, 2, 3+5j))
526:     array([-1849.0354+0.j    ,   -25.7735+0.j    ,    -0.0307+0.0875j])
527: 
528:     Calculate for a single value at multiple orders:
529: 
530:     >>> kvp((4, 4.5, 5), 1)
531:     array([ -184.0309,  -568.9585, -1849.0354])
532: 
533:     Notes
534:     -----
535:     The derivative is computed using the relation DLFM 10.29.5 [2]_.
536: 
537:     References
538:     ----------
539:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
540:            Functions", John Wiley and Sons, 1996, chapter 6.
541:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
542:     .. [2] NIST Digital Library of Mathematical Functions.
543:            http://dlmf.nist.gov/10.29.E5
544: 
545:     '''
546:     n = _nonneg_int_or_fail(n, 'n')
547:     if n == 0:
548:         return kv(v, z)
549:     else:
550:         return (-1)**n * _bessel_diff_formula(v, z, n, kv, 1)
551: 
552: 
553: def ivp(v, z, n=1):
554:     '''Compute nth derivative of modified Bessel function Iv(z) with respect
555:     to `z`.
556: 
557:     Parameters
558:     ----------
559:     v : array_like of float
560:         Order of Bessel function
561:     z : array_like of complex
562:         Argument at which to evaluate the derivative
563:     n : int, default 1
564:         Order of derivative
565: 
566:     Notes
567:     -----
568:     The derivative is computed using the relation DLFM 10.29.5 [2]_.
569: 
570:     References
571:     ----------
572:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
573:            Functions", John Wiley and Sons, 1996, chapter 6.
574:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
575:     .. [2] NIST Digital Library of Mathematical Functions.
576:            http://dlmf.nist.gov/10.29.E5
577: 
578:     '''
579:     n = _nonneg_int_or_fail(n, 'n')
580:     if n == 0:
581:         return iv(v, z)
582:     else:
583:         return _bessel_diff_formula(v, z, n, iv, 1)
584: 
585: 
586: def h1vp(v, z, n=1):
587:     '''Compute nth derivative of Hankel function H1v(z) with respect to `z`.
588: 
589:     Parameters
590:     ----------
591:     v : float
592:         Order of Hankel function
593:     z : complex
594:         Argument at which to evaluate the derivative
595:     n : int, default 1
596:         Order of derivative
597: 
598:     Notes
599:     -----
600:     The derivative is computed using the relation DLFM 10.6.7 [2]_.
601: 
602:     References
603:     ----------
604:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
605:            Functions", John Wiley and Sons, 1996, chapter 5.
606:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
607:     .. [2] NIST Digital Library of Mathematical Functions.
608:            http://dlmf.nist.gov/10.6.E7
609: 
610:     '''
611:     n = _nonneg_int_or_fail(n, 'n')
612:     if n == 0:
613:         return hankel1(v, z)
614:     else:
615:         return _bessel_diff_formula(v, z, n, hankel1, -1)
616: 
617: 
618: def h2vp(v, z, n=1):
619:     '''Compute nth derivative of Hankel function H2v(z) with respect to `z`.
620: 
621:     Parameters
622:     ----------
623:     v : float
624:         Order of Hankel function
625:     z : complex
626:         Argument at which to evaluate the derivative
627:     n : int, default 1
628:         Order of derivative
629: 
630:     Notes
631:     -----
632:     The derivative is computed using the relation DLFM 10.6.7 [2]_.
633: 
634:     References
635:     ----------
636:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
637:            Functions", John Wiley and Sons, 1996, chapter 5.
638:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
639:     .. [2] NIST Digital Library of Mathematical Functions.
640:            http://dlmf.nist.gov/10.6.E7
641: 
642:     '''
643:     n = _nonneg_int_or_fail(n, 'n')
644:     if n == 0:
645:         return hankel2(v, z)
646:     else:
647:         return _bessel_diff_formula(v, z, n, hankel2, -1)
648: 
649: 
650: def riccati_jn(n, x):
651:     r'''Compute Ricatti-Bessel function of the first kind and its derivative.
652: 
653:     The Ricatti-Bessel function of the first kind is defined as :math:`x
654:     j_n(x)`, where :math:`j_n` is the spherical Bessel function of the first
655:     kind of order :math:`n`.
656: 
657:     This function computes the value and first derivative of the
658:     Ricatti-Bessel function for all orders up to and including `n`.
659: 
660:     Parameters
661:     ----------
662:     n : int
663:         Maximum order of function to compute
664:     x : float
665:         Argument at which to evaluate
666: 
667:     Returns
668:     -------
669:     jn : ndarray
670:         Value of j0(x), ..., jn(x)
671:     jnp : ndarray
672:         First derivative j0'(x), ..., jn'(x)
673: 
674:     Notes
675:     -----
676:     The computation is carried out via backward recurrence, using the
677:     relation DLMF 10.51.1 [2]_.
678: 
679:     Wrapper for a Fortran routine created by Shanjie Zhang and Jianming
680:     Jin [1]_.
681: 
682:     References
683:     ----------
684:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
685:            Functions", John Wiley and Sons, 1996.
686:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
687:     .. [2] NIST Digital Library of Mathematical Functions.
688:            http://dlmf.nist.gov/10.51.E1
689: 
690:     '''
691:     if not (isscalar(n) and isscalar(x)):
692:         raise ValueError("arguments must be scalars.")
693:     n = _nonneg_int_or_fail(n, 'n', strict=False)
694:     if (n == 0):
695:         n1 = 1
696:     else:
697:         n1 = n
698:     nm, jn, jnp = specfun.rctj(n1, x)
699:     return jn[:(n+1)], jnp[:(n+1)]
700: 
701: 
702: def riccati_yn(n, x):
703:     '''Compute Ricatti-Bessel function of the second kind and its derivative.
704: 
705:     The Ricatti-Bessel function of the second kind is defined as :math:`x
706:     y_n(x)`, where :math:`y_n` is the spherical Bessel function of the second
707:     kind of order :math:`n`.
708: 
709:     This function computes the value and first derivative of the function for
710:     all orders up to and including `n`.
711: 
712:     Parameters
713:     ----------
714:     n : int
715:         Maximum order of function to compute
716:     x : float
717:         Argument at which to evaluate
718: 
719:     Returns
720:     -------
721:     yn : ndarray
722:         Value of y0(x), ..., yn(x)
723:     ynp : ndarray
724:         First derivative y0'(x), ..., yn'(x)
725: 
726:     Notes
727:     -----
728:     The computation is carried out via ascending recurrence, using the
729:     relation DLMF 10.51.1 [2]_.
730: 
731:     Wrapper for a Fortran routine created by Shanjie Zhang and Jianming
732:     Jin [1]_.
733: 
734:     References
735:     ----------
736:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
737:            Functions", John Wiley and Sons, 1996.
738:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
739:     .. [2] NIST Digital Library of Mathematical Functions.
740:            http://dlmf.nist.gov/10.51.E1
741: 
742:     '''
743:     if not (isscalar(n) and isscalar(x)):
744:         raise ValueError("arguments must be scalars.")
745:     n = _nonneg_int_or_fail(n, 'n', strict=False)
746:     if (n == 0):
747:         n1 = 1
748:     else:
749:         n1 = n
750:     nm, jn, jnp = specfun.rcty(n1, x)
751:     return jn[:(n+1)], jnp[:(n+1)]
752: 
753: 
754: def erfinv(y):
755:     '''Inverse function for erf.
756:     '''
757:     return ndtri((y+1)/2.0)/sqrt(2)
758: 
759: 
760: def erfcinv(y):
761:     '''Inverse function for erfc.
762:     '''
763:     return -ndtri(0.5*y)/sqrt(2)
764: 
765: 
766: def erf_zeros(nt):
767:     '''Compute nt complex zeros of error function erf(z).
768: 
769:     References
770:     ----------
771:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
772:            Functions", John Wiley and Sons, 1996.
773:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
774: 
775:     '''
776:     if (floor(nt) != nt) or (nt <= 0) or not isscalar(nt):
777:         raise ValueError("Argument must be positive scalar integer.")
778:     return specfun.cerzo(nt)
779: 
780: 
781: def fresnelc_zeros(nt):
782:     '''Compute nt complex zeros of cosine Fresnel integral C(z).
783: 
784:     References
785:     ----------
786:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
787:            Functions", John Wiley and Sons, 1996.
788:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
789: 
790:     '''
791:     if (floor(nt) != nt) or (nt <= 0) or not isscalar(nt):
792:         raise ValueError("Argument must be positive scalar integer.")
793:     return specfun.fcszo(1, nt)
794: 
795: 
796: def fresnels_zeros(nt):
797:     '''Compute nt complex zeros of sine Fresnel integral S(z).
798: 
799:     References
800:     ----------
801:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
802:            Functions", John Wiley and Sons, 1996.
803:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
804: 
805:     '''
806:     if (floor(nt) != nt) or (nt <= 0) or not isscalar(nt):
807:         raise ValueError("Argument must be positive scalar integer.")
808:     return specfun.fcszo(2, nt)
809: 
810: 
811: def fresnel_zeros(nt):
812:     '''Compute nt complex zeros of sine and cosine Fresnel integrals S(z) and C(z).
813: 
814:     References
815:     ----------
816:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
817:            Functions", John Wiley and Sons, 1996.
818:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
819: 
820:     '''
821:     if (floor(nt) != nt) or (nt <= 0) or not isscalar(nt):
822:         raise ValueError("Argument must be positive scalar integer.")
823:     return specfun.fcszo(2, nt), specfun.fcszo(1, nt)
824: 
825: 
826: def assoc_laguerre(x, n, k=0.0):
827:     '''Compute the generalized (associated) Laguerre polynomial of degree n and order k.
828: 
829:     The polynomial :math:`L^{(k)}_n(x)` is orthogonal over ``[0, inf)``,
830:     with weighting function ``exp(-x) * x**k`` with ``k > -1``.
831: 
832:     Notes
833:     -----
834:     `assoc_laguerre` is a simple wrapper around `eval_genlaguerre`, with
835:     reversed argument order ``(x, n, k=0.0) --> (n, k, x)``.
836: 
837:     '''
838:     return orthogonal.eval_genlaguerre(n, k, x)
839: 
840: digamma = psi
841: 
842: 
843: def polygamma(n, x):
844:     '''Polygamma function n.
845: 
846:     This is the nth derivative of the digamma (psi) function.
847: 
848:     Parameters
849:     ----------
850:     n : array_like of int
851:         The order of the derivative of `psi`.
852:     x : array_like
853:         Where to evaluate the polygamma function.
854: 
855:     Returns
856:     -------
857:     polygamma : ndarray
858:         The result.
859: 
860:     Examples
861:     --------
862:     >>> from scipy import special
863:     >>> x = [2, 3, 25.5]
864:     >>> special.polygamma(1, x)
865:     array([ 0.64493407,  0.39493407,  0.03999467])
866:     >>> special.polygamma(0, x) == special.psi(x)
867:     array([ True,  True,  True], dtype=bool)
868: 
869:     '''
870:     n, x = asarray(n), asarray(x)
871:     fac2 = (-1.0)**(n+1) * gamma(n+1.0) * zeta(n+1, x)
872:     return where(n == 0, psi(x), fac2)
873: 
874: 
875: def mathieu_even_coef(m, q):
876:     r'''Fourier coefficients for even Mathieu and modified Mathieu functions.
877: 
878:     The Fourier series of the even solutions of the Mathieu differential
879:     equation are of the form
880: 
881:     .. math:: \mathrm{ce}_{2n}(z, q) = \sum_{k=0}^{\infty} A_{(2n)}^{(2k)} \cos 2kz
882: 
883:     .. math:: \mathrm{ce}_{2n+1}(z, q) = \sum_{k=0}^{\infty} A_{(2n+1)}^{(2k+1)} \cos (2k+1)z
884: 
885:     This function returns the coefficients :math:`A_{(2n)}^{(2k)}` for even
886:     input m=2n, and the coefficients :math:`A_{(2n+1)}^{(2k+1)}` for odd input
887:     m=2n+1.
888: 
889:     Parameters
890:     ----------
891:     m : int
892:         Order of Mathieu functions.  Must be non-negative.
893:     q : float (>=0)
894:         Parameter of Mathieu functions.  Must be non-negative.
895: 
896:     Returns
897:     -------
898:     Ak : ndarray
899:         Even or odd Fourier coefficients, corresponding to even or odd m.
900: 
901:     References
902:     ----------
903:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
904:            Functions", John Wiley and Sons, 1996.
905:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
906:     .. [2] NIST Digital Library of Mathematical Functions
907:            http://dlmf.nist.gov/28.4#i
908: 
909:     '''
910:     if not (isscalar(m) and isscalar(q)):
911:         raise ValueError("m and q must be scalars.")
912:     if (q < 0):
913:         raise ValueError("q >=0")
914:     if (m != floor(m)) or (m < 0):
915:         raise ValueError("m must be an integer >=0.")
916: 
917:     if (q <= 1):
918:         qm = 7.5 + 56.1*sqrt(q) - 134.7*q + 90.7*sqrt(q)*q
919:     else:
920:         qm = 17.0 + 3.1*sqrt(q) - .126*q + .0037*sqrt(q)*q
921:     km = int(qm + 0.5*m)
922:     if km > 251:
923:         print("Warning, too many predicted coefficients.")
924:     kd = 1
925:     m = int(floor(m))
926:     if m % 2:
927:         kd = 2
928: 
929:     a = mathieu_a(m, q)
930:     fc = specfun.fcoef(kd, m, q, a)
931:     return fc[:km]
932: 
933: 
934: def mathieu_odd_coef(m, q):
935:     r'''Fourier coefficients for even Mathieu and modified Mathieu functions.
936: 
937:     The Fourier series of the odd solutions of the Mathieu differential
938:     equation are of the form
939: 
940:     .. math:: \mathrm{se}_{2n+1}(z, q) = \sum_{k=0}^{\infty} B_{(2n+1)}^{(2k+1)} \sin (2k+1)z
941: 
942:     .. math:: \mathrm{se}_{2n+2}(z, q) = \sum_{k=0}^{\infty} B_{(2n+2)}^{(2k+2)} \sin (2k+2)z
943: 
944:     This function returns the coefficients :math:`B_{(2n+2)}^{(2k+2)}` for even
945:     input m=2n+2, and the coefficients :math:`B_{(2n+1)}^{(2k+1)}` for odd
946:     input m=2n+1.
947: 
948:     Parameters
949:     ----------
950:     m : int
951:         Order of Mathieu functions.  Must be non-negative.
952:     q : float (>=0)
953:         Parameter of Mathieu functions.  Must be non-negative.
954: 
955:     Returns
956:     -------
957:     Bk : ndarray
958:         Even or odd Fourier coefficients, corresponding to even or odd m.
959: 
960:     References
961:     ----------
962:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
963:            Functions", John Wiley and Sons, 1996.
964:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
965: 
966:     '''
967:     if not (isscalar(m) and isscalar(q)):
968:         raise ValueError("m and q must be scalars.")
969:     if (q < 0):
970:         raise ValueError("q >=0")
971:     if (m != floor(m)) or (m <= 0):
972:         raise ValueError("m must be an integer > 0")
973: 
974:     if (q <= 1):
975:         qm = 7.5 + 56.1*sqrt(q) - 134.7*q + 90.7*sqrt(q)*q
976:     else:
977:         qm = 17.0 + 3.1*sqrt(q) - .126*q + .0037*sqrt(q)*q
978:     km = int(qm + 0.5*m)
979:     if km > 251:
980:         print("Warning, too many predicted coefficients.")
981:     kd = 4
982:     m = int(floor(m))
983:     if m % 2:
984:         kd = 3
985: 
986:     b = mathieu_b(m, q)
987:     fc = specfun.fcoef(kd, m, q, b)
988:     return fc[:km]
989: 
990: 
991: def lpmn(m, n, z):
992:     '''Sequence of associated Legendre functions of the first kind.
993: 
994:     Computes the associated Legendre function of the first kind of order m and
995:     degree n, ``Pmn(z)`` = :math:`P_n^m(z)`, and its derivative, ``Pmn'(z)``.
996:     Returns two arrays of size ``(m+1, n+1)`` containing ``Pmn(z)`` and
997:     ``Pmn'(z)`` for all orders from ``0..m`` and degrees from ``0..n``.
998: 
999:     This function takes a real argument ``z``. For complex arguments ``z``
1000:     use clpmn instead.
1001: 
1002:     Parameters
1003:     ----------
1004:     m : int
1005:        ``|m| <= n``; the order of the Legendre function.
1006:     n : int
1007:        where ``n >= 0``; the degree of the Legendre function.  Often
1008:        called ``l`` (lower case L) in descriptions of the associated
1009:        Legendre function
1010:     z : float
1011:         Input value.
1012: 
1013:     Returns
1014:     -------
1015:     Pmn_z : (m+1, n+1) array
1016:        Values for all orders 0..m and degrees 0..n
1017:     Pmn_d_z : (m+1, n+1) array
1018:        Derivatives for all orders 0..m and degrees 0..n
1019: 
1020:     See Also
1021:     --------
1022:     clpmn: associated Legendre functions of the first kind for complex z
1023: 
1024:     Notes
1025:     -----
1026:     In the interval (-1, 1), Ferrer's function of the first kind is
1027:     returned. The phase convention used for the intervals (1, inf)
1028:     and (-inf, -1) is such that the result is always real.
1029: 
1030:     References
1031:     ----------
1032:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
1033:            Functions", John Wiley and Sons, 1996.
1034:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
1035:     .. [2] NIST Digital Library of Mathematical Functions
1036:            http://dlmf.nist.gov/14.3
1037: 
1038:     '''
1039:     if not isscalar(m) or (abs(m) > n):
1040:         raise ValueError("m must be <= n.")
1041:     if not isscalar(n) or (n < 0):
1042:         raise ValueError("n must be a non-negative integer.")
1043:     if not isscalar(z):
1044:         raise ValueError("z must be scalar.")
1045:     if iscomplex(z):
1046:         raise ValueError("Argument must be real. Use clpmn instead.")
1047:     if (m < 0):
1048:         mp = -m
1049:         mf, nf = mgrid[0:mp+1, 0:n+1]
1050:         with ufuncs.errstate(all='ignore'):
1051:             if abs(z) < 1:
1052:                 # Ferrer function; DLMF 14.9.3
1053:                 fixarr = where(mf > nf, 0.0,
1054:                                (-1)**mf * gamma(nf-mf+1) / gamma(nf+mf+1))
1055:             else:
1056:                 # Match to clpmn; DLMF 14.9.13
1057:                 fixarr = where(mf > nf, 0.0, gamma(nf-mf+1) / gamma(nf+mf+1))
1058:     else:
1059:         mp = m
1060:     p, pd = specfun.lpmn(mp, n, z)
1061:     if (m < 0):
1062:         p = p * fixarr
1063:         pd = pd * fixarr
1064:     return p, pd
1065: 
1066: 
1067: def clpmn(m, n, z, type=3):
1068:     '''Associated Legendre function of the first kind for complex arguments.
1069: 
1070:     Computes the associated Legendre function of the first kind of order m and
1071:     degree n, ``Pmn(z)`` = :math:`P_n^m(z)`, and its derivative, ``Pmn'(z)``.
1072:     Returns two arrays of size ``(m+1, n+1)`` containing ``Pmn(z)`` and
1073:     ``Pmn'(z)`` for all orders from ``0..m`` and degrees from ``0..n``.
1074: 
1075:     Parameters
1076:     ----------
1077:     m : int
1078:        ``|m| <= n``; the order of the Legendre function.
1079:     n : int
1080:        where ``n >= 0``; the degree of the Legendre function.  Often
1081:        called ``l`` (lower case L) in descriptions of the associated
1082:        Legendre function
1083:     z : float or complex
1084:         Input value.
1085:     type : int, optional
1086:        takes values 2 or 3
1087:        2: cut on the real axis ``|x| > 1``
1088:        3: cut on the real axis ``-1 < x < 1`` (default)
1089: 
1090:     Returns
1091:     -------
1092:     Pmn_z : (m+1, n+1) array
1093:        Values for all orders ``0..m`` and degrees ``0..n``
1094:     Pmn_d_z : (m+1, n+1) array
1095:        Derivatives for all orders ``0..m`` and degrees ``0..n``
1096: 
1097:     See Also
1098:     --------
1099:     lpmn: associated Legendre functions of the first kind for real z
1100: 
1101:     Notes
1102:     -----
1103:     By default, i.e. for ``type=3``, phase conventions are chosen according
1104:     to [1]_ such that the function is analytic. The cut lies on the interval
1105:     (-1, 1). Approaching the cut from above or below in general yields a phase
1106:     factor with respect to Ferrer's function of the first kind
1107:     (cf. `lpmn`).
1108: 
1109:     For ``type=2`` a cut at ``|x| > 1`` is chosen. Approaching the real values
1110:     on the interval (-1, 1) in the complex plane yields Ferrer's function
1111:     of the first kind.
1112: 
1113:     References
1114:     ----------
1115:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
1116:            Functions", John Wiley and Sons, 1996.
1117:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
1118:     .. [2] NIST Digital Library of Mathematical Functions
1119:            http://dlmf.nist.gov/14.21
1120: 
1121:     '''
1122:     if not isscalar(m) or (abs(m) > n):
1123:         raise ValueError("m must be <= n.")
1124:     if not isscalar(n) or (n < 0):
1125:         raise ValueError("n must be a non-negative integer.")
1126:     if not isscalar(z):
1127:         raise ValueError("z must be scalar.")
1128:     if not(type == 2 or type == 3):
1129:         raise ValueError("type must be either 2 or 3.")
1130:     if (m < 0):
1131:         mp = -m
1132:         mf, nf = mgrid[0:mp+1, 0:n+1]
1133:         with ufuncs.errstate(all='ignore'):
1134:             if type == 2:
1135:                 fixarr = where(mf > nf, 0.0,
1136:                                (-1)**mf * gamma(nf-mf+1) / gamma(nf+mf+1))
1137:             else:
1138:                 fixarr = where(mf > nf, 0.0, gamma(nf-mf+1) / gamma(nf+mf+1))
1139:     else:
1140:         mp = m
1141:     p, pd = specfun.clpmn(mp, n, real(z), imag(z), type)
1142:     if (m < 0):
1143:         p = p * fixarr
1144:         pd = pd * fixarr
1145:     return p, pd
1146: 
1147: 
1148: def lqmn(m, n, z):
1149:     '''Sequence of associated Legendre functions of the second kind.
1150: 
1151:     Computes the associated Legendre function of the second kind of order m and
1152:     degree n, ``Qmn(z)`` = :math:`Q_n^m(z)`, and its derivative, ``Qmn'(z)``.
1153:     Returns two arrays of size ``(m+1, n+1)`` containing ``Qmn(z)`` and
1154:     ``Qmn'(z)`` for all orders from ``0..m`` and degrees from ``0..n``.
1155: 
1156:     Parameters
1157:     ----------
1158:     m : int
1159:        ``|m| <= n``; the order of the Legendre function.
1160:     n : int
1161:        where ``n >= 0``; the degree of the Legendre function.  Often
1162:        called ``l`` (lower case L) in descriptions of the associated
1163:        Legendre function
1164:     z : complex
1165:         Input value.
1166: 
1167:     Returns
1168:     -------
1169:     Qmn_z : (m+1, n+1) array
1170:        Values for all orders 0..m and degrees 0..n
1171:     Qmn_d_z : (m+1, n+1) array
1172:        Derivatives for all orders 0..m and degrees 0..n
1173: 
1174:     References
1175:     ----------
1176:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
1177:            Functions", John Wiley and Sons, 1996.
1178:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
1179: 
1180:     '''
1181:     if not isscalar(m) or (m < 0):
1182:         raise ValueError("m must be a non-negative integer.")
1183:     if not isscalar(n) or (n < 0):
1184:         raise ValueError("n must be a non-negative integer.")
1185:     if not isscalar(z):
1186:         raise ValueError("z must be scalar.")
1187:     m = int(m)
1188:     n = int(n)
1189: 
1190:     # Ensure neither m nor n == 0
1191:     mm = max(1, m)
1192:     nn = max(1, n)
1193: 
1194:     if iscomplex(z):
1195:         q, qd = specfun.clqmn(mm, nn, z)
1196:     else:
1197:         q, qd = specfun.lqmn(mm, nn, z)
1198:     return q[:(m+1), :(n+1)], qd[:(m+1), :(n+1)]
1199: 
1200: 
1201: def bernoulli(n):
1202:     '''Bernoulli numbers B0..Bn (inclusive).
1203: 
1204:     References
1205:     ----------
1206:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
1207:            Functions", John Wiley and Sons, 1996.
1208:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
1209: 
1210:     '''
1211:     if not isscalar(n) or (n < 0):
1212:         raise ValueError("n must be a non-negative integer.")
1213:     n = int(n)
1214:     if (n < 2):
1215:         n1 = 2
1216:     else:
1217:         n1 = n
1218:     return specfun.bernob(int(n1))[:(n+1)]
1219: 
1220: 
1221: def euler(n):
1222:     '''Euler numbers E0..En (inclusive).
1223: 
1224:     References
1225:     ----------
1226:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
1227:            Functions", John Wiley and Sons, 1996.
1228:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
1229: 
1230:     '''
1231:     if not isscalar(n) or (n < 0):
1232:         raise ValueError("n must be a non-negative integer.")
1233:     n = int(n)
1234:     if (n < 2):
1235:         n1 = 2
1236:     else:
1237:         n1 = n
1238:     return specfun.eulerb(n1)[:(n+1)]
1239: 
1240: 
1241: def lpn(n, z):
1242:     '''Legendre function of the first kind.
1243: 
1244:     Compute sequence of Legendre functions of the first kind (polynomials),
1245:     Pn(z) and derivatives for all degrees from 0 to n (inclusive).
1246: 
1247:     See also special.legendre for polynomial class.
1248: 
1249:     References
1250:     ----------
1251:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
1252:            Functions", John Wiley and Sons, 1996.
1253:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
1254: 
1255:     '''
1256:     if not (isscalar(n) and isscalar(z)):
1257:         raise ValueError("arguments must be scalars.")
1258:     n = _nonneg_int_or_fail(n, 'n', strict=False)
1259:     if (n < 1):
1260:         n1 = 1
1261:     else:
1262:         n1 = n
1263:     if iscomplex(z):
1264:         pn, pd = specfun.clpn(n1, z)
1265:     else:
1266:         pn, pd = specfun.lpn(n1, z)
1267:     return pn[:(n+1)], pd[:(n+1)]
1268: 
1269: 
1270: def lqn(n, z):
1271:     '''Legendre function of the second kind.
1272: 
1273:     Compute sequence of Legendre functions of the second kind, Qn(z) and
1274:     derivatives for all degrees from 0 to n (inclusive).
1275: 
1276:     References
1277:     ----------
1278:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
1279:            Functions", John Wiley and Sons, 1996.
1280:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
1281: 
1282:     '''
1283:     if not (isscalar(n) and isscalar(z)):
1284:         raise ValueError("arguments must be scalars.")
1285:     n = _nonneg_int_or_fail(n, 'n', strict=False)
1286:     if (n < 1):
1287:         n1 = 1
1288:     else:
1289:         n1 = n
1290:     if iscomplex(z):
1291:         qn, qd = specfun.clqn(n1, z)
1292:     else:
1293:         qn, qd = specfun.lqnb(n1, z)
1294:     return qn[:(n+1)], qd[:(n+1)]
1295: 
1296: 
1297: def ai_zeros(nt):
1298:     '''
1299:     Compute `nt` zeros and values of the Airy function Ai and its derivative.
1300: 
1301:     Computes the first `nt` zeros, `a`, of the Airy function Ai(x);
1302:     first `nt` zeros, `ap`, of the derivative of the Airy function Ai'(x);
1303:     the corresponding values Ai(a');
1304:     and the corresponding values Ai'(a).
1305: 
1306:     Parameters
1307:     ----------
1308:     nt : int
1309:         Number of zeros to compute
1310: 
1311:     Returns
1312:     -------
1313:     a : ndarray
1314:         First `nt` zeros of Ai(x)
1315:     ap : ndarray
1316:         First `nt` zeros of Ai'(x)
1317:     ai : ndarray
1318:         Values of Ai(x) evaluated at first `nt` zeros of Ai'(x)
1319:     aip : ndarray
1320:         Values of Ai'(x) evaluated at first `nt` zeros of Ai(x)
1321: 
1322:     References
1323:     ----------
1324:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
1325:            Functions", John Wiley and Sons, 1996.
1326:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
1327: 
1328:     '''
1329:     kf = 1
1330:     if not isscalar(nt) or (floor(nt) != nt) or (nt <= 0):
1331:         raise ValueError("nt must be a positive integer scalar.")
1332:     return specfun.airyzo(nt, kf)
1333: 
1334: 
1335: def bi_zeros(nt):
1336:     '''
1337:     Compute `nt` zeros and values of the Airy function Bi and its derivative.
1338: 
1339:     Computes the first `nt` zeros, b, of the Airy function Bi(x);
1340:     first `nt` zeros, b', of the derivative of the Airy function Bi'(x);
1341:     the corresponding values Bi(b');
1342:     and the corresponding values Bi'(b).
1343: 
1344:     Parameters
1345:     ----------
1346:     nt : int
1347:         Number of zeros to compute
1348: 
1349:     Returns
1350:     -------
1351:     b : ndarray
1352:         First `nt` zeros of Bi(x)
1353:     bp : ndarray
1354:         First `nt` zeros of Bi'(x)
1355:     bi : ndarray
1356:         Values of Bi(x) evaluated at first `nt` zeros of Bi'(x)
1357:     bip : ndarray
1358:         Values of Bi'(x) evaluated at first `nt` zeros of Bi(x)
1359: 
1360:     References
1361:     ----------
1362:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
1363:            Functions", John Wiley and Sons, 1996.
1364:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
1365: 
1366:     '''
1367:     kf = 2
1368:     if not isscalar(nt) or (floor(nt) != nt) or (nt <= 0):
1369:         raise ValueError("nt must be a positive integer scalar.")
1370:     return specfun.airyzo(nt, kf)
1371: 
1372: 
1373: def lmbda(v, x):
1374:     r'''Jahnke-Emden Lambda function, Lambdav(x).
1375: 
1376:     This function is defined as [2]_,
1377: 
1378:     .. math:: \Lambda_v(x) = \Gamma(v+1) \frac{J_v(x)}{(x/2)^v},
1379: 
1380:     where :math:`\Gamma` is the gamma function and :math:`J_v` is the
1381:     Bessel function of the first kind.
1382: 
1383:     Parameters
1384:     ----------
1385:     v : float
1386:         Order of the Lambda function
1387:     x : float
1388:         Value at which to evaluate the function and derivatives
1389: 
1390:     Returns
1391:     -------
1392:     vl : ndarray
1393:         Values of Lambda_vi(x), for vi=v-int(v), vi=1+v-int(v), ..., vi=v.
1394:     dl : ndarray
1395:         Derivatives Lambda_vi'(x), for vi=v-int(v), vi=1+v-int(v), ..., vi=v.
1396: 
1397:     References
1398:     ----------
1399:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
1400:            Functions", John Wiley and Sons, 1996.
1401:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
1402:     .. [2] Jahnke, E. and Emde, F. "Tables of Functions with Formulae and
1403:            Curves" (4th ed.), Dover, 1945
1404:     '''
1405:     if not (isscalar(v) and isscalar(x)):
1406:         raise ValueError("arguments must be scalars.")
1407:     if (v < 0):
1408:         raise ValueError("argument must be > 0.")
1409:     n = int(v)
1410:     v0 = v - n
1411:     if (n < 1):
1412:         n1 = 1
1413:     else:
1414:         n1 = n
1415:     v1 = n1 + v0
1416:     if (v != floor(v)):
1417:         vm, vl, dl = specfun.lamv(v1, x)
1418:     else:
1419:         vm, vl, dl = specfun.lamn(v1, x)
1420:     return vl[:(n+1)], dl[:(n+1)]
1421: 
1422: 
1423: def pbdv_seq(v, x):
1424:     '''Parabolic cylinder functions Dv(x) and derivatives.
1425: 
1426:     Parameters
1427:     ----------
1428:     v : float
1429:         Order of the parabolic cylinder function
1430:     x : float
1431:         Value at which to evaluate the function and derivatives
1432: 
1433:     Returns
1434:     -------
1435:     dv : ndarray
1436:         Values of D_vi(x), for vi=v-int(v), vi=1+v-int(v), ..., vi=v.
1437:     dp : ndarray
1438:         Derivatives D_vi'(x), for vi=v-int(v), vi=1+v-int(v), ..., vi=v.
1439: 
1440:     References
1441:     ----------
1442:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
1443:            Functions", John Wiley and Sons, 1996, chapter 13.
1444:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
1445: 
1446:     '''
1447:     if not (isscalar(v) and isscalar(x)):
1448:         raise ValueError("arguments must be scalars.")
1449:     n = int(v)
1450:     v0 = v-n
1451:     if (n < 1):
1452:         n1 = 1
1453:     else:
1454:         n1 = n
1455:     v1 = n1 + v0
1456:     dv, dp, pdf, pdd = specfun.pbdv(v1, x)
1457:     return dv[:n1+1], dp[:n1+1]
1458: 
1459: 
1460: def pbvv_seq(v, x):
1461:     '''Parabolic cylinder functions Vv(x) and derivatives.
1462: 
1463:     Parameters
1464:     ----------
1465:     v : float
1466:         Order of the parabolic cylinder function
1467:     x : float
1468:         Value at which to evaluate the function and derivatives
1469: 
1470:     Returns
1471:     -------
1472:     dv : ndarray
1473:         Values of V_vi(x), for vi=v-int(v), vi=1+v-int(v), ..., vi=v.
1474:     dp : ndarray
1475:         Derivatives V_vi'(x), for vi=v-int(v), vi=1+v-int(v), ..., vi=v.
1476: 
1477:     References
1478:     ----------
1479:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
1480:            Functions", John Wiley and Sons, 1996, chapter 13.
1481:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
1482: 
1483:     '''
1484:     if not (isscalar(v) and isscalar(x)):
1485:         raise ValueError("arguments must be scalars.")
1486:     n = int(v)
1487:     v0 = v-n
1488:     if (n <= 1):
1489:         n1 = 1
1490:     else:
1491:         n1 = n
1492:     v1 = n1 + v0
1493:     dv, dp, pdf, pdd = specfun.pbvv(v1, x)
1494:     return dv[:n1+1], dp[:n1+1]
1495: 
1496: 
1497: def pbdn_seq(n, z):
1498:     '''Parabolic cylinder functions Dn(z) and derivatives.
1499: 
1500:     Parameters
1501:     ----------
1502:     n : int
1503:         Order of the parabolic cylinder function
1504:     z : complex
1505:         Value at which to evaluate the function and derivatives
1506: 
1507:     Returns
1508:     -------
1509:     dv : ndarray
1510:         Values of D_i(z), for i=0, ..., i=n.
1511:     dp : ndarray
1512:         Derivatives D_i'(z), for i=0, ..., i=n.
1513: 
1514:     References
1515:     ----------
1516:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
1517:            Functions", John Wiley and Sons, 1996, chapter 13.
1518:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
1519: 
1520:     '''
1521:     if not (isscalar(n) and isscalar(z)):
1522:         raise ValueError("arguments must be scalars.")
1523:     if (floor(n) != n):
1524:         raise ValueError("n must be an integer.")
1525:     if (abs(n) <= 1):
1526:         n1 = 1
1527:     else:
1528:         n1 = n
1529:     cpb, cpd = specfun.cpbdn(n1, z)
1530:     return cpb[:n1+1], cpd[:n1+1]
1531: 
1532: 
1533: def ber_zeros(nt):
1534:     '''Compute nt zeros of the Kelvin function ber(x).
1535: 
1536:     References
1537:     ----------
1538:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
1539:            Functions", John Wiley and Sons, 1996.
1540:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
1541: 
1542:     '''
1543:     if not isscalar(nt) or (floor(nt) != nt) or (nt <= 0):
1544:         raise ValueError("nt must be positive integer scalar.")
1545:     return specfun.klvnzo(nt, 1)
1546: 
1547: 
1548: def bei_zeros(nt):
1549:     '''Compute nt zeros of the Kelvin function bei(x).
1550: 
1551:     References
1552:     ----------
1553:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
1554:            Functions", John Wiley and Sons, 1996.
1555:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
1556: 
1557:     '''
1558:     if not isscalar(nt) or (floor(nt) != nt) or (nt <= 0):
1559:         raise ValueError("nt must be positive integer scalar.")
1560:     return specfun.klvnzo(nt, 2)
1561: 
1562: 
1563: def ker_zeros(nt):
1564:     '''Compute nt zeros of the Kelvin function ker(x).
1565: 
1566:     References
1567:     ----------
1568:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
1569:            Functions", John Wiley and Sons, 1996.
1570:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
1571: 
1572:     '''
1573:     if not isscalar(nt) or (floor(nt) != nt) or (nt <= 0):
1574:         raise ValueError("nt must be positive integer scalar.")
1575:     return specfun.klvnzo(nt, 3)
1576: 
1577: 
1578: def kei_zeros(nt):
1579:     '''Compute nt zeros of the Kelvin function kei(x).
1580:     '''
1581:     if not isscalar(nt) or (floor(nt) != nt) or (nt <= 0):
1582:         raise ValueError("nt must be positive integer scalar.")
1583:     return specfun.klvnzo(nt, 4)
1584: 
1585: 
1586: def berp_zeros(nt):
1587:     '''Compute nt zeros of the Kelvin function ber'(x).
1588: 
1589:     References
1590:     ----------
1591:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
1592:            Functions", John Wiley and Sons, 1996.
1593:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
1594: 
1595:     '''
1596:     if not isscalar(nt) or (floor(nt) != nt) or (nt <= 0):
1597:         raise ValueError("nt must be positive integer scalar.")
1598:     return specfun.klvnzo(nt, 5)
1599: 
1600: 
1601: def beip_zeros(nt):
1602:     '''Compute nt zeros of the Kelvin function bei'(x).
1603: 
1604:     References
1605:     ----------
1606:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
1607:            Functions", John Wiley and Sons, 1996.
1608:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
1609: 
1610:     '''
1611:     if not isscalar(nt) or (floor(nt) != nt) or (nt <= 0):
1612:         raise ValueError("nt must be positive integer scalar.")
1613:     return specfun.klvnzo(nt, 6)
1614: 
1615: 
1616: def kerp_zeros(nt):
1617:     '''Compute nt zeros of the Kelvin function ker'(x).
1618: 
1619:     References
1620:     ----------
1621:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
1622:            Functions", John Wiley and Sons, 1996.
1623:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
1624: 
1625:     '''
1626:     if not isscalar(nt) or (floor(nt) != nt) or (nt <= 0):
1627:         raise ValueError("nt must be positive integer scalar.")
1628:     return specfun.klvnzo(nt, 7)
1629: 
1630: 
1631: def keip_zeros(nt):
1632:     '''Compute nt zeros of the Kelvin function kei'(x).
1633: 
1634:     References
1635:     ----------
1636:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
1637:            Functions", John Wiley and Sons, 1996.
1638:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
1639: 
1640:     '''
1641:     if not isscalar(nt) or (floor(nt) != nt) or (nt <= 0):
1642:         raise ValueError("nt must be positive integer scalar.")
1643:     return specfun.klvnzo(nt, 8)
1644: 
1645: 
1646: def kelvin_zeros(nt):
1647:     '''Compute nt zeros of all Kelvin functions.
1648: 
1649:     Returned in a length-8 tuple of arrays of length nt.  The tuple contains
1650:     the arrays of zeros of (ber, bei, ker, kei, ber', bei', ker', kei').
1651: 
1652:     References
1653:     ----------
1654:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
1655:            Functions", John Wiley and Sons, 1996.
1656:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
1657: 
1658:     '''
1659:     if not isscalar(nt) or (floor(nt) != nt) or (nt <= 0):
1660:         raise ValueError("nt must be positive integer scalar.")
1661:     return (specfun.klvnzo(nt, 1),
1662:             specfun.klvnzo(nt, 2),
1663:             specfun.klvnzo(nt, 3),
1664:             specfun.klvnzo(nt, 4),
1665:             specfun.klvnzo(nt, 5),
1666:             specfun.klvnzo(nt, 6),
1667:             specfun.klvnzo(nt, 7),
1668:             specfun.klvnzo(nt, 8))
1669: 
1670: 
1671: def pro_cv_seq(m, n, c):
1672:     '''Characteristic values for prolate spheroidal wave functions.
1673: 
1674:     Compute a sequence of characteristic values for the prolate
1675:     spheroidal wave functions for mode m and n'=m..n and spheroidal
1676:     parameter c.
1677: 
1678:     References
1679:     ----------
1680:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
1681:            Functions", John Wiley and Sons, 1996.
1682:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
1683: 
1684:     '''
1685:     if not (isscalar(m) and isscalar(n) and isscalar(c)):
1686:         raise ValueError("Arguments must be scalars.")
1687:     if (n != floor(n)) or (m != floor(m)):
1688:         raise ValueError("Modes must be integers.")
1689:     if (n-m > 199):
1690:         raise ValueError("Difference between n and m is too large.")
1691:     maxL = n-m+1
1692:     return specfun.segv(m, n, c, 1)[1][:maxL]
1693: 
1694: 
1695: def obl_cv_seq(m, n, c):
1696:     '''Characteristic values for oblate spheroidal wave functions.
1697: 
1698:     Compute a sequence of characteristic values for the oblate
1699:     spheroidal wave functions for mode m and n'=m..n and spheroidal
1700:     parameter c.
1701: 
1702:     References
1703:     ----------
1704:     .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special
1705:            Functions", John Wiley and Sons, 1996.
1706:            https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html
1707: 
1708:     '''
1709:     if not (isscalar(m) and isscalar(n) and isscalar(c)):
1710:         raise ValueError("Arguments must be scalars.")
1711:     if (n != floor(n)) or (m != floor(m)):
1712:         raise ValueError("Modes must be integers.")
1713:     if (n-m > 199):
1714:         raise ValueError("Difference between n and m is too large.")
1715:     maxL = n-m+1
1716:     return specfun.segv(m, n, c, -1)[1][:maxL]
1717: 
1718: 
1719: def ellipk(m):
1720:     r'''Complete elliptic integral of the first kind.
1721: 
1722:     This function is defined as
1723: 
1724:     .. math:: K(m) = \int_0^{\pi/2} [1 - m \sin(t)^2]^{-1/2} dt
1725: 
1726:     Parameters
1727:     ----------
1728:     m : array_like
1729:         The parameter of the elliptic integral.
1730: 
1731:     Returns
1732:     -------
1733:     K : array_like
1734:         Value of the elliptic integral.
1735: 
1736:     Notes
1737:     -----
1738:     For more precision around point m = 1, use `ellipkm1`, which this
1739:     function calls.
1740: 
1741:     The parameterization in terms of :math:`m` follows that of section
1742:     17.2 in [1]_. Other parameterizations in terms of the
1743:     complementary parameter :math:`1 - m`, modular angle
1744:     :math:`\sin^2(\alpha) = m`, or modulus :math:`k^2 = m` are also
1745:     used, so be careful that you choose the correct parameter.
1746: 
1747:     See Also
1748:     --------
1749:     ellipkm1 : Complete elliptic integral of the first kind around m = 1
1750:     ellipkinc : Incomplete elliptic integral of the first kind
1751:     ellipe : Complete elliptic integral of the second kind
1752:     ellipeinc : Incomplete elliptic integral of the second kind
1753: 
1754:     References
1755:     ----------
1756:     .. [1] Milton Abramowitz and Irene A. Stegun, eds.
1757:            Handbook of Mathematical Functions with Formulas,
1758:            Graphs, and Mathematical Tables. New York: Dover, 1972.
1759: 
1760:     '''
1761:     return ellipkm1(1 - asarray(m))
1762: 
1763: 
1764: def comb(N, k, exact=False, repetition=False):
1765:     '''The number of combinations of N things taken k at a time.
1766: 
1767:     This is often expressed as "N choose k".
1768: 
1769:     Parameters
1770:     ----------
1771:     N : int, ndarray
1772:         Number of things.
1773:     k : int, ndarray
1774:         Number of elements taken.
1775:     exact : bool, optional
1776:         If `exact` is False, then floating point precision is used, otherwise
1777:         exact long integer is computed.
1778:     repetition : bool, optional
1779:         If `repetition` is True, then the number of combinations with
1780:         repetition is computed.
1781: 
1782:     Returns
1783:     -------
1784:     val : int, float, ndarray
1785:         The total number of combinations.
1786: 
1787:     See Also
1788:     --------
1789:     binom : Binomial coefficient ufunc
1790: 
1791:     Notes
1792:     -----
1793:     - Array arguments accepted only for exact=False case.
1794:     - If k > N, N < 0, or k < 0, then a 0 is returned.
1795: 
1796:     Examples
1797:     --------
1798:     >>> from scipy.special import comb
1799:     >>> k = np.array([3, 4])
1800:     >>> n = np.array([10, 10])
1801:     >>> comb(n, k, exact=False)
1802:     array([ 120.,  210.])
1803:     >>> comb(10, 3, exact=True)
1804:     120L
1805:     >>> comb(10, 3, exact=True, repetition=True)
1806:     220L
1807: 
1808:     '''
1809:     if repetition:
1810:         return comb(N + k - 1, k, exact)
1811:     if exact:
1812:         return _comb_int(N, k)
1813:     else:
1814:         k, N = asarray(k), asarray(N)
1815:         cond = (k <= N) & (N >= 0) & (k >= 0)
1816:         vals = binom(N, k)
1817:         if isinstance(vals, np.ndarray):
1818:             vals[~cond] = 0
1819:         elif not cond:
1820:             vals = np.float64(0)
1821:         return vals
1822: 
1823: 
1824: def perm(N, k, exact=False):
1825:     '''Permutations of N things taken k at a time, i.e., k-permutations of N.
1826: 
1827:     It's also known as "partial permutations".
1828: 
1829:     Parameters
1830:     ----------
1831:     N : int, ndarray
1832:         Number of things.
1833:     k : int, ndarray
1834:         Number of elements taken.
1835:     exact : bool, optional
1836:         If `exact` is False, then floating point precision is used, otherwise
1837:         exact long integer is computed.
1838: 
1839:     Returns
1840:     -------
1841:     val : int, ndarray
1842:         The number of k-permutations of N.
1843: 
1844:     Notes
1845:     -----
1846:     - Array arguments accepted only for exact=False case.
1847:     - If k > N, N < 0, or k < 0, then a 0 is returned.
1848: 
1849:     Examples
1850:     --------
1851:     >>> from scipy.special import perm
1852:     >>> k = np.array([3, 4])
1853:     >>> n = np.array([10, 10])
1854:     >>> perm(n, k)
1855:     array([  720.,  5040.])
1856:     >>> perm(10, 3, exact=True)
1857:     720
1858: 
1859:     '''
1860:     if exact:
1861:         if (k > N) or (N < 0) or (k < 0):
1862:             return 0
1863:         val = 1
1864:         for i in xrange(N - k + 1, N + 1):
1865:             val *= i
1866:         return val
1867:     else:
1868:         k, N = asarray(k), asarray(N)
1869:         cond = (k <= N) & (N >= 0) & (k >= 0)
1870:         vals = poch(N - k + 1, k)
1871:         if isinstance(vals, np.ndarray):
1872:             vals[~cond] = 0
1873:         elif not cond:
1874:             vals = np.float64(0)
1875:         return vals
1876: 
1877: 
1878: # http://stackoverflow.com/a/16327037/125507
1879: def _range_prod(lo, hi):
1880:     '''
1881:     Product of a range of numbers.
1882: 
1883:     Returns the product of
1884:     lo * (lo+1) * (lo+2) * ... * (hi-2) * (hi-1) * hi
1885:     = hi! / (lo-1)!
1886: 
1887:     Breaks into smaller products first for speed:
1888:     _range_prod(2, 9) = ((2*3)*(4*5))*((6*7)*(8*9))
1889:     '''
1890:     if lo + 1 < hi:
1891:         mid = (hi + lo) // 2
1892:         return _range_prod(lo, mid) * _range_prod(mid + 1, hi)
1893:     if lo == hi:
1894:         return lo
1895:     return lo * hi
1896: 
1897: 
1898: def factorial(n, exact=False):
1899:     '''
1900:     The factorial of a number or array of numbers.
1901: 
1902:     The factorial of non-negative integer `n` is the product of all
1903:     positive integers less than or equal to `n`::
1904: 
1905:         n! = n * (n - 1) * (n - 2) * ... * 1
1906: 
1907:     Parameters
1908:     ----------
1909:     n : int or array_like of ints
1910:         Input values.  If ``n < 0``, the return value is 0.
1911:     exact : bool, optional
1912:         If True, calculate the answer exactly using long integer arithmetic.
1913:         If False, result is approximated in floating point rapidly using the
1914:         `gamma` function.
1915:         Default is False.
1916: 
1917:     Returns
1918:     -------
1919:     nf : float or int or ndarray
1920:         Factorial of `n`, as integer or float depending on `exact`.
1921: 
1922:     Notes
1923:     -----
1924:     For arrays with ``exact=True``, the factorial is computed only once, for
1925:     the largest input, with each other result computed in the process.
1926:     The output dtype is increased to ``int64`` or ``object`` if necessary.
1927: 
1928:     With ``exact=False`` the factorial is approximated using the gamma
1929:     function:
1930: 
1931:     .. math:: n! = \\Gamma(n+1)
1932: 
1933:     Examples
1934:     --------
1935:     >>> from scipy.special import factorial
1936:     >>> arr = np.array([3, 4, 5])
1937:     >>> factorial(arr, exact=False)
1938:     array([   6.,   24.,  120.])
1939:     >>> factorial(arr, exact=True)
1940:     array([  6,  24, 120])
1941:     >>> factorial(5, exact=True)
1942:     120L
1943: 
1944:     '''
1945:     if exact:
1946:         if np.ndim(n) == 0:
1947:             return 0 if n < 0 else math.factorial(n)
1948:         else:
1949:             n = asarray(n)
1950:             un = np.unique(n).astype(object)
1951: 
1952:             # Convert to object array of long ints if np.int can't handle size
1953:             if un[-1] > 20:
1954:                 dt = object
1955:             elif un[-1] > 12:
1956:                 dt = np.int64
1957:             else:
1958:                 dt = np.int
1959: 
1960:             out = np.empty_like(n, dtype=dt)
1961: 
1962:             # Handle invalid/trivial values
1963:             un = un[un > 1]
1964:             out[n < 2] = 1
1965:             out[n < 0] = 0
1966: 
1967:             # Calculate products of each range of numbers
1968:             if un.size:
1969:                 val = math.factorial(un[0])
1970:                 out[n == un[0]] = val
1971:                 for i in xrange(len(un) - 1):
1972:                     prev = un[i] + 1
1973:                     current = un[i + 1]
1974:                     val *= _range_prod(prev, current)
1975:                     out[n == current] = val
1976:             return out
1977:     else:
1978:         n = asarray(n)
1979:         vals = gamma(n + 1)
1980:         return where(n >= 0, vals, 0)
1981: 
1982: 
1983: def factorial2(n, exact=False):
1984:     '''Double factorial.
1985: 
1986:     This is the factorial with every second value skipped.  E.g., ``7!! = 7 * 5
1987:     * 3 * 1``.  It can be approximated numerically as::
1988: 
1989:       n!! = special.gamma(n/2+1)*2**((m+1)/2)/sqrt(pi)  n odd
1990:           = 2**(n/2) * (n/2)!                           n even
1991: 
1992:     Parameters
1993:     ----------
1994:     n : int or array_like
1995:         Calculate ``n!!``.  Arrays are only supported with `exact` set
1996:         to False.  If ``n < 0``, the return value is 0.
1997:     exact : bool, optional
1998:         The result can be approximated rapidly using the gamma-formula
1999:         above (default).  If `exact` is set to True, calculate the
2000:         answer exactly using integer arithmetic.
2001: 
2002:     Returns
2003:     -------
2004:     nff : float or int
2005:         Double factorial of `n`, as an int or a float depending on
2006:         `exact`.
2007: 
2008:     Examples
2009:     --------
2010:     >>> from scipy.special import factorial2
2011:     >>> factorial2(7, exact=False)
2012:     array(105.00000000000001)
2013:     >>> factorial2(7, exact=True)
2014:     105L
2015: 
2016:     '''
2017:     if exact:
2018:         if n < -1:
2019:             return 0
2020:         if n <= 0:
2021:             return 1
2022:         val = 1
2023:         for k in xrange(n, 0, -2):
2024:             val *= k
2025:         return val
2026:     else:
2027:         n = asarray(n)
2028:         vals = zeros(n.shape, 'd')
2029:         cond1 = (n % 2) & (n >= -1)
2030:         cond2 = (1-(n % 2)) & (n >= -1)
2031:         oddn = extract(cond1, n)
2032:         evenn = extract(cond2, n)
2033:         nd2o = oddn / 2.0
2034:         nd2e = evenn / 2.0
2035:         place(vals, cond1, gamma(nd2o + 1) / sqrt(pi) * pow(2.0, nd2o + 0.5))
2036:         place(vals, cond2, gamma(nd2e + 1) * pow(2.0, nd2e))
2037:         return vals
2038: 
2039: 
2040: def factorialk(n, k, exact=True):
2041:     '''Multifactorial of n of order k, n(!!...!).
2042: 
2043:     This is the multifactorial of n skipping k values.  For example,
2044: 
2045:       factorialk(17, 4) = 17!!!! = 17 * 13 * 9 * 5 * 1
2046: 
2047:     In particular, for any integer ``n``, we have
2048: 
2049:       factorialk(n, 1) = factorial(n)
2050: 
2051:       factorialk(n, 2) = factorial2(n)
2052: 
2053:     Parameters
2054:     ----------
2055:     n : int
2056:         Calculate multifactorial. If `n` < 0, the return value is 0.
2057:     k : int
2058:         Order of multifactorial.
2059:     exact : bool, optional
2060:         If exact is set to True, calculate the answer exactly using
2061:         integer arithmetic.
2062: 
2063:     Returns
2064:     -------
2065:     val : int
2066:         Multifactorial of `n`.
2067: 
2068:     Raises
2069:     ------
2070:     NotImplementedError
2071:         Raises when exact is False
2072: 
2073:     Examples
2074:     --------
2075:     >>> from scipy.special import factorialk
2076:     >>> factorialk(5, 1, exact=True)
2077:     120L
2078:     >>> factorialk(5, 3, exact=True)
2079:     10L
2080: 
2081:     '''
2082:     if exact:
2083:         if n < 1-k:
2084:             return 0
2085:         if n <= 0:
2086:             return 1
2087:         val = 1
2088:         for j in xrange(n, 0, -k):
2089:             val = val*j
2090:         return val
2091:     else:
2092:         raise NotImplementedError
2093: 
2094: 
2095: def zeta(x, q=None, out=None):
2096:     r'''
2097:     Riemann or Hurwitz zeta function.
2098: 
2099:     Parameters
2100:     ----------
2101:     x : array_like of float
2102:         Input data, must be real
2103:     q : array_like of float, optional
2104:         Input data, must be real.  Defaults to Riemann zeta.
2105:     out : ndarray, optional
2106:         Output array for the computed values.
2107: 
2108:     Notes
2109:     -----
2110:     The two-argument version is the Hurwitz zeta function:
2111: 
2112:     .. math:: \zeta(x, q) = \sum_{k=0}^{\infty} \frac{1}{(k + q)^x},
2113: 
2114:     Riemann zeta function corresponds to ``q = 1``.
2115: 
2116:     See also
2117:     --------
2118:     zetac
2119: 
2120:     '''
2121:     if q is None:
2122:         q = 1
2123:     return _zeta(x, q, out)
2124: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 7, 0))

# 'import operator' statement (line 7)
import operator

import_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'operator', operator, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 8, 0))

# 'import numpy' statement (line 8)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/special/')
import_494783 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'numpy')

if (type(import_494783) is not StypyTypeError):

    if (import_494783 != 'pyd_module'):
        __import__(import_494783)
        sys_modules_494784 = sys.modules[import_494783]
        import_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'np', sys_modules_494784.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 8)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 8, 0), 'numpy', import_494783)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/special/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 9, 0))

# 'import math' statement (line 9)
import math

import_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'math', math, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 10, 0))

# 'from scipy._lib.six import xrange' statement (line 10)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/special/')
import_494785 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'scipy._lib.six')

if (type(import_494785) is not StypyTypeError):

    if (import_494785 != 'pyd_module'):
        __import__(import_494785)
        sys_modules_494786 = sys.modules[import_494785]
        import_from_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'scipy._lib.six', sys_modules_494786.module_type_store, module_type_store, ['xrange'])
        nest_module(stypy.reporting.localization.Localization(__file__, 10, 0), __file__, sys_modules_494786, sys_modules_494786.module_type_store, module_type_store)
    else:
        from scipy._lib.six import xrange

        import_from_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'scipy._lib.six', None, module_type_store, ['xrange'], [xrange])

else:
    # Assigning a type to the variable 'scipy._lib.six' (line 10)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 10, 0), 'scipy._lib.six', import_494785)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/special/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 11, 0))

# 'from numpy import pi, asarray, floor, isscalar, iscomplex, real, imag, sqrt, where, mgrid, sin, place, issubdtype, extract, less, inexact, nan, zeros, sinc' statement (line 11)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/special/')
import_494787 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'numpy')

if (type(import_494787) is not StypyTypeError):

    if (import_494787 != 'pyd_module'):
        __import__(import_494787)
        sys_modules_494788 = sys.modules[import_494787]
        import_from_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'numpy', sys_modules_494788.module_type_store, module_type_store, ['pi', 'asarray', 'floor', 'isscalar', 'iscomplex', 'real', 'imag', 'sqrt', 'where', 'mgrid', 'sin', 'place', 'issubdtype', 'extract', 'less', 'inexact', 'nan', 'zeros', 'sinc'])
        nest_module(stypy.reporting.localization.Localization(__file__, 11, 0), __file__, sys_modules_494788, sys_modules_494788.module_type_store, module_type_store)
    else:
        from numpy import pi, asarray, floor, isscalar, iscomplex, real, imag, sqrt, where, mgrid, sin, place, issubdtype, extract, less, inexact, nan, zeros, sinc

        import_from_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'numpy', None, module_type_store, ['pi', 'asarray', 'floor', 'isscalar', 'iscomplex', 'real', 'imag', 'sqrt', 'where', 'mgrid', 'sin', 'place', 'issubdtype', 'extract', 'less', 'inexact', 'nan', 'zeros', 'sinc'], [pi, asarray, floor, isscalar, iscomplex, real, imag, sqrt, where, mgrid, sin, place, issubdtype, extract, less, inexact, nan, zeros, sinc])

else:
    # Assigning a type to the variable 'numpy' (line 11)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 11, 0), 'numpy', import_494787)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/special/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'from scipy.special import ufuncs' statement (line 14)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/special/')
import_494789 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy.special')

if (type(import_494789) is not StypyTypeError):

    if (import_494789 != 'pyd_module'):
        __import__(import_494789)
        sys_modules_494790 = sys.modules[import_494789]
        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy.special', sys_modules_494790.module_type_store, module_type_store, ['_ufuncs'])
        nest_module(stypy.reporting.localization.Localization(__file__, 14, 0), __file__, sys_modules_494790, sys_modules_494790.module_type_store, module_type_store)
    else:
        from scipy.special import _ufuncs as ufuncs

        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy.special', None, module_type_store, ['_ufuncs'], [ufuncs])

else:
    # Assigning a type to the variable 'scipy.special' (line 14)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy.special', import_494789)

# Adding an alias
module_type_store.add_alias('ufuncs', '_ufuncs')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/special/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 15, 0))

# 'from scipy.special._ufuncs import ellipkm1, mathieu_a, mathieu_b, iv, jv, gamma, psi, _zeta, hankel1, hankel2, yv, kv, ndtri, poch, binom, hyp0f1' statement (line 15)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/special/')
import_494791 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'scipy.special._ufuncs')

if (type(import_494791) is not StypyTypeError):

    if (import_494791 != 'pyd_module'):
        __import__(import_494791)
        sys_modules_494792 = sys.modules[import_494791]
        import_from_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'scipy.special._ufuncs', sys_modules_494792.module_type_store, module_type_store, ['ellipkm1', 'mathieu_a', 'mathieu_b', 'iv', 'jv', 'gamma', 'psi', '_zeta', 'hankel1', 'hankel2', 'yv', 'kv', 'ndtri', 'poch', 'binom', 'hyp0f1'])
        nest_module(stypy.reporting.localization.Localization(__file__, 15, 0), __file__, sys_modules_494792, sys_modules_494792.module_type_store, module_type_store)
    else:
        from scipy.special._ufuncs import ellipkm1, mathieu_a, mathieu_b, iv, jv, gamma, psi, _zeta, hankel1, hankel2, yv, kv, ndtri, poch, binom, hyp0f1

        import_from_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'scipy.special._ufuncs', None, module_type_store, ['ellipkm1', 'mathieu_a', 'mathieu_b', 'iv', 'jv', 'gamma', 'psi', '_zeta', 'hankel1', 'hankel2', 'yv', 'kv', 'ndtri', 'poch', 'binom', 'hyp0f1'], [ellipkm1, mathieu_a, mathieu_b, iv, jv, gamma, psi, _zeta, hankel1, hankel2, yv, kv, ndtri, poch, binom, hyp0f1])

else:
    # Assigning a type to the variable 'scipy.special._ufuncs' (line 15)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 15, 0), 'scipy.special._ufuncs', import_494791)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/special/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 18, 0))

# 'from scipy.special import specfun' statement (line 18)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/special/')
import_494793 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'scipy.special')

if (type(import_494793) is not StypyTypeError):

    if (import_494793 != 'pyd_module'):
        __import__(import_494793)
        sys_modules_494794 = sys.modules[import_494793]
        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'scipy.special', sys_modules_494794.module_type_store, module_type_store, ['specfun'])
        nest_module(stypy.reporting.localization.Localization(__file__, 18, 0), __file__, sys_modules_494794, sys_modules_494794.module_type_store, module_type_store)
    else:
        from scipy.special import specfun

        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'scipy.special', None, module_type_store, ['specfun'], [specfun])

else:
    # Assigning a type to the variable 'scipy.special' (line 18)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 18, 0), 'scipy.special', import_494793)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/special/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 0))

# 'from scipy.special import orthogonal' statement (line 19)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/special/')
import_494795 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'scipy.special')

if (type(import_494795) is not StypyTypeError):

    if (import_494795 != 'pyd_module'):
        __import__(import_494795)
        sys_modules_494796 = sys.modules[import_494795]
        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'scipy.special', sys_modules_494796.module_type_store, module_type_store, ['orthogonal'])
        nest_module(stypy.reporting.localization.Localization(__file__, 19, 0), __file__, sys_modules_494796, sys_modules_494796.module_type_store, module_type_store)
    else:
        from scipy.special import orthogonal

        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'scipy.special', None, module_type_store, ['orthogonal'], [orthogonal])

else:
    # Assigning a type to the variable 'scipy.special' (line 19)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 19, 0), 'scipy.special', import_494795)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/special/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 20, 0))

# 'from scipy.special._comb import _comb_int' statement (line 20)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/special/')
import_494797 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'scipy.special._comb')

if (type(import_494797) is not StypyTypeError):

    if (import_494797 != 'pyd_module'):
        __import__(import_494797)
        sys_modules_494798 = sys.modules[import_494797]
        import_from_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'scipy.special._comb', sys_modules_494798.module_type_store, module_type_store, ['_comb_int'])
        nest_module(stypy.reporting.localization.Localization(__file__, 20, 0), __file__, sys_modules_494798, sys_modules_494798.module_type_store, module_type_store)
    else:
        from scipy.special._comb import _comb_int

        import_from_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'scipy.special._comb', None, module_type_store, ['_comb_int'], [_comb_int])

else:
    # Assigning a type to the variable 'scipy.special._comb' (line 20)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 20, 0), 'scipy.special._comb', import_494797)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/special/')


# Assigning a List to a Name (line 23):

# Assigning a List to a Name (line 23):
__all__ = ['ai_zeros', 'assoc_laguerre', 'bei_zeros', 'beip_zeros', 'ber_zeros', 'bernoulli', 'berp_zeros', 'bessel_diff_formula', 'bi_zeros', 'clpmn', 'comb', 'digamma', 'diric', 'ellipk', 'erf_zeros', 'erfcinv', 'erfinv', 'euler', 'factorial', 'factorialk', 'factorial2', 'fresnel_zeros', 'fresnelc_zeros', 'fresnels_zeros', 'gamma', 'h1vp', 'h2vp', 'hankel1', 'hankel2', 'hyp0f1', 'iv', 'ivp', 'jn_zeros', 'jnjnp_zeros', 'jnp_zeros', 'jnyn_zeros', 'jv', 'jvp', 'kei_zeros', 'keip_zeros', 'kelvin_zeros', 'ker_zeros', 'kerp_zeros', 'kv', 'kvp', 'lmbda', 'lpmn', 'lpn', 'lqmn', 'lqn', 'mathieu_a', 'mathieu_b', 'mathieu_even_coef', 'mathieu_odd_coef', 'ndtri', 'obl_cv_seq', 'pbdn_seq', 'pbdv_seq', 'pbvv_seq', 'perm', 'polygamma', 'pro_cv_seq', 'psi', 'riccati_jn', 'riccati_yn', 'sinc', 'y0_zeros', 'y1_zeros', 'y1p_zeros', 'yn_zeros', 'ynp_zeros', 'yv', 'yvp', 'zeta']
module_type_store.set_exportable_members(['ai_zeros', 'assoc_laguerre', 'bei_zeros', 'beip_zeros', 'ber_zeros', 'bernoulli', 'berp_zeros', 'bessel_diff_formula', 'bi_zeros', 'clpmn', 'comb', 'digamma', 'diric', 'ellipk', 'erf_zeros', 'erfcinv', 'erfinv', 'euler', 'factorial', 'factorialk', 'factorial2', 'fresnel_zeros', 'fresnelc_zeros', 'fresnels_zeros', 'gamma', 'h1vp', 'h2vp', 'hankel1', 'hankel2', 'hyp0f1', 'iv', 'ivp', 'jn_zeros', 'jnjnp_zeros', 'jnp_zeros', 'jnyn_zeros', 'jv', 'jvp', 'kei_zeros', 'keip_zeros', 'kelvin_zeros', 'ker_zeros', 'kerp_zeros', 'kv', 'kvp', 'lmbda', 'lpmn', 'lpn', 'lqmn', 'lqn', 'mathieu_a', 'mathieu_b', 'mathieu_even_coef', 'mathieu_odd_coef', 'ndtri', 'obl_cv_seq', 'pbdn_seq', 'pbdv_seq', 'pbvv_seq', 'perm', 'polygamma', 'pro_cv_seq', 'psi', 'riccati_jn', 'riccati_yn', 'sinc', 'y0_zeros', 'y1_zeros', 'y1p_zeros', 'yn_zeros', 'ynp_zeros', 'yv', 'yvp', 'zeta'])

# Obtaining an instance of the builtin type 'list' (line 23)
list_494799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 23)
# Adding element type (line 23)
str_494800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, 11), 'str', 'ai_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494800)
# Adding element type (line 23)
str_494801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, 23), 'str', 'assoc_laguerre')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494801)
# Adding element type (line 23)
str_494802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, 41), 'str', 'bei_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494802)
# Adding element type (line 23)
str_494803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, 54), 'str', 'beip_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494803)
# Adding element type (line 23)
str_494804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 24, 11), 'str', 'ber_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494804)
# Adding element type (line 23)
str_494805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 24, 24), 'str', 'bernoulli')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494805)
# Adding element type (line 23)
str_494806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 24, 37), 'str', 'berp_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494806)
# Adding element type (line 23)
str_494807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, 11), 'str', 'bessel_diff_formula')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494807)
# Adding element type (line 23)
str_494808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, 34), 'str', 'bi_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494808)
# Adding element type (line 23)
str_494809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, 46), 'str', 'clpmn')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494809)
# Adding element type (line 23)
str_494810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, 55), 'str', 'comb')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494810)
# Adding element type (line 23)
str_494811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 11), 'str', 'digamma')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494811)
# Adding element type (line 23)
str_494812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 22), 'str', 'diric')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494812)
# Adding element type (line 23)
str_494813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 31), 'str', 'ellipk')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494813)
# Adding element type (line 23)
str_494814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 41), 'str', 'erf_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494814)
# Adding element type (line 23)
str_494815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 54), 'str', 'erfcinv')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494815)
# Adding element type (line 23)
str_494816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 11), 'str', 'erfinv')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494816)
# Adding element type (line 23)
str_494817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 21), 'str', 'euler')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494817)
# Adding element type (line 23)
str_494818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 30), 'str', 'factorial')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494818)
# Adding element type (line 23)
str_494819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 43), 'str', 'factorialk')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494819)
# Adding element type (line 23)
str_494820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 57), 'str', 'factorial2')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494820)
# Adding element type (line 23)
str_494821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 11), 'str', 'fresnel_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494821)
# Adding element type (line 23)
str_494822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 28), 'str', 'fresnelc_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494822)
# Adding element type (line 23)
str_494823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 46), 'str', 'fresnels_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494823)
# Adding element type (line 23)
str_494824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 11), 'str', 'gamma')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494824)
# Adding element type (line 23)
str_494825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 20), 'str', 'h1vp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494825)
# Adding element type (line 23)
str_494826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 28), 'str', 'h2vp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494826)
# Adding element type (line 23)
str_494827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 36), 'str', 'hankel1')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494827)
# Adding element type (line 23)
str_494828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 47), 'str', 'hankel2')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494828)
# Adding element type (line 23)
str_494829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 58), 'str', 'hyp0f1')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494829)
# Adding element type (line 23)
str_494830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 11), 'str', 'iv')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494830)
# Adding element type (line 23)
str_494831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 17), 'str', 'ivp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494831)
# Adding element type (line 23)
str_494832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 24), 'str', 'jn_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494832)
# Adding element type (line 23)
str_494833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 36), 'str', 'jnjnp_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494833)
# Adding element type (line 23)
str_494834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 51), 'str', 'jnp_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494834)
# Adding element type (line 23)
str_494835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 31, 11), 'str', 'jnyn_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494835)
# Adding element type (line 23)
str_494836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 31, 25), 'str', 'jv')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494836)
# Adding element type (line 23)
str_494837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 31, 31), 'str', 'jvp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494837)
# Adding element type (line 23)
str_494838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 31, 38), 'str', 'kei_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494838)
# Adding element type (line 23)
str_494839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 31, 51), 'str', 'keip_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494839)
# Adding element type (line 23)
str_494840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 32, 11), 'str', 'kelvin_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494840)
# Adding element type (line 23)
str_494841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 32, 27), 'str', 'ker_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494841)
# Adding element type (line 23)
str_494842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 32, 40), 'str', 'kerp_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494842)
# Adding element type (line 23)
str_494843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 32, 54), 'str', 'kv')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494843)
# Adding element type (line 23)
str_494844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 32, 60), 'str', 'kvp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494844)
# Adding element type (line 23)
str_494845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 11), 'str', 'lmbda')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494845)
# Adding element type (line 23)
str_494846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 20), 'str', 'lpmn')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494846)
# Adding element type (line 23)
str_494847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 28), 'str', 'lpn')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494847)
# Adding element type (line 23)
str_494848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 35), 'str', 'lqmn')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494848)
# Adding element type (line 23)
str_494849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 43), 'str', 'lqn')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494849)
# Adding element type (line 23)
str_494850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 50), 'str', 'mathieu_a')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494850)
# Adding element type (line 23)
str_494851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 11), 'str', 'mathieu_b')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494851)
# Adding element type (line 23)
str_494852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 24), 'str', 'mathieu_even_coef')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494852)
# Adding element type (line 23)
str_494853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 45), 'str', 'mathieu_odd_coef')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494853)
# Adding element type (line 23)
str_494854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 11), 'str', 'ndtri')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494854)
# Adding element type (line 23)
str_494855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 20), 'str', 'obl_cv_seq')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494855)
# Adding element type (line 23)
str_494856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 34), 'str', 'pbdn_seq')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494856)
# Adding element type (line 23)
str_494857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 46), 'str', 'pbdv_seq')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494857)
# Adding element type (line 23)
str_494858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 58), 'str', 'pbvv_seq')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494858)
# Adding element type (line 23)
str_494859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 11), 'str', 'perm')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494859)
# Adding element type (line 23)
str_494860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 19), 'str', 'polygamma')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494860)
# Adding element type (line 23)
str_494861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 32), 'str', 'pro_cv_seq')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494861)
# Adding element type (line 23)
str_494862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 46), 'str', 'psi')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494862)
# Adding element type (line 23)
str_494863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 53), 'str', 'riccati_jn')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494863)
# Adding element type (line 23)
str_494864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, 11), 'str', 'riccati_yn')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494864)
# Adding element type (line 23)
str_494865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, 25), 'str', 'sinc')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494865)
# Adding element type (line 23)
str_494866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, 33), 'str', 'y0_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494866)
# Adding element type (line 23)
str_494867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, 45), 'str', 'y1_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494867)
# Adding element type (line 23)
str_494868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, 57), 'str', 'y1p_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494868)
# Adding element type (line 23)
str_494869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 11), 'str', 'yn_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494869)
# Adding element type (line 23)
str_494870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 23), 'str', 'ynp_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494870)
# Adding element type (line 23)
str_494871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 36), 'str', 'yv')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494871)
# Adding element type (line 23)
str_494872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 42), 'str', 'yvp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494872)
# Adding element type (line 23)
str_494873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 49), 'str', 'zeta')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_494799, str_494873)

# Assigning a type to the variable '__all__' (line 23)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 23, 0), '__all__', list_494799)

@norecursion
def _nonneg_int_or_fail(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 41)
    True_494874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 41, 44), 'True')
    defaults = [True_494874]
    # Create a new context for function '_nonneg_int_or_fail'
    module_type_store = module_type_store.open_function_context('_nonneg_int_or_fail', 41, 0, False)
    
    # Passed parameters checking function
    _nonneg_int_or_fail.stypy_localization = localization
    _nonneg_int_or_fail.stypy_type_of_self = None
    _nonneg_int_or_fail.stypy_type_store = module_type_store
    _nonneg_int_or_fail.stypy_function_name = '_nonneg_int_or_fail'
    _nonneg_int_or_fail.stypy_param_names_list = ['n', 'var_name', 'strict']
    _nonneg_int_or_fail.stypy_varargs_param_name = None
    _nonneg_int_or_fail.stypy_kwargs_param_name = None
    _nonneg_int_or_fail.stypy_call_defaults = defaults
    _nonneg_int_or_fail.stypy_call_varargs = varargs
    _nonneg_int_or_fail.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_nonneg_int_or_fail', ['n', 'var_name', 'strict'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_nonneg_int_or_fail', localization, ['n', 'var_name', 'strict'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_nonneg_int_or_fail(...)' code ##################

    
    
    # SSA begins for try-except statement (line 42)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Getting the type of 'strict' (line 43)
    strict_494875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 43, 11), 'strict')
    # Testing the type of an if condition (line 43)
    if_condition_494876 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 43, 8), strict_494875)
    # Assigning a type to the variable 'if_condition_494876' (line 43)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 43, 8), 'if_condition_494876', if_condition_494876)
    # SSA begins for if statement (line 43)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 45):
    
    # Assigning a Call to a Name (line 45):
    
    # Call to index(...): (line 45)
    # Processing the call arguments (line 45)
    # Getting the type of 'n' (line 45)
    n_494879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 45, 31), 'n', False)
    # Processing the call keyword arguments (line 45)
    kwargs_494880 = {}
    # Getting the type of 'operator' (line 45)
    operator_494877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 45, 16), 'operator', False)
    # Obtaining the member 'index' of a type (line 45)
    index_494878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 45, 16), operator_494877, 'index')
    # Calling index(args, kwargs) (line 45)
    index_call_result_494881 = invoke(stypy.reporting.localization.Localization(__file__, 45, 16), index_494878, *[n_494879], **kwargs_494880)
    
    # Assigning a type to the variable 'n' (line 45)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 45, 12), 'n', index_call_result_494881)
    # SSA branch for the else part of an if statement (line 43)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'n' (line 46)
    n_494882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 13), 'n')
    
    # Call to floor(...): (line 46)
    # Processing the call arguments (line 46)
    # Getting the type of 'n' (line 46)
    n_494884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 24), 'n', False)
    # Processing the call keyword arguments (line 46)
    kwargs_494885 = {}
    # Getting the type of 'floor' (line 46)
    floor_494883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 18), 'floor', False)
    # Calling floor(args, kwargs) (line 46)
    floor_call_result_494886 = invoke(stypy.reporting.localization.Localization(__file__, 46, 18), floor_494883, *[n_494884], **kwargs_494885)
    
    # Applying the binary operator '==' (line 46)
    result_eq_494887 = python_operator(stypy.reporting.localization.Localization(__file__, 46, 13), '==', n_494882, floor_call_result_494886)
    
    # Testing the type of an if condition (line 46)
    if_condition_494888 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 46, 13), result_eq_494887)
    # Assigning a type to the variable 'if_condition_494888' (line 46)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 46, 13), 'if_condition_494888', if_condition_494888)
    # SSA begins for if statement (line 46)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 47):
    
    # Assigning a Call to a Name (line 47):
    
    # Call to int(...): (line 47)
    # Processing the call arguments (line 47)
    # Getting the type of 'n' (line 47)
    n_494890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 47, 20), 'n', False)
    # Processing the call keyword arguments (line 47)
    kwargs_494891 = {}
    # Getting the type of 'int' (line 47)
    int_494889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 47, 16), 'int', False)
    # Calling int(args, kwargs) (line 47)
    int_call_result_494892 = invoke(stypy.reporting.localization.Localization(__file__, 47, 16), int_494889, *[n_494890], **kwargs_494891)
    
    # Assigning a type to the variable 'n' (line 47)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 47, 12), 'n', int_call_result_494892)
    # SSA branch for the else part of an if statement (line 46)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 49)
    # Processing the call keyword arguments (line 49)
    kwargs_494894 = {}
    # Getting the type of 'ValueError' (line 49)
    ValueError_494893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 49, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 49)
    ValueError_call_result_494895 = invoke(stypy.reporting.localization.Localization(__file__, 49, 18), ValueError_494893, *[], **kwargs_494894)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 49, 12), ValueError_call_result_494895, 'raise parameter', BaseException)
    # SSA join for if statement (line 46)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 43)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 50)
    n_494896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 50, 11), 'n')
    int_494897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 50, 15), 'int')
    # Applying the binary operator '<' (line 50)
    result_lt_494898 = python_operator(stypy.reporting.localization.Localization(__file__, 50, 11), '<', n_494896, int_494897)
    
    # Testing the type of an if condition (line 50)
    if_condition_494899 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 50, 8), result_lt_494898)
    # Assigning a type to the variable 'if_condition_494899' (line 50)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 50, 8), 'if_condition_494899', if_condition_494899)
    # SSA begins for if statement (line 50)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 51)
    # Processing the call keyword arguments (line 51)
    kwargs_494901 = {}
    # Getting the type of 'ValueError' (line 51)
    ValueError_494900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 51)
    ValueError_call_result_494902 = invoke(stypy.reporting.localization.Localization(__file__, 51, 18), ValueError_494900, *[], **kwargs_494901)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 51, 12), ValueError_call_result_494902, 'raise parameter', BaseException)
    # SSA join for if statement (line 50)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 42)
    # SSA branch for the except 'Tuple' branch of a try statement (line 42)
    # Storing handler type
    module_type_store.open_ssa_branch('except')
    
    # Obtaining an instance of the builtin type 'tuple' (line 52)
    tuple_494903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 52)
    # Adding element type (line 52)
    # Getting the type of 'ValueError' (line 52)
    ValueError_494904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 12), 'ValueError')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 52, 12), tuple_494903, ValueError_494904)
    # Adding element type (line 52)
    # Getting the type of 'TypeError' (line 52)
    TypeError_494905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 24), 'TypeError')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 52, 12), tuple_494903, TypeError_494905)
    
    # Assigning a type to the variable 'err' (line 52)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 52, 4), 'err', tuple_494903)
    
    # Call to __class__(...): (line 53)
    # Processing the call arguments (line 53)
    
    # Call to format(...): (line 53)
    # Processing the call arguments (line 53)
    # Getting the type of 'var_name' (line 53)
    var_name_494910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 71), 'var_name', False)
    # Processing the call keyword arguments (line 53)
    kwargs_494911 = {}
    str_494908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 53, 28), 'str', '{} must be a non-negative integer')
    # Obtaining the member 'format' of a type (line 53)
    format_494909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 53, 28), str_494908, 'format')
    # Calling format(args, kwargs) (line 53)
    format_call_result_494912 = invoke(stypy.reporting.localization.Localization(__file__, 53, 28), format_494909, *[var_name_494910], **kwargs_494911)
    
    # Processing the call keyword arguments (line 53)
    kwargs_494913 = {}
    # Getting the type of 'err' (line 53)
    err_494906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 14), 'err', False)
    # Obtaining the member '__class__' of a type (line 53)
    class___494907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 53, 14), err_494906, '__class__')
    # Calling __class__(args, kwargs) (line 53)
    class___call_result_494914 = invoke(stypy.reporting.localization.Localization(__file__, 53, 14), class___494907, *[format_call_result_494912], **kwargs_494913)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 53, 8), class___call_result_494914, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 42)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'n' (line 54)
    n_494915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 54, 11), 'n')
    # Assigning a type to the variable 'stypy_return_type' (line 54)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 54, 4), 'stypy_return_type', n_494915)
    
    # ################# End of '_nonneg_int_or_fail(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_nonneg_int_or_fail' in the type store
    # Getting the type of 'stypy_return_type' (line 41)
    stypy_return_type_494916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 41, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_494916)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_nonneg_int_or_fail'
    return stypy_return_type_494916

# Assigning a type to the variable '_nonneg_int_or_fail' (line 41)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 41, 0), '_nonneg_int_or_fail', _nonneg_int_or_fail)

@norecursion
def diric(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'diric'
    module_type_store = module_type_store.open_function_context('diric', 57, 0, False)
    
    # Passed parameters checking function
    diric.stypy_localization = localization
    diric.stypy_type_of_self = None
    diric.stypy_type_store = module_type_store
    diric.stypy_function_name = 'diric'
    diric.stypy_param_names_list = ['x', 'n']
    diric.stypy_varargs_param_name = None
    diric.stypy_kwargs_param_name = None
    diric.stypy_call_defaults = defaults
    diric.stypy_call_varargs = varargs
    diric.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'diric', ['x', 'n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'diric', localization, ['x', 'n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'diric(...)' code ##################

    str_494917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 120, (-1)), 'str', "Periodic sinc function, also called the Dirichlet function.\n\n    The Dirichlet function is defined as::\n\n        diric(x) = sin(x * n/2) / (n * sin(x / 2)),\n\n    where `n` is a positive integer.\n\n    Parameters\n    ----------\n    x : array_like\n        Input data\n    n : int\n        Integer defining the periodicity.\n\n    Returns\n    -------\n    diric : ndarray\n\n    Examples\n    --------\n    >>> from scipy import special\n    >>> import matplotlib.pyplot as plt\n\n    >>> x = np.linspace(-8*np.pi, 8*np.pi, num=201)\n    >>> plt.figure(figsize=(8, 8));\n    >>> for idx, n in enumerate([2, 3, 4, 9]):\n    ...     plt.subplot(2, 2, idx+1)\n    ...     plt.plot(x, special.diric(x, n))\n    ...     plt.title('diric, n={}'.format(n))\n    >>> plt.show()\n\n    The following example demonstrates that `diric` gives the magnitudes\n    (modulo the sign and scaling) of the Fourier coefficients of a\n    rectangular pulse.\n\n    Suppress output of values that are effectively 0:\n\n    >>> np.set_printoptions(suppress=True)\n\n    Create a signal `x` of length `m` with `k` ones:\n\n    >>> m = 8\n    >>> k = 3\n    >>> x = np.zeros(m)\n    >>> x[:k] = 1\n\n    Use the FFT to compute the Fourier transform of `x`, and\n    inspect the magnitudes of the coefficients:\n\n    >>> np.abs(np.fft.fft(x))\n    array([ 3.        ,  2.41421356,  1.        ,  0.41421356,  1.        ,\n            0.41421356,  1.        ,  2.41421356])\n\n    Now find the same values (up to sign) using `diric`.  We multiply\n    by `k` to account for the different scaling conventions of\n    `numpy.fft.fft` and `diric`:\n\n    >>> theta = np.linspace(0, 2*np.pi, m, endpoint=False)\n    >>> k * special.diric(theta, k)\n    array([ 3.        ,  2.41421356,  1.        , -0.41421356, -1.        ,\n           -0.41421356,  1.        ,  2.41421356])\n    ")
    
    # Assigning a Tuple to a Tuple (line 121):
    
    # Assigning a Call to a Name (line 121):
    
    # Call to asarray(...): (line 121)
    # Processing the call arguments (line 121)
    # Getting the type of 'x' (line 121)
    x_494919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 19), 'x', False)
    # Processing the call keyword arguments (line 121)
    kwargs_494920 = {}
    # Getting the type of 'asarray' (line 121)
    asarray_494918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 11), 'asarray', False)
    # Calling asarray(args, kwargs) (line 121)
    asarray_call_result_494921 = invoke(stypy.reporting.localization.Localization(__file__, 121, 11), asarray_494918, *[x_494919], **kwargs_494920)
    
    # Assigning a type to the variable 'tuple_assignment_494729' (line 121)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 121, 4), 'tuple_assignment_494729', asarray_call_result_494921)
    
    # Assigning a Call to a Name (line 121):
    
    # Call to asarray(...): (line 121)
    # Processing the call arguments (line 121)
    # Getting the type of 'n' (line 121)
    n_494923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 31), 'n', False)
    # Processing the call keyword arguments (line 121)
    kwargs_494924 = {}
    # Getting the type of 'asarray' (line 121)
    asarray_494922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 23), 'asarray', False)
    # Calling asarray(args, kwargs) (line 121)
    asarray_call_result_494925 = invoke(stypy.reporting.localization.Localization(__file__, 121, 23), asarray_494922, *[n_494923], **kwargs_494924)
    
    # Assigning a type to the variable 'tuple_assignment_494730' (line 121)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 121, 4), 'tuple_assignment_494730', asarray_call_result_494925)
    
    # Assigning a Name to a Name (line 121):
    # Getting the type of 'tuple_assignment_494729' (line 121)
    tuple_assignment_494729_494926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 4), 'tuple_assignment_494729')
    # Assigning a type to the variable 'x' (line 121)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 121, 4), 'x', tuple_assignment_494729_494926)
    
    # Assigning a Name to a Name (line 121):
    # Getting the type of 'tuple_assignment_494730' (line 121)
    tuple_assignment_494730_494927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 4), 'tuple_assignment_494730')
    # Assigning a type to the variable 'n' (line 121)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 121, 7), 'n', tuple_assignment_494730_494927)
    
    # Assigning a Call to a Name (line 122):
    
    # Assigning a Call to a Name (line 122):
    
    # Call to asarray(...): (line 122)
    # Processing the call arguments (line 122)
    # Getting the type of 'n' (line 122)
    n_494929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 16), 'n', False)
    # Getting the type of 'x' (line 122)
    x_494930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 21), 'x', False)
    # Getting the type of 'x' (line 122)
    x_494931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 23), 'x', False)
    # Applying the binary operator '-' (line 122)
    result_sub_494932 = python_operator(stypy.reporting.localization.Localization(__file__, 122, 21), '-', x_494930, x_494931)
    
    # Applying the binary operator '+' (line 122)
    result_add_494933 = python_operator(stypy.reporting.localization.Localization(__file__, 122, 16), '+', n_494929, result_sub_494932)
    
    # Processing the call keyword arguments (line 122)
    kwargs_494934 = {}
    # Getting the type of 'asarray' (line 122)
    asarray_494928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 122)
    asarray_call_result_494935 = invoke(stypy.reporting.localization.Localization(__file__, 122, 8), asarray_494928, *[result_add_494933], **kwargs_494934)
    
    # Assigning a type to the variable 'n' (line 122)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 122, 4), 'n', asarray_call_result_494935)
    
    # Assigning a Call to a Name (line 123):
    
    # Assigning a Call to a Name (line 123):
    
    # Call to asarray(...): (line 123)
    # Processing the call arguments (line 123)
    # Getting the type of 'x' (line 123)
    x_494937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 16), 'x', False)
    # Getting the type of 'n' (line 123)
    n_494938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 21), 'n', False)
    # Getting the type of 'n' (line 123)
    n_494939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 23), 'n', False)
    # Applying the binary operator '-' (line 123)
    result_sub_494940 = python_operator(stypy.reporting.localization.Localization(__file__, 123, 21), '-', n_494938, n_494939)
    
    # Applying the binary operator '+' (line 123)
    result_add_494941 = python_operator(stypy.reporting.localization.Localization(__file__, 123, 16), '+', x_494937, result_sub_494940)
    
    # Processing the call keyword arguments (line 123)
    kwargs_494942 = {}
    # Getting the type of 'asarray' (line 123)
    asarray_494936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 123)
    asarray_call_result_494943 = invoke(stypy.reporting.localization.Localization(__file__, 123, 8), asarray_494936, *[result_add_494941], **kwargs_494942)
    
    # Assigning a type to the variable 'x' (line 123)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 123, 4), 'x', asarray_call_result_494943)
    
    
    # Call to issubdtype(...): (line 124)
    # Processing the call arguments (line 124)
    # Getting the type of 'x' (line 124)
    x_494945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 18), 'x', False)
    # Obtaining the member 'dtype' of a type (line 124)
    dtype_494946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 124, 18), x_494945, 'dtype')
    # Getting the type of 'inexact' (line 124)
    inexact_494947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 27), 'inexact', False)
    # Processing the call keyword arguments (line 124)
    kwargs_494948 = {}
    # Getting the type of 'issubdtype' (line 124)
    issubdtype_494944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 7), 'issubdtype', False)
    # Calling issubdtype(args, kwargs) (line 124)
    issubdtype_call_result_494949 = invoke(stypy.reporting.localization.Localization(__file__, 124, 7), issubdtype_494944, *[dtype_494946, inexact_494947], **kwargs_494948)
    
    # Testing the type of an if condition (line 124)
    if_condition_494950 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 124, 4), issubdtype_call_result_494949)
    # Assigning a type to the variable 'if_condition_494950' (line 124)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 124, 4), 'if_condition_494950', if_condition_494950)
    # SSA begins for if statement (line 124)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 125):
    
    # Assigning a Attribute to a Name (line 125):
    # Getting the type of 'x' (line 125)
    x_494951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 16), 'x')
    # Obtaining the member 'dtype' of a type (line 125)
    dtype_494952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 125, 16), x_494951, 'dtype')
    # Assigning a type to the variable 'ytype' (line 125)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 125, 8), 'ytype', dtype_494952)
    # SSA branch for the else part of an if statement (line 124)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 127):
    
    # Assigning a Name to a Name (line 127):
    # Getting the type of 'float' (line 127)
    float_494953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 16), 'float')
    # Assigning a type to the variable 'ytype' (line 127)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 127, 8), 'ytype', float_494953)
    # SSA join for if statement (line 124)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 128):
    
    # Assigning a Call to a Name (line 128):
    
    # Call to zeros(...): (line 128)
    # Processing the call arguments (line 128)
    # Getting the type of 'x' (line 128)
    x_494955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 14), 'x', False)
    # Obtaining the member 'shape' of a type (line 128)
    shape_494956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 128, 14), x_494955, 'shape')
    # Getting the type of 'ytype' (line 128)
    ytype_494957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 23), 'ytype', False)
    # Processing the call keyword arguments (line 128)
    kwargs_494958 = {}
    # Getting the type of 'zeros' (line 128)
    zeros_494954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 8), 'zeros', False)
    # Calling zeros(args, kwargs) (line 128)
    zeros_call_result_494959 = invoke(stypy.reporting.localization.Localization(__file__, 128, 8), zeros_494954, *[shape_494956, ytype_494957], **kwargs_494958)
    
    # Assigning a type to the variable 'y' (line 128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 128, 4), 'y', zeros_call_result_494959)
    
    
    
    # Call to finfo(...): (line 132)
    # Processing the call arguments (line 132)
    # Getting the type of 'ytype' (line 132)
    ytype_494962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 16), 'ytype', False)
    # Processing the call keyword arguments (line 132)
    kwargs_494963 = {}
    # Getting the type of 'np' (line 132)
    np_494960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 7), 'np', False)
    # Obtaining the member 'finfo' of a type (line 132)
    finfo_494961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 132, 7), np_494960, 'finfo')
    # Calling finfo(args, kwargs) (line 132)
    finfo_call_result_494964 = invoke(stypy.reporting.localization.Localization(__file__, 132, 7), finfo_494961, *[ytype_494962], **kwargs_494963)
    
    # Obtaining the member 'eps' of a type (line 132)
    eps_494965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 132, 7), finfo_call_result_494964, 'eps')
    float_494966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 132, 29), 'float')
    # Applying the binary operator '<' (line 132)
    result_lt_494967 = python_operator(stypy.reporting.localization.Localization(__file__, 132, 7), '<', eps_494965, float_494966)
    
    # Testing the type of an if condition (line 132)
    if_condition_494968 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 132, 4), result_lt_494967)
    # Assigning a type to the variable 'if_condition_494968' (line 132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 132, 4), 'if_condition_494968', if_condition_494968)
    # SSA begins for if statement (line 132)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 133):
    
    # Assigning a Num to a Name (line 133):
    float_494969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 133, 17), 'float')
    # Assigning a type to the variable 'minval' (line 133)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 133, 8), 'minval', float_494969)
    # SSA branch for the else part of an if statement (line 132)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Call to finfo(...): (line 134)
    # Processing the call arguments (line 134)
    # Getting the type of 'ytype' (line 134)
    ytype_494972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 18), 'ytype', False)
    # Processing the call keyword arguments (line 134)
    kwargs_494973 = {}
    # Getting the type of 'np' (line 134)
    np_494970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 9), 'np', False)
    # Obtaining the member 'finfo' of a type (line 134)
    finfo_494971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 134, 9), np_494970, 'finfo')
    # Calling finfo(args, kwargs) (line 134)
    finfo_call_result_494974 = invoke(stypy.reporting.localization.Localization(__file__, 134, 9), finfo_494971, *[ytype_494972], **kwargs_494973)
    
    # Obtaining the member 'eps' of a type (line 134)
    eps_494975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 134, 9), finfo_call_result_494974, 'eps')
    float_494976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 134, 31), 'float')
    # Applying the binary operator '<' (line 134)
    result_lt_494977 = python_operator(stypy.reporting.localization.Localization(__file__, 134, 9), '<', eps_494975, float_494976)
    
    # Testing the type of an if condition (line 134)
    if_condition_494978 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 134, 9), result_lt_494977)
    # Assigning a type to the variable 'if_condition_494978' (line 134)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 134, 9), 'if_condition_494978', if_condition_494978)
    # SSA begins for if statement (line 134)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 135):
    
    # Assigning a Num to a Name (line 135):
    float_494979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 135, 17), 'float')
    # Assigning a type to the variable 'minval' (line 135)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 135, 8), 'minval', float_494979)
    # SSA branch for the else part of an if statement (line 134)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Name (line 137):
    
    # Assigning a Num to a Name (line 137):
    float_494980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 137, 17), 'float')
    # Assigning a type to the variable 'minval' (line 137)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 137, 8), 'minval', float_494980)
    # SSA join for if statement (line 134)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 132)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 139):
    
    # Assigning a BinOp to a Name (line 139):
    
    # Getting the type of 'n' (line 139)
    n_494981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 13), 'n')
    int_494982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 139, 18), 'int')
    # Applying the binary operator '<=' (line 139)
    result_le_494983 = python_operator(stypy.reporting.localization.Localization(__file__, 139, 13), '<=', n_494981, int_494982)
    
    
    # Getting the type of 'n' (line 139)
    n_494984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 24), 'n')
    
    # Call to floor(...): (line 139)
    # Processing the call arguments (line 139)
    # Getting the type of 'n' (line 139)
    n_494986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 35), 'n', False)
    # Processing the call keyword arguments (line 139)
    kwargs_494987 = {}
    # Getting the type of 'floor' (line 139)
    floor_494985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 29), 'floor', False)
    # Calling floor(args, kwargs) (line 139)
    floor_call_result_494988 = invoke(stypy.reporting.localization.Localization(__file__, 139, 29), floor_494985, *[n_494986], **kwargs_494987)
    
    # Applying the binary operator '!=' (line 139)
    result_ne_494989 = python_operator(stypy.reporting.localization.Localization(__file__, 139, 24), '!=', n_494984, floor_call_result_494988)
    
    # Applying the binary operator '|' (line 139)
    result_or__494990 = python_operator(stypy.reporting.localization.Localization(__file__, 139, 12), '|', result_le_494983, result_ne_494989)
    
    # Assigning a type to the variable 'mask1' (line 139)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 139, 4), 'mask1', result_or__494990)
    
    # Call to place(...): (line 140)
    # Processing the call arguments (line 140)
    # Getting the type of 'y' (line 140)
    y_494992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 10), 'y', False)
    # Getting the type of 'mask1' (line 140)
    mask1_494993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 13), 'mask1', False)
    # Getting the type of 'nan' (line 140)
    nan_494994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 20), 'nan', False)
    # Processing the call keyword arguments (line 140)
    kwargs_494995 = {}
    # Getting the type of 'place' (line 140)
    place_494991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 4), 'place', False)
    # Calling place(args, kwargs) (line 140)
    place_call_result_494996 = invoke(stypy.reporting.localization.Localization(__file__, 140, 4), place_494991, *[y_494992, mask1_494993, nan_494994], **kwargs_494995)
    
    
    # Assigning a BinOp to a Name (line 142):
    
    # Assigning a BinOp to a Name (line 142):
    # Getting the type of 'x' (line 142)
    x_494997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 8), 'x')
    int_494998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 142, 12), 'int')
    # Applying the binary operator 'div' (line 142)
    result_div_494999 = python_operator(stypy.reporting.localization.Localization(__file__, 142, 8), 'div', x_494997, int_494998)
    
    # Assigning a type to the variable 'x' (line 142)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 142, 4), 'x', result_div_494999)
    
    # Assigning a Call to a Name (line 143):
    
    # Assigning a Call to a Name (line 143):
    
    # Call to sin(...): (line 143)
    # Processing the call arguments (line 143)
    # Getting the type of 'x' (line 143)
    x_495001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 16), 'x', False)
    # Processing the call keyword arguments (line 143)
    kwargs_495002 = {}
    # Getting the type of 'sin' (line 143)
    sin_495000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 12), 'sin', False)
    # Calling sin(args, kwargs) (line 143)
    sin_call_result_495003 = invoke(stypy.reporting.localization.Localization(__file__, 143, 12), sin_495000, *[x_495001], **kwargs_495002)
    
    # Assigning a type to the variable 'denom' (line 143)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 143, 4), 'denom', sin_call_result_495003)
    
    # Assigning a BinOp to a Name (line 144):
    
    # Assigning a BinOp to a Name (line 144):
    int_495004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 144, 13), 'int')
    # Getting the type of 'mask1' (line 144)
    mask1_495005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 15), 'mask1')
    # Applying the binary operator '-' (line 144)
    result_sub_495006 = python_operator(stypy.reporting.localization.Localization(__file__, 144, 13), '-', int_495004, mask1_495005)
    
    
    
    # Call to abs(...): (line 144)
    # Processing the call arguments (line 144)
    # Getting the type of 'denom' (line 144)
    denom_495008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 29), 'denom', False)
    # Processing the call keyword arguments (line 144)
    kwargs_495009 = {}
    # Getting the type of 'abs' (line 144)
    abs_495007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 25), 'abs', False)
    # Calling abs(args, kwargs) (line 144)
    abs_call_result_495010 = invoke(stypy.reporting.localization.Localization(__file__, 144, 25), abs_495007, *[denom_495008], **kwargs_495009)
    
    # Getting the type of 'minval' (line 144)
    minval_495011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 38), 'minval')
    # Applying the binary operator '<' (line 144)
    result_lt_495012 = python_operator(stypy.reporting.localization.Localization(__file__, 144, 25), '<', abs_call_result_495010, minval_495011)
    
    # Applying the binary operator '&' (line 144)
    result_and__495013 = python_operator(stypy.reporting.localization.Localization(__file__, 144, 12), '&', result_sub_495006, result_lt_495012)
    
    # Assigning a type to the variable 'mask2' (line 144)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 144, 4), 'mask2', result_and__495013)
    
    # Assigning a Call to a Name (line 145):
    
    # Assigning a Call to a Name (line 145):
    
    # Call to extract(...): (line 145)
    # Processing the call arguments (line 145)
    # Getting the type of 'mask2' (line 145)
    mask2_495015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 19), 'mask2', False)
    # Getting the type of 'x' (line 145)
    x_495016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 26), 'x', False)
    # Processing the call keyword arguments (line 145)
    kwargs_495017 = {}
    # Getting the type of 'extract' (line 145)
    extract_495014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 11), 'extract', False)
    # Calling extract(args, kwargs) (line 145)
    extract_call_result_495018 = invoke(stypy.reporting.localization.Localization(__file__, 145, 11), extract_495014, *[mask2_495015, x_495016], **kwargs_495017)
    
    # Assigning a type to the variable 'xsub' (line 145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 145, 4), 'xsub', extract_call_result_495018)
    
    # Assigning a Call to a Name (line 146):
    
    # Assigning a Call to a Name (line 146):
    
    # Call to extract(...): (line 146)
    # Processing the call arguments (line 146)
    # Getting the type of 'mask2' (line 146)
    mask2_495020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 19), 'mask2', False)
    # Getting the type of 'n' (line 146)
    n_495021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 26), 'n', False)
    # Processing the call keyword arguments (line 146)
    kwargs_495022 = {}
    # Getting the type of 'extract' (line 146)
    extract_495019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 11), 'extract', False)
    # Calling extract(args, kwargs) (line 146)
    extract_call_result_495023 = invoke(stypy.reporting.localization.Localization(__file__, 146, 11), extract_495019, *[mask2_495020, n_495021], **kwargs_495022)
    
    # Assigning a type to the variable 'nsub' (line 146)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 146, 4), 'nsub', extract_call_result_495023)
    
    # Assigning a BinOp to a Name (line 147):
    
    # Assigning a BinOp to a Name (line 147):
    # Getting the type of 'xsub' (line 147)
    xsub_495024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 11), 'xsub')
    # Getting the type of 'pi' (line 147)
    pi_495025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 18), 'pi')
    # Applying the binary operator 'div' (line 147)
    result_div_495026 = python_operator(stypy.reporting.localization.Localization(__file__, 147, 11), 'div', xsub_495024, pi_495025)
    
    # Assigning a type to the variable 'zsub' (line 147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 147, 4), 'zsub', result_div_495026)
    
    # Call to place(...): (line 148)
    # Processing the call arguments (line 148)
    # Getting the type of 'y' (line 148)
    y_495028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 10), 'y', False)
    # Getting the type of 'mask2' (line 148)
    mask2_495029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 13), 'mask2', False)
    
    # Call to pow(...): (line 148)
    # Processing the call arguments (line 148)
    int_495031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 24), 'int')
    
    # Call to round(...): (line 148)
    # Processing the call arguments (line 148)
    # Getting the type of 'zsub' (line 148)
    zsub_495034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 37), 'zsub', False)
    # Processing the call keyword arguments (line 148)
    kwargs_495035 = {}
    # Getting the type of 'np' (line 148)
    np_495032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 28), 'np', False)
    # Obtaining the member 'round' of a type (line 148)
    round_495033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 148, 28), np_495032, 'round')
    # Calling round(args, kwargs) (line 148)
    round_call_result_495036 = invoke(stypy.reporting.localization.Localization(__file__, 148, 28), round_495033, *[zsub_495034], **kwargs_495035)
    
    # Getting the type of 'nsub' (line 148)
    nsub_495037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 44), 'nsub', False)
    int_495038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 49), 'int')
    # Applying the binary operator '-' (line 148)
    result_sub_495039 = python_operator(stypy.reporting.localization.Localization(__file__, 148, 44), '-', nsub_495037, int_495038)
    
    # Applying the binary operator '*' (line 148)
    result_mul_495040 = python_operator(stypy.reporting.localization.Localization(__file__, 148, 28), '*', round_call_result_495036, result_sub_495039)
    
    # Processing the call keyword arguments (line 148)
    kwargs_495041 = {}
    # Getting the type of 'pow' (line 148)
    pow_495030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 20), 'pow', False)
    # Calling pow(args, kwargs) (line 148)
    pow_call_result_495042 = invoke(stypy.reporting.localization.Localization(__file__, 148, 20), pow_495030, *[int_495031, result_mul_495040], **kwargs_495041)
    
    # Processing the call keyword arguments (line 148)
    kwargs_495043 = {}
    # Getting the type of 'place' (line 148)
    place_495027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 4), 'place', False)
    # Calling place(args, kwargs) (line 148)
    place_call_result_495044 = invoke(stypy.reporting.localization.Localization(__file__, 148, 4), place_495027, *[y_495028, mask2_495029, pow_call_result_495042], **kwargs_495043)
    
    
    # Assigning a BinOp to a Name (line 150):
    
    # Assigning a BinOp to a Name (line 150):
    int_495045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 150, 12), 'int')
    # Getting the type of 'mask1' (line 150)
    mask1_495046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 14), 'mask1')
    # Applying the binary operator '-' (line 150)
    result_sub_495047 = python_operator(stypy.reporting.localization.Localization(__file__, 150, 12), '-', int_495045, mask1_495046)
    
    int_495048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 150, 24), 'int')
    # Getting the type of 'mask2' (line 150)
    mask2_495049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 26), 'mask2')
    # Applying the binary operator '-' (line 150)
    result_sub_495050 = python_operator(stypy.reporting.localization.Localization(__file__, 150, 24), '-', int_495048, mask2_495049)
    
    # Applying the binary operator '&' (line 150)
    result_and__495051 = python_operator(stypy.reporting.localization.Localization(__file__, 150, 11), '&', result_sub_495047, result_sub_495050)
    
    # Assigning a type to the variable 'mask' (line 150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 150, 4), 'mask', result_and__495051)
    
    # Assigning a Call to a Name (line 151):
    
    # Assigning a Call to a Name (line 151):
    
    # Call to extract(...): (line 151)
    # Processing the call arguments (line 151)
    # Getting the type of 'mask' (line 151)
    mask_495053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 19), 'mask', False)
    # Getting the type of 'x' (line 151)
    x_495054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 25), 'x', False)
    # Processing the call keyword arguments (line 151)
    kwargs_495055 = {}
    # Getting the type of 'extract' (line 151)
    extract_495052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 11), 'extract', False)
    # Calling extract(args, kwargs) (line 151)
    extract_call_result_495056 = invoke(stypy.reporting.localization.Localization(__file__, 151, 11), extract_495052, *[mask_495053, x_495054], **kwargs_495055)
    
    # Assigning a type to the variable 'xsub' (line 151)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 151, 4), 'xsub', extract_call_result_495056)
    
    # Assigning a Call to a Name (line 152):
    
    # Assigning a Call to a Name (line 152):
    
    # Call to extract(...): (line 152)
    # Processing the call arguments (line 152)
    # Getting the type of 'mask' (line 152)
    mask_495058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 19), 'mask', False)
    # Getting the type of 'n' (line 152)
    n_495059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 25), 'n', False)
    # Processing the call keyword arguments (line 152)
    kwargs_495060 = {}
    # Getting the type of 'extract' (line 152)
    extract_495057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 11), 'extract', False)
    # Calling extract(args, kwargs) (line 152)
    extract_call_result_495061 = invoke(stypy.reporting.localization.Localization(__file__, 152, 11), extract_495057, *[mask_495058, n_495059], **kwargs_495060)
    
    # Assigning a type to the variable 'nsub' (line 152)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 152, 4), 'nsub', extract_call_result_495061)
    
    # Assigning a Call to a Name (line 153):
    
    # Assigning a Call to a Name (line 153):
    
    # Call to extract(...): (line 153)
    # Processing the call arguments (line 153)
    # Getting the type of 'mask' (line 153)
    mask_495063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 19), 'mask', False)
    # Getting the type of 'denom' (line 153)
    denom_495064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 25), 'denom', False)
    # Processing the call keyword arguments (line 153)
    kwargs_495065 = {}
    # Getting the type of 'extract' (line 153)
    extract_495062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 11), 'extract', False)
    # Calling extract(args, kwargs) (line 153)
    extract_call_result_495066 = invoke(stypy.reporting.localization.Localization(__file__, 153, 11), extract_495062, *[mask_495063, denom_495064], **kwargs_495065)
    
    # Assigning a type to the variable 'dsub' (line 153)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 153, 4), 'dsub', extract_call_result_495066)
    
    # Call to place(...): (line 154)
    # Processing the call arguments (line 154)
    # Getting the type of 'y' (line 154)
    y_495068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 10), 'y', False)
    # Getting the type of 'mask' (line 154)
    mask_495069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 13), 'mask', False)
    
    # Call to sin(...): (line 154)
    # Processing the call arguments (line 154)
    # Getting the type of 'nsub' (line 154)
    nsub_495071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 23), 'nsub', False)
    # Getting the type of 'xsub' (line 154)
    xsub_495072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 28), 'xsub', False)
    # Applying the binary operator '*' (line 154)
    result_mul_495073 = python_operator(stypy.reporting.localization.Localization(__file__, 154, 23), '*', nsub_495071, xsub_495072)
    
    # Processing the call keyword arguments (line 154)
    kwargs_495074 = {}
    # Getting the type of 'sin' (line 154)
    sin_495070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 19), 'sin', False)
    # Calling sin(args, kwargs) (line 154)
    sin_call_result_495075 = invoke(stypy.reporting.localization.Localization(__file__, 154, 19), sin_495070, *[result_mul_495073], **kwargs_495074)
    
    # Getting the type of 'nsub' (line 154)
    nsub_495076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 35), 'nsub', False)
    # Getting the type of 'dsub' (line 154)
    dsub_495077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 40), 'dsub', False)
    # Applying the binary operator '*' (line 154)
    result_mul_495078 = python_operator(stypy.reporting.localization.Localization(__file__, 154, 35), '*', nsub_495076, dsub_495077)
    
    # Applying the binary operator 'div' (line 154)
    result_div_495079 = python_operator(stypy.reporting.localization.Localization(__file__, 154, 19), 'div', sin_call_result_495075, result_mul_495078)
    
    # Processing the call keyword arguments (line 154)
    kwargs_495080 = {}
    # Getting the type of 'place' (line 154)
    place_495067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 4), 'place', False)
    # Calling place(args, kwargs) (line 154)
    place_call_result_495081 = invoke(stypy.reporting.localization.Localization(__file__, 154, 4), place_495067, *[y_495068, mask_495069, result_div_495079], **kwargs_495080)
    
    # Getting the type of 'y' (line 155)
    y_495082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 11), 'y')
    # Assigning a type to the variable 'stypy_return_type' (line 155)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 155, 4), 'stypy_return_type', y_495082)
    
    # ################# End of 'diric(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'diric' in the type store
    # Getting the type of 'stypy_return_type' (line 57)
    stypy_return_type_495083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 57, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495083)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'diric'
    return stypy_return_type_495083

# Assigning a type to the variable 'diric' (line 57)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 57, 0), 'diric', diric)

@norecursion
def jnjnp_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'jnjnp_zeros'
    module_type_store = module_type_store.open_function_context('jnjnp_zeros', 158, 0, False)
    
    # Passed parameters checking function
    jnjnp_zeros.stypy_localization = localization
    jnjnp_zeros.stypy_type_of_self = None
    jnjnp_zeros.stypy_type_store = module_type_store
    jnjnp_zeros.stypy_function_name = 'jnjnp_zeros'
    jnjnp_zeros.stypy_param_names_list = ['nt']
    jnjnp_zeros.stypy_varargs_param_name = None
    jnjnp_zeros.stypy_kwargs_param_name = None
    jnjnp_zeros.stypy_call_defaults = defaults
    jnjnp_zeros.stypy_call_varargs = varargs
    jnjnp_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'jnjnp_zeros', ['nt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'jnjnp_zeros', localization, ['nt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'jnjnp_zeros(...)' code ##################

    str_495084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, (-1)), 'str', 'Compute zeros of integer-order Bessel functions Jn and Jn\'.\n\n    Results are arranged in order of the magnitudes of the zeros.\n\n    Parameters\n    ----------\n    nt : int\n        Number (<=1200) of zeros to compute\n\n    Returns\n    -------\n    zo[l-1] : ndarray\n        Value of the lth zero of Jn(x) and Jn\'(x). Of length `nt`.\n    n[l-1] : ndarray\n        Order of the Jn(x) or Jn\'(x) associated with lth zero. Of length `nt`.\n    m[l-1] : ndarray\n        Serial number of the zeros of Jn(x) or Jn\'(x) associated\n        with lth zero. Of length `nt`.\n    t[l-1] : ndarray\n        0 if lth zero in zo is zero of Jn(x), 1 if it is a zero of Jn\'(x). Of\n        length `nt`.\n\n    See Also\n    --------\n    jn_zeros, jnp_zeros : to get separated arrays of zeros.\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996, chapter 5.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to isscalar(...): (line 192)
    # Processing the call arguments (line 192)
    # Getting the type of 'nt' (line 192)
    nt_495086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 20), 'nt', False)
    # Processing the call keyword arguments (line 192)
    kwargs_495087 = {}
    # Getting the type of 'isscalar' (line 192)
    isscalar_495085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 192)
    isscalar_call_result_495088 = invoke(stypy.reporting.localization.Localization(__file__, 192, 11), isscalar_495085, *[nt_495086], **kwargs_495087)
    
    # Applying the 'not' unary operator (line 192)
    result_not__495089 = python_operator(stypy.reporting.localization.Localization(__file__, 192, 7), 'not', isscalar_call_result_495088)
    
    
    
    # Call to floor(...): (line 192)
    # Processing the call arguments (line 192)
    # Getting the type of 'nt' (line 192)
    nt_495091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 34), 'nt', False)
    # Processing the call keyword arguments (line 192)
    kwargs_495092 = {}
    # Getting the type of 'floor' (line 192)
    floor_495090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 28), 'floor', False)
    # Calling floor(args, kwargs) (line 192)
    floor_call_result_495093 = invoke(stypy.reporting.localization.Localization(__file__, 192, 28), floor_495090, *[nt_495091], **kwargs_495092)
    
    # Getting the type of 'nt' (line 192)
    nt_495094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 41), 'nt')
    # Applying the binary operator '!=' (line 192)
    result_ne_495095 = python_operator(stypy.reporting.localization.Localization(__file__, 192, 28), '!=', floor_call_result_495093, nt_495094)
    
    # Applying the binary operator 'or' (line 192)
    result_or_keyword_495096 = python_operator(stypy.reporting.localization.Localization(__file__, 192, 7), 'or', result_not__495089, result_ne_495095)
    
    # Getting the type of 'nt' (line 192)
    nt_495097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 49), 'nt')
    int_495098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 54), 'int')
    # Applying the binary operator '>' (line 192)
    result_gt_495099 = python_operator(stypy.reporting.localization.Localization(__file__, 192, 49), '>', nt_495097, int_495098)
    
    # Applying the binary operator 'or' (line 192)
    result_or_keyword_495100 = python_operator(stypy.reporting.localization.Localization(__file__, 192, 7), 'or', result_or_keyword_495096, result_gt_495099)
    
    # Testing the type of an if condition (line 192)
    if_condition_495101 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 192, 4), result_or_keyword_495100)
    # Assigning a type to the variable 'if_condition_495101' (line 192)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 192, 4), 'if_condition_495101', if_condition_495101)
    # SSA begins for if statement (line 192)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 193)
    # Processing the call arguments (line 193)
    str_495103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 25), 'str', 'Number must be integer <= 1200.')
    # Processing the call keyword arguments (line 193)
    kwargs_495104 = {}
    # Getting the type of 'ValueError' (line 193)
    ValueError_495102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 193)
    ValueError_call_result_495105 = invoke(stypy.reporting.localization.Localization(__file__, 193, 14), ValueError_495102, *[str_495103], **kwargs_495104)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 193, 8), ValueError_call_result_495105, 'raise parameter', BaseException)
    # SSA join for if statement (line 192)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 194):
    
    # Assigning a Call to a Name (line 194):
    
    # Call to int(...): (line 194)
    # Processing the call arguments (line 194)
    # Getting the type of 'nt' (line 194)
    nt_495107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 13), 'nt', False)
    # Processing the call keyword arguments (line 194)
    kwargs_495108 = {}
    # Getting the type of 'int' (line 194)
    int_495106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 9), 'int', False)
    # Calling int(args, kwargs) (line 194)
    int_call_result_495109 = invoke(stypy.reporting.localization.Localization(__file__, 194, 9), int_495106, *[nt_495107], **kwargs_495108)
    
    # Assigning a type to the variable 'nt' (line 194)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 194, 4), 'nt', int_call_result_495109)
    
    # Assigning a Call to a Tuple (line 195):
    
    # Assigning a Subscript to a Name (line 195):
    
    # Obtaining the type of the subscript
    int_495110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 4), 'int')
    
    # Call to jdzo(...): (line 195)
    # Processing the call arguments (line 195)
    # Getting the type of 'nt' (line 195)
    nt_495113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 31), 'nt', False)
    # Processing the call keyword arguments (line 195)
    kwargs_495114 = {}
    # Getting the type of 'specfun' (line 195)
    specfun_495111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 18), 'specfun', False)
    # Obtaining the member 'jdzo' of a type (line 195)
    jdzo_495112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 18), specfun_495111, 'jdzo')
    # Calling jdzo(args, kwargs) (line 195)
    jdzo_call_result_495115 = invoke(stypy.reporting.localization.Localization(__file__, 195, 18), jdzo_495112, *[nt_495113], **kwargs_495114)
    
    # Obtaining the member '__getitem__' of a type (line 195)
    getitem___495116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 4), jdzo_call_result_495115, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 195)
    subscript_call_result_495117 = invoke(stypy.reporting.localization.Localization(__file__, 195, 4), getitem___495116, int_495110)
    
    # Assigning a type to the variable 'tuple_var_assignment_494731' (line 195)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 4), 'tuple_var_assignment_494731', subscript_call_result_495117)
    
    # Assigning a Subscript to a Name (line 195):
    
    # Obtaining the type of the subscript
    int_495118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 4), 'int')
    
    # Call to jdzo(...): (line 195)
    # Processing the call arguments (line 195)
    # Getting the type of 'nt' (line 195)
    nt_495121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 31), 'nt', False)
    # Processing the call keyword arguments (line 195)
    kwargs_495122 = {}
    # Getting the type of 'specfun' (line 195)
    specfun_495119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 18), 'specfun', False)
    # Obtaining the member 'jdzo' of a type (line 195)
    jdzo_495120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 18), specfun_495119, 'jdzo')
    # Calling jdzo(args, kwargs) (line 195)
    jdzo_call_result_495123 = invoke(stypy.reporting.localization.Localization(__file__, 195, 18), jdzo_495120, *[nt_495121], **kwargs_495122)
    
    # Obtaining the member '__getitem__' of a type (line 195)
    getitem___495124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 4), jdzo_call_result_495123, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 195)
    subscript_call_result_495125 = invoke(stypy.reporting.localization.Localization(__file__, 195, 4), getitem___495124, int_495118)
    
    # Assigning a type to the variable 'tuple_var_assignment_494732' (line 195)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 4), 'tuple_var_assignment_494732', subscript_call_result_495125)
    
    # Assigning a Subscript to a Name (line 195):
    
    # Obtaining the type of the subscript
    int_495126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 4), 'int')
    
    # Call to jdzo(...): (line 195)
    # Processing the call arguments (line 195)
    # Getting the type of 'nt' (line 195)
    nt_495129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 31), 'nt', False)
    # Processing the call keyword arguments (line 195)
    kwargs_495130 = {}
    # Getting the type of 'specfun' (line 195)
    specfun_495127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 18), 'specfun', False)
    # Obtaining the member 'jdzo' of a type (line 195)
    jdzo_495128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 18), specfun_495127, 'jdzo')
    # Calling jdzo(args, kwargs) (line 195)
    jdzo_call_result_495131 = invoke(stypy.reporting.localization.Localization(__file__, 195, 18), jdzo_495128, *[nt_495129], **kwargs_495130)
    
    # Obtaining the member '__getitem__' of a type (line 195)
    getitem___495132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 4), jdzo_call_result_495131, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 195)
    subscript_call_result_495133 = invoke(stypy.reporting.localization.Localization(__file__, 195, 4), getitem___495132, int_495126)
    
    # Assigning a type to the variable 'tuple_var_assignment_494733' (line 195)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 4), 'tuple_var_assignment_494733', subscript_call_result_495133)
    
    # Assigning a Subscript to a Name (line 195):
    
    # Obtaining the type of the subscript
    int_495134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 4), 'int')
    
    # Call to jdzo(...): (line 195)
    # Processing the call arguments (line 195)
    # Getting the type of 'nt' (line 195)
    nt_495137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 31), 'nt', False)
    # Processing the call keyword arguments (line 195)
    kwargs_495138 = {}
    # Getting the type of 'specfun' (line 195)
    specfun_495135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 18), 'specfun', False)
    # Obtaining the member 'jdzo' of a type (line 195)
    jdzo_495136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 18), specfun_495135, 'jdzo')
    # Calling jdzo(args, kwargs) (line 195)
    jdzo_call_result_495139 = invoke(stypy.reporting.localization.Localization(__file__, 195, 18), jdzo_495136, *[nt_495137], **kwargs_495138)
    
    # Obtaining the member '__getitem__' of a type (line 195)
    getitem___495140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 4), jdzo_call_result_495139, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 195)
    subscript_call_result_495141 = invoke(stypy.reporting.localization.Localization(__file__, 195, 4), getitem___495140, int_495134)
    
    # Assigning a type to the variable 'tuple_var_assignment_494734' (line 195)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 4), 'tuple_var_assignment_494734', subscript_call_result_495141)
    
    # Assigning a Name to a Name (line 195):
    # Getting the type of 'tuple_var_assignment_494731' (line 195)
    tuple_var_assignment_494731_495142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 4), 'tuple_var_assignment_494731')
    # Assigning a type to the variable 'n' (line 195)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 4), 'n', tuple_var_assignment_494731_495142)
    
    # Assigning a Name to a Name (line 195):
    # Getting the type of 'tuple_var_assignment_494732' (line 195)
    tuple_var_assignment_494732_495143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 4), 'tuple_var_assignment_494732')
    # Assigning a type to the variable 'm' (line 195)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 7), 'm', tuple_var_assignment_494732_495143)
    
    # Assigning a Name to a Name (line 195):
    # Getting the type of 'tuple_var_assignment_494733' (line 195)
    tuple_var_assignment_494733_495144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 4), 'tuple_var_assignment_494733')
    # Assigning a type to the variable 't' (line 195)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 10), 't', tuple_var_assignment_494733_495144)
    
    # Assigning a Name to a Name (line 195):
    # Getting the type of 'tuple_var_assignment_494734' (line 195)
    tuple_var_assignment_494734_495145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 4), 'tuple_var_assignment_494734')
    # Assigning a type to the variable 'zo' (line 195)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 13), 'zo', tuple_var_assignment_494734_495145)
    
    # Obtaining an instance of the builtin type 'tuple' (line 196)
    tuple_495146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 196, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 196)
    # Adding element type (line 196)
    
    # Obtaining the type of the subscript
    int_495147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 196, 14), 'int')
    # Getting the type of 'nt' (line 196)
    nt_495148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 16), 'nt')
    int_495149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 196, 19), 'int')
    # Applying the binary operator '+' (line 196)
    result_add_495150 = python_operator(stypy.reporting.localization.Localization(__file__, 196, 16), '+', nt_495148, int_495149)
    
    slice_495151 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 196, 11), int_495147, result_add_495150, None)
    # Getting the type of 'zo' (line 196)
    zo_495152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 11), 'zo')
    # Obtaining the member '__getitem__' of a type (line 196)
    getitem___495153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 196, 11), zo_495152, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 196)
    subscript_call_result_495154 = invoke(stypy.reporting.localization.Localization(__file__, 196, 11), getitem___495153, slice_495151)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 196, 11), tuple_495146, subscript_call_result_495154)
    # Adding element type (line 196)
    
    # Obtaining the type of the subscript
    # Getting the type of 'nt' (line 196)
    nt_495155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 26), 'nt')
    slice_495156 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 196, 23), None, nt_495155, None)
    # Getting the type of 'n' (line 196)
    n_495157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 23), 'n')
    # Obtaining the member '__getitem__' of a type (line 196)
    getitem___495158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 196, 23), n_495157, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 196)
    subscript_call_result_495159 = invoke(stypy.reporting.localization.Localization(__file__, 196, 23), getitem___495158, slice_495156)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 196, 11), tuple_495146, subscript_call_result_495159)
    # Adding element type (line 196)
    
    # Obtaining the type of the subscript
    # Getting the type of 'nt' (line 196)
    nt_495160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 34), 'nt')
    slice_495161 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 196, 31), None, nt_495160, None)
    # Getting the type of 'm' (line 196)
    m_495162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 31), 'm')
    # Obtaining the member '__getitem__' of a type (line 196)
    getitem___495163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 196, 31), m_495162, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 196)
    subscript_call_result_495164 = invoke(stypy.reporting.localization.Localization(__file__, 196, 31), getitem___495163, slice_495161)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 196, 11), tuple_495146, subscript_call_result_495164)
    # Adding element type (line 196)
    
    # Obtaining the type of the subscript
    # Getting the type of 'nt' (line 196)
    nt_495165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 42), 'nt')
    slice_495166 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 196, 39), None, nt_495165, None)
    # Getting the type of 't' (line 196)
    t_495167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 39), 't')
    # Obtaining the member '__getitem__' of a type (line 196)
    getitem___495168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 196, 39), t_495167, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 196)
    subscript_call_result_495169 = invoke(stypy.reporting.localization.Localization(__file__, 196, 39), getitem___495168, slice_495166)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 196, 11), tuple_495146, subscript_call_result_495169)
    
    # Assigning a type to the variable 'stypy_return_type' (line 196)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 196, 4), 'stypy_return_type', tuple_495146)
    
    # ################# End of 'jnjnp_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'jnjnp_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 158)
    stypy_return_type_495170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495170)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'jnjnp_zeros'
    return stypy_return_type_495170

# Assigning a type to the variable 'jnjnp_zeros' (line 158)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 0), 'jnjnp_zeros', jnjnp_zeros)

@norecursion
def jnyn_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'jnyn_zeros'
    module_type_store = module_type_store.open_function_context('jnyn_zeros', 199, 0, False)
    
    # Passed parameters checking function
    jnyn_zeros.stypy_localization = localization
    jnyn_zeros.stypy_type_of_self = None
    jnyn_zeros.stypy_type_store = module_type_store
    jnyn_zeros.stypy_function_name = 'jnyn_zeros'
    jnyn_zeros.stypy_param_names_list = ['n', 'nt']
    jnyn_zeros.stypy_varargs_param_name = None
    jnyn_zeros.stypy_kwargs_param_name = None
    jnyn_zeros.stypy_call_defaults = defaults
    jnyn_zeros.stypy_call_varargs = varargs
    jnyn_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'jnyn_zeros', ['n', 'nt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'jnyn_zeros', localization, ['n', 'nt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'jnyn_zeros(...)' code ##################

    str_495171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 220, (-1)), 'str', 'Compute nt zeros of Bessel functions Jn(x), Jn\'(x), Yn(x), and Yn\'(x).\n\n    Returns 4 arrays of length `nt`, corresponding to the first `nt` zeros of\n    Jn(x), Jn\'(x), Yn(x), and Yn\'(x), respectively.\n\n    Parameters\n    ----------\n    n : int\n        Order of the Bessel functions\n    nt : int\n        Number (<=1200) of zeros to compute\n\n    See jn_zeros, jnp_zeros, yn_zeros, ynp_zeros to get separate arrays.\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996, chapter 5.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    
    # Evaluating a boolean operation
    
    # Call to isscalar(...): (line 221)
    # Processing the call arguments (line 221)
    # Getting the type of 'nt' (line 221)
    nt_495173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 21), 'nt', False)
    # Processing the call keyword arguments (line 221)
    kwargs_495174 = {}
    # Getting the type of 'isscalar' (line 221)
    isscalar_495172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 12), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 221)
    isscalar_call_result_495175 = invoke(stypy.reporting.localization.Localization(__file__, 221, 12), isscalar_495172, *[nt_495173], **kwargs_495174)
    
    
    # Call to isscalar(...): (line 221)
    # Processing the call arguments (line 221)
    # Getting the type of 'n' (line 221)
    n_495177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 38), 'n', False)
    # Processing the call keyword arguments (line 221)
    kwargs_495178 = {}
    # Getting the type of 'isscalar' (line 221)
    isscalar_495176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 29), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 221)
    isscalar_call_result_495179 = invoke(stypy.reporting.localization.Localization(__file__, 221, 29), isscalar_495176, *[n_495177], **kwargs_495178)
    
    # Applying the binary operator 'and' (line 221)
    result_and_keyword_495180 = python_operator(stypy.reporting.localization.Localization(__file__, 221, 12), 'and', isscalar_call_result_495175, isscalar_call_result_495179)
    
    # Applying the 'not' unary operator (line 221)
    result_not__495181 = python_operator(stypy.reporting.localization.Localization(__file__, 221, 7), 'not', result_and_keyword_495180)
    
    # Testing the type of an if condition (line 221)
    if_condition_495182 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 221, 4), result_not__495181)
    # Assigning a type to the variable 'if_condition_495182' (line 221)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 221, 4), 'if_condition_495182', if_condition_495182)
    # SSA begins for if statement (line 221)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 222)
    # Processing the call arguments (line 222)
    str_495184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 222, 25), 'str', 'Arguments must be scalars.')
    # Processing the call keyword arguments (line 222)
    kwargs_495185 = {}
    # Getting the type of 'ValueError' (line 222)
    ValueError_495183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 222)
    ValueError_call_result_495186 = invoke(stypy.reporting.localization.Localization(__file__, 222, 14), ValueError_495183, *[str_495184], **kwargs_495185)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 222, 8), ValueError_call_result_495186, 'raise parameter', BaseException)
    # SSA join for if statement (line 221)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    
    # Call to floor(...): (line 223)
    # Processing the call arguments (line 223)
    # Getting the type of 'n' (line 223)
    n_495188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 14), 'n', False)
    # Processing the call keyword arguments (line 223)
    kwargs_495189 = {}
    # Getting the type of 'floor' (line 223)
    floor_495187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 8), 'floor', False)
    # Calling floor(args, kwargs) (line 223)
    floor_call_result_495190 = invoke(stypy.reporting.localization.Localization(__file__, 223, 8), floor_495187, *[n_495188], **kwargs_495189)
    
    # Getting the type of 'n' (line 223)
    n_495191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 20), 'n')
    # Applying the binary operator '!=' (line 223)
    result_ne_495192 = python_operator(stypy.reporting.localization.Localization(__file__, 223, 8), '!=', floor_call_result_495190, n_495191)
    
    
    
    # Call to floor(...): (line 223)
    # Processing the call arguments (line 223)
    # Getting the type of 'nt' (line 223)
    nt_495194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 33), 'nt', False)
    # Processing the call keyword arguments (line 223)
    kwargs_495195 = {}
    # Getting the type of 'floor' (line 223)
    floor_495193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 27), 'floor', False)
    # Calling floor(args, kwargs) (line 223)
    floor_call_result_495196 = invoke(stypy.reporting.localization.Localization(__file__, 223, 27), floor_495193, *[nt_495194], **kwargs_495195)
    
    # Getting the type of 'nt' (line 223)
    nt_495197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 40), 'nt')
    # Applying the binary operator '!=' (line 223)
    result_ne_495198 = python_operator(stypy.reporting.localization.Localization(__file__, 223, 27), '!=', floor_call_result_495196, nt_495197)
    
    # Applying the binary operator 'or' (line 223)
    result_or_keyword_495199 = python_operator(stypy.reporting.localization.Localization(__file__, 223, 7), 'or', result_ne_495192, result_ne_495198)
    
    # Testing the type of an if condition (line 223)
    if_condition_495200 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 223, 4), result_or_keyword_495199)
    # Assigning a type to the variable 'if_condition_495200' (line 223)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 223, 4), 'if_condition_495200', if_condition_495200)
    # SSA begins for if statement (line 223)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 224)
    # Processing the call arguments (line 224)
    str_495202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 224, 25), 'str', 'Arguments must be integers.')
    # Processing the call keyword arguments (line 224)
    kwargs_495203 = {}
    # Getting the type of 'ValueError' (line 224)
    ValueError_495201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 224)
    ValueError_call_result_495204 = invoke(stypy.reporting.localization.Localization(__file__, 224, 14), ValueError_495201, *[str_495202], **kwargs_495203)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 224, 8), ValueError_call_result_495204, 'raise parameter', BaseException)
    # SSA join for if statement (line 223)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'nt' (line 225)
    nt_495205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 8), 'nt')
    int_495206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 14), 'int')
    # Applying the binary operator '<=' (line 225)
    result_le_495207 = python_operator(stypy.reporting.localization.Localization(__file__, 225, 8), '<=', nt_495205, int_495206)
    
    # Testing the type of an if condition (line 225)
    if_condition_495208 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 225, 4), result_le_495207)
    # Assigning a type to the variable 'if_condition_495208' (line 225)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 4), 'if_condition_495208', if_condition_495208)
    # SSA begins for if statement (line 225)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 226)
    # Processing the call arguments (line 226)
    str_495210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 226, 25), 'str', 'nt > 0')
    # Processing the call keyword arguments (line 226)
    kwargs_495211 = {}
    # Getting the type of 'ValueError' (line 226)
    ValueError_495209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 226)
    ValueError_call_result_495212 = invoke(stypy.reporting.localization.Localization(__file__, 226, 14), ValueError_495209, *[str_495210], **kwargs_495211)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 226, 8), ValueError_call_result_495212, 'raise parameter', BaseException)
    # SSA join for if statement (line 225)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to jyzo(...): (line 227)
    # Processing the call arguments (line 227)
    
    # Call to abs(...): (line 227)
    # Processing the call arguments (line 227)
    # Getting the type of 'n' (line 227)
    n_495216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 28), 'n', False)
    # Processing the call keyword arguments (line 227)
    kwargs_495217 = {}
    # Getting the type of 'abs' (line 227)
    abs_495215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 24), 'abs', False)
    # Calling abs(args, kwargs) (line 227)
    abs_call_result_495218 = invoke(stypy.reporting.localization.Localization(__file__, 227, 24), abs_495215, *[n_495216], **kwargs_495217)
    
    # Getting the type of 'nt' (line 227)
    nt_495219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 32), 'nt', False)
    # Processing the call keyword arguments (line 227)
    kwargs_495220 = {}
    # Getting the type of 'specfun' (line 227)
    specfun_495213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 11), 'specfun', False)
    # Obtaining the member 'jyzo' of a type (line 227)
    jyzo_495214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 227, 11), specfun_495213, 'jyzo')
    # Calling jyzo(args, kwargs) (line 227)
    jyzo_call_result_495221 = invoke(stypy.reporting.localization.Localization(__file__, 227, 11), jyzo_495214, *[abs_call_result_495218, nt_495219], **kwargs_495220)
    
    # Assigning a type to the variable 'stypy_return_type' (line 227)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 227, 4), 'stypy_return_type', jyzo_call_result_495221)
    
    # ################# End of 'jnyn_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'jnyn_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 199)
    stypy_return_type_495222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495222)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'jnyn_zeros'
    return stypy_return_type_495222

# Assigning a type to the variable 'jnyn_zeros' (line 199)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 199, 0), 'jnyn_zeros', jnyn_zeros)

@norecursion
def jn_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'jn_zeros'
    module_type_store = module_type_store.open_function_context('jn_zeros', 230, 0, False)
    
    # Passed parameters checking function
    jn_zeros.stypy_localization = localization
    jn_zeros.stypy_type_of_self = None
    jn_zeros.stypy_type_store = module_type_store
    jn_zeros.stypy_function_name = 'jn_zeros'
    jn_zeros.stypy_param_names_list = ['n', 'nt']
    jn_zeros.stypy_varargs_param_name = None
    jn_zeros.stypy_kwargs_param_name = None
    jn_zeros.stypy_call_defaults = defaults
    jn_zeros.stypy_call_varargs = varargs
    jn_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'jn_zeros', ['n', 'nt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'jn_zeros', localization, ['n', 'nt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'jn_zeros(...)' code ##################

    str_495223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 246, (-1)), 'str', 'Compute zeros of integer-order Bessel function Jn(x).\n\n    Parameters\n    ----------\n    n : int\n        Order of Bessel function\n    nt : int\n        Number of zeros to return\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996, chapter 5.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    # Obtaining the type of the subscript
    int_495224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, 29), 'int')
    
    # Call to jnyn_zeros(...): (line 247)
    # Processing the call arguments (line 247)
    # Getting the type of 'n' (line 247)
    n_495226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 22), 'n', False)
    # Getting the type of 'nt' (line 247)
    nt_495227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 25), 'nt', False)
    # Processing the call keyword arguments (line 247)
    kwargs_495228 = {}
    # Getting the type of 'jnyn_zeros' (line 247)
    jnyn_zeros_495225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 11), 'jnyn_zeros', False)
    # Calling jnyn_zeros(args, kwargs) (line 247)
    jnyn_zeros_call_result_495229 = invoke(stypy.reporting.localization.Localization(__file__, 247, 11), jnyn_zeros_495225, *[n_495226, nt_495227], **kwargs_495228)
    
    # Obtaining the member '__getitem__' of a type (line 247)
    getitem___495230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 11), jnyn_zeros_call_result_495229, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 247)
    subscript_call_result_495231 = invoke(stypy.reporting.localization.Localization(__file__, 247, 11), getitem___495230, int_495224)
    
    # Assigning a type to the variable 'stypy_return_type' (line 247)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 4), 'stypy_return_type', subscript_call_result_495231)
    
    # ################# End of 'jn_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'jn_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 230)
    stypy_return_type_495232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495232)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'jn_zeros'
    return stypy_return_type_495232

# Assigning a type to the variable 'jn_zeros' (line 230)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 230, 0), 'jn_zeros', jn_zeros)

@norecursion
def jnp_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'jnp_zeros'
    module_type_store = module_type_store.open_function_context('jnp_zeros', 250, 0, False)
    
    # Passed parameters checking function
    jnp_zeros.stypy_localization = localization
    jnp_zeros.stypy_type_of_self = None
    jnp_zeros.stypy_type_store = module_type_store
    jnp_zeros.stypy_function_name = 'jnp_zeros'
    jnp_zeros.stypy_param_names_list = ['n', 'nt']
    jnp_zeros.stypy_varargs_param_name = None
    jnp_zeros.stypy_kwargs_param_name = None
    jnp_zeros.stypy_call_defaults = defaults
    jnp_zeros.stypy_call_varargs = varargs
    jnp_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'jnp_zeros', ['n', 'nt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'jnp_zeros', localization, ['n', 'nt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'jnp_zeros(...)' code ##################

    str_495233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 266, (-1)), 'str', 'Compute zeros of integer-order Bessel function derivative Jn\'(x).\n\n    Parameters\n    ----------\n    n : int\n        Order of Bessel function\n    nt : int\n        Number of zeros to return\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996, chapter 5.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    # Obtaining the type of the subscript
    int_495234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 267, 29), 'int')
    
    # Call to jnyn_zeros(...): (line 267)
    # Processing the call arguments (line 267)
    # Getting the type of 'n' (line 267)
    n_495236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 22), 'n', False)
    # Getting the type of 'nt' (line 267)
    nt_495237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 25), 'nt', False)
    # Processing the call keyword arguments (line 267)
    kwargs_495238 = {}
    # Getting the type of 'jnyn_zeros' (line 267)
    jnyn_zeros_495235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 11), 'jnyn_zeros', False)
    # Calling jnyn_zeros(args, kwargs) (line 267)
    jnyn_zeros_call_result_495239 = invoke(stypy.reporting.localization.Localization(__file__, 267, 11), jnyn_zeros_495235, *[n_495236, nt_495237], **kwargs_495238)
    
    # Obtaining the member '__getitem__' of a type (line 267)
    getitem___495240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 267, 11), jnyn_zeros_call_result_495239, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 267)
    subscript_call_result_495241 = invoke(stypy.reporting.localization.Localization(__file__, 267, 11), getitem___495240, int_495234)
    
    # Assigning a type to the variable 'stypy_return_type' (line 267)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 267, 4), 'stypy_return_type', subscript_call_result_495241)
    
    # ################# End of 'jnp_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'jnp_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 250)
    stypy_return_type_495242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495242)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'jnp_zeros'
    return stypy_return_type_495242

# Assigning a type to the variable 'jnp_zeros' (line 250)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 250, 0), 'jnp_zeros', jnp_zeros)

@norecursion
def yn_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'yn_zeros'
    module_type_store = module_type_store.open_function_context('yn_zeros', 270, 0, False)
    
    # Passed parameters checking function
    yn_zeros.stypy_localization = localization
    yn_zeros.stypy_type_of_self = None
    yn_zeros.stypy_type_store = module_type_store
    yn_zeros.stypy_function_name = 'yn_zeros'
    yn_zeros.stypy_param_names_list = ['n', 'nt']
    yn_zeros.stypy_varargs_param_name = None
    yn_zeros.stypy_kwargs_param_name = None
    yn_zeros.stypy_call_defaults = defaults
    yn_zeros.stypy_call_varargs = varargs
    yn_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'yn_zeros', ['n', 'nt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'yn_zeros', localization, ['n', 'nt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'yn_zeros(...)' code ##################

    str_495243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 286, (-1)), 'str', 'Compute zeros of integer-order Bessel function Yn(x).\n\n    Parameters\n    ----------\n    n : int\n        Order of Bessel function\n    nt : int\n        Number of zeros to return\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996, chapter 5.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    # Obtaining the type of the subscript
    int_495244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 287, 29), 'int')
    
    # Call to jnyn_zeros(...): (line 287)
    # Processing the call arguments (line 287)
    # Getting the type of 'n' (line 287)
    n_495246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 22), 'n', False)
    # Getting the type of 'nt' (line 287)
    nt_495247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 25), 'nt', False)
    # Processing the call keyword arguments (line 287)
    kwargs_495248 = {}
    # Getting the type of 'jnyn_zeros' (line 287)
    jnyn_zeros_495245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 11), 'jnyn_zeros', False)
    # Calling jnyn_zeros(args, kwargs) (line 287)
    jnyn_zeros_call_result_495249 = invoke(stypy.reporting.localization.Localization(__file__, 287, 11), jnyn_zeros_495245, *[n_495246, nt_495247], **kwargs_495248)
    
    # Obtaining the member '__getitem__' of a type (line 287)
    getitem___495250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 287, 11), jnyn_zeros_call_result_495249, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 287)
    subscript_call_result_495251 = invoke(stypy.reporting.localization.Localization(__file__, 287, 11), getitem___495250, int_495244)
    
    # Assigning a type to the variable 'stypy_return_type' (line 287)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 287, 4), 'stypy_return_type', subscript_call_result_495251)
    
    # ################# End of 'yn_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'yn_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 270)
    stypy_return_type_495252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495252)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'yn_zeros'
    return stypy_return_type_495252

# Assigning a type to the variable 'yn_zeros' (line 270)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 270, 0), 'yn_zeros', yn_zeros)

@norecursion
def ynp_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'ynp_zeros'
    module_type_store = module_type_store.open_function_context('ynp_zeros', 290, 0, False)
    
    # Passed parameters checking function
    ynp_zeros.stypy_localization = localization
    ynp_zeros.stypy_type_of_self = None
    ynp_zeros.stypy_type_store = module_type_store
    ynp_zeros.stypy_function_name = 'ynp_zeros'
    ynp_zeros.stypy_param_names_list = ['n', 'nt']
    ynp_zeros.stypy_varargs_param_name = None
    ynp_zeros.stypy_kwargs_param_name = None
    ynp_zeros.stypy_call_defaults = defaults
    ynp_zeros.stypy_call_varargs = varargs
    ynp_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ynp_zeros', ['n', 'nt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ynp_zeros', localization, ['n', 'nt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ynp_zeros(...)' code ##################

    str_495253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 306, (-1)), 'str', 'Compute zeros of integer-order Bessel function derivative Yn\'(x).\n\n    Parameters\n    ----------\n    n : int\n        Order of Bessel function\n    nt : int\n        Number of zeros to return\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996, chapter 5.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    # Obtaining the type of the subscript
    int_495254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 307, 29), 'int')
    
    # Call to jnyn_zeros(...): (line 307)
    # Processing the call arguments (line 307)
    # Getting the type of 'n' (line 307)
    n_495256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 22), 'n', False)
    # Getting the type of 'nt' (line 307)
    nt_495257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 25), 'nt', False)
    # Processing the call keyword arguments (line 307)
    kwargs_495258 = {}
    # Getting the type of 'jnyn_zeros' (line 307)
    jnyn_zeros_495255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 11), 'jnyn_zeros', False)
    # Calling jnyn_zeros(args, kwargs) (line 307)
    jnyn_zeros_call_result_495259 = invoke(stypy.reporting.localization.Localization(__file__, 307, 11), jnyn_zeros_495255, *[n_495256, nt_495257], **kwargs_495258)
    
    # Obtaining the member '__getitem__' of a type (line 307)
    getitem___495260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 307, 11), jnyn_zeros_call_result_495259, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 307)
    subscript_call_result_495261 = invoke(stypy.reporting.localization.Localization(__file__, 307, 11), getitem___495260, int_495254)
    
    # Assigning a type to the variable 'stypy_return_type' (line 307)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 307, 4), 'stypy_return_type', subscript_call_result_495261)
    
    # ################# End of 'ynp_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ynp_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 290)
    stypy_return_type_495262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495262)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ynp_zeros'
    return stypy_return_type_495262

# Assigning a type to the variable 'ynp_zeros' (line 290)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 290, 0), 'ynp_zeros', ynp_zeros)

@norecursion
def y0_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 310)
    False_495263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 25), 'False')
    defaults = [False_495263]
    # Create a new context for function 'y0_zeros'
    module_type_store = module_type_store.open_function_context('y0_zeros', 310, 0, False)
    
    # Passed parameters checking function
    y0_zeros.stypy_localization = localization
    y0_zeros.stypy_type_of_self = None
    y0_zeros.stypy_type_store = module_type_store
    y0_zeros.stypy_function_name = 'y0_zeros'
    y0_zeros.stypy_param_names_list = ['nt', 'complex']
    y0_zeros.stypy_varargs_param_name = None
    y0_zeros.stypy_kwargs_param_name = None
    y0_zeros.stypy_call_defaults = defaults
    y0_zeros.stypy_call_varargs = varargs
    y0_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'y0_zeros', ['nt', 'complex'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'y0_zeros', localization, ['nt', 'complex'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'y0_zeros(...)' code ##################

    str_495264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 338, (-1)), 'str', 'Compute nt zeros of Bessel function Y0(z), and derivative at each zero.\n\n    The derivatives are given by Y0\'(z0) = -Y1(z0) at each zero z0.\n\n    Parameters\n    ----------\n    nt : int\n        Number of zeros to return\n    complex : bool, default False\n        Set to False to return only the real zeros; set to True to return only\n        the complex zeros with negative real part and positive imaginary part.\n        Note that the complex conjugates of the latter are also zeros of the\n        function, but are not returned by this routine.\n\n    Returns\n    -------\n    z0n : ndarray\n        Location of nth zero of Y0(z)\n    y0pz0n : ndarray\n        Value of derivative Y0\'(z0) for nth zero\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996, chapter 5.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to isscalar(...): (line 339)
    # Processing the call arguments (line 339)
    # Getting the type of 'nt' (line 339)
    nt_495266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 20), 'nt', False)
    # Processing the call keyword arguments (line 339)
    kwargs_495267 = {}
    # Getting the type of 'isscalar' (line 339)
    isscalar_495265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 339)
    isscalar_call_result_495268 = invoke(stypy.reporting.localization.Localization(__file__, 339, 11), isscalar_495265, *[nt_495266], **kwargs_495267)
    
    # Applying the 'not' unary operator (line 339)
    result_not__495269 = python_operator(stypy.reporting.localization.Localization(__file__, 339, 7), 'not', isscalar_call_result_495268)
    
    
    
    # Call to floor(...): (line 339)
    # Processing the call arguments (line 339)
    # Getting the type of 'nt' (line 339)
    nt_495271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 34), 'nt', False)
    # Processing the call keyword arguments (line 339)
    kwargs_495272 = {}
    # Getting the type of 'floor' (line 339)
    floor_495270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 28), 'floor', False)
    # Calling floor(args, kwargs) (line 339)
    floor_call_result_495273 = invoke(stypy.reporting.localization.Localization(__file__, 339, 28), floor_495270, *[nt_495271], **kwargs_495272)
    
    # Getting the type of 'nt' (line 339)
    nt_495274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 41), 'nt')
    # Applying the binary operator '!=' (line 339)
    result_ne_495275 = python_operator(stypy.reporting.localization.Localization(__file__, 339, 28), '!=', floor_call_result_495273, nt_495274)
    
    # Applying the binary operator 'or' (line 339)
    result_or_keyword_495276 = python_operator(stypy.reporting.localization.Localization(__file__, 339, 7), 'or', result_not__495269, result_ne_495275)
    
    # Getting the type of 'nt' (line 339)
    nt_495277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 49), 'nt')
    int_495278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 339, 55), 'int')
    # Applying the binary operator '<=' (line 339)
    result_le_495279 = python_operator(stypy.reporting.localization.Localization(__file__, 339, 49), '<=', nt_495277, int_495278)
    
    # Applying the binary operator 'or' (line 339)
    result_or_keyword_495280 = python_operator(stypy.reporting.localization.Localization(__file__, 339, 7), 'or', result_or_keyword_495276, result_le_495279)
    
    # Testing the type of an if condition (line 339)
    if_condition_495281 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 339, 4), result_or_keyword_495280)
    # Assigning a type to the variable 'if_condition_495281' (line 339)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 339, 4), 'if_condition_495281', if_condition_495281)
    # SSA begins for if statement (line 339)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 340)
    # Processing the call arguments (line 340)
    str_495283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 340, 25), 'str', 'Arguments must be scalar positive integer.')
    # Processing the call keyword arguments (line 340)
    kwargs_495284 = {}
    # Getting the type of 'ValueError' (line 340)
    ValueError_495282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 340)
    ValueError_call_result_495285 = invoke(stypy.reporting.localization.Localization(__file__, 340, 14), ValueError_495282, *[str_495283], **kwargs_495284)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 340, 8), ValueError_call_result_495285, 'raise parameter', BaseException)
    # SSA join for if statement (line 339)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 341):
    
    # Assigning a Num to a Name (line 341):
    int_495286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 341, 9), 'int')
    # Assigning a type to the variable 'kf' (line 341)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 341, 4), 'kf', int_495286)
    
    # Assigning a UnaryOp to a Name (line 342):
    
    # Assigning a UnaryOp to a Name (line 342):
    
    # Getting the type of 'complex' (line 342)
    complex_495287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 13), 'complex')
    # Applying the 'not' unary operator (line 342)
    result_not__495288 = python_operator(stypy.reporting.localization.Localization(__file__, 342, 9), 'not', complex_495287)
    
    # Assigning a type to the variable 'kc' (line 342)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 342, 4), 'kc', result_not__495288)
    
    # Call to cyzo(...): (line 343)
    # Processing the call arguments (line 343)
    # Getting the type of 'nt' (line 343)
    nt_495291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 24), 'nt', False)
    # Getting the type of 'kf' (line 343)
    kf_495292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 28), 'kf', False)
    # Getting the type of 'kc' (line 343)
    kc_495293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 32), 'kc', False)
    # Processing the call keyword arguments (line 343)
    kwargs_495294 = {}
    # Getting the type of 'specfun' (line 343)
    specfun_495289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 11), 'specfun', False)
    # Obtaining the member 'cyzo' of a type (line 343)
    cyzo_495290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 11), specfun_495289, 'cyzo')
    # Calling cyzo(args, kwargs) (line 343)
    cyzo_call_result_495295 = invoke(stypy.reporting.localization.Localization(__file__, 343, 11), cyzo_495290, *[nt_495291, kf_495292, kc_495293], **kwargs_495294)
    
    # Assigning a type to the variable 'stypy_return_type' (line 343)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 4), 'stypy_return_type', cyzo_call_result_495295)
    
    # ################# End of 'y0_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'y0_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 310)
    stypy_return_type_495296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495296)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'y0_zeros'
    return stypy_return_type_495296

# Assigning a type to the variable 'y0_zeros' (line 310)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 310, 0), 'y0_zeros', y0_zeros)

@norecursion
def y1_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 346)
    False_495297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 25), 'False')
    defaults = [False_495297]
    # Create a new context for function 'y1_zeros'
    module_type_store = module_type_store.open_function_context('y1_zeros', 346, 0, False)
    
    # Passed parameters checking function
    y1_zeros.stypy_localization = localization
    y1_zeros.stypy_type_of_self = None
    y1_zeros.stypy_type_store = module_type_store
    y1_zeros.stypy_function_name = 'y1_zeros'
    y1_zeros.stypy_param_names_list = ['nt', 'complex']
    y1_zeros.stypy_varargs_param_name = None
    y1_zeros.stypy_kwargs_param_name = None
    y1_zeros.stypy_call_defaults = defaults
    y1_zeros.stypy_call_varargs = varargs
    y1_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'y1_zeros', ['nt', 'complex'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'y1_zeros', localization, ['nt', 'complex'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'y1_zeros(...)' code ##################

    str_495298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 374, (-1)), 'str', 'Compute nt zeros of Bessel function Y1(z), and derivative at each zero.\n\n    The derivatives are given by Y1\'(z1) = Y0(z1) at each zero z1.\n\n    Parameters\n    ----------\n    nt : int\n        Number of zeros to return\n    complex : bool, default False\n        Set to False to return only the real zeros; set to True to return only\n        the complex zeros with negative real part and positive imaginary part.\n        Note that the complex conjugates of the latter are also zeros of the\n        function, but are not returned by this routine.\n\n    Returns\n    -------\n    z1n : ndarray\n        Location of nth zero of Y1(z)\n    y1pz1n : ndarray\n        Value of derivative Y1\'(z1) for nth zero\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996, chapter 5.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to isscalar(...): (line 375)
    # Processing the call arguments (line 375)
    # Getting the type of 'nt' (line 375)
    nt_495300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 20), 'nt', False)
    # Processing the call keyword arguments (line 375)
    kwargs_495301 = {}
    # Getting the type of 'isscalar' (line 375)
    isscalar_495299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 375)
    isscalar_call_result_495302 = invoke(stypy.reporting.localization.Localization(__file__, 375, 11), isscalar_495299, *[nt_495300], **kwargs_495301)
    
    # Applying the 'not' unary operator (line 375)
    result_not__495303 = python_operator(stypy.reporting.localization.Localization(__file__, 375, 7), 'not', isscalar_call_result_495302)
    
    
    
    # Call to floor(...): (line 375)
    # Processing the call arguments (line 375)
    # Getting the type of 'nt' (line 375)
    nt_495305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 34), 'nt', False)
    # Processing the call keyword arguments (line 375)
    kwargs_495306 = {}
    # Getting the type of 'floor' (line 375)
    floor_495304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 28), 'floor', False)
    # Calling floor(args, kwargs) (line 375)
    floor_call_result_495307 = invoke(stypy.reporting.localization.Localization(__file__, 375, 28), floor_495304, *[nt_495305], **kwargs_495306)
    
    # Getting the type of 'nt' (line 375)
    nt_495308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 41), 'nt')
    # Applying the binary operator '!=' (line 375)
    result_ne_495309 = python_operator(stypy.reporting.localization.Localization(__file__, 375, 28), '!=', floor_call_result_495307, nt_495308)
    
    # Applying the binary operator 'or' (line 375)
    result_or_keyword_495310 = python_operator(stypy.reporting.localization.Localization(__file__, 375, 7), 'or', result_not__495303, result_ne_495309)
    
    # Getting the type of 'nt' (line 375)
    nt_495311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 49), 'nt')
    int_495312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 375, 55), 'int')
    # Applying the binary operator '<=' (line 375)
    result_le_495313 = python_operator(stypy.reporting.localization.Localization(__file__, 375, 49), '<=', nt_495311, int_495312)
    
    # Applying the binary operator 'or' (line 375)
    result_or_keyword_495314 = python_operator(stypy.reporting.localization.Localization(__file__, 375, 7), 'or', result_or_keyword_495310, result_le_495313)
    
    # Testing the type of an if condition (line 375)
    if_condition_495315 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 375, 4), result_or_keyword_495314)
    # Assigning a type to the variable 'if_condition_495315' (line 375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 375, 4), 'if_condition_495315', if_condition_495315)
    # SSA begins for if statement (line 375)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 376)
    # Processing the call arguments (line 376)
    str_495317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, 25), 'str', 'Arguments must be scalar positive integer.')
    # Processing the call keyword arguments (line 376)
    kwargs_495318 = {}
    # Getting the type of 'ValueError' (line 376)
    ValueError_495316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 376)
    ValueError_call_result_495319 = invoke(stypy.reporting.localization.Localization(__file__, 376, 14), ValueError_495316, *[str_495317], **kwargs_495318)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 376, 8), ValueError_call_result_495319, 'raise parameter', BaseException)
    # SSA join for if statement (line 375)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 377):
    
    # Assigning a Num to a Name (line 377):
    int_495320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 377, 9), 'int')
    # Assigning a type to the variable 'kf' (line 377)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 4), 'kf', int_495320)
    
    # Assigning a UnaryOp to a Name (line 378):
    
    # Assigning a UnaryOp to a Name (line 378):
    
    # Getting the type of 'complex' (line 378)
    complex_495321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 13), 'complex')
    # Applying the 'not' unary operator (line 378)
    result_not__495322 = python_operator(stypy.reporting.localization.Localization(__file__, 378, 9), 'not', complex_495321)
    
    # Assigning a type to the variable 'kc' (line 378)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 378, 4), 'kc', result_not__495322)
    
    # Call to cyzo(...): (line 379)
    # Processing the call arguments (line 379)
    # Getting the type of 'nt' (line 379)
    nt_495325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 24), 'nt', False)
    # Getting the type of 'kf' (line 379)
    kf_495326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 28), 'kf', False)
    # Getting the type of 'kc' (line 379)
    kc_495327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 32), 'kc', False)
    # Processing the call keyword arguments (line 379)
    kwargs_495328 = {}
    # Getting the type of 'specfun' (line 379)
    specfun_495323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 11), 'specfun', False)
    # Obtaining the member 'cyzo' of a type (line 379)
    cyzo_495324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 11), specfun_495323, 'cyzo')
    # Calling cyzo(args, kwargs) (line 379)
    cyzo_call_result_495329 = invoke(stypy.reporting.localization.Localization(__file__, 379, 11), cyzo_495324, *[nt_495325, kf_495326, kc_495327], **kwargs_495328)
    
    # Assigning a type to the variable 'stypy_return_type' (line 379)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 4), 'stypy_return_type', cyzo_call_result_495329)
    
    # ################# End of 'y1_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'y1_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 346)
    stypy_return_type_495330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495330)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'y1_zeros'
    return stypy_return_type_495330

# Assigning a type to the variable 'y1_zeros' (line 346)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 346, 0), 'y1_zeros', y1_zeros)

@norecursion
def y1p_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 382)
    False_495331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 26), 'False')
    defaults = [False_495331]
    # Create a new context for function 'y1p_zeros'
    module_type_store = module_type_store.open_function_context('y1p_zeros', 382, 0, False)
    
    # Passed parameters checking function
    y1p_zeros.stypy_localization = localization
    y1p_zeros.stypy_type_of_self = None
    y1p_zeros.stypy_type_store = module_type_store
    y1p_zeros.stypy_function_name = 'y1p_zeros'
    y1p_zeros.stypy_param_names_list = ['nt', 'complex']
    y1p_zeros.stypy_varargs_param_name = None
    y1p_zeros.stypy_kwargs_param_name = None
    y1p_zeros.stypy_call_defaults = defaults
    y1p_zeros.stypy_call_varargs = varargs
    y1p_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'y1p_zeros', ['nt', 'complex'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'y1p_zeros', localization, ['nt', 'complex'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'y1p_zeros(...)' code ##################

    str_495332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 410, (-1)), 'str', 'Compute nt zeros of Bessel derivative Y1\'(z), and value at each zero.\n\n    The values are given by Y1(z1) at each z1 where Y1\'(z1)=0.\n\n    Parameters\n    ----------\n    nt : int\n        Number of zeros to return\n    complex : bool, default False\n        Set to False to return only the real zeros; set to True to return only\n        the complex zeros with negative real part and positive imaginary part.\n        Note that the complex conjugates of the latter are also zeros of the\n        function, but are not returned by this routine.\n\n    Returns\n    -------\n    z1pn : ndarray\n        Location of nth zero of Y1\'(z)\n    y1z1pn : ndarray\n        Value of derivative Y1(z1) for nth zero\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996, chapter 5.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to isscalar(...): (line 411)
    # Processing the call arguments (line 411)
    # Getting the type of 'nt' (line 411)
    nt_495334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 20), 'nt', False)
    # Processing the call keyword arguments (line 411)
    kwargs_495335 = {}
    # Getting the type of 'isscalar' (line 411)
    isscalar_495333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 411)
    isscalar_call_result_495336 = invoke(stypy.reporting.localization.Localization(__file__, 411, 11), isscalar_495333, *[nt_495334], **kwargs_495335)
    
    # Applying the 'not' unary operator (line 411)
    result_not__495337 = python_operator(stypy.reporting.localization.Localization(__file__, 411, 7), 'not', isscalar_call_result_495336)
    
    
    
    # Call to floor(...): (line 411)
    # Processing the call arguments (line 411)
    # Getting the type of 'nt' (line 411)
    nt_495339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 34), 'nt', False)
    # Processing the call keyword arguments (line 411)
    kwargs_495340 = {}
    # Getting the type of 'floor' (line 411)
    floor_495338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 28), 'floor', False)
    # Calling floor(args, kwargs) (line 411)
    floor_call_result_495341 = invoke(stypy.reporting.localization.Localization(__file__, 411, 28), floor_495338, *[nt_495339], **kwargs_495340)
    
    # Getting the type of 'nt' (line 411)
    nt_495342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 41), 'nt')
    # Applying the binary operator '!=' (line 411)
    result_ne_495343 = python_operator(stypy.reporting.localization.Localization(__file__, 411, 28), '!=', floor_call_result_495341, nt_495342)
    
    # Applying the binary operator 'or' (line 411)
    result_or_keyword_495344 = python_operator(stypy.reporting.localization.Localization(__file__, 411, 7), 'or', result_not__495337, result_ne_495343)
    
    # Getting the type of 'nt' (line 411)
    nt_495345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 49), 'nt')
    int_495346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 411, 55), 'int')
    # Applying the binary operator '<=' (line 411)
    result_le_495347 = python_operator(stypy.reporting.localization.Localization(__file__, 411, 49), '<=', nt_495345, int_495346)
    
    # Applying the binary operator 'or' (line 411)
    result_or_keyword_495348 = python_operator(stypy.reporting.localization.Localization(__file__, 411, 7), 'or', result_or_keyword_495344, result_le_495347)
    
    # Testing the type of an if condition (line 411)
    if_condition_495349 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 411, 4), result_or_keyword_495348)
    # Assigning a type to the variable 'if_condition_495349' (line 411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 4), 'if_condition_495349', if_condition_495349)
    # SSA begins for if statement (line 411)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 412)
    # Processing the call arguments (line 412)
    str_495351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 412, 25), 'str', 'Arguments must be scalar positive integer.')
    # Processing the call keyword arguments (line 412)
    kwargs_495352 = {}
    # Getting the type of 'ValueError' (line 412)
    ValueError_495350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 412)
    ValueError_call_result_495353 = invoke(stypy.reporting.localization.Localization(__file__, 412, 14), ValueError_495350, *[str_495351], **kwargs_495352)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 412, 8), ValueError_call_result_495353, 'raise parameter', BaseException)
    # SSA join for if statement (line 411)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 413):
    
    # Assigning a Num to a Name (line 413):
    int_495354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 413, 9), 'int')
    # Assigning a type to the variable 'kf' (line 413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 413, 4), 'kf', int_495354)
    
    # Assigning a UnaryOp to a Name (line 414):
    
    # Assigning a UnaryOp to a Name (line 414):
    
    # Getting the type of 'complex' (line 414)
    complex_495355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 13), 'complex')
    # Applying the 'not' unary operator (line 414)
    result_not__495356 = python_operator(stypy.reporting.localization.Localization(__file__, 414, 9), 'not', complex_495355)
    
    # Assigning a type to the variable 'kc' (line 414)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 414, 4), 'kc', result_not__495356)
    
    # Call to cyzo(...): (line 415)
    # Processing the call arguments (line 415)
    # Getting the type of 'nt' (line 415)
    nt_495359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 24), 'nt', False)
    # Getting the type of 'kf' (line 415)
    kf_495360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 28), 'kf', False)
    # Getting the type of 'kc' (line 415)
    kc_495361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 32), 'kc', False)
    # Processing the call keyword arguments (line 415)
    kwargs_495362 = {}
    # Getting the type of 'specfun' (line 415)
    specfun_495357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 11), 'specfun', False)
    # Obtaining the member 'cyzo' of a type (line 415)
    cyzo_495358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 415, 11), specfun_495357, 'cyzo')
    # Calling cyzo(args, kwargs) (line 415)
    cyzo_call_result_495363 = invoke(stypy.reporting.localization.Localization(__file__, 415, 11), cyzo_495358, *[nt_495359, kf_495360, kc_495361], **kwargs_495362)
    
    # Assigning a type to the variable 'stypy_return_type' (line 415)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 415, 4), 'stypy_return_type', cyzo_call_result_495363)
    
    # ################# End of 'y1p_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'y1p_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 382)
    stypy_return_type_495364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495364)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'y1p_zeros'
    return stypy_return_type_495364

# Assigning a type to the variable 'y1p_zeros' (line 382)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 0), 'y1p_zeros', y1p_zeros)

@norecursion
def _bessel_diff_formula(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_bessel_diff_formula'
    module_type_store = module_type_store.open_function_context('_bessel_diff_formula', 418, 0, False)
    
    # Passed parameters checking function
    _bessel_diff_formula.stypy_localization = localization
    _bessel_diff_formula.stypy_type_of_self = None
    _bessel_diff_formula.stypy_type_store = module_type_store
    _bessel_diff_formula.stypy_function_name = '_bessel_diff_formula'
    _bessel_diff_formula.stypy_param_names_list = ['v', 'z', 'n', 'L', 'phase']
    _bessel_diff_formula.stypy_varargs_param_name = None
    _bessel_diff_formula.stypy_kwargs_param_name = None
    _bessel_diff_formula.stypy_call_defaults = defaults
    _bessel_diff_formula.stypy_call_varargs = varargs
    _bessel_diff_formula.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_bessel_diff_formula', ['v', 'z', 'n', 'L', 'phase'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_bessel_diff_formula', localization, ['v', 'z', 'n', 'L', 'phase'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_bessel_diff_formula(...)' code ##################

    
    # Assigning a Call to a Name (line 423):
    
    # Assigning a Call to a Name (line 423):
    
    # Call to asarray(...): (line 423)
    # Processing the call arguments (line 423)
    # Getting the type of 'v' (line 423)
    v_495366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 16), 'v', False)
    # Processing the call keyword arguments (line 423)
    kwargs_495367 = {}
    # Getting the type of 'asarray' (line 423)
    asarray_495365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 423)
    asarray_call_result_495368 = invoke(stypy.reporting.localization.Localization(__file__, 423, 8), asarray_495365, *[v_495366], **kwargs_495367)
    
    # Assigning a type to the variable 'v' (line 423)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 423, 4), 'v', asarray_call_result_495368)
    
    # Assigning a Num to a Name (line 424):
    
    # Assigning a Num to a Name (line 424):
    float_495369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 424, 8), 'float')
    # Assigning a type to the variable 'p' (line 424)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 424, 4), 'p', float_495369)
    
    # Assigning a Call to a Name (line 425):
    
    # Assigning a Call to a Name (line 425):
    
    # Call to L(...): (line 425)
    # Processing the call arguments (line 425)
    # Getting the type of 'v' (line 425)
    v_495371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 10), 'v', False)
    # Getting the type of 'n' (line 425)
    n_495372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 12), 'n', False)
    # Applying the binary operator '-' (line 425)
    result_sub_495373 = python_operator(stypy.reporting.localization.Localization(__file__, 425, 10), '-', v_495371, n_495372)
    
    # Getting the type of 'z' (line 425)
    z_495374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 15), 'z', False)
    # Processing the call keyword arguments (line 425)
    kwargs_495375 = {}
    # Getting the type of 'L' (line 425)
    L_495370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 8), 'L', False)
    # Calling L(args, kwargs) (line 425)
    L_call_result_495376 = invoke(stypy.reporting.localization.Localization(__file__, 425, 8), L_495370, *[result_sub_495373, z_495374], **kwargs_495375)
    
    # Assigning a type to the variable 's' (line 425)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 425, 4), 's', L_call_result_495376)
    
    
    # Call to xrange(...): (line 426)
    # Processing the call arguments (line 426)
    int_495378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 20), 'int')
    # Getting the type of 'n' (line 426)
    n_495379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 23), 'n', False)
    int_495380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 25), 'int')
    # Applying the binary operator '+' (line 426)
    result_add_495381 = python_operator(stypy.reporting.localization.Localization(__file__, 426, 23), '+', n_495379, int_495380)
    
    # Processing the call keyword arguments (line 426)
    kwargs_495382 = {}
    # Getting the type of 'xrange' (line 426)
    xrange_495377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 13), 'xrange', False)
    # Calling xrange(args, kwargs) (line 426)
    xrange_call_result_495383 = invoke(stypy.reporting.localization.Localization(__file__, 426, 13), xrange_495377, *[int_495378, result_add_495381], **kwargs_495382)
    
    # Testing the type of a for loop iterable (line 426)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 426, 4), xrange_call_result_495383)
    # Getting the type of the for loop variable (line 426)
    for_loop_var_495384 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 426, 4), xrange_call_result_495383)
    # Assigning a type to the variable 'i' (line 426)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 426, 4), 'i', for_loop_var_495384)
    # SSA begins for a for statement (line 426)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Name (line 427):
    
    # Assigning a BinOp to a Name (line 427):
    # Getting the type of 'phase' (line 427)
    phase_495385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 12), 'phase')
    # Getting the type of 'p' (line 427)
    p_495386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 21), 'p')
    # Getting the type of 'n' (line 427)
    n_495387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 26), 'n')
    # Getting the type of 'i' (line 427)
    i_495388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 28), 'i')
    # Applying the binary operator '-' (line 427)
    result_sub_495389 = python_operator(stypy.reporting.localization.Localization(__file__, 427, 26), '-', n_495387, i_495388)
    
    int_495390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 427, 30), 'int')
    # Applying the binary operator '+' (line 427)
    result_add_495391 = python_operator(stypy.reporting.localization.Localization(__file__, 427, 29), '+', result_sub_495389, int_495390)
    
    # Applying the binary operator '*' (line 427)
    result_mul_495392 = python_operator(stypy.reporting.localization.Localization(__file__, 427, 21), '*', p_495386, result_add_495391)
    
    # Applying the binary operator '*' (line 427)
    result_mul_495393 = python_operator(stypy.reporting.localization.Localization(__file__, 427, 12), '*', phase_495385, result_mul_495392)
    
    # Getting the type of 'i' (line 427)
    i_495394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 36), 'i')
    # Applying the binary operator 'div' (line 427)
    result_div_495395 = python_operator(stypy.reporting.localization.Localization(__file__, 427, 34), 'div', result_mul_495393, i_495394)
    
    # Assigning a type to the variable 'p' (line 427)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 8), 'p', result_div_495395)
    
    # Getting the type of 's' (line 428)
    s_495396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 8), 's')
    # Getting the type of 'p' (line 428)
    p_495397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 13), 'p')
    
    # Call to L(...): (line 428)
    # Processing the call arguments (line 428)
    # Getting the type of 'v' (line 428)
    v_495399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 17), 'v', False)
    # Getting the type of 'n' (line 428)
    n_495400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 19), 'n', False)
    # Applying the binary operator '-' (line 428)
    result_sub_495401 = python_operator(stypy.reporting.localization.Localization(__file__, 428, 17), '-', v_495399, n_495400)
    
    # Getting the type of 'i' (line 428)
    i_495402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 23), 'i', False)
    int_495403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 428, 25), 'int')
    # Applying the binary operator '*' (line 428)
    result_mul_495404 = python_operator(stypy.reporting.localization.Localization(__file__, 428, 23), '*', i_495402, int_495403)
    
    # Applying the binary operator '+' (line 428)
    result_add_495405 = python_operator(stypy.reporting.localization.Localization(__file__, 428, 21), '+', result_sub_495401, result_mul_495404)
    
    # Getting the type of 'z' (line 428)
    z_495406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 28), 'z', False)
    # Processing the call keyword arguments (line 428)
    kwargs_495407 = {}
    # Getting the type of 'L' (line 428)
    L_495398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 15), 'L', False)
    # Calling L(args, kwargs) (line 428)
    L_call_result_495408 = invoke(stypy.reporting.localization.Localization(__file__, 428, 15), L_495398, *[result_add_495405, z_495406], **kwargs_495407)
    
    # Applying the binary operator '*' (line 428)
    result_mul_495409 = python_operator(stypy.reporting.localization.Localization(__file__, 428, 13), '*', p_495397, L_call_result_495408)
    
    # Applying the binary operator '+=' (line 428)
    result_iadd_495410 = python_operator(stypy.reporting.localization.Localization(__file__, 428, 8), '+=', s_495396, result_mul_495409)
    # Assigning a type to the variable 's' (line 428)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 8), 's', result_iadd_495410)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 's' (line 429)
    s_495411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 11), 's')
    float_495412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 429, 16), 'float')
    # Getting the type of 'n' (line 429)
    n_495413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 20), 'n')
    # Applying the binary operator '**' (line 429)
    result_pow_495414 = python_operator(stypy.reporting.localization.Localization(__file__, 429, 16), '**', float_495412, n_495413)
    
    # Applying the binary operator 'div' (line 429)
    result_div_495415 = python_operator(stypy.reporting.localization.Localization(__file__, 429, 11), 'div', s_495411, result_pow_495414)
    
    # Assigning a type to the variable 'stypy_return_type' (line 429)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 429, 4), 'stypy_return_type', result_div_495415)
    
    # ################# End of '_bessel_diff_formula(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_bessel_diff_formula' in the type store
    # Getting the type of 'stypy_return_type' (line 418)
    stypy_return_type_495416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495416)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_bessel_diff_formula'
    return stypy_return_type_495416

# Assigning a type to the variable '_bessel_diff_formula' (line 418)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 418, 0), '_bessel_diff_formula', _bessel_diff_formula)

# Assigning a Call to a Name (line 432):

# Assigning a Call to a Name (line 432):

# Call to deprecate(...): (line 432)
# Processing the call arguments (line 432)
# Getting the type of '_bessel_diff_formula' (line 432)
_bessel_diff_formula_495419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 35), '_bessel_diff_formula', False)
# Processing the call keyword arguments (line 432)
str_495420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 433, 12), 'str', 'bessel_diff_formula is a private function, do not use it!')
keyword_495421 = str_495420
kwargs_495422 = {'message': keyword_495421}
# Getting the type of 'np' (line 432)
np_495417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 22), 'np', False)
# Obtaining the member 'deprecate' of a type (line 432)
deprecate_495418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 432, 22), np_495417, 'deprecate')
# Calling deprecate(args, kwargs) (line 432)
deprecate_call_result_495423 = invoke(stypy.reporting.localization.Localization(__file__, 432, 22), deprecate_495418, *[_bessel_diff_formula_495419], **kwargs_495422)

# Assigning a type to the variable 'bessel_diff_formula' (line 432)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 0), 'bessel_diff_formula', deprecate_call_result_495423)

@norecursion
def jvp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_495424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 436, 16), 'int')
    defaults = [int_495424]
    # Create a new context for function 'jvp'
    module_type_store = module_type_store.open_function_context('jvp', 436, 0, False)
    
    # Passed parameters checking function
    jvp.stypy_localization = localization
    jvp.stypy_type_of_self = None
    jvp.stypy_type_store = module_type_store
    jvp.stypy_function_name = 'jvp'
    jvp.stypy_param_names_list = ['v', 'z', 'n']
    jvp.stypy_varargs_param_name = None
    jvp.stypy_kwargs_param_name = None
    jvp.stypy_call_defaults = defaults
    jvp.stypy_call_varargs = varargs
    jvp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'jvp', ['v', 'z', 'n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'jvp', localization, ['v', 'z', 'n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'jvp(...)' code ##################

    str_495425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 460, (-1)), 'str', 'Compute nth derivative of Bessel function Jv(z) with respect to `z`.\n\n    Parameters\n    ----------\n    v : float\n        Order of Bessel function\n    z : complex\n        Argument at which to evaluate the derivative\n    n : int, default 1\n        Order of derivative\n\n    Notes\n    -----\n    The derivative is computed using the relation DLFM 10.6.7 [2]_.\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996, chapter 5.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n    .. [2] NIST Digital Library of Mathematical Functions.\n           http://dlmf.nist.gov/10.6.E7\n\n    ')
    
    # Assigning a Call to a Name (line 461):
    
    # Assigning a Call to a Name (line 461):
    
    # Call to _nonneg_int_or_fail(...): (line 461)
    # Processing the call arguments (line 461)
    # Getting the type of 'n' (line 461)
    n_495427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 28), 'n', False)
    str_495428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 461, 31), 'str', 'n')
    # Processing the call keyword arguments (line 461)
    kwargs_495429 = {}
    # Getting the type of '_nonneg_int_or_fail' (line 461)
    _nonneg_int_or_fail_495426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 8), '_nonneg_int_or_fail', False)
    # Calling _nonneg_int_or_fail(args, kwargs) (line 461)
    _nonneg_int_or_fail_call_result_495430 = invoke(stypy.reporting.localization.Localization(__file__, 461, 8), _nonneg_int_or_fail_495426, *[n_495427, str_495428], **kwargs_495429)
    
    # Assigning a type to the variable 'n' (line 461)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 461, 4), 'n', _nonneg_int_or_fail_call_result_495430)
    
    
    # Getting the type of 'n' (line 462)
    n_495431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 7), 'n')
    int_495432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 462, 12), 'int')
    # Applying the binary operator '==' (line 462)
    result_eq_495433 = python_operator(stypy.reporting.localization.Localization(__file__, 462, 7), '==', n_495431, int_495432)
    
    # Testing the type of an if condition (line 462)
    if_condition_495434 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 462, 4), result_eq_495433)
    # Assigning a type to the variable 'if_condition_495434' (line 462)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 462, 4), 'if_condition_495434', if_condition_495434)
    # SSA begins for if statement (line 462)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to jv(...): (line 463)
    # Processing the call arguments (line 463)
    # Getting the type of 'v' (line 463)
    v_495436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 18), 'v', False)
    # Getting the type of 'z' (line 463)
    z_495437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 21), 'z', False)
    # Processing the call keyword arguments (line 463)
    kwargs_495438 = {}
    # Getting the type of 'jv' (line 463)
    jv_495435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 15), 'jv', False)
    # Calling jv(args, kwargs) (line 463)
    jv_call_result_495439 = invoke(stypy.reporting.localization.Localization(__file__, 463, 15), jv_495435, *[v_495436, z_495437], **kwargs_495438)
    
    # Assigning a type to the variable 'stypy_return_type' (line 463)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 463, 8), 'stypy_return_type', jv_call_result_495439)
    # SSA branch for the else part of an if statement (line 462)
    module_type_store.open_ssa_branch('else')
    
    # Call to _bessel_diff_formula(...): (line 465)
    # Processing the call arguments (line 465)
    # Getting the type of 'v' (line 465)
    v_495441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 36), 'v', False)
    # Getting the type of 'z' (line 465)
    z_495442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 39), 'z', False)
    # Getting the type of 'n' (line 465)
    n_495443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 42), 'n', False)
    # Getting the type of 'jv' (line 465)
    jv_495444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 45), 'jv', False)
    int_495445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 465, 49), 'int')
    # Processing the call keyword arguments (line 465)
    kwargs_495446 = {}
    # Getting the type of '_bessel_diff_formula' (line 465)
    _bessel_diff_formula_495440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 15), '_bessel_diff_formula', False)
    # Calling _bessel_diff_formula(args, kwargs) (line 465)
    _bessel_diff_formula_call_result_495447 = invoke(stypy.reporting.localization.Localization(__file__, 465, 15), _bessel_diff_formula_495440, *[v_495441, z_495442, n_495443, jv_495444, int_495445], **kwargs_495446)
    
    # Assigning a type to the variable 'stypy_return_type' (line 465)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 465, 8), 'stypy_return_type', _bessel_diff_formula_call_result_495447)
    # SSA join for if statement (line 462)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'jvp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'jvp' in the type store
    # Getting the type of 'stypy_return_type' (line 436)
    stypy_return_type_495448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495448)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'jvp'
    return stypy_return_type_495448

# Assigning a type to the variable 'jvp' (line 436)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 436, 0), 'jvp', jvp)

@norecursion
def yvp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_495449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 468, 16), 'int')
    defaults = [int_495449]
    # Create a new context for function 'yvp'
    module_type_store = module_type_store.open_function_context('yvp', 468, 0, False)
    
    # Passed parameters checking function
    yvp.stypy_localization = localization
    yvp.stypy_type_of_self = None
    yvp.stypy_type_store = module_type_store
    yvp.stypy_function_name = 'yvp'
    yvp.stypy_param_names_list = ['v', 'z', 'n']
    yvp.stypy_varargs_param_name = None
    yvp.stypy_kwargs_param_name = None
    yvp.stypy_call_defaults = defaults
    yvp.stypy_call_varargs = varargs
    yvp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'yvp', ['v', 'z', 'n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'yvp', localization, ['v', 'z', 'n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'yvp(...)' code ##################

    str_495450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 492, (-1)), 'str', 'Compute nth derivative of Bessel function Yv(z) with respect to `z`.\n\n    Parameters\n    ----------\n    v : float\n        Order of Bessel function\n    z : complex\n        Argument at which to evaluate the derivative\n    n : int, default 1\n        Order of derivative\n\n    Notes\n    -----\n    The derivative is computed using the relation DLFM 10.6.7 [2]_.\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996, chapter 5.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n    .. [2] NIST Digital Library of Mathematical Functions.\n           http://dlmf.nist.gov/10.6.E7\n\n    ')
    
    # Assigning a Call to a Name (line 493):
    
    # Assigning a Call to a Name (line 493):
    
    # Call to _nonneg_int_or_fail(...): (line 493)
    # Processing the call arguments (line 493)
    # Getting the type of 'n' (line 493)
    n_495452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 28), 'n', False)
    str_495453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 493, 31), 'str', 'n')
    # Processing the call keyword arguments (line 493)
    kwargs_495454 = {}
    # Getting the type of '_nonneg_int_or_fail' (line 493)
    _nonneg_int_or_fail_495451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 8), '_nonneg_int_or_fail', False)
    # Calling _nonneg_int_or_fail(args, kwargs) (line 493)
    _nonneg_int_or_fail_call_result_495455 = invoke(stypy.reporting.localization.Localization(__file__, 493, 8), _nonneg_int_or_fail_495451, *[n_495452, str_495453], **kwargs_495454)
    
    # Assigning a type to the variable 'n' (line 493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 493, 4), 'n', _nonneg_int_or_fail_call_result_495455)
    
    
    # Getting the type of 'n' (line 494)
    n_495456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 7), 'n')
    int_495457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 494, 12), 'int')
    # Applying the binary operator '==' (line 494)
    result_eq_495458 = python_operator(stypy.reporting.localization.Localization(__file__, 494, 7), '==', n_495456, int_495457)
    
    # Testing the type of an if condition (line 494)
    if_condition_495459 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 494, 4), result_eq_495458)
    # Assigning a type to the variable 'if_condition_495459' (line 494)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 494, 4), 'if_condition_495459', if_condition_495459)
    # SSA begins for if statement (line 494)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to yv(...): (line 495)
    # Processing the call arguments (line 495)
    # Getting the type of 'v' (line 495)
    v_495461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 18), 'v', False)
    # Getting the type of 'z' (line 495)
    z_495462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 21), 'z', False)
    # Processing the call keyword arguments (line 495)
    kwargs_495463 = {}
    # Getting the type of 'yv' (line 495)
    yv_495460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 15), 'yv', False)
    # Calling yv(args, kwargs) (line 495)
    yv_call_result_495464 = invoke(stypy.reporting.localization.Localization(__file__, 495, 15), yv_495460, *[v_495461, z_495462], **kwargs_495463)
    
    # Assigning a type to the variable 'stypy_return_type' (line 495)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 495, 8), 'stypy_return_type', yv_call_result_495464)
    # SSA branch for the else part of an if statement (line 494)
    module_type_store.open_ssa_branch('else')
    
    # Call to _bessel_diff_formula(...): (line 497)
    # Processing the call arguments (line 497)
    # Getting the type of 'v' (line 497)
    v_495466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 36), 'v', False)
    # Getting the type of 'z' (line 497)
    z_495467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 39), 'z', False)
    # Getting the type of 'n' (line 497)
    n_495468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 42), 'n', False)
    # Getting the type of 'yv' (line 497)
    yv_495469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 45), 'yv', False)
    int_495470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 497, 49), 'int')
    # Processing the call keyword arguments (line 497)
    kwargs_495471 = {}
    # Getting the type of '_bessel_diff_formula' (line 497)
    _bessel_diff_formula_495465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 15), '_bessel_diff_formula', False)
    # Calling _bessel_diff_formula(args, kwargs) (line 497)
    _bessel_diff_formula_call_result_495472 = invoke(stypy.reporting.localization.Localization(__file__, 497, 15), _bessel_diff_formula_495465, *[v_495466, z_495467, n_495468, yv_495469, int_495470], **kwargs_495471)
    
    # Assigning a type to the variable 'stypy_return_type' (line 497)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 8), 'stypy_return_type', _bessel_diff_formula_call_result_495472)
    # SSA join for if statement (line 494)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'yvp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'yvp' in the type store
    # Getting the type of 'stypy_return_type' (line 468)
    stypy_return_type_495473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495473)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'yvp'
    return stypy_return_type_495473

# Assigning a type to the variable 'yvp' (line 468)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 468, 0), 'yvp', yvp)

@norecursion
def kvp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_495474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 500, 16), 'int')
    defaults = [int_495474]
    # Create a new context for function 'kvp'
    module_type_store = module_type_store.open_function_context('kvp', 500, 0, False)
    
    # Passed parameters checking function
    kvp.stypy_localization = localization
    kvp.stypy_type_of_self = None
    kvp.stypy_type_store = module_type_store
    kvp.stypy_function_name = 'kvp'
    kvp.stypy_param_names_list = ['v', 'z', 'n']
    kvp.stypy_varargs_param_name = None
    kvp.stypy_kwargs_param_name = None
    kvp.stypy_call_defaults = defaults
    kvp.stypy_call_varargs = varargs
    kvp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'kvp', ['v', 'z', 'n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'kvp', localization, ['v', 'z', 'n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'kvp(...)' code ##################

    str_495475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 545, (-1)), 'str', 'Compute nth derivative of real-order modified Bessel function Kv(z)\n\n    Kv(z) is the modified Bessel function of the second kind.\n    Derivative is calculated with respect to `z`.\n\n    Parameters\n    ----------\n    v : array_like of float\n        Order of Bessel function\n    z : array_like of complex\n        Argument at which to evaluate the derivative\n    n : int\n        Order of derivative.  Default is first derivative.\n\n    Returns\n    -------\n    out : ndarray\n        The results\n\n    Examples\n    --------\n    Calculate multiple values at order 5:\n\n    >>> from scipy.special import kvp\n    >>> kvp(5, (1, 2, 3+5j))\n    array([-1849.0354+0.j    ,   -25.7735+0.j    ,    -0.0307+0.0875j])\n\n    Calculate for a single value at multiple orders:\n\n    >>> kvp((4, 4.5, 5), 1)\n    array([ -184.0309,  -568.9585, -1849.0354])\n\n    Notes\n    -----\n    The derivative is computed using the relation DLFM 10.29.5 [2]_.\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996, chapter 6.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n    .. [2] NIST Digital Library of Mathematical Functions.\n           http://dlmf.nist.gov/10.29.E5\n\n    ')
    
    # Assigning a Call to a Name (line 546):
    
    # Assigning a Call to a Name (line 546):
    
    # Call to _nonneg_int_or_fail(...): (line 546)
    # Processing the call arguments (line 546)
    # Getting the type of 'n' (line 546)
    n_495477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 28), 'n', False)
    str_495478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 546, 31), 'str', 'n')
    # Processing the call keyword arguments (line 546)
    kwargs_495479 = {}
    # Getting the type of '_nonneg_int_or_fail' (line 546)
    _nonneg_int_or_fail_495476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 8), '_nonneg_int_or_fail', False)
    # Calling _nonneg_int_or_fail(args, kwargs) (line 546)
    _nonneg_int_or_fail_call_result_495480 = invoke(stypy.reporting.localization.Localization(__file__, 546, 8), _nonneg_int_or_fail_495476, *[n_495477, str_495478], **kwargs_495479)
    
    # Assigning a type to the variable 'n' (line 546)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 546, 4), 'n', _nonneg_int_or_fail_call_result_495480)
    
    
    # Getting the type of 'n' (line 547)
    n_495481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 7), 'n')
    int_495482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 12), 'int')
    # Applying the binary operator '==' (line 547)
    result_eq_495483 = python_operator(stypy.reporting.localization.Localization(__file__, 547, 7), '==', n_495481, int_495482)
    
    # Testing the type of an if condition (line 547)
    if_condition_495484 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 547, 4), result_eq_495483)
    # Assigning a type to the variable 'if_condition_495484' (line 547)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 4), 'if_condition_495484', if_condition_495484)
    # SSA begins for if statement (line 547)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to kv(...): (line 548)
    # Processing the call arguments (line 548)
    # Getting the type of 'v' (line 548)
    v_495486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 18), 'v', False)
    # Getting the type of 'z' (line 548)
    z_495487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 21), 'z', False)
    # Processing the call keyword arguments (line 548)
    kwargs_495488 = {}
    # Getting the type of 'kv' (line 548)
    kv_495485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 15), 'kv', False)
    # Calling kv(args, kwargs) (line 548)
    kv_call_result_495489 = invoke(stypy.reporting.localization.Localization(__file__, 548, 15), kv_495485, *[v_495486, z_495487], **kwargs_495488)
    
    # Assigning a type to the variable 'stypy_return_type' (line 548)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 548, 8), 'stypy_return_type', kv_call_result_495489)
    # SSA branch for the else part of an if statement (line 547)
    module_type_store.open_ssa_branch('else')
    int_495490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 550, 16), 'int')
    # Getting the type of 'n' (line 550)
    n_495491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 21), 'n')
    # Applying the binary operator '**' (line 550)
    result_pow_495492 = python_operator(stypy.reporting.localization.Localization(__file__, 550, 15), '**', int_495490, n_495491)
    
    
    # Call to _bessel_diff_formula(...): (line 550)
    # Processing the call arguments (line 550)
    # Getting the type of 'v' (line 550)
    v_495494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 46), 'v', False)
    # Getting the type of 'z' (line 550)
    z_495495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 49), 'z', False)
    # Getting the type of 'n' (line 550)
    n_495496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 52), 'n', False)
    # Getting the type of 'kv' (line 550)
    kv_495497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 55), 'kv', False)
    int_495498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 550, 59), 'int')
    # Processing the call keyword arguments (line 550)
    kwargs_495499 = {}
    # Getting the type of '_bessel_diff_formula' (line 550)
    _bessel_diff_formula_495493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 25), '_bessel_diff_formula', False)
    # Calling _bessel_diff_formula(args, kwargs) (line 550)
    _bessel_diff_formula_call_result_495500 = invoke(stypy.reporting.localization.Localization(__file__, 550, 25), _bessel_diff_formula_495493, *[v_495494, z_495495, n_495496, kv_495497, int_495498], **kwargs_495499)
    
    # Applying the binary operator '*' (line 550)
    result_mul_495501 = python_operator(stypy.reporting.localization.Localization(__file__, 550, 15), '*', result_pow_495492, _bessel_diff_formula_call_result_495500)
    
    # Assigning a type to the variable 'stypy_return_type' (line 550)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 550, 8), 'stypy_return_type', result_mul_495501)
    # SSA join for if statement (line 547)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'kvp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'kvp' in the type store
    # Getting the type of 'stypy_return_type' (line 500)
    stypy_return_type_495502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495502)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'kvp'
    return stypy_return_type_495502

# Assigning a type to the variable 'kvp' (line 500)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 500, 0), 'kvp', kvp)

@norecursion
def ivp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_495503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 553, 16), 'int')
    defaults = [int_495503]
    # Create a new context for function 'ivp'
    module_type_store = module_type_store.open_function_context('ivp', 553, 0, False)
    
    # Passed parameters checking function
    ivp.stypy_localization = localization
    ivp.stypy_type_of_self = None
    ivp.stypy_type_store = module_type_store
    ivp.stypy_function_name = 'ivp'
    ivp.stypy_param_names_list = ['v', 'z', 'n']
    ivp.stypy_varargs_param_name = None
    ivp.stypy_kwargs_param_name = None
    ivp.stypy_call_defaults = defaults
    ivp.stypy_call_varargs = varargs
    ivp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ivp', ['v', 'z', 'n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ivp', localization, ['v', 'z', 'n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ivp(...)' code ##################

    str_495504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, (-1)), 'str', 'Compute nth derivative of modified Bessel function Iv(z) with respect\n    to `z`.\n\n    Parameters\n    ----------\n    v : array_like of float\n        Order of Bessel function\n    z : array_like of complex\n        Argument at which to evaluate the derivative\n    n : int, default 1\n        Order of derivative\n\n    Notes\n    -----\n    The derivative is computed using the relation DLFM 10.29.5 [2]_.\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996, chapter 6.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n    .. [2] NIST Digital Library of Mathematical Functions.\n           http://dlmf.nist.gov/10.29.E5\n\n    ')
    
    # Assigning a Call to a Name (line 579):
    
    # Assigning a Call to a Name (line 579):
    
    # Call to _nonneg_int_or_fail(...): (line 579)
    # Processing the call arguments (line 579)
    # Getting the type of 'n' (line 579)
    n_495506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 28), 'n', False)
    str_495507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 579, 31), 'str', 'n')
    # Processing the call keyword arguments (line 579)
    kwargs_495508 = {}
    # Getting the type of '_nonneg_int_or_fail' (line 579)
    _nonneg_int_or_fail_495505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 8), '_nonneg_int_or_fail', False)
    # Calling _nonneg_int_or_fail(args, kwargs) (line 579)
    _nonneg_int_or_fail_call_result_495509 = invoke(stypy.reporting.localization.Localization(__file__, 579, 8), _nonneg_int_or_fail_495505, *[n_495506, str_495507], **kwargs_495508)
    
    # Assigning a type to the variable 'n' (line 579)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 579, 4), 'n', _nonneg_int_or_fail_call_result_495509)
    
    
    # Getting the type of 'n' (line 580)
    n_495510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 7), 'n')
    int_495511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 580, 12), 'int')
    # Applying the binary operator '==' (line 580)
    result_eq_495512 = python_operator(stypy.reporting.localization.Localization(__file__, 580, 7), '==', n_495510, int_495511)
    
    # Testing the type of an if condition (line 580)
    if_condition_495513 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 580, 4), result_eq_495512)
    # Assigning a type to the variable 'if_condition_495513' (line 580)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 580, 4), 'if_condition_495513', if_condition_495513)
    # SSA begins for if statement (line 580)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to iv(...): (line 581)
    # Processing the call arguments (line 581)
    # Getting the type of 'v' (line 581)
    v_495515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 18), 'v', False)
    # Getting the type of 'z' (line 581)
    z_495516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 21), 'z', False)
    # Processing the call keyword arguments (line 581)
    kwargs_495517 = {}
    # Getting the type of 'iv' (line 581)
    iv_495514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 15), 'iv', False)
    # Calling iv(args, kwargs) (line 581)
    iv_call_result_495518 = invoke(stypy.reporting.localization.Localization(__file__, 581, 15), iv_495514, *[v_495515, z_495516], **kwargs_495517)
    
    # Assigning a type to the variable 'stypy_return_type' (line 581)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 8), 'stypy_return_type', iv_call_result_495518)
    # SSA branch for the else part of an if statement (line 580)
    module_type_store.open_ssa_branch('else')
    
    # Call to _bessel_diff_formula(...): (line 583)
    # Processing the call arguments (line 583)
    # Getting the type of 'v' (line 583)
    v_495520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 36), 'v', False)
    # Getting the type of 'z' (line 583)
    z_495521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 39), 'z', False)
    # Getting the type of 'n' (line 583)
    n_495522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 42), 'n', False)
    # Getting the type of 'iv' (line 583)
    iv_495523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 45), 'iv', False)
    int_495524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 583, 49), 'int')
    # Processing the call keyword arguments (line 583)
    kwargs_495525 = {}
    # Getting the type of '_bessel_diff_formula' (line 583)
    _bessel_diff_formula_495519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 15), '_bessel_diff_formula', False)
    # Calling _bessel_diff_formula(args, kwargs) (line 583)
    _bessel_diff_formula_call_result_495526 = invoke(stypy.reporting.localization.Localization(__file__, 583, 15), _bessel_diff_formula_495519, *[v_495520, z_495521, n_495522, iv_495523, int_495524], **kwargs_495525)
    
    # Assigning a type to the variable 'stypy_return_type' (line 583)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 583, 8), 'stypy_return_type', _bessel_diff_formula_call_result_495526)
    # SSA join for if statement (line 580)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'ivp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ivp' in the type store
    # Getting the type of 'stypy_return_type' (line 553)
    stypy_return_type_495527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495527)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ivp'
    return stypy_return_type_495527

# Assigning a type to the variable 'ivp' (line 553)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 0), 'ivp', ivp)

@norecursion
def h1vp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_495528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 586, 17), 'int')
    defaults = [int_495528]
    # Create a new context for function 'h1vp'
    module_type_store = module_type_store.open_function_context('h1vp', 586, 0, False)
    
    # Passed parameters checking function
    h1vp.stypy_localization = localization
    h1vp.stypy_type_of_self = None
    h1vp.stypy_type_store = module_type_store
    h1vp.stypy_function_name = 'h1vp'
    h1vp.stypy_param_names_list = ['v', 'z', 'n']
    h1vp.stypy_varargs_param_name = None
    h1vp.stypy_kwargs_param_name = None
    h1vp.stypy_call_defaults = defaults
    h1vp.stypy_call_varargs = varargs
    h1vp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'h1vp', ['v', 'z', 'n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'h1vp', localization, ['v', 'z', 'n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'h1vp(...)' code ##################

    str_495529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 610, (-1)), 'str', 'Compute nth derivative of Hankel function H1v(z) with respect to `z`.\n\n    Parameters\n    ----------\n    v : float\n        Order of Hankel function\n    z : complex\n        Argument at which to evaluate the derivative\n    n : int, default 1\n        Order of derivative\n\n    Notes\n    -----\n    The derivative is computed using the relation DLFM 10.6.7 [2]_.\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996, chapter 5.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n    .. [2] NIST Digital Library of Mathematical Functions.\n           http://dlmf.nist.gov/10.6.E7\n\n    ')
    
    # Assigning a Call to a Name (line 611):
    
    # Assigning a Call to a Name (line 611):
    
    # Call to _nonneg_int_or_fail(...): (line 611)
    # Processing the call arguments (line 611)
    # Getting the type of 'n' (line 611)
    n_495531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 28), 'n', False)
    str_495532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 611, 31), 'str', 'n')
    # Processing the call keyword arguments (line 611)
    kwargs_495533 = {}
    # Getting the type of '_nonneg_int_or_fail' (line 611)
    _nonneg_int_or_fail_495530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 8), '_nonneg_int_or_fail', False)
    # Calling _nonneg_int_or_fail(args, kwargs) (line 611)
    _nonneg_int_or_fail_call_result_495534 = invoke(stypy.reporting.localization.Localization(__file__, 611, 8), _nonneg_int_or_fail_495530, *[n_495531, str_495532], **kwargs_495533)
    
    # Assigning a type to the variable 'n' (line 611)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 611, 4), 'n', _nonneg_int_or_fail_call_result_495534)
    
    
    # Getting the type of 'n' (line 612)
    n_495535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 7), 'n')
    int_495536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 612, 12), 'int')
    # Applying the binary operator '==' (line 612)
    result_eq_495537 = python_operator(stypy.reporting.localization.Localization(__file__, 612, 7), '==', n_495535, int_495536)
    
    # Testing the type of an if condition (line 612)
    if_condition_495538 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 612, 4), result_eq_495537)
    # Assigning a type to the variable 'if_condition_495538' (line 612)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 612, 4), 'if_condition_495538', if_condition_495538)
    # SSA begins for if statement (line 612)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to hankel1(...): (line 613)
    # Processing the call arguments (line 613)
    # Getting the type of 'v' (line 613)
    v_495540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 23), 'v', False)
    # Getting the type of 'z' (line 613)
    z_495541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 26), 'z', False)
    # Processing the call keyword arguments (line 613)
    kwargs_495542 = {}
    # Getting the type of 'hankel1' (line 613)
    hankel1_495539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 15), 'hankel1', False)
    # Calling hankel1(args, kwargs) (line 613)
    hankel1_call_result_495543 = invoke(stypy.reporting.localization.Localization(__file__, 613, 15), hankel1_495539, *[v_495540, z_495541], **kwargs_495542)
    
    # Assigning a type to the variable 'stypy_return_type' (line 613)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 613, 8), 'stypy_return_type', hankel1_call_result_495543)
    # SSA branch for the else part of an if statement (line 612)
    module_type_store.open_ssa_branch('else')
    
    # Call to _bessel_diff_formula(...): (line 615)
    # Processing the call arguments (line 615)
    # Getting the type of 'v' (line 615)
    v_495545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 36), 'v', False)
    # Getting the type of 'z' (line 615)
    z_495546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 39), 'z', False)
    # Getting the type of 'n' (line 615)
    n_495547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 42), 'n', False)
    # Getting the type of 'hankel1' (line 615)
    hankel1_495548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 45), 'hankel1', False)
    int_495549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 615, 54), 'int')
    # Processing the call keyword arguments (line 615)
    kwargs_495550 = {}
    # Getting the type of '_bessel_diff_formula' (line 615)
    _bessel_diff_formula_495544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 15), '_bessel_diff_formula', False)
    # Calling _bessel_diff_formula(args, kwargs) (line 615)
    _bessel_diff_formula_call_result_495551 = invoke(stypy.reporting.localization.Localization(__file__, 615, 15), _bessel_diff_formula_495544, *[v_495545, z_495546, n_495547, hankel1_495548, int_495549], **kwargs_495550)
    
    # Assigning a type to the variable 'stypy_return_type' (line 615)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 615, 8), 'stypy_return_type', _bessel_diff_formula_call_result_495551)
    # SSA join for if statement (line 612)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'h1vp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'h1vp' in the type store
    # Getting the type of 'stypy_return_type' (line 586)
    stypy_return_type_495552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495552)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'h1vp'
    return stypy_return_type_495552

# Assigning a type to the variable 'h1vp' (line 586)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 586, 0), 'h1vp', h1vp)

@norecursion
def h2vp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_495553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 618, 17), 'int')
    defaults = [int_495553]
    # Create a new context for function 'h2vp'
    module_type_store = module_type_store.open_function_context('h2vp', 618, 0, False)
    
    # Passed parameters checking function
    h2vp.stypy_localization = localization
    h2vp.stypy_type_of_self = None
    h2vp.stypy_type_store = module_type_store
    h2vp.stypy_function_name = 'h2vp'
    h2vp.stypy_param_names_list = ['v', 'z', 'n']
    h2vp.stypy_varargs_param_name = None
    h2vp.stypy_kwargs_param_name = None
    h2vp.stypy_call_defaults = defaults
    h2vp.stypy_call_varargs = varargs
    h2vp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'h2vp', ['v', 'z', 'n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'h2vp', localization, ['v', 'z', 'n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'h2vp(...)' code ##################

    str_495554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 642, (-1)), 'str', 'Compute nth derivative of Hankel function H2v(z) with respect to `z`.\n\n    Parameters\n    ----------\n    v : float\n        Order of Hankel function\n    z : complex\n        Argument at which to evaluate the derivative\n    n : int, default 1\n        Order of derivative\n\n    Notes\n    -----\n    The derivative is computed using the relation DLFM 10.6.7 [2]_.\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996, chapter 5.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n    .. [2] NIST Digital Library of Mathematical Functions.\n           http://dlmf.nist.gov/10.6.E7\n\n    ')
    
    # Assigning a Call to a Name (line 643):
    
    # Assigning a Call to a Name (line 643):
    
    # Call to _nonneg_int_or_fail(...): (line 643)
    # Processing the call arguments (line 643)
    # Getting the type of 'n' (line 643)
    n_495556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 28), 'n', False)
    str_495557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 643, 31), 'str', 'n')
    # Processing the call keyword arguments (line 643)
    kwargs_495558 = {}
    # Getting the type of '_nonneg_int_or_fail' (line 643)
    _nonneg_int_or_fail_495555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 8), '_nonneg_int_or_fail', False)
    # Calling _nonneg_int_or_fail(args, kwargs) (line 643)
    _nonneg_int_or_fail_call_result_495559 = invoke(stypy.reporting.localization.Localization(__file__, 643, 8), _nonneg_int_or_fail_495555, *[n_495556, str_495557], **kwargs_495558)
    
    # Assigning a type to the variable 'n' (line 643)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 643, 4), 'n', _nonneg_int_or_fail_call_result_495559)
    
    
    # Getting the type of 'n' (line 644)
    n_495560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 7), 'n')
    int_495561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 644, 12), 'int')
    # Applying the binary operator '==' (line 644)
    result_eq_495562 = python_operator(stypy.reporting.localization.Localization(__file__, 644, 7), '==', n_495560, int_495561)
    
    # Testing the type of an if condition (line 644)
    if_condition_495563 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 644, 4), result_eq_495562)
    # Assigning a type to the variable 'if_condition_495563' (line 644)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 644, 4), 'if_condition_495563', if_condition_495563)
    # SSA begins for if statement (line 644)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to hankel2(...): (line 645)
    # Processing the call arguments (line 645)
    # Getting the type of 'v' (line 645)
    v_495565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 23), 'v', False)
    # Getting the type of 'z' (line 645)
    z_495566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 26), 'z', False)
    # Processing the call keyword arguments (line 645)
    kwargs_495567 = {}
    # Getting the type of 'hankel2' (line 645)
    hankel2_495564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 15), 'hankel2', False)
    # Calling hankel2(args, kwargs) (line 645)
    hankel2_call_result_495568 = invoke(stypy.reporting.localization.Localization(__file__, 645, 15), hankel2_495564, *[v_495565, z_495566], **kwargs_495567)
    
    # Assigning a type to the variable 'stypy_return_type' (line 645)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 645, 8), 'stypy_return_type', hankel2_call_result_495568)
    # SSA branch for the else part of an if statement (line 644)
    module_type_store.open_ssa_branch('else')
    
    # Call to _bessel_diff_formula(...): (line 647)
    # Processing the call arguments (line 647)
    # Getting the type of 'v' (line 647)
    v_495570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 36), 'v', False)
    # Getting the type of 'z' (line 647)
    z_495571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 39), 'z', False)
    # Getting the type of 'n' (line 647)
    n_495572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 42), 'n', False)
    # Getting the type of 'hankel2' (line 647)
    hankel2_495573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 45), 'hankel2', False)
    int_495574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 647, 54), 'int')
    # Processing the call keyword arguments (line 647)
    kwargs_495575 = {}
    # Getting the type of '_bessel_diff_formula' (line 647)
    _bessel_diff_formula_495569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 15), '_bessel_diff_formula', False)
    # Calling _bessel_diff_formula(args, kwargs) (line 647)
    _bessel_diff_formula_call_result_495576 = invoke(stypy.reporting.localization.Localization(__file__, 647, 15), _bessel_diff_formula_495569, *[v_495570, z_495571, n_495572, hankel2_495573, int_495574], **kwargs_495575)
    
    # Assigning a type to the variable 'stypy_return_type' (line 647)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 647, 8), 'stypy_return_type', _bessel_diff_formula_call_result_495576)
    # SSA join for if statement (line 644)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'h2vp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'h2vp' in the type store
    # Getting the type of 'stypy_return_type' (line 618)
    stypy_return_type_495577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495577)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'h2vp'
    return stypy_return_type_495577

# Assigning a type to the variable 'h2vp' (line 618)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 618, 0), 'h2vp', h2vp)

@norecursion
def riccati_jn(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'riccati_jn'
    module_type_store = module_type_store.open_function_context('riccati_jn', 650, 0, False)
    
    # Passed parameters checking function
    riccati_jn.stypy_localization = localization
    riccati_jn.stypy_type_of_self = None
    riccati_jn.stypy_type_store = module_type_store
    riccati_jn.stypy_function_name = 'riccati_jn'
    riccati_jn.stypy_param_names_list = ['n', 'x']
    riccati_jn.stypy_varargs_param_name = None
    riccati_jn.stypy_kwargs_param_name = None
    riccati_jn.stypy_call_defaults = defaults
    riccati_jn.stypy_call_varargs = varargs
    riccati_jn.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'riccati_jn', ['n', 'x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'riccati_jn', localization, ['n', 'x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'riccati_jn(...)' code ##################

    str_495578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 690, (-1)), 'str', 'Compute Ricatti-Bessel function of the first kind and its derivative.\n\n    The Ricatti-Bessel function of the first kind is defined as :math:`x\n    j_n(x)`, where :math:`j_n` is the spherical Bessel function of the first\n    kind of order :math:`n`.\n\n    This function computes the value and first derivative of the\n    Ricatti-Bessel function for all orders up to and including `n`.\n\n    Parameters\n    ----------\n    n : int\n        Maximum order of function to compute\n    x : float\n        Argument at which to evaluate\n\n    Returns\n    -------\n    jn : ndarray\n        Value of j0(x), ..., jn(x)\n    jnp : ndarray\n        First derivative j0\'(x), ..., jn\'(x)\n\n    Notes\n    -----\n    The computation is carried out via backward recurrence, using the\n    relation DLMF 10.51.1 [2]_.\n\n    Wrapper for a Fortran routine created by Shanjie Zhang and Jianming\n    Jin [1]_.\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n    .. [2] NIST Digital Library of Mathematical Functions.\n           http://dlmf.nist.gov/10.51.E1\n\n    ')
    
    
    
    # Evaluating a boolean operation
    
    # Call to isscalar(...): (line 691)
    # Processing the call arguments (line 691)
    # Getting the type of 'n' (line 691)
    n_495580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 21), 'n', False)
    # Processing the call keyword arguments (line 691)
    kwargs_495581 = {}
    # Getting the type of 'isscalar' (line 691)
    isscalar_495579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 12), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 691)
    isscalar_call_result_495582 = invoke(stypy.reporting.localization.Localization(__file__, 691, 12), isscalar_495579, *[n_495580], **kwargs_495581)
    
    
    # Call to isscalar(...): (line 691)
    # Processing the call arguments (line 691)
    # Getting the type of 'x' (line 691)
    x_495584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 37), 'x', False)
    # Processing the call keyword arguments (line 691)
    kwargs_495585 = {}
    # Getting the type of 'isscalar' (line 691)
    isscalar_495583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 28), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 691)
    isscalar_call_result_495586 = invoke(stypy.reporting.localization.Localization(__file__, 691, 28), isscalar_495583, *[x_495584], **kwargs_495585)
    
    # Applying the binary operator 'and' (line 691)
    result_and_keyword_495587 = python_operator(stypy.reporting.localization.Localization(__file__, 691, 12), 'and', isscalar_call_result_495582, isscalar_call_result_495586)
    
    # Applying the 'not' unary operator (line 691)
    result_not__495588 = python_operator(stypy.reporting.localization.Localization(__file__, 691, 7), 'not', result_and_keyword_495587)
    
    # Testing the type of an if condition (line 691)
    if_condition_495589 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 691, 4), result_not__495588)
    # Assigning a type to the variable 'if_condition_495589' (line 691)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 691, 4), 'if_condition_495589', if_condition_495589)
    # SSA begins for if statement (line 691)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 692)
    # Processing the call arguments (line 692)
    str_495591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 692, 25), 'str', 'arguments must be scalars.')
    # Processing the call keyword arguments (line 692)
    kwargs_495592 = {}
    # Getting the type of 'ValueError' (line 692)
    ValueError_495590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 692)
    ValueError_call_result_495593 = invoke(stypy.reporting.localization.Localization(__file__, 692, 14), ValueError_495590, *[str_495591], **kwargs_495592)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 692, 8), ValueError_call_result_495593, 'raise parameter', BaseException)
    # SSA join for if statement (line 691)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 693):
    
    # Assigning a Call to a Name (line 693):
    
    # Call to _nonneg_int_or_fail(...): (line 693)
    # Processing the call arguments (line 693)
    # Getting the type of 'n' (line 693)
    n_495595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 28), 'n', False)
    str_495596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 693, 31), 'str', 'n')
    # Processing the call keyword arguments (line 693)
    # Getting the type of 'False' (line 693)
    False_495597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 43), 'False', False)
    keyword_495598 = False_495597
    kwargs_495599 = {'strict': keyword_495598}
    # Getting the type of '_nonneg_int_or_fail' (line 693)
    _nonneg_int_or_fail_495594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 8), '_nonneg_int_or_fail', False)
    # Calling _nonneg_int_or_fail(args, kwargs) (line 693)
    _nonneg_int_or_fail_call_result_495600 = invoke(stypy.reporting.localization.Localization(__file__, 693, 8), _nonneg_int_or_fail_495594, *[n_495595, str_495596], **kwargs_495599)
    
    # Assigning a type to the variable 'n' (line 693)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 693, 4), 'n', _nonneg_int_or_fail_call_result_495600)
    
    
    # Getting the type of 'n' (line 694)
    n_495601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 8), 'n')
    int_495602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 694, 13), 'int')
    # Applying the binary operator '==' (line 694)
    result_eq_495603 = python_operator(stypy.reporting.localization.Localization(__file__, 694, 8), '==', n_495601, int_495602)
    
    # Testing the type of an if condition (line 694)
    if_condition_495604 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 694, 4), result_eq_495603)
    # Assigning a type to the variable 'if_condition_495604' (line 694)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 694, 4), 'if_condition_495604', if_condition_495604)
    # SSA begins for if statement (line 694)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 695):
    
    # Assigning a Num to a Name (line 695):
    int_495605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 695, 13), 'int')
    # Assigning a type to the variable 'n1' (line 695)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 695, 8), 'n1', int_495605)
    # SSA branch for the else part of an if statement (line 694)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 697):
    
    # Assigning a Name to a Name (line 697):
    # Getting the type of 'n' (line 697)
    n_495606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 13), 'n')
    # Assigning a type to the variable 'n1' (line 697)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 697, 8), 'n1', n_495606)
    # SSA join for if statement (line 694)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 698):
    
    # Assigning a Subscript to a Name (line 698):
    
    # Obtaining the type of the subscript
    int_495607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 4), 'int')
    
    # Call to rctj(...): (line 698)
    # Processing the call arguments (line 698)
    # Getting the type of 'n1' (line 698)
    n1_495610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 31), 'n1', False)
    # Getting the type of 'x' (line 698)
    x_495611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 35), 'x', False)
    # Processing the call keyword arguments (line 698)
    kwargs_495612 = {}
    # Getting the type of 'specfun' (line 698)
    specfun_495608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 18), 'specfun', False)
    # Obtaining the member 'rctj' of a type (line 698)
    rctj_495609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 18), specfun_495608, 'rctj')
    # Calling rctj(args, kwargs) (line 698)
    rctj_call_result_495613 = invoke(stypy.reporting.localization.Localization(__file__, 698, 18), rctj_495609, *[n1_495610, x_495611], **kwargs_495612)
    
    # Obtaining the member '__getitem__' of a type (line 698)
    getitem___495614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 4), rctj_call_result_495613, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 698)
    subscript_call_result_495615 = invoke(stypy.reporting.localization.Localization(__file__, 698, 4), getitem___495614, int_495607)
    
    # Assigning a type to the variable 'tuple_var_assignment_494735' (line 698)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 4), 'tuple_var_assignment_494735', subscript_call_result_495615)
    
    # Assigning a Subscript to a Name (line 698):
    
    # Obtaining the type of the subscript
    int_495616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 4), 'int')
    
    # Call to rctj(...): (line 698)
    # Processing the call arguments (line 698)
    # Getting the type of 'n1' (line 698)
    n1_495619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 31), 'n1', False)
    # Getting the type of 'x' (line 698)
    x_495620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 35), 'x', False)
    # Processing the call keyword arguments (line 698)
    kwargs_495621 = {}
    # Getting the type of 'specfun' (line 698)
    specfun_495617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 18), 'specfun', False)
    # Obtaining the member 'rctj' of a type (line 698)
    rctj_495618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 18), specfun_495617, 'rctj')
    # Calling rctj(args, kwargs) (line 698)
    rctj_call_result_495622 = invoke(stypy.reporting.localization.Localization(__file__, 698, 18), rctj_495618, *[n1_495619, x_495620], **kwargs_495621)
    
    # Obtaining the member '__getitem__' of a type (line 698)
    getitem___495623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 4), rctj_call_result_495622, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 698)
    subscript_call_result_495624 = invoke(stypy.reporting.localization.Localization(__file__, 698, 4), getitem___495623, int_495616)
    
    # Assigning a type to the variable 'tuple_var_assignment_494736' (line 698)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 4), 'tuple_var_assignment_494736', subscript_call_result_495624)
    
    # Assigning a Subscript to a Name (line 698):
    
    # Obtaining the type of the subscript
    int_495625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 4), 'int')
    
    # Call to rctj(...): (line 698)
    # Processing the call arguments (line 698)
    # Getting the type of 'n1' (line 698)
    n1_495628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 31), 'n1', False)
    # Getting the type of 'x' (line 698)
    x_495629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 35), 'x', False)
    # Processing the call keyword arguments (line 698)
    kwargs_495630 = {}
    # Getting the type of 'specfun' (line 698)
    specfun_495626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 18), 'specfun', False)
    # Obtaining the member 'rctj' of a type (line 698)
    rctj_495627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 18), specfun_495626, 'rctj')
    # Calling rctj(args, kwargs) (line 698)
    rctj_call_result_495631 = invoke(stypy.reporting.localization.Localization(__file__, 698, 18), rctj_495627, *[n1_495628, x_495629], **kwargs_495630)
    
    # Obtaining the member '__getitem__' of a type (line 698)
    getitem___495632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 4), rctj_call_result_495631, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 698)
    subscript_call_result_495633 = invoke(stypy.reporting.localization.Localization(__file__, 698, 4), getitem___495632, int_495625)
    
    # Assigning a type to the variable 'tuple_var_assignment_494737' (line 698)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 4), 'tuple_var_assignment_494737', subscript_call_result_495633)
    
    # Assigning a Name to a Name (line 698):
    # Getting the type of 'tuple_var_assignment_494735' (line 698)
    tuple_var_assignment_494735_495634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 4), 'tuple_var_assignment_494735')
    # Assigning a type to the variable 'nm' (line 698)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 4), 'nm', tuple_var_assignment_494735_495634)
    
    # Assigning a Name to a Name (line 698):
    # Getting the type of 'tuple_var_assignment_494736' (line 698)
    tuple_var_assignment_494736_495635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 4), 'tuple_var_assignment_494736')
    # Assigning a type to the variable 'jn' (line 698)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 8), 'jn', tuple_var_assignment_494736_495635)
    
    # Assigning a Name to a Name (line 698):
    # Getting the type of 'tuple_var_assignment_494737' (line 698)
    tuple_var_assignment_494737_495636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 4), 'tuple_var_assignment_494737')
    # Assigning a type to the variable 'jnp' (line 698)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 12), 'jnp', tuple_var_assignment_494737_495636)
    
    # Obtaining an instance of the builtin type 'tuple' (line 699)
    tuple_495637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 699, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 699)
    # Adding element type (line 699)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 699)
    n_495638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 16), 'n')
    int_495639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 699, 18), 'int')
    # Applying the binary operator '+' (line 699)
    result_add_495640 = python_operator(stypy.reporting.localization.Localization(__file__, 699, 16), '+', n_495638, int_495639)
    
    slice_495641 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 699, 11), None, result_add_495640, None)
    # Getting the type of 'jn' (line 699)
    jn_495642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 11), 'jn')
    # Obtaining the member '__getitem__' of a type (line 699)
    getitem___495643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 11), jn_495642, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 699)
    subscript_call_result_495644 = invoke(stypy.reporting.localization.Localization(__file__, 699, 11), getitem___495643, slice_495641)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 699, 11), tuple_495637, subscript_call_result_495644)
    # Adding element type (line 699)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 699)
    n_495645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 29), 'n')
    int_495646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 699, 31), 'int')
    # Applying the binary operator '+' (line 699)
    result_add_495647 = python_operator(stypy.reporting.localization.Localization(__file__, 699, 29), '+', n_495645, int_495646)
    
    slice_495648 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 699, 23), None, result_add_495647, None)
    # Getting the type of 'jnp' (line 699)
    jnp_495649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 23), 'jnp')
    # Obtaining the member '__getitem__' of a type (line 699)
    getitem___495650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 23), jnp_495649, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 699)
    subscript_call_result_495651 = invoke(stypy.reporting.localization.Localization(__file__, 699, 23), getitem___495650, slice_495648)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 699, 11), tuple_495637, subscript_call_result_495651)
    
    # Assigning a type to the variable 'stypy_return_type' (line 699)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 699, 4), 'stypy_return_type', tuple_495637)
    
    # ################# End of 'riccati_jn(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'riccati_jn' in the type store
    # Getting the type of 'stypy_return_type' (line 650)
    stypy_return_type_495652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495652)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'riccati_jn'
    return stypy_return_type_495652

# Assigning a type to the variable 'riccati_jn' (line 650)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 0), 'riccati_jn', riccati_jn)

@norecursion
def riccati_yn(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'riccati_yn'
    module_type_store = module_type_store.open_function_context('riccati_yn', 702, 0, False)
    
    # Passed parameters checking function
    riccati_yn.stypy_localization = localization
    riccati_yn.stypy_type_of_self = None
    riccati_yn.stypy_type_store = module_type_store
    riccati_yn.stypy_function_name = 'riccati_yn'
    riccati_yn.stypy_param_names_list = ['n', 'x']
    riccati_yn.stypy_varargs_param_name = None
    riccati_yn.stypy_kwargs_param_name = None
    riccati_yn.stypy_call_defaults = defaults
    riccati_yn.stypy_call_varargs = varargs
    riccati_yn.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'riccati_yn', ['n', 'x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'riccati_yn', localization, ['n', 'x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'riccati_yn(...)' code ##################

    str_495653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 742, (-1)), 'str', 'Compute Ricatti-Bessel function of the second kind and its derivative.\n\n    The Ricatti-Bessel function of the second kind is defined as :math:`x\n    y_n(x)`, where :math:`y_n` is the spherical Bessel function of the second\n    kind of order :math:`n`.\n\n    This function computes the value and first derivative of the function for\n    all orders up to and including `n`.\n\n    Parameters\n    ----------\n    n : int\n        Maximum order of function to compute\n    x : float\n        Argument at which to evaluate\n\n    Returns\n    -------\n    yn : ndarray\n        Value of y0(x), ..., yn(x)\n    ynp : ndarray\n        First derivative y0\'(x), ..., yn\'(x)\n\n    Notes\n    -----\n    The computation is carried out via ascending recurrence, using the\n    relation DLMF 10.51.1 [2]_.\n\n    Wrapper for a Fortran routine created by Shanjie Zhang and Jianming\n    Jin [1]_.\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n    .. [2] NIST Digital Library of Mathematical Functions.\n           http://dlmf.nist.gov/10.51.E1\n\n    ')
    
    
    
    # Evaluating a boolean operation
    
    # Call to isscalar(...): (line 743)
    # Processing the call arguments (line 743)
    # Getting the type of 'n' (line 743)
    n_495655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 21), 'n', False)
    # Processing the call keyword arguments (line 743)
    kwargs_495656 = {}
    # Getting the type of 'isscalar' (line 743)
    isscalar_495654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 12), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 743)
    isscalar_call_result_495657 = invoke(stypy.reporting.localization.Localization(__file__, 743, 12), isscalar_495654, *[n_495655], **kwargs_495656)
    
    
    # Call to isscalar(...): (line 743)
    # Processing the call arguments (line 743)
    # Getting the type of 'x' (line 743)
    x_495659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 37), 'x', False)
    # Processing the call keyword arguments (line 743)
    kwargs_495660 = {}
    # Getting the type of 'isscalar' (line 743)
    isscalar_495658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 28), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 743)
    isscalar_call_result_495661 = invoke(stypy.reporting.localization.Localization(__file__, 743, 28), isscalar_495658, *[x_495659], **kwargs_495660)
    
    # Applying the binary operator 'and' (line 743)
    result_and_keyword_495662 = python_operator(stypy.reporting.localization.Localization(__file__, 743, 12), 'and', isscalar_call_result_495657, isscalar_call_result_495661)
    
    # Applying the 'not' unary operator (line 743)
    result_not__495663 = python_operator(stypy.reporting.localization.Localization(__file__, 743, 7), 'not', result_and_keyword_495662)
    
    # Testing the type of an if condition (line 743)
    if_condition_495664 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 743, 4), result_not__495663)
    # Assigning a type to the variable 'if_condition_495664' (line 743)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 743, 4), 'if_condition_495664', if_condition_495664)
    # SSA begins for if statement (line 743)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 744)
    # Processing the call arguments (line 744)
    str_495666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 744, 25), 'str', 'arguments must be scalars.')
    # Processing the call keyword arguments (line 744)
    kwargs_495667 = {}
    # Getting the type of 'ValueError' (line 744)
    ValueError_495665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 744)
    ValueError_call_result_495668 = invoke(stypy.reporting.localization.Localization(__file__, 744, 14), ValueError_495665, *[str_495666], **kwargs_495667)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 744, 8), ValueError_call_result_495668, 'raise parameter', BaseException)
    # SSA join for if statement (line 743)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 745):
    
    # Assigning a Call to a Name (line 745):
    
    # Call to _nonneg_int_or_fail(...): (line 745)
    # Processing the call arguments (line 745)
    # Getting the type of 'n' (line 745)
    n_495670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 28), 'n', False)
    str_495671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 745, 31), 'str', 'n')
    # Processing the call keyword arguments (line 745)
    # Getting the type of 'False' (line 745)
    False_495672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 43), 'False', False)
    keyword_495673 = False_495672
    kwargs_495674 = {'strict': keyword_495673}
    # Getting the type of '_nonneg_int_or_fail' (line 745)
    _nonneg_int_or_fail_495669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 8), '_nonneg_int_or_fail', False)
    # Calling _nonneg_int_or_fail(args, kwargs) (line 745)
    _nonneg_int_or_fail_call_result_495675 = invoke(stypy.reporting.localization.Localization(__file__, 745, 8), _nonneg_int_or_fail_495669, *[n_495670, str_495671], **kwargs_495674)
    
    # Assigning a type to the variable 'n' (line 745)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 745, 4), 'n', _nonneg_int_or_fail_call_result_495675)
    
    
    # Getting the type of 'n' (line 746)
    n_495676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 8), 'n')
    int_495677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 746, 13), 'int')
    # Applying the binary operator '==' (line 746)
    result_eq_495678 = python_operator(stypy.reporting.localization.Localization(__file__, 746, 8), '==', n_495676, int_495677)
    
    # Testing the type of an if condition (line 746)
    if_condition_495679 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 746, 4), result_eq_495678)
    # Assigning a type to the variable 'if_condition_495679' (line 746)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 746, 4), 'if_condition_495679', if_condition_495679)
    # SSA begins for if statement (line 746)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 747):
    
    # Assigning a Num to a Name (line 747):
    int_495680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 747, 13), 'int')
    # Assigning a type to the variable 'n1' (line 747)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 747, 8), 'n1', int_495680)
    # SSA branch for the else part of an if statement (line 746)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 749):
    
    # Assigning a Name to a Name (line 749):
    # Getting the type of 'n' (line 749)
    n_495681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 13), 'n')
    # Assigning a type to the variable 'n1' (line 749)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 749, 8), 'n1', n_495681)
    # SSA join for if statement (line 746)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 750):
    
    # Assigning a Subscript to a Name (line 750):
    
    # Obtaining the type of the subscript
    int_495682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 750, 4), 'int')
    
    # Call to rcty(...): (line 750)
    # Processing the call arguments (line 750)
    # Getting the type of 'n1' (line 750)
    n1_495685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 31), 'n1', False)
    # Getting the type of 'x' (line 750)
    x_495686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 35), 'x', False)
    # Processing the call keyword arguments (line 750)
    kwargs_495687 = {}
    # Getting the type of 'specfun' (line 750)
    specfun_495683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 18), 'specfun', False)
    # Obtaining the member 'rcty' of a type (line 750)
    rcty_495684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 18), specfun_495683, 'rcty')
    # Calling rcty(args, kwargs) (line 750)
    rcty_call_result_495688 = invoke(stypy.reporting.localization.Localization(__file__, 750, 18), rcty_495684, *[n1_495685, x_495686], **kwargs_495687)
    
    # Obtaining the member '__getitem__' of a type (line 750)
    getitem___495689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 4), rcty_call_result_495688, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 750)
    subscript_call_result_495690 = invoke(stypy.reporting.localization.Localization(__file__, 750, 4), getitem___495689, int_495682)
    
    # Assigning a type to the variable 'tuple_var_assignment_494738' (line 750)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 4), 'tuple_var_assignment_494738', subscript_call_result_495690)
    
    # Assigning a Subscript to a Name (line 750):
    
    # Obtaining the type of the subscript
    int_495691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 750, 4), 'int')
    
    # Call to rcty(...): (line 750)
    # Processing the call arguments (line 750)
    # Getting the type of 'n1' (line 750)
    n1_495694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 31), 'n1', False)
    # Getting the type of 'x' (line 750)
    x_495695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 35), 'x', False)
    # Processing the call keyword arguments (line 750)
    kwargs_495696 = {}
    # Getting the type of 'specfun' (line 750)
    specfun_495692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 18), 'specfun', False)
    # Obtaining the member 'rcty' of a type (line 750)
    rcty_495693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 18), specfun_495692, 'rcty')
    # Calling rcty(args, kwargs) (line 750)
    rcty_call_result_495697 = invoke(stypy.reporting.localization.Localization(__file__, 750, 18), rcty_495693, *[n1_495694, x_495695], **kwargs_495696)
    
    # Obtaining the member '__getitem__' of a type (line 750)
    getitem___495698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 4), rcty_call_result_495697, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 750)
    subscript_call_result_495699 = invoke(stypy.reporting.localization.Localization(__file__, 750, 4), getitem___495698, int_495691)
    
    # Assigning a type to the variable 'tuple_var_assignment_494739' (line 750)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 4), 'tuple_var_assignment_494739', subscript_call_result_495699)
    
    # Assigning a Subscript to a Name (line 750):
    
    # Obtaining the type of the subscript
    int_495700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 750, 4), 'int')
    
    # Call to rcty(...): (line 750)
    # Processing the call arguments (line 750)
    # Getting the type of 'n1' (line 750)
    n1_495703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 31), 'n1', False)
    # Getting the type of 'x' (line 750)
    x_495704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 35), 'x', False)
    # Processing the call keyword arguments (line 750)
    kwargs_495705 = {}
    # Getting the type of 'specfun' (line 750)
    specfun_495701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 18), 'specfun', False)
    # Obtaining the member 'rcty' of a type (line 750)
    rcty_495702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 18), specfun_495701, 'rcty')
    # Calling rcty(args, kwargs) (line 750)
    rcty_call_result_495706 = invoke(stypy.reporting.localization.Localization(__file__, 750, 18), rcty_495702, *[n1_495703, x_495704], **kwargs_495705)
    
    # Obtaining the member '__getitem__' of a type (line 750)
    getitem___495707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 4), rcty_call_result_495706, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 750)
    subscript_call_result_495708 = invoke(stypy.reporting.localization.Localization(__file__, 750, 4), getitem___495707, int_495700)
    
    # Assigning a type to the variable 'tuple_var_assignment_494740' (line 750)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 4), 'tuple_var_assignment_494740', subscript_call_result_495708)
    
    # Assigning a Name to a Name (line 750):
    # Getting the type of 'tuple_var_assignment_494738' (line 750)
    tuple_var_assignment_494738_495709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 4), 'tuple_var_assignment_494738')
    # Assigning a type to the variable 'nm' (line 750)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 4), 'nm', tuple_var_assignment_494738_495709)
    
    # Assigning a Name to a Name (line 750):
    # Getting the type of 'tuple_var_assignment_494739' (line 750)
    tuple_var_assignment_494739_495710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 4), 'tuple_var_assignment_494739')
    # Assigning a type to the variable 'jn' (line 750)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 8), 'jn', tuple_var_assignment_494739_495710)
    
    # Assigning a Name to a Name (line 750):
    # Getting the type of 'tuple_var_assignment_494740' (line 750)
    tuple_var_assignment_494740_495711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 4), 'tuple_var_assignment_494740')
    # Assigning a type to the variable 'jnp' (line 750)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 12), 'jnp', tuple_var_assignment_494740_495711)
    
    # Obtaining an instance of the builtin type 'tuple' (line 751)
    tuple_495712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 751)
    # Adding element type (line 751)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 751)
    n_495713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 16), 'n')
    int_495714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 18), 'int')
    # Applying the binary operator '+' (line 751)
    result_add_495715 = python_operator(stypy.reporting.localization.Localization(__file__, 751, 16), '+', n_495713, int_495714)
    
    slice_495716 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 751, 11), None, result_add_495715, None)
    # Getting the type of 'jn' (line 751)
    jn_495717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 11), 'jn')
    # Obtaining the member '__getitem__' of a type (line 751)
    getitem___495718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 11), jn_495717, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 751)
    subscript_call_result_495719 = invoke(stypy.reporting.localization.Localization(__file__, 751, 11), getitem___495718, slice_495716)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 751, 11), tuple_495712, subscript_call_result_495719)
    # Adding element type (line 751)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 751)
    n_495720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 29), 'n')
    int_495721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 31), 'int')
    # Applying the binary operator '+' (line 751)
    result_add_495722 = python_operator(stypy.reporting.localization.Localization(__file__, 751, 29), '+', n_495720, int_495721)
    
    slice_495723 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 751, 23), None, result_add_495722, None)
    # Getting the type of 'jnp' (line 751)
    jnp_495724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 23), 'jnp')
    # Obtaining the member '__getitem__' of a type (line 751)
    getitem___495725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 23), jnp_495724, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 751)
    subscript_call_result_495726 = invoke(stypy.reporting.localization.Localization(__file__, 751, 23), getitem___495725, slice_495723)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 751, 11), tuple_495712, subscript_call_result_495726)
    
    # Assigning a type to the variable 'stypy_return_type' (line 751)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 4), 'stypy_return_type', tuple_495712)
    
    # ################# End of 'riccati_yn(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'riccati_yn' in the type store
    # Getting the type of 'stypy_return_type' (line 702)
    stypy_return_type_495727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495727)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'riccati_yn'
    return stypy_return_type_495727

# Assigning a type to the variable 'riccati_yn' (line 702)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 702, 0), 'riccati_yn', riccati_yn)

@norecursion
def erfinv(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'erfinv'
    module_type_store = module_type_store.open_function_context('erfinv', 754, 0, False)
    
    # Passed parameters checking function
    erfinv.stypy_localization = localization
    erfinv.stypy_type_of_self = None
    erfinv.stypy_type_store = module_type_store
    erfinv.stypy_function_name = 'erfinv'
    erfinv.stypy_param_names_list = ['y']
    erfinv.stypy_varargs_param_name = None
    erfinv.stypy_kwargs_param_name = None
    erfinv.stypy_call_defaults = defaults
    erfinv.stypy_call_varargs = varargs
    erfinv.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'erfinv', ['y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'erfinv', localization, ['y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'erfinv(...)' code ##################

    str_495728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, (-1)), 'str', 'Inverse function for erf.\n    ')
    
    # Call to ndtri(...): (line 757)
    # Processing the call arguments (line 757)
    # Getting the type of 'y' (line 757)
    y_495730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 18), 'y', False)
    int_495731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 757, 20), 'int')
    # Applying the binary operator '+' (line 757)
    result_add_495732 = python_operator(stypy.reporting.localization.Localization(__file__, 757, 18), '+', y_495730, int_495731)
    
    float_495733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 757, 23), 'float')
    # Applying the binary operator 'div' (line 757)
    result_div_495734 = python_operator(stypy.reporting.localization.Localization(__file__, 757, 17), 'div', result_add_495732, float_495733)
    
    # Processing the call keyword arguments (line 757)
    kwargs_495735 = {}
    # Getting the type of 'ndtri' (line 757)
    ndtri_495729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 11), 'ndtri', False)
    # Calling ndtri(args, kwargs) (line 757)
    ndtri_call_result_495736 = invoke(stypy.reporting.localization.Localization(__file__, 757, 11), ndtri_495729, *[result_div_495734], **kwargs_495735)
    
    
    # Call to sqrt(...): (line 757)
    # Processing the call arguments (line 757)
    int_495738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 757, 33), 'int')
    # Processing the call keyword arguments (line 757)
    kwargs_495739 = {}
    # Getting the type of 'sqrt' (line 757)
    sqrt_495737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 28), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 757)
    sqrt_call_result_495740 = invoke(stypy.reporting.localization.Localization(__file__, 757, 28), sqrt_495737, *[int_495738], **kwargs_495739)
    
    # Applying the binary operator 'div' (line 757)
    result_div_495741 = python_operator(stypy.reporting.localization.Localization(__file__, 757, 11), 'div', ndtri_call_result_495736, sqrt_call_result_495740)
    
    # Assigning a type to the variable 'stypy_return_type' (line 757)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 4), 'stypy_return_type', result_div_495741)
    
    # ################# End of 'erfinv(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'erfinv' in the type store
    # Getting the type of 'stypy_return_type' (line 754)
    stypy_return_type_495742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495742)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'erfinv'
    return stypy_return_type_495742

# Assigning a type to the variable 'erfinv' (line 754)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 754, 0), 'erfinv', erfinv)

@norecursion
def erfcinv(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'erfcinv'
    module_type_store = module_type_store.open_function_context('erfcinv', 760, 0, False)
    
    # Passed parameters checking function
    erfcinv.stypy_localization = localization
    erfcinv.stypy_type_of_self = None
    erfcinv.stypy_type_store = module_type_store
    erfcinv.stypy_function_name = 'erfcinv'
    erfcinv.stypy_param_names_list = ['y']
    erfcinv.stypy_varargs_param_name = None
    erfcinv.stypy_kwargs_param_name = None
    erfcinv.stypy_call_defaults = defaults
    erfcinv.stypy_call_varargs = varargs
    erfcinv.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'erfcinv', ['y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'erfcinv', localization, ['y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'erfcinv(...)' code ##################

    str_495743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 762, (-1)), 'str', 'Inverse function for erfc.\n    ')
    
    
    # Call to ndtri(...): (line 763)
    # Processing the call arguments (line 763)
    float_495745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 763, 18), 'float')
    # Getting the type of 'y' (line 763)
    y_495746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 22), 'y', False)
    # Applying the binary operator '*' (line 763)
    result_mul_495747 = python_operator(stypy.reporting.localization.Localization(__file__, 763, 18), '*', float_495745, y_495746)
    
    # Processing the call keyword arguments (line 763)
    kwargs_495748 = {}
    # Getting the type of 'ndtri' (line 763)
    ndtri_495744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 12), 'ndtri', False)
    # Calling ndtri(args, kwargs) (line 763)
    ndtri_call_result_495749 = invoke(stypy.reporting.localization.Localization(__file__, 763, 12), ndtri_495744, *[result_mul_495747], **kwargs_495748)
    
    # Applying the 'usub' unary operator (line 763)
    result___neg___495750 = python_operator(stypy.reporting.localization.Localization(__file__, 763, 11), 'usub', ndtri_call_result_495749)
    
    
    # Call to sqrt(...): (line 763)
    # Processing the call arguments (line 763)
    int_495752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 763, 30), 'int')
    # Processing the call keyword arguments (line 763)
    kwargs_495753 = {}
    # Getting the type of 'sqrt' (line 763)
    sqrt_495751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 25), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 763)
    sqrt_call_result_495754 = invoke(stypy.reporting.localization.Localization(__file__, 763, 25), sqrt_495751, *[int_495752], **kwargs_495753)
    
    # Applying the binary operator 'div' (line 763)
    result_div_495755 = python_operator(stypy.reporting.localization.Localization(__file__, 763, 11), 'div', result___neg___495750, sqrt_call_result_495754)
    
    # Assigning a type to the variable 'stypy_return_type' (line 763)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 763, 4), 'stypy_return_type', result_div_495755)
    
    # ################# End of 'erfcinv(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'erfcinv' in the type store
    # Getting the type of 'stypy_return_type' (line 760)
    stypy_return_type_495756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495756)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'erfcinv'
    return stypy_return_type_495756

# Assigning a type to the variable 'erfcinv' (line 760)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 760, 0), 'erfcinv', erfcinv)

@norecursion
def erf_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'erf_zeros'
    module_type_store = module_type_store.open_function_context('erf_zeros', 766, 0, False)
    
    # Passed parameters checking function
    erf_zeros.stypy_localization = localization
    erf_zeros.stypy_type_of_self = None
    erf_zeros.stypy_type_store = module_type_store
    erf_zeros.stypy_function_name = 'erf_zeros'
    erf_zeros.stypy_param_names_list = ['nt']
    erf_zeros.stypy_varargs_param_name = None
    erf_zeros.stypy_kwargs_param_name = None
    erf_zeros.stypy_call_defaults = defaults
    erf_zeros.stypy_call_varargs = varargs
    erf_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'erf_zeros', ['nt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'erf_zeros', localization, ['nt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'erf_zeros(...)' code ##################

    str_495757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 775, (-1)), 'str', 'Compute nt complex zeros of error function erf(z).\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to floor(...): (line 776)
    # Processing the call arguments (line 776)
    # Getting the type of 'nt' (line 776)
    nt_495759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 14), 'nt', False)
    # Processing the call keyword arguments (line 776)
    kwargs_495760 = {}
    # Getting the type of 'floor' (line 776)
    floor_495758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 8), 'floor', False)
    # Calling floor(args, kwargs) (line 776)
    floor_call_result_495761 = invoke(stypy.reporting.localization.Localization(__file__, 776, 8), floor_495758, *[nt_495759], **kwargs_495760)
    
    # Getting the type of 'nt' (line 776)
    nt_495762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 21), 'nt')
    # Applying the binary operator '!=' (line 776)
    result_ne_495763 = python_operator(stypy.reporting.localization.Localization(__file__, 776, 8), '!=', floor_call_result_495761, nt_495762)
    
    
    # Getting the type of 'nt' (line 776)
    nt_495764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 29), 'nt')
    int_495765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 776, 35), 'int')
    # Applying the binary operator '<=' (line 776)
    result_le_495766 = python_operator(stypy.reporting.localization.Localization(__file__, 776, 29), '<=', nt_495764, int_495765)
    
    # Applying the binary operator 'or' (line 776)
    result_or_keyword_495767 = python_operator(stypy.reporting.localization.Localization(__file__, 776, 7), 'or', result_ne_495763, result_le_495766)
    
    
    # Call to isscalar(...): (line 776)
    # Processing the call arguments (line 776)
    # Getting the type of 'nt' (line 776)
    nt_495769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 54), 'nt', False)
    # Processing the call keyword arguments (line 776)
    kwargs_495770 = {}
    # Getting the type of 'isscalar' (line 776)
    isscalar_495768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 45), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 776)
    isscalar_call_result_495771 = invoke(stypy.reporting.localization.Localization(__file__, 776, 45), isscalar_495768, *[nt_495769], **kwargs_495770)
    
    # Applying the 'not' unary operator (line 776)
    result_not__495772 = python_operator(stypy.reporting.localization.Localization(__file__, 776, 41), 'not', isscalar_call_result_495771)
    
    # Applying the binary operator 'or' (line 776)
    result_or_keyword_495773 = python_operator(stypy.reporting.localization.Localization(__file__, 776, 7), 'or', result_or_keyword_495767, result_not__495772)
    
    # Testing the type of an if condition (line 776)
    if_condition_495774 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 776, 4), result_or_keyword_495773)
    # Assigning a type to the variable 'if_condition_495774' (line 776)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 776, 4), 'if_condition_495774', if_condition_495774)
    # SSA begins for if statement (line 776)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 777)
    # Processing the call arguments (line 777)
    str_495776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 777, 25), 'str', 'Argument must be positive scalar integer.')
    # Processing the call keyword arguments (line 777)
    kwargs_495777 = {}
    # Getting the type of 'ValueError' (line 777)
    ValueError_495775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 777)
    ValueError_call_result_495778 = invoke(stypy.reporting.localization.Localization(__file__, 777, 14), ValueError_495775, *[str_495776], **kwargs_495777)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 777, 8), ValueError_call_result_495778, 'raise parameter', BaseException)
    # SSA join for if statement (line 776)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to cerzo(...): (line 778)
    # Processing the call arguments (line 778)
    # Getting the type of 'nt' (line 778)
    nt_495781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 25), 'nt', False)
    # Processing the call keyword arguments (line 778)
    kwargs_495782 = {}
    # Getting the type of 'specfun' (line 778)
    specfun_495779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 11), 'specfun', False)
    # Obtaining the member 'cerzo' of a type (line 778)
    cerzo_495780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 778, 11), specfun_495779, 'cerzo')
    # Calling cerzo(args, kwargs) (line 778)
    cerzo_call_result_495783 = invoke(stypy.reporting.localization.Localization(__file__, 778, 11), cerzo_495780, *[nt_495781], **kwargs_495782)
    
    # Assigning a type to the variable 'stypy_return_type' (line 778)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 778, 4), 'stypy_return_type', cerzo_call_result_495783)
    
    # ################# End of 'erf_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'erf_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 766)
    stypy_return_type_495784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495784)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'erf_zeros'
    return stypy_return_type_495784

# Assigning a type to the variable 'erf_zeros' (line 766)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 766, 0), 'erf_zeros', erf_zeros)

@norecursion
def fresnelc_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'fresnelc_zeros'
    module_type_store = module_type_store.open_function_context('fresnelc_zeros', 781, 0, False)
    
    # Passed parameters checking function
    fresnelc_zeros.stypy_localization = localization
    fresnelc_zeros.stypy_type_of_self = None
    fresnelc_zeros.stypy_type_store = module_type_store
    fresnelc_zeros.stypy_function_name = 'fresnelc_zeros'
    fresnelc_zeros.stypy_param_names_list = ['nt']
    fresnelc_zeros.stypy_varargs_param_name = None
    fresnelc_zeros.stypy_kwargs_param_name = None
    fresnelc_zeros.stypy_call_defaults = defaults
    fresnelc_zeros.stypy_call_varargs = varargs
    fresnelc_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fresnelc_zeros', ['nt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fresnelc_zeros', localization, ['nt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fresnelc_zeros(...)' code ##################

    str_495785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 790, (-1)), 'str', 'Compute nt complex zeros of cosine Fresnel integral C(z).\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to floor(...): (line 791)
    # Processing the call arguments (line 791)
    # Getting the type of 'nt' (line 791)
    nt_495787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 14), 'nt', False)
    # Processing the call keyword arguments (line 791)
    kwargs_495788 = {}
    # Getting the type of 'floor' (line 791)
    floor_495786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 8), 'floor', False)
    # Calling floor(args, kwargs) (line 791)
    floor_call_result_495789 = invoke(stypy.reporting.localization.Localization(__file__, 791, 8), floor_495786, *[nt_495787], **kwargs_495788)
    
    # Getting the type of 'nt' (line 791)
    nt_495790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 21), 'nt')
    # Applying the binary operator '!=' (line 791)
    result_ne_495791 = python_operator(stypy.reporting.localization.Localization(__file__, 791, 8), '!=', floor_call_result_495789, nt_495790)
    
    
    # Getting the type of 'nt' (line 791)
    nt_495792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 29), 'nt')
    int_495793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 791, 35), 'int')
    # Applying the binary operator '<=' (line 791)
    result_le_495794 = python_operator(stypy.reporting.localization.Localization(__file__, 791, 29), '<=', nt_495792, int_495793)
    
    # Applying the binary operator 'or' (line 791)
    result_or_keyword_495795 = python_operator(stypy.reporting.localization.Localization(__file__, 791, 7), 'or', result_ne_495791, result_le_495794)
    
    
    # Call to isscalar(...): (line 791)
    # Processing the call arguments (line 791)
    # Getting the type of 'nt' (line 791)
    nt_495797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 54), 'nt', False)
    # Processing the call keyword arguments (line 791)
    kwargs_495798 = {}
    # Getting the type of 'isscalar' (line 791)
    isscalar_495796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 45), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 791)
    isscalar_call_result_495799 = invoke(stypy.reporting.localization.Localization(__file__, 791, 45), isscalar_495796, *[nt_495797], **kwargs_495798)
    
    # Applying the 'not' unary operator (line 791)
    result_not__495800 = python_operator(stypy.reporting.localization.Localization(__file__, 791, 41), 'not', isscalar_call_result_495799)
    
    # Applying the binary operator 'or' (line 791)
    result_or_keyword_495801 = python_operator(stypy.reporting.localization.Localization(__file__, 791, 7), 'or', result_or_keyword_495795, result_not__495800)
    
    # Testing the type of an if condition (line 791)
    if_condition_495802 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 791, 4), result_or_keyword_495801)
    # Assigning a type to the variable 'if_condition_495802' (line 791)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 791, 4), 'if_condition_495802', if_condition_495802)
    # SSA begins for if statement (line 791)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 792)
    # Processing the call arguments (line 792)
    str_495804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 25), 'str', 'Argument must be positive scalar integer.')
    # Processing the call keyword arguments (line 792)
    kwargs_495805 = {}
    # Getting the type of 'ValueError' (line 792)
    ValueError_495803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 792)
    ValueError_call_result_495806 = invoke(stypy.reporting.localization.Localization(__file__, 792, 14), ValueError_495803, *[str_495804], **kwargs_495805)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 792, 8), ValueError_call_result_495806, 'raise parameter', BaseException)
    # SSA join for if statement (line 791)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to fcszo(...): (line 793)
    # Processing the call arguments (line 793)
    int_495809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 793, 25), 'int')
    # Getting the type of 'nt' (line 793)
    nt_495810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 28), 'nt', False)
    # Processing the call keyword arguments (line 793)
    kwargs_495811 = {}
    # Getting the type of 'specfun' (line 793)
    specfun_495807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 11), 'specfun', False)
    # Obtaining the member 'fcszo' of a type (line 793)
    fcszo_495808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 11), specfun_495807, 'fcszo')
    # Calling fcszo(args, kwargs) (line 793)
    fcszo_call_result_495812 = invoke(stypy.reporting.localization.Localization(__file__, 793, 11), fcszo_495808, *[int_495809, nt_495810], **kwargs_495811)
    
    # Assigning a type to the variable 'stypy_return_type' (line 793)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 793, 4), 'stypy_return_type', fcszo_call_result_495812)
    
    # ################# End of 'fresnelc_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fresnelc_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 781)
    stypy_return_type_495813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495813)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fresnelc_zeros'
    return stypy_return_type_495813

# Assigning a type to the variable 'fresnelc_zeros' (line 781)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 781, 0), 'fresnelc_zeros', fresnelc_zeros)

@norecursion
def fresnels_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'fresnels_zeros'
    module_type_store = module_type_store.open_function_context('fresnels_zeros', 796, 0, False)
    
    # Passed parameters checking function
    fresnels_zeros.stypy_localization = localization
    fresnels_zeros.stypy_type_of_self = None
    fresnels_zeros.stypy_type_store = module_type_store
    fresnels_zeros.stypy_function_name = 'fresnels_zeros'
    fresnels_zeros.stypy_param_names_list = ['nt']
    fresnels_zeros.stypy_varargs_param_name = None
    fresnels_zeros.stypy_kwargs_param_name = None
    fresnels_zeros.stypy_call_defaults = defaults
    fresnels_zeros.stypy_call_varargs = varargs
    fresnels_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fresnels_zeros', ['nt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fresnels_zeros', localization, ['nt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fresnels_zeros(...)' code ##################

    str_495814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 805, (-1)), 'str', 'Compute nt complex zeros of sine Fresnel integral S(z).\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to floor(...): (line 806)
    # Processing the call arguments (line 806)
    # Getting the type of 'nt' (line 806)
    nt_495816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 14), 'nt', False)
    # Processing the call keyword arguments (line 806)
    kwargs_495817 = {}
    # Getting the type of 'floor' (line 806)
    floor_495815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 8), 'floor', False)
    # Calling floor(args, kwargs) (line 806)
    floor_call_result_495818 = invoke(stypy.reporting.localization.Localization(__file__, 806, 8), floor_495815, *[nt_495816], **kwargs_495817)
    
    # Getting the type of 'nt' (line 806)
    nt_495819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 21), 'nt')
    # Applying the binary operator '!=' (line 806)
    result_ne_495820 = python_operator(stypy.reporting.localization.Localization(__file__, 806, 8), '!=', floor_call_result_495818, nt_495819)
    
    
    # Getting the type of 'nt' (line 806)
    nt_495821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 29), 'nt')
    int_495822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 806, 35), 'int')
    # Applying the binary operator '<=' (line 806)
    result_le_495823 = python_operator(stypy.reporting.localization.Localization(__file__, 806, 29), '<=', nt_495821, int_495822)
    
    # Applying the binary operator 'or' (line 806)
    result_or_keyword_495824 = python_operator(stypy.reporting.localization.Localization(__file__, 806, 7), 'or', result_ne_495820, result_le_495823)
    
    
    # Call to isscalar(...): (line 806)
    # Processing the call arguments (line 806)
    # Getting the type of 'nt' (line 806)
    nt_495826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 54), 'nt', False)
    # Processing the call keyword arguments (line 806)
    kwargs_495827 = {}
    # Getting the type of 'isscalar' (line 806)
    isscalar_495825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 45), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 806)
    isscalar_call_result_495828 = invoke(stypy.reporting.localization.Localization(__file__, 806, 45), isscalar_495825, *[nt_495826], **kwargs_495827)
    
    # Applying the 'not' unary operator (line 806)
    result_not__495829 = python_operator(stypy.reporting.localization.Localization(__file__, 806, 41), 'not', isscalar_call_result_495828)
    
    # Applying the binary operator 'or' (line 806)
    result_or_keyword_495830 = python_operator(stypy.reporting.localization.Localization(__file__, 806, 7), 'or', result_or_keyword_495824, result_not__495829)
    
    # Testing the type of an if condition (line 806)
    if_condition_495831 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 806, 4), result_or_keyword_495830)
    # Assigning a type to the variable 'if_condition_495831' (line 806)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 806, 4), 'if_condition_495831', if_condition_495831)
    # SSA begins for if statement (line 806)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 807)
    # Processing the call arguments (line 807)
    str_495833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 807, 25), 'str', 'Argument must be positive scalar integer.')
    # Processing the call keyword arguments (line 807)
    kwargs_495834 = {}
    # Getting the type of 'ValueError' (line 807)
    ValueError_495832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 807)
    ValueError_call_result_495835 = invoke(stypy.reporting.localization.Localization(__file__, 807, 14), ValueError_495832, *[str_495833], **kwargs_495834)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 807, 8), ValueError_call_result_495835, 'raise parameter', BaseException)
    # SSA join for if statement (line 806)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to fcszo(...): (line 808)
    # Processing the call arguments (line 808)
    int_495838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 25), 'int')
    # Getting the type of 'nt' (line 808)
    nt_495839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 28), 'nt', False)
    # Processing the call keyword arguments (line 808)
    kwargs_495840 = {}
    # Getting the type of 'specfun' (line 808)
    specfun_495836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 11), 'specfun', False)
    # Obtaining the member 'fcszo' of a type (line 808)
    fcszo_495837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 11), specfun_495836, 'fcszo')
    # Calling fcszo(args, kwargs) (line 808)
    fcszo_call_result_495841 = invoke(stypy.reporting.localization.Localization(__file__, 808, 11), fcszo_495837, *[int_495838, nt_495839], **kwargs_495840)
    
    # Assigning a type to the variable 'stypy_return_type' (line 808)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 808, 4), 'stypy_return_type', fcszo_call_result_495841)
    
    # ################# End of 'fresnels_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fresnels_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 796)
    stypy_return_type_495842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495842)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fresnels_zeros'
    return stypy_return_type_495842

# Assigning a type to the variable 'fresnels_zeros' (line 796)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 0), 'fresnels_zeros', fresnels_zeros)

@norecursion
def fresnel_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'fresnel_zeros'
    module_type_store = module_type_store.open_function_context('fresnel_zeros', 811, 0, False)
    
    # Passed parameters checking function
    fresnel_zeros.stypy_localization = localization
    fresnel_zeros.stypy_type_of_self = None
    fresnel_zeros.stypy_type_store = module_type_store
    fresnel_zeros.stypy_function_name = 'fresnel_zeros'
    fresnel_zeros.stypy_param_names_list = ['nt']
    fresnel_zeros.stypy_varargs_param_name = None
    fresnel_zeros.stypy_kwargs_param_name = None
    fresnel_zeros.stypy_call_defaults = defaults
    fresnel_zeros.stypy_call_varargs = varargs
    fresnel_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fresnel_zeros', ['nt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fresnel_zeros', localization, ['nt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fresnel_zeros(...)' code ##################

    str_495843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 820, (-1)), 'str', 'Compute nt complex zeros of sine and cosine Fresnel integrals S(z) and C(z).\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to floor(...): (line 821)
    # Processing the call arguments (line 821)
    # Getting the type of 'nt' (line 821)
    nt_495845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 14), 'nt', False)
    # Processing the call keyword arguments (line 821)
    kwargs_495846 = {}
    # Getting the type of 'floor' (line 821)
    floor_495844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 8), 'floor', False)
    # Calling floor(args, kwargs) (line 821)
    floor_call_result_495847 = invoke(stypy.reporting.localization.Localization(__file__, 821, 8), floor_495844, *[nt_495845], **kwargs_495846)
    
    # Getting the type of 'nt' (line 821)
    nt_495848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 21), 'nt')
    # Applying the binary operator '!=' (line 821)
    result_ne_495849 = python_operator(stypy.reporting.localization.Localization(__file__, 821, 8), '!=', floor_call_result_495847, nt_495848)
    
    
    # Getting the type of 'nt' (line 821)
    nt_495850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 29), 'nt')
    int_495851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 821, 35), 'int')
    # Applying the binary operator '<=' (line 821)
    result_le_495852 = python_operator(stypy.reporting.localization.Localization(__file__, 821, 29), '<=', nt_495850, int_495851)
    
    # Applying the binary operator 'or' (line 821)
    result_or_keyword_495853 = python_operator(stypy.reporting.localization.Localization(__file__, 821, 7), 'or', result_ne_495849, result_le_495852)
    
    
    # Call to isscalar(...): (line 821)
    # Processing the call arguments (line 821)
    # Getting the type of 'nt' (line 821)
    nt_495855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 54), 'nt', False)
    # Processing the call keyword arguments (line 821)
    kwargs_495856 = {}
    # Getting the type of 'isscalar' (line 821)
    isscalar_495854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 45), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 821)
    isscalar_call_result_495857 = invoke(stypy.reporting.localization.Localization(__file__, 821, 45), isscalar_495854, *[nt_495855], **kwargs_495856)
    
    # Applying the 'not' unary operator (line 821)
    result_not__495858 = python_operator(stypy.reporting.localization.Localization(__file__, 821, 41), 'not', isscalar_call_result_495857)
    
    # Applying the binary operator 'or' (line 821)
    result_or_keyword_495859 = python_operator(stypy.reporting.localization.Localization(__file__, 821, 7), 'or', result_or_keyword_495853, result_not__495858)
    
    # Testing the type of an if condition (line 821)
    if_condition_495860 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 821, 4), result_or_keyword_495859)
    # Assigning a type to the variable 'if_condition_495860' (line 821)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 821, 4), 'if_condition_495860', if_condition_495860)
    # SSA begins for if statement (line 821)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 822)
    # Processing the call arguments (line 822)
    str_495862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 25), 'str', 'Argument must be positive scalar integer.')
    # Processing the call keyword arguments (line 822)
    kwargs_495863 = {}
    # Getting the type of 'ValueError' (line 822)
    ValueError_495861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 822)
    ValueError_call_result_495864 = invoke(stypy.reporting.localization.Localization(__file__, 822, 14), ValueError_495861, *[str_495862], **kwargs_495863)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 822, 8), ValueError_call_result_495864, 'raise parameter', BaseException)
    # SSA join for if statement (line 821)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 823)
    tuple_495865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 823, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 823)
    # Adding element type (line 823)
    
    # Call to fcszo(...): (line 823)
    # Processing the call arguments (line 823)
    int_495868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 823, 25), 'int')
    # Getting the type of 'nt' (line 823)
    nt_495869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 28), 'nt', False)
    # Processing the call keyword arguments (line 823)
    kwargs_495870 = {}
    # Getting the type of 'specfun' (line 823)
    specfun_495866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 11), 'specfun', False)
    # Obtaining the member 'fcszo' of a type (line 823)
    fcszo_495867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 823, 11), specfun_495866, 'fcszo')
    # Calling fcszo(args, kwargs) (line 823)
    fcszo_call_result_495871 = invoke(stypy.reporting.localization.Localization(__file__, 823, 11), fcszo_495867, *[int_495868, nt_495869], **kwargs_495870)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 823, 11), tuple_495865, fcszo_call_result_495871)
    # Adding element type (line 823)
    
    # Call to fcszo(...): (line 823)
    # Processing the call arguments (line 823)
    int_495874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 823, 47), 'int')
    # Getting the type of 'nt' (line 823)
    nt_495875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 50), 'nt', False)
    # Processing the call keyword arguments (line 823)
    kwargs_495876 = {}
    # Getting the type of 'specfun' (line 823)
    specfun_495872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 33), 'specfun', False)
    # Obtaining the member 'fcszo' of a type (line 823)
    fcszo_495873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 823, 33), specfun_495872, 'fcszo')
    # Calling fcszo(args, kwargs) (line 823)
    fcszo_call_result_495877 = invoke(stypy.reporting.localization.Localization(__file__, 823, 33), fcszo_495873, *[int_495874, nt_495875], **kwargs_495876)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 823, 11), tuple_495865, fcszo_call_result_495877)
    
    # Assigning a type to the variable 'stypy_return_type' (line 823)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 823, 4), 'stypy_return_type', tuple_495865)
    
    # ################# End of 'fresnel_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fresnel_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 811)
    stypy_return_type_495878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495878)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fresnel_zeros'
    return stypy_return_type_495878

# Assigning a type to the variable 'fresnel_zeros' (line 811)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 811, 0), 'fresnel_zeros', fresnel_zeros)

@norecursion
def assoc_laguerre(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_495879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 27), 'float')
    defaults = [float_495879]
    # Create a new context for function 'assoc_laguerre'
    module_type_store = module_type_store.open_function_context('assoc_laguerre', 826, 0, False)
    
    # Passed parameters checking function
    assoc_laguerre.stypy_localization = localization
    assoc_laguerre.stypy_type_of_self = None
    assoc_laguerre.stypy_type_store = module_type_store
    assoc_laguerre.stypy_function_name = 'assoc_laguerre'
    assoc_laguerre.stypy_param_names_list = ['x', 'n', 'k']
    assoc_laguerre.stypy_varargs_param_name = None
    assoc_laguerre.stypy_kwargs_param_name = None
    assoc_laguerre.stypy_call_defaults = defaults
    assoc_laguerre.stypy_call_varargs = varargs
    assoc_laguerre.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'assoc_laguerre', ['x', 'n', 'k'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'assoc_laguerre', localization, ['x', 'n', 'k'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'assoc_laguerre(...)' code ##################

    str_495880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 837, (-1)), 'str', 'Compute the generalized (associated) Laguerre polynomial of degree n and order k.\n\n    The polynomial :math:`L^{(k)}_n(x)` is orthogonal over ``[0, inf)``,\n    with weighting function ``exp(-x) * x**k`` with ``k > -1``.\n\n    Notes\n    -----\n    `assoc_laguerre` is a simple wrapper around `eval_genlaguerre`, with\n    reversed argument order ``(x, n, k=0.0) --> (n, k, x)``.\n\n    ')
    
    # Call to eval_genlaguerre(...): (line 838)
    # Processing the call arguments (line 838)
    # Getting the type of 'n' (line 838)
    n_495883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 39), 'n', False)
    # Getting the type of 'k' (line 838)
    k_495884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 42), 'k', False)
    # Getting the type of 'x' (line 838)
    x_495885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 45), 'x', False)
    # Processing the call keyword arguments (line 838)
    kwargs_495886 = {}
    # Getting the type of 'orthogonal' (line 838)
    orthogonal_495881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 11), 'orthogonal', False)
    # Obtaining the member 'eval_genlaguerre' of a type (line 838)
    eval_genlaguerre_495882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 11), orthogonal_495881, 'eval_genlaguerre')
    # Calling eval_genlaguerre(args, kwargs) (line 838)
    eval_genlaguerre_call_result_495887 = invoke(stypy.reporting.localization.Localization(__file__, 838, 11), eval_genlaguerre_495882, *[n_495883, k_495884, x_495885], **kwargs_495886)
    
    # Assigning a type to the variable 'stypy_return_type' (line 838)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 838, 4), 'stypy_return_type', eval_genlaguerre_call_result_495887)
    
    # ################# End of 'assoc_laguerre(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'assoc_laguerre' in the type store
    # Getting the type of 'stypy_return_type' (line 826)
    stypy_return_type_495888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495888)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'assoc_laguerre'
    return stypy_return_type_495888

# Assigning a type to the variable 'assoc_laguerre' (line 826)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 0), 'assoc_laguerre', assoc_laguerre)

# Assigning a Name to a Name (line 840):

# Assigning a Name to a Name (line 840):
# Getting the type of 'psi' (line 840)
psi_495889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 10), 'psi')
# Assigning a type to the variable 'digamma' (line 840)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 840, 0), 'digamma', psi_495889)

@norecursion
def polygamma(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'polygamma'
    module_type_store = module_type_store.open_function_context('polygamma', 843, 0, False)
    
    # Passed parameters checking function
    polygamma.stypy_localization = localization
    polygamma.stypy_type_of_self = None
    polygamma.stypy_type_store = module_type_store
    polygamma.stypy_function_name = 'polygamma'
    polygamma.stypy_param_names_list = ['n', 'x']
    polygamma.stypy_varargs_param_name = None
    polygamma.stypy_kwargs_param_name = None
    polygamma.stypy_call_defaults = defaults
    polygamma.stypy_call_varargs = varargs
    polygamma.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'polygamma', ['n', 'x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'polygamma', localization, ['n', 'x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'polygamma(...)' code ##################

    str_495890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 869, (-1)), 'str', 'Polygamma function n.\n\n    This is the nth derivative of the digamma (psi) function.\n\n    Parameters\n    ----------\n    n : array_like of int\n        The order of the derivative of `psi`.\n    x : array_like\n        Where to evaluate the polygamma function.\n\n    Returns\n    -------\n    polygamma : ndarray\n        The result.\n\n    Examples\n    --------\n    >>> from scipy import special\n    >>> x = [2, 3, 25.5]\n    >>> special.polygamma(1, x)\n    array([ 0.64493407,  0.39493407,  0.03999467])\n    >>> special.polygamma(0, x) == special.psi(x)\n    array([ True,  True,  True], dtype=bool)\n\n    ')
    
    # Assigning a Tuple to a Tuple (line 870):
    
    # Assigning a Call to a Name (line 870):
    
    # Call to asarray(...): (line 870)
    # Processing the call arguments (line 870)
    # Getting the type of 'n' (line 870)
    n_495892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 19), 'n', False)
    # Processing the call keyword arguments (line 870)
    kwargs_495893 = {}
    # Getting the type of 'asarray' (line 870)
    asarray_495891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 11), 'asarray', False)
    # Calling asarray(args, kwargs) (line 870)
    asarray_call_result_495894 = invoke(stypy.reporting.localization.Localization(__file__, 870, 11), asarray_495891, *[n_495892], **kwargs_495893)
    
    # Assigning a type to the variable 'tuple_assignment_494741' (line 870)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 870, 4), 'tuple_assignment_494741', asarray_call_result_495894)
    
    # Assigning a Call to a Name (line 870):
    
    # Call to asarray(...): (line 870)
    # Processing the call arguments (line 870)
    # Getting the type of 'x' (line 870)
    x_495896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 31), 'x', False)
    # Processing the call keyword arguments (line 870)
    kwargs_495897 = {}
    # Getting the type of 'asarray' (line 870)
    asarray_495895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 23), 'asarray', False)
    # Calling asarray(args, kwargs) (line 870)
    asarray_call_result_495898 = invoke(stypy.reporting.localization.Localization(__file__, 870, 23), asarray_495895, *[x_495896], **kwargs_495897)
    
    # Assigning a type to the variable 'tuple_assignment_494742' (line 870)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 870, 4), 'tuple_assignment_494742', asarray_call_result_495898)
    
    # Assigning a Name to a Name (line 870):
    # Getting the type of 'tuple_assignment_494741' (line 870)
    tuple_assignment_494741_495899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 4), 'tuple_assignment_494741')
    # Assigning a type to the variable 'n' (line 870)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 870, 4), 'n', tuple_assignment_494741_495899)
    
    # Assigning a Name to a Name (line 870):
    # Getting the type of 'tuple_assignment_494742' (line 870)
    tuple_assignment_494742_495900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 4), 'tuple_assignment_494742')
    # Assigning a type to the variable 'x' (line 870)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 870, 7), 'x', tuple_assignment_494742_495900)
    
    # Assigning a BinOp to a Name (line 871):
    
    # Assigning a BinOp to a Name (line 871):
    float_495901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 871, 12), 'float')
    # Getting the type of 'n' (line 871)
    n_495902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 20), 'n')
    int_495903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 871, 22), 'int')
    # Applying the binary operator '+' (line 871)
    result_add_495904 = python_operator(stypy.reporting.localization.Localization(__file__, 871, 20), '+', n_495902, int_495903)
    
    # Applying the binary operator '**' (line 871)
    result_pow_495905 = python_operator(stypy.reporting.localization.Localization(__file__, 871, 11), '**', float_495901, result_add_495904)
    
    
    # Call to gamma(...): (line 871)
    # Processing the call arguments (line 871)
    # Getting the type of 'n' (line 871)
    n_495907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 33), 'n', False)
    float_495908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 871, 35), 'float')
    # Applying the binary operator '+' (line 871)
    result_add_495909 = python_operator(stypy.reporting.localization.Localization(__file__, 871, 33), '+', n_495907, float_495908)
    
    # Processing the call keyword arguments (line 871)
    kwargs_495910 = {}
    # Getting the type of 'gamma' (line 871)
    gamma_495906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 27), 'gamma', False)
    # Calling gamma(args, kwargs) (line 871)
    gamma_call_result_495911 = invoke(stypy.reporting.localization.Localization(__file__, 871, 27), gamma_495906, *[result_add_495909], **kwargs_495910)
    
    # Applying the binary operator '*' (line 871)
    result_mul_495912 = python_operator(stypy.reporting.localization.Localization(__file__, 871, 11), '*', result_pow_495905, gamma_call_result_495911)
    
    
    # Call to zeta(...): (line 871)
    # Processing the call arguments (line 871)
    # Getting the type of 'n' (line 871)
    n_495914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 47), 'n', False)
    int_495915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 871, 49), 'int')
    # Applying the binary operator '+' (line 871)
    result_add_495916 = python_operator(stypy.reporting.localization.Localization(__file__, 871, 47), '+', n_495914, int_495915)
    
    # Getting the type of 'x' (line 871)
    x_495917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 52), 'x', False)
    # Processing the call keyword arguments (line 871)
    kwargs_495918 = {}
    # Getting the type of 'zeta' (line 871)
    zeta_495913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 42), 'zeta', False)
    # Calling zeta(args, kwargs) (line 871)
    zeta_call_result_495919 = invoke(stypy.reporting.localization.Localization(__file__, 871, 42), zeta_495913, *[result_add_495916, x_495917], **kwargs_495918)
    
    # Applying the binary operator '*' (line 871)
    result_mul_495920 = python_operator(stypy.reporting.localization.Localization(__file__, 871, 40), '*', result_mul_495912, zeta_call_result_495919)
    
    # Assigning a type to the variable 'fac2' (line 871)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 4), 'fac2', result_mul_495920)
    
    # Call to where(...): (line 872)
    # Processing the call arguments (line 872)
    
    # Getting the type of 'n' (line 872)
    n_495922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 17), 'n', False)
    int_495923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 872, 22), 'int')
    # Applying the binary operator '==' (line 872)
    result_eq_495924 = python_operator(stypy.reporting.localization.Localization(__file__, 872, 17), '==', n_495922, int_495923)
    
    
    # Call to psi(...): (line 872)
    # Processing the call arguments (line 872)
    # Getting the type of 'x' (line 872)
    x_495926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 29), 'x', False)
    # Processing the call keyword arguments (line 872)
    kwargs_495927 = {}
    # Getting the type of 'psi' (line 872)
    psi_495925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 25), 'psi', False)
    # Calling psi(args, kwargs) (line 872)
    psi_call_result_495928 = invoke(stypy.reporting.localization.Localization(__file__, 872, 25), psi_495925, *[x_495926], **kwargs_495927)
    
    # Getting the type of 'fac2' (line 872)
    fac2_495929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 33), 'fac2', False)
    # Processing the call keyword arguments (line 872)
    kwargs_495930 = {}
    # Getting the type of 'where' (line 872)
    where_495921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 11), 'where', False)
    # Calling where(args, kwargs) (line 872)
    where_call_result_495931 = invoke(stypy.reporting.localization.Localization(__file__, 872, 11), where_495921, *[result_eq_495924, psi_call_result_495928, fac2_495929], **kwargs_495930)
    
    # Assigning a type to the variable 'stypy_return_type' (line 872)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 872, 4), 'stypy_return_type', where_call_result_495931)
    
    # ################# End of 'polygamma(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'polygamma' in the type store
    # Getting the type of 'stypy_return_type' (line 843)
    stypy_return_type_495932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_495932)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'polygamma'
    return stypy_return_type_495932

# Assigning a type to the variable 'polygamma' (line 843)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 843, 0), 'polygamma', polygamma)

@norecursion
def mathieu_even_coef(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'mathieu_even_coef'
    module_type_store = module_type_store.open_function_context('mathieu_even_coef', 875, 0, False)
    
    # Passed parameters checking function
    mathieu_even_coef.stypy_localization = localization
    mathieu_even_coef.stypy_type_of_self = None
    mathieu_even_coef.stypy_type_store = module_type_store
    mathieu_even_coef.stypy_function_name = 'mathieu_even_coef'
    mathieu_even_coef.stypy_param_names_list = ['m', 'q']
    mathieu_even_coef.stypy_varargs_param_name = None
    mathieu_even_coef.stypy_kwargs_param_name = None
    mathieu_even_coef.stypy_call_defaults = defaults
    mathieu_even_coef.stypy_call_varargs = varargs
    mathieu_even_coef.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'mathieu_even_coef', ['m', 'q'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'mathieu_even_coef', localization, ['m', 'q'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'mathieu_even_coef(...)' code ##################

    str_495933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 909, (-1)), 'str', 'Fourier coefficients for even Mathieu and modified Mathieu functions.\n\n    The Fourier series of the even solutions of the Mathieu differential\n    equation are of the form\n\n    .. math:: \\mathrm{ce}_{2n}(z, q) = \\sum_{k=0}^{\\infty} A_{(2n)}^{(2k)} \\cos 2kz\n\n    .. math:: \\mathrm{ce}_{2n+1}(z, q) = \\sum_{k=0}^{\\infty} A_{(2n+1)}^{(2k+1)} \\cos (2k+1)z\n\n    This function returns the coefficients :math:`A_{(2n)}^{(2k)}` for even\n    input m=2n, and the coefficients :math:`A_{(2n+1)}^{(2k+1)}` for odd input\n    m=2n+1.\n\n    Parameters\n    ----------\n    m : int\n        Order of Mathieu functions.  Must be non-negative.\n    q : float (>=0)\n        Parameter of Mathieu functions.  Must be non-negative.\n\n    Returns\n    -------\n    Ak : ndarray\n        Even or odd Fourier coefficients, corresponding to even or odd m.\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n    .. [2] NIST Digital Library of Mathematical Functions\n           http://dlmf.nist.gov/28.4#i\n\n    ')
    
    
    
    # Evaluating a boolean operation
    
    # Call to isscalar(...): (line 910)
    # Processing the call arguments (line 910)
    # Getting the type of 'm' (line 910)
    m_495935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 21), 'm', False)
    # Processing the call keyword arguments (line 910)
    kwargs_495936 = {}
    # Getting the type of 'isscalar' (line 910)
    isscalar_495934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 12), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 910)
    isscalar_call_result_495937 = invoke(stypy.reporting.localization.Localization(__file__, 910, 12), isscalar_495934, *[m_495935], **kwargs_495936)
    
    
    # Call to isscalar(...): (line 910)
    # Processing the call arguments (line 910)
    # Getting the type of 'q' (line 910)
    q_495939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 37), 'q', False)
    # Processing the call keyword arguments (line 910)
    kwargs_495940 = {}
    # Getting the type of 'isscalar' (line 910)
    isscalar_495938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 28), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 910)
    isscalar_call_result_495941 = invoke(stypy.reporting.localization.Localization(__file__, 910, 28), isscalar_495938, *[q_495939], **kwargs_495940)
    
    # Applying the binary operator 'and' (line 910)
    result_and_keyword_495942 = python_operator(stypy.reporting.localization.Localization(__file__, 910, 12), 'and', isscalar_call_result_495937, isscalar_call_result_495941)
    
    # Applying the 'not' unary operator (line 910)
    result_not__495943 = python_operator(stypy.reporting.localization.Localization(__file__, 910, 7), 'not', result_and_keyword_495942)
    
    # Testing the type of an if condition (line 910)
    if_condition_495944 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 910, 4), result_not__495943)
    # Assigning a type to the variable 'if_condition_495944' (line 910)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 910, 4), 'if_condition_495944', if_condition_495944)
    # SSA begins for if statement (line 910)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 911)
    # Processing the call arguments (line 911)
    str_495946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 911, 25), 'str', 'm and q must be scalars.')
    # Processing the call keyword arguments (line 911)
    kwargs_495947 = {}
    # Getting the type of 'ValueError' (line 911)
    ValueError_495945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 911)
    ValueError_call_result_495948 = invoke(stypy.reporting.localization.Localization(__file__, 911, 14), ValueError_495945, *[str_495946], **kwargs_495947)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 911, 8), ValueError_call_result_495948, 'raise parameter', BaseException)
    # SSA join for if statement (line 910)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'q' (line 912)
    q_495949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 8), 'q')
    int_495950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 912, 12), 'int')
    # Applying the binary operator '<' (line 912)
    result_lt_495951 = python_operator(stypy.reporting.localization.Localization(__file__, 912, 8), '<', q_495949, int_495950)
    
    # Testing the type of an if condition (line 912)
    if_condition_495952 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 912, 4), result_lt_495951)
    # Assigning a type to the variable 'if_condition_495952' (line 912)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 4), 'if_condition_495952', if_condition_495952)
    # SSA begins for if statement (line 912)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 913)
    # Processing the call arguments (line 913)
    str_495954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 913, 25), 'str', 'q >=0')
    # Processing the call keyword arguments (line 913)
    kwargs_495955 = {}
    # Getting the type of 'ValueError' (line 913)
    ValueError_495953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 913)
    ValueError_call_result_495956 = invoke(stypy.reporting.localization.Localization(__file__, 913, 14), ValueError_495953, *[str_495954], **kwargs_495955)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 913, 8), ValueError_call_result_495956, 'raise parameter', BaseException)
    # SSA join for if statement (line 912)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'm' (line 914)
    m_495957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 8), 'm')
    
    # Call to floor(...): (line 914)
    # Processing the call arguments (line 914)
    # Getting the type of 'm' (line 914)
    m_495959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 19), 'm', False)
    # Processing the call keyword arguments (line 914)
    kwargs_495960 = {}
    # Getting the type of 'floor' (line 914)
    floor_495958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 13), 'floor', False)
    # Calling floor(args, kwargs) (line 914)
    floor_call_result_495961 = invoke(stypy.reporting.localization.Localization(__file__, 914, 13), floor_495958, *[m_495959], **kwargs_495960)
    
    # Applying the binary operator '!=' (line 914)
    result_ne_495962 = python_operator(stypy.reporting.localization.Localization(__file__, 914, 8), '!=', m_495957, floor_call_result_495961)
    
    
    # Getting the type of 'm' (line 914)
    m_495963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 27), 'm')
    int_495964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 914, 31), 'int')
    # Applying the binary operator '<' (line 914)
    result_lt_495965 = python_operator(stypy.reporting.localization.Localization(__file__, 914, 27), '<', m_495963, int_495964)
    
    # Applying the binary operator 'or' (line 914)
    result_or_keyword_495966 = python_operator(stypy.reporting.localization.Localization(__file__, 914, 7), 'or', result_ne_495962, result_lt_495965)
    
    # Testing the type of an if condition (line 914)
    if_condition_495967 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 914, 4), result_or_keyword_495966)
    # Assigning a type to the variable 'if_condition_495967' (line 914)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 914, 4), 'if_condition_495967', if_condition_495967)
    # SSA begins for if statement (line 914)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 915)
    # Processing the call arguments (line 915)
    str_495969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 915, 25), 'str', 'm must be an integer >=0.')
    # Processing the call keyword arguments (line 915)
    kwargs_495970 = {}
    # Getting the type of 'ValueError' (line 915)
    ValueError_495968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 915)
    ValueError_call_result_495971 = invoke(stypy.reporting.localization.Localization(__file__, 915, 14), ValueError_495968, *[str_495969], **kwargs_495970)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 915, 8), ValueError_call_result_495971, 'raise parameter', BaseException)
    # SSA join for if statement (line 914)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'q' (line 917)
    q_495972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 8), 'q')
    int_495973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 917, 13), 'int')
    # Applying the binary operator '<=' (line 917)
    result_le_495974 = python_operator(stypy.reporting.localization.Localization(__file__, 917, 8), '<=', q_495972, int_495973)
    
    # Testing the type of an if condition (line 917)
    if_condition_495975 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 917, 4), result_le_495974)
    # Assigning a type to the variable 'if_condition_495975' (line 917)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 917, 4), 'if_condition_495975', if_condition_495975)
    # SSA begins for if statement (line 917)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 918):
    
    # Assigning a BinOp to a Name (line 918):
    float_495976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 918, 13), 'float')
    float_495977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 918, 19), 'float')
    
    # Call to sqrt(...): (line 918)
    # Processing the call arguments (line 918)
    # Getting the type of 'q' (line 918)
    q_495979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 29), 'q', False)
    # Processing the call keyword arguments (line 918)
    kwargs_495980 = {}
    # Getting the type of 'sqrt' (line 918)
    sqrt_495978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 24), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 918)
    sqrt_call_result_495981 = invoke(stypy.reporting.localization.Localization(__file__, 918, 24), sqrt_495978, *[q_495979], **kwargs_495980)
    
    # Applying the binary operator '*' (line 918)
    result_mul_495982 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 19), '*', float_495977, sqrt_call_result_495981)
    
    # Applying the binary operator '+' (line 918)
    result_add_495983 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 13), '+', float_495976, result_mul_495982)
    
    float_495984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 918, 34), 'float')
    # Getting the type of 'q' (line 918)
    q_495985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 40), 'q')
    # Applying the binary operator '*' (line 918)
    result_mul_495986 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 34), '*', float_495984, q_495985)
    
    # Applying the binary operator '-' (line 918)
    result_sub_495987 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 32), '-', result_add_495983, result_mul_495986)
    
    float_495988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 918, 44), 'float')
    
    # Call to sqrt(...): (line 918)
    # Processing the call arguments (line 918)
    # Getting the type of 'q' (line 918)
    q_495990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 54), 'q', False)
    # Processing the call keyword arguments (line 918)
    kwargs_495991 = {}
    # Getting the type of 'sqrt' (line 918)
    sqrt_495989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 49), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 918)
    sqrt_call_result_495992 = invoke(stypy.reporting.localization.Localization(__file__, 918, 49), sqrt_495989, *[q_495990], **kwargs_495991)
    
    # Applying the binary operator '*' (line 918)
    result_mul_495993 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 44), '*', float_495988, sqrt_call_result_495992)
    
    # Getting the type of 'q' (line 918)
    q_495994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 57), 'q')
    # Applying the binary operator '*' (line 918)
    result_mul_495995 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 56), '*', result_mul_495993, q_495994)
    
    # Applying the binary operator '+' (line 918)
    result_add_495996 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 42), '+', result_sub_495987, result_mul_495995)
    
    # Assigning a type to the variable 'qm' (line 918)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 918, 8), 'qm', result_add_495996)
    # SSA branch for the else part of an if statement (line 917)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 920):
    
    # Assigning a BinOp to a Name (line 920):
    float_495997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 920, 13), 'float')
    float_495998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 920, 20), 'float')
    
    # Call to sqrt(...): (line 920)
    # Processing the call arguments (line 920)
    # Getting the type of 'q' (line 920)
    q_496000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 29), 'q', False)
    # Processing the call keyword arguments (line 920)
    kwargs_496001 = {}
    # Getting the type of 'sqrt' (line 920)
    sqrt_495999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 24), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 920)
    sqrt_call_result_496002 = invoke(stypy.reporting.localization.Localization(__file__, 920, 24), sqrt_495999, *[q_496000], **kwargs_496001)
    
    # Applying the binary operator '*' (line 920)
    result_mul_496003 = python_operator(stypy.reporting.localization.Localization(__file__, 920, 20), '*', float_495998, sqrt_call_result_496002)
    
    # Applying the binary operator '+' (line 920)
    result_add_496004 = python_operator(stypy.reporting.localization.Localization(__file__, 920, 13), '+', float_495997, result_mul_496003)
    
    float_496005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 920, 34), 'float')
    # Getting the type of 'q' (line 920)
    q_496006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 39), 'q')
    # Applying the binary operator '*' (line 920)
    result_mul_496007 = python_operator(stypy.reporting.localization.Localization(__file__, 920, 34), '*', float_496005, q_496006)
    
    # Applying the binary operator '-' (line 920)
    result_sub_496008 = python_operator(stypy.reporting.localization.Localization(__file__, 920, 32), '-', result_add_496004, result_mul_496007)
    
    float_496009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 920, 43), 'float')
    
    # Call to sqrt(...): (line 920)
    # Processing the call arguments (line 920)
    # Getting the type of 'q' (line 920)
    q_496011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 54), 'q', False)
    # Processing the call keyword arguments (line 920)
    kwargs_496012 = {}
    # Getting the type of 'sqrt' (line 920)
    sqrt_496010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 49), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 920)
    sqrt_call_result_496013 = invoke(stypy.reporting.localization.Localization(__file__, 920, 49), sqrt_496010, *[q_496011], **kwargs_496012)
    
    # Applying the binary operator '*' (line 920)
    result_mul_496014 = python_operator(stypy.reporting.localization.Localization(__file__, 920, 43), '*', float_496009, sqrt_call_result_496013)
    
    # Getting the type of 'q' (line 920)
    q_496015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 57), 'q')
    # Applying the binary operator '*' (line 920)
    result_mul_496016 = python_operator(stypy.reporting.localization.Localization(__file__, 920, 56), '*', result_mul_496014, q_496015)
    
    # Applying the binary operator '+' (line 920)
    result_add_496017 = python_operator(stypy.reporting.localization.Localization(__file__, 920, 41), '+', result_sub_496008, result_mul_496016)
    
    # Assigning a type to the variable 'qm' (line 920)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 8), 'qm', result_add_496017)
    # SSA join for if statement (line 917)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 921):
    
    # Assigning a Call to a Name (line 921):
    
    # Call to int(...): (line 921)
    # Processing the call arguments (line 921)
    # Getting the type of 'qm' (line 921)
    qm_496019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 13), 'qm', False)
    float_496020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 921, 18), 'float')
    # Getting the type of 'm' (line 921)
    m_496021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 22), 'm', False)
    # Applying the binary operator '*' (line 921)
    result_mul_496022 = python_operator(stypy.reporting.localization.Localization(__file__, 921, 18), '*', float_496020, m_496021)
    
    # Applying the binary operator '+' (line 921)
    result_add_496023 = python_operator(stypy.reporting.localization.Localization(__file__, 921, 13), '+', qm_496019, result_mul_496022)
    
    # Processing the call keyword arguments (line 921)
    kwargs_496024 = {}
    # Getting the type of 'int' (line 921)
    int_496018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 9), 'int', False)
    # Calling int(args, kwargs) (line 921)
    int_call_result_496025 = invoke(stypy.reporting.localization.Localization(__file__, 921, 9), int_496018, *[result_add_496023], **kwargs_496024)
    
    # Assigning a type to the variable 'km' (line 921)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 921, 4), 'km', int_call_result_496025)
    
    
    # Getting the type of 'km' (line 922)
    km_496026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 7), 'km')
    int_496027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 922, 12), 'int')
    # Applying the binary operator '>' (line 922)
    result_gt_496028 = python_operator(stypy.reporting.localization.Localization(__file__, 922, 7), '>', km_496026, int_496027)
    
    # Testing the type of an if condition (line 922)
    if_condition_496029 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 922, 4), result_gt_496028)
    # Assigning a type to the variable 'if_condition_496029' (line 922)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 922, 4), 'if_condition_496029', if_condition_496029)
    # SSA begins for if statement (line 922)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 923)
    # Processing the call arguments (line 923)
    str_496031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 923, 14), 'str', 'Warning, too many predicted coefficients.')
    # Processing the call keyword arguments (line 923)
    kwargs_496032 = {}
    # Getting the type of 'print' (line 923)
    print_496030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 8), 'print', False)
    # Calling print(args, kwargs) (line 923)
    print_call_result_496033 = invoke(stypy.reporting.localization.Localization(__file__, 923, 8), print_496030, *[str_496031], **kwargs_496032)
    
    # SSA join for if statement (line 922)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 924):
    
    # Assigning a Num to a Name (line 924):
    int_496034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 924, 9), 'int')
    # Assigning a type to the variable 'kd' (line 924)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 4), 'kd', int_496034)
    
    # Assigning a Call to a Name (line 925):
    
    # Assigning a Call to a Name (line 925):
    
    # Call to int(...): (line 925)
    # Processing the call arguments (line 925)
    
    # Call to floor(...): (line 925)
    # Processing the call arguments (line 925)
    # Getting the type of 'm' (line 925)
    m_496037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 18), 'm', False)
    # Processing the call keyword arguments (line 925)
    kwargs_496038 = {}
    # Getting the type of 'floor' (line 925)
    floor_496036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 12), 'floor', False)
    # Calling floor(args, kwargs) (line 925)
    floor_call_result_496039 = invoke(stypy.reporting.localization.Localization(__file__, 925, 12), floor_496036, *[m_496037], **kwargs_496038)
    
    # Processing the call keyword arguments (line 925)
    kwargs_496040 = {}
    # Getting the type of 'int' (line 925)
    int_496035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 8), 'int', False)
    # Calling int(args, kwargs) (line 925)
    int_call_result_496041 = invoke(stypy.reporting.localization.Localization(__file__, 925, 8), int_496035, *[floor_call_result_496039], **kwargs_496040)
    
    # Assigning a type to the variable 'm' (line 925)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 925, 4), 'm', int_call_result_496041)
    
    # Getting the type of 'm' (line 926)
    m_496042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 7), 'm')
    int_496043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 926, 11), 'int')
    # Applying the binary operator '%' (line 926)
    result_mod_496044 = python_operator(stypy.reporting.localization.Localization(__file__, 926, 7), '%', m_496042, int_496043)
    
    # Testing the type of an if condition (line 926)
    if_condition_496045 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 926, 4), result_mod_496044)
    # Assigning a type to the variable 'if_condition_496045' (line 926)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 926, 4), 'if_condition_496045', if_condition_496045)
    # SSA begins for if statement (line 926)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 927):
    
    # Assigning a Num to a Name (line 927):
    int_496046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 927, 13), 'int')
    # Assigning a type to the variable 'kd' (line 927)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 927, 8), 'kd', int_496046)
    # SSA join for if statement (line 926)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 929):
    
    # Assigning a Call to a Name (line 929):
    
    # Call to mathieu_a(...): (line 929)
    # Processing the call arguments (line 929)
    # Getting the type of 'm' (line 929)
    m_496048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 18), 'm', False)
    # Getting the type of 'q' (line 929)
    q_496049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 21), 'q', False)
    # Processing the call keyword arguments (line 929)
    kwargs_496050 = {}
    # Getting the type of 'mathieu_a' (line 929)
    mathieu_a_496047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 8), 'mathieu_a', False)
    # Calling mathieu_a(args, kwargs) (line 929)
    mathieu_a_call_result_496051 = invoke(stypy.reporting.localization.Localization(__file__, 929, 8), mathieu_a_496047, *[m_496048, q_496049], **kwargs_496050)
    
    # Assigning a type to the variable 'a' (line 929)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 4), 'a', mathieu_a_call_result_496051)
    
    # Assigning a Call to a Name (line 930):
    
    # Assigning a Call to a Name (line 930):
    
    # Call to fcoef(...): (line 930)
    # Processing the call arguments (line 930)
    # Getting the type of 'kd' (line 930)
    kd_496054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 23), 'kd', False)
    # Getting the type of 'm' (line 930)
    m_496055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 27), 'm', False)
    # Getting the type of 'q' (line 930)
    q_496056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 30), 'q', False)
    # Getting the type of 'a' (line 930)
    a_496057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 33), 'a', False)
    # Processing the call keyword arguments (line 930)
    kwargs_496058 = {}
    # Getting the type of 'specfun' (line 930)
    specfun_496052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 9), 'specfun', False)
    # Obtaining the member 'fcoef' of a type (line 930)
    fcoef_496053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 930, 9), specfun_496052, 'fcoef')
    # Calling fcoef(args, kwargs) (line 930)
    fcoef_call_result_496059 = invoke(stypy.reporting.localization.Localization(__file__, 930, 9), fcoef_496053, *[kd_496054, m_496055, q_496056, a_496057], **kwargs_496058)
    
    # Assigning a type to the variable 'fc' (line 930)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 930, 4), 'fc', fcoef_call_result_496059)
    
    # Obtaining the type of the subscript
    # Getting the type of 'km' (line 931)
    km_496060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 15), 'km')
    slice_496061 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 931, 11), None, km_496060, None)
    # Getting the type of 'fc' (line 931)
    fc_496062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 11), 'fc')
    # Obtaining the member '__getitem__' of a type (line 931)
    getitem___496063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 931, 11), fc_496062, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 931)
    subscript_call_result_496064 = invoke(stypy.reporting.localization.Localization(__file__, 931, 11), getitem___496063, slice_496061)
    
    # Assigning a type to the variable 'stypy_return_type' (line 931)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 931, 4), 'stypy_return_type', subscript_call_result_496064)
    
    # ################# End of 'mathieu_even_coef(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'mathieu_even_coef' in the type store
    # Getting the type of 'stypy_return_type' (line 875)
    stypy_return_type_496065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_496065)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'mathieu_even_coef'
    return stypy_return_type_496065

# Assigning a type to the variable 'mathieu_even_coef' (line 875)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 875, 0), 'mathieu_even_coef', mathieu_even_coef)

@norecursion
def mathieu_odd_coef(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'mathieu_odd_coef'
    module_type_store = module_type_store.open_function_context('mathieu_odd_coef', 934, 0, False)
    
    # Passed parameters checking function
    mathieu_odd_coef.stypy_localization = localization
    mathieu_odd_coef.stypy_type_of_self = None
    mathieu_odd_coef.stypy_type_store = module_type_store
    mathieu_odd_coef.stypy_function_name = 'mathieu_odd_coef'
    mathieu_odd_coef.stypy_param_names_list = ['m', 'q']
    mathieu_odd_coef.stypy_varargs_param_name = None
    mathieu_odd_coef.stypy_kwargs_param_name = None
    mathieu_odd_coef.stypy_call_defaults = defaults
    mathieu_odd_coef.stypy_call_varargs = varargs
    mathieu_odd_coef.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'mathieu_odd_coef', ['m', 'q'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'mathieu_odd_coef', localization, ['m', 'q'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'mathieu_odd_coef(...)' code ##################

    str_496066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 966, (-1)), 'str', 'Fourier coefficients for even Mathieu and modified Mathieu functions.\n\n    The Fourier series of the odd solutions of the Mathieu differential\n    equation are of the form\n\n    .. math:: \\mathrm{se}_{2n+1}(z, q) = \\sum_{k=0}^{\\infty} B_{(2n+1)}^{(2k+1)} \\sin (2k+1)z\n\n    .. math:: \\mathrm{se}_{2n+2}(z, q) = \\sum_{k=0}^{\\infty} B_{(2n+2)}^{(2k+2)} \\sin (2k+2)z\n\n    This function returns the coefficients :math:`B_{(2n+2)}^{(2k+2)}` for even\n    input m=2n+2, and the coefficients :math:`B_{(2n+1)}^{(2k+1)}` for odd\n    input m=2n+1.\n\n    Parameters\n    ----------\n    m : int\n        Order of Mathieu functions.  Must be non-negative.\n    q : float (>=0)\n        Parameter of Mathieu functions.  Must be non-negative.\n\n    Returns\n    -------\n    Bk : ndarray\n        Even or odd Fourier coefficients, corresponding to even or odd m.\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    
    # Evaluating a boolean operation
    
    # Call to isscalar(...): (line 967)
    # Processing the call arguments (line 967)
    # Getting the type of 'm' (line 967)
    m_496068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 21), 'm', False)
    # Processing the call keyword arguments (line 967)
    kwargs_496069 = {}
    # Getting the type of 'isscalar' (line 967)
    isscalar_496067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 12), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 967)
    isscalar_call_result_496070 = invoke(stypy.reporting.localization.Localization(__file__, 967, 12), isscalar_496067, *[m_496068], **kwargs_496069)
    
    
    # Call to isscalar(...): (line 967)
    # Processing the call arguments (line 967)
    # Getting the type of 'q' (line 967)
    q_496072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 37), 'q', False)
    # Processing the call keyword arguments (line 967)
    kwargs_496073 = {}
    # Getting the type of 'isscalar' (line 967)
    isscalar_496071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 28), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 967)
    isscalar_call_result_496074 = invoke(stypy.reporting.localization.Localization(__file__, 967, 28), isscalar_496071, *[q_496072], **kwargs_496073)
    
    # Applying the binary operator 'and' (line 967)
    result_and_keyword_496075 = python_operator(stypy.reporting.localization.Localization(__file__, 967, 12), 'and', isscalar_call_result_496070, isscalar_call_result_496074)
    
    # Applying the 'not' unary operator (line 967)
    result_not__496076 = python_operator(stypy.reporting.localization.Localization(__file__, 967, 7), 'not', result_and_keyword_496075)
    
    # Testing the type of an if condition (line 967)
    if_condition_496077 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 967, 4), result_not__496076)
    # Assigning a type to the variable 'if_condition_496077' (line 967)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 967, 4), 'if_condition_496077', if_condition_496077)
    # SSA begins for if statement (line 967)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 968)
    # Processing the call arguments (line 968)
    str_496079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 968, 25), 'str', 'm and q must be scalars.')
    # Processing the call keyword arguments (line 968)
    kwargs_496080 = {}
    # Getting the type of 'ValueError' (line 968)
    ValueError_496078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 968)
    ValueError_call_result_496081 = invoke(stypy.reporting.localization.Localization(__file__, 968, 14), ValueError_496078, *[str_496079], **kwargs_496080)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 968, 8), ValueError_call_result_496081, 'raise parameter', BaseException)
    # SSA join for if statement (line 967)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'q' (line 969)
    q_496082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 8), 'q')
    int_496083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 969, 12), 'int')
    # Applying the binary operator '<' (line 969)
    result_lt_496084 = python_operator(stypy.reporting.localization.Localization(__file__, 969, 8), '<', q_496082, int_496083)
    
    # Testing the type of an if condition (line 969)
    if_condition_496085 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 969, 4), result_lt_496084)
    # Assigning a type to the variable 'if_condition_496085' (line 969)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 969, 4), 'if_condition_496085', if_condition_496085)
    # SSA begins for if statement (line 969)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 970)
    # Processing the call arguments (line 970)
    str_496087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 970, 25), 'str', 'q >=0')
    # Processing the call keyword arguments (line 970)
    kwargs_496088 = {}
    # Getting the type of 'ValueError' (line 970)
    ValueError_496086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 970)
    ValueError_call_result_496089 = invoke(stypy.reporting.localization.Localization(__file__, 970, 14), ValueError_496086, *[str_496087], **kwargs_496088)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 970, 8), ValueError_call_result_496089, 'raise parameter', BaseException)
    # SSA join for if statement (line 969)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'm' (line 971)
    m_496090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'm')
    
    # Call to floor(...): (line 971)
    # Processing the call arguments (line 971)
    # Getting the type of 'm' (line 971)
    m_496092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 19), 'm', False)
    # Processing the call keyword arguments (line 971)
    kwargs_496093 = {}
    # Getting the type of 'floor' (line 971)
    floor_496091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 13), 'floor', False)
    # Calling floor(args, kwargs) (line 971)
    floor_call_result_496094 = invoke(stypy.reporting.localization.Localization(__file__, 971, 13), floor_496091, *[m_496092], **kwargs_496093)
    
    # Applying the binary operator '!=' (line 971)
    result_ne_496095 = python_operator(stypy.reporting.localization.Localization(__file__, 971, 8), '!=', m_496090, floor_call_result_496094)
    
    
    # Getting the type of 'm' (line 971)
    m_496096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 27), 'm')
    int_496097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 971, 32), 'int')
    # Applying the binary operator '<=' (line 971)
    result_le_496098 = python_operator(stypy.reporting.localization.Localization(__file__, 971, 27), '<=', m_496096, int_496097)
    
    # Applying the binary operator 'or' (line 971)
    result_or_keyword_496099 = python_operator(stypy.reporting.localization.Localization(__file__, 971, 7), 'or', result_ne_496095, result_le_496098)
    
    # Testing the type of an if condition (line 971)
    if_condition_496100 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 971, 4), result_or_keyword_496099)
    # Assigning a type to the variable 'if_condition_496100' (line 971)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 971, 4), 'if_condition_496100', if_condition_496100)
    # SSA begins for if statement (line 971)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 972)
    # Processing the call arguments (line 972)
    str_496102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 972, 25), 'str', 'm must be an integer > 0')
    # Processing the call keyword arguments (line 972)
    kwargs_496103 = {}
    # Getting the type of 'ValueError' (line 972)
    ValueError_496101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 972)
    ValueError_call_result_496104 = invoke(stypy.reporting.localization.Localization(__file__, 972, 14), ValueError_496101, *[str_496102], **kwargs_496103)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 972, 8), ValueError_call_result_496104, 'raise parameter', BaseException)
    # SSA join for if statement (line 971)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'q' (line 974)
    q_496105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 8), 'q')
    int_496106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 974, 13), 'int')
    # Applying the binary operator '<=' (line 974)
    result_le_496107 = python_operator(stypy.reporting.localization.Localization(__file__, 974, 8), '<=', q_496105, int_496106)
    
    # Testing the type of an if condition (line 974)
    if_condition_496108 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 974, 4), result_le_496107)
    # Assigning a type to the variable 'if_condition_496108' (line 974)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 974, 4), 'if_condition_496108', if_condition_496108)
    # SSA begins for if statement (line 974)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 975):
    
    # Assigning a BinOp to a Name (line 975):
    float_496109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 975, 13), 'float')
    float_496110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 975, 19), 'float')
    
    # Call to sqrt(...): (line 975)
    # Processing the call arguments (line 975)
    # Getting the type of 'q' (line 975)
    q_496112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 29), 'q', False)
    # Processing the call keyword arguments (line 975)
    kwargs_496113 = {}
    # Getting the type of 'sqrt' (line 975)
    sqrt_496111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 24), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 975)
    sqrt_call_result_496114 = invoke(stypy.reporting.localization.Localization(__file__, 975, 24), sqrt_496111, *[q_496112], **kwargs_496113)
    
    # Applying the binary operator '*' (line 975)
    result_mul_496115 = python_operator(stypy.reporting.localization.Localization(__file__, 975, 19), '*', float_496110, sqrt_call_result_496114)
    
    # Applying the binary operator '+' (line 975)
    result_add_496116 = python_operator(stypy.reporting.localization.Localization(__file__, 975, 13), '+', float_496109, result_mul_496115)
    
    float_496117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 975, 34), 'float')
    # Getting the type of 'q' (line 975)
    q_496118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 40), 'q')
    # Applying the binary operator '*' (line 975)
    result_mul_496119 = python_operator(stypy.reporting.localization.Localization(__file__, 975, 34), '*', float_496117, q_496118)
    
    # Applying the binary operator '-' (line 975)
    result_sub_496120 = python_operator(stypy.reporting.localization.Localization(__file__, 975, 32), '-', result_add_496116, result_mul_496119)
    
    float_496121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 975, 44), 'float')
    
    # Call to sqrt(...): (line 975)
    # Processing the call arguments (line 975)
    # Getting the type of 'q' (line 975)
    q_496123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 54), 'q', False)
    # Processing the call keyword arguments (line 975)
    kwargs_496124 = {}
    # Getting the type of 'sqrt' (line 975)
    sqrt_496122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 49), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 975)
    sqrt_call_result_496125 = invoke(stypy.reporting.localization.Localization(__file__, 975, 49), sqrt_496122, *[q_496123], **kwargs_496124)
    
    # Applying the binary operator '*' (line 975)
    result_mul_496126 = python_operator(stypy.reporting.localization.Localization(__file__, 975, 44), '*', float_496121, sqrt_call_result_496125)
    
    # Getting the type of 'q' (line 975)
    q_496127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 57), 'q')
    # Applying the binary operator '*' (line 975)
    result_mul_496128 = python_operator(stypy.reporting.localization.Localization(__file__, 975, 56), '*', result_mul_496126, q_496127)
    
    # Applying the binary operator '+' (line 975)
    result_add_496129 = python_operator(stypy.reporting.localization.Localization(__file__, 975, 42), '+', result_sub_496120, result_mul_496128)
    
    # Assigning a type to the variable 'qm' (line 975)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 975, 8), 'qm', result_add_496129)
    # SSA branch for the else part of an if statement (line 974)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 977):
    
    # Assigning a BinOp to a Name (line 977):
    float_496130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 977, 13), 'float')
    float_496131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 977, 20), 'float')
    
    # Call to sqrt(...): (line 977)
    # Processing the call arguments (line 977)
    # Getting the type of 'q' (line 977)
    q_496133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 29), 'q', False)
    # Processing the call keyword arguments (line 977)
    kwargs_496134 = {}
    # Getting the type of 'sqrt' (line 977)
    sqrt_496132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 24), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 977)
    sqrt_call_result_496135 = invoke(stypy.reporting.localization.Localization(__file__, 977, 24), sqrt_496132, *[q_496133], **kwargs_496134)
    
    # Applying the binary operator '*' (line 977)
    result_mul_496136 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 20), '*', float_496131, sqrt_call_result_496135)
    
    # Applying the binary operator '+' (line 977)
    result_add_496137 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 13), '+', float_496130, result_mul_496136)
    
    float_496138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 977, 34), 'float')
    # Getting the type of 'q' (line 977)
    q_496139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 39), 'q')
    # Applying the binary operator '*' (line 977)
    result_mul_496140 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 34), '*', float_496138, q_496139)
    
    # Applying the binary operator '-' (line 977)
    result_sub_496141 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 32), '-', result_add_496137, result_mul_496140)
    
    float_496142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 977, 43), 'float')
    
    # Call to sqrt(...): (line 977)
    # Processing the call arguments (line 977)
    # Getting the type of 'q' (line 977)
    q_496144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 54), 'q', False)
    # Processing the call keyword arguments (line 977)
    kwargs_496145 = {}
    # Getting the type of 'sqrt' (line 977)
    sqrt_496143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 49), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 977)
    sqrt_call_result_496146 = invoke(stypy.reporting.localization.Localization(__file__, 977, 49), sqrt_496143, *[q_496144], **kwargs_496145)
    
    # Applying the binary operator '*' (line 977)
    result_mul_496147 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 43), '*', float_496142, sqrt_call_result_496146)
    
    # Getting the type of 'q' (line 977)
    q_496148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 57), 'q')
    # Applying the binary operator '*' (line 977)
    result_mul_496149 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 56), '*', result_mul_496147, q_496148)
    
    # Applying the binary operator '+' (line 977)
    result_add_496150 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 41), '+', result_sub_496141, result_mul_496149)
    
    # Assigning a type to the variable 'qm' (line 977)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 977, 8), 'qm', result_add_496150)
    # SSA join for if statement (line 974)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 978):
    
    # Assigning a Call to a Name (line 978):
    
    # Call to int(...): (line 978)
    # Processing the call arguments (line 978)
    # Getting the type of 'qm' (line 978)
    qm_496152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 13), 'qm', False)
    float_496153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 978, 18), 'float')
    # Getting the type of 'm' (line 978)
    m_496154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 22), 'm', False)
    # Applying the binary operator '*' (line 978)
    result_mul_496155 = python_operator(stypy.reporting.localization.Localization(__file__, 978, 18), '*', float_496153, m_496154)
    
    # Applying the binary operator '+' (line 978)
    result_add_496156 = python_operator(stypy.reporting.localization.Localization(__file__, 978, 13), '+', qm_496152, result_mul_496155)
    
    # Processing the call keyword arguments (line 978)
    kwargs_496157 = {}
    # Getting the type of 'int' (line 978)
    int_496151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 9), 'int', False)
    # Calling int(args, kwargs) (line 978)
    int_call_result_496158 = invoke(stypy.reporting.localization.Localization(__file__, 978, 9), int_496151, *[result_add_496156], **kwargs_496157)
    
    # Assigning a type to the variable 'km' (line 978)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 978, 4), 'km', int_call_result_496158)
    
    
    # Getting the type of 'km' (line 979)
    km_496159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 7), 'km')
    int_496160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 979, 12), 'int')
    # Applying the binary operator '>' (line 979)
    result_gt_496161 = python_operator(stypy.reporting.localization.Localization(__file__, 979, 7), '>', km_496159, int_496160)
    
    # Testing the type of an if condition (line 979)
    if_condition_496162 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 979, 4), result_gt_496161)
    # Assigning a type to the variable 'if_condition_496162' (line 979)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 979, 4), 'if_condition_496162', if_condition_496162)
    # SSA begins for if statement (line 979)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to print(...): (line 980)
    # Processing the call arguments (line 980)
    str_496164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 980, 14), 'str', 'Warning, too many predicted coefficients.')
    # Processing the call keyword arguments (line 980)
    kwargs_496165 = {}
    # Getting the type of 'print' (line 980)
    print_496163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 8), 'print', False)
    # Calling print(args, kwargs) (line 980)
    print_call_result_496166 = invoke(stypy.reporting.localization.Localization(__file__, 980, 8), print_496163, *[str_496164], **kwargs_496165)
    
    # SSA join for if statement (line 979)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 981):
    
    # Assigning a Num to a Name (line 981):
    int_496167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 981, 9), 'int')
    # Assigning a type to the variable 'kd' (line 981)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 981, 4), 'kd', int_496167)
    
    # Assigning a Call to a Name (line 982):
    
    # Assigning a Call to a Name (line 982):
    
    # Call to int(...): (line 982)
    # Processing the call arguments (line 982)
    
    # Call to floor(...): (line 982)
    # Processing the call arguments (line 982)
    # Getting the type of 'm' (line 982)
    m_496170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 18), 'm', False)
    # Processing the call keyword arguments (line 982)
    kwargs_496171 = {}
    # Getting the type of 'floor' (line 982)
    floor_496169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 12), 'floor', False)
    # Calling floor(args, kwargs) (line 982)
    floor_call_result_496172 = invoke(stypy.reporting.localization.Localization(__file__, 982, 12), floor_496169, *[m_496170], **kwargs_496171)
    
    # Processing the call keyword arguments (line 982)
    kwargs_496173 = {}
    # Getting the type of 'int' (line 982)
    int_496168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 8), 'int', False)
    # Calling int(args, kwargs) (line 982)
    int_call_result_496174 = invoke(stypy.reporting.localization.Localization(__file__, 982, 8), int_496168, *[floor_call_result_496172], **kwargs_496173)
    
    # Assigning a type to the variable 'm' (line 982)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 4), 'm', int_call_result_496174)
    
    # Getting the type of 'm' (line 983)
    m_496175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 7), 'm')
    int_496176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 983, 11), 'int')
    # Applying the binary operator '%' (line 983)
    result_mod_496177 = python_operator(stypy.reporting.localization.Localization(__file__, 983, 7), '%', m_496175, int_496176)
    
    # Testing the type of an if condition (line 983)
    if_condition_496178 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 983, 4), result_mod_496177)
    # Assigning a type to the variable 'if_condition_496178' (line 983)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 983, 4), 'if_condition_496178', if_condition_496178)
    # SSA begins for if statement (line 983)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 984):
    
    # Assigning a Num to a Name (line 984):
    int_496179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 984, 13), 'int')
    # Assigning a type to the variable 'kd' (line 984)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 984, 8), 'kd', int_496179)
    # SSA join for if statement (line 983)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 986):
    
    # Assigning a Call to a Name (line 986):
    
    # Call to mathieu_b(...): (line 986)
    # Processing the call arguments (line 986)
    # Getting the type of 'm' (line 986)
    m_496181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 18), 'm', False)
    # Getting the type of 'q' (line 986)
    q_496182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 21), 'q', False)
    # Processing the call keyword arguments (line 986)
    kwargs_496183 = {}
    # Getting the type of 'mathieu_b' (line 986)
    mathieu_b_496180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 8), 'mathieu_b', False)
    # Calling mathieu_b(args, kwargs) (line 986)
    mathieu_b_call_result_496184 = invoke(stypy.reporting.localization.Localization(__file__, 986, 8), mathieu_b_496180, *[m_496181, q_496182], **kwargs_496183)
    
    # Assigning a type to the variable 'b' (line 986)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 986, 4), 'b', mathieu_b_call_result_496184)
    
    # Assigning a Call to a Name (line 987):
    
    # Assigning a Call to a Name (line 987):
    
    # Call to fcoef(...): (line 987)
    # Processing the call arguments (line 987)
    # Getting the type of 'kd' (line 987)
    kd_496187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 23), 'kd', False)
    # Getting the type of 'm' (line 987)
    m_496188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 27), 'm', False)
    # Getting the type of 'q' (line 987)
    q_496189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 30), 'q', False)
    # Getting the type of 'b' (line 987)
    b_496190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 33), 'b', False)
    # Processing the call keyword arguments (line 987)
    kwargs_496191 = {}
    # Getting the type of 'specfun' (line 987)
    specfun_496185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 9), 'specfun', False)
    # Obtaining the member 'fcoef' of a type (line 987)
    fcoef_496186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 987, 9), specfun_496185, 'fcoef')
    # Calling fcoef(args, kwargs) (line 987)
    fcoef_call_result_496192 = invoke(stypy.reporting.localization.Localization(__file__, 987, 9), fcoef_496186, *[kd_496187, m_496188, q_496189, b_496190], **kwargs_496191)
    
    # Assigning a type to the variable 'fc' (line 987)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 987, 4), 'fc', fcoef_call_result_496192)
    
    # Obtaining the type of the subscript
    # Getting the type of 'km' (line 988)
    km_496193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 15), 'km')
    slice_496194 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 988, 11), None, km_496193, None)
    # Getting the type of 'fc' (line 988)
    fc_496195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 11), 'fc')
    # Obtaining the member '__getitem__' of a type (line 988)
    getitem___496196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 988, 11), fc_496195, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 988)
    subscript_call_result_496197 = invoke(stypy.reporting.localization.Localization(__file__, 988, 11), getitem___496196, slice_496194)
    
    # Assigning a type to the variable 'stypy_return_type' (line 988)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 988, 4), 'stypy_return_type', subscript_call_result_496197)
    
    # ################# End of 'mathieu_odd_coef(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'mathieu_odd_coef' in the type store
    # Getting the type of 'stypy_return_type' (line 934)
    stypy_return_type_496198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_496198)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'mathieu_odd_coef'
    return stypy_return_type_496198

# Assigning a type to the variable 'mathieu_odd_coef' (line 934)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 934, 0), 'mathieu_odd_coef', mathieu_odd_coef)

@norecursion
def lpmn(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'lpmn'
    module_type_store = module_type_store.open_function_context('lpmn', 991, 0, False)
    
    # Passed parameters checking function
    lpmn.stypy_localization = localization
    lpmn.stypy_type_of_self = None
    lpmn.stypy_type_store = module_type_store
    lpmn.stypy_function_name = 'lpmn'
    lpmn.stypy_param_names_list = ['m', 'n', 'z']
    lpmn.stypy_varargs_param_name = None
    lpmn.stypy_kwargs_param_name = None
    lpmn.stypy_call_defaults = defaults
    lpmn.stypy_call_varargs = varargs
    lpmn.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'lpmn', ['m', 'n', 'z'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'lpmn', localization, ['m', 'n', 'z'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'lpmn(...)' code ##################

    str_496199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1038, (-1)), 'str', 'Sequence of associated Legendre functions of the first kind.\n\n    Computes the associated Legendre function of the first kind of order m and\n    degree n, ``Pmn(z)`` = :math:`P_n^m(z)`, and its derivative, ``Pmn\'(z)``.\n    Returns two arrays of size ``(m+1, n+1)`` containing ``Pmn(z)`` and\n    ``Pmn\'(z)`` for all orders from ``0..m`` and degrees from ``0..n``.\n\n    This function takes a real argument ``z``. For complex arguments ``z``\n    use clpmn instead.\n\n    Parameters\n    ----------\n    m : int\n       ``|m| <= n``; the order of the Legendre function.\n    n : int\n       where ``n >= 0``; the degree of the Legendre function.  Often\n       called ``l`` (lower case L) in descriptions of the associated\n       Legendre function\n    z : float\n        Input value.\n\n    Returns\n    -------\n    Pmn_z : (m+1, n+1) array\n       Values for all orders 0..m and degrees 0..n\n    Pmn_d_z : (m+1, n+1) array\n       Derivatives for all orders 0..m and degrees 0..n\n\n    See Also\n    --------\n    clpmn: associated Legendre functions of the first kind for complex z\n\n    Notes\n    -----\n    In the interval (-1, 1), Ferrer\'s function of the first kind is\n    returned. The phase convention used for the intervals (1, inf)\n    and (-inf, -1) is such that the result is always real.\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n    .. [2] NIST Digital Library of Mathematical Functions\n           http://dlmf.nist.gov/14.3\n\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to isscalar(...): (line 1039)
    # Processing the call arguments (line 1039)
    # Getting the type of 'm' (line 1039)
    m_496201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 20), 'm', False)
    # Processing the call keyword arguments (line 1039)
    kwargs_496202 = {}
    # Getting the type of 'isscalar' (line 1039)
    isscalar_496200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1039)
    isscalar_call_result_496203 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 11), isscalar_496200, *[m_496201], **kwargs_496202)
    
    # Applying the 'not' unary operator (line 1039)
    result_not__496204 = python_operator(stypy.reporting.localization.Localization(__file__, 1039, 7), 'not', isscalar_call_result_496203)
    
    
    
    # Call to abs(...): (line 1039)
    # Processing the call arguments (line 1039)
    # Getting the type of 'm' (line 1039)
    m_496206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 31), 'm', False)
    # Processing the call keyword arguments (line 1039)
    kwargs_496207 = {}
    # Getting the type of 'abs' (line 1039)
    abs_496205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 27), 'abs', False)
    # Calling abs(args, kwargs) (line 1039)
    abs_call_result_496208 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 27), abs_496205, *[m_496206], **kwargs_496207)
    
    # Getting the type of 'n' (line 1039)
    n_496209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 36), 'n')
    # Applying the binary operator '>' (line 1039)
    result_gt_496210 = python_operator(stypy.reporting.localization.Localization(__file__, 1039, 27), '>', abs_call_result_496208, n_496209)
    
    # Applying the binary operator 'or' (line 1039)
    result_or_keyword_496211 = python_operator(stypy.reporting.localization.Localization(__file__, 1039, 7), 'or', result_not__496204, result_gt_496210)
    
    # Testing the type of an if condition (line 1039)
    if_condition_496212 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1039, 4), result_or_keyword_496211)
    # Assigning a type to the variable 'if_condition_496212' (line 1039)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1039, 4), 'if_condition_496212', if_condition_496212)
    # SSA begins for if statement (line 1039)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1040)
    # Processing the call arguments (line 1040)
    str_496214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 25), 'str', 'm must be <= n.')
    # Processing the call keyword arguments (line 1040)
    kwargs_496215 = {}
    # Getting the type of 'ValueError' (line 1040)
    ValueError_496213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1040)
    ValueError_call_result_496216 = invoke(stypy.reporting.localization.Localization(__file__, 1040, 14), ValueError_496213, *[str_496214], **kwargs_496215)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1040, 8), ValueError_call_result_496216, 'raise parameter', BaseException)
    # SSA join for if statement (line 1039)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    
    # Call to isscalar(...): (line 1041)
    # Processing the call arguments (line 1041)
    # Getting the type of 'n' (line 1041)
    n_496218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 20), 'n', False)
    # Processing the call keyword arguments (line 1041)
    kwargs_496219 = {}
    # Getting the type of 'isscalar' (line 1041)
    isscalar_496217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1041)
    isscalar_call_result_496220 = invoke(stypy.reporting.localization.Localization(__file__, 1041, 11), isscalar_496217, *[n_496218], **kwargs_496219)
    
    # Applying the 'not' unary operator (line 1041)
    result_not__496221 = python_operator(stypy.reporting.localization.Localization(__file__, 1041, 7), 'not', isscalar_call_result_496220)
    
    
    # Getting the type of 'n' (line 1041)
    n_496222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 27), 'n')
    int_496223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1041, 31), 'int')
    # Applying the binary operator '<' (line 1041)
    result_lt_496224 = python_operator(stypy.reporting.localization.Localization(__file__, 1041, 27), '<', n_496222, int_496223)
    
    # Applying the binary operator 'or' (line 1041)
    result_or_keyword_496225 = python_operator(stypy.reporting.localization.Localization(__file__, 1041, 7), 'or', result_not__496221, result_lt_496224)
    
    # Testing the type of an if condition (line 1041)
    if_condition_496226 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1041, 4), result_or_keyword_496225)
    # Assigning a type to the variable 'if_condition_496226' (line 1041)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1041, 4), 'if_condition_496226', if_condition_496226)
    # SSA begins for if statement (line 1041)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1042)
    # Processing the call arguments (line 1042)
    str_496228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, 25), 'str', 'n must be a non-negative integer.')
    # Processing the call keyword arguments (line 1042)
    kwargs_496229 = {}
    # Getting the type of 'ValueError' (line 1042)
    ValueError_496227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1042)
    ValueError_call_result_496230 = invoke(stypy.reporting.localization.Localization(__file__, 1042, 14), ValueError_496227, *[str_496228], **kwargs_496229)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1042, 8), ValueError_call_result_496230, 'raise parameter', BaseException)
    # SSA join for if statement (line 1041)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to isscalar(...): (line 1043)
    # Processing the call arguments (line 1043)
    # Getting the type of 'z' (line 1043)
    z_496232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 20), 'z', False)
    # Processing the call keyword arguments (line 1043)
    kwargs_496233 = {}
    # Getting the type of 'isscalar' (line 1043)
    isscalar_496231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1043)
    isscalar_call_result_496234 = invoke(stypy.reporting.localization.Localization(__file__, 1043, 11), isscalar_496231, *[z_496232], **kwargs_496233)
    
    # Applying the 'not' unary operator (line 1043)
    result_not__496235 = python_operator(stypy.reporting.localization.Localization(__file__, 1043, 7), 'not', isscalar_call_result_496234)
    
    # Testing the type of an if condition (line 1043)
    if_condition_496236 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1043, 4), result_not__496235)
    # Assigning a type to the variable 'if_condition_496236' (line 1043)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1043, 4), 'if_condition_496236', if_condition_496236)
    # SSA begins for if statement (line 1043)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1044)
    # Processing the call arguments (line 1044)
    str_496238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1044, 25), 'str', 'z must be scalar.')
    # Processing the call keyword arguments (line 1044)
    kwargs_496239 = {}
    # Getting the type of 'ValueError' (line 1044)
    ValueError_496237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1044)
    ValueError_call_result_496240 = invoke(stypy.reporting.localization.Localization(__file__, 1044, 14), ValueError_496237, *[str_496238], **kwargs_496239)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1044, 8), ValueError_call_result_496240, 'raise parameter', BaseException)
    # SSA join for if statement (line 1043)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to iscomplex(...): (line 1045)
    # Processing the call arguments (line 1045)
    # Getting the type of 'z' (line 1045)
    z_496242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 17), 'z', False)
    # Processing the call keyword arguments (line 1045)
    kwargs_496243 = {}
    # Getting the type of 'iscomplex' (line 1045)
    iscomplex_496241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 7), 'iscomplex', False)
    # Calling iscomplex(args, kwargs) (line 1045)
    iscomplex_call_result_496244 = invoke(stypy.reporting.localization.Localization(__file__, 1045, 7), iscomplex_496241, *[z_496242], **kwargs_496243)
    
    # Testing the type of an if condition (line 1045)
    if_condition_496245 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1045, 4), iscomplex_call_result_496244)
    # Assigning a type to the variable 'if_condition_496245' (line 1045)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1045, 4), 'if_condition_496245', if_condition_496245)
    # SSA begins for if statement (line 1045)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1046)
    # Processing the call arguments (line 1046)
    str_496247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 25), 'str', 'Argument must be real. Use clpmn instead.')
    # Processing the call keyword arguments (line 1046)
    kwargs_496248 = {}
    # Getting the type of 'ValueError' (line 1046)
    ValueError_496246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1046)
    ValueError_call_result_496249 = invoke(stypy.reporting.localization.Localization(__file__, 1046, 14), ValueError_496246, *[str_496247], **kwargs_496248)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1046, 8), ValueError_call_result_496249, 'raise parameter', BaseException)
    # SSA join for if statement (line 1045)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'm' (line 1047)
    m_496250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 8), 'm')
    int_496251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 12), 'int')
    # Applying the binary operator '<' (line 1047)
    result_lt_496252 = python_operator(stypy.reporting.localization.Localization(__file__, 1047, 8), '<', m_496250, int_496251)
    
    # Testing the type of an if condition (line 1047)
    if_condition_496253 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1047, 4), result_lt_496252)
    # Assigning a type to the variable 'if_condition_496253' (line 1047)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 4), 'if_condition_496253', if_condition_496253)
    # SSA begins for if statement (line 1047)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a UnaryOp to a Name (line 1048):
    
    # Assigning a UnaryOp to a Name (line 1048):
    
    # Getting the type of 'm' (line 1048)
    m_496254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 14), 'm')
    # Applying the 'usub' unary operator (line 1048)
    result___neg___496255 = python_operator(stypy.reporting.localization.Localization(__file__, 1048, 13), 'usub', m_496254)
    
    # Assigning a type to the variable 'mp' (line 1048)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1048, 8), 'mp', result___neg___496255)
    
    # Assigning a Subscript to a Tuple (line 1049):
    
    # Assigning a Subscript to a Name (line 1049):
    
    # Obtaining the type of the subscript
    int_496256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 8), 'int')
    
    # Obtaining the type of the subscript
    int_496257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 23), 'int')
    # Getting the type of 'mp' (line 1049)
    mp_496258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 25), 'mp')
    int_496259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 28), 'int')
    # Applying the binary operator '+' (line 1049)
    result_add_496260 = python_operator(stypy.reporting.localization.Localization(__file__, 1049, 25), '+', mp_496258, int_496259)
    
    slice_496261 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1049, 17), int_496257, result_add_496260, None)
    int_496262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 31), 'int')
    # Getting the type of 'n' (line 1049)
    n_496263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 33), 'n')
    int_496264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 35), 'int')
    # Applying the binary operator '+' (line 1049)
    result_add_496265 = python_operator(stypy.reporting.localization.Localization(__file__, 1049, 33), '+', n_496263, int_496264)
    
    slice_496266 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1049, 17), int_496262, result_add_496265, None)
    # Getting the type of 'mgrid' (line 1049)
    mgrid_496267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 17), 'mgrid')
    # Obtaining the member '__getitem__' of a type (line 1049)
    getitem___496268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1049, 17), mgrid_496267, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1049)
    subscript_call_result_496269 = invoke(stypy.reporting.localization.Localization(__file__, 1049, 17), getitem___496268, (slice_496261, slice_496266))
    
    # Obtaining the member '__getitem__' of a type (line 1049)
    getitem___496270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1049, 8), subscript_call_result_496269, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1049)
    subscript_call_result_496271 = invoke(stypy.reporting.localization.Localization(__file__, 1049, 8), getitem___496270, int_496256)
    
    # Assigning a type to the variable 'tuple_var_assignment_494743' (line 1049)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1049, 8), 'tuple_var_assignment_494743', subscript_call_result_496271)
    
    # Assigning a Subscript to a Name (line 1049):
    
    # Obtaining the type of the subscript
    int_496272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 8), 'int')
    
    # Obtaining the type of the subscript
    int_496273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 23), 'int')
    # Getting the type of 'mp' (line 1049)
    mp_496274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 25), 'mp')
    int_496275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 28), 'int')
    # Applying the binary operator '+' (line 1049)
    result_add_496276 = python_operator(stypy.reporting.localization.Localization(__file__, 1049, 25), '+', mp_496274, int_496275)
    
    slice_496277 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1049, 17), int_496273, result_add_496276, None)
    int_496278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 31), 'int')
    # Getting the type of 'n' (line 1049)
    n_496279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 33), 'n')
    int_496280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 35), 'int')
    # Applying the binary operator '+' (line 1049)
    result_add_496281 = python_operator(stypy.reporting.localization.Localization(__file__, 1049, 33), '+', n_496279, int_496280)
    
    slice_496282 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1049, 17), int_496278, result_add_496281, None)
    # Getting the type of 'mgrid' (line 1049)
    mgrid_496283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 17), 'mgrid')
    # Obtaining the member '__getitem__' of a type (line 1049)
    getitem___496284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1049, 17), mgrid_496283, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1049)
    subscript_call_result_496285 = invoke(stypy.reporting.localization.Localization(__file__, 1049, 17), getitem___496284, (slice_496277, slice_496282))
    
    # Obtaining the member '__getitem__' of a type (line 1049)
    getitem___496286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1049, 8), subscript_call_result_496285, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1049)
    subscript_call_result_496287 = invoke(stypy.reporting.localization.Localization(__file__, 1049, 8), getitem___496286, int_496272)
    
    # Assigning a type to the variable 'tuple_var_assignment_494744' (line 1049)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1049, 8), 'tuple_var_assignment_494744', subscript_call_result_496287)
    
    # Assigning a Name to a Name (line 1049):
    # Getting the type of 'tuple_var_assignment_494743' (line 1049)
    tuple_var_assignment_494743_496288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 8), 'tuple_var_assignment_494743')
    # Assigning a type to the variable 'mf' (line 1049)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1049, 8), 'mf', tuple_var_assignment_494743_496288)
    
    # Assigning a Name to a Name (line 1049):
    # Getting the type of 'tuple_var_assignment_494744' (line 1049)
    tuple_var_assignment_494744_496289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 8), 'tuple_var_assignment_494744')
    # Assigning a type to the variable 'nf' (line 1049)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1049, 12), 'nf', tuple_var_assignment_494744_496289)
    
    # Call to errstate(...): (line 1050)
    # Processing the call keyword arguments (line 1050)
    str_496292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1050, 33), 'str', 'ignore')
    keyword_496293 = str_496292
    kwargs_496294 = {'all': keyword_496293}
    # Getting the type of 'ufuncs' (line 1050)
    ufuncs_496290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 13), 'ufuncs', False)
    # Obtaining the member 'errstate' of a type (line 1050)
    errstate_496291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1050, 13), ufuncs_496290, 'errstate')
    # Calling errstate(args, kwargs) (line 1050)
    errstate_call_result_496295 = invoke(stypy.reporting.localization.Localization(__file__, 1050, 13), errstate_496291, *[], **kwargs_496294)
    
    with_496296 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 1050, 13), errstate_call_result_496295, 'with parameter', '__enter__', '__exit__')

    if with_496296:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 1050)
        enter___496297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1050, 13), errstate_call_result_496295, '__enter__')
        with_enter_496298 = invoke(stypy.reporting.localization.Localization(__file__, 1050, 13), enter___496297)
        
        
        
        # Call to abs(...): (line 1051)
        # Processing the call arguments (line 1051)
        # Getting the type of 'z' (line 1051)
        z_496300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 19), 'z', False)
        # Processing the call keyword arguments (line 1051)
        kwargs_496301 = {}
        # Getting the type of 'abs' (line 1051)
        abs_496299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 15), 'abs', False)
        # Calling abs(args, kwargs) (line 1051)
        abs_call_result_496302 = invoke(stypy.reporting.localization.Localization(__file__, 1051, 15), abs_496299, *[z_496300], **kwargs_496301)
        
        int_496303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1051, 24), 'int')
        # Applying the binary operator '<' (line 1051)
        result_lt_496304 = python_operator(stypy.reporting.localization.Localization(__file__, 1051, 15), '<', abs_call_result_496302, int_496303)
        
        # Testing the type of an if condition (line 1051)
        if_condition_496305 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1051, 12), result_lt_496304)
        # Assigning a type to the variable 'if_condition_496305' (line 1051)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1051, 12), 'if_condition_496305', if_condition_496305)
        # SSA begins for if statement (line 1051)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1053):
        
        # Assigning a Call to a Name (line 1053):
        
        # Call to where(...): (line 1053)
        # Processing the call arguments (line 1053)
        
        # Getting the type of 'mf' (line 1053)
        mf_496307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 31), 'mf', False)
        # Getting the type of 'nf' (line 1053)
        nf_496308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 36), 'nf', False)
        # Applying the binary operator '>' (line 1053)
        result_gt_496309 = python_operator(stypy.reporting.localization.Localization(__file__, 1053, 31), '>', mf_496307, nf_496308)
        
        float_496310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1053, 40), 'float')
        int_496311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1054, 32), 'int')
        # Getting the type of 'mf' (line 1054)
        mf_496312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 37), 'mf', False)
        # Applying the binary operator '**' (line 1054)
        result_pow_496313 = python_operator(stypy.reporting.localization.Localization(__file__, 1054, 31), '**', int_496311, mf_496312)
        
        
        # Call to gamma(...): (line 1054)
        # Processing the call arguments (line 1054)
        # Getting the type of 'nf' (line 1054)
        nf_496315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 48), 'nf', False)
        # Getting the type of 'mf' (line 1054)
        mf_496316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 51), 'mf', False)
        # Applying the binary operator '-' (line 1054)
        result_sub_496317 = python_operator(stypy.reporting.localization.Localization(__file__, 1054, 48), '-', nf_496315, mf_496316)
        
        int_496318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1054, 54), 'int')
        # Applying the binary operator '+' (line 1054)
        result_add_496319 = python_operator(stypy.reporting.localization.Localization(__file__, 1054, 53), '+', result_sub_496317, int_496318)
        
        # Processing the call keyword arguments (line 1054)
        kwargs_496320 = {}
        # Getting the type of 'gamma' (line 1054)
        gamma_496314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 42), 'gamma', False)
        # Calling gamma(args, kwargs) (line 1054)
        gamma_call_result_496321 = invoke(stypy.reporting.localization.Localization(__file__, 1054, 42), gamma_496314, *[result_add_496319], **kwargs_496320)
        
        # Applying the binary operator '*' (line 1054)
        result_mul_496322 = python_operator(stypy.reporting.localization.Localization(__file__, 1054, 31), '*', result_pow_496313, gamma_call_result_496321)
        
        
        # Call to gamma(...): (line 1054)
        # Processing the call arguments (line 1054)
        # Getting the type of 'nf' (line 1054)
        nf_496324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 65), 'nf', False)
        # Getting the type of 'mf' (line 1054)
        mf_496325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 68), 'mf', False)
        # Applying the binary operator '+' (line 1054)
        result_add_496326 = python_operator(stypy.reporting.localization.Localization(__file__, 1054, 65), '+', nf_496324, mf_496325)
        
        int_496327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1054, 71), 'int')
        # Applying the binary operator '+' (line 1054)
        result_add_496328 = python_operator(stypy.reporting.localization.Localization(__file__, 1054, 70), '+', result_add_496326, int_496327)
        
        # Processing the call keyword arguments (line 1054)
        kwargs_496329 = {}
        # Getting the type of 'gamma' (line 1054)
        gamma_496323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 59), 'gamma', False)
        # Calling gamma(args, kwargs) (line 1054)
        gamma_call_result_496330 = invoke(stypy.reporting.localization.Localization(__file__, 1054, 59), gamma_496323, *[result_add_496328], **kwargs_496329)
        
        # Applying the binary operator 'div' (line 1054)
        result_div_496331 = python_operator(stypy.reporting.localization.Localization(__file__, 1054, 57), 'div', result_mul_496322, gamma_call_result_496330)
        
        # Processing the call keyword arguments (line 1053)
        kwargs_496332 = {}
        # Getting the type of 'where' (line 1053)
        where_496306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 25), 'where', False)
        # Calling where(args, kwargs) (line 1053)
        where_call_result_496333 = invoke(stypy.reporting.localization.Localization(__file__, 1053, 25), where_496306, *[result_gt_496309, float_496310, result_div_496331], **kwargs_496332)
        
        # Assigning a type to the variable 'fixarr' (line 1053)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1053, 16), 'fixarr', where_call_result_496333)
        # SSA branch for the else part of an if statement (line 1051)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1057):
        
        # Assigning a Call to a Name (line 1057):
        
        # Call to where(...): (line 1057)
        # Processing the call arguments (line 1057)
        
        # Getting the type of 'mf' (line 1057)
        mf_496335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 31), 'mf', False)
        # Getting the type of 'nf' (line 1057)
        nf_496336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 36), 'nf', False)
        # Applying the binary operator '>' (line 1057)
        result_gt_496337 = python_operator(stypy.reporting.localization.Localization(__file__, 1057, 31), '>', mf_496335, nf_496336)
        
        float_496338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1057, 40), 'float')
        
        # Call to gamma(...): (line 1057)
        # Processing the call arguments (line 1057)
        # Getting the type of 'nf' (line 1057)
        nf_496340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 51), 'nf', False)
        # Getting the type of 'mf' (line 1057)
        mf_496341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 54), 'mf', False)
        # Applying the binary operator '-' (line 1057)
        result_sub_496342 = python_operator(stypy.reporting.localization.Localization(__file__, 1057, 51), '-', nf_496340, mf_496341)
        
        int_496343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1057, 57), 'int')
        # Applying the binary operator '+' (line 1057)
        result_add_496344 = python_operator(stypy.reporting.localization.Localization(__file__, 1057, 56), '+', result_sub_496342, int_496343)
        
        # Processing the call keyword arguments (line 1057)
        kwargs_496345 = {}
        # Getting the type of 'gamma' (line 1057)
        gamma_496339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 45), 'gamma', False)
        # Calling gamma(args, kwargs) (line 1057)
        gamma_call_result_496346 = invoke(stypy.reporting.localization.Localization(__file__, 1057, 45), gamma_496339, *[result_add_496344], **kwargs_496345)
        
        
        # Call to gamma(...): (line 1057)
        # Processing the call arguments (line 1057)
        # Getting the type of 'nf' (line 1057)
        nf_496348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 68), 'nf', False)
        # Getting the type of 'mf' (line 1057)
        mf_496349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 71), 'mf', False)
        # Applying the binary operator '+' (line 1057)
        result_add_496350 = python_operator(stypy.reporting.localization.Localization(__file__, 1057, 68), '+', nf_496348, mf_496349)
        
        int_496351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1057, 74), 'int')
        # Applying the binary operator '+' (line 1057)
        result_add_496352 = python_operator(stypy.reporting.localization.Localization(__file__, 1057, 73), '+', result_add_496350, int_496351)
        
        # Processing the call keyword arguments (line 1057)
        kwargs_496353 = {}
        # Getting the type of 'gamma' (line 1057)
        gamma_496347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 62), 'gamma', False)
        # Calling gamma(args, kwargs) (line 1057)
        gamma_call_result_496354 = invoke(stypy.reporting.localization.Localization(__file__, 1057, 62), gamma_496347, *[result_add_496352], **kwargs_496353)
        
        # Applying the binary operator 'div' (line 1057)
        result_div_496355 = python_operator(stypy.reporting.localization.Localization(__file__, 1057, 45), 'div', gamma_call_result_496346, gamma_call_result_496354)
        
        # Processing the call keyword arguments (line 1057)
        kwargs_496356 = {}
        # Getting the type of 'where' (line 1057)
        where_496334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 25), 'where', False)
        # Calling where(args, kwargs) (line 1057)
        where_call_result_496357 = invoke(stypy.reporting.localization.Localization(__file__, 1057, 25), where_496334, *[result_gt_496337, float_496338, result_div_496355], **kwargs_496356)
        
        # Assigning a type to the variable 'fixarr' (line 1057)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1057, 16), 'fixarr', where_call_result_496357)
        # SSA join for if statement (line 1051)
        module_type_store = module_type_store.join_ssa_context()
        
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 1050)
        exit___496358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1050, 13), errstate_call_result_496295, '__exit__')
        with_exit_496359 = invoke(stypy.reporting.localization.Localization(__file__, 1050, 13), exit___496358, None, None, None)

    # SSA branch for the else part of an if statement (line 1047)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1059):
    
    # Assigning a Name to a Name (line 1059):
    # Getting the type of 'm' (line 1059)
    m_496360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 13), 'm')
    # Assigning a type to the variable 'mp' (line 1059)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1059, 8), 'mp', m_496360)
    # SSA join for if statement (line 1047)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 1060):
    
    # Assigning a Subscript to a Name (line 1060):
    
    # Obtaining the type of the subscript
    int_496361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1060, 4), 'int')
    
    # Call to lpmn(...): (line 1060)
    # Processing the call arguments (line 1060)
    # Getting the type of 'mp' (line 1060)
    mp_496364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 25), 'mp', False)
    # Getting the type of 'n' (line 1060)
    n_496365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 29), 'n', False)
    # Getting the type of 'z' (line 1060)
    z_496366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 32), 'z', False)
    # Processing the call keyword arguments (line 1060)
    kwargs_496367 = {}
    # Getting the type of 'specfun' (line 1060)
    specfun_496362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 12), 'specfun', False)
    # Obtaining the member 'lpmn' of a type (line 1060)
    lpmn_496363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1060, 12), specfun_496362, 'lpmn')
    # Calling lpmn(args, kwargs) (line 1060)
    lpmn_call_result_496368 = invoke(stypy.reporting.localization.Localization(__file__, 1060, 12), lpmn_496363, *[mp_496364, n_496365, z_496366], **kwargs_496367)
    
    # Obtaining the member '__getitem__' of a type (line 1060)
    getitem___496369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1060, 4), lpmn_call_result_496368, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1060)
    subscript_call_result_496370 = invoke(stypy.reporting.localization.Localization(__file__, 1060, 4), getitem___496369, int_496361)
    
    # Assigning a type to the variable 'tuple_var_assignment_494745' (line 1060)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1060, 4), 'tuple_var_assignment_494745', subscript_call_result_496370)
    
    # Assigning a Subscript to a Name (line 1060):
    
    # Obtaining the type of the subscript
    int_496371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1060, 4), 'int')
    
    # Call to lpmn(...): (line 1060)
    # Processing the call arguments (line 1060)
    # Getting the type of 'mp' (line 1060)
    mp_496374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 25), 'mp', False)
    # Getting the type of 'n' (line 1060)
    n_496375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 29), 'n', False)
    # Getting the type of 'z' (line 1060)
    z_496376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 32), 'z', False)
    # Processing the call keyword arguments (line 1060)
    kwargs_496377 = {}
    # Getting the type of 'specfun' (line 1060)
    specfun_496372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 12), 'specfun', False)
    # Obtaining the member 'lpmn' of a type (line 1060)
    lpmn_496373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1060, 12), specfun_496372, 'lpmn')
    # Calling lpmn(args, kwargs) (line 1060)
    lpmn_call_result_496378 = invoke(stypy.reporting.localization.Localization(__file__, 1060, 12), lpmn_496373, *[mp_496374, n_496375, z_496376], **kwargs_496377)
    
    # Obtaining the member '__getitem__' of a type (line 1060)
    getitem___496379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1060, 4), lpmn_call_result_496378, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1060)
    subscript_call_result_496380 = invoke(stypy.reporting.localization.Localization(__file__, 1060, 4), getitem___496379, int_496371)
    
    # Assigning a type to the variable 'tuple_var_assignment_494746' (line 1060)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1060, 4), 'tuple_var_assignment_494746', subscript_call_result_496380)
    
    # Assigning a Name to a Name (line 1060):
    # Getting the type of 'tuple_var_assignment_494745' (line 1060)
    tuple_var_assignment_494745_496381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 4), 'tuple_var_assignment_494745')
    # Assigning a type to the variable 'p' (line 1060)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1060, 4), 'p', tuple_var_assignment_494745_496381)
    
    # Assigning a Name to a Name (line 1060):
    # Getting the type of 'tuple_var_assignment_494746' (line 1060)
    tuple_var_assignment_494746_496382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 4), 'tuple_var_assignment_494746')
    # Assigning a type to the variable 'pd' (line 1060)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1060, 7), 'pd', tuple_var_assignment_494746_496382)
    
    
    # Getting the type of 'm' (line 1061)
    m_496383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1061, 8), 'm')
    int_496384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1061, 12), 'int')
    # Applying the binary operator '<' (line 1061)
    result_lt_496385 = python_operator(stypy.reporting.localization.Localization(__file__, 1061, 8), '<', m_496383, int_496384)
    
    # Testing the type of an if condition (line 1061)
    if_condition_496386 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1061, 4), result_lt_496385)
    # Assigning a type to the variable 'if_condition_496386' (line 1061)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1061, 4), 'if_condition_496386', if_condition_496386)
    # SSA begins for if statement (line 1061)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1062):
    
    # Assigning a BinOp to a Name (line 1062):
    # Getting the type of 'p' (line 1062)
    p_496387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 12), 'p')
    # Getting the type of 'fixarr' (line 1062)
    fixarr_496388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 16), 'fixarr')
    # Applying the binary operator '*' (line 1062)
    result_mul_496389 = python_operator(stypy.reporting.localization.Localization(__file__, 1062, 12), '*', p_496387, fixarr_496388)
    
    # Assigning a type to the variable 'p' (line 1062)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1062, 8), 'p', result_mul_496389)
    
    # Assigning a BinOp to a Name (line 1063):
    
    # Assigning a BinOp to a Name (line 1063):
    # Getting the type of 'pd' (line 1063)
    pd_496390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 13), 'pd')
    # Getting the type of 'fixarr' (line 1063)
    fixarr_496391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 18), 'fixarr')
    # Applying the binary operator '*' (line 1063)
    result_mul_496392 = python_operator(stypy.reporting.localization.Localization(__file__, 1063, 13), '*', pd_496390, fixarr_496391)
    
    # Assigning a type to the variable 'pd' (line 1063)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1063, 8), 'pd', result_mul_496392)
    # SSA join for if statement (line 1061)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1064)
    tuple_496393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1064, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1064)
    # Adding element type (line 1064)
    # Getting the type of 'p' (line 1064)
    p_496394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 11), 'p')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1064, 11), tuple_496393, p_496394)
    # Adding element type (line 1064)
    # Getting the type of 'pd' (line 1064)
    pd_496395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 14), 'pd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1064, 11), tuple_496393, pd_496395)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1064)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1064, 4), 'stypy_return_type', tuple_496393)
    
    # ################# End of 'lpmn(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'lpmn' in the type store
    # Getting the type of 'stypy_return_type' (line 991)
    stypy_return_type_496396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_496396)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'lpmn'
    return stypy_return_type_496396

# Assigning a type to the variable 'lpmn' (line 991)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 991, 0), 'lpmn', lpmn)

@norecursion
def clpmn(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_496397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1067, 24), 'int')
    defaults = [int_496397]
    # Create a new context for function 'clpmn'
    module_type_store = module_type_store.open_function_context('clpmn', 1067, 0, False)
    
    # Passed parameters checking function
    clpmn.stypy_localization = localization
    clpmn.stypy_type_of_self = None
    clpmn.stypy_type_store = module_type_store
    clpmn.stypy_function_name = 'clpmn'
    clpmn.stypy_param_names_list = ['m', 'n', 'z', 'type']
    clpmn.stypy_varargs_param_name = None
    clpmn.stypy_kwargs_param_name = None
    clpmn.stypy_call_defaults = defaults
    clpmn.stypy_call_varargs = varargs
    clpmn.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'clpmn', ['m', 'n', 'z', 'type'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'clpmn', localization, ['m', 'n', 'z', 'type'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'clpmn(...)' code ##################

    str_496398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1121, (-1)), 'str', 'Associated Legendre function of the first kind for complex arguments.\n\n    Computes the associated Legendre function of the first kind of order m and\n    degree n, ``Pmn(z)`` = :math:`P_n^m(z)`, and its derivative, ``Pmn\'(z)``.\n    Returns two arrays of size ``(m+1, n+1)`` containing ``Pmn(z)`` and\n    ``Pmn\'(z)`` for all orders from ``0..m`` and degrees from ``0..n``.\n\n    Parameters\n    ----------\n    m : int\n       ``|m| <= n``; the order of the Legendre function.\n    n : int\n       where ``n >= 0``; the degree of the Legendre function.  Often\n       called ``l`` (lower case L) in descriptions of the associated\n       Legendre function\n    z : float or complex\n        Input value.\n    type : int, optional\n       takes values 2 or 3\n       2: cut on the real axis ``|x| > 1``\n       3: cut on the real axis ``-1 < x < 1`` (default)\n\n    Returns\n    -------\n    Pmn_z : (m+1, n+1) array\n       Values for all orders ``0..m`` and degrees ``0..n``\n    Pmn_d_z : (m+1, n+1) array\n       Derivatives for all orders ``0..m`` and degrees ``0..n``\n\n    See Also\n    --------\n    lpmn: associated Legendre functions of the first kind for real z\n\n    Notes\n    -----\n    By default, i.e. for ``type=3``, phase conventions are chosen according\n    to [1]_ such that the function is analytic. The cut lies on the interval\n    (-1, 1). Approaching the cut from above or below in general yields a phase\n    factor with respect to Ferrer\'s function of the first kind\n    (cf. `lpmn`).\n\n    For ``type=2`` a cut at ``|x| > 1`` is chosen. Approaching the real values\n    on the interval (-1, 1) in the complex plane yields Ferrer\'s function\n    of the first kind.\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n    .. [2] NIST Digital Library of Mathematical Functions\n           http://dlmf.nist.gov/14.21\n\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to isscalar(...): (line 1122)
    # Processing the call arguments (line 1122)
    # Getting the type of 'm' (line 1122)
    m_496400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 20), 'm', False)
    # Processing the call keyword arguments (line 1122)
    kwargs_496401 = {}
    # Getting the type of 'isscalar' (line 1122)
    isscalar_496399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1122)
    isscalar_call_result_496402 = invoke(stypy.reporting.localization.Localization(__file__, 1122, 11), isscalar_496399, *[m_496400], **kwargs_496401)
    
    # Applying the 'not' unary operator (line 1122)
    result_not__496403 = python_operator(stypy.reporting.localization.Localization(__file__, 1122, 7), 'not', isscalar_call_result_496402)
    
    
    
    # Call to abs(...): (line 1122)
    # Processing the call arguments (line 1122)
    # Getting the type of 'm' (line 1122)
    m_496405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 31), 'm', False)
    # Processing the call keyword arguments (line 1122)
    kwargs_496406 = {}
    # Getting the type of 'abs' (line 1122)
    abs_496404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 27), 'abs', False)
    # Calling abs(args, kwargs) (line 1122)
    abs_call_result_496407 = invoke(stypy.reporting.localization.Localization(__file__, 1122, 27), abs_496404, *[m_496405], **kwargs_496406)
    
    # Getting the type of 'n' (line 1122)
    n_496408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 36), 'n')
    # Applying the binary operator '>' (line 1122)
    result_gt_496409 = python_operator(stypy.reporting.localization.Localization(__file__, 1122, 27), '>', abs_call_result_496407, n_496408)
    
    # Applying the binary operator 'or' (line 1122)
    result_or_keyword_496410 = python_operator(stypy.reporting.localization.Localization(__file__, 1122, 7), 'or', result_not__496403, result_gt_496409)
    
    # Testing the type of an if condition (line 1122)
    if_condition_496411 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1122, 4), result_or_keyword_496410)
    # Assigning a type to the variable 'if_condition_496411' (line 1122)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1122, 4), 'if_condition_496411', if_condition_496411)
    # SSA begins for if statement (line 1122)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1123)
    # Processing the call arguments (line 1123)
    str_496413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1123, 25), 'str', 'm must be <= n.')
    # Processing the call keyword arguments (line 1123)
    kwargs_496414 = {}
    # Getting the type of 'ValueError' (line 1123)
    ValueError_496412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1123)
    ValueError_call_result_496415 = invoke(stypy.reporting.localization.Localization(__file__, 1123, 14), ValueError_496412, *[str_496413], **kwargs_496414)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1123, 8), ValueError_call_result_496415, 'raise parameter', BaseException)
    # SSA join for if statement (line 1122)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    
    # Call to isscalar(...): (line 1124)
    # Processing the call arguments (line 1124)
    # Getting the type of 'n' (line 1124)
    n_496417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 20), 'n', False)
    # Processing the call keyword arguments (line 1124)
    kwargs_496418 = {}
    # Getting the type of 'isscalar' (line 1124)
    isscalar_496416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1124)
    isscalar_call_result_496419 = invoke(stypy.reporting.localization.Localization(__file__, 1124, 11), isscalar_496416, *[n_496417], **kwargs_496418)
    
    # Applying the 'not' unary operator (line 1124)
    result_not__496420 = python_operator(stypy.reporting.localization.Localization(__file__, 1124, 7), 'not', isscalar_call_result_496419)
    
    
    # Getting the type of 'n' (line 1124)
    n_496421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 27), 'n')
    int_496422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1124, 31), 'int')
    # Applying the binary operator '<' (line 1124)
    result_lt_496423 = python_operator(stypy.reporting.localization.Localization(__file__, 1124, 27), '<', n_496421, int_496422)
    
    # Applying the binary operator 'or' (line 1124)
    result_or_keyword_496424 = python_operator(stypy.reporting.localization.Localization(__file__, 1124, 7), 'or', result_not__496420, result_lt_496423)
    
    # Testing the type of an if condition (line 1124)
    if_condition_496425 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1124, 4), result_or_keyword_496424)
    # Assigning a type to the variable 'if_condition_496425' (line 1124)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1124, 4), 'if_condition_496425', if_condition_496425)
    # SSA begins for if statement (line 1124)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1125)
    # Processing the call arguments (line 1125)
    str_496427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1125, 25), 'str', 'n must be a non-negative integer.')
    # Processing the call keyword arguments (line 1125)
    kwargs_496428 = {}
    # Getting the type of 'ValueError' (line 1125)
    ValueError_496426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1125)
    ValueError_call_result_496429 = invoke(stypy.reporting.localization.Localization(__file__, 1125, 14), ValueError_496426, *[str_496427], **kwargs_496428)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1125, 8), ValueError_call_result_496429, 'raise parameter', BaseException)
    # SSA join for if statement (line 1124)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to isscalar(...): (line 1126)
    # Processing the call arguments (line 1126)
    # Getting the type of 'z' (line 1126)
    z_496431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 20), 'z', False)
    # Processing the call keyword arguments (line 1126)
    kwargs_496432 = {}
    # Getting the type of 'isscalar' (line 1126)
    isscalar_496430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1126)
    isscalar_call_result_496433 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 11), isscalar_496430, *[z_496431], **kwargs_496432)
    
    # Applying the 'not' unary operator (line 1126)
    result_not__496434 = python_operator(stypy.reporting.localization.Localization(__file__, 1126, 7), 'not', isscalar_call_result_496433)
    
    # Testing the type of an if condition (line 1126)
    if_condition_496435 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1126, 4), result_not__496434)
    # Assigning a type to the variable 'if_condition_496435' (line 1126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 4), 'if_condition_496435', if_condition_496435)
    # SSA begins for if statement (line 1126)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1127)
    # Processing the call arguments (line 1127)
    str_496437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1127, 25), 'str', 'z must be scalar.')
    # Processing the call keyword arguments (line 1127)
    kwargs_496438 = {}
    # Getting the type of 'ValueError' (line 1127)
    ValueError_496436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1127)
    ValueError_call_result_496439 = invoke(stypy.reporting.localization.Localization(__file__, 1127, 14), ValueError_496436, *[str_496437], **kwargs_496438)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1127, 8), ValueError_call_result_496439, 'raise parameter', BaseException)
    # SSA join for if statement (line 1126)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'type' (line 1128)
    type_496440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 11), 'type')
    int_496441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1128, 19), 'int')
    # Applying the binary operator '==' (line 1128)
    result_eq_496442 = python_operator(stypy.reporting.localization.Localization(__file__, 1128, 11), '==', type_496440, int_496441)
    
    
    # Getting the type of 'type' (line 1128)
    type_496443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 24), 'type')
    int_496444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1128, 32), 'int')
    # Applying the binary operator '==' (line 1128)
    result_eq_496445 = python_operator(stypy.reporting.localization.Localization(__file__, 1128, 24), '==', type_496443, int_496444)
    
    # Applying the binary operator 'or' (line 1128)
    result_or_keyword_496446 = python_operator(stypy.reporting.localization.Localization(__file__, 1128, 11), 'or', result_eq_496442, result_eq_496445)
    
    # Applying the 'not' unary operator (line 1128)
    result_not__496447 = python_operator(stypy.reporting.localization.Localization(__file__, 1128, 7), 'not', result_or_keyword_496446)
    
    # Testing the type of an if condition (line 1128)
    if_condition_496448 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1128, 4), result_not__496447)
    # Assigning a type to the variable 'if_condition_496448' (line 1128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1128, 4), 'if_condition_496448', if_condition_496448)
    # SSA begins for if statement (line 1128)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1129)
    # Processing the call arguments (line 1129)
    str_496450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1129, 25), 'str', 'type must be either 2 or 3.')
    # Processing the call keyword arguments (line 1129)
    kwargs_496451 = {}
    # Getting the type of 'ValueError' (line 1129)
    ValueError_496449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1129)
    ValueError_call_result_496452 = invoke(stypy.reporting.localization.Localization(__file__, 1129, 14), ValueError_496449, *[str_496450], **kwargs_496451)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1129, 8), ValueError_call_result_496452, 'raise parameter', BaseException)
    # SSA join for if statement (line 1128)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'm' (line 1130)
    m_496453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 8), 'm')
    int_496454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1130, 12), 'int')
    # Applying the binary operator '<' (line 1130)
    result_lt_496455 = python_operator(stypy.reporting.localization.Localization(__file__, 1130, 8), '<', m_496453, int_496454)
    
    # Testing the type of an if condition (line 1130)
    if_condition_496456 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1130, 4), result_lt_496455)
    # Assigning a type to the variable 'if_condition_496456' (line 1130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1130, 4), 'if_condition_496456', if_condition_496456)
    # SSA begins for if statement (line 1130)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a UnaryOp to a Name (line 1131):
    
    # Assigning a UnaryOp to a Name (line 1131):
    
    # Getting the type of 'm' (line 1131)
    m_496457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 14), 'm')
    # Applying the 'usub' unary operator (line 1131)
    result___neg___496458 = python_operator(stypy.reporting.localization.Localization(__file__, 1131, 13), 'usub', m_496457)
    
    # Assigning a type to the variable 'mp' (line 1131)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1131, 8), 'mp', result___neg___496458)
    
    # Assigning a Subscript to a Tuple (line 1132):
    
    # Assigning a Subscript to a Name (line 1132):
    
    # Obtaining the type of the subscript
    int_496459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1132, 8), 'int')
    
    # Obtaining the type of the subscript
    int_496460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1132, 23), 'int')
    # Getting the type of 'mp' (line 1132)
    mp_496461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 25), 'mp')
    int_496462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1132, 28), 'int')
    # Applying the binary operator '+' (line 1132)
    result_add_496463 = python_operator(stypy.reporting.localization.Localization(__file__, 1132, 25), '+', mp_496461, int_496462)
    
    slice_496464 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1132, 17), int_496460, result_add_496463, None)
    int_496465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1132, 31), 'int')
    # Getting the type of 'n' (line 1132)
    n_496466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 33), 'n')
    int_496467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1132, 35), 'int')
    # Applying the binary operator '+' (line 1132)
    result_add_496468 = python_operator(stypy.reporting.localization.Localization(__file__, 1132, 33), '+', n_496466, int_496467)
    
    slice_496469 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1132, 17), int_496465, result_add_496468, None)
    # Getting the type of 'mgrid' (line 1132)
    mgrid_496470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 17), 'mgrid')
    # Obtaining the member '__getitem__' of a type (line 1132)
    getitem___496471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1132, 17), mgrid_496470, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1132)
    subscript_call_result_496472 = invoke(stypy.reporting.localization.Localization(__file__, 1132, 17), getitem___496471, (slice_496464, slice_496469))
    
    # Obtaining the member '__getitem__' of a type (line 1132)
    getitem___496473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1132, 8), subscript_call_result_496472, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1132)
    subscript_call_result_496474 = invoke(stypy.reporting.localization.Localization(__file__, 1132, 8), getitem___496473, int_496459)
    
    # Assigning a type to the variable 'tuple_var_assignment_494747' (line 1132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 8), 'tuple_var_assignment_494747', subscript_call_result_496474)
    
    # Assigning a Subscript to a Name (line 1132):
    
    # Obtaining the type of the subscript
    int_496475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1132, 8), 'int')
    
    # Obtaining the type of the subscript
    int_496476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1132, 23), 'int')
    # Getting the type of 'mp' (line 1132)
    mp_496477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 25), 'mp')
    int_496478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1132, 28), 'int')
    # Applying the binary operator '+' (line 1132)
    result_add_496479 = python_operator(stypy.reporting.localization.Localization(__file__, 1132, 25), '+', mp_496477, int_496478)
    
    slice_496480 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1132, 17), int_496476, result_add_496479, None)
    int_496481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1132, 31), 'int')
    # Getting the type of 'n' (line 1132)
    n_496482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 33), 'n')
    int_496483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1132, 35), 'int')
    # Applying the binary operator '+' (line 1132)
    result_add_496484 = python_operator(stypy.reporting.localization.Localization(__file__, 1132, 33), '+', n_496482, int_496483)
    
    slice_496485 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1132, 17), int_496481, result_add_496484, None)
    # Getting the type of 'mgrid' (line 1132)
    mgrid_496486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 17), 'mgrid')
    # Obtaining the member '__getitem__' of a type (line 1132)
    getitem___496487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1132, 17), mgrid_496486, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1132)
    subscript_call_result_496488 = invoke(stypy.reporting.localization.Localization(__file__, 1132, 17), getitem___496487, (slice_496480, slice_496485))
    
    # Obtaining the member '__getitem__' of a type (line 1132)
    getitem___496489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1132, 8), subscript_call_result_496488, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1132)
    subscript_call_result_496490 = invoke(stypy.reporting.localization.Localization(__file__, 1132, 8), getitem___496489, int_496475)
    
    # Assigning a type to the variable 'tuple_var_assignment_494748' (line 1132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 8), 'tuple_var_assignment_494748', subscript_call_result_496490)
    
    # Assigning a Name to a Name (line 1132):
    # Getting the type of 'tuple_var_assignment_494747' (line 1132)
    tuple_var_assignment_494747_496491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 8), 'tuple_var_assignment_494747')
    # Assigning a type to the variable 'mf' (line 1132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 8), 'mf', tuple_var_assignment_494747_496491)
    
    # Assigning a Name to a Name (line 1132):
    # Getting the type of 'tuple_var_assignment_494748' (line 1132)
    tuple_var_assignment_494748_496492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 8), 'tuple_var_assignment_494748')
    # Assigning a type to the variable 'nf' (line 1132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 12), 'nf', tuple_var_assignment_494748_496492)
    
    # Call to errstate(...): (line 1133)
    # Processing the call keyword arguments (line 1133)
    str_496495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1133, 33), 'str', 'ignore')
    keyword_496496 = str_496495
    kwargs_496497 = {'all': keyword_496496}
    # Getting the type of 'ufuncs' (line 1133)
    ufuncs_496493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 13), 'ufuncs', False)
    # Obtaining the member 'errstate' of a type (line 1133)
    errstate_496494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 13), ufuncs_496493, 'errstate')
    # Calling errstate(args, kwargs) (line 1133)
    errstate_call_result_496498 = invoke(stypy.reporting.localization.Localization(__file__, 1133, 13), errstate_496494, *[], **kwargs_496497)
    
    with_496499 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 1133, 13), errstate_call_result_496498, 'with parameter', '__enter__', '__exit__')

    if with_496499:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 1133)
        enter___496500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 13), errstate_call_result_496498, '__enter__')
        with_enter_496501 = invoke(stypy.reporting.localization.Localization(__file__, 1133, 13), enter___496500)
        
        
        # Getting the type of 'type' (line 1134)
        type_496502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 15), 'type')
        int_496503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1134, 23), 'int')
        # Applying the binary operator '==' (line 1134)
        result_eq_496504 = python_operator(stypy.reporting.localization.Localization(__file__, 1134, 15), '==', type_496502, int_496503)
        
        # Testing the type of an if condition (line 1134)
        if_condition_496505 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1134, 12), result_eq_496504)
        # Assigning a type to the variable 'if_condition_496505' (line 1134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1134, 12), 'if_condition_496505', if_condition_496505)
        # SSA begins for if statement (line 1134)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1135):
        
        # Assigning a Call to a Name (line 1135):
        
        # Call to where(...): (line 1135)
        # Processing the call arguments (line 1135)
        
        # Getting the type of 'mf' (line 1135)
        mf_496507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 31), 'mf', False)
        # Getting the type of 'nf' (line 1135)
        nf_496508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 36), 'nf', False)
        # Applying the binary operator '>' (line 1135)
        result_gt_496509 = python_operator(stypy.reporting.localization.Localization(__file__, 1135, 31), '>', mf_496507, nf_496508)
        
        float_496510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1135, 40), 'float')
        int_496511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1136, 32), 'int')
        # Getting the type of 'mf' (line 1136)
        mf_496512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 37), 'mf', False)
        # Applying the binary operator '**' (line 1136)
        result_pow_496513 = python_operator(stypy.reporting.localization.Localization(__file__, 1136, 31), '**', int_496511, mf_496512)
        
        
        # Call to gamma(...): (line 1136)
        # Processing the call arguments (line 1136)
        # Getting the type of 'nf' (line 1136)
        nf_496515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 48), 'nf', False)
        # Getting the type of 'mf' (line 1136)
        mf_496516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 51), 'mf', False)
        # Applying the binary operator '-' (line 1136)
        result_sub_496517 = python_operator(stypy.reporting.localization.Localization(__file__, 1136, 48), '-', nf_496515, mf_496516)
        
        int_496518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1136, 54), 'int')
        # Applying the binary operator '+' (line 1136)
        result_add_496519 = python_operator(stypy.reporting.localization.Localization(__file__, 1136, 53), '+', result_sub_496517, int_496518)
        
        # Processing the call keyword arguments (line 1136)
        kwargs_496520 = {}
        # Getting the type of 'gamma' (line 1136)
        gamma_496514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 42), 'gamma', False)
        # Calling gamma(args, kwargs) (line 1136)
        gamma_call_result_496521 = invoke(stypy.reporting.localization.Localization(__file__, 1136, 42), gamma_496514, *[result_add_496519], **kwargs_496520)
        
        # Applying the binary operator '*' (line 1136)
        result_mul_496522 = python_operator(stypy.reporting.localization.Localization(__file__, 1136, 31), '*', result_pow_496513, gamma_call_result_496521)
        
        
        # Call to gamma(...): (line 1136)
        # Processing the call arguments (line 1136)
        # Getting the type of 'nf' (line 1136)
        nf_496524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 65), 'nf', False)
        # Getting the type of 'mf' (line 1136)
        mf_496525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 68), 'mf', False)
        # Applying the binary operator '+' (line 1136)
        result_add_496526 = python_operator(stypy.reporting.localization.Localization(__file__, 1136, 65), '+', nf_496524, mf_496525)
        
        int_496527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1136, 71), 'int')
        # Applying the binary operator '+' (line 1136)
        result_add_496528 = python_operator(stypy.reporting.localization.Localization(__file__, 1136, 70), '+', result_add_496526, int_496527)
        
        # Processing the call keyword arguments (line 1136)
        kwargs_496529 = {}
        # Getting the type of 'gamma' (line 1136)
        gamma_496523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 59), 'gamma', False)
        # Calling gamma(args, kwargs) (line 1136)
        gamma_call_result_496530 = invoke(stypy.reporting.localization.Localization(__file__, 1136, 59), gamma_496523, *[result_add_496528], **kwargs_496529)
        
        # Applying the binary operator 'div' (line 1136)
        result_div_496531 = python_operator(stypy.reporting.localization.Localization(__file__, 1136, 57), 'div', result_mul_496522, gamma_call_result_496530)
        
        # Processing the call keyword arguments (line 1135)
        kwargs_496532 = {}
        # Getting the type of 'where' (line 1135)
        where_496506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 25), 'where', False)
        # Calling where(args, kwargs) (line 1135)
        where_call_result_496533 = invoke(stypy.reporting.localization.Localization(__file__, 1135, 25), where_496506, *[result_gt_496509, float_496510, result_div_496531], **kwargs_496532)
        
        # Assigning a type to the variable 'fixarr' (line 1135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1135, 16), 'fixarr', where_call_result_496533)
        # SSA branch for the else part of an if statement (line 1134)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1138):
        
        # Assigning a Call to a Name (line 1138):
        
        # Call to where(...): (line 1138)
        # Processing the call arguments (line 1138)
        
        # Getting the type of 'mf' (line 1138)
        mf_496535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 31), 'mf', False)
        # Getting the type of 'nf' (line 1138)
        nf_496536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 36), 'nf', False)
        # Applying the binary operator '>' (line 1138)
        result_gt_496537 = python_operator(stypy.reporting.localization.Localization(__file__, 1138, 31), '>', mf_496535, nf_496536)
        
        float_496538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1138, 40), 'float')
        
        # Call to gamma(...): (line 1138)
        # Processing the call arguments (line 1138)
        # Getting the type of 'nf' (line 1138)
        nf_496540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 51), 'nf', False)
        # Getting the type of 'mf' (line 1138)
        mf_496541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 54), 'mf', False)
        # Applying the binary operator '-' (line 1138)
        result_sub_496542 = python_operator(stypy.reporting.localization.Localization(__file__, 1138, 51), '-', nf_496540, mf_496541)
        
        int_496543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1138, 57), 'int')
        # Applying the binary operator '+' (line 1138)
        result_add_496544 = python_operator(stypy.reporting.localization.Localization(__file__, 1138, 56), '+', result_sub_496542, int_496543)
        
        # Processing the call keyword arguments (line 1138)
        kwargs_496545 = {}
        # Getting the type of 'gamma' (line 1138)
        gamma_496539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 45), 'gamma', False)
        # Calling gamma(args, kwargs) (line 1138)
        gamma_call_result_496546 = invoke(stypy.reporting.localization.Localization(__file__, 1138, 45), gamma_496539, *[result_add_496544], **kwargs_496545)
        
        
        # Call to gamma(...): (line 1138)
        # Processing the call arguments (line 1138)
        # Getting the type of 'nf' (line 1138)
        nf_496548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 68), 'nf', False)
        # Getting the type of 'mf' (line 1138)
        mf_496549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 71), 'mf', False)
        # Applying the binary operator '+' (line 1138)
        result_add_496550 = python_operator(stypy.reporting.localization.Localization(__file__, 1138, 68), '+', nf_496548, mf_496549)
        
        int_496551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1138, 74), 'int')
        # Applying the binary operator '+' (line 1138)
        result_add_496552 = python_operator(stypy.reporting.localization.Localization(__file__, 1138, 73), '+', result_add_496550, int_496551)
        
        # Processing the call keyword arguments (line 1138)
        kwargs_496553 = {}
        # Getting the type of 'gamma' (line 1138)
        gamma_496547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 62), 'gamma', False)
        # Calling gamma(args, kwargs) (line 1138)
        gamma_call_result_496554 = invoke(stypy.reporting.localization.Localization(__file__, 1138, 62), gamma_496547, *[result_add_496552], **kwargs_496553)
        
        # Applying the binary operator 'div' (line 1138)
        result_div_496555 = python_operator(stypy.reporting.localization.Localization(__file__, 1138, 45), 'div', gamma_call_result_496546, gamma_call_result_496554)
        
        # Processing the call keyword arguments (line 1138)
        kwargs_496556 = {}
        # Getting the type of 'where' (line 1138)
        where_496534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 25), 'where', False)
        # Calling where(args, kwargs) (line 1138)
        where_call_result_496557 = invoke(stypy.reporting.localization.Localization(__file__, 1138, 25), where_496534, *[result_gt_496537, float_496538, result_div_496555], **kwargs_496556)
        
        # Assigning a type to the variable 'fixarr' (line 1138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 16), 'fixarr', where_call_result_496557)
        # SSA join for if statement (line 1134)
        module_type_store = module_type_store.join_ssa_context()
        
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 1133)
        exit___496558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 13), errstate_call_result_496498, '__exit__')
        with_exit_496559 = invoke(stypy.reporting.localization.Localization(__file__, 1133, 13), exit___496558, None, None, None)

    # SSA branch for the else part of an if statement (line 1130)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1140):
    
    # Assigning a Name to a Name (line 1140):
    # Getting the type of 'm' (line 1140)
    m_496560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 13), 'm')
    # Assigning a type to the variable 'mp' (line 1140)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1140, 8), 'mp', m_496560)
    # SSA join for if statement (line 1130)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 1141):
    
    # Assigning a Subscript to a Name (line 1141):
    
    # Obtaining the type of the subscript
    int_496561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1141, 4), 'int')
    
    # Call to clpmn(...): (line 1141)
    # Processing the call arguments (line 1141)
    # Getting the type of 'mp' (line 1141)
    mp_496564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 26), 'mp', False)
    # Getting the type of 'n' (line 1141)
    n_496565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 30), 'n', False)
    
    # Call to real(...): (line 1141)
    # Processing the call arguments (line 1141)
    # Getting the type of 'z' (line 1141)
    z_496567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 38), 'z', False)
    # Processing the call keyword arguments (line 1141)
    kwargs_496568 = {}
    # Getting the type of 'real' (line 1141)
    real_496566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 33), 'real', False)
    # Calling real(args, kwargs) (line 1141)
    real_call_result_496569 = invoke(stypy.reporting.localization.Localization(__file__, 1141, 33), real_496566, *[z_496567], **kwargs_496568)
    
    
    # Call to imag(...): (line 1141)
    # Processing the call arguments (line 1141)
    # Getting the type of 'z' (line 1141)
    z_496571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 47), 'z', False)
    # Processing the call keyword arguments (line 1141)
    kwargs_496572 = {}
    # Getting the type of 'imag' (line 1141)
    imag_496570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 42), 'imag', False)
    # Calling imag(args, kwargs) (line 1141)
    imag_call_result_496573 = invoke(stypy.reporting.localization.Localization(__file__, 1141, 42), imag_496570, *[z_496571], **kwargs_496572)
    
    # Getting the type of 'type' (line 1141)
    type_496574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 51), 'type', False)
    # Processing the call keyword arguments (line 1141)
    kwargs_496575 = {}
    # Getting the type of 'specfun' (line 1141)
    specfun_496562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 12), 'specfun', False)
    # Obtaining the member 'clpmn' of a type (line 1141)
    clpmn_496563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1141, 12), specfun_496562, 'clpmn')
    # Calling clpmn(args, kwargs) (line 1141)
    clpmn_call_result_496576 = invoke(stypy.reporting.localization.Localization(__file__, 1141, 12), clpmn_496563, *[mp_496564, n_496565, real_call_result_496569, imag_call_result_496573, type_496574], **kwargs_496575)
    
    # Obtaining the member '__getitem__' of a type (line 1141)
    getitem___496577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1141, 4), clpmn_call_result_496576, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1141)
    subscript_call_result_496578 = invoke(stypy.reporting.localization.Localization(__file__, 1141, 4), getitem___496577, int_496561)
    
    # Assigning a type to the variable 'tuple_var_assignment_494749' (line 1141)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 4), 'tuple_var_assignment_494749', subscript_call_result_496578)
    
    # Assigning a Subscript to a Name (line 1141):
    
    # Obtaining the type of the subscript
    int_496579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1141, 4), 'int')
    
    # Call to clpmn(...): (line 1141)
    # Processing the call arguments (line 1141)
    # Getting the type of 'mp' (line 1141)
    mp_496582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 26), 'mp', False)
    # Getting the type of 'n' (line 1141)
    n_496583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 30), 'n', False)
    
    # Call to real(...): (line 1141)
    # Processing the call arguments (line 1141)
    # Getting the type of 'z' (line 1141)
    z_496585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 38), 'z', False)
    # Processing the call keyword arguments (line 1141)
    kwargs_496586 = {}
    # Getting the type of 'real' (line 1141)
    real_496584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 33), 'real', False)
    # Calling real(args, kwargs) (line 1141)
    real_call_result_496587 = invoke(stypy.reporting.localization.Localization(__file__, 1141, 33), real_496584, *[z_496585], **kwargs_496586)
    
    
    # Call to imag(...): (line 1141)
    # Processing the call arguments (line 1141)
    # Getting the type of 'z' (line 1141)
    z_496589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 47), 'z', False)
    # Processing the call keyword arguments (line 1141)
    kwargs_496590 = {}
    # Getting the type of 'imag' (line 1141)
    imag_496588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 42), 'imag', False)
    # Calling imag(args, kwargs) (line 1141)
    imag_call_result_496591 = invoke(stypy.reporting.localization.Localization(__file__, 1141, 42), imag_496588, *[z_496589], **kwargs_496590)
    
    # Getting the type of 'type' (line 1141)
    type_496592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 51), 'type', False)
    # Processing the call keyword arguments (line 1141)
    kwargs_496593 = {}
    # Getting the type of 'specfun' (line 1141)
    specfun_496580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 12), 'specfun', False)
    # Obtaining the member 'clpmn' of a type (line 1141)
    clpmn_496581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1141, 12), specfun_496580, 'clpmn')
    # Calling clpmn(args, kwargs) (line 1141)
    clpmn_call_result_496594 = invoke(stypy.reporting.localization.Localization(__file__, 1141, 12), clpmn_496581, *[mp_496582, n_496583, real_call_result_496587, imag_call_result_496591, type_496592], **kwargs_496593)
    
    # Obtaining the member '__getitem__' of a type (line 1141)
    getitem___496595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1141, 4), clpmn_call_result_496594, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1141)
    subscript_call_result_496596 = invoke(stypy.reporting.localization.Localization(__file__, 1141, 4), getitem___496595, int_496579)
    
    # Assigning a type to the variable 'tuple_var_assignment_494750' (line 1141)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 4), 'tuple_var_assignment_494750', subscript_call_result_496596)
    
    # Assigning a Name to a Name (line 1141):
    # Getting the type of 'tuple_var_assignment_494749' (line 1141)
    tuple_var_assignment_494749_496597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 4), 'tuple_var_assignment_494749')
    # Assigning a type to the variable 'p' (line 1141)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 4), 'p', tuple_var_assignment_494749_496597)
    
    # Assigning a Name to a Name (line 1141):
    # Getting the type of 'tuple_var_assignment_494750' (line 1141)
    tuple_var_assignment_494750_496598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 4), 'tuple_var_assignment_494750')
    # Assigning a type to the variable 'pd' (line 1141)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 7), 'pd', tuple_var_assignment_494750_496598)
    
    
    # Getting the type of 'm' (line 1142)
    m_496599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 8), 'm')
    int_496600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1142, 12), 'int')
    # Applying the binary operator '<' (line 1142)
    result_lt_496601 = python_operator(stypy.reporting.localization.Localization(__file__, 1142, 8), '<', m_496599, int_496600)
    
    # Testing the type of an if condition (line 1142)
    if_condition_496602 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1142, 4), result_lt_496601)
    # Assigning a type to the variable 'if_condition_496602' (line 1142)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1142, 4), 'if_condition_496602', if_condition_496602)
    # SSA begins for if statement (line 1142)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1143):
    
    # Assigning a BinOp to a Name (line 1143):
    # Getting the type of 'p' (line 1143)
    p_496603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 12), 'p')
    # Getting the type of 'fixarr' (line 1143)
    fixarr_496604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 16), 'fixarr')
    # Applying the binary operator '*' (line 1143)
    result_mul_496605 = python_operator(stypy.reporting.localization.Localization(__file__, 1143, 12), '*', p_496603, fixarr_496604)
    
    # Assigning a type to the variable 'p' (line 1143)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1143, 8), 'p', result_mul_496605)
    
    # Assigning a BinOp to a Name (line 1144):
    
    # Assigning a BinOp to a Name (line 1144):
    # Getting the type of 'pd' (line 1144)
    pd_496606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 13), 'pd')
    # Getting the type of 'fixarr' (line 1144)
    fixarr_496607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 18), 'fixarr')
    # Applying the binary operator '*' (line 1144)
    result_mul_496608 = python_operator(stypy.reporting.localization.Localization(__file__, 1144, 13), '*', pd_496606, fixarr_496607)
    
    # Assigning a type to the variable 'pd' (line 1144)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1144, 8), 'pd', result_mul_496608)
    # SSA join for if statement (line 1142)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1145)
    tuple_496609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1145, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1145)
    # Adding element type (line 1145)
    # Getting the type of 'p' (line 1145)
    p_496610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 11), 'p')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1145, 11), tuple_496609, p_496610)
    # Adding element type (line 1145)
    # Getting the type of 'pd' (line 1145)
    pd_496611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 14), 'pd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1145, 11), tuple_496609, pd_496611)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1145, 4), 'stypy_return_type', tuple_496609)
    
    # ################# End of 'clpmn(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'clpmn' in the type store
    # Getting the type of 'stypy_return_type' (line 1067)
    stypy_return_type_496612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_496612)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'clpmn'
    return stypy_return_type_496612

# Assigning a type to the variable 'clpmn' (line 1067)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1067, 0), 'clpmn', clpmn)

@norecursion
def lqmn(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'lqmn'
    module_type_store = module_type_store.open_function_context('lqmn', 1148, 0, False)
    
    # Passed parameters checking function
    lqmn.stypy_localization = localization
    lqmn.stypy_type_of_self = None
    lqmn.stypy_type_store = module_type_store
    lqmn.stypy_function_name = 'lqmn'
    lqmn.stypy_param_names_list = ['m', 'n', 'z']
    lqmn.stypy_varargs_param_name = None
    lqmn.stypy_kwargs_param_name = None
    lqmn.stypy_call_defaults = defaults
    lqmn.stypy_call_varargs = varargs
    lqmn.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'lqmn', ['m', 'n', 'z'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'lqmn', localization, ['m', 'n', 'z'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'lqmn(...)' code ##################

    str_496613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1180, (-1)), 'str', 'Sequence of associated Legendre functions of the second kind.\n\n    Computes the associated Legendre function of the second kind of order m and\n    degree n, ``Qmn(z)`` = :math:`Q_n^m(z)`, and its derivative, ``Qmn\'(z)``.\n    Returns two arrays of size ``(m+1, n+1)`` containing ``Qmn(z)`` and\n    ``Qmn\'(z)`` for all orders from ``0..m`` and degrees from ``0..n``.\n\n    Parameters\n    ----------\n    m : int\n       ``|m| <= n``; the order of the Legendre function.\n    n : int\n       where ``n >= 0``; the degree of the Legendre function.  Often\n       called ``l`` (lower case L) in descriptions of the associated\n       Legendre function\n    z : complex\n        Input value.\n\n    Returns\n    -------\n    Qmn_z : (m+1, n+1) array\n       Values for all orders 0..m and degrees 0..n\n    Qmn_d_z : (m+1, n+1) array\n       Derivatives for all orders 0..m and degrees 0..n\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to isscalar(...): (line 1181)
    # Processing the call arguments (line 1181)
    # Getting the type of 'm' (line 1181)
    m_496615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 20), 'm', False)
    # Processing the call keyword arguments (line 1181)
    kwargs_496616 = {}
    # Getting the type of 'isscalar' (line 1181)
    isscalar_496614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1181)
    isscalar_call_result_496617 = invoke(stypy.reporting.localization.Localization(__file__, 1181, 11), isscalar_496614, *[m_496615], **kwargs_496616)
    
    # Applying the 'not' unary operator (line 1181)
    result_not__496618 = python_operator(stypy.reporting.localization.Localization(__file__, 1181, 7), 'not', isscalar_call_result_496617)
    
    
    # Getting the type of 'm' (line 1181)
    m_496619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 27), 'm')
    int_496620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1181, 31), 'int')
    # Applying the binary operator '<' (line 1181)
    result_lt_496621 = python_operator(stypy.reporting.localization.Localization(__file__, 1181, 27), '<', m_496619, int_496620)
    
    # Applying the binary operator 'or' (line 1181)
    result_or_keyword_496622 = python_operator(stypy.reporting.localization.Localization(__file__, 1181, 7), 'or', result_not__496618, result_lt_496621)
    
    # Testing the type of an if condition (line 1181)
    if_condition_496623 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1181, 4), result_or_keyword_496622)
    # Assigning a type to the variable 'if_condition_496623' (line 1181)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1181, 4), 'if_condition_496623', if_condition_496623)
    # SSA begins for if statement (line 1181)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1182)
    # Processing the call arguments (line 1182)
    str_496625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1182, 25), 'str', 'm must be a non-negative integer.')
    # Processing the call keyword arguments (line 1182)
    kwargs_496626 = {}
    # Getting the type of 'ValueError' (line 1182)
    ValueError_496624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1182)
    ValueError_call_result_496627 = invoke(stypy.reporting.localization.Localization(__file__, 1182, 14), ValueError_496624, *[str_496625], **kwargs_496626)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1182, 8), ValueError_call_result_496627, 'raise parameter', BaseException)
    # SSA join for if statement (line 1181)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    
    # Call to isscalar(...): (line 1183)
    # Processing the call arguments (line 1183)
    # Getting the type of 'n' (line 1183)
    n_496629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 20), 'n', False)
    # Processing the call keyword arguments (line 1183)
    kwargs_496630 = {}
    # Getting the type of 'isscalar' (line 1183)
    isscalar_496628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1183)
    isscalar_call_result_496631 = invoke(stypy.reporting.localization.Localization(__file__, 1183, 11), isscalar_496628, *[n_496629], **kwargs_496630)
    
    # Applying the 'not' unary operator (line 1183)
    result_not__496632 = python_operator(stypy.reporting.localization.Localization(__file__, 1183, 7), 'not', isscalar_call_result_496631)
    
    
    # Getting the type of 'n' (line 1183)
    n_496633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 27), 'n')
    int_496634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1183, 31), 'int')
    # Applying the binary operator '<' (line 1183)
    result_lt_496635 = python_operator(stypy.reporting.localization.Localization(__file__, 1183, 27), '<', n_496633, int_496634)
    
    # Applying the binary operator 'or' (line 1183)
    result_or_keyword_496636 = python_operator(stypy.reporting.localization.Localization(__file__, 1183, 7), 'or', result_not__496632, result_lt_496635)
    
    # Testing the type of an if condition (line 1183)
    if_condition_496637 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1183, 4), result_or_keyword_496636)
    # Assigning a type to the variable 'if_condition_496637' (line 1183)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1183, 4), 'if_condition_496637', if_condition_496637)
    # SSA begins for if statement (line 1183)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1184)
    # Processing the call arguments (line 1184)
    str_496639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1184, 25), 'str', 'n must be a non-negative integer.')
    # Processing the call keyword arguments (line 1184)
    kwargs_496640 = {}
    # Getting the type of 'ValueError' (line 1184)
    ValueError_496638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1184)
    ValueError_call_result_496641 = invoke(stypy.reporting.localization.Localization(__file__, 1184, 14), ValueError_496638, *[str_496639], **kwargs_496640)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1184, 8), ValueError_call_result_496641, 'raise parameter', BaseException)
    # SSA join for if statement (line 1183)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to isscalar(...): (line 1185)
    # Processing the call arguments (line 1185)
    # Getting the type of 'z' (line 1185)
    z_496643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 20), 'z', False)
    # Processing the call keyword arguments (line 1185)
    kwargs_496644 = {}
    # Getting the type of 'isscalar' (line 1185)
    isscalar_496642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1185)
    isscalar_call_result_496645 = invoke(stypy.reporting.localization.Localization(__file__, 1185, 11), isscalar_496642, *[z_496643], **kwargs_496644)
    
    # Applying the 'not' unary operator (line 1185)
    result_not__496646 = python_operator(stypy.reporting.localization.Localization(__file__, 1185, 7), 'not', isscalar_call_result_496645)
    
    # Testing the type of an if condition (line 1185)
    if_condition_496647 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1185, 4), result_not__496646)
    # Assigning a type to the variable 'if_condition_496647' (line 1185)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1185, 4), 'if_condition_496647', if_condition_496647)
    # SSA begins for if statement (line 1185)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1186)
    # Processing the call arguments (line 1186)
    str_496649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1186, 25), 'str', 'z must be scalar.')
    # Processing the call keyword arguments (line 1186)
    kwargs_496650 = {}
    # Getting the type of 'ValueError' (line 1186)
    ValueError_496648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1186)
    ValueError_call_result_496651 = invoke(stypy.reporting.localization.Localization(__file__, 1186, 14), ValueError_496648, *[str_496649], **kwargs_496650)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1186, 8), ValueError_call_result_496651, 'raise parameter', BaseException)
    # SSA join for if statement (line 1185)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1187):
    
    # Assigning a Call to a Name (line 1187):
    
    # Call to int(...): (line 1187)
    # Processing the call arguments (line 1187)
    # Getting the type of 'm' (line 1187)
    m_496653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 12), 'm', False)
    # Processing the call keyword arguments (line 1187)
    kwargs_496654 = {}
    # Getting the type of 'int' (line 1187)
    int_496652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 8), 'int', False)
    # Calling int(args, kwargs) (line 1187)
    int_call_result_496655 = invoke(stypy.reporting.localization.Localization(__file__, 1187, 8), int_496652, *[m_496653], **kwargs_496654)
    
    # Assigning a type to the variable 'm' (line 1187)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1187, 4), 'm', int_call_result_496655)
    
    # Assigning a Call to a Name (line 1188):
    
    # Assigning a Call to a Name (line 1188):
    
    # Call to int(...): (line 1188)
    # Processing the call arguments (line 1188)
    # Getting the type of 'n' (line 1188)
    n_496657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 12), 'n', False)
    # Processing the call keyword arguments (line 1188)
    kwargs_496658 = {}
    # Getting the type of 'int' (line 1188)
    int_496656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 8), 'int', False)
    # Calling int(args, kwargs) (line 1188)
    int_call_result_496659 = invoke(stypy.reporting.localization.Localization(__file__, 1188, 8), int_496656, *[n_496657], **kwargs_496658)
    
    # Assigning a type to the variable 'n' (line 1188)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1188, 4), 'n', int_call_result_496659)
    
    # Assigning a Call to a Name (line 1191):
    
    # Assigning a Call to a Name (line 1191):
    
    # Call to max(...): (line 1191)
    # Processing the call arguments (line 1191)
    int_496661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1191, 13), 'int')
    # Getting the type of 'm' (line 1191)
    m_496662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 16), 'm', False)
    # Processing the call keyword arguments (line 1191)
    kwargs_496663 = {}
    # Getting the type of 'max' (line 1191)
    max_496660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 9), 'max', False)
    # Calling max(args, kwargs) (line 1191)
    max_call_result_496664 = invoke(stypy.reporting.localization.Localization(__file__, 1191, 9), max_496660, *[int_496661, m_496662], **kwargs_496663)
    
    # Assigning a type to the variable 'mm' (line 1191)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1191, 4), 'mm', max_call_result_496664)
    
    # Assigning a Call to a Name (line 1192):
    
    # Assigning a Call to a Name (line 1192):
    
    # Call to max(...): (line 1192)
    # Processing the call arguments (line 1192)
    int_496666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1192, 13), 'int')
    # Getting the type of 'n' (line 1192)
    n_496667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 16), 'n', False)
    # Processing the call keyword arguments (line 1192)
    kwargs_496668 = {}
    # Getting the type of 'max' (line 1192)
    max_496665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 9), 'max', False)
    # Calling max(args, kwargs) (line 1192)
    max_call_result_496669 = invoke(stypy.reporting.localization.Localization(__file__, 1192, 9), max_496665, *[int_496666, n_496667], **kwargs_496668)
    
    # Assigning a type to the variable 'nn' (line 1192)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1192, 4), 'nn', max_call_result_496669)
    
    
    # Call to iscomplex(...): (line 1194)
    # Processing the call arguments (line 1194)
    # Getting the type of 'z' (line 1194)
    z_496671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 17), 'z', False)
    # Processing the call keyword arguments (line 1194)
    kwargs_496672 = {}
    # Getting the type of 'iscomplex' (line 1194)
    iscomplex_496670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 7), 'iscomplex', False)
    # Calling iscomplex(args, kwargs) (line 1194)
    iscomplex_call_result_496673 = invoke(stypy.reporting.localization.Localization(__file__, 1194, 7), iscomplex_496670, *[z_496671], **kwargs_496672)
    
    # Testing the type of an if condition (line 1194)
    if_condition_496674 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1194, 4), iscomplex_call_result_496673)
    # Assigning a type to the variable 'if_condition_496674' (line 1194)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1194, 4), 'if_condition_496674', if_condition_496674)
    # SSA begins for if statement (line 1194)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 1195):
    
    # Assigning a Subscript to a Name (line 1195):
    
    # Obtaining the type of the subscript
    int_496675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1195, 8), 'int')
    
    # Call to clqmn(...): (line 1195)
    # Processing the call arguments (line 1195)
    # Getting the type of 'mm' (line 1195)
    mm_496678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 30), 'mm', False)
    # Getting the type of 'nn' (line 1195)
    nn_496679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 34), 'nn', False)
    # Getting the type of 'z' (line 1195)
    z_496680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 38), 'z', False)
    # Processing the call keyword arguments (line 1195)
    kwargs_496681 = {}
    # Getting the type of 'specfun' (line 1195)
    specfun_496676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 16), 'specfun', False)
    # Obtaining the member 'clqmn' of a type (line 1195)
    clqmn_496677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 16), specfun_496676, 'clqmn')
    # Calling clqmn(args, kwargs) (line 1195)
    clqmn_call_result_496682 = invoke(stypy.reporting.localization.Localization(__file__, 1195, 16), clqmn_496677, *[mm_496678, nn_496679, z_496680], **kwargs_496681)
    
    # Obtaining the member '__getitem__' of a type (line 1195)
    getitem___496683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 8), clqmn_call_result_496682, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1195)
    subscript_call_result_496684 = invoke(stypy.reporting.localization.Localization(__file__, 1195, 8), getitem___496683, int_496675)
    
    # Assigning a type to the variable 'tuple_var_assignment_494751' (line 1195)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1195, 8), 'tuple_var_assignment_494751', subscript_call_result_496684)
    
    # Assigning a Subscript to a Name (line 1195):
    
    # Obtaining the type of the subscript
    int_496685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1195, 8), 'int')
    
    # Call to clqmn(...): (line 1195)
    # Processing the call arguments (line 1195)
    # Getting the type of 'mm' (line 1195)
    mm_496688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 30), 'mm', False)
    # Getting the type of 'nn' (line 1195)
    nn_496689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 34), 'nn', False)
    # Getting the type of 'z' (line 1195)
    z_496690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 38), 'z', False)
    # Processing the call keyword arguments (line 1195)
    kwargs_496691 = {}
    # Getting the type of 'specfun' (line 1195)
    specfun_496686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 16), 'specfun', False)
    # Obtaining the member 'clqmn' of a type (line 1195)
    clqmn_496687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 16), specfun_496686, 'clqmn')
    # Calling clqmn(args, kwargs) (line 1195)
    clqmn_call_result_496692 = invoke(stypy.reporting.localization.Localization(__file__, 1195, 16), clqmn_496687, *[mm_496688, nn_496689, z_496690], **kwargs_496691)
    
    # Obtaining the member '__getitem__' of a type (line 1195)
    getitem___496693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 8), clqmn_call_result_496692, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1195)
    subscript_call_result_496694 = invoke(stypy.reporting.localization.Localization(__file__, 1195, 8), getitem___496693, int_496685)
    
    # Assigning a type to the variable 'tuple_var_assignment_494752' (line 1195)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1195, 8), 'tuple_var_assignment_494752', subscript_call_result_496694)
    
    # Assigning a Name to a Name (line 1195):
    # Getting the type of 'tuple_var_assignment_494751' (line 1195)
    tuple_var_assignment_494751_496695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 8), 'tuple_var_assignment_494751')
    # Assigning a type to the variable 'q' (line 1195)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1195, 8), 'q', tuple_var_assignment_494751_496695)
    
    # Assigning a Name to a Name (line 1195):
    # Getting the type of 'tuple_var_assignment_494752' (line 1195)
    tuple_var_assignment_494752_496696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 8), 'tuple_var_assignment_494752')
    # Assigning a type to the variable 'qd' (line 1195)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1195, 11), 'qd', tuple_var_assignment_494752_496696)
    # SSA branch for the else part of an if statement (line 1194)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Tuple (line 1197):
    
    # Assigning a Subscript to a Name (line 1197):
    
    # Obtaining the type of the subscript
    int_496697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1197, 8), 'int')
    
    # Call to lqmn(...): (line 1197)
    # Processing the call arguments (line 1197)
    # Getting the type of 'mm' (line 1197)
    mm_496700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 29), 'mm', False)
    # Getting the type of 'nn' (line 1197)
    nn_496701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 33), 'nn', False)
    # Getting the type of 'z' (line 1197)
    z_496702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 37), 'z', False)
    # Processing the call keyword arguments (line 1197)
    kwargs_496703 = {}
    # Getting the type of 'specfun' (line 1197)
    specfun_496698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 16), 'specfun', False)
    # Obtaining the member 'lqmn' of a type (line 1197)
    lqmn_496699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1197, 16), specfun_496698, 'lqmn')
    # Calling lqmn(args, kwargs) (line 1197)
    lqmn_call_result_496704 = invoke(stypy.reporting.localization.Localization(__file__, 1197, 16), lqmn_496699, *[mm_496700, nn_496701, z_496702], **kwargs_496703)
    
    # Obtaining the member '__getitem__' of a type (line 1197)
    getitem___496705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1197, 8), lqmn_call_result_496704, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1197)
    subscript_call_result_496706 = invoke(stypy.reporting.localization.Localization(__file__, 1197, 8), getitem___496705, int_496697)
    
    # Assigning a type to the variable 'tuple_var_assignment_494753' (line 1197)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1197, 8), 'tuple_var_assignment_494753', subscript_call_result_496706)
    
    # Assigning a Subscript to a Name (line 1197):
    
    # Obtaining the type of the subscript
    int_496707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1197, 8), 'int')
    
    # Call to lqmn(...): (line 1197)
    # Processing the call arguments (line 1197)
    # Getting the type of 'mm' (line 1197)
    mm_496710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 29), 'mm', False)
    # Getting the type of 'nn' (line 1197)
    nn_496711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 33), 'nn', False)
    # Getting the type of 'z' (line 1197)
    z_496712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 37), 'z', False)
    # Processing the call keyword arguments (line 1197)
    kwargs_496713 = {}
    # Getting the type of 'specfun' (line 1197)
    specfun_496708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 16), 'specfun', False)
    # Obtaining the member 'lqmn' of a type (line 1197)
    lqmn_496709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1197, 16), specfun_496708, 'lqmn')
    # Calling lqmn(args, kwargs) (line 1197)
    lqmn_call_result_496714 = invoke(stypy.reporting.localization.Localization(__file__, 1197, 16), lqmn_496709, *[mm_496710, nn_496711, z_496712], **kwargs_496713)
    
    # Obtaining the member '__getitem__' of a type (line 1197)
    getitem___496715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1197, 8), lqmn_call_result_496714, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1197)
    subscript_call_result_496716 = invoke(stypy.reporting.localization.Localization(__file__, 1197, 8), getitem___496715, int_496707)
    
    # Assigning a type to the variable 'tuple_var_assignment_494754' (line 1197)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1197, 8), 'tuple_var_assignment_494754', subscript_call_result_496716)
    
    # Assigning a Name to a Name (line 1197):
    # Getting the type of 'tuple_var_assignment_494753' (line 1197)
    tuple_var_assignment_494753_496717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 8), 'tuple_var_assignment_494753')
    # Assigning a type to the variable 'q' (line 1197)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1197, 8), 'q', tuple_var_assignment_494753_496717)
    
    # Assigning a Name to a Name (line 1197):
    # Getting the type of 'tuple_var_assignment_494754' (line 1197)
    tuple_var_assignment_494754_496718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 8), 'tuple_var_assignment_494754')
    # Assigning a type to the variable 'qd' (line 1197)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1197, 11), 'qd', tuple_var_assignment_494754_496718)
    # SSA join for if statement (line 1194)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1198)
    tuple_496719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1198, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1198)
    # Adding element type (line 1198)
    
    # Obtaining the type of the subscript
    # Getting the type of 'm' (line 1198)
    m_496720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 15), 'm')
    int_496721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1198, 17), 'int')
    # Applying the binary operator '+' (line 1198)
    result_add_496722 = python_operator(stypy.reporting.localization.Localization(__file__, 1198, 15), '+', m_496720, int_496721)
    
    slice_496723 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1198, 11), None, result_add_496722, None)
    # Getting the type of 'n' (line 1198)
    n_496724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 23), 'n')
    int_496725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1198, 25), 'int')
    # Applying the binary operator '+' (line 1198)
    result_add_496726 = python_operator(stypy.reporting.localization.Localization(__file__, 1198, 23), '+', n_496724, int_496725)
    
    slice_496727 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1198, 11), None, result_add_496726, None)
    # Getting the type of 'q' (line 1198)
    q_496728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 11), 'q')
    # Obtaining the member '__getitem__' of a type (line 1198)
    getitem___496729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 11), q_496728, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1198)
    subscript_call_result_496730 = invoke(stypy.reporting.localization.Localization(__file__, 1198, 11), getitem___496729, (slice_496723, slice_496727))
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1198, 11), tuple_496719, subscript_call_result_496730)
    # Adding element type (line 1198)
    
    # Obtaining the type of the subscript
    # Getting the type of 'm' (line 1198)
    m_496731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 35), 'm')
    int_496732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1198, 37), 'int')
    # Applying the binary operator '+' (line 1198)
    result_add_496733 = python_operator(stypy.reporting.localization.Localization(__file__, 1198, 35), '+', m_496731, int_496732)
    
    slice_496734 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1198, 30), None, result_add_496733, None)
    # Getting the type of 'n' (line 1198)
    n_496735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 43), 'n')
    int_496736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1198, 45), 'int')
    # Applying the binary operator '+' (line 1198)
    result_add_496737 = python_operator(stypy.reporting.localization.Localization(__file__, 1198, 43), '+', n_496735, int_496736)
    
    slice_496738 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1198, 30), None, result_add_496737, None)
    # Getting the type of 'qd' (line 1198)
    qd_496739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 30), 'qd')
    # Obtaining the member '__getitem__' of a type (line 1198)
    getitem___496740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 30), qd_496739, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1198)
    subscript_call_result_496741 = invoke(stypy.reporting.localization.Localization(__file__, 1198, 30), getitem___496740, (slice_496734, slice_496738))
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1198, 11), tuple_496719, subscript_call_result_496741)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1198)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1198, 4), 'stypy_return_type', tuple_496719)
    
    # ################# End of 'lqmn(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'lqmn' in the type store
    # Getting the type of 'stypy_return_type' (line 1148)
    stypy_return_type_496742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_496742)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'lqmn'
    return stypy_return_type_496742

# Assigning a type to the variable 'lqmn' (line 1148)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1148, 0), 'lqmn', lqmn)

@norecursion
def bernoulli(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'bernoulli'
    module_type_store = module_type_store.open_function_context('bernoulli', 1201, 0, False)
    
    # Passed parameters checking function
    bernoulli.stypy_localization = localization
    bernoulli.stypy_type_of_self = None
    bernoulli.stypy_type_store = module_type_store
    bernoulli.stypy_function_name = 'bernoulli'
    bernoulli.stypy_param_names_list = ['n']
    bernoulli.stypy_varargs_param_name = None
    bernoulli.stypy_kwargs_param_name = None
    bernoulli.stypy_call_defaults = defaults
    bernoulli.stypy_call_varargs = varargs
    bernoulli.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'bernoulli', ['n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'bernoulli', localization, ['n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'bernoulli(...)' code ##################

    str_496743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1210, (-1)), 'str', 'Bernoulli numbers B0..Bn (inclusive).\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to isscalar(...): (line 1211)
    # Processing the call arguments (line 1211)
    # Getting the type of 'n' (line 1211)
    n_496745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 20), 'n', False)
    # Processing the call keyword arguments (line 1211)
    kwargs_496746 = {}
    # Getting the type of 'isscalar' (line 1211)
    isscalar_496744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1211)
    isscalar_call_result_496747 = invoke(stypy.reporting.localization.Localization(__file__, 1211, 11), isscalar_496744, *[n_496745], **kwargs_496746)
    
    # Applying the 'not' unary operator (line 1211)
    result_not__496748 = python_operator(stypy.reporting.localization.Localization(__file__, 1211, 7), 'not', isscalar_call_result_496747)
    
    
    # Getting the type of 'n' (line 1211)
    n_496749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 27), 'n')
    int_496750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1211, 31), 'int')
    # Applying the binary operator '<' (line 1211)
    result_lt_496751 = python_operator(stypy.reporting.localization.Localization(__file__, 1211, 27), '<', n_496749, int_496750)
    
    # Applying the binary operator 'or' (line 1211)
    result_or_keyword_496752 = python_operator(stypy.reporting.localization.Localization(__file__, 1211, 7), 'or', result_not__496748, result_lt_496751)
    
    # Testing the type of an if condition (line 1211)
    if_condition_496753 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1211, 4), result_or_keyword_496752)
    # Assigning a type to the variable 'if_condition_496753' (line 1211)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1211, 4), 'if_condition_496753', if_condition_496753)
    # SSA begins for if statement (line 1211)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1212)
    # Processing the call arguments (line 1212)
    str_496755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1212, 25), 'str', 'n must be a non-negative integer.')
    # Processing the call keyword arguments (line 1212)
    kwargs_496756 = {}
    # Getting the type of 'ValueError' (line 1212)
    ValueError_496754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1212)
    ValueError_call_result_496757 = invoke(stypy.reporting.localization.Localization(__file__, 1212, 14), ValueError_496754, *[str_496755], **kwargs_496756)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1212, 8), ValueError_call_result_496757, 'raise parameter', BaseException)
    # SSA join for if statement (line 1211)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1213):
    
    # Assigning a Call to a Name (line 1213):
    
    # Call to int(...): (line 1213)
    # Processing the call arguments (line 1213)
    # Getting the type of 'n' (line 1213)
    n_496759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 12), 'n', False)
    # Processing the call keyword arguments (line 1213)
    kwargs_496760 = {}
    # Getting the type of 'int' (line 1213)
    int_496758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 8), 'int', False)
    # Calling int(args, kwargs) (line 1213)
    int_call_result_496761 = invoke(stypy.reporting.localization.Localization(__file__, 1213, 8), int_496758, *[n_496759], **kwargs_496760)
    
    # Assigning a type to the variable 'n' (line 1213)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1213, 4), 'n', int_call_result_496761)
    
    
    # Getting the type of 'n' (line 1214)
    n_496762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 8), 'n')
    int_496763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1214, 12), 'int')
    # Applying the binary operator '<' (line 1214)
    result_lt_496764 = python_operator(stypy.reporting.localization.Localization(__file__, 1214, 8), '<', n_496762, int_496763)
    
    # Testing the type of an if condition (line 1214)
    if_condition_496765 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1214, 4), result_lt_496764)
    # Assigning a type to the variable 'if_condition_496765' (line 1214)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 4), 'if_condition_496765', if_condition_496765)
    # SSA begins for if statement (line 1214)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1215):
    
    # Assigning a Num to a Name (line 1215):
    int_496766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1215, 13), 'int')
    # Assigning a type to the variable 'n1' (line 1215)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1215, 8), 'n1', int_496766)
    # SSA branch for the else part of an if statement (line 1214)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1217):
    
    # Assigning a Name to a Name (line 1217):
    # Getting the type of 'n' (line 1217)
    n_496767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 13), 'n')
    # Assigning a type to the variable 'n1' (line 1217)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1217, 8), 'n1', n_496767)
    # SSA join for if statement (line 1214)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 1218)
    n_496768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 37), 'n')
    int_496769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1218, 39), 'int')
    # Applying the binary operator '+' (line 1218)
    result_add_496770 = python_operator(stypy.reporting.localization.Localization(__file__, 1218, 37), '+', n_496768, int_496769)
    
    slice_496771 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1218, 11), None, result_add_496770, None)
    
    # Call to bernob(...): (line 1218)
    # Processing the call arguments (line 1218)
    
    # Call to int(...): (line 1218)
    # Processing the call arguments (line 1218)
    # Getting the type of 'n1' (line 1218)
    n1_496775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 30), 'n1', False)
    # Processing the call keyword arguments (line 1218)
    kwargs_496776 = {}
    # Getting the type of 'int' (line 1218)
    int_496774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 26), 'int', False)
    # Calling int(args, kwargs) (line 1218)
    int_call_result_496777 = invoke(stypy.reporting.localization.Localization(__file__, 1218, 26), int_496774, *[n1_496775], **kwargs_496776)
    
    # Processing the call keyword arguments (line 1218)
    kwargs_496778 = {}
    # Getting the type of 'specfun' (line 1218)
    specfun_496772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 11), 'specfun', False)
    # Obtaining the member 'bernob' of a type (line 1218)
    bernob_496773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1218, 11), specfun_496772, 'bernob')
    # Calling bernob(args, kwargs) (line 1218)
    bernob_call_result_496779 = invoke(stypy.reporting.localization.Localization(__file__, 1218, 11), bernob_496773, *[int_call_result_496777], **kwargs_496778)
    
    # Obtaining the member '__getitem__' of a type (line 1218)
    getitem___496780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1218, 11), bernob_call_result_496779, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1218)
    subscript_call_result_496781 = invoke(stypy.reporting.localization.Localization(__file__, 1218, 11), getitem___496780, slice_496771)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1218)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1218, 4), 'stypy_return_type', subscript_call_result_496781)
    
    # ################# End of 'bernoulli(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'bernoulli' in the type store
    # Getting the type of 'stypy_return_type' (line 1201)
    stypy_return_type_496782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_496782)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'bernoulli'
    return stypy_return_type_496782

# Assigning a type to the variable 'bernoulli' (line 1201)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1201, 0), 'bernoulli', bernoulli)

@norecursion
def euler(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'euler'
    module_type_store = module_type_store.open_function_context('euler', 1221, 0, False)
    
    # Passed parameters checking function
    euler.stypy_localization = localization
    euler.stypy_type_of_self = None
    euler.stypy_type_store = module_type_store
    euler.stypy_function_name = 'euler'
    euler.stypy_param_names_list = ['n']
    euler.stypy_varargs_param_name = None
    euler.stypy_kwargs_param_name = None
    euler.stypy_call_defaults = defaults
    euler.stypy_call_varargs = varargs
    euler.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'euler', ['n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'euler', localization, ['n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'euler(...)' code ##################

    str_496783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1230, (-1)), 'str', 'Euler numbers E0..En (inclusive).\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to isscalar(...): (line 1231)
    # Processing the call arguments (line 1231)
    # Getting the type of 'n' (line 1231)
    n_496785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 20), 'n', False)
    # Processing the call keyword arguments (line 1231)
    kwargs_496786 = {}
    # Getting the type of 'isscalar' (line 1231)
    isscalar_496784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1231)
    isscalar_call_result_496787 = invoke(stypy.reporting.localization.Localization(__file__, 1231, 11), isscalar_496784, *[n_496785], **kwargs_496786)
    
    # Applying the 'not' unary operator (line 1231)
    result_not__496788 = python_operator(stypy.reporting.localization.Localization(__file__, 1231, 7), 'not', isscalar_call_result_496787)
    
    
    # Getting the type of 'n' (line 1231)
    n_496789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 27), 'n')
    int_496790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1231, 31), 'int')
    # Applying the binary operator '<' (line 1231)
    result_lt_496791 = python_operator(stypy.reporting.localization.Localization(__file__, 1231, 27), '<', n_496789, int_496790)
    
    # Applying the binary operator 'or' (line 1231)
    result_or_keyword_496792 = python_operator(stypy.reporting.localization.Localization(__file__, 1231, 7), 'or', result_not__496788, result_lt_496791)
    
    # Testing the type of an if condition (line 1231)
    if_condition_496793 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1231, 4), result_or_keyword_496792)
    # Assigning a type to the variable 'if_condition_496793' (line 1231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1231, 4), 'if_condition_496793', if_condition_496793)
    # SSA begins for if statement (line 1231)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1232)
    # Processing the call arguments (line 1232)
    str_496795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1232, 25), 'str', 'n must be a non-negative integer.')
    # Processing the call keyword arguments (line 1232)
    kwargs_496796 = {}
    # Getting the type of 'ValueError' (line 1232)
    ValueError_496794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1232)
    ValueError_call_result_496797 = invoke(stypy.reporting.localization.Localization(__file__, 1232, 14), ValueError_496794, *[str_496795], **kwargs_496796)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1232, 8), ValueError_call_result_496797, 'raise parameter', BaseException)
    # SSA join for if statement (line 1231)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1233):
    
    # Assigning a Call to a Name (line 1233):
    
    # Call to int(...): (line 1233)
    # Processing the call arguments (line 1233)
    # Getting the type of 'n' (line 1233)
    n_496799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 12), 'n', False)
    # Processing the call keyword arguments (line 1233)
    kwargs_496800 = {}
    # Getting the type of 'int' (line 1233)
    int_496798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 8), 'int', False)
    # Calling int(args, kwargs) (line 1233)
    int_call_result_496801 = invoke(stypy.reporting.localization.Localization(__file__, 1233, 8), int_496798, *[n_496799], **kwargs_496800)
    
    # Assigning a type to the variable 'n' (line 1233)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1233, 4), 'n', int_call_result_496801)
    
    
    # Getting the type of 'n' (line 1234)
    n_496802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 8), 'n')
    int_496803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1234, 12), 'int')
    # Applying the binary operator '<' (line 1234)
    result_lt_496804 = python_operator(stypy.reporting.localization.Localization(__file__, 1234, 8), '<', n_496802, int_496803)
    
    # Testing the type of an if condition (line 1234)
    if_condition_496805 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1234, 4), result_lt_496804)
    # Assigning a type to the variable 'if_condition_496805' (line 1234)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1234, 4), 'if_condition_496805', if_condition_496805)
    # SSA begins for if statement (line 1234)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1235):
    
    # Assigning a Num to a Name (line 1235):
    int_496806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1235, 13), 'int')
    # Assigning a type to the variable 'n1' (line 1235)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1235, 8), 'n1', int_496806)
    # SSA branch for the else part of an if statement (line 1234)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1237):
    
    # Assigning a Name to a Name (line 1237):
    # Getting the type of 'n' (line 1237)
    n_496807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 13), 'n')
    # Assigning a type to the variable 'n1' (line 1237)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1237, 8), 'n1', n_496807)
    # SSA join for if statement (line 1234)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 1238)
    n_496808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 32), 'n')
    int_496809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, 34), 'int')
    # Applying the binary operator '+' (line 1238)
    result_add_496810 = python_operator(stypy.reporting.localization.Localization(__file__, 1238, 32), '+', n_496808, int_496809)
    
    slice_496811 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1238, 11), None, result_add_496810, None)
    
    # Call to eulerb(...): (line 1238)
    # Processing the call arguments (line 1238)
    # Getting the type of 'n1' (line 1238)
    n1_496814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 26), 'n1', False)
    # Processing the call keyword arguments (line 1238)
    kwargs_496815 = {}
    # Getting the type of 'specfun' (line 1238)
    specfun_496812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 11), 'specfun', False)
    # Obtaining the member 'eulerb' of a type (line 1238)
    eulerb_496813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 11), specfun_496812, 'eulerb')
    # Calling eulerb(args, kwargs) (line 1238)
    eulerb_call_result_496816 = invoke(stypy.reporting.localization.Localization(__file__, 1238, 11), eulerb_496813, *[n1_496814], **kwargs_496815)
    
    # Obtaining the member '__getitem__' of a type (line 1238)
    getitem___496817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 11), eulerb_call_result_496816, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1238)
    subscript_call_result_496818 = invoke(stypy.reporting.localization.Localization(__file__, 1238, 11), getitem___496817, slice_496811)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1238)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1238, 4), 'stypy_return_type', subscript_call_result_496818)
    
    # ################# End of 'euler(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'euler' in the type store
    # Getting the type of 'stypy_return_type' (line 1221)
    stypy_return_type_496819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_496819)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'euler'
    return stypy_return_type_496819

# Assigning a type to the variable 'euler' (line 1221)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1221, 0), 'euler', euler)

@norecursion
def lpn(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'lpn'
    module_type_store = module_type_store.open_function_context('lpn', 1241, 0, False)
    
    # Passed parameters checking function
    lpn.stypy_localization = localization
    lpn.stypy_type_of_self = None
    lpn.stypy_type_store = module_type_store
    lpn.stypy_function_name = 'lpn'
    lpn.stypy_param_names_list = ['n', 'z']
    lpn.stypy_varargs_param_name = None
    lpn.stypy_kwargs_param_name = None
    lpn.stypy_call_defaults = defaults
    lpn.stypy_call_varargs = varargs
    lpn.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'lpn', ['n', 'z'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'lpn', localization, ['n', 'z'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'lpn(...)' code ##################

    str_496820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1255, (-1)), 'str', 'Legendre function of the first kind.\n\n    Compute sequence of Legendre functions of the first kind (polynomials),\n    Pn(z) and derivatives for all degrees from 0 to n (inclusive).\n\n    See also special.legendre for polynomial class.\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    
    # Evaluating a boolean operation
    
    # Call to isscalar(...): (line 1256)
    # Processing the call arguments (line 1256)
    # Getting the type of 'n' (line 1256)
    n_496822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 21), 'n', False)
    # Processing the call keyword arguments (line 1256)
    kwargs_496823 = {}
    # Getting the type of 'isscalar' (line 1256)
    isscalar_496821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 12), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1256)
    isscalar_call_result_496824 = invoke(stypy.reporting.localization.Localization(__file__, 1256, 12), isscalar_496821, *[n_496822], **kwargs_496823)
    
    
    # Call to isscalar(...): (line 1256)
    # Processing the call arguments (line 1256)
    # Getting the type of 'z' (line 1256)
    z_496826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 37), 'z', False)
    # Processing the call keyword arguments (line 1256)
    kwargs_496827 = {}
    # Getting the type of 'isscalar' (line 1256)
    isscalar_496825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 28), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1256)
    isscalar_call_result_496828 = invoke(stypy.reporting.localization.Localization(__file__, 1256, 28), isscalar_496825, *[z_496826], **kwargs_496827)
    
    # Applying the binary operator 'and' (line 1256)
    result_and_keyword_496829 = python_operator(stypy.reporting.localization.Localization(__file__, 1256, 12), 'and', isscalar_call_result_496824, isscalar_call_result_496828)
    
    # Applying the 'not' unary operator (line 1256)
    result_not__496830 = python_operator(stypy.reporting.localization.Localization(__file__, 1256, 7), 'not', result_and_keyword_496829)
    
    # Testing the type of an if condition (line 1256)
    if_condition_496831 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1256, 4), result_not__496830)
    # Assigning a type to the variable 'if_condition_496831' (line 1256)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1256, 4), 'if_condition_496831', if_condition_496831)
    # SSA begins for if statement (line 1256)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1257)
    # Processing the call arguments (line 1257)
    str_496833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1257, 25), 'str', 'arguments must be scalars.')
    # Processing the call keyword arguments (line 1257)
    kwargs_496834 = {}
    # Getting the type of 'ValueError' (line 1257)
    ValueError_496832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1257)
    ValueError_call_result_496835 = invoke(stypy.reporting.localization.Localization(__file__, 1257, 14), ValueError_496832, *[str_496833], **kwargs_496834)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1257, 8), ValueError_call_result_496835, 'raise parameter', BaseException)
    # SSA join for if statement (line 1256)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1258):
    
    # Assigning a Call to a Name (line 1258):
    
    # Call to _nonneg_int_or_fail(...): (line 1258)
    # Processing the call arguments (line 1258)
    # Getting the type of 'n' (line 1258)
    n_496837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 28), 'n', False)
    str_496838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1258, 31), 'str', 'n')
    # Processing the call keyword arguments (line 1258)
    # Getting the type of 'False' (line 1258)
    False_496839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 43), 'False', False)
    keyword_496840 = False_496839
    kwargs_496841 = {'strict': keyword_496840}
    # Getting the type of '_nonneg_int_or_fail' (line 1258)
    _nonneg_int_or_fail_496836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 8), '_nonneg_int_or_fail', False)
    # Calling _nonneg_int_or_fail(args, kwargs) (line 1258)
    _nonneg_int_or_fail_call_result_496842 = invoke(stypy.reporting.localization.Localization(__file__, 1258, 8), _nonneg_int_or_fail_496836, *[n_496837, str_496838], **kwargs_496841)
    
    # Assigning a type to the variable 'n' (line 1258)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1258, 4), 'n', _nonneg_int_or_fail_call_result_496842)
    
    
    # Getting the type of 'n' (line 1259)
    n_496843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 8), 'n')
    int_496844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1259, 12), 'int')
    # Applying the binary operator '<' (line 1259)
    result_lt_496845 = python_operator(stypy.reporting.localization.Localization(__file__, 1259, 8), '<', n_496843, int_496844)
    
    # Testing the type of an if condition (line 1259)
    if_condition_496846 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1259, 4), result_lt_496845)
    # Assigning a type to the variable 'if_condition_496846' (line 1259)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1259, 4), 'if_condition_496846', if_condition_496846)
    # SSA begins for if statement (line 1259)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1260):
    
    # Assigning a Num to a Name (line 1260):
    int_496847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1260, 13), 'int')
    # Assigning a type to the variable 'n1' (line 1260)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1260, 8), 'n1', int_496847)
    # SSA branch for the else part of an if statement (line 1259)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1262):
    
    # Assigning a Name to a Name (line 1262):
    # Getting the type of 'n' (line 1262)
    n_496848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 13), 'n')
    # Assigning a type to the variable 'n1' (line 1262)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1262, 8), 'n1', n_496848)
    # SSA join for if statement (line 1259)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to iscomplex(...): (line 1263)
    # Processing the call arguments (line 1263)
    # Getting the type of 'z' (line 1263)
    z_496850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 17), 'z', False)
    # Processing the call keyword arguments (line 1263)
    kwargs_496851 = {}
    # Getting the type of 'iscomplex' (line 1263)
    iscomplex_496849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 7), 'iscomplex', False)
    # Calling iscomplex(args, kwargs) (line 1263)
    iscomplex_call_result_496852 = invoke(stypy.reporting.localization.Localization(__file__, 1263, 7), iscomplex_496849, *[z_496850], **kwargs_496851)
    
    # Testing the type of an if condition (line 1263)
    if_condition_496853 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1263, 4), iscomplex_call_result_496852)
    # Assigning a type to the variable 'if_condition_496853' (line 1263)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1263, 4), 'if_condition_496853', if_condition_496853)
    # SSA begins for if statement (line 1263)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 1264):
    
    # Assigning a Subscript to a Name (line 1264):
    
    # Obtaining the type of the subscript
    int_496854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1264, 8), 'int')
    
    # Call to clpn(...): (line 1264)
    # Processing the call arguments (line 1264)
    # Getting the type of 'n1' (line 1264)
    n1_496857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 30), 'n1', False)
    # Getting the type of 'z' (line 1264)
    z_496858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 34), 'z', False)
    # Processing the call keyword arguments (line 1264)
    kwargs_496859 = {}
    # Getting the type of 'specfun' (line 1264)
    specfun_496855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 17), 'specfun', False)
    # Obtaining the member 'clpn' of a type (line 1264)
    clpn_496856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1264, 17), specfun_496855, 'clpn')
    # Calling clpn(args, kwargs) (line 1264)
    clpn_call_result_496860 = invoke(stypy.reporting.localization.Localization(__file__, 1264, 17), clpn_496856, *[n1_496857, z_496858], **kwargs_496859)
    
    # Obtaining the member '__getitem__' of a type (line 1264)
    getitem___496861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1264, 8), clpn_call_result_496860, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1264)
    subscript_call_result_496862 = invoke(stypy.reporting.localization.Localization(__file__, 1264, 8), getitem___496861, int_496854)
    
    # Assigning a type to the variable 'tuple_var_assignment_494755' (line 1264)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1264, 8), 'tuple_var_assignment_494755', subscript_call_result_496862)
    
    # Assigning a Subscript to a Name (line 1264):
    
    # Obtaining the type of the subscript
    int_496863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1264, 8), 'int')
    
    # Call to clpn(...): (line 1264)
    # Processing the call arguments (line 1264)
    # Getting the type of 'n1' (line 1264)
    n1_496866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 30), 'n1', False)
    # Getting the type of 'z' (line 1264)
    z_496867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 34), 'z', False)
    # Processing the call keyword arguments (line 1264)
    kwargs_496868 = {}
    # Getting the type of 'specfun' (line 1264)
    specfun_496864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 17), 'specfun', False)
    # Obtaining the member 'clpn' of a type (line 1264)
    clpn_496865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1264, 17), specfun_496864, 'clpn')
    # Calling clpn(args, kwargs) (line 1264)
    clpn_call_result_496869 = invoke(stypy.reporting.localization.Localization(__file__, 1264, 17), clpn_496865, *[n1_496866, z_496867], **kwargs_496868)
    
    # Obtaining the member '__getitem__' of a type (line 1264)
    getitem___496870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1264, 8), clpn_call_result_496869, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1264)
    subscript_call_result_496871 = invoke(stypy.reporting.localization.Localization(__file__, 1264, 8), getitem___496870, int_496863)
    
    # Assigning a type to the variable 'tuple_var_assignment_494756' (line 1264)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1264, 8), 'tuple_var_assignment_494756', subscript_call_result_496871)
    
    # Assigning a Name to a Name (line 1264):
    # Getting the type of 'tuple_var_assignment_494755' (line 1264)
    tuple_var_assignment_494755_496872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 8), 'tuple_var_assignment_494755')
    # Assigning a type to the variable 'pn' (line 1264)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1264, 8), 'pn', tuple_var_assignment_494755_496872)
    
    # Assigning a Name to a Name (line 1264):
    # Getting the type of 'tuple_var_assignment_494756' (line 1264)
    tuple_var_assignment_494756_496873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 8), 'tuple_var_assignment_494756')
    # Assigning a type to the variable 'pd' (line 1264)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1264, 12), 'pd', tuple_var_assignment_494756_496873)
    # SSA branch for the else part of an if statement (line 1263)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Tuple (line 1266):
    
    # Assigning a Subscript to a Name (line 1266):
    
    # Obtaining the type of the subscript
    int_496874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1266, 8), 'int')
    
    # Call to lpn(...): (line 1266)
    # Processing the call arguments (line 1266)
    # Getting the type of 'n1' (line 1266)
    n1_496877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 29), 'n1', False)
    # Getting the type of 'z' (line 1266)
    z_496878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 33), 'z', False)
    # Processing the call keyword arguments (line 1266)
    kwargs_496879 = {}
    # Getting the type of 'specfun' (line 1266)
    specfun_496875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 17), 'specfun', False)
    # Obtaining the member 'lpn' of a type (line 1266)
    lpn_496876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1266, 17), specfun_496875, 'lpn')
    # Calling lpn(args, kwargs) (line 1266)
    lpn_call_result_496880 = invoke(stypy.reporting.localization.Localization(__file__, 1266, 17), lpn_496876, *[n1_496877, z_496878], **kwargs_496879)
    
    # Obtaining the member '__getitem__' of a type (line 1266)
    getitem___496881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1266, 8), lpn_call_result_496880, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1266)
    subscript_call_result_496882 = invoke(stypy.reporting.localization.Localization(__file__, 1266, 8), getitem___496881, int_496874)
    
    # Assigning a type to the variable 'tuple_var_assignment_494757' (line 1266)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1266, 8), 'tuple_var_assignment_494757', subscript_call_result_496882)
    
    # Assigning a Subscript to a Name (line 1266):
    
    # Obtaining the type of the subscript
    int_496883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1266, 8), 'int')
    
    # Call to lpn(...): (line 1266)
    # Processing the call arguments (line 1266)
    # Getting the type of 'n1' (line 1266)
    n1_496886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 29), 'n1', False)
    # Getting the type of 'z' (line 1266)
    z_496887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 33), 'z', False)
    # Processing the call keyword arguments (line 1266)
    kwargs_496888 = {}
    # Getting the type of 'specfun' (line 1266)
    specfun_496884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 17), 'specfun', False)
    # Obtaining the member 'lpn' of a type (line 1266)
    lpn_496885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1266, 17), specfun_496884, 'lpn')
    # Calling lpn(args, kwargs) (line 1266)
    lpn_call_result_496889 = invoke(stypy.reporting.localization.Localization(__file__, 1266, 17), lpn_496885, *[n1_496886, z_496887], **kwargs_496888)
    
    # Obtaining the member '__getitem__' of a type (line 1266)
    getitem___496890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1266, 8), lpn_call_result_496889, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1266)
    subscript_call_result_496891 = invoke(stypy.reporting.localization.Localization(__file__, 1266, 8), getitem___496890, int_496883)
    
    # Assigning a type to the variable 'tuple_var_assignment_494758' (line 1266)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1266, 8), 'tuple_var_assignment_494758', subscript_call_result_496891)
    
    # Assigning a Name to a Name (line 1266):
    # Getting the type of 'tuple_var_assignment_494757' (line 1266)
    tuple_var_assignment_494757_496892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 8), 'tuple_var_assignment_494757')
    # Assigning a type to the variable 'pn' (line 1266)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1266, 8), 'pn', tuple_var_assignment_494757_496892)
    
    # Assigning a Name to a Name (line 1266):
    # Getting the type of 'tuple_var_assignment_494758' (line 1266)
    tuple_var_assignment_494758_496893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 8), 'tuple_var_assignment_494758')
    # Assigning a type to the variable 'pd' (line 1266)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1266, 12), 'pd', tuple_var_assignment_494758_496893)
    # SSA join for if statement (line 1263)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1267)
    tuple_496894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1267, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1267)
    # Adding element type (line 1267)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 1267)
    n_496895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 16), 'n')
    int_496896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1267, 18), 'int')
    # Applying the binary operator '+' (line 1267)
    result_add_496897 = python_operator(stypy.reporting.localization.Localization(__file__, 1267, 16), '+', n_496895, int_496896)
    
    slice_496898 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1267, 11), None, result_add_496897, None)
    # Getting the type of 'pn' (line 1267)
    pn_496899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 11), 'pn')
    # Obtaining the member '__getitem__' of a type (line 1267)
    getitem___496900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1267, 11), pn_496899, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1267)
    subscript_call_result_496901 = invoke(stypy.reporting.localization.Localization(__file__, 1267, 11), getitem___496900, slice_496898)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1267, 11), tuple_496894, subscript_call_result_496901)
    # Adding element type (line 1267)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 1267)
    n_496902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 28), 'n')
    int_496903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1267, 30), 'int')
    # Applying the binary operator '+' (line 1267)
    result_add_496904 = python_operator(stypy.reporting.localization.Localization(__file__, 1267, 28), '+', n_496902, int_496903)
    
    slice_496905 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1267, 23), None, result_add_496904, None)
    # Getting the type of 'pd' (line 1267)
    pd_496906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 23), 'pd')
    # Obtaining the member '__getitem__' of a type (line 1267)
    getitem___496907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1267, 23), pd_496906, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1267)
    subscript_call_result_496908 = invoke(stypy.reporting.localization.Localization(__file__, 1267, 23), getitem___496907, slice_496905)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1267, 11), tuple_496894, subscript_call_result_496908)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1267)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1267, 4), 'stypy_return_type', tuple_496894)
    
    # ################# End of 'lpn(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'lpn' in the type store
    # Getting the type of 'stypy_return_type' (line 1241)
    stypy_return_type_496909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_496909)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'lpn'
    return stypy_return_type_496909

# Assigning a type to the variable 'lpn' (line 1241)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1241, 0), 'lpn', lpn)

@norecursion
def lqn(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'lqn'
    module_type_store = module_type_store.open_function_context('lqn', 1270, 0, False)
    
    # Passed parameters checking function
    lqn.stypy_localization = localization
    lqn.stypy_type_of_self = None
    lqn.stypy_type_store = module_type_store
    lqn.stypy_function_name = 'lqn'
    lqn.stypy_param_names_list = ['n', 'z']
    lqn.stypy_varargs_param_name = None
    lqn.stypy_kwargs_param_name = None
    lqn.stypy_call_defaults = defaults
    lqn.stypy_call_varargs = varargs
    lqn.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'lqn', ['n', 'z'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'lqn', localization, ['n', 'z'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'lqn(...)' code ##################

    str_496910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1282, (-1)), 'str', 'Legendre function of the second kind.\n\n    Compute sequence of Legendre functions of the second kind, Qn(z) and\n    derivatives for all degrees from 0 to n (inclusive).\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    
    # Evaluating a boolean operation
    
    # Call to isscalar(...): (line 1283)
    # Processing the call arguments (line 1283)
    # Getting the type of 'n' (line 1283)
    n_496912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 21), 'n', False)
    # Processing the call keyword arguments (line 1283)
    kwargs_496913 = {}
    # Getting the type of 'isscalar' (line 1283)
    isscalar_496911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 12), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1283)
    isscalar_call_result_496914 = invoke(stypy.reporting.localization.Localization(__file__, 1283, 12), isscalar_496911, *[n_496912], **kwargs_496913)
    
    
    # Call to isscalar(...): (line 1283)
    # Processing the call arguments (line 1283)
    # Getting the type of 'z' (line 1283)
    z_496916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 37), 'z', False)
    # Processing the call keyword arguments (line 1283)
    kwargs_496917 = {}
    # Getting the type of 'isscalar' (line 1283)
    isscalar_496915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 28), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1283)
    isscalar_call_result_496918 = invoke(stypy.reporting.localization.Localization(__file__, 1283, 28), isscalar_496915, *[z_496916], **kwargs_496917)
    
    # Applying the binary operator 'and' (line 1283)
    result_and_keyword_496919 = python_operator(stypy.reporting.localization.Localization(__file__, 1283, 12), 'and', isscalar_call_result_496914, isscalar_call_result_496918)
    
    # Applying the 'not' unary operator (line 1283)
    result_not__496920 = python_operator(stypy.reporting.localization.Localization(__file__, 1283, 7), 'not', result_and_keyword_496919)
    
    # Testing the type of an if condition (line 1283)
    if_condition_496921 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1283, 4), result_not__496920)
    # Assigning a type to the variable 'if_condition_496921' (line 1283)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1283, 4), 'if_condition_496921', if_condition_496921)
    # SSA begins for if statement (line 1283)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1284)
    # Processing the call arguments (line 1284)
    str_496923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1284, 25), 'str', 'arguments must be scalars.')
    # Processing the call keyword arguments (line 1284)
    kwargs_496924 = {}
    # Getting the type of 'ValueError' (line 1284)
    ValueError_496922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1284)
    ValueError_call_result_496925 = invoke(stypy.reporting.localization.Localization(__file__, 1284, 14), ValueError_496922, *[str_496923], **kwargs_496924)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1284, 8), ValueError_call_result_496925, 'raise parameter', BaseException)
    # SSA join for if statement (line 1283)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1285):
    
    # Assigning a Call to a Name (line 1285):
    
    # Call to _nonneg_int_or_fail(...): (line 1285)
    # Processing the call arguments (line 1285)
    # Getting the type of 'n' (line 1285)
    n_496927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 28), 'n', False)
    str_496928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1285, 31), 'str', 'n')
    # Processing the call keyword arguments (line 1285)
    # Getting the type of 'False' (line 1285)
    False_496929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 43), 'False', False)
    keyword_496930 = False_496929
    kwargs_496931 = {'strict': keyword_496930}
    # Getting the type of '_nonneg_int_or_fail' (line 1285)
    _nonneg_int_or_fail_496926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 8), '_nonneg_int_or_fail', False)
    # Calling _nonneg_int_or_fail(args, kwargs) (line 1285)
    _nonneg_int_or_fail_call_result_496932 = invoke(stypy.reporting.localization.Localization(__file__, 1285, 8), _nonneg_int_or_fail_496926, *[n_496927, str_496928], **kwargs_496931)
    
    # Assigning a type to the variable 'n' (line 1285)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1285, 4), 'n', _nonneg_int_or_fail_call_result_496932)
    
    
    # Getting the type of 'n' (line 1286)
    n_496933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 8), 'n')
    int_496934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1286, 12), 'int')
    # Applying the binary operator '<' (line 1286)
    result_lt_496935 = python_operator(stypy.reporting.localization.Localization(__file__, 1286, 8), '<', n_496933, int_496934)
    
    # Testing the type of an if condition (line 1286)
    if_condition_496936 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1286, 4), result_lt_496935)
    # Assigning a type to the variable 'if_condition_496936' (line 1286)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1286, 4), 'if_condition_496936', if_condition_496936)
    # SSA begins for if statement (line 1286)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1287):
    
    # Assigning a Num to a Name (line 1287):
    int_496937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1287, 13), 'int')
    # Assigning a type to the variable 'n1' (line 1287)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1287, 8), 'n1', int_496937)
    # SSA branch for the else part of an if statement (line 1286)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1289):
    
    # Assigning a Name to a Name (line 1289):
    # Getting the type of 'n' (line 1289)
    n_496938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 13), 'n')
    # Assigning a type to the variable 'n1' (line 1289)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1289, 8), 'n1', n_496938)
    # SSA join for if statement (line 1286)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to iscomplex(...): (line 1290)
    # Processing the call arguments (line 1290)
    # Getting the type of 'z' (line 1290)
    z_496940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 17), 'z', False)
    # Processing the call keyword arguments (line 1290)
    kwargs_496941 = {}
    # Getting the type of 'iscomplex' (line 1290)
    iscomplex_496939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 7), 'iscomplex', False)
    # Calling iscomplex(args, kwargs) (line 1290)
    iscomplex_call_result_496942 = invoke(stypy.reporting.localization.Localization(__file__, 1290, 7), iscomplex_496939, *[z_496940], **kwargs_496941)
    
    # Testing the type of an if condition (line 1290)
    if_condition_496943 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1290, 4), iscomplex_call_result_496942)
    # Assigning a type to the variable 'if_condition_496943' (line 1290)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1290, 4), 'if_condition_496943', if_condition_496943)
    # SSA begins for if statement (line 1290)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 1291):
    
    # Assigning a Subscript to a Name (line 1291):
    
    # Obtaining the type of the subscript
    int_496944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1291, 8), 'int')
    
    # Call to clqn(...): (line 1291)
    # Processing the call arguments (line 1291)
    # Getting the type of 'n1' (line 1291)
    n1_496947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 30), 'n1', False)
    # Getting the type of 'z' (line 1291)
    z_496948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 34), 'z', False)
    # Processing the call keyword arguments (line 1291)
    kwargs_496949 = {}
    # Getting the type of 'specfun' (line 1291)
    specfun_496945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 17), 'specfun', False)
    # Obtaining the member 'clqn' of a type (line 1291)
    clqn_496946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1291, 17), specfun_496945, 'clqn')
    # Calling clqn(args, kwargs) (line 1291)
    clqn_call_result_496950 = invoke(stypy.reporting.localization.Localization(__file__, 1291, 17), clqn_496946, *[n1_496947, z_496948], **kwargs_496949)
    
    # Obtaining the member '__getitem__' of a type (line 1291)
    getitem___496951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1291, 8), clqn_call_result_496950, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1291)
    subscript_call_result_496952 = invoke(stypy.reporting.localization.Localization(__file__, 1291, 8), getitem___496951, int_496944)
    
    # Assigning a type to the variable 'tuple_var_assignment_494759' (line 1291)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1291, 8), 'tuple_var_assignment_494759', subscript_call_result_496952)
    
    # Assigning a Subscript to a Name (line 1291):
    
    # Obtaining the type of the subscript
    int_496953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1291, 8), 'int')
    
    # Call to clqn(...): (line 1291)
    # Processing the call arguments (line 1291)
    # Getting the type of 'n1' (line 1291)
    n1_496956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 30), 'n1', False)
    # Getting the type of 'z' (line 1291)
    z_496957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 34), 'z', False)
    # Processing the call keyword arguments (line 1291)
    kwargs_496958 = {}
    # Getting the type of 'specfun' (line 1291)
    specfun_496954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 17), 'specfun', False)
    # Obtaining the member 'clqn' of a type (line 1291)
    clqn_496955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1291, 17), specfun_496954, 'clqn')
    # Calling clqn(args, kwargs) (line 1291)
    clqn_call_result_496959 = invoke(stypy.reporting.localization.Localization(__file__, 1291, 17), clqn_496955, *[n1_496956, z_496957], **kwargs_496958)
    
    # Obtaining the member '__getitem__' of a type (line 1291)
    getitem___496960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1291, 8), clqn_call_result_496959, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1291)
    subscript_call_result_496961 = invoke(stypy.reporting.localization.Localization(__file__, 1291, 8), getitem___496960, int_496953)
    
    # Assigning a type to the variable 'tuple_var_assignment_494760' (line 1291)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1291, 8), 'tuple_var_assignment_494760', subscript_call_result_496961)
    
    # Assigning a Name to a Name (line 1291):
    # Getting the type of 'tuple_var_assignment_494759' (line 1291)
    tuple_var_assignment_494759_496962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 8), 'tuple_var_assignment_494759')
    # Assigning a type to the variable 'qn' (line 1291)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1291, 8), 'qn', tuple_var_assignment_494759_496962)
    
    # Assigning a Name to a Name (line 1291):
    # Getting the type of 'tuple_var_assignment_494760' (line 1291)
    tuple_var_assignment_494760_496963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 8), 'tuple_var_assignment_494760')
    # Assigning a type to the variable 'qd' (line 1291)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1291, 12), 'qd', tuple_var_assignment_494760_496963)
    # SSA branch for the else part of an if statement (line 1290)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Tuple (line 1293):
    
    # Assigning a Subscript to a Name (line 1293):
    
    # Obtaining the type of the subscript
    int_496964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1293, 8), 'int')
    
    # Call to lqnb(...): (line 1293)
    # Processing the call arguments (line 1293)
    # Getting the type of 'n1' (line 1293)
    n1_496967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 30), 'n1', False)
    # Getting the type of 'z' (line 1293)
    z_496968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 34), 'z', False)
    # Processing the call keyword arguments (line 1293)
    kwargs_496969 = {}
    # Getting the type of 'specfun' (line 1293)
    specfun_496965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 17), 'specfun', False)
    # Obtaining the member 'lqnb' of a type (line 1293)
    lqnb_496966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1293, 17), specfun_496965, 'lqnb')
    # Calling lqnb(args, kwargs) (line 1293)
    lqnb_call_result_496970 = invoke(stypy.reporting.localization.Localization(__file__, 1293, 17), lqnb_496966, *[n1_496967, z_496968], **kwargs_496969)
    
    # Obtaining the member '__getitem__' of a type (line 1293)
    getitem___496971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1293, 8), lqnb_call_result_496970, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1293)
    subscript_call_result_496972 = invoke(stypy.reporting.localization.Localization(__file__, 1293, 8), getitem___496971, int_496964)
    
    # Assigning a type to the variable 'tuple_var_assignment_494761' (line 1293)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1293, 8), 'tuple_var_assignment_494761', subscript_call_result_496972)
    
    # Assigning a Subscript to a Name (line 1293):
    
    # Obtaining the type of the subscript
    int_496973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1293, 8), 'int')
    
    # Call to lqnb(...): (line 1293)
    # Processing the call arguments (line 1293)
    # Getting the type of 'n1' (line 1293)
    n1_496976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 30), 'n1', False)
    # Getting the type of 'z' (line 1293)
    z_496977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 34), 'z', False)
    # Processing the call keyword arguments (line 1293)
    kwargs_496978 = {}
    # Getting the type of 'specfun' (line 1293)
    specfun_496974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 17), 'specfun', False)
    # Obtaining the member 'lqnb' of a type (line 1293)
    lqnb_496975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1293, 17), specfun_496974, 'lqnb')
    # Calling lqnb(args, kwargs) (line 1293)
    lqnb_call_result_496979 = invoke(stypy.reporting.localization.Localization(__file__, 1293, 17), lqnb_496975, *[n1_496976, z_496977], **kwargs_496978)
    
    # Obtaining the member '__getitem__' of a type (line 1293)
    getitem___496980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1293, 8), lqnb_call_result_496979, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1293)
    subscript_call_result_496981 = invoke(stypy.reporting.localization.Localization(__file__, 1293, 8), getitem___496980, int_496973)
    
    # Assigning a type to the variable 'tuple_var_assignment_494762' (line 1293)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1293, 8), 'tuple_var_assignment_494762', subscript_call_result_496981)
    
    # Assigning a Name to a Name (line 1293):
    # Getting the type of 'tuple_var_assignment_494761' (line 1293)
    tuple_var_assignment_494761_496982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 8), 'tuple_var_assignment_494761')
    # Assigning a type to the variable 'qn' (line 1293)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1293, 8), 'qn', tuple_var_assignment_494761_496982)
    
    # Assigning a Name to a Name (line 1293):
    # Getting the type of 'tuple_var_assignment_494762' (line 1293)
    tuple_var_assignment_494762_496983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 8), 'tuple_var_assignment_494762')
    # Assigning a type to the variable 'qd' (line 1293)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1293, 12), 'qd', tuple_var_assignment_494762_496983)
    # SSA join for if statement (line 1290)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1294)
    tuple_496984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1294, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1294)
    # Adding element type (line 1294)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 1294)
    n_496985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 16), 'n')
    int_496986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1294, 18), 'int')
    # Applying the binary operator '+' (line 1294)
    result_add_496987 = python_operator(stypy.reporting.localization.Localization(__file__, 1294, 16), '+', n_496985, int_496986)
    
    slice_496988 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1294, 11), None, result_add_496987, None)
    # Getting the type of 'qn' (line 1294)
    qn_496989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 11), 'qn')
    # Obtaining the member '__getitem__' of a type (line 1294)
    getitem___496990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 11), qn_496989, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1294)
    subscript_call_result_496991 = invoke(stypy.reporting.localization.Localization(__file__, 1294, 11), getitem___496990, slice_496988)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1294, 11), tuple_496984, subscript_call_result_496991)
    # Adding element type (line 1294)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 1294)
    n_496992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 28), 'n')
    int_496993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1294, 30), 'int')
    # Applying the binary operator '+' (line 1294)
    result_add_496994 = python_operator(stypy.reporting.localization.Localization(__file__, 1294, 28), '+', n_496992, int_496993)
    
    slice_496995 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1294, 23), None, result_add_496994, None)
    # Getting the type of 'qd' (line 1294)
    qd_496996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 23), 'qd')
    # Obtaining the member '__getitem__' of a type (line 1294)
    getitem___496997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 23), qd_496996, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1294)
    subscript_call_result_496998 = invoke(stypy.reporting.localization.Localization(__file__, 1294, 23), getitem___496997, slice_496995)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1294, 11), tuple_496984, subscript_call_result_496998)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1294)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1294, 4), 'stypy_return_type', tuple_496984)
    
    # ################# End of 'lqn(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'lqn' in the type store
    # Getting the type of 'stypy_return_type' (line 1270)
    stypy_return_type_496999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_496999)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'lqn'
    return stypy_return_type_496999

# Assigning a type to the variable 'lqn' (line 1270)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1270, 0), 'lqn', lqn)

@norecursion
def ai_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'ai_zeros'
    module_type_store = module_type_store.open_function_context('ai_zeros', 1297, 0, False)
    
    # Passed parameters checking function
    ai_zeros.stypy_localization = localization
    ai_zeros.stypy_type_of_self = None
    ai_zeros.stypy_type_store = module_type_store
    ai_zeros.stypy_function_name = 'ai_zeros'
    ai_zeros.stypy_param_names_list = ['nt']
    ai_zeros.stypy_varargs_param_name = None
    ai_zeros.stypy_kwargs_param_name = None
    ai_zeros.stypy_call_defaults = defaults
    ai_zeros.stypy_call_varargs = varargs
    ai_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ai_zeros', ['nt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ai_zeros', localization, ['nt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ai_zeros(...)' code ##################

    str_497000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1328, (-1)), 'str', '\n    Compute `nt` zeros and values of the Airy function Ai and its derivative.\n\n    Computes the first `nt` zeros, `a`, of the Airy function Ai(x);\n    first `nt` zeros, `ap`, of the derivative of the Airy function Ai\'(x);\n    the corresponding values Ai(a\');\n    and the corresponding values Ai\'(a).\n\n    Parameters\n    ----------\n    nt : int\n        Number of zeros to compute\n\n    Returns\n    -------\n    a : ndarray\n        First `nt` zeros of Ai(x)\n    ap : ndarray\n        First `nt` zeros of Ai\'(x)\n    ai : ndarray\n        Values of Ai(x) evaluated at first `nt` zeros of Ai\'(x)\n    aip : ndarray\n        Values of Ai\'(x) evaluated at first `nt` zeros of Ai(x)\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    # Assigning a Num to a Name (line 1329):
    
    # Assigning a Num to a Name (line 1329):
    int_497001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1329, 9), 'int')
    # Assigning a type to the variable 'kf' (line 1329)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1329, 4), 'kf', int_497001)
    
    
    # Evaluating a boolean operation
    
    
    # Call to isscalar(...): (line 1330)
    # Processing the call arguments (line 1330)
    # Getting the type of 'nt' (line 1330)
    nt_497003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 20), 'nt', False)
    # Processing the call keyword arguments (line 1330)
    kwargs_497004 = {}
    # Getting the type of 'isscalar' (line 1330)
    isscalar_497002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1330)
    isscalar_call_result_497005 = invoke(stypy.reporting.localization.Localization(__file__, 1330, 11), isscalar_497002, *[nt_497003], **kwargs_497004)
    
    # Applying the 'not' unary operator (line 1330)
    result_not__497006 = python_operator(stypy.reporting.localization.Localization(__file__, 1330, 7), 'not', isscalar_call_result_497005)
    
    
    
    # Call to floor(...): (line 1330)
    # Processing the call arguments (line 1330)
    # Getting the type of 'nt' (line 1330)
    nt_497008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 34), 'nt', False)
    # Processing the call keyword arguments (line 1330)
    kwargs_497009 = {}
    # Getting the type of 'floor' (line 1330)
    floor_497007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 28), 'floor', False)
    # Calling floor(args, kwargs) (line 1330)
    floor_call_result_497010 = invoke(stypy.reporting.localization.Localization(__file__, 1330, 28), floor_497007, *[nt_497008], **kwargs_497009)
    
    # Getting the type of 'nt' (line 1330)
    nt_497011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 41), 'nt')
    # Applying the binary operator '!=' (line 1330)
    result_ne_497012 = python_operator(stypy.reporting.localization.Localization(__file__, 1330, 28), '!=', floor_call_result_497010, nt_497011)
    
    # Applying the binary operator 'or' (line 1330)
    result_or_keyword_497013 = python_operator(stypy.reporting.localization.Localization(__file__, 1330, 7), 'or', result_not__497006, result_ne_497012)
    
    # Getting the type of 'nt' (line 1330)
    nt_497014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 49), 'nt')
    int_497015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1330, 55), 'int')
    # Applying the binary operator '<=' (line 1330)
    result_le_497016 = python_operator(stypy.reporting.localization.Localization(__file__, 1330, 49), '<=', nt_497014, int_497015)
    
    # Applying the binary operator 'or' (line 1330)
    result_or_keyword_497017 = python_operator(stypy.reporting.localization.Localization(__file__, 1330, 7), 'or', result_or_keyword_497013, result_le_497016)
    
    # Testing the type of an if condition (line 1330)
    if_condition_497018 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1330, 4), result_or_keyword_497017)
    # Assigning a type to the variable 'if_condition_497018' (line 1330)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1330, 4), 'if_condition_497018', if_condition_497018)
    # SSA begins for if statement (line 1330)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1331)
    # Processing the call arguments (line 1331)
    str_497020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1331, 25), 'str', 'nt must be a positive integer scalar.')
    # Processing the call keyword arguments (line 1331)
    kwargs_497021 = {}
    # Getting the type of 'ValueError' (line 1331)
    ValueError_497019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1331)
    ValueError_call_result_497022 = invoke(stypy.reporting.localization.Localization(__file__, 1331, 14), ValueError_497019, *[str_497020], **kwargs_497021)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1331, 8), ValueError_call_result_497022, 'raise parameter', BaseException)
    # SSA join for if statement (line 1330)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to airyzo(...): (line 1332)
    # Processing the call arguments (line 1332)
    # Getting the type of 'nt' (line 1332)
    nt_497025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 26), 'nt', False)
    # Getting the type of 'kf' (line 1332)
    kf_497026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 30), 'kf', False)
    # Processing the call keyword arguments (line 1332)
    kwargs_497027 = {}
    # Getting the type of 'specfun' (line 1332)
    specfun_497023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 11), 'specfun', False)
    # Obtaining the member 'airyzo' of a type (line 1332)
    airyzo_497024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1332, 11), specfun_497023, 'airyzo')
    # Calling airyzo(args, kwargs) (line 1332)
    airyzo_call_result_497028 = invoke(stypy.reporting.localization.Localization(__file__, 1332, 11), airyzo_497024, *[nt_497025, kf_497026], **kwargs_497027)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1332)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1332, 4), 'stypy_return_type', airyzo_call_result_497028)
    
    # ################# End of 'ai_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ai_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 1297)
    stypy_return_type_497029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_497029)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ai_zeros'
    return stypy_return_type_497029

# Assigning a type to the variable 'ai_zeros' (line 1297)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 0), 'ai_zeros', ai_zeros)

@norecursion
def bi_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'bi_zeros'
    module_type_store = module_type_store.open_function_context('bi_zeros', 1335, 0, False)
    
    # Passed parameters checking function
    bi_zeros.stypy_localization = localization
    bi_zeros.stypy_type_of_self = None
    bi_zeros.stypy_type_store = module_type_store
    bi_zeros.stypy_function_name = 'bi_zeros'
    bi_zeros.stypy_param_names_list = ['nt']
    bi_zeros.stypy_varargs_param_name = None
    bi_zeros.stypy_kwargs_param_name = None
    bi_zeros.stypy_call_defaults = defaults
    bi_zeros.stypy_call_varargs = varargs
    bi_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'bi_zeros', ['nt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'bi_zeros', localization, ['nt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'bi_zeros(...)' code ##################

    str_497030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1366, (-1)), 'str', '\n    Compute `nt` zeros and values of the Airy function Bi and its derivative.\n\n    Computes the first `nt` zeros, b, of the Airy function Bi(x);\n    first `nt` zeros, b\', of the derivative of the Airy function Bi\'(x);\n    the corresponding values Bi(b\');\n    and the corresponding values Bi\'(b).\n\n    Parameters\n    ----------\n    nt : int\n        Number of zeros to compute\n\n    Returns\n    -------\n    b : ndarray\n        First `nt` zeros of Bi(x)\n    bp : ndarray\n        First `nt` zeros of Bi\'(x)\n    bi : ndarray\n        Values of Bi(x) evaluated at first `nt` zeros of Bi\'(x)\n    bip : ndarray\n        Values of Bi\'(x) evaluated at first `nt` zeros of Bi(x)\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    # Assigning a Num to a Name (line 1367):
    
    # Assigning a Num to a Name (line 1367):
    int_497031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1367, 9), 'int')
    # Assigning a type to the variable 'kf' (line 1367)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1367, 4), 'kf', int_497031)
    
    
    # Evaluating a boolean operation
    
    
    # Call to isscalar(...): (line 1368)
    # Processing the call arguments (line 1368)
    # Getting the type of 'nt' (line 1368)
    nt_497033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 20), 'nt', False)
    # Processing the call keyword arguments (line 1368)
    kwargs_497034 = {}
    # Getting the type of 'isscalar' (line 1368)
    isscalar_497032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1368)
    isscalar_call_result_497035 = invoke(stypy.reporting.localization.Localization(__file__, 1368, 11), isscalar_497032, *[nt_497033], **kwargs_497034)
    
    # Applying the 'not' unary operator (line 1368)
    result_not__497036 = python_operator(stypy.reporting.localization.Localization(__file__, 1368, 7), 'not', isscalar_call_result_497035)
    
    
    
    # Call to floor(...): (line 1368)
    # Processing the call arguments (line 1368)
    # Getting the type of 'nt' (line 1368)
    nt_497038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 34), 'nt', False)
    # Processing the call keyword arguments (line 1368)
    kwargs_497039 = {}
    # Getting the type of 'floor' (line 1368)
    floor_497037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 28), 'floor', False)
    # Calling floor(args, kwargs) (line 1368)
    floor_call_result_497040 = invoke(stypy.reporting.localization.Localization(__file__, 1368, 28), floor_497037, *[nt_497038], **kwargs_497039)
    
    # Getting the type of 'nt' (line 1368)
    nt_497041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 41), 'nt')
    # Applying the binary operator '!=' (line 1368)
    result_ne_497042 = python_operator(stypy.reporting.localization.Localization(__file__, 1368, 28), '!=', floor_call_result_497040, nt_497041)
    
    # Applying the binary operator 'or' (line 1368)
    result_or_keyword_497043 = python_operator(stypy.reporting.localization.Localization(__file__, 1368, 7), 'or', result_not__497036, result_ne_497042)
    
    # Getting the type of 'nt' (line 1368)
    nt_497044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 49), 'nt')
    int_497045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1368, 55), 'int')
    # Applying the binary operator '<=' (line 1368)
    result_le_497046 = python_operator(stypy.reporting.localization.Localization(__file__, 1368, 49), '<=', nt_497044, int_497045)
    
    # Applying the binary operator 'or' (line 1368)
    result_or_keyword_497047 = python_operator(stypy.reporting.localization.Localization(__file__, 1368, 7), 'or', result_or_keyword_497043, result_le_497046)
    
    # Testing the type of an if condition (line 1368)
    if_condition_497048 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1368, 4), result_or_keyword_497047)
    # Assigning a type to the variable 'if_condition_497048' (line 1368)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1368, 4), 'if_condition_497048', if_condition_497048)
    # SSA begins for if statement (line 1368)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1369)
    # Processing the call arguments (line 1369)
    str_497050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1369, 25), 'str', 'nt must be a positive integer scalar.')
    # Processing the call keyword arguments (line 1369)
    kwargs_497051 = {}
    # Getting the type of 'ValueError' (line 1369)
    ValueError_497049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1369)
    ValueError_call_result_497052 = invoke(stypy.reporting.localization.Localization(__file__, 1369, 14), ValueError_497049, *[str_497050], **kwargs_497051)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1369, 8), ValueError_call_result_497052, 'raise parameter', BaseException)
    # SSA join for if statement (line 1368)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to airyzo(...): (line 1370)
    # Processing the call arguments (line 1370)
    # Getting the type of 'nt' (line 1370)
    nt_497055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 26), 'nt', False)
    # Getting the type of 'kf' (line 1370)
    kf_497056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 30), 'kf', False)
    # Processing the call keyword arguments (line 1370)
    kwargs_497057 = {}
    # Getting the type of 'specfun' (line 1370)
    specfun_497053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 11), 'specfun', False)
    # Obtaining the member 'airyzo' of a type (line 1370)
    airyzo_497054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1370, 11), specfun_497053, 'airyzo')
    # Calling airyzo(args, kwargs) (line 1370)
    airyzo_call_result_497058 = invoke(stypy.reporting.localization.Localization(__file__, 1370, 11), airyzo_497054, *[nt_497055, kf_497056], **kwargs_497057)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1370)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1370, 4), 'stypy_return_type', airyzo_call_result_497058)
    
    # ################# End of 'bi_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'bi_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 1335)
    stypy_return_type_497059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_497059)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'bi_zeros'
    return stypy_return_type_497059

# Assigning a type to the variable 'bi_zeros' (line 1335)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1335, 0), 'bi_zeros', bi_zeros)

@norecursion
def lmbda(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'lmbda'
    module_type_store = module_type_store.open_function_context('lmbda', 1373, 0, False)
    
    # Passed parameters checking function
    lmbda.stypy_localization = localization
    lmbda.stypy_type_of_self = None
    lmbda.stypy_type_store = module_type_store
    lmbda.stypy_function_name = 'lmbda'
    lmbda.stypy_param_names_list = ['v', 'x']
    lmbda.stypy_varargs_param_name = None
    lmbda.stypy_kwargs_param_name = None
    lmbda.stypy_call_defaults = defaults
    lmbda.stypy_call_varargs = varargs
    lmbda.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'lmbda', ['v', 'x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'lmbda', localization, ['v', 'x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'lmbda(...)' code ##################

    str_497060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1404, (-1)), 'str', 'Jahnke-Emden Lambda function, Lambdav(x).\n\n    This function is defined as [2]_,\n\n    .. math:: \\Lambda_v(x) = \\Gamma(v+1) \\frac{J_v(x)}{(x/2)^v},\n\n    where :math:`\\Gamma` is the gamma function and :math:`J_v` is the\n    Bessel function of the first kind.\n\n    Parameters\n    ----------\n    v : float\n        Order of the Lambda function\n    x : float\n        Value at which to evaluate the function and derivatives\n\n    Returns\n    -------\n    vl : ndarray\n        Values of Lambda_vi(x), for vi=v-int(v), vi=1+v-int(v), ..., vi=v.\n    dl : ndarray\n        Derivatives Lambda_vi\'(x), for vi=v-int(v), vi=1+v-int(v), ..., vi=v.\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n    .. [2] Jahnke, E. and Emde, F. "Tables of Functions with Formulae and\n           Curves" (4th ed.), Dover, 1945\n    ')
    
    
    
    # Evaluating a boolean operation
    
    # Call to isscalar(...): (line 1405)
    # Processing the call arguments (line 1405)
    # Getting the type of 'v' (line 1405)
    v_497062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 21), 'v', False)
    # Processing the call keyword arguments (line 1405)
    kwargs_497063 = {}
    # Getting the type of 'isscalar' (line 1405)
    isscalar_497061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 12), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1405)
    isscalar_call_result_497064 = invoke(stypy.reporting.localization.Localization(__file__, 1405, 12), isscalar_497061, *[v_497062], **kwargs_497063)
    
    
    # Call to isscalar(...): (line 1405)
    # Processing the call arguments (line 1405)
    # Getting the type of 'x' (line 1405)
    x_497066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 37), 'x', False)
    # Processing the call keyword arguments (line 1405)
    kwargs_497067 = {}
    # Getting the type of 'isscalar' (line 1405)
    isscalar_497065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 28), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1405)
    isscalar_call_result_497068 = invoke(stypy.reporting.localization.Localization(__file__, 1405, 28), isscalar_497065, *[x_497066], **kwargs_497067)
    
    # Applying the binary operator 'and' (line 1405)
    result_and_keyword_497069 = python_operator(stypy.reporting.localization.Localization(__file__, 1405, 12), 'and', isscalar_call_result_497064, isscalar_call_result_497068)
    
    # Applying the 'not' unary operator (line 1405)
    result_not__497070 = python_operator(stypy.reporting.localization.Localization(__file__, 1405, 7), 'not', result_and_keyword_497069)
    
    # Testing the type of an if condition (line 1405)
    if_condition_497071 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1405, 4), result_not__497070)
    # Assigning a type to the variable 'if_condition_497071' (line 1405)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1405, 4), 'if_condition_497071', if_condition_497071)
    # SSA begins for if statement (line 1405)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1406)
    # Processing the call arguments (line 1406)
    str_497073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1406, 25), 'str', 'arguments must be scalars.')
    # Processing the call keyword arguments (line 1406)
    kwargs_497074 = {}
    # Getting the type of 'ValueError' (line 1406)
    ValueError_497072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1406)
    ValueError_call_result_497075 = invoke(stypy.reporting.localization.Localization(__file__, 1406, 14), ValueError_497072, *[str_497073], **kwargs_497074)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1406, 8), ValueError_call_result_497075, 'raise parameter', BaseException)
    # SSA join for if statement (line 1405)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'v' (line 1407)
    v_497076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 8), 'v')
    int_497077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1407, 12), 'int')
    # Applying the binary operator '<' (line 1407)
    result_lt_497078 = python_operator(stypy.reporting.localization.Localization(__file__, 1407, 8), '<', v_497076, int_497077)
    
    # Testing the type of an if condition (line 1407)
    if_condition_497079 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1407, 4), result_lt_497078)
    # Assigning a type to the variable 'if_condition_497079' (line 1407)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1407, 4), 'if_condition_497079', if_condition_497079)
    # SSA begins for if statement (line 1407)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1408)
    # Processing the call arguments (line 1408)
    str_497081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1408, 25), 'str', 'argument must be > 0.')
    # Processing the call keyword arguments (line 1408)
    kwargs_497082 = {}
    # Getting the type of 'ValueError' (line 1408)
    ValueError_497080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1408)
    ValueError_call_result_497083 = invoke(stypy.reporting.localization.Localization(__file__, 1408, 14), ValueError_497080, *[str_497081], **kwargs_497082)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1408, 8), ValueError_call_result_497083, 'raise parameter', BaseException)
    # SSA join for if statement (line 1407)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1409):
    
    # Assigning a Call to a Name (line 1409):
    
    # Call to int(...): (line 1409)
    # Processing the call arguments (line 1409)
    # Getting the type of 'v' (line 1409)
    v_497085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 12), 'v', False)
    # Processing the call keyword arguments (line 1409)
    kwargs_497086 = {}
    # Getting the type of 'int' (line 1409)
    int_497084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 8), 'int', False)
    # Calling int(args, kwargs) (line 1409)
    int_call_result_497087 = invoke(stypy.reporting.localization.Localization(__file__, 1409, 8), int_497084, *[v_497085], **kwargs_497086)
    
    # Assigning a type to the variable 'n' (line 1409)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1409, 4), 'n', int_call_result_497087)
    
    # Assigning a BinOp to a Name (line 1410):
    
    # Assigning a BinOp to a Name (line 1410):
    # Getting the type of 'v' (line 1410)
    v_497088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 9), 'v')
    # Getting the type of 'n' (line 1410)
    n_497089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 13), 'n')
    # Applying the binary operator '-' (line 1410)
    result_sub_497090 = python_operator(stypy.reporting.localization.Localization(__file__, 1410, 9), '-', v_497088, n_497089)
    
    # Assigning a type to the variable 'v0' (line 1410)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1410, 4), 'v0', result_sub_497090)
    
    
    # Getting the type of 'n' (line 1411)
    n_497091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 8), 'n')
    int_497092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1411, 12), 'int')
    # Applying the binary operator '<' (line 1411)
    result_lt_497093 = python_operator(stypy.reporting.localization.Localization(__file__, 1411, 8), '<', n_497091, int_497092)
    
    # Testing the type of an if condition (line 1411)
    if_condition_497094 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1411, 4), result_lt_497093)
    # Assigning a type to the variable 'if_condition_497094' (line 1411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1411, 4), 'if_condition_497094', if_condition_497094)
    # SSA begins for if statement (line 1411)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1412):
    
    # Assigning a Num to a Name (line 1412):
    int_497095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1412, 13), 'int')
    # Assigning a type to the variable 'n1' (line 1412)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1412, 8), 'n1', int_497095)
    # SSA branch for the else part of an if statement (line 1411)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1414):
    
    # Assigning a Name to a Name (line 1414):
    # Getting the type of 'n' (line 1414)
    n_497096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 13), 'n')
    # Assigning a type to the variable 'n1' (line 1414)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1414, 8), 'n1', n_497096)
    # SSA join for if statement (line 1411)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1415):
    
    # Assigning a BinOp to a Name (line 1415):
    # Getting the type of 'n1' (line 1415)
    n1_497097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 9), 'n1')
    # Getting the type of 'v0' (line 1415)
    v0_497098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 14), 'v0')
    # Applying the binary operator '+' (line 1415)
    result_add_497099 = python_operator(stypy.reporting.localization.Localization(__file__, 1415, 9), '+', n1_497097, v0_497098)
    
    # Assigning a type to the variable 'v1' (line 1415)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1415, 4), 'v1', result_add_497099)
    
    
    # Getting the type of 'v' (line 1416)
    v_497100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 8), 'v')
    
    # Call to floor(...): (line 1416)
    # Processing the call arguments (line 1416)
    # Getting the type of 'v' (line 1416)
    v_497102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 19), 'v', False)
    # Processing the call keyword arguments (line 1416)
    kwargs_497103 = {}
    # Getting the type of 'floor' (line 1416)
    floor_497101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 13), 'floor', False)
    # Calling floor(args, kwargs) (line 1416)
    floor_call_result_497104 = invoke(stypy.reporting.localization.Localization(__file__, 1416, 13), floor_497101, *[v_497102], **kwargs_497103)
    
    # Applying the binary operator '!=' (line 1416)
    result_ne_497105 = python_operator(stypy.reporting.localization.Localization(__file__, 1416, 8), '!=', v_497100, floor_call_result_497104)
    
    # Testing the type of an if condition (line 1416)
    if_condition_497106 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1416, 4), result_ne_497105)
    # Assigning a type to the variable 'if_condition_497106' (line 1416)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1416, 4), 'if_condition_497106', if_condition_497106)
    # SSA begins for if statement (line 1416)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 1417):
    
    # Assigning a Subscript to a Name (line 1417):
    
    # Obtaining the type of the subscript
    int_497107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1417, 8), 'int')
    
    # Call to lamv(...): (line 1417)
    # Processing the call arguments (line 1417)
    # Getting the type of 'v1' (line 1417)
    v1_497110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 34), 'v1', False)
    # Getting the type of 'x' (line 1417)
    x_497111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 38), 'x', False)
    # Processing the call keyword arguments (line 1417)
    kwargs_497112 = {}
    # Getting the type of 'specfun' (line 1417)
    specfun_497108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 21), 'specfun', False)
    # Obtaining the member 'lamv' of a type (line 1417)
    lamv_497109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1417, 21), specfun_497108, 'lamv')
    # Calling lamv(args, kwargs) (line 1417)
    lamv_call_result_497113 = invoke(stypy.reporting.localization.Localization(__file__, 1417, 21), lamv_497109, *[v1_497110, x_497111], **kwargs_497112)
    
    # Obtaining the member '__getitem__' of a type (line 1417)
    getitem___497114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1417, 8), lamv_call_result_497113, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1417)
    subscript_call_result_497115 = invoke(stypy.reporting.localization.Localization(__file__, 1417, 8), getitem___497114, int_497107)
    
    # Assigning a type to the variable 'tuple_var_assignment_494763' (line 1417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 8), 'tuple_var_assignment_494763', subscript_call_result_497115)
    
    # Assigning a Subscript to a Name (line 1417):
    
    # Obtaining the type of the subscript
    int_497116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1417, 8), 'int')
    
    # Call to lamv(...): (line 1417)
    # Processing the call arguments (line 1417)
    # Getting the type of 'v1' (line 1417)
    v1_497119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 34), 'v1', False)
    # Getting the type of 'x' (line 1417)
    x_497120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 38), 'x', False)
    # Processing the call keyword arguments (line 1417)
    kwargs_497121 = {}
    # Getting the type of 'specfun' (line 1417)
    specfun_497117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 21), 'specfun', False)
    # Obtaining the member 'lamv' of a type (line 1417)
    lamv_497118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1417, 21), specfun_497117, 'lamv')
    # Calling lamv(args, kwargs) (line 1417)
    lamv_call_result_497122 = invoke(stypy.reporting.localization.Localization(__file__, 1417, 21), lamv_497118, *[v1_497119, x_497120], **kwargs_497121)
    
    # Obtaining the member '__getitem__' of a type (line 1417)
    getitem___497123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1417, 8), lamv_call_result_497122, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1417)
    subscript_call_result_497124 = invoke(stypy.reporting.localization.Localization(__file__, 1417, 8), getitem___497123, int_497116)
    
    # Assigning a type to the variable 'tuple_var_assignment_494764' (line 1417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 8), 'tuple_var_assignment_494764', subscript_call_result_497124)
    
    # Assigning a Subscript to a Name (line 1417):
    
    # Obtaining the type of the subscript
    int_497125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1417, 8), 'int')
    
    # Call to lamv(...): (line 1417)
    # Processing the call arguments (line 1417)
    # Getting the type of 'v1' (line 1417)
    v1_497128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 34), 'v1', False)
    # Getting the type of 'x' (line 1417)
    x_497129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 38), 'x', False)
    # Processing the call keyword arguments (line 1417)
    kwargs_497130 = {}
    # Getting the type of 'specfun' (line 1417)
    specfun_497126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 21), 'specfun', False)
    # Obtaining the member 'lamv' of a type (line 1417)
    lamv_497127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1417, 21), specfun_497126, 'lamv')
    # Calling lamv(args, kwargs) (line 1417)
    lamv_call_result_497131 = invoke(stypy.reporting.localization.Localization(__file__, 1417, 21), lamv_497127, *[v1_497128, x_497129], **kwargs_497130)
    
    # Obtaining the member '__getitem__' of a type (line 1417)
    getitem___497132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1417, 8), lamv_call_result_497131, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1417)
    subscript_call_result_497133 = invoke(stypy.reporting.localization.Localization(__file__, 1417, 8), getitem___497132, int_497125)
    
    # Assigning a type to the variable 'tuple_var_assignment_494765' (line 1417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 8), 'tuple_var_assignment_494765', subscript_call_result_497133)
    
    # Assigning a Name to a Name (line 1417):
    # Getting the type of 'tuple_var_assignment_494763' (line 1417)
    tuple_var_assignment_494763_497134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 8), 'tuple_var_assignment_494763')
    # Assigning a type to the variable 'vm' (line 1417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 8), 'vm', tuple_var_assignment_494763_497134)
    
    # Assigning a Name to a Name (line 1417):
    # Getting the type of 'tuple_var_assignment_494764' (line 1417)
    tuple_var_assignment_494764_497135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 8), 'tuple_var_assignment_494764')
    # Assigning a type to the variable 'vl' (line 1417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 12), 'vl', tuple_var_assignment_494764_497135)
    
    # Assigning a Name to a Name (line 1417):
    # Getting the type of 'tuple_var_assignment_494765' (line 1417)
    tuple_var_assignment_494765_497136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 8), 'tuple_var_assignment_494765')
    # Assigning a type to the variable 'dl' (line 1417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 16), 'dl', tuple_var_assignment_494765_497136)
    # SSA branch for the else part of an if statement (line 1416)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Tuple (line 1419):
    
    # Assigning a Subscript to a Name (line 1419):
    
    # Obtaining the type of the subscript
    int_497137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1419, 8), 'int')
    
    # Call to lamn(...): (line 1419)
    # Processing the call arguments (line 1419)
    # Getting the type of 'v1' (line 1419)
    v1_497140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 34), 'v1', False)
    # Getting the type of 'x' (line 1419)
    x_497141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 38), 'x', False)
    # Processing the call keyword arguments (line 1419)
    kwargs_497142 = {}
    # Getting the type of 'specfun' (line 1419)
    specfun_497138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 21), 'specfun', False)
    # Obtaining the member 'lamn' of a type (line 1419)
    lamn_497139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1419, 21), specfun_497138, 'lamn')
    # Calling lamn(args, kwargs) (line 1419)
    lamn_call_result_497143 = invoke(stypy.reporting.localization.Localization(__file__, 1419, 21), lamn_497139, *[v1_497140, x_497141], **kwargs_497142)
    
    # Obtaining the member '__getitem__' of a type (line 1419)
    getitem___497144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1419, 8), lamn_call_result_497143, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1419)
    subscript_call_result_497145 = invoke(stypy.reporting.localization.Localization(__file__, 1419, 8), getitem___497144, int_497137)
    
    # Assigning a type to the variable 'tuple_var_assignment_494766' (line 1419)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1419, 8), 'tuple_var_assignment_494766', subscript_call_result_497145)
    
    # Assigning a Subscript to a Name (line 1419):
    
    # Obtaining the type of the subscript
    int_497146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1419, 8), 'int')
    
    # Call to lamn(...): (line 1419)
    # Processing the call arguments (line 1419)
    # Getting the type of 'v1' (line 1419)
    v1_497149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 34), 'v1', False)
    # Getting the type of 'x' (line 1419)
    x_497150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 38), 'x', False)
    # Processing the call keyword arguments (line 1419)
    kwargs_497151 = {}
    # Getting the type of 'specfun' (line 1419)
    specfun_497147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 21), 'specfun', False)
    # Obtaining the member 'lamn' of a type (line 1419)
    lamn_497148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1419, 21), specfun_497147, 'lamn')
    # Calling lamn(args, kwargs) (line 1419)
    lamn_call_result_497152 = invoke(stypy.reporting.localization.Localization(__file__, 1419, 21), lamn_497148, *[v1_497149, x_497150], **kwargs_497151)
    
    # Obtaining the member '__getitem__' of a type (line 1419)
    getitem___497153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1419, 8), lamn_call_result_497152, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1419)
    subscript_call_result_497154 = invoke(stypy.reporting.localization.Localization(__file__, 1419, 8), getitem___497153, int_497146)
    
    # Assigning a type to the variable 'tuple_var_assignment_494767' (line 1419)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1419, 8), 'tuple_var_assignment_494767', subscript_call_result_497154)
    
    # Assigning a Subscript to a Name (line 1419):
    
    # Obtaining the type of the subscript
    int_497155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1419, 8), 'int')
    
    # Call to lamn(...): (line 1419)
    # Processing the call arguments (line 1419)
    # Getting the type of 'v1' (line 1419)
    v1_497158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 34), 'v1', False)
    # Getting the type of 'x' (line 1419)
    x_497159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 38), 'x', False)
    # Processing the call keyword arguments (line 1419)
    kwargs_497160 = {}
    # Getting the type of 'specfun' (line 1419)
    specfun_497156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 21), 'specfun', False)
    # Obtaining the member 'lamn' of a type (line 1419)
    lamn_497157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1419, 21), specfun_497156, 'lamn')
    # Calling lamn(args, kwargs) (line 1419)
    lamn_call_result_497161 = invoke(stypy.reporting.localization.Localization(__file__, 1419, 21), lamn_497157, *[v1_497158, x_497159], **kwargs_497160)
    
    # Obtaining the member '__getitem__' of a type (line 1419)
    getitem___497162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1419, 8), lamn_call_result_497161, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1419)
    subscript_call_result_497163 = invoke(stypy.reporting.localization.Localization(__file__, 1419, 8), getitem___497162, int_497155)
    
    # Assigning a type to the variable 'tuple_var_assignment_494768' (line 1419)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1419, 8), 'tuple_var_assignment_494768', subscript_call_result_497163)
    
    # Assigning a Name to a Name (line 1419):
    # Getting the type of 'tuple_var_assignment_494766' (line 1419)
    tuple_var_assignment_494766_497164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 8), 'tuple_var_assignment_494766')
    # Assigning a type to the variable 'vm' (line 1419)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1419, 8), 'vm', tuple_var_assignment_494766_497164)
    
    # Assigning a Name to a Name (line 1419):
    # Getting the type of 'tuple_var_assignment_494767' (line 1419)
    tuple_var_assignment_494767_497165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 8), 'tuple_var_assignment_494767')
    # Assigning a type to the variable 'vl' (line 1419)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1419, 12), 'vl', tuple_var_assignment_494767_497165)
    
    # Assigning a Name to a Name (line 1419):
    # Getting the type of 'tuple_var_assignment_494768' (line 1419)
    tuple_var_assignment_494768_497166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 8), 'tuple_var_assignment_494768')
    # Assigning a type to the variable 'dl' (line 1419)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1419, 16), 'dl', tuple_var_assignment_494768_497166)
    # SSA join for if statement (line 1416)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1420)
    tuple_497167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1420, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1420)
    # Adding element type (line 1420)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 1420)
    n_497168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 16), 'n')
    int_497169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1420, 18), 'int')
    # Applying the binary operator '+' (line 1420)
    result_add_497170 = python_operator(stypy.reporting.localization.Localization(__file__, 1420, 16), '+', n_497168, int_497169)
    
    slice_497171 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1420, 11), None, result_add_497170, None)
    # Getting the type of 'vl' (line 1420)
    vl_497172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 11), 'vl')
    # Obtaining the member '__getitem__' of a type (line 1420)
    getitem___497173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 11), vl_497172, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1420)
    subscript_call_result_497174 = invoke(stypy.reporting.localization.Localization(__file__, 1420, 11), getitem___497173, slice_497171)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1420, 11), tuple_497167, subscript_call_result_497174)
    # Adding element type (line 1420)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 1420)
    n_497175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 28), 'n')
    int_497176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1420, 30), 'int')
    # Applying the binary operator '+' (line 1420)
    result_add_497177 = python_operator(stypy.reporting.localization.Localization(__file__, 1420, 28), '+', n_497175, int_497176)
    
    slice_497178 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1420, 23), None, result_add_497177, None)
    # Getting the type of 'dl' (line 1420)
    dl_497179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 23), 'dl')
    # Obtaining the member '__getitem__' of a type (line 1420)
    getitem___497180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 23), dl_497179, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1420)
    subscript_call_result_497181 = invoke(stypy.reporting.localization.Localization(__file__, 1420, 23), getitem___497180, slice_497178)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1420, 11), tuple_497167, subscript_call_result_497181)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1420)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1420, 4), 'stypy_return_type', tuple_497167)
    
    # ################# End of 'lmbda(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'lmbda' in the type store
    # Getting the type of 'stypy_return_type' (line 1373)
    stypy_return_type_497182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_497182)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'lmbda'
    return stypy_return_type_497182

# Assigning a type to the variable 'lmbda' (line 1373)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1373, 0), 'lmbda', lmbda)

@norecursion
def pbdv_seq(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'pbdv_seq'
    module_type_store = module_type_store.open_function_context('pbdv_seq', 1423, 0, False)
    
    # Passed parameters checking function
    pbdv_seq.stypy_localization = localization
    pbdv_seq.stypy_type_of_self = None
    pbdv_seq.stypy_type_store = module_type_store
    pbdv_seq.stypy_function_name = 'pbdv_seq'
    pbdv_seq.stypy_param_names_list = ['v', 'x']
    pbdv_seq.stypy_varargs_param_name = None
    pbdv_seq.stypy_kwargs_param_name = None
    pbdv_seq.stypy_call_defaults = defaults
    pbdv_seq.stypy_call_varargs = varargs
    pbdv_seq.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'pbdv_seq', ['v', 'x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'pbdv_seq', localization, ['v', 'x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'pbdv_seq(...)' code ##################

    str_497183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1446, (-1)), 'str', 'Parabolic cylinder functions Dv(x) and derivatives.\n\n    Parameters\n    ----------\n    v : float\n        Order of the parabolic cylinder function\n    x : float\n        Value at which to evaluate the function and derivatives\n\n    Returns\n    -------\n    dv : ndarray\n        Values of D_vi(x), for vi=v-int(v), vi=1+v-int(v), ..., vi=v.\n    dp : ndarray\n        Derivatives D_vi\'(x), for vi=v-int(v), vi=1+v-int(v), ..., vi=v.\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996, chapter 13.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    
    # Evaluating a boolean operation
    
    # Call to isscalar(...): (line 1447)
    # Processing the call arguments (line 1447)
    # Getting the type of 'v' (line 1447)
    v_497185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 21), 'v', False)
    # Processing the call keyword arguments (line 1447)
    kwargs_497186 = {}
    # Getting the type of 'isscalar' (line 1447)
    isscalar_497184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 12), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1447)
    isscalar_call_result_497187 = invoke(stypy.reporting.localization.Localization(__file__, 1447, 12), isscalar_497184, *[v_497185], **kwargs_497186)
    
    
    # Call to isscalar(...): (line 1447)
    # Processing the call arguments (line 1447)
    # Getting the type of 'x' (line 1447)
    x_497189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 37), 'x', False)
    # Processing the call keyword arguments (line 1447)
    kwargs_497190 = {}
    # Getting the type of 'isscalar' (line 1447)
    isscalar_497188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 28), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1447)
    isscalar_call_result_497191 = invoke(stypy.reporting.localization.Localization(__file__, 1447, 28), isscalar_497188, *[x_497189], **kwargs_497190)
    
    # Applying the binary operator 'and' (line 1447)
    result_and_keyword_497192 = python_operator(stypy.reporting.localization.Localization(__file__, 1447, 12), 'and', isscalar_call_result_497187, isscalar_call_result_497191)
    
    # Applying the 'not' unary operator (line 1447)
    result_not__497193 = python_operator(stypy.reporting.localization.Localization(__file__, 1447, 7), 'not', result_and_keyword_497192)
    
    # Testing the type of an if condition (line 1447)
    if_condition_497194 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1447, 4), result_not__497193)
    # Assigning a type to the variable 'if_condition_497194' (line 1447)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1447, 4), 'if_condition_497194', if_condition_497194)
    # SSA begins for if statement (line 1447)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1448)
    # Processing the call arguments (line 1448)
    str_497196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1448, 25), 'str', 'arguments must be scalars.')
    # Processing the call keyword arguments (line 1448)
    kwargs_497197 = {}
    # Getting the type of 'ValueError' (line 1448)
    ValueError_497195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1448)
    ValueError_call_result_497198 = invoke(stypy.reporting.localization.Localization(__file__, 1448, 14), ValueError_497195, *[str_497196], **kwargs_497197)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1448, 8), ValueError_call_result_497198, 'raise parameter', BaseException)
    # SSA join for if statement (line 1447)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1449):
    
    # Assigning a Call to a Name (line 1449):
    
    # Call to int(...): (line 1449)
    # Processing the call arguments (line 1449)
    # Getting the type of 'v' (line 1449)
    v_497200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 12), 'v', False)
    # Processing the call keyword arguments (line 1449)
    kwargs_497201 = {}
    # Getting the type of 'int' (line 1449)
    int_497199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 8), 'int', False)
    # Calling int(args, kwargs) (line 1449)
    int_call_result_497202 = invoke(stypy.reporting.localization.Localization(__file__, 1449, 8), int_497199, *[v_497200], **kwargs_497201)
    
    # Assigning a type to the variable 'n' (line 1449)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1449, 4), 'n', int_call_result_497202)
    
    # Assigning a BinOp to a Name (line 1450):
    
    # Assigning a BinOp to a Name (line 1450):
    # Getting the type of 'v' (line 1450)
    v_497203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 9), 'v')
    # Getting the type of 'n' (line 1450)
    n_497204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 11), 'n')
    # Applying the binary operator '-' (line 1450)
    result_sub_497205 = python_operator(stypy.reporting.localization.Localization(__file__, 1450, 9), '-', v_497203, n_497204)
    
    # Assigning a type to the variable 'v0' (line 1450)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1450, 4), 'v0', result_sub_497205)
    
    
    # Getting the type of 'n' (line 1451)
    n_497206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 8), 'n')
    int_497207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1451, 12), 'int')
    # Applying the binary operator '<' (line 1451)
    result_lt_497208 = python_operator(stypy.reporting.localization.Localization(__file__, 1451, 8), '<', n_497206, int_497207)
    
    # Testing the type of an if condition (line 1451)
    if_condition_497209 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1451, 4), result_lt_497208)
    # Assigning a type to the variable 'if_condition_497209' (line 1451)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1451, 4), 'if_condition_497209', if_condition_497209)
    # SSA begins for if statement (line 1451)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1452):
    
    # Assigning a Num to a Name (line 1452):
    int_497210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1452, 13), 'int')
    # Assigning a type to the variable 'n1' (line 1452)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1452, 8), 'n1', int_497210)
    # SSA branch for the else part of an if statement (line 1451)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1454):
    
    # Assigning a Name to a Name (line 1454):
    # Getting the type of 'n' (line 1454)
    n_497211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 13), 'n')
    # Assigning a type to the variable 'n1' (line 1454)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1454, 8), 'n1', n_497211)
    # SSA join for if statement (line 1451)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1455):
    
    # Assigning a BinOp to a Name (line 1455):
    # Getting the type of 'n1' (line 1455)
    n1_497212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 9), 'n1')
    # Getting the type of 'v0' (line 1455)
    v0_497213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 14), 'v0')
    # Applying the binary operator '+' (line 1455)
    result_add_497214 = python_operator(stypy.reporting.localization.Localization(__file__, 1455, 9), '+', n1_497212, v0_497213)
    
    # Assigning a type to the variable 'v1' (line 1455)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1455, 4), 'v1', result_add_497214)
    
    # Assigning a Call to a Tuple (line 1456):
    
    # Assigning a Subscript to a Name (line 1456):
    
    # Obtaining the type of the subscript
    int_497215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1456, 4), 'int')
    
    # Call to pbdv(...): (line 1456)
    # Processing the call arguments (line 1456)
    # Getting the type of 'v1' (line 1456)
    v1_497218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 36), 'v1', False)
    # Getting the type of 'x' (line 1456)
    x_497219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 40), 'x', False)
    # Processing the call keyword arguments (line 1456)
    kwargs_497220 = {}
    # Getting the type of 'specfun' (line 1456)
    specfun_497216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 23), 'specfun', False)
    # Obtaining the member 'pbdv' of a type (line 1456)
    pbdv_497217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 23), specfun_497216, 'pbdv')
    # Calling pbdv(args, kwargs) (line 1456)
    pbdv_call_result_497221 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 23), pbdv_497217, *[v1_497218, x_497219], **kwargs_497220)
    
    # Obtaining the member '__getitem__' of a type (line 1456)
    getitem___497222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 4), pbdv_call_result_497221, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1456)
    subscript_call_result_497223 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 4), getitem___497222, int_497215)
    
    # Assigning a type to the variable 'tuple_var_assignment_494769' (line 1456)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 4), 'tuple_var_assignment_494769', subscript_call_result_497223)
    
    # Assigning a Subscript to a Name (line 1456):
    
    # Obtaining the type of the subscript
    int_497224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1456, 4), 'int')
    
    # Call to pbdv(...): (line 1456)
    # Processing the call arguments (line 1456)
    # Getting the type of 'v1' (line 1456)
    v1_497227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 36), 'v1', False)
    # Getting the type of 'x' (line 1456)
    x_497228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 40), 'x', False)
    # Processing the call keyword arguments (line 1456)
    kwargs_497229 = {}
    # Getting the type of 'specfun' (line 1456)
    specfun_497225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 23), 'specfun', False)
    # Obtaining the member 'pbdv' of a type (line 1456)
    pbdv_497226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 23), specfun_497225, 'pbdv')
    # Calling pbdv(args, kwargs) (line 1456)
    pbdv_call_result_497230 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 23), pbdv_497226, *[v1_497227, x_497228], **kwargs_497229)
    
    # Obtaining the member '__getitem__' of a type (line 1456)
    getitem___497231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 4), pbdv_call_result_497230, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1456)
    subscript_call_result_497232 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 4), getitem___497231, int_497224)
    
    # Assigning a type to the variable 'tuple_var_assignment_494770' (line 1456)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 4), 'tuple_var_assignment_494770', subscript_call_result_497232)
    
    # Assigning a Subscript to a Name (line 1456):
    
    # Obtaining the type of the subscript
    int_497233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1456, 4), 'int')
    
    # Call to pbdv(...): (line 1456)
    # Processing the call arguments (line 1456)
    # Getting the type of 'v1' (line 1456)
    v1_497236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 36), 'v1', False)
    # Getting the type of 'x' (line 1456)
    x_497237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 40), 'x', False)
    # Processing the call keyword arguments (line 1456)
    kwargs_497238 = {}
    # Getting the type of 'specfun' (line 1456)
    specfun_497234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 23), 'specfun', False)
    # Obtaining the member 'pbdv' of a type (line 1456)
    pbdv_497235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 23), specfun_497234, 'pbdv')
    # Calling pbdv(args, kwargs) (line 1456)
    pbdv_call_result_497239 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 23), pbdv_497235, *[v1_497236, x_497237], **kwargs_497238)
    
    # Obtaining the member '__getitem__' of a type (line 1456)
    getitem___497240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 4), pbdv_call_result_497239, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1456)
    subscript_call_result_497241 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 4), getitem___497240, int_497233)
    
    # Assigning a type to the variable 'tuple_var_assignment_494771' (line 1456)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 4), 'tuple_var_assignment_494771', subscript_call_result_497241)
    
    # Assigning a Subscript to a Name (line 1456):
    
    # Obtaining the type of the subscript
    int_497242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1456, 4), 'int')
    
    # Call to pbdv(...): (line 1456)
    # Processing the call arguments (line 1456)
    # Getting the type of 'v1' (line 1456)
    v1_497245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 36), 'v1', False)
    # Getting the type of 'x' (line 1456)
    x_497246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 40), 'x', False)
    # Processing the call keyword arguments (line 1456)
    kwargs_497247 = {}
    # Getting the type of 'specfun' (line 1456)
    specfun_497243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 23), 'specfun', False)
    # Obtaining the member 'pbdv' of a type (line 1456)
    pbdv_497244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 23), specfun_497243, 'pbdv')
    # Calling pbdv(args, kwargs) (line 1456)
    pbdv_call_result_497248 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 23), pbdv_497244, *[v1_497245, x_497246], **kwargs_497247)
    
    # Obtaining the member '__getitem__' of a type (line 1456)
    getitem___497249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 4), pbdv_call_result_497248, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1456)
    subscript_call_result_497250 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 4), getitem___497249, int_497242)
    
    # Assigning a type to the variable 'tuple_var_assignment_494772' (line 1456)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 4), 'tuple_var_assignment_494772', subscript_call_result_497250)
    
    # Assigning a Name to a Name (line 1456):
    # Getting the type of 'tuple_var_assignment_494769' (line 1456)
    tuple_var_assignment_494769_497251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 4), 'tuple_var_assignment_494769')
    # Assigning a type to the variable 'dv' (line 1456)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 4), 'dv', tuple_var_assignment_494769_497251)
    
    # Assigning a Name to a Name (line 1456):
    # Getting the type of 'tuple_var_assignment_494770' (line 1456)
    tuple_var_assignment_494770_497252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 4), 'tuple_var_assignment_494770')
    # Assigning a type to the variable 'dp' (line 1456)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 8), 'dp', tuple_var_assignment_494770_497252)
    
    # Assigning a Name to a Name (line 1456):
    # Getting the type of 'tuple_var_assignment_494771' (line 1456)
    tuple_var_assignment_494771_497253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 4), 'tuple_var_assignment_494771')
    # Assigning a type to the variable 'pdf' (line 1456)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 12), 'pdf', tuple_var_assignment_494771_497253)
    
    # Assigning a Name to a Name (line 1456):
    # Getting the type of 'tuple_var_assignment_494772' (line 1456)
    tuple_var_assignment_494772_497254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 4), 'tuple_var_assignment_494772')
    # Assigning a type to the variable 'pdd' (line 1456)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 17), 'pdd', tuple_var_assignment_494772_497254)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1457)
    tuple_497255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1457, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1457)
    # Adding element type (line 1457)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n1' (line 1457)
    n1_497256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 15), 'n1')
    int_497257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1457, 18), 'int')
    # Applying the binary operator '+' (line 1457)
    result_add_497258 = python_operator(stypy.reporting.localization.Localization(__file__, 1457, 15), '+', n1_497256, int_497257)
    
    slice_497259 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1457, 11), None, result_add_497258, None)
    # Getting the type of 'dv' (line 1457)
    dv_497260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 11), 'dv')
    # Obtaining the member '__getitem__' of a type (line 1457)
    getitem___497261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1457, 11), dv_497260, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1457)
    subscript_call_result_497262 = invoke(stypy.reporting.localization.Localization(__file__, 1457, 11), getitem___497261, slice_497259)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1457, 11), tuple_497255, subscript_call_result_497262)
    # Adding element type (line 1457)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n1' (line 1457)
    n1_497263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 26), 'n1')
    int_497264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1457, 29), 'int')
    # Applying the binary operator '+' (line 1457)
    result_add_497265 = python_operator(stypy.reporting.localization.Localization(__file__, 1457, 26), '+', n1_497263, int_497264)
    
    slice_497266 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1457, 22), None, result_add_497265, None)
    # Getting the type of 'dp' (line 1457)
    dp_497267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 22), 'dp')
    # Obtaining the member '__getitem__' of a type (line 1457)
    getitem___497268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1457, 22), dp_497267, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1457)
    subscript_call_result_497269 = invoke(stypy.reporting.localization.Localization(__file__, 1457, 22), getitem___497268, slice_497266)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1457, 11), tuple_497255, subscript_call_result_497269)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1457)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1457, 4), 'stypy_return_type', tuple_497255)
    
    # ################# End of 'pbdv_seq(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'pbdv_seq' in the type store
    # Getting the type of 'stypy_return_type' (line 1423)
    stypy_return_type_497270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_497270)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'pbdv_seq'
    return stypy_return_type_497270

# Assigning a type to the variable 'pbdv_seq' (line 1423)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1423, 0), 'pbdv_seq', pbdv_seq)

@norecursion
def pbvv_seq(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'pbvv_seq'
    module_type_store = module_type_store.open_function_context('pbvv_seq', 1460, 0, False)
    
    # Passed parameters checking function
    pbvv_seq.stypy_localization = localization
    pbvv_seq.stypy_type_of_self = None
    pbvv_seq.stypy_type_store = module_type_store
    pbvv_seq.stypy_function_name = 'pbvv_seq'
    pbvv_seq.stypy_param_names_list = ['v', 'x']
    pbvv_seq.stypy_varargs_param_name = None
    pbvv_seq.stypy_kwargs_param_name = None
    pbvv_seq.stypy_call_defaults = defaults
    pbvv_seq.stypy_call_varargs = varargs
    pbvv_seq.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'pbvv_seq', ['v', 'x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'pbvv_seq', localization, ['v', 'x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'pbvv_seq(...)' code ##################

    str_497271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1483, (-1)), 'str', 'Parabolic cylinder functions Vv(x) and derivatives.\n\n    Parameters\n    ----------\n    v : float\n        Order of the parabolic cylinder function\n    x : float\n        Value at which to evaluate the function and derivatives\n\n    Returns\n    -------\n    dv : ndarray\n        Values of V_vi(x), for vi=v-int(v), vi=1+v-int(v), ..., vi=v.\n    dp : ndarray\n        Derivatives V_vi\'(x), for vi=v-int(v), vi=1+v-int(v), ..., vi=v.\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996, chapter 13.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    
    # Evaluating a boolean operation
    
    # Call to isscalar(...): (line 1484)
    # Processing the call arguments (line 1484)
    # Getting the type of 'v' (line 1484)
    v_497273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 21), 'v', False)
    # Processing the call keyword arguments (line 1484)
    kwargs_497274 = {}
    # Getting the type of 'isscalar' (line 1484)
    isscalar_497272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 12), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1484)
    isscalar_call_result_497275 = invoke(stypy.reporting.localization.Localization(__file__, 1484, 12), isscalar_497272, *[v_497273], **kwargs_497274)
    
    
    # Call to isscalar(...): (line 1484)
    # Processing the call arguments (line 1484)
    # Getting the type of 'x' (line 1484)
    x_497277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 37), 'x', False)
    # Processing the call keyword arguments (line 1484)
    kwargs_497278 = {}
    # Getting the type of 'isscalar' (line 1484)
    isscalar_497276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 28), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1484)
    isscalar_call_result_497279 = invoke(stypy.reporting.localization.Localization(__file__, 1484, 28), isscalar_497276, *[x_497277], **kwargs_497278)
    
    # Applying the binary operator 'and' (line 1484)
    result_and_keyword_497280 = python_operator(stypy.reporting.localization.Localization(__file__, 1484, 12), 'and', isscalar_call_result_497275, isscalar_call_result_497279)
    
    # Applying the 'not' unary operator (line 1484)
    result_not__497281 = python_operator(stypy.reporting.localization.Localization(__file__, 1484, 7), 'not', result_and_keyword_497280)
    
    # Testing the type of an if condition (line 1484)
    if_condition_497282 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1484, 4), result_not__497281)
    # Assigning a type to the variable 'if_condition_497282' (line 1484)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1484, 4), 'if_condition_497282', if_condition_497282)
    # SSA begins for if statement (line 1484)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1485)
    # Processing the call arguments (line 1485)
    str_497284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1485, 25), 'str', 'arguments must be scalars.')
    # Processing the call keyword arguments (line 1485)
    kwargs_497285 = {}
    # Getting the type of 'ValueError' (line 1485)
    ValueError_497283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1485)
    ValueError_call_result_497286 = invoke(stypy.reporting.localization.Localization(__file__, 1485, 14), ValueError_497283, *[str_497284], **kwargs_497285)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1485, 8), ValueError_call_result_497286, 'raise parameter', BaseException)
    # SSA join for if statement (line 1484)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1486):
    
    # Assigning a Call to a Name (line 1486):
    
    # Call to int(...): (line 1486)
    # Processing the call arguments (line 1486)
    # Getting the type of 'v' (line 1486)
    v_497288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 12), 'v', False)
    # Processing the call keyword arguments (line 1486)
    kwargs_497289 = {}
    # Getting the type of 'int' (line 1486)
    int_497287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 8), 'int', False)
    # Calling int(args, kwargs) (line 1486)
    int_call_result_497290 = invoke(stypy.reporting.localization.Localization(__file__, 1486, 8), int_497287, *[v_497288], **kwargs_497289)
    
    # Assigning a type to the variable 'n' (line 1486)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1486, 4), 'n', int_call_result_497290)
    
    # Assigning a BinOp to a Name (line 1487):
    
    # Assigning a BinOp to a Name (line 1487):
    # Getting the type of 'v' (line 1487)
    v_497291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 9), 'v')
    # Getting the type of 'n' (line 1487)
    n_497292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 11), 'n')
    # Applying the binary operator '-' (line 1487)
    result_sub_497293 = python_operator(stypy.reporting.localization.Localization(__file__, 1487, 9), '-', v_497291, n_497292)
    
    # Assigning a type to the variable 'v0' (line 1487)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1487, 4), 'v0', result_sub_497293)
    
    
    # Getting the type of 'n' (line 1488)
    n_497294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 8), 'n')
    int_497295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1488, 13), 'int')
    # Applying the binary operator '<=' (line 1488)
    result_le_497296 = python_operator(stypy.reporting.localization.Localization(__file__, 1488, 8), '<=', n_497294, int_497295)
    
    # Testing the type of an if condition (line 1488)
    if_condition_497297 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1488, 4), result_le_497296)
    # Assigning a type to the variable 'if_condition_497297' (line 1488)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1488, 4), 'if_condition_497297', if_condition_497297)
    # SSA begins for if statement (line 1488)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1489):
    
    # Assigning a Num to a Name (line 1489):
    int_497298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1489, 13), 'int')
    # Assigning a type to the variable 'n1' (line 1489)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1489, 8), 'n1', int_497298)
    # SSA branch for the else part of an if statement (line 1488)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1491):
    
    # Assigning a Name to a Name (line 1491):
    # Getting the type of 'n' (line 1491)
    n_497299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 13), 'n')
    # Assigning a type to the variable 'n1' (line 1491)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 'n1', n_497299)
    # SSA join for if statement (line 1488)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1492):
    
    # Assigning a BinOp to a Name (line 1492):
    # Getting the type of 'n1' (line 1492)
    n1_497300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 9), 'n1')
    # Getting the type of 'v0' (line 1492)
    v0_497301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 14), 'v0')
    # Applying the binary operator '+' (line 1492)
    result_add_497302 = python_operator(stypy.reporting.localization.Localization(__file__, 1492, 9), '+', n1_497300, v0_497301)
    
    # Assigning a type to the variable 'v1' (line 1492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 4), 'v1', result_add_497302)
    
    # Assigning a Call to a Tuple (line 1493):
    
    # Assigning a Subscript to a Name (line 1493):
    
    # Obtaining the type of the subscript
    int_497303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1493, 4), 'int')
    
    # Call to pbvv(...): (line 1493)
    # Processing the call arguments (line 1493)
    # Getting the type of 'v1' (line 1493)
    v1_497306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 36), 'v1', False)
    # Getting the type of 'x' (line 1493)
    x_497307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 40), 'x', False)
    # Processing the call keyword arguments (line 1493)
    kwargs_497308 = {}
    # Getting the type of 'specfun' (line 1493)
    specfun_497304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 23), 'specfun', False)
    # Obtaining the member 'pbvv' of a type (line 1493)
    pbvv_497305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1493, 23), specfun_497304, 'pbvv')
    # Calling pbvv(args, kwargs) (line 1493)
    pbvv_call_result_497309 = invoke(stypy.reporting.localization.Localization(__file__, 1493, 23), pbvv_497305, *[v1_497306, x_497307], **kwargs_497308)
    
    # Obtaining the member '__getitem__' of a type (line 1493)
    getitem___497310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1493, 4), pbvv_call_result_497309, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1493)
    subscript_call_result_497311 = invoke(stypy.reporting.localization.Localization(__file__, 1493, 4), getitem___497310, int_497303)
    
    # Assigning a type to the variable 'tuple_var_assignment_494773' (line 1493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1493, 4), 'tuple_var_assignment_494773', subscript_call_result_497311)
    
    # Assigning a Subscript to a Name (line 1493):
    
    # Obtaining the type of the subscript
    int_497312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1493, 4), 'int')
    
    # Call to pbvv(...): (line 1493)
    # Processing the call arguments (line 1493)
    # Getting the type of 'v1' (line 1493)
    v1_497315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 36), 'v1', False)
    # Getting the type of 'x' (line 1493)
    x_497316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 40), 'x', False)
    # Processing the call keyword arguments (line 1493)
    kwargs_497317 = {}
    # Getting the type of 'specfun' (line 1493)
    specfun_497313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 23), 'specfun', False)
    # Obtaining the member 'pbvv' of a type (line 1493)
    pbvv_497314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1493, 23), specfun_497313, 'pbvv')
    # Calling pbvv(args, kwargs) (line 1493)
    pbvv_call_result_497318 = invoke(stypy.reporting.localization.Localization(__file__, 1493, 23), pbvv_497314, *[v1_497315, x_497316], **kwargs_497317)
    
    # Obtaining the member '__getitem__' of a type (line 1493)
    getitem___497319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1493, 4), pbvv_call_result_497318, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1493)
    subscript_call_result_497320 = invoke(stypy.reporting.localization.Localization(__file__, 1493, 4), getitem___497319, int_497312)
    
    # Assigning a type to the variable 'tuple_var_assignment_494774' (line 1493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1493, 4), 'tuple_var_assignment_494774', subscript_call_result_497320)
    
    # Assigning a Subscript to a Name (line 1493):
    
    # Obtaining the type of the subscript
    int_497321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1493, 4), 'int')
    
    # Call to pbvv(...): (line 1493)
    # Processing the call arguments (line 1493)
    # Getting the type of 'v1' (line 1493)
    v1_497324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 36), 'v1', False)
    # Getting the type of 'x' (line 1493)
    x_497325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 40), 'x', False)
    # Processing the call keyword arguments (line 1493)
    kwargs_497326 = {}
    # Getting the type of 'specfun' (line 1493)
    specfun_497322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 23), 'specfun', False)
    # Obtaining the member 'pbvv' of a type (line 1493)
    pbvv_497323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1493, 23), specfun_497322, 'pbvv')
    # Calling pbvv(args, kwargs) (line 1493)
    pbvv_call_result_497327 = invoke(stypy.reporting.localization.Localization(__file__, 1493, 23), pbvv_497323, *[v1_497324, x_497325], **kwargs_497326)
    
    # Obtaining the member '__getitem__' of a type (line 1493)
    getitem___497328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1493, 4), pbvv_call_result_497327, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1493)
    subscript_call_result_497329 = invoke(stypy.reporting.localization.Localization(__file__, 1493, 4), getitem___497328, int_497321)
    
    # Assigning a type to the variable 'tuple_var_assignment_494775' (line 1493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1493, 4), 'tuple_var_assignment_494775', subscript_call_result_497329)
    
    # Assigning a Subscript to a Name (line 1493):
    
    # Obtaining the type of the subscript
    int_497330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1493, 4), 'int')
    
    # Call to pbvv(...): (line 1493)
    # Processing the call arguments (line 1493)
    # Getting the type of 'v1' (line 1493)
    v1_497333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 36), 'v1', False)
    # Getting the type of 'x' (line 1493)
    x_497334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 40), 'x', False)
    # Processing the call keyword arguments (line 1493)
    kwargs_497335 = {}
    # Getting the type of 'specfun' (line 1493)
    specfun_497331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 23), 'specfun', False)
    # Obtaining the member 'pbvv' of a type (line 1493)
    pbvv_497332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1493, 23), specfun_497331, 'pbvv')
    # Calling pbvv(args, kwargs) (line 1493)
    pbvv_call_result_497336 = invoke(stypy.reporting.localization.Localization(__file__, 1493, 23), pbvv_497332, *[v1_497333, x_497334], **kwargs_497335)
    
    # Obtaining the member '__getitem__' of a type (line 1493)
    getitem___497337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1493, 4), pbvv_call_result_497336, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1493)
    subscript_call_result_497338 = invoke(stypy.reporting.localization.Localization(__file__, 1493, 4), getitem___497337, int_497330)
    
    # Assigning a type to the variable 'tuple_var_assignment_494776' (line 1493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1493, 4), 'tuple_var_assignment_494776', subscript_call_result_497338)
    
    # Assigning a Name to a Name (line 1493):
    # Getting the type of 'tuple_var_assignment_494773' (line 1493)
    tuple_var_assignment_494773_497339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 4), 'tuple_var_assignment_494773')
    # Assigning a type to the variable 'dv' (line 1493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1493, 4), 'dv', tuple_var_assignment_494773_497339)
    
    # Assigning a Name to a Name (line 1493):
    # Getting the type of 'tuple_var_assignment_494774' (line 1493)
    tuple_var_assignment_494774_497340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 4), 'tuple_var_assignment_494774')
    # Assigning a type to the variable 'dp' (line 1493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1493, 8), 'dp', tuple_var_assignment_494774_497340)
    
    # Assigning a Name to a Name (line 1493):
    # Getting the type of 'tuple_var_assignment_494775' (line 1493)
    tuple_var_assignment_494775_497341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 4), 'tuple_var_assignment_494775')
    # Assigning a type to the variable 'pdf' (line 1493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1493, 12), 'pdf', tuple_var_assignment_494775_497341)
    
    # Assigning a Name to a Name (line 1493):
    # Getting the type of 'tuple_var_assignment_494776' (line 1493)
    tuple_var_assignment_494776_497342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 4), 'tuple_var_assignment_494776')
    # Assigning a type to the variable 'pdd' (line 1493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1493, 17), 'pdd', tuple_var_assignment_494776_497342)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1494)
    tuple_497343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1494, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1494)
    # Adding element type (line 1494)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n1' (line 1494)
    n1_497344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 15), 'n1')
    int_497345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1494, 18), 'int')
    # Applying the binary operator '+' (line 1494)
    result_add_497346 = python_operator(stypy.reporting.localization.Localization(__file__, 1494, 15), '+', n1_497344, int_497345)
    
    slice_497347 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1494, 11), None, result_add_497346, None)
    # Getting the type of 'dv' (line 1494)
    dv_497348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 11), 'dv')
    # Obtaining the member '__getitem__' of a type (line 1494)
    getitem___497349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1494, 11), dv_497348, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1494)
    subscript_call_result_497350 = invoke(stypy.reporting.localization.Localization(__file__, 1494, 11), getitem___497349, slice_497347)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1494, 11), tuple_497343, subscript_call_result_497350)
    # Adding element type (line 1494)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n1' (line 1494)
    n1_497351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 26), 'n1')
    int_497352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1494, 29), 'int')
    # Applying the binary operator '+' (line 1494)
    result_add_497353 = python_operator(stypy.reporting.localization.Localization(__file__, 1494, 26), '+', n1_497351, int_497352)
    
    slice_497354 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1494, 22), None, result_add_497353, None)
    # Getting the type of 'dp' (line 1494)
    dp_497355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 22), 'dp')
    # Obtaining the member '__getitem__' of a type (line 1494)
    getitem___497356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1494, 22), dp_497355, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1494)
    subscript_call_result_497357 = invoke(stypy.reporting.localization.Localization(__file__, 1494, 22), getitem___497356, slice_497354)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1494, 11), tuple_497343, subscript_call_result_497357)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1494)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1494, 4), 'stypy_return_type', tuple_497343)
    
    # ################# End of 'pbvv_seq(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'pbvv_seq' in the type store
    # Getting the type of 'stypy_return_type' (line 1460)
    stypy_return_type_497358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_497358)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'pbvv_seq'
    return stypy_return_type_497358

# Assigning a type to the variable 'pbvv_seq' (line 1460)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1460, 0), 'pbvv_seq', pbvv_seq)

@norecursion
def pbdn_seq(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'pbdn_seq'
    module_type_store = module_type_store.open_function_context('pbdn_seq', 1497, 0, False)
    
    # Passed parameters checking function
    pbdn_seq.stypy_localization = localization
    pbdn_seq.stypy_type_of_self = None
    pbdn_seq.stypy_type_store = module_type_store
    pbdn_seq.stypy_function_name = 'pbdn_seq'
    pbdn_seq.stypy_param_names_list = ['n', 'z']
    pbdn_seq.stypy_varargs_param_name = None
    pbdn_seq.stypy_kwargs_param_name = None
    pbdn_seq.stypy_call_defaults = defaults
    pbdn_seq.stypy_call_varargs = varargs
    pbdn_seq.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'pbdn_seq', ['n', 'z'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'pbdn_seq', localization, ['n', 'z'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'pbdn_seq(...)' code ##################

    str_497359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1520, (-1)), 'str', 'Parabolic cylinder functions Dn(z) and derivatives.\n\n    Parameters\n    ----------\n    n : int\n        Order of the parabolic cylinder function\n    z : complex\n        Value at which to evaluate the function and derivatives\n\n    Returns\n    -------\n    dv : ndarray\n        Values of D_i(z), for i=0, ..., i=n.\n    dp : ndarray\n        Derivatives D_i\'(z), for i=0, ..., i=n.\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996, chapter 13.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    
    # Evaluating a boolean operation
    
    # Call to isscalar(...): (line 1521)
    # Processing the call arguments (line 1521)
    # Getting the type of 'n' (line 1521)
    n_497361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 21), 'n', False)
    # Processing the call keyword arguments (line 1521)
    kwargs_497362 = {}
    # Getting the type of 'isscalar' (line 1521)
    isscalar_497360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 12), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1521)
    isscalar_call_result_497363 = invoke(stypy.reporting.localization.Localization(__file__, 1521, 12), isscalar_497360, *[n_497361], **kwargs_497362)
    
    
    # Call to isscalar(...): (line 1521)
    # Processing the call arguments (line 1521)
    # Getting the type of 'z' (line 1521)
    z_497365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 37), 'z', False)
    # Processing the call keyword arguments (line 1521)
    kwargs_497366 = {}
    # Getting the type of 'isscalar' (line 1521)
    isscalar_497364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 28), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1521)
    isscalar_call_result_497367 = invoke(stypy.reporting.localization.Localization(__file__, 1521, 28), isscalar_497364, *[z_497365], **kwargs_497366)
    
    # Applying the binary operator 'and' (line 1521)
    result_and_keyword_497368 = python_operator(stypy.reporting.localization.Localization(__file__, 1521, 12), 'and', isscalar_call_result_497363, isscalar_call_result_497367)
    
    # Applying the 'not' unary operator (line 1521)
    result_not__497369 = python_operator(stypy.reporting.localization.Localization(__file__, 1521, 7), 'not', result_and_keyword_497368)
    
    # Testing the type of an if condition (line 1521)
    if_condition_497370 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1521, 4), result_not__497369)
    # Assigning a type to the variable 'if_condition_497370' (line 1521)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1521, 4), 'if_condition_497370', if_condition_497370)
    # SSA begins for if statement (line 1521)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1522)
    # Processing the call arguments (line 1522)
    str_497372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1522, 25), 'str', 'arguments must be scalars.')
    # Processing the call keyword arguments (line 1522)
    kwargs_497373 = {}
    # Getting the type of 'ValueError' (line 1522)
    ValueError_497371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1522)
    ValueError_call_result_497374 = invoke(stypy.reporting.localization.Localization(__file__, 1522, 14), ValueError_497371, *[str_497372], **kwargs_497373)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1522, 8), ValueError_call_result_497374, 'raise parameter', BaseException)
    # SSA join for if statement (line 1521)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to floor(...): (line 1523)
    # Processing the call arguments (line 1523)
    # Getting the type of 'n' (line 1523)
    n_497376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 14), 'n', False)
    # Processing the call keyword arguments (line 1523)
    kwargs_497377 = {}
    # Getting the type of 'floor' (line 1523)
    floor_497375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 8), 'floor', False)
    # Calling floor(args, kwargs) (line 1523)
    floor_call_result_497378 = invoke(stypy.reporting.localization.Localization(__file__, 1523, 8), floor_497375, *[n_497376], **kwargs_497377)
    
    # Getting the type of 'n' (line 1523)
    n_497379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 20), 'n')
    # Applying the binary operator '!=' (line 1523)
    result_ne_497380 = python_operator(stypy.reporting.localization.Localization(__file__, 1523, 8), '!=', floor_call_result_497378, n_497379)
    
    # Testing the type of an if condition (line 1523)
    if_condition_497381 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1523, 4), result_ne_497380)
    # Assigning a type to the variable 'if_condition_497381' (line 1523)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1523, 4), 'if_condition_497381', if_condition_497381)
    # SSA begins for if statement (line 1523)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1524)
    # Processing the call arguments (line 1524)
    str_497383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1524, 25), 'str', 'n must be an integer.')
    # Processing the call keyword arguments (line 1524)
    kwargs_497384 = {}
    # Getting the type of 'ValueError' (line 1524)
    ValueError_497382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1524)
    ValueError_call_result_497385 = invoke(stypy.reporting.localization.Localization(__file__, 1524, 14), ValueError_497382, *[str_497383], **kwargs_497384)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1524, 8), ValueError_call_result_497385, 'raise parameter', BaseException)
    # SSA join for if statement (line 1523)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to abs(...): (line 1525)
    # Processing the call arguments (line 1525)
    # Getting the type of 'n' (line 1525)
    n_497387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 12), 'n', False)
    # Processing the call keyword arguments (line 1525)
    kwargs_497388 = {}
    # Getting the type of 'abs' (line 1525)
    abs_497386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 8), 'abs', False)
    # Calling abs(args, kwargs) (line 1525)
    abs_call_result_497389 = invoke(stypy.reporting.localization.Localization(__file__, 1525, 8), abs_497386, *[n_497387], **kwargs_497388)
    
    int_497390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1525, 18), 'int')
    # Applying the binary operator '<=' (line 1525)
    result_le_497391 = python_operator(stypy.reporting.localization.Localization(__file__, 1525, 8), '<=', abs_call_result_497389, int_497390)
    
    # Testing the type of an if condition (line 1525)
    if_condition_497392 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1525, 4), result_le_497391)
    # Assigning a type to the variable 'if_condition_497392' (line 1525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1525, 4), 'if_condition_497392', if_condition_497392)
    # SSA begins for if statement (line 1525)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1526):
    
    # Assigning a Num to a Name (line 1526):
    int_497393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1526, 13), 'int')
    # Assigning a type to the variable 'n1' (line 1526)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1526, 8), 'n1', int_497393)
    # SSA branch for the else part of an if statement (line 1525)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1528):
    
    # Assigning a Name to a Name (line 1528):
    # Getting the type of 'n' (line 1528)
    n_497394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 13), 'n')
    # Assigning a type to the variable 'n1' (line 1528)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1528, 8), 'n1', n_497394)
    # SSA join for if statement (line 1525)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 1529):
    
    # Assigning a Subscript to a Name (line 1529):
    
    # Obtaining the type of the subscript
    int_497395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1529, 4), 'int')
    
    # Call to cpbdn(...): (line 1529)
    # Processing the call arguments (line 1529)
    # Getting the type of 'n1' (line 1529)
    n1_497398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 29), 'n1', False)
    # Getting the type of 'z' (line 1529)
    z_497399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 33), 'z', False)
    # Processing the call keyword arguments (line 1529)
    kwargs_497400 = {}
    # Getting the type of 'specfun' (line 1529)
    specfun_497396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 15), 'specfun', False)
    # Obtaining the member 'cpbdn' of a type (line 1529)
    cpbdn_497397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1529, 15), specfun_497396, 'cpbdn')
    # Calling cpbdn(args, kwargs) (line 1529)
    cpbdn_call_result_497401 = invoke(stypy.reporting.localization.Localization(__file__, 1529, 15), cpbdn_497397, *[n1_497398, z_497399], **kwargs_497400)
    
    # Obtaining the member '__getitem__' of a type (line 1529)
    getitem___497402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1529, 4), cpbdn_call_result_497401, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1529)
    subscript_call_result_497403 = invoke(stypy.reporting.localization.Localization(__file__, 1529, 4), getitem___497402, int_497395)
    
    # Assigning a type to the variable 'tuple_var_assignment_494777' (line 1529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'tuple_var_assignment_494777', subscript_call_result_497403)
    
    # Assigning a Subscript to a Name (line 1529):
    
    # Obtaining the type of the subscript
    int_497404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1529, 4), 'int')
    
    # Call to cpbdn(...): (line 1529)
    # Processing the call arguments (line 1529)
    # Getting the type of 'n1' (line 1529)
    n1_497407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 29), 'n1', False)
    # Getting the type of 'z' (line 1529)
    z_497408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 33), 'z', False)
    # Processing the call keyword arguments (line 1529)
    kwargs_497409 = {}
    # Getting the type of 'specfun' (line 1529)
    specfun_497405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 15), 'specfun', False)
    # Obtaining the member 'cpbdn' of a type (line 1529)
    cpbdn_497406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1529, 15), specfun_497405, 'cpbdn')
    # Calling cpbdn(args, kwargs) (line 1529)
    cpbdn_call_result_497410 = invoke(stypy.reporting.localization.Localization(__file__, 1529, 15), cpbdn_497406, *[n1_497407, z_497408], **kwargs_497409)
    
    # Obtaining the member '__getitem__' of a type (line 1529)
    getitem___497411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1529, 4), cpbdn_call_result_497410, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1529)
    subscript_call_result_497412 = invoke(stypy.reporting.localization.Localization(__file__, 1529, 4), getitem___497411, int_497404)
    
    # Assigning a type to the variable 'tuple_var_assignment_494778' (line 1529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'tuple_var_assignment_494778', subscript_call_result_497412)
    
    # Assigning a Name to a Name (line 1529):
    # Getting the type of 'tuple_var_assignment_494777' (line 1529)
    tuple_var_assignment_494777_497413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'tuple_var_assignment_494777')
    # Assigning a type to the variable 'cpb' (line 1529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'cpb', tuple_var_assignment_494777_497413)
    
    # Assigning a Name to a Name (line 1529):
    # Getting the type of 'tuple_var_assignment_494778' (line 1529)
    tuple_var_assignment_494778_497414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'tuple_var_assignment_494778')
    # Assigning a type to the variable 'cpd' (line 1529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 9), 'cpd', tuple_var_assignment_494778_497414)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1530)
    tuple_497415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1530, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1530)
    # Adding element type (line 1530)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n1' (line 1530)
    n1_497416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 16), 'n1')
    int_497417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1530, 19), 'int')
    # Applying the binary operator '+' (line 1530)
    result_add_497418 = python_operator(stypy.reporting.localization.Localization(__file__, 1530, 16), '+', n1_497416, int_497417)
    
    slice_497419 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1530, 11), None, result_add_497418, None)
    # Getting the type of 'cpb' (line 1530)
    cpb_497420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 11), 'cpb')
    # Obtaining the member '__getitem__' of a type (line 1530)
    getitem___497421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1530, 11), cpb_497420, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1530)
    subscript_call_result_497422 = invoke(stypy.reporting.localization.Localization(__file__, 1530, 11), getitem___497421, slice_497419)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1530, 11), tuple_497415, subscript_call_result_497422)
    # Adding element type (line 1530)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n1' (line 1530)
    n1_497423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 28), 'n1')
    int_497424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1530, 31), 'int')
    # Applying the binary operator '+' (line 1530)
    result_add_497425 = python_operator(stypy.reporting.localization.Localization(__file__, 1530, 28), '+', n1_497423, int_497424)
    
    slice_497426 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1530, 23), None, result_add_497425, None)
    # Getting the type of 'cpd' (line 1530)
    cpd_497427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 23), 'cpd')
    # Obtaining the member '__getitem__' of a type (line 1530)
    getitem___497428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1530, 23), cpd_497427, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1530)
    subscript_call_result_497429 = invoke(stypy.reporting.localization.Localization(__file__, 1530, 23), getitem___497428, slice_497426)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1530, 11), tuple_497415, subscript_call_result_497429)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1530)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1530, 4), 'stypy_return_type', tuple_497415)
    
    # ################# End of 'pbdn_seq(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'pbdn_seq' in the type store
    # Getting the type of 'stypy_return_type' (line 1497)
    stypy_return_type_497430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_497430)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'pbdn_seq'
    return stypy_return_type_497430

# Assigning a type to the variable 'pbdn_seq' (line 1497)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1497, 0), 'pbdn_seq', pbdn_seq)

@norecursion
def ber_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'ber_zeros'
    module_type_store = module_type_store.open_function_context('ber_zeros', 1533, 0, False)
    
    # Passed parameters checking function
    ber_zeros.stypy_localization = localization
    ber_zeros.stypy_type_of_self = None
    ber_zeros.stypy_type_store = module_type_store
    ber_zeros.stypy_function_name = 'ber_zeros'
    ber_zeros.stypy_param_names_list = ['nt']
    ber_zeros.stypy_varargs_param_name = None
    ber_zeros.stypy_kwargs_param_name = None
    ber_zeros.stypy_call_defaults = defaults
    ber_zeros.stypy_call_varargs = varargs
    ber_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ber_zeros', ['nt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ber_zeros', localization, ['nt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ber_zeros(...)' code ##################

    str_497431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1542, (-1)), 'str', 'Compute nt zeros of the Kelvin function ber(x).\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to isscalar(...): (line 1543)
    # Processing the call arguments (line 1543)
    # Getting the type of 'nt' (line 1543)
    nt_497433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 20), 'nt', False)
    # Processing the call keyword arguments (line 1543)
    kwargs_497434 = {}
    # Getting the type of 'isscalar' (line 1543)
    isscalar_497432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1543)
    isscalar_call_result_497435 = invoke(stypy.reporting.localization.Localization(__file__, 1543, 11), isscalar_497432, *[nt_497433], **kwargs_497434)
    
    # Applying the 'not' unary operator (line 1543)
    result_not__497436 = python_operator(stypy.reporting.localization.Localization(__file__, 1543, 7), 'not', isscalar_call_result_497435)
    
    
    
    # Call to floor(...): (line 1543)
    # Processing the call arguments (line 1543)
    # Getting the type of 'nt' (line 1543)
    nt_497438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 34), 'nt', False)
    # Processing the call keyword arguments (line 1543)
    kwargs_497439 = {}
    # Getting the type of 'floor' (line 1543)
    floor_497437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 28), 'floor', False)
    # Calling floor(args, kwargs) (line 1543)
    floor_call_result_497440 = invoke(stypy.reporting.localization.Localization(__file__, 1543, 28), floor_497437, *[nt_497438], **kwargs_497439)
    
    # Getting the type of 'nt' (line 1543)
    nt_497441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 41), 'nt')
    # Applying the binary operator '!=' (line 1543)
    result_ne_497442 = python_operator(stypy.reporting.localization.Localization(__file__, 1543, 28), '!=', floor_call_result_497440, nt_497441)
    
    # Applying the binary operator 'or' (line 1543)
    result_or_keyword_497443 = python_operator(stypy.reporting.localization.Localization(__file__, 1543, 7), 'or', result_not__497436, result_ne_497442)
    
    # Getting the type of 'nt' (line 1543)
    nt_497444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 49), 'nt')
    int_497445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1543, 55), 'int')
    # Applying the binary operator '<=' (line 1543)
    result_le_497446 = python_operator(stypy.reporting.localization.Localization(__file__, 1543, 49), '<=', nt_497444, int_497445)
    
    # Applying the binary operator 'or' (line 1543)
    result_or_keyword_497447 = python_operator(stypy.reporting.localization.Localization(__file__, 1543, 7), 'or', result_or_keyword_497443, result_le_497446)
    
    # Testing the type of an if condition (line 1543)
    if_condition_497448 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1543, 4), result_or_keyword_497447)
    # Assigning a type to the variable 'if_condition_497448' (line 1543)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1543, 4), 'if_condition_497448', if_condition_497448)
    # SSA begins for if statement (line 1543)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1544)
    # Processing the call arguments (line 1544)
    str_497450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1544, 25), 'str', 'nt must be positive integer scalar.')
    # Processing the call keyword arguments (line 1544)
    kwargs_497451 = {}
    # Getting the type of 'ValueError' (line 1544)
    ValueError_497449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1544)
    ValueError_call_result_497452 = invoke(stypy.reporting.localization.Localization(__file__, 1544, 14), ValueError_497449, *[str_497450], **kwargs_497451)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1544, 8), ValueError_call_result_497452, 'raise parameter', BaseException)
    # SSA join for if statement (line 1543)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to klvnzo(...): (line 1545)
    # Processing the call arguments (line 1545)
    # Getting the type of 'nt' (line 1545)
    nt_497455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 26), 'nt', False)
    int_497456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1545, 30), 'int')
    # Processing the call keyword arguments (line 1545)
    kwargs_497457 = {}
    # Getting the type of 'specfun' (line 1545)
    specfun_497453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 11), 'specfun', False)
    # Obtaining the member 'klvnzo' of a type (line 1545)
    klvnzo_497454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1545, 11), specfun_497453, 'klvnzo')
    # Calling klvnzo(args, kwargs) (line 1545)
    klvnzo_call_result_497458 = invoke(stypy.reporting.localization.Localization(__file__, 1545, 11), klvnzo_497454, *[nt_497455, int_497456], **kwargs_497457)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1545)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1545, 4), 'stypy_return_type', klvnzo_call_result_497458)
    
    # ################# End of 'ber_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ber_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 1533)
    stypy_return_type_497459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_497459)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ber_zeros'
    return stypy_return_type_497459

# Assigning a type to the variable 'ber_zeros' (line 1533)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1533, 0), 'ber_zeros', ber_zeros)

@norecursion
def bei_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'bei_zeros'
    module_type_store = module_type_store.open_function_context('bei_zeros', 1548, 0, False)
    
    # Passed parameters checking function
    bei_zeros.stypy_localization = localization
    bei_zeros.stypy_type_of_self = None
    bei_zeros.stypy_type_store = module_type_store
    bei_zeros.stypy_function_name = 'bei_zeros'
    bei_zeros.stypy_param_names_list = ['nt']
    bei_zeros.stypy_varargs_param_name = None
    bei_zeros.stypy_kwargs_param_name = None
    bei_zeros.stypy_call_defaults = defaults
    bei_zeros.stypy_call_varargs = varargs
    bei_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'bei_zeros', ['nt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'bei_zeros', localization, ['nt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'bei_zeros(...)' code ##################

    str_497460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1557, (-1)), 'str', 'Compute nt zeros of the Kelvin function bei(x).\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to isscalar(...): (line 1558)
    # Processing the call arguments (line 1558)
    # Getting the type of 'nt' (line 1558)
    nt_497462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 20), 'nt', False)
    # Processing the call keyword arguments (line 1558)
    kwargs_497463 = {}
    # Getting the type of 'isscalar' (line 1558)
    isscalar_497461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1558)
    isscalar_call_result_497464 = invoke(stypy.reporting.localization.Localization(__file__, 1558, 11), isscalar_497461, *[nt_497462], **kwargs_497463)
    
    # Applying the 'not' unary operator (line 1558)
    result_not__497465 = python_operator(stypy.reporting.localization.Localization(__file__, 1558, 7), 'not', isscalar_call_result_497464)
    
    
    
    # Call to floor(...): (line 1558)
    # Processing the call arguments (line 1558)
    # Getting the type of 'nt' (line 1558)
    nt_497467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 34), 'nt', False)
    # Processing the call keyword arguments (line 1558)
    kwargs_497468 = {}
    # Getting the type of 'floor' (line 1558)
    floor_497466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 28), 'floor', False)
    # Calling floor(args, kwargs) (line 1558)
    floor_call_result_497469 = invoke(stypy.reporting.localization.Localization(__file__, 1558, 28), floor_497466, *[nt_497467], **kwargs_497468)
    
    # Getting the type of 'nt' (line 1558)
    nt_497470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 41), 'nt')
    # Applying the binary operator '!=' (line 1558)
    result_ne_497471 = python_operator(stypy.reporting.localization.Localization(__file__, 1558, 28), '!=', floor_call_result_497469, nt_497470)
    
    # Applying the binary operator 'or' (line 1558)
    result_or_keyword_497472 = python_operator(stypy.reporting.localization.Localization(__file__, 1558, 7), 'or', result_not__497465, result_ne_497471)
    
    # Getting the type of 'nt' (line 1558)
    nt_497473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 49), 'nt')
    int_497474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1558, 55), 'int')
    # Applying the binary operator '<=' (line 1558)
    result_le_497475 = python_operator(stypy.reporting.localization.Localization(__file__, 1558, 49), '<=', nt_497473, int_497474)
    
    # Applying the binary operator 'or' (line 1558)
    result_or_keyword_497476 = python_operator(stypy.reporting.localization.Localization(__file__, 1558, 7), 'or', result_or_keyword_497472, result_le_497475)
    
    # Testing the type of an if condition (line 1558)
    if_condition_497477 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1558, 4), result_or_keyword_497476)
    # Assigning a type to the variable 'if_condition_497477' (line 1558)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1558, 4), 'if_condition_497477', if_condition_497477)
    # SSA begins for if statement (line 1558)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1559)
    # Processing the call arguments (line 1559)
    str_497479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1559, 25), 'str', 'nt must be positive integer scalar.')
    # Processing the call keyword arguments (line 1559)
    kwargs_497480 = {}
    # Getting the type of 'ValueError' (line 1559)
    ValueError_497478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1559)
    ValueError_call_result_497481 = invoke(stypy.reporting.localization.Localization(__file__, 1559, 14), ValueError_497478, *[str_497479], **kwargs_497480)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1559, 8), ValueError_call_result_497481, 'raise parameter', BaseException)
    # SSA join for if statement (line 1558)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to klvnzo(...): (line 1560)
    # Processing the call arguments (line 1560)
    # Getting the type of 'nt' (line 1560)
    nt_497484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 26), 'nt', False)
    int_497485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1560, 30), 'int')
    # Processing the call keyword arguments (line 1560)
    kwargs_497486 = {}
    # Getting the type of 'specfun' (line 1560)
    specfun_497482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 11), 'specfun', False)
    # Obtaining the member 'klvnzo' of a type (line 1560)
    klvnzo_497483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1560, 11), specfun_497482, 'klvnzo')
    # Calling klvnzo(args, kwargs) (line 1560)
    klvnzo_call_result_497487 = invoke(stypy.reporting.localization.Localization(__file__, 1560, 11), klvnzo_497483, *[nt_497484, int_497485], **kwargs_497486)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1560)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1560, 4), 'stypy_return_type', klvnzo_call_result_497487)
    
    # ################# End of 'bei_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'bei_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 1548)
    stypy_return_type_497488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_497488)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'bei_zeros'
    return stypy_return_type_497488

# Assigning a type to the variable 'bei_zeros' (line 1548)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1548, 0), 'bei_zeros', bei_zeros)

@norecursion
def ker_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'ker_zeros'
    module_type_store = module_type_store.open_function_context('ker_zeros', 1563, 0, False)
    
    # Passed parameters checking function
    ker_zeros.stypy_localization = localization
    ker_zeros.stypy_type_of_self = None
    ker_zeros.stypy_type_store = module_type_store
    ker_zeros.stypy_function_name = 'ker_zeros'
    ker_zeros.stypy_param_names_list = ['nt']
    ker_zeros.stypy_varargs_param_name = None
    ker_zeros.stypy_kwargs_param_name = None
    ker_zeros.stypy_call_defaults = defaults
    ker_zeros.stypy_call_varargs = varargs
    ker_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ker_zeros', ['nt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ker_zeros', localization, ['nt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ker_zeros(...)' code ##################

    str_497489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1572, (-1)), 'str', 'Compute nt zeros of the Kelvin function ker(x).\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to isscalar(...): (line 1573)
    # Processing the call arguments (line 1573)
    # Getting the type of 'nt' (line 1573)
    nt_497491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 20), 'nt', False)
    # Processing the call keyword arguments (line 1573)
    kwargs_497492 = {}
    # Getting the type of 'isscalar' (line 1573)
    isscalar_497490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1573)
    isscalar_call_result_497493 = invoke(stypy.reporting.localization.Localization(__file__, 1573, 11), isscalar_497490, *[nt_497491], **kwargs_497492)
    
    # Applying the 'not' unary operator (line 1573)
    result_not__497494 = python_operator(stypy.reporting.localization.Localization(__file__, 1573, 7), 'not', isscalar_call_result_497493)
    
    
    
    # Call to floor(...): (line 1573)
    # Processing the call arguments (line 1573)
    # Getting the type of 'nt' (line 1573)
    nt_497496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 34), 'nt', False)
    # Processing the call keyword arguments (line 1573)
    kwargs_497497 = {}
    # Getting the type of 'floor' (line 1573)
    floor_497495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 28), 'floor', False)
    # Calling floor(args, kwargs) (line 1573)
    floor_call_result_497498 = invoke(stypy.reporting.localization.Localization(__file__, 1573, 28), floor_497495, *[nt_497496], **kwargs_497497)
    
    # Getting the type of 'nt' (line 1573)
    nt_497499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 41), 'nt')
    # Applying the binary operator '!=' (line 1573)
    result_ne_497500 = python_operator(stypy.reporting.localization.Localization(__file__, 1573, 28), '!=', floor_call_result_497498, nt_497499)
    
    # Applying the binary operator 'or' (line 1573)
    result_or_keyword_497501 = python_operator(stypy.reporting.localization.Localization(__file__, 1573, 7), 'or', result_not__497494, result_ne_497500)
    
    # Getting the type of 'nt' (line 1573)
    nt_497502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 49), 'nt')
    int_497503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1573, 55), 'int')
    # Applying the binary operator '<=' (line 1573)
    result_le_497504 = python_operator(stypy.reporting.localization.Localization(__file__, 1573, 49), '<=', nt_497502, int_497503)
    
    # Applying the binary operator 'or' (line 1573)
    result_or_keyword_497505 = python_operator(stypy.reporting.localization.Localization(__file__, 1573, 7), 'or', result_or_keyword_497501, result_le_497504)
    
    # Testing the type of an if condition (line 1573)
    if_condition_497506 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1573, 4), result_or_keyword_497505)
    # Assigning a type to the variable 'if_condition_497506' (line 1573)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1573, 4), 'if_condition_497506', if_condition_497506)
    # SSA begins for if statement (line 1573)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1574)
    # Processing the call arguments (line 1574)
    str_497508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1574, 25), 'str', 'nt must be positive integer scalar.')
    # Processing the call keyword arguments (line 1574)
    kwargs_497509 = {}
    # Getting the type of 'ValueError' (line 1574)
    ValueError_497507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1574)
    ValueError_call_result_497510 = invoke(stypy.reporting.localization.Localization(__file__, 1574, 14), ValueError_497507, *[str_497508], **kwargs_497509)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1574, 8), ValueError_call_result_497510, 'raise parameter', BaseException)
    # SSA join for if statement (line 1573)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to klvnzo(...): (line 1575)
    # Processing the call arguments (line 1575)
    # Getting the type of 'nt' (line 1575)
    nt_497513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 26), 'nt', False)
    int_497514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1575, 30), 'int')
    # Processing the call keyword arguments (line 1575)
    kwargs_497515 = {}
    # Getting the type of 'specfun' (line 1575)
    specfun_497511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 11), 'specfun', False)
    # Obtaining the member 'klvnzo' of a type (line 1575)
    klvnzo_497512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1575, 11), specfun_497511, 'klvnzo')
    # Calling klvnzo(args, kwargs) (line 1575)
    klvnzo_call_result_497516 = invoke(stypy.reporting.localization.Localization(__file__, 1575, 11), klvnzo_497512, *[nt_497513, int_497514], **kwargs_497515)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1575)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1575, 4), 'stypy_return_type', klvnzo_call_result_497516)
    
    # ################# End of 'ker_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ker_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 1563)
    stypy_return_type_497517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1563, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_497517)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ker_zeros'
    return stypy_return_type_497517

# Assigning a type to the variable 'ker_zeros' (line 1563)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1563, 0), 'ker_zeros', ker_zeros)

@norecursion
def kei_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'kei_zeros'
    module_type_store = module_type_store.open_function_context('kei_zeros', 1578, 0, False)
    
    # Passed parameters checking function
    kei_zeros.stypy_localization = localization
    kei_zeros.stypy_type_of_self = None
    kei_zeros.stypy_type_store = module_type_store
    kei_zeros.stypy_function_name = 'kei_zeros'
    kei_zeros.stypy_param_names_list = ['nt']
    kei_zeros.stypy_varargs_param_name = None
    kei_zeros.stypy_kwargs_param_name = None
    kei_zeros.stypy_call_defaults = defaults
    kei_zeros.stypy_call_varargs = varargs
    kei_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'kei_zeros', ['nt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'kei_zeros', localization, ['nt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'kei_zeros(...)' code ##################

    str_497518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1580, (-1)), 'str', 'Compute nt zeros of the Kelvin function kei(x).\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to isscalar(...): (line 1581)
    # Processing the call arguments (line 1581)
    # Getting the type of 'nt' (line 1581)
    nt_497520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 20), 'nt', False)
    # Processing the call keyword arguments (line 1581)
    kwargs_497521 = {}
    # Getting the type of 'isscalar' (line 1581)
    isscalar_497519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1581)
    isscalar_call_result_497522 = invoke(stypy.reporting.localization.Localization(__file__, 1581, 11), isscalar_497519, *[nt_497520], **kwargs_497521)
    
    # Applying the 'not' unary operator (line 1581)
    result_not__497523 = python_operator(stypy.reporting.localization.Localization(__file__, 1581, 7), 'not', isscalar_call_result_497522)
    
    
    
    # Call to floor(...): (line 1581)
    # Processing the call arguments (line 1581)
    # Getting the type of 'nt' (line 1581)
    nt_497525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 34), 'nt', False)
    # Processing the call keyword arguments (line 1581)
    kwargs_497526 = {}
    # Getting the type of 'floor' (line 1581)
    floor_497524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 28), 'floor', False)
    # Calling floor(args, kwargs) (line 1581)
    floor_call_result_497527 = invoke(stypy.reporting.localization.Localization(__file__, 1581, 28), floor_497524, *[nt_497525], **kwargs_497526)
    
    # Getting the type of 'nt' (line 1581)
    nt_497528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 41), 'nt')
    # Applying the binary operator '!=' (line 1581)
    result_ne_497529 = python_operator(stypy.reporting.localization.Localization(__file__, 1581, 28), '!=', floor_call_result_497527, nt_497528)
    
    # Applying the binary operator 'or' (line 1581)
    result_or_keyword_497530 = python_operator(stypy.reporting.localization.Localization(__file__, 1581, 7), 'or', result_not__497523, result_ne_497529)
    
    # Getting the type of 'nt' (line 1581)
    nt_497531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 49), 'nt')
    int_497532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1581, 55), 'int')
    # Applying the binary operator '<=' (line 1581)
    result_le_497533 = python_operator(stypy.reporting.localization.Localization(__file__, 1581, 49), '<=', nt_497531, int_497532)
    
    # Applying the binary operator 'or' (line 1581)
    result_or_keyword_497534 = python_operator(stypy.reporting.localization.Localization(__file__, 1581, 7), 'or', result_or_keyword_497530, result_le_497533)
    
    # Testing the type of an if condition (line 1581)
    if_condition_497535 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1581, 4), result_or_keyword_497534)
    # Assigning a type to the variable 'if_condition_497535' (line 1581)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1581, 4), 'if_condition_497535', if_condition_497535)
    # SSA begins for if statement (line 1581)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1582)
    # Processing the call arguments (line 1582)
    str_497537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1582, 25), 'str', 'nt must be positive integer scalar.')
    # Processing the call keyword arguments (line 1582)
    kwargs_497538 = {}
    # Getting the type of 'ValueError' (line 1582)
    ValueError_497536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1582)
    ValueError_call_result_497539 = invoke(stypy.reporting.localization.Localization(__file__, 1582, 14), ValueError_497536, *[str_497537], **kwargs_497538)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1582, 8), ValueError_call_result_497539, 'raise parameter', BaseException)
    # SSA join for if statement (line 1581)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to klvnzo(...): (line 1583)
    # Processing the call arguments (line 1583)
    # Getting the type of 'nt' (line 1583)
    nt_497542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 26), 'nt', False)
    int_497543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1583, 30), 'int')
    # Processing the call keyword arguments (line 1583)
    kwargs_497544 = {}
    # Getting the type of 'specfun' (line 1583)
    specfun_497540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 11), 'specfun', False)
    # Obtaining the member 'klvnzo' of a type (line 1583)
    klvnzo_497541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 11), specfun_497540, 'klvnzo')
    # Calling klvnzo(args, kwargs) (line 1583)
    klvnzo_call_result_497545 = invoke(stypy.reporting.localization.Localization(__file__, 1583, 11), klvnzo_497541, *[nt_497542, int_497543], **kwargs_497544)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1583)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1583, 4), 'stypy_return_type', klvnzo_call_result_497545)
    
    # ################# End of 'kei_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'kei_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 1578)
    stypy_return_type_497546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_497546)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'kei_zeros'
    return stypy_return_type_497546

# Assigning a type to the variable 'kei_zeros' (line 1578)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1578, 0), 'kei_zeros', kei_zeros)

@norecursion
def berp_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'berp_zeros'
    module_type_store = module_type_store.open_function_context('berp_zeros', 1586, 0, False)
    
    # Passed parameters checking function
    berp_zeros.stypy_localization = localization
    berp_zeros.stypy_type_of_self = None
    berp_zeros.stypy_type_store = module_type_store
    berp_zeros.stypy_function_name = 'berp_zeros'
    berp_zeros.stypy_param_names_list = ['nt']
    berp_zeros.stypy_varargs_param_name = None
    berp_zeros.stypy_kwargs_param_name = None
    berp_zeros.stypy_call_defaults = defaults
    berp_zeros.stypy_call_varargs = varargs
    berp_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'berp_zeros', ['nt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'berp_zeros', localization, ['nt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'berp_zeros(...)' code ##################

    str_497547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1595, (-1)), 'str', 'Compute nt zeros of the Kelvin function ber\'(x).\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to isscalar(...): (line 1596)
    # Processing the call arguments (line 1596)
    # Getting the type of 'nt' (line 1596)
    nt_497549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 20), 'nt', False)
    # Processing the call keyword arguments (line 1596)
    kwargs_497550 = {}
    # Getting the type of 'isscalar' (line 1596)
    isscalar_497548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1596)
    isscalar_call_result_497551 = invoke(stypy.reporting.localization.Localization(__file__, 1596, 11), isscalar_497548, *[nt_497549], **kwargs_497550)
    
    # Applying the 'not' unary operator (line 1596)
    result_not__497552 = python_operator(stypy.reporting.localization.Localization(__file__, 1596, 7), 'not', isscalar_call_result_497551)
    
    
    
    # Call to floor(...): (line 1596)
    # Processing the call arguments (line 1596)
    # Getting the type of 'nt' (line 1596)
    nt_497554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 34), 'nt', False)
    # Processing the call keyword arguments (line 1596)
    kwargs_497555 = {}
    # Getting the type of 'floor' (line 1596)
    floor_497553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 28), 'floor', False)
    # Calling floor(args, kwargs) (line 1596)
    floor_call_result_497556 = invoke(stypy.reporting.localization.Localization(__file__, 1596, 28), floor_497553, *[nt_497554], **kwargs_497555)
    
    # Getting the type of 'nt' (line 1596)
    nt_497557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 41), 'nt')
    # Applying the binary operator '!=' (line 1596)
    result_ne_497558 = python_operator(stypy.reporting.localization.Localization(__file__, 1596, 28), '!=', floor_call_result_497556, nt_497557)
    
    # Applying the binary operator 'or' (line 1596)
    result_or_keyword_497559 = python_operator(stypy.reporting.localization.Localization(__file__, 1596, 7), 'or', result_not__497552, result_ne_497558)
    
    # Getting the type of 'nt' (line 1596)
    nt_497560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 49), 'nt')
    int_497561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1596, 55), 'int')
    # Applying the binary operator '<=' (line 1596)
    result_le_497562 = python_operator(stypy.reporting.localization.Localization(__file__, 1596, 49), '<=', nt_497560, int_497561)
    
    # Applying the binary operator 'or' (line 1596)
    result_or_keyword_497563 = python_operator(stypy.reporting.localization.Localization(__file__, 1596, 7), 'or', result_or_keyword_497559, result_le_497562)
    
    # Testing the type of an if condition (line 1596)
    if_condition_497564 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1596, 4), result_or_keyword_497563)
    # Assigning a type to the variable 'if_condition_497564' (line 1596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1596, 4), 'if_condition_497564', if_condition_497564)
    # SSA begins for if statement (line 1596)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1597)
    # Processing the call arguments (line 1597)
    str_497566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1597, 25), 'str', 'nt must be positive integer scalar.')
    # Processing the call keyword arguments (line 1597)
    kwargs_497567 = {}
    # Getting the type of 'ValueError' (line 1597)
    ValueError_497565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1597, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1597)
    ValueError_call_result_497568 = invoke(stypy.reporting.localization.Localization(__file__, 1597, 14), ValueError_497565, *[str_497566], **kwargs_497567)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1597, 8), ValueError_call_result_497568, 'raise parameter', BaseException)
    # SSA join for if statement (line 1596)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to klvnzo(...): (line 1598)
    # Processing the call arguments (line 1598)
    # Getting the type of 'nt' (line 1598)
    nt_497571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 26), 'nt', False)
    int_497572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1598, 30), 'int')
    # Processing the call keyword arguments (line 1598)
    kwargs_497573 = {}
    # Getting the type of 'specfun' (line 1598)
    specfun_497569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 11), 'specfun', False)
    # Obtaining the member 'klvnzo' of a type (line 1598)
    klvnzo_497570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1598, 11), specfun_497569, 'klvnzo')
    # Calling klvnzo(args, kwargs) (line 1598)
    klvnzo_call_result_497574 = invoke(stypy.reporting.localization.Localization(__file__, 1598, 11), klvnzo_497570, *[nt_497571, int_497572], **kwargs_497573)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1598)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1598, 4), 'stypy_return_type', klvnzo_call_result_497574)
    
    # ################# End of 'berp_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'berp_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 1586)
    stypy_return_type_497575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_497575)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'berp_zeros'
    return stypy_return_type_497575

# Assigning a type to the variable 'berp_zeros' (line 1586)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1586, 0), 'berp_zeros', berp_zeros)

@norecursion
def beip_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'beip_zeros'
    module_type_store = module_type_store.open_function_context('beip_zeros', 1601, 0, False)
    
    # Passed parameters checking function
    beip_zeros.stypy_localization = localization
    beip_zeros.stypy_type_of_self = None
    beip_zeros.stypy_type_store = module_type_store
    beip_zeros.stypy_function_name = 'beip_zeros'
    beip_zeros.stypy_param_names_list = ['nt']
    beip_zeros.stypy_varargs_param_name = None
    beip_zeros.stypy_kwargs_param_name = None
    beip_zeros.stypy_call_defaults = defaults
    beip_zeros.stypy_call_varargs = varargs
    beip_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'beip_zeros', ['nt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'beip_zeros', localization, ['nt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'beip_zeros(...)' code ##################

    str_497576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1610, (-1)), 'str', 'Compute nt zeros of the Kelvin function bei\'(x).\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to isscalar(...): (line 1611)
    # Processing the call arguments (line 1611)
    # Getting the type of 'nt' (line 1611)
    nt_497578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 20), 'nt', False)
    # Processing the call keyword arguments (line 1611)
    kwargs_497579 = {}
    # Getting the type of 'isscalar' (line 1611)
    isscalar_497577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1611)
    isscalar_call_result_497580 = invoke(stypy.reporting.localization.Localization(__file__, 1611, 11), isscalar_497577, *[nt_497578], **kwargs_497579)
    
    # Applying the 'not' unary operator (line 1611)
    result_not__497581 = python_operator(stypy.reporting.localization.Localization(__file__, 1611, 7), 'not', isscalar_call_result_497580)
    
    
    
    # Call to floor(...): (line 1611)
    # Processing the call arguments (line 1611)
    # Getting the type of 'nt' (line 1611)
    nt_497583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 34), 'nt', False)
    # Processing the call keyword arguments (line 1611)
    kwargs_497584 = {}
    # Getting the type of 'floor' (line 1611)
    floor_497582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 28), 'floor', False)
    # Calling floor(args, kwargs) (line 1611)
    floor_call_result_497585 = invoke(stypy.reporting.localization.Localization(__file__, 1611, 28), floor_497582, *[nt_497583], **kwargs_497584)
    
    # Getting the type of 'nt' (line 1611)
    nt_497586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 41), 'nt')
    # Applying the binary operator '!=' (line 1611)
    result_ne_497587 = python_operator(stypy.reporting.localization.Localization(__file__, 1611, 28), '!=', floor_call_result_497585, nt_497586)
    
    # Applying the binary operator 'or' (line 1611)
    result_or_keyword_497588 = python_operator(stypy.reporting.localization.Localization(__file__, 1611, 7), 'or', result_not__497581, result_ne_497587)
    
    # Getting the type of 'nt' (line 1611)
    nt_497589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 49), 'nt')
    int_497590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1611, 55), 'int')
    # Applying the binary operator '<=' (line 1611)
    result_le_497591 = python_operator(stypy.reporting.localization.Localization(__file__, 1611, 49), '<=', nt_497589, int_497590)
    
    # Applying the binary operator 'or' (line 1611)
    result_or_keyword_497592 = python_operator(stypy.reporting.localization.Localization(__file__, 1611, 7), 'or', result_or_keyword_497588, result_le_497591)
    
    # Testing the type of an if condition (line 1611)
    if_condition_497593 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1611, 4), result_or_keyword_497592)
    # Assigning a type to the variable 'if_condition_497593' (line 1611)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1611, 4), 'if_condition_497593', if_condition_497593)
    # SSA begins for if statement (line 1611)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1612)
    # Processing the call arguments (line 1612)
    str_497595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1612, 25), 'str', 'nt must be positive integer scalar.')
    # Processing the call keyword arguments (line 1612)
    kwargs_497596 = {}
    # Getting the type of 'ValueError' (line 1612)
    ValueError_497594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1612, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1612)
    ValueError_call_result_497597 = invoke(stypy.reporting.localization.Localization(__file__, 1612, 14), ValueError_497594, *[str_497595], **kwargs_497596)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1612, 8), ValueError_call_result_497597, 'raise parameter', BaseException)
    # SSA join for if statement (line 1611)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to klvnzo(...): (line 1613)
    # Processing the call arguments (line 1613)
    # Getting the type of 'nt' (line 1613)
    nt_497600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 26), 'nt', False)
    int_497601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1613, 30), 'int')
    # Processing the call keyword arguments (line 1613)
    kwargs_497602 = {}
    # Getting the type of 'specfun' (line 1613)
    specfun_497598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 11), 'specfun', False)
    # Obtaining the member 'klvnzo' of a type (line 1613)
    klvnzo_497599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1613, 11), specfun_497598, 'klvnzo')
    # Calling klvnzo(args, kwargs) (line 1613)
    klvnzo_call_result_497603 = invoke(stypy.reporting.localization.Localization(__file__, 1613, 11), klvnzo_497599, *[nt_497600, int_497601], **kwargs_497602)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1613)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1613, 4), 'stypy_return_type', klvnzo_call_result_497603)
    
    # ################# End of 'beip_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'beip_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 1601)
    stypy_return_type_497604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_497604)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'beip_zeros'
    return stypy_return_type_497604

# Assigning a type to the variable 'beip_zeros' (line 1601)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1601, 0), 'beip_zeros', beip_zeros)

@norecursion
def kerp_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'kerp_zeros'
    module_type_store = module_type_store.open_function_context('kerp_zeros', 1616, 0, False)
    
    # Passed parameters checking function
    kerp_zeros.stypy_localization = localization
    kerp_zeros.stypy_type_of_self = None
    kerp_zeros.stypy_type_store = module_type_store
    kerp_zeros.stypy_function_name = 'kerp_zeros'
    kerp_zeros.stypy_param_names_list = ['nt']
    kerp_zeros.stypy_varargs_param_name = None
    kerp_zeros.stypy_kwargs_param_name = None
    kerp_zeros.stypy_call_defaults = defaults
    kerp_zeros.stypy_call_varargs = varargs
    kerp_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'kerp_zeros', ['nt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'kerp_zeros', localization, ['nt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'kerp_zeros(...)' code ##################

    str_497605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1625, (-1)), 'str', 'Compute nt zeros of the Kelvin function ker\'(x).\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to isscalar(...): (line 1626)
    # Processing the call arguments (line 1626)
    # Getting the type of 'nt' (line 1626)
    nt_497607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 20), 'nt', False)
    # Processing the call keyword arguments (line 1626)
    kwargs_497608 = {}
    # Getting the type of 'isscalar' (line 1626)
    isscalar_497606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1626)
    isscalar_call_result_497609 = invoke(stypy.reporting.localization.Localization(__file__, 1626, 11), isscalar_497606, *[nt_497607], **kwargs_497608)
    
    # Applying the 'not' unary operator (line 1626)
    result_not__497610 = python_operator(stypy.reporting.localization.Localization(__file__, 1626, 7), 'not', isscalar_call_result_497609)
    
    
    
    # Call to floor(...): (line 1626)
    # Processing the call arguments (line 1626)
    # Getting the type of 'nt' (line 1626)
    nt_497612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 34), 'nt', False)
    # Processing the call keyword arguments (line 1626)
    kwargs_497613 = {}
    # Getting the type of 'floor' (line 1626)
    floor_497611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 28), 'floor', False)
    # Calling floor(args, kwargs) (line 1626)
    floor_call_result_497614 = invoke(stypy.reporting.localization.Localization(__file__, 1626, 28), floor_497611, *[nt_497612], **kwargs_497613)
    
    # Getting the type of 'nt' (line 1626)
    nt_497615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 41), 'nt')
    # Applying the binary operator '!=' (line 1626)
    result_ne_497616 = python_operator(stypy.reporting.localization.Localization(__file__, 1626, 28), '!=', floor_call_result_497614, nt_497615)
    
    # Applying the binary operator 'or' (line 1626)
    result_or_keyword_497617 = python_operator(stypy.reporting.localization.Localization(__file__, 1626, 7), 'or', result_not__497610, result_ne_497616)
    
    # Getting the type of 'nt' (line 1626)
    nt_497618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 49), 'nt')
    int_497619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1626, 55), 'int')
    # Applying the binary operator '<=' (line 1626)
    result_le_497620 = python_operator(stypy.reporting.localization.Localization(__file__, 1626, 49), '<=', nt_497618, int_497619)
    
    # Applying the binary operator 'or' (line 1626)
    result_or_keyword_497621 = python_operator(stypy.reporting.localization.Localization(__file__, 1626, 7), 'or', result_or_keyword_497617, result_le_497620)
    
    # Testing the type of an if condition (line 1626)
    if_condition_497622 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1626, 4), result_or_keyword_497621)
    # Assigning a type to the variable 'if_condition_497622' (line 1626)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1626, 4), 'if_condition_497622', if_condition_497622)
    # SSA begins for if statement (line 1626)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1627)
    # Processing the call arguments (line 1627)
    str_497624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1627, 25), 'str', 'nt must be positive integer scalar.')
    # Processing the call keyword arguments (line 1627)
    kwargs_497625 = {}
    # Getting the type of 'ValueError' (line 1627)
    ValueError_497623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1627)
    ValueError_call_result_497626 = invoke(stypy.reporting.localization.Localization(__file__, 1627, 14), ValueError_497623, *[str_497624], **kwargs_497625)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1627, 8), ValueError_call_result_497626, 'raise parameter', BaseException)
    # SSA join for if statement (line 1626)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to klvnzo(...): (line 1628)
    # Processing the call arguments (line 1628)
    # Getting the type of 'nt' (line 1628)
    nt_497629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 26), 'nt', False)
    int_497630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1628, 30), 'int')
    # Processing the call keyword arguments (line 1628)
    kwargs_497631 = {}
    # Getting the type of 'specfun' (line 1628)
    specfun_497627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 11), 'specfun', False)
    # Obtaining the member 'klvnzo' of a type (line 1628)
    klvnzo_497628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1628, 11), specfun_497627, 'klvnzo')
    # Calling klvnzo(args, kwargs) (line 1628)
    klvnzo_call_result_497632 = invoke(stypy.reporting.localization.Localization(__file__, 1628, 11), klvnzo_497628, *[nt_497629, int_497630], **kwargs_497631)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1628)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1628, 4), 'stypy_return_type', klvnzo_call_result_497632)
    
    # ################# End of 'kerp_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'kerp_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 1616)
    stypy_return_type_497633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_497633)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'kerp_zeros'
    return stypy_return_type_497633

# Assigning a type to the variable 'kerp_zeros' (line 1616)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1616, 0), 'kerp_zeros', kerp_zeros)

@norecursion
def keip_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'keip_zeros'
    module_type_store = module_type_store.open_function_context('keip_zeros', 1631, 0, False)
    
    # Passed parameters checking function
    keip_zeros.stypy_localization = localization
    keip_zeros.stypy_type_of_self = None
    keip_zeros.stypy_type_store = module_type_store
    keip_zeros.stypy_function_name = 'keip_zeros'
    keip_zeros.stypy_param_names_list = ['nt']
    keip_zeros.stypy_varargs_param_name = None
    keip_zeros.stypy_kwargs_param_name = None
    keip_zeros.stypy_call_defaults = defaults
    keip_zeros.stypy_call_varargs = varargs
    keip_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'keip_zeros', ['nt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'keip_zeros', localization, ['nt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'keip_zeros(...)' code ##################

    str_497634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1640, (-1)), 'str', 'Compute nt zeros of the Kelvin function kei\'(x).\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to isscalar(...): (line 1641)
    # Processing the call arguments (line 1641)
    # Getting the type of 'nt' (line 1641)
    nt_497636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 20), 'nt', False)
    # Processing the call keyword arguments (line 1641)
    kwargs_497637 = {}
    # Getting the type of 'isscalar' (line 1641)
    isscalar_497635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1641)
    isscalar_call_result_497638 = invoke(stypy.reporting.localization.Localization(__file__, 1641, 11), isscalar_497635, *[nt_497636], **kwargs_497637)
    
    # Applying the 'not' unary operator (line 1641)
    result_not__497639 = python_operator(stypy.reporting.localization.Localization(__file__, 1641, 7), 'not', isscalar_call_result_497638)
    
    
    
    # Call to floor(...): (line 1641)
    # Processing the call arguments (line 1641)
    # Getting the type of 'nt' (line 1641)
    nt_497641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 34), 'nt', False)
    # Processing the call keyword arguments (line 1641)
    kwargs_497642 = {}
    # Getting the type of 'floor' (line 1641)
    floor_497640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 28), 'floor', False)
    # Calling floor(args, kwargs) (line 1641)
    floor_call_result_497643 = invoke(stypy.reporting.localization.Localization(__file__, 1641, 28), floor_497640, *[nt_497641], **kwargs_497642)
    
    # Getting the type of 'nt' (line 1641)
    nt_497644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 41), 'nt')
    # Applying the binary operator '!=' (line 1641)
    result_ne_497645 = python_operator(stypy.reporting.localization.Localization(__file__, 1641, 28), '!=', floor_call_result_497643, nt_497644)
    
    # Applying the binary operator 'or' (line 1641)
    result_or_keyword_497646 = python_operator(stypy.reporting.localization.Localization(__file__, 1641, 7), 'or', result_not__497639, result_ne_497645)
    
    # Getting the type of 'nt' (line 1641)
    nt_497647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 49), 'nt')
    int_497648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1641, 55), 'int')
    # Applying the binary operator '<=' (line 1641)
    result_le_497649 = python_operator(stypy.reporting.localization.Localization(__file__, 1641, 49), '<=', nt_497647, int_497648)
    
    # Applying the binary operator 'or' (line 1641)
    result_or_keyword_497650 = python_operator(stypy.reporting.localization.Localization(__file__, 1641, 7), 'or', result_or_keyword_497646, result_le_497649)
    
    # Testing the type of an if condition (line 1641)
    if_condition_497651 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1641, 4), result_or_keyword_497650)
    # Assigning a type to the variable 'if_condition_497651' (line 1641)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1641, 4), 'if_condition_497651', if_condition_497651)
    # SSA begins for if statement (line 1641)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1642)
    # Processing the call arguments (line 1642)
    str_497653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1642, 25), 'str', 'nt must be positive integer scalar.')
    # Processing the call keyword arguments (line 1642)
    kwargs_497654 = {}
    # Getting the type of 'ValueError' (line 1642)
    ValueError_497652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1642)
    ValueError_call_result_497655 = invoke(stypy.reporting.localization.Localization(__file__, 1642, 14), ValueError_497652, *[str_497653], **kwargs_497654)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1642, 8), ValueError_call_result_497655, 'raise parameter', BaseException)
    # SSA join for if statement (line 1641)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to klvnzo(...): (line 1643)
    # Processing the call arguments (line 1643)
    # Getting the type of 'nt' (line 1643)
    nt_497658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 26), 'nt', False)
    int_497659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1643, 30), 'int')
    # Processing the call keyword arguments (line 1643)
    kwargs_497660 = {}
    # Getting the type of 'specfun' (line 1643)
    specfun_497656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 11), 'specfun', False)
    # Obtaining the member 'klvnzo' of a type (line 1643)
    klvnzo_497657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1643, 11), specfun_497656, 'klvnzo')
    # Calling klvnzo(args, kwargs) (line 1643)
    klvnzo_call_result_497661 = invoke(stypy.reporting.localization.Localization(__file__, 1643, 11), klvnzo_497657, *[nt_497658, int_497659], **kwargs_497660)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1643)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1643, 4), 'stypy_return_type', klvnzo_call_result_497661)
    
    # ################# End of 'keip_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'keip_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 1631)
    stypy_return_type_497662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_497662)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'keip_zeros'
    return stypy_return_type_497662

# Assigning a type to the variable 'keip_zeros' (line 1631)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1631, 0), 'keip_zeros', keip_zeros)

@norecursion
def kelvin_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'kelvin_zeros'
    module_type_store = module_type_store.open_function_context('kelvin_zeros', 1646, 0, False)
    
    # Passed parameters checking function
    kelvin_zeros.stypy_localization = localization
    kelvin_zeros.stypy_type_of_self = None
    kelvin_zeros.stypy_type_store = module_type_store
    kelvin_zeros.stypy_function_name = 'kelvin_zeros'
    kelvin_zeros.stypy_param_names_list = ['nt']
    kelvin_zeros.stypy_varargs_param_name = None
    kelvin_zeros.stypy_kwargs_param_name = None
    kelvin_zeros.stypy_call_defaults = defaults
    kelvin_zeros.stypy_call_varargs = varargs
    kelvin_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'kelvin_zeros', ['nt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'kelvin_zeros', localization, ['nt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'kelvin_zeros(...)' code ##################

    str_497663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1658, (-1)), 'str', 'Compute nt zeros of all Kelvin functions.\n\n    Returned in a length-8 tuple of arrays of length nt.  The tuple contains\n    the arrays of zeros of (ber, bei, ker, kei, ber\', bei\', ker\', kei\').\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to isscalar(...): (line 1659)
    # Processing the call arguments (line 1659)
    # Getting the type of 'nt' (line 1659)
    nt_497665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 20), 'nt', False)
    # Processing the call keyword arguments (line 1659)
    kwargs_497666 = {}
    # Getting the type of 'isscalar' (line 1659)
    isscalar_497664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1659)
    isscalar_call_result_497667 = invoke(stypy.reporting.localization.Localization(__file__, 1659, 11), isscalar_497664, *[nt_497665], **kwargs_497666)
    
    # Applying the 'not' unary operator (line 1659)
    result_not__497668 = python_operator(stypy.reporting.localization.Localization(__file__, 1659, 7), 'not', isscalar_call_result_497667)
    
    
    
    # Call to floor(...): (line 1659)
    # Processing the call arguments (line 1659)
    # Getting the type of 'nt' (line 1659)
    nt_497670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 34), 'nt', False)
    # Processing the call keyword arguments (line 1659)
    kwargs_497671 = {}
    # Getting the type of 'floor' (line 1659)
    floor_497669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 28), 'floor', False)
    # Calling floor(args, kwargs) (line 1659)
    floor_call_result_497672 = invoke(stypy.reporting.localization.Localization(__file__, 1659, 28), floor_497669, *[nt_497670], **kwargs_497671)
    
    # Getting the type of 'nt' (line 1659)
    nt_497673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 41), 'nt')
    # Applying the binary operator '!=' (line 1659)
    result_ne_497674 = python_operator(stypy.reporting.localization.Localization(__file__, 1659, 28), '!=', floor_call_result_497672, nt_497673)
    
    # Applying the binary operator 'or' (line 1659)
    result_or_keyword_497675 = python_operator(stypy.reporting.localization.Localization(__file__, 1659, 7), 'or', result_not__497668, result_ne_497674)
    
    # Getting the type of 'nt' (line 1659)
    nt_497676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 49), 'nt')
    int_497677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1659, 55), 'int')
    # Applying the binary operator '<=' (line 1659)
    result_le_497678 = python_operator(stypy.reporting.localization.Localization(__file__, 1659, 49), '<=', nt_497676, int_497677)
    
    # Applying the binary operator 'or' (line 1659)
    result_or_keyword_497679 = python_operator(stypy.reporting.localization.Localization(__file__, 1659, 7), 'or', result_or_keyword_497675, result_le_497678)
    
    # Testing the type of an if condition (line 1659)
    if_condition_497680 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1659, 4), result_or_keyword_497679)
    # Assigning a type to the variable 'if_condition_497680' (line 1659)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1659, 4), 'if_condition_497680', if_condition_497680)
    # SSA begins for if statement (line 1659)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1660)
    # Processing the call arguments (line 1660)
    str_497682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1660, 25), 'str', 'nt must be positive integer scalar.')
    # Processing the call keyword arguments (line 1660)
    kwargs_497683 = {}
    # Getting the type of 'ValueError' (line 1660)
    ValueError_497681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1660)
    ValueError_call_result_497684 = invoke(stypy.reporting.localization.Localization(__file__, 1660, 14), ValueError_497681, *[str_497682], **kwargs_497683)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1660, 8), ValueError_call_result_497684, 'raise parameter', BaseException)
    # SSA join for if statement (line 1659)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1661)
    tuple_497685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1661, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1661)
    # Adding element type (line 1661)
    
    # Call to klvnzo(...): (line 1661)
    # Processing the call arguments (line 1661)
    # Getting the type of 'nt' (line 1661)
    nt_497688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 27), 'nt', False)
    int_497689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1661, 31), 'int')
    # Processing the call keyword arguments (line 1661)
    kwargs_497690 = {}
    # Getting the type of 'specfun' (line 1661)
    specfun_497686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 12), 'specfun', False)
    # Obtaining the member 'klvnzo' of a type (line 1661)
    klvnzo_497687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1661, 12), specfun_497686, 'klvnzo')
    # Calling klvnzo(args, kwargs) (line 1661)
    klvnzo_call_result_497691 = invoke(stypy.reporting.localization.Localization(__file__, 1661, 12), klvnzo_497687, *[nt_497688, int_497689], **kwargs_497690)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1661, 12), tuple_497685, klvnzo_call_result_497691)
    # Adding element type (line 1661)
    
    # Call to klvnzo(...): (line 1662)
    # Processing the call arguments (line 1662)
    # Getting the type of 'nt' (line 1662)
    nt_497694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 27), 'nt', False)
    int_497695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1662, 31), 'int')
    # Processing the call keyword arguments (line 1662)
    kwargs_497696 = {}
    # Getting the type of 'specfun' (line 1662)
    specfun_497692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 12), 'specfun', False)
    # Obtaining the member 'klvnzo' of a type (line 1662)
    klvnzo_497693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1662, 12), specfun_497692, 'klvnzo')
    # Calling klvnzo(args, kwargs) (line 1662)
    klvnzo_call_result_497697 = invoke(stypy.reporting.localization.Localization(__file__, 1662, 12), klvnzo_497693, *[nt_497694, int_497695], **kwargs_497696)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1661, 12), tuple_497685, klvnzo_call_result_497697)
    # Adding element type (line 1661)
    
    # Call to klvnzo(...): (line 1663)
    # Processing the call arguments (line 1663)
    # Getting the type of 'nt' (line 1663)
    nt_497700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 27), 'nt', False)
    int_497701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1663, 31), 'int')
    # Processing the call keyword arguments (line 1663)
    kwargs_497702 = {}
    # Getting the type of 'specfun' (line 1663)
    specfun_497698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 12), 'specfun', False)
    # Obtaining the member 'klvnzo' of a type (line 1663)
    klvnzo_497699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1663, 12), specfun_497698, 'klvnzo')
    # Calling klvnzo(args, kwargs) (line 1663)
    klvnzo_call_result_497703 = invoke(stypy.reporting.localization.Localization(__file__, 1663, 12), klvnzo_497699, *[nt_497700, int_497701], **kwargs_497702)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1661, 12), tuple_497685, klvnzo_call_result_497703)
    # Adding element type (line 1661)
    
    # Call to klvnzo(...): (line 1664)
    # Processing the call arguments (line 1664)
    # Getting the type of 'nt' (line 1664)
    nt_497706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 27), 'nt', False)
    int_497707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1664, 31), 'int')
    # Processing the call keyword arguments (line 1664)
    kwargs_497708 = {}
    # Getting the type of 'specfun' (line 1664)
    specfun_497704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 12), 'specfun', False)
    # Obtaining the member 'klvnzo' of a type (line 1664)
    klvnzo_497705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1664, 12), specfun_497704, 'klvnzo')
    # Calling klvnzo(args, kwargs) (line 1664)
    klvnzo_call_result_497709 = invoke(stypy.reporting.localization.Localization(__file__, 1664, 12), klvnzo_497705, *[nt_497706, int_497707], **kwargs_497708)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1661, 12), tuple_497685, klvnzo_call_result_497709)
    # Adding element type (line 1661)
    
    # Call to klvnzo(...): (line 1665)
    # Processing the call arguments (line 1665)
    # Getting the type of 'nt' (line 1665)
    nt_497712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1665, 27), 'nt', False)
    int_497713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1665, 31), 'int')
    # Processing the call keyword arguments (line 1665)
    kwargs_497714 = {}
    # Getting the type of 'specfun' (line 1665)
    specfun_497710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1665, 12), 'specfun', False)
    # Obtaining the member 'klvnzo' of a type (line 1665)
    klvnzo_497711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1665, 12), specfun_497710, 'klvnzo')
    # Calling klvnzo(args, kwargs) (line 1665)
    klvnzo_call_result_497715 = invoke(stypy.reporting.localization.Localization(__file__, 1665, 12), klvnzo_497711, *[nt_497712, int_497713], **kwargs_497714)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1661, 12), tuple_497685, klvnzo_call_result_497715)
    # Adding element type (line 1661)
    
    # Call to klvnzo(...): (line 1666)
    # Processing the call arguments (line 1666)
    # Getting the type of 'nt' (line 1666)
    nt_497718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 27), 'nt', False)
    int_497719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1666, 31), 'int')
    # Processing the call keyword arguments (line 1666)
    kwargs_497720 = {}
    # Getting the type of 'specfun' (line 1666)
    specfun_497716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 12), 'specfun', False)
    # Obtaining the member 'klvnzo' of a type (line 1666)
    klvnzo_497717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1666, 12), specfun_497716, 'klvnzo')
    # Calling klvnzo(args, kwargs) (line 1666)
    klvnzo_call_result_497721 = invoke(stypy.reporting.localization.Localization(__file__, 1666, 12), klvnzo_497717, *[nt_497718, int_497719], **kwargs_497720)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1661, 12), tuple_497685, klvnzo_call_result_497721)
    # Adding element type (line 1661)
    
    # Call to klvnzo(...): (line 1667)
    # Processing the call arguments (line 1667)
    # Getting the type of 'nt' (line 1667)
    nt_497724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 27), 'nt', False)
    int_497725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, 31), 'int')
    # Processing the call keyword arguments (line 1667)
    kwargs_497726 = {}
    # Getting the type of 'specfun' (line 1667)
    specfun_497722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 12), 'specfun', False)
    # Obtaining the member 'klvnzo' of a type (line 1667)
    klvnzo_497723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1667, 12), specfun_497722, 'klvnzo')
    # Calling klvnzo(args, kwargs) (line 1667)
    klvnzo_call_result_497727 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 12), klvnzo_497723, *[nt_497724, int_497725], **kwargs_497726)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1661, 12), tuple_497685, klvnzo_call_result_497727)
    # Adding element type (line 1661)
    
    # Call to klvnzo(...): (line 1668)
    # Processing the call arguments (line 1668)
    # Getting the type of 'nt' (line 1668)
    nt_497730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 27), 'nt', False)
    int_497731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1668, 31), 'int')
    # Processing the call keyword arguments (line 1668)
    kwargs_497732 = {}
    # Getting the type of 'specfun' (line 1668)
    specfun_497728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 12), 'specfun', False)
    # Obtaining the member 'klvnzo' of a type (line 1668)
    klvnzo_497729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1668, 12), specfun_497728, 'klvnzo')
    # Calling klvnzo(args, kwargs) (line 1668)
    klvnzo_call_result_497733 = invoke(stypy.reporting.localization.Localization(__file__, 1668, 12), klvnzo_497729, *[nt_497730, int_497731], **kwargs_497732)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1661, 12), tuple_497685, klvnzo_call_result_497733)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1661)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1661, 4), 'stypy_return_type', tuple_497685)
    
    # ################# End of 'kelvin_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'kelvin_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 1646)
    stypy_return_type_497734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_497734)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'kelvin_zeros'
    return stypy_return_type_497734

# Assigning a type to the variable 'kelvin_zeros' (line 1646)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1646, 0), 'kelvin_zeros', kelvin_zeros)

@norecursion
def pro_cv_seq(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'pro_cv_seq'
    module_type_store = module_type_store.open_function_context('pro_cv_seq', 1671, 0, False)
    
    # Passed parameters checking function
    pro_cv_seq.stypy_localization = localization
    pro_cv_seq.stypy_type_of_self = None
    pro_cv_seq.stypy_type_store = module_type_store
    pro_cv_seq.stypy_function_name = 'pro_cv_seq'
    pro_cv_seq.stypy_param_names_list = ['m', 'n', 'c']
    pro_cv_seq.stypy_varargs_param_name = None
    pro_cv_seq.stypy_kwargs_param_name = None
    pro_cv_seq.stypy_call_defaults = defaults
    pro_cv_seq.stypy_call_varargs = varargs
    pro_cv_seq.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'pro_cv_seq', ['m', 'n', 'c'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'pro_cv_seq', localization, ['m', 'n', 'c'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'pro_cv_seq(...)' code ##################

    str_497735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1684, (-1)), 'str', 'Characteristic values for prolate spheroidal wave functions.\n\n    Compute a sequence of characteristic values for the prolate\n    spheroidal wave functions for mode m and n\'=m..n and spheroidal\n    parameter c.\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    
    # Evaluating a boolean operation
    
    # Call to isscalar(...): (line 1685)
    # Processing the call arguments (line 1685)
    # Getting the type of 'm' (line 1685)
    m_497737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 21), 'm', False)
    # Processing the call keyword arguments (line 1685)
    kwargs_497738 = {}
    # Getting the type of 'isscalar' (line 1685)
    isscalar_497736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 12), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1685)
    isscalar_call_result_497739 = invoke(stypy.reporting.localization.Localization(__file__, 1685, 12), isscalar_497736, *[m_497737], **kwargs_497738)
    
    
    # Call to isscalar(...): (line 1685)
    # Processing the call arguments (line 1685)
    # Getting the type of 'n' (line 1685)
    n_497741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 37), 'n', False)
    # Processing the call keyword arguments (line 1685)
    kwargs_497742 = {}
    # Getting the type of 'isscalar' (line 1685)
    isscalar_497740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 28), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1685)
    isscalar_call_result_497743 = invoke(stypy.reporting.localization.Localization(__file__, 1685, 28), isscalar_497740, *[n_497741], **kwargs_497742)
    
    # Applying the binary operator 'and' (line 1685)
    result_and_keyword_497744 = python_operator(stypy.reporting.localization.Localization(__file__, 1685, 12), 'and', isscalar_call_result_497739, isscalar_call_result_497743)
    
    # Call to isscalar(...): (line 1685)
    # Processing the call arguments (line 1685)
    # Getting the type of 'c' (line 1685)
    c_497746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 53), 'c', False)
    # Processing the call keyword arguments (line 1685)
    kwargs_497747 = {}
    # Getting the type of 'isscalar' (line 1685)
    isscalar_497745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 44), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1685)
    isscalar_call_result_497748 = invoke(stypy.reporting.localization.Localization(__file__, 1685, 44), isscalar_497745, *[c_497746], **kwargs_497747)
    
    # Applying the binary operator 'and' (line 1685)
    result_and_keyword_497749 = python_operator(stypy.reporting.localization.Localization(__file__, 1685, 12), 'and', result_and_keyword_497744, isscalar_call_result_497748)
    
    # Applying the 'not' unary operator (line 1685)
    result_not__497750 = python_operator(stypy.reporting.localization.Localization(__file__, 1685, 7), 'not', result_and_keyword_497749)
    
    # Testing the type of an if condition (line 1685)
    if_condition_497751 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1685, 4), result_not__497750)
    # Assigning a type to the variable 'if_condition_497751' (line 1685)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1685, 4), 'if_condition_497751', if_condition_497751)
    # SSA begins for if statement (line 1685)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1686)
    # Processing the call arguments (line 1686)
    str_497753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1686, 25), 'str', 'Arguments must be scalars.')
    # Processing the call keyword arguments (line 1686)
    kwargs_497754 = {}
    # Getting the type of 'ValueError' (line 1686)
    ValueError_497752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1686)
    ValueError_call_result_497755 = invoke(stypy.reporting.localization.Localization(__file__, 1686, 14), ValueError_497752, *[str_497753], **kwargs_497754)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1686, 8), ValueError_call_result_497755, 'raise parameter', BaseException)
    # SSA join for if statement (line 1685)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'n' (line 1687)
    n_497756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 8), 'n')
    
    # Call to floor(...): (line 1687)
    # Processing the call arguments (line 1687)
    # Getting the type of 'n' (line 1687)
    n_497758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 19), 'n', False)
    # Processing the call keyword arguments (line 1687)
    kwargs_497759 = {}
    # Getting the type of 'floor' (line 1687)
    floor_497757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 13), 'floor', False)
    # Calling floor(args, kwargs) (line 1687)
    floor_call_result_497760 = invoke(stypy.reporting.localization.Localization(__file__, 1687, 13), floor_497757, *[n_497758], **kwargs_497759)
    
    # Applying the binary operator '!=' (line 1687)
    result_ne_497761 = python_operator(stypy.reporting.localization.Localization(__file__, 1687, 8), '!=', n_497756, floor_call_result_497760)
    
    
    # Getting the type of 'm' (line 1687)
    m_497762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 27), 'm')
    
    # Call to floor(...): (line 1687)
    # Processing the call arguments (line 1687)
    # Getting the type of 'm' (line 1687)
    m_497764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 38), 'm', False)
    # Processing the call keyword arguments (line 1687)
    kwargs_497765 = {}
    # Getting the type of 'floor' (line 1687)
    floor_497763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 32), 'floor', False)
    # Calling floor(args, kwargs) (line 1687)
    floor_call_result_497766 = invoke(stypy.reporting.localization.Localization(__file__, 1687, 32), floor_497763, *[m_497764], **kwargs_497765)
    
    # Applying the binary operator '!=' (line 1687)
    result_ne_497767 = python_operator(stypy.reporting.localization.Localization(__file__, 1687, 27), '!=', m_497762, floor_call_result_497766)
    
    # Applying the binary operator 'or' (line 1687)
    result_or_keyword_497768 = python_operator(stypy.reporting.localization.Localization(__file__, 1687, 7), 'or', result_ne_497761, result_ne_497767)
    
    # Testing the type of an if condition (line 1687)
    if_condition_497769 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1687, 4), result_or_keyword_497768)
    # Assigning a type to the variable 'if_condition_497769' (line 1687)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1687, 4), 'if_condition_497769', if_condition_497769)
    # SSA begins for if statement (line 1687)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1688)
    # Processing the call arguments (line 1688)
    str_497771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1688, 25), 'str', 'Modes must be integers.')
    # Processing the call keyword arguments (line 1688)
    kwargs_497772 = {}
    # Getting the type of 'ValueError' (line 1688)
    ValueError_497770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1688)
    ValueError_call_result_497773 = invoke(stypy.reporting.localization.Localization(__file__, 1688, 14), ValueError_497770, *[str_497771], **kwargs_497772)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1688, 8), ValueError_call_result_497773, 'raise parameter', BaseException)
    # SSA join for if statement (line 1687)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 1689)
    n_497774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 8), 'n')
    # Getting the type of 'm' (line 1689)
    m_497775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 10), 'm')
    # Applying the binary operator '-' (line 1689)
    result_sub_497776 = python_operator(stypy.reporting.localization.Localization(__file__, 1689, 8), '-', n_497774, m_497775)
    
    int_497777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1689, 14), 'int')
    # Applying the binary operator '>' (line 1689)
    result_gt_497778 = python_operator(stypy.reporting.localization.Localization(__file__, 1689, 8), '>', result_sub_497776, int_497777)
    
    # Testing the type of an if condition (line 1689)
    if_condition_497779 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1689, 4), result_gt_497778)
    # Assigning a type to the variable 'if_condition_497779' (line 1689)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1689, 4), 'if_condition_497779', if_condition_497779)
    # SSA begins for if statement (line 1689)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1690)
    # Processing the call arguments (line 1690)
    str_497781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1690, 25), 'str', 'Difference between n and m is too large.')
    # Processing the call keyword arguments (line 1690)
    kwargs_497782 = {}
    # Getting the type of 'ValueError' (line 1690)
    ValueError_497780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1690)
    ValueError_call_result_497783 = invoke(stypy.reporting.localization.Localization(__file__, 1690, 14), ValueError_497780, *[str_497781], **kwargs_497782)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1690, 8), ValueError_call_result_497783, 'raise parameter', BaseException)
    # SSA join for if statement (line 1689)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1691):
    
    # Assigning a BinOp to a Name (line 1691):
    # Getting the type of 'n' (line 1691)
    n_497784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 11), 'n')
    # Getting the type of 'm' (line 1691)
    m_497785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 13), 'm')
    # Applying the binary operator '-' (line 1691)
    result_sub_497786 = python_operator(stypy.reporting.localization.Localization(__file__, 1691, 11), '-', n_497784, m_497785)
    
    int_497787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1691, 15), 'int')
    # Applying the binary operator '+' (line 1691)
    result_add_497788 = python_operator(stypy.reporting.localization.Localization(__file__, 1691, 14), '+', result_sub_497786, int_497787)
    
    # Assigning a type to the variable 'maxL' (line 1691)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1691, 4), 'maxL', result_add_497788)
    
    # Obtaining the type of the subscript
    # Getting the type of 'maxL' (line 1692)
    maxL_497789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 40), 'maxL')
    slice_497790 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1692, 11), None, maxL_497789, None)
    
    # Obtaining the type of the subscript
    int_497791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1692, 36), 'int')
    
    # Call to segv(...): (line 1692)
    # Processing the call arguments (line 1692)
    # Getting the type of 'm' (line 1692)
    m_497794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 24), 'm', False)
    # Getting the type of 'n' (line 1692)
    n_497795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 27), 'n', False)
    # Getting the type of 'c' (line 1692)
    c_497796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 30), 'c', False)
    int_497797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1692, 33), 'int')
    # Processing the call keyword arguments (line 1692)
    kwargs_497798 = {}
    # Getting the type of 'specfun' (line 1692)
    specfun_497792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 11), 'specfun', False)
    # Obtaining the member 'segv' of a type (line 1692)
    segv_497793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1692, 11), specfun_497792, 'segv')
    # Calling segv(args, kwargs) (line 1692)
    segv_call_result_497799 = invoke(stypy.reporting.localization.Localization(__file__, 1692, 11), segv_497793, *[m_497794, n_497795, c_497796, int_497797], **kwargs_497798)
    
    # Obtaining the member '__getitem__' of a type (line 1692)
    getitem___497800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1692, 11), segv_call_result_497799, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1692)
    subscript_call_result_497801 = invoke(stypy.reporting.localization.Localization(__file__, 1692, 11), getitem___497800, int_497791)
    
    # Obtaining the member '__getitem__' of a type (line 1692)
    getitem___497802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1692, 11), subscript_call_result_497801, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1692)
    subscript_call_result_497803 = invoke(stypy.reporting.localization.Localization(__file__, 1692, 11), getitem___497802, slice_497790)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1692)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1692, 4), 'stypy_return_type', subscript_call_result_497803)
    
    # ################# End of 'pro_cv_seq(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'pro_cv_seq' in the type store
    # Getting the type of 'stypy_return_type' (line 1671)
    stypy_return_type_497804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_497804)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'pro_cv_seq'
    return stypy_return_type_497804

# Assigning a type to the variable 'pro_cv_seq' (line 1671)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1671, 0), 'pro_cv_seq', pro_cv_seq)

@norecursion
def obl_cv_seq(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'obl_cv_seq'
    module_type_store = module_type_store.open_function_context('obl_cv_seq', 1695, 0, False)
    
    # Passed parameters checking function
    obl_cv_seq.stypy_localization = localization
    obl_cv_seq.stypy_type_of_self = None
    obl_cv_seq.stypy_type_store = module_type_store
    obl_cv_seq.stypy_function_name = 'obl_cv_seq'
    obl_cv_seq.stypy_param_names_list = ['m', 'n', 'c']
    obl_cv_seq.stypy_varargs_param_name = None
    obl_cv_seq.stypy_kwargs_param_name = None
    obl_cv_seq.stypy_call_defaults = defaults
    obl_cv_seq.stypy_call_varargs = varargs
    obl_cv_seq.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'obl_cv_seq', ['m', 'n', 'c'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'obl_cv_seq', localization, ['m', 'n', 'c'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'obl_cv_seq(...)' code ##################

    str_497805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1708, (-1)), 'str', 'Characteristic values for oblate spheroidal wave functions.\n\n    Compute a sequence of characteristic values for the oblate\n    spheroidal wave functions for mode m and n\'=m..n and spheroidal\n    parameter c.\n\n    References\n    ----------\n    .. [1] Zhang, Shanjie and Jin, Jianming. "Computation of Special\n           Functions", John Wiley and Sons, 1996.\n           https://people.sc.fsu.edu/~jburkardt/f_src/special_functions/special_functions.html\n\n    ')
    
    
    
    # Evaluating a boolean operation
    
    # Call to isscalar(...): (line 1709)
    # Processing the call arguments (line 1709)
    # Getting the type of 'm' (line 1709)
    m_497807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 21), 'm', False)
    # Processing the call keyword arguments (line 1709)
    kwargs_497808 = {}
    # Getting the type of 'isscalar' (line 1709)
    isscalar_497806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 12), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1709)
    isscalar_call_result_497809 = invoke(stypy.reporting.localization.Localization(__file__, 1709, 12), isscalar_497806, *[m_497807], **kwargs_497808)
    
    
    # Call to isscalar(...): (line 1709)
    # Processing the call arguments (line 1709)
    # Getting the type of 'n' (line 1709)
    n_497811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 37), 'n', False)
    # Processing the call keyword arguments (line 1709)
    kwargs_497812 = {}
    # Getting the type of 'isscalar' (line 1709)
    isscalar_497810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 28), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1709)
    isscalar_call_result_497813 = invoke(stypy.reporting.localization.Localization(__file__, 1709, 28), isscalar_497810, *[n_497811], **kwargs_497812)
    
    # Applying the binary operator 'and' (line 1709)
    result_and_keyword_497814 = python_operator(stypy.reporting.localization.Localization(__file__, 1709, 12), 'and', isscalar_call_result_497809, isscalar_call_result_497813)
    
    # Call to isscalar(...): (line 1709)
    # Processing the call arguments (line 1709)
    # Getting the type of 'c' (line 1709)
    c_497816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 53), 'c', False)
    # Processing the call keyword arguments (line 1709)
    kwargs_497817 = {}
    # Getting the type of 'isscalar' (line 1709)
    isscalar_497815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 44), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1709)
    isscalar_call_result_497818 = invoke(stypy.reporting.localization.Localization(__file__, 1709, 44), isscalar_497815, *[c_497816], **kwargs_497817)
    
    # Applying the binary operator 'and' (line 1709)
    result_and_keyword_497819 = python_operator(stypy.reporting.localization.Localization(__file__, 1709, 12), 'and', result_and_keyword_497814, isscalar_call_result_497818)
    
    # Applying the 'not' unary operator (line 1709)
    result_not__497820 = python_operator(stypy.reporting.localization.Localization(__file__, 1709, 7), 'not', result_and_keyword_497819)
    
    # Testing the type of an if condition (line 1709)
    if_condition_497821 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1709, 4), result_not__497820)
    # Assigning a type to the variable 'if_condition_497821' (line 1709)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1709, 4), 'if_condition_497821', if_condition_497821)
    # SSA begins for if statement (line 1709)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1710)
    # Processing the call arguments (line 1710)
    str_497823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1710, 25), 'str', 'Arguments must be scalars.')
    # Processing the call keyword arguments (line 1710)
    kwargs_497824 = {}
    # Getting the type of 'ValueError' (line 1710)
    ValueError_497822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1710, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1710)
    ValueError_call_result_497825 = invoke(stypy.reporting.localization.Localization(__file__, 1710, 14), ValueError_497822, *[str_497823], **kwargs_497824)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1710, 8), ValueError_call_result_497825, 'raise parameter', BaseException)
    # SSA join for if statement (line 1709)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'n' (line 1711)
    n_497826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 8), 'n')
    
    # Call to floor(...): (line 1711)
    # Processing the call arguments (line 1711)
    # Getting the type of 'n' (line 1711)
    n_497828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 19), 'n', False)
    # Processing the call keyword arguments (line 1711)
    kwargs_497829 = {}
    # Getting the type of 'floor' (line 1711)
    floor_497827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 13), 'floor', False)
    # Calling floor(args, kwargs) (line 1711)
    floor_call_result_497830 = invoke(stypy.reporting.localization.Localization(__file__, 1711, 13), floor_497827, *[n_497828], **kwargs_497829)
    
    # Applying the binary operator '!=' (line 1711)
    result_ne_497831 = python_operator(stypy.reporting.localization.Localization(__file__, 1711, 8), '!=', n_497826, floor_call_result_497830)
    
    
    # Getting the type of 'm' (line 1711)
    m_497832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 27), 'm')
    
    # Call to floor(...): (line 1711)
    # Processing the call arguments (line 1711)
    # Getting the type of 'm' (line 1711)
    m_497834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 38), 'm', False)
    # Processing the call keyword arguments (line 1711)
    kwargs_497835 = {}
    # Getting the type of 'floor' (line 1711)
    floor_497833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 32), 'floor', False)
    # Calling floor(args, kwargs) (line 1711)
    floor_call_result_497836 = invoke(stypy.reporting.localization.Localization(__file__, 1711, 32), floor_497833, *[m_497834], **kwargs_497835)
    
    # Applying the binary operator '!=' (line 1711)
    result_ne_497837 = python_operator(stypy.reporting.localization.Localization(__file__, 1711, 27), '!=', m_497832, floor_call_result_497836)
    
    # Applying the binary operator 'or' (line 1711)
    result_or_keyword_497838 = python_operator(stypy.reporting.localization.Localization(__file__, 1711, 7), 'or', result_ne_497831, result_ne_497837)
    
    # Testing the type of an if condition (line 1711)
    if_condition_497839 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1711, 4), result_or_keyword_497838)
    # Assigning a type to the variable 'if_condition_497839' (line 1711)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1711, 4), 'if_condition_497839', if_condition_497839)
    # SSA begins for if statement (line 1711)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1712)
    # Processing the call arguments (line 1712)
    str_497841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1712, 25), 'str', 'Modes must be integers.')
    # Processing the call keyword arguments (line 1712)
    kwargs_497842 = {}
    # Getting the type of 'ValueError' (line 1712)
    ValueError_497840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1712)
    ValueError_call_result_497843 = invoke(stypy.reporting.localization.Localization(__file__, 1712, 14), ValueError_497840, *[str_497841], **kwargs_497842)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1712, 8), ValueError_call_result_497843, 'raise parameter', BaseException)
    # SSA join for if statement (line 1711)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 1713)
    n_497844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1713, 8), 'n')
    # Getting the type of 'm' (line 1713)
    m_497845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1713, 10), 'm')
    # Applying the binary operator '-' (line 1713)
    result_sub_497846 = python_operator(stypy.reporting.localization.Localization(__file__, 1713, 8), '-', n_497844, m_497845)
    
    int_497847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1713, 14), 'int')
    # Applying the binary operator '>' (line 1713)
    result_gt_497848 = python_operator(stypy.reporting.localization.Localization(__file__, 1713, 8), '>', result_sub_497846, int_497847)
    
    # Testing the type of an if condition (line 1713)
    if_condition_497849 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1713, 4), result_gt_497848)
    # Assigning a type to the variable 'if_condition_497849' (line 1713)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1713, 4), 'if_condition_497849', if_condition_497849)
    # SSA begins for if statement (line 1713)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1714)
    # Processing the call arguments (line 1714)
    str_497851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1714, 25), 'str', 'Difference between n and m is too large.')
    # Processing the call keyword arguments (line 1714)
    kwargs_497852 = {}
    # Getting the type of 'ValueError' (line 1714)
    ValueError_497850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1714)
    ValueError_call_result_497853 = invoke(stypy.reporting.localization.Localization(__file__, 1714, 14), ValueError_497850, *[str_497851], **kwargs_497852)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1714, 8), ValueError_call_result_497853, 'raise parameter', BaseException)
    # SSA join for if statement (line 1713)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1715):
    
    # Assigning a BinOp to a Name (line 1715):
    # Getting the type of 'n' (line 1715)
    n_497854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 11), 'n')
    # Getting the type of 'm' (line 1715)
    m_497855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 13), 'm')
    # Applying the binary operator '-' (line 1715)
    result_sub_497856 = python_operator(stypy.reporting.localization.Localization(__file__, 1715, 11), '-', n_497854, m_497855)
    
    int_497857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1715, 15), 'int')
    # Applying the binary operator '+' (line 1715)
    result_add_497858 = python_operator(stypy.reporting.localization.Localization(__file__, 1715, 14), '+', result_sub_497856, int_497857)
    
    # Assigning a type to the variable 'maxL' (line 1715)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1715, 4), 'maxL', result_add_497858)
    
    # Obtaining the type of the subscript
    # Getting the type of 'maxL' (line 1716)
    maxL_497859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 41), 'maxL')
    slice_497860 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1716, 11), None, maxL_497859, None)
    
    # Obtaining the type of the subscript
    int_497861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1716, 37), 'int')
    
    # Call to segv(...): (line 1716)
    # Processing the call arguments (line 1716)
    # Getting the type of 'm' (line 1716)
    m_497864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 24), 'm', False)
    # Getting the type of 'n' (line 1716)
    n_497865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 27), 'n', False)
    # Getting the type of 'c' (line 1716)
    c_497866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 30), 'c', False)
    int_497867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1716, 33), 'int')
    # Processing the call keyword arguments (line 1716)
    kwargs_497868 = {}
    # Getting the type of 'specfun' (line 1716)
    specfun_497862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 11), 'specfun', False)
    # Obtaining the member 'segv' of a type (line 1716)
    segv_497863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1716, 11), specfun_497862, 'segv')
    # Calling segv(args, kwargs) (line 1716)
    segv_call_result_497869 = invoke(stypy.reporting.localization.Localization(__file__, 1716, 11), segv_497863, *[m_497864, n_497865, c_497866, int_497867], **kwargs_497868)
    
    # Obtaining the member '__getitem__' of a type (line 1716)
    getitem___497870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1716, 11), segv_call_result_497869, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1716)
    subscript_call_result_497871 = invoke(stypy.reporting.localization.Localization(__file__, 1716, 11), getitem___497870, int_497861)
    
    # Obtaining the member '__getitem__' of a type (line 1716)
    getitem___497872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1716, 11), subscript_call_result_497871, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1716)
    subscript_call_result_497873 = invoke(stypy.reporting.localization.Localization(__file__, 1716, 11), getitem___497872, slice_497860)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1716)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1716, 4), 'stypy_return_type', subscript_call_result_497873)
    
    # ################# End of 'obl_cv_seq(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'obl_cv_seq' in the type store
    # Getting the type of 'stypy_return_type' (line 1695)
    stypy_return_type_497874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_497874)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'obl_cv_seq'
    return stypy_return_type_497874

# Assigning a type to the variable 'obl_cv_seq' (line 1695)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1695, 0), 'obl_cv_seq', obl_cv_seq)

@norecursion
def ellipk(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'ellipk'
    module_type_store = module_type_store.open_function_context('ellipk', 1719, 0, False)
    
    # Passed parameters checking function
    ellipk.stypy_localization = localization
    ellipk.stypy_type_of_self = None
    ellipk.stypy_type_store = module_type_store
    ellipk.stypy_function_name = 'ellipk'
    ellipk.stypy_param_names_list = ['m']
    ellipk.stypy_varargs_param_name = None
    ellipk.stypy_kwargs_param_name = None
    ellipk.stypy_call_defaults = defaults
    ellipk.stypy_call_varargs = varargs
    ellipk.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ellipk', ['m'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ellipk', localization, ['m'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ellipk(...)' code ##################

    str_497875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1760, (-1)), 'str', 'Complete elliptic integral of the first kind.\n\n    This function is defined as\n\n    .. math:: K(m) = \\int_0^{\\pi/2} [1 - m \\sin(t)^2]^{-1/2} dt\n\n    Parameters\n    ----------\n    m : array_like\n        The parameter of the elliptic integral.\n\n    Returns\n    -------\n    K : array_like\n        Value of the elliptic integral.\n\n    Notes\n    -----\n    For more precision around point m = 1, use `ellipkm1`, which this\n    function calls.\n\n    The parameterization in terms of :math:`m` follows that of section\n    17.2 in [1]_. Other parameterizations in terms of the\n    complementary parameter :math:`1 - m`, modular angle\n    :math:`\\sin^2(\\alpha) = m`, or modulus :math:`k^2 = m` are also\n    used, so be careful that you choose the correct parameter.\n\n    See Also\n    --------\n    ellipkm1 : Complete elliptic integral of the first kind around m = 1\n    ellipkinc : Incomplete elliptic integral of the first kind\n    ellipe : Complete elliptic integral of the second kind\n    ellipeinc : Incomplete elliptic integral of the second kind\n\n    References\n    ----------\n    .. [1] Milton Abramowitz and Irene A. Stegun, eds.\n           Handbook of Mathematical Functions with Formulas,\n           Graphs, and Mathematical Tables. New York: Dover, 1972.\n\n    ')
    
    # Call to ellipkm1(...): (line 1761)
    # Processing the call arguments (line 1761)
    int_497877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1761, 20), 'int')
    
    # Call to asarray(...): (line 1761)
    # Processing the call arguments (line 1761)
    # Getting the type of 'm' (line 1761)
    m_497879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 32), 'm', False)
    # Processing the call keyword arguments (line 1761)
    kwargs_497880 = {}
    # Getting the type of 'asarray' (line 1761)
    asarray_497878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 24), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1761)
    asarray_call_result_497881 = invoke(stypy.reporting.localization.Localization(__file__, 1761, 24), asarray_497878, *[m_497879], **kwargs_497880)
    
    # Applying the binary operator '-' (line 1761)
    result_sub_497882 = python_operator(stypy.reporting.localization.Localization(__file__, 1761, 20), '-', int_497877, asarray_call_result_497881)
    
    # Processing the call keyword arguments (line 1761)
    kwargs_497883 = {}
    # Getting the type of 'ellipkm1' (line 1761)
    ellipkm1_497876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 11), 'ellipkm1', False)
    # Calling ellipkm1(args, kwargs) (line 1761)
    ellipkm1_call_result_497884 = invoke(stypy.reporting.localization.Localization(__file__, 1761, 11), ellipkm1_497876, *[result_sub_497882], **kwargs_497883)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1761)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1761, 4), 'stypy_return_type', ellipkm1_call_result_497884)
    
    # ################# End of 'ellipk(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ellipk' in the type store
    # Getting the type of 'stypy_return_type' (line 1719)
    stypy_return_type_497885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_497885)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ellipk'
    return stypy_return_type_497885

# Assigning a type to the variable 'ellipk' (line 1719)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1719, 0), 'ellipk', ellipk)

@norecursion
def comb(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1764)
    False_497886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 21), 'False')
    # Getting the type of 'False' (line 1764)
    False_497887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 39), 'False')
    defaults = [False_497886, False_497887]
    # Create a new context for function 'comb'
    module_type_store = module_type_store.open_function_context('comb', 1764, 0, False)
    
    # Passed parameters checking function
    comb.stypy_localization = localization
    comb.stypy_type_of_self = None
    comb.stypy_type_store = module_type_store
    comb.stypy_function_name = 'comb'
    comb.stypy_param_names_list = ['N', 'k', 'exact', 'repetition']
    comb.stypy_varargs_param_name = None
    comb.stypy_kwargs_param_name = None
    comb.stypy_call_defaults = defaults
    comb.stypy_call_varargs = varargs
    comb.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'comb', ['N', 'k', 'exact', 'repetition'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'comb', localization, ['N', 'k', 'exact', 'repetition'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'comb(...)' code ##################

    str_497888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1808, (-1)), 'str', 'The number of combinations of N things taken k at a time.\n\n    This is often expressed as "N choose k".\n\n    Parameters\n    ----------\n    N : int, ndarray\n        Number of things.\n    k : int, ndarray\n        Number of elements taken.\n    exact : bool, optional\n        If `exact` is False, then floating point precision is used, otherwise\n        exact long integer is computed.\n    repetition : bool, optional\n        If `repetition` is True, then the number of combinations with\n        repetition is computed.\n\n    Returns\n    -------\n    val : int, float, ndarray\n        The total number of combinations.\n\n    See Also\n    --------\n    binom : Binomial coefficient ufunc\n\n    Notes\n    -----\n    - Array arguments accepted only for exact=False case.\n    - If k > N, N < 0, or k < 0, then a 0 is returned.\n\n    Examples\n    --------\n    >>> from scipy.special import comb\n    >>> k = np.array([3, 4])\n    >>> n = np.array([10, 10])\n    >>> comb(n, k, exact=False)\n    array([ 120.,  210.])\n    >>> comb(10, 3, exact=True)\n    120L\n    >>> comb(10, 3, exact=True, repetition=True)\n    220L\n\n    ')
    
    # Getting the type of 'repetition' (line 1809)
    repetition_497889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 7), 'repetition')
    # Testing the type of an if condition (line 1809)
    if_condition_497890 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1809, 4), repetition_497889)
    # Assigning a type to the variable 'if_condition_497890' (line 1809)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1809, 4), 'if_condition_497890', if_condition_497890)
    # SSA begins for if statement (line 1809)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to comb(...): (line 1810)
    # Processing the call arguments (line 1810)
    # Getting the type of 'N' (line 1810)
    N_497892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 20), 'N', False)
    # Getting the type of 'k' (line 1810)
    k_497893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 24), 'k', False)
    # Applying the binary operator '+' (line 1810)
    result_add_497894 = python_operator(stypy.reporting.localization.Localization(__file__, 1810, 20), '+', N_497892, k_497893)
    
    int_497895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 28), 'int')
    # Applying the binary operator '-' (line 1810)
    result_sub_497896 = python_operator(stypy.reporting.localization.Localization(__file__, 1810, 26), '-', result_add_497894, int_497895)
    
    # Getting the type of 'k' (line 1810)
    k_497897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 31), 'k', False)
    # Getting the type of 'exact' (line 1810)
    exact_497898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 34), 'exact', False)
    # Processing the call keyword arguments (line 1810)
    kwargs_497899 = {}
    # Getting the type of 'comb' (line 1810)
    comb_497891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 15), 'comb', False)
    # Calling comb(args, kwargs) (line 1810)
    comb_call_result_497900 = invoke(stypy.reporting.localization.Localization(__file__, 1810, 15), comb_497891, *[result_sub_497896, k_497897, exact_497898], **kwargs_497899)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1810)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1810, 8), 'stypy_return_type', comb_call_result_497900)
    # SSA join for if statement (line 1809)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'exact' (line 1811)
    exact_497901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 7), 'exact')
    # Testing the type of an if condition (line 1811)
    if_condition_497902 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1811, 4), exact_497901)
    # Assigning a type to the variable 'if_condition_497902' (line 1811)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1811, 4), 'if_condition_497902', if_condition_497902)
    # SSA begins for if statement (line 1811)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _comb_int(...): (line 1812)
    # Processing the call arguments (line 1812)
    # Getting the type of 'N' (line 1812)
    N_497904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 25), 'N', False)
    # Getting the type of 'k' (line 1812)
    k_497905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 28), 'k', False)
    # Processing the call keyword arguments (line 1812)
    kwargs_497906 = {}
    # Getting the type of '_comb_int' (line 1812)
    _comb_int_497903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 15), '_comb_int', False)
    # Calling _comb_int(args, kwargs) (line 1812)
    _comb_int_call_result_497907 = invoke(stypy.reporting.localization.Localization(__file__, 1812, 15), _comb_int_497903, *[N_497904, k_497905], **kwargs_497906)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1812)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1812, 8), 'stypy_return_type', _comb_int_call_result_497907)
    # SSA branch for the else part of an if statement (line 1811)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Tuple to a Tuple (line 1814):
    
    # Assigning a Call to a Name (line 1814):
    
    # Call to asarray(...): (line 1814)
    # Processing the call arguments (line 1814)
    # Getting the type of 'k' (line 1814)
    k_497909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 23), 'k', False)
    # Processing the call keyword arguments (line 1814)
    kwargs_497910 = {}
    # Getting the type of 'asarray' (line 1814)
    asarray_497908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 15), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1814)
    asarray_call_result_497911 = invoke(stypy.reporting.localization.Localization(__file__, 1814, 15), asarray_497908, *[k_497909], **kwargs_497910)
    
    # Assigning a type to the variable 'tuple_assignment_494779' (line 1814)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1814, 8), 'tuple_assignment_494779', asarray_call_result_497911)
    
    # Assigning a Call to a Name (line 1814):
    
    # Call to asarray(...): (line 1814)
    # Processing the call arguments (line 1814)
    # Getting the type of 'N' (line 1814)
    N_497913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 35), 'N', False)
    # Processing the call keyword arguments (line 1814)
    kwargs_497914 = {}
    # Getting the type of 'asarray' (line 1814)
    asarray_497912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 27), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1814)
    asarray_call_result_497915 = invoke(stypy.reporting.localization.Localization(__file__, 1814, 27), asarray_497912, *[N_497913], **kwargs_497914)
    
    # Assigning a type to the variable 'tuple_assignment_494780' (line 1814)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1814, 8), 'tuple_assignment_494780', asarray_call_result_497915)
    
    # Assigning a Name to a Name (line 1814):
    # Getting the type of 'tuple_assignment_494779' (line 1814)
    tuple_assignment_494779_497916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 8), 'tuple_assignment_494779')
    # Assigning a type to the variable 'k' (line 1814)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1814, 8), 'k', tuple_assignment_494779_497916)
    
    # Assigning a Name to a Name (line 1814):
    # Getting the type of 'tuple_assignment_494780' (line 1814)
    tuple_assignment_494780_497917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 8), 'tuple_assignment_494780')
    # Assigning a type to the variable 'N' (line 1814)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1814, 11), 'N', tuple_assignment_494780_497917)
    
    # Assigning a BinOp to a Name (line 1815):
    
    # Assigning a BinOp to a Name (line 1815):
    
    # Getting the type of 'k' (line 1815)
    k_497918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 16), 'k')
    # Getting the type of 'N' (line 1815)
    N_497919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 21), 'N')
    # Applying the binary operator '<=' (line 1815)
    result_le_497920 = python_operator(stypy.reporting.localization.Localization(__file__, 1815, 16), '<=', k_497918, N_497919)
    
    
    # Getting the type of 'N' (line 1815)
    N_497921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 27), 'N')
    int_497922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1815, 32), 'int')
    # Applying the binary operator '>=' (line 1815)
    result_ge_497923 = python_operator(stypy.reporting.localization.Localization(__file__, 1815, 27), '>=', N_497921, int_497922)
    
    # Applying the binary operator '&' (line 1815)
    result_and__497924 = python_operator(stypy.reporting.localization.Localization(__file__, 1815, 15), '&', result_le_497920, result_ge_497923)
    
    
    # Getting the type of 'k' (line 1815)
    k_497925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 38), 'k')
    int_497926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1815, 43), 'int')
    # Applying the binary operator '>=' (line 1815)
    result_ge_497927 = python_operator(stypy.reporting.localization.Localization(__file__, 1815, 38), '>=', k_497925, int_497926)
    
    # Applying the binary operator '&' (line 1815)
    result_and__497928 = python_operator(stypy.reporting.localization.Localization(__file__, 1815, 35), '&', result_and__497924, result_ge_497927)
    
    # Assigning a type to the variable 'cond' (line 1815)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1815, 8), 'cond', result_and__497928)
    
    # Assigning a Call to a Name (line 1816):
    
    # Assigning a Call to a Name (line 1816):
    
    # Call to binom(...): (line 1816)
    # Processing the call arguments (line 1816)
    # Getting the type of 'N' (line 1816)
    N_497930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 21), 'N', False)
    # Getting the type of 'k' (line 1816)
    k_497931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 24), 'k', False)
    # Processing the call keyword arguments (line 1816)
    kwargs_497932 = {}
    # Getting the type of 'binom' (line 1816)
    binom_497929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 15), 'binom', False)
    # Calling binom(args, kwargs) (line 1816)
    binom_call_result_497933 = invoke(stypy.reporting.localization.Localization(__file__, 1816, 15), binom_497929, *[N_497930, k_497931], **kwargs_497932)
    
    # Assigning a type to the variable 'vals' (line 1816)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1816, 8), 'vals', binom_call_result_497933)
    
    
    # Call to isinstance(...): (line 1817)
    # Processing the call arguments (line 1817)
    # Getting the type of 'vals' (line 1817)
    vals_497935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 22), 'vals', False)
    # Getting the type of 'np' (line 1817)
    np_497936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 28), 'np', False)
    # Obtaining the member 'ndarray' of a type (line 1817)
    ndarray_497937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1817, 28), np_497936, 'ndarray')
    # Processing the call keyword arguments (line 1817)
    kwargs_497938 = {}
    # Getting the type of 'isinstance' (line 1817)
    isinstance_497934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1817)
    isinstance_call_result_497939 = invoke(stypy.reporting.localization.Localization(__file__, 1817, 11), isinstance_497934, *[vals_497935, ndarray_497937], **kwargs_497938)
    
    # Testing the type of an if condition (line 1817)
    if_condition_497940 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1817, 8), isinstance_call_result_497939)
    # Assigning a type to the variable 'if_condition_497940' (line 1817)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1817, 8), 'if_condition_497940', if_condition_497940)
    # SSA begins for if statement (line 1817)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Subscript (line 1818):
    
    # Assigning a Num to a Subscript (line 1818):
    int_497941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1818, 26), 'int')
    # Getting the type of 'vals' (line 1818)
    vals_497942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 12), 'vals')
    
    # Getting the type of 'cond' (line 1818)
    cond_497943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 18), 'cond')
    # Applying the '~' unary operator (line 1818)
    result_inv_497944 = python_operator(stypy.reporting.localization.Localization(__file__, 1818, 17), '~', cond_497943)
    
    # Storing an element on a container (line 1818)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1818, 12), vals_497942, (result_inv_497944, int_497941))
    # SSA branch for the else part of an if statement (line 1817)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'cond' (line 1819)
    cond_497945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 17), 'cond')
    # Applying the 'not' unary operator (line 1819)
    result_not__497946 = python_operator(stypy.reporting.localization.Localization(__file__, 1819, 13), 'not', cond_497945)
    
    # Testing the type of an if condition (line 1819)
    if_condition_497947 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1819, 13), result_not__497946)
    # Assigning a type to the variable 'if_condition_497947' (line 1819)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1819, 13), 'if_condition_497947', if_condition_497947)
    # SSA begins for if statement (line 1819)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1820):
    
    # Assigning a Call to a Name (line 1820):
    
    # Call to float64(...): (line 1820)
    # Processing the call arguments (line 1820)
    int_497950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1820, 30), 'int')
    # Processing the call keyword arguments (line 1820)
    kwargs_497951 = {}
    # Getting the type of 'np' (line 1820)
    np_497948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 19), 'np', False)
    # Obtaining the member 'float64' of a type (line 1820)
    float64_497949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1820, 19), np_497948, 'float64')
    # Calling float64(args, kwargs) (line 1820)
    float64_call_result_497952 = invoke(stypy.reporting.localization.Localization(__file__, 1820, 19), float64_497949, *[int_497950], **kwargs_497951)
    
    # Assigning a type to the variable 'vals' (line 1820)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1820, 12), 'vals', float64_call_result_497952)
    # SSA join for if statement (line 1819)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1817)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'vals' (line 1821)
    vals_497953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 15), 'vals')
    # Assigning a type to the variable 'stypy_return_type' (line 1821)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1821, 8), 'stypy_return_type', vals_497953)
    # SSA join for if statement (line 1811)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'comb(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'comb' in the type store
    # Getting the type of 'stypy_return_type' (line 1764)
    stypy_return_type_497954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_497954)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'comb'
    return stypy_return_type_497954

# Assigning a type to the variable 'comb' (line 1764)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1764, 0), 'comb', comb)

@norecursion
def perm(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1824)
    False_497955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 21), 'False')
    defaults = [False_497955]
    # Create a new context for function 'perm'
    module_type_store = module_type_store.open_function_context('perm', 1824, 0, False)
    
    # Passed parameters checking function
    perm.stypy_localization = localization
    perm.stypy_type_of_self = None
    perm.stypy_type_store = module_type_store
    perm.stypy_function_name = 'perm'
    perm.stypy_param_names_list = ['N', 'k', 'exact']
    perm.stypy_varargs_param_name = None
    perm.stypy_kwargs_param_name = None
    perm.stypy_call_defaults = defaults
    perm.stypy_call_varargs = varargs
    perm.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'perm', ['N', 'k', 'exact'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'perm', localization, ['N', 'k', 'exact'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'perm(...)' code ##################

    str_497956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1859, (-1)), 'str', 'Permutations of N things taken k at a time, i.e., k-permutations of N.\n\n    It\'s also known as "partial permutations".\n\n    Parameters\n    ----------\n    N : int, ndarray\n        Number of things.\n    k : int, ndarray\n        Number of elements taken.\n    exact : bool, optional\n        If `exact` is False, then floating point precision is used, otherwise\n        exact long integer is computed.\n\n    Returns\n    -------\n    val : int, ndarray\n        The number of k-permutations of N.\n\n    Notes\n    -----\n    - Array arguments accepted only for exact=False case.\n    - If k > N, N < 0, or k < 0, then a 0 is returned.\n\n    Examples\n    --------\n    >>> from scipy.special import perm\n    >>> k = np.array([3, 4])\n    >>> n = np.array([10, 10])\n    >>> perm(n, k)\n    array([  720.,  5040.])\n    >>> perm(10, 3, exact=True)\n    720\n\n    ')
    
    # Getting the type of 'exact' (line 1860)
    exact_497957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1860, 7), 'exact')
    # Testing the type of an if condition (line 1860)
    if_condition_497958 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1860, 4), exact_497957)
    # Assigning a type to the variable 'if_condition_497958' (line 1860)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1860, 4), 'if_condition_497958', if_condition_497958)
    # SSA begins for if statement (line 1860)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'k' (line 1861)
    k_497959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 12), 'k')
    # Getting the type of 'N' (line 1861)
    N_497960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 16), 'N')
    # Applying the binary operator '>' (line 1861)
    result_gt_497961 = python_operator(stypy.reporting.localization.Localization(__file__, 1861, 12), '>', k_497959, N_497960)
    
    
    # Getting the type of 'N' (line 1861)
    N_497962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 23), 'N')
    int_497963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1861, 27), 'int')
    # Applying the binary operator '<' (line 1861)
    result_lt_497964 = python_operator(stypy.reporting.localization.Localization(__file__, 1861, 23), '<', N_497962, int_497963)
    
    # Applying the binary operator 'or' (line 1861)
    result_or_keyword_497965 = python_operator(stypy.reporting.localization.Localization(__file__, 1861, 11), 'or', result_gt_497961, result_lt_497964)
    
    # Getting the type of 'k' (line 1861)
    k_497966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 34), 'k')
    int_497967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1861, 38), 'int')
    # Applying the binary operator '<' (line 1861)
    result_lt_497968 = python_operator(stypy.reporting.localization.Localization(__file__, 1861, 34), '<', k_497966, int_497967)
    
    # Applying the binary operator 'or' (line 1861)
    result_or_keyword_497969 = python_operator(stypy.reporting.localization.Localization(__file__, 1861, 11), 'or', result_or_keyword_497965, result_lt_497968)
    
    # Testing the type of an if condition (line 1861)
    if_condition_497970 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1861, 8), result_or_keyword_497969)
    # Assigning a type to the variable 'if_condition_497970' (line 1861)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1861, 8), 'if_condition_497970', if_condition_497970)
    # SSA begins for if statement (line 1861)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    int_497971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1862, 19), 'int')
    # Assigning a type to the variable 'stypy_return_type' (line 1862)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1862, 12), 'stypy_return_type', int_497971)
    # SSA join for if statement (line 1861)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 1863):
    
    # Assigning a Num to a Name (line 1863):
    int_497972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1863, 14), 'int')
    # Assigning a type to the variable 'val' (line 1863)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1863, 8), 'val', int_497972)
    
    
    # Call to xrange(...): (line 1864)
    # Processing the call arguments (line 1864)
    # Getting the type of 'N' (line 1864)
    N_497974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 24), 'N', False)
    # Getting the type of 'k' (line 1864)
    k_497975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 28), 'k', False)
    # Applying the binary operator '-' (line 1864)
    result_sub_497976 = python_operator(stypy.reporting.localization.Localization(__file__, 1864, 24), '-', N_497974, k_497975)
    
    int_497977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1864, 32), 'int')
    # Applying the binary operator '+' (line 1864)
    result_add_497978 = python_operator(stypy.reporting.localization.Localization(__file__, 1864, 30), '+', result_sub_497976, int_497977)
    
    # Getting the type of 'N' (line 1864)
    N_497979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 35), 'N', False)
    int_497980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1864, 39), 'int')
    # Applying the binary operator '+' (line 1864)
    result_add_497981 = python_operator(stypy.reporting.localization.Localization(__file__, 1864, 35), '+', N_497979, int_497980)
    
    # Processing the call keyword arguments (line 1864)
    kwargs_497982 = {}
    # Getting the type of 'xrange' (line 1864)
    xrange_497973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 17), 'xrange', False)
    # Calling xrange(args, kwargs) (line 1864)
    xrange_call_result_497983 = invoke(stypy.reporting.localization.Localization(__file__, 1864, 17), xrange_497973, *[result_add_497978, result_add_497981], **kwargs_497982)
    
    # Testing the type of a for loop iterable (line 1864)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1864, 8), xrange_call_result_497983)
    # Getting the type of the for loop variable (line 1864)
    for_loop_var_497984 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1864, 8), xrange_call_result_497983)
    # Assigning a type to the variable 'i' (line 1864)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1864, 8), 'i', for_loop_var_497984)
    # SSA begins for a for statement (line 1864)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'val' (line 1865)
    val_497985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 12), 'val')
    # Getting the type of 'i' (line 1865)
    i_497986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 19), 'i')
    # Applying the binary operator '*=' (line 1865)
    result_imul_497987 = python_operator(stypy.reporting.localization.Localization(__file__, 1865, 12), '*=', val_497985, i_497986)
    # Assigning a type to the variable 'val' (line 1865)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1865, 12), 'val', result_imul_497987)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'val' (line 1866)
    val_497988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 15), 'val')
    # Assigning a type to the variable 'stypy_return_type' (line 1866)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 8), 'stypy_return_type', val_497988)
    # SSA branch for the else part of an if statement (line 1860)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Tuple to a Tuple (line 1868):
    
    # Assigning a Call to a Name (line 1868):
    
    # Call to asarray(...): (line 1868)
    # Processing the call arguments (line 1868)
    # Getting the type of 'k' (line 1868)
    k_497990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 23), 'k', False)
    # Processing the call keyword arguments (line 1868)
    kwargs_497991 = {}
    # Getting the type of 'asarray' (line 1868)
    asarray_497989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 15), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1868)
    asarray_call_result_497992 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 15), asarray_497989, *[k_497990], **kwargs_497991)
    
    # Assigning a type to the variable 'tuple_assignment_494781' (line 1868)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 8), 'tuple_assignment_494781', asarray_call_result_497992)
    
    # Assigning a Call to a Name (line 1868):
    
    # Call to asarray(...): (line 1868)
    # Processing the call arguments (line 1868)
    # Getting the type of 'N' (line 1868)
    N_497994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 35), 'N', False)
    # Processing the call keyword arguments (line 1868)
    kwargs_497995 = {}
    # Getting the type of 'asarray' (line 1868)
    asarray_497993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 27), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1868)
    asarray_call_result_497996 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 27), asarray_497993, *[N_497994], **kwargs_497995)
    
    # Assigning a type to the variable 'tuple_assignment_494782' (line 1868)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 8), 'tuple_assignment_494782', asarray_call_result_497996)
    
    # Assigning a Name to a Name (line 1868):
    # Getting the type of 'tuple_assignment_494781' (line 1868)
    tuple_assignment_494781_497997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 8), 'tuple_assignment_494781')
    # Assigning a type to the variable 'k' (line 1868)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 8), 'k', tuple_assignment_494781_497997)
    
    # Assigning a Name to a Name (line 1868):
    # Getting the type of 'tuple_assignment_494782' (line 1868)
    tuple_assignment_494782_497998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 8), 'tuple_assignment_494782')
    # Assigning a type to the variable 'N' (line 1868)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 11), 'N', tuple_assignment_494782_497998)
    
    # Assigning a BinOp to a Name (line 1869):
    
    # Assigning a BinOp to a Name (line 1869):
    
    # Getting the type of 'k' (line 1869)
    k_497999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 16), 'k')
    # Getting the type of 'N' (line 1869)
    N_498000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 21), 'N')
    # Applying the binary operator '<=' (line 1869)
    result_le_498001 = python_operator(stypy.reporting.localization.Localization(__file__, 1869, 16), '<=', k_497999, N_498000)
    
    
    # Getting the type of 'N' (line 1869)
    N_498002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 27), 'N')
    int_498003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1869, 32), 'int')
    # Applying the binary operator '>=' (line 1869)
    result_ge_498004 = python_operator(stypy.reporting.localization.Localization(__file__, 1869, 27), '>=', N_498002, int_498003)
    
    # Applying the binary operator '&' (line 1869)
    result_and__498005 = python_operator(stypy.reporting.localization.Localization(__file__, 1869, 15), '&', result_le_498001, result_ge_498004)
    
    
    # Getting the type of 'k' (line 1869)
    k_498006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 38), 'k')
    int_498007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1869, 43), 'int')
    # Applying the binary operator '>=' (line 1869)
    result_ge_498008 = python_operator(stypy.reporting.localization.Localization(__file__, 1869, 38), '>=', k_498006, int_498007)
    
    # Applying the binary operator '&' (line 1869)
    result_and__498009 = python_operator(stypy.reporting.localization.Localization(__file__, 1869, 35), '&', result_and__498005, result_ge_498008)
    
    # Assigning a type to the variable 'cond' (line 1869)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1869, 8), 'cond', result_and__498009)
    
    # Assigning a Call to a Name (line 1870):
    
    # Assigning a Call to a Name (line 1870):
    
    # Call to poch(...): (line 1870)
    # Processing the call arguments (line 1870)
    # Getting the type of 'N' (line 1870)
    N_498011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 20), 'N', False)
    # Getting the type of 'k' (line 1870)
    k_498012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 24), 'k', False)
    # Applying the binary operator '-' (line 1870)
    result_sub_498013 = python_operator(stypy.reporting.localization.Localization(__file__, 1870, 20), '-', N_498011, k_498012)
    
    int_498014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1870, 28), 'int')
    # Applying the binary operator '+' (line 1870)
    result_add_498015 = python_operator(stypy.reporting.localization.Localization(__file__, 1870, 26), '+', result_sub_498013, int_498014)
    
    # Getting the type of 'k' (line 1870)
    k_498016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 31), 'k', False)
    # Processing the call keyword arguments (line 1870)
    kwargs_498017 = {}
    # Getting the type of 'poch' (line 1870)
    poch_498010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 15), 'poch', False)
    # Calling poch(args, kwargs) (line 1870)
    poch_call_result_498018 = invoke(stypy.reporting.localization.Localization(__file__, 1870, 15), poch_498010, *[result_add_498015, k_498016], **kwargs_498017)
    
    # Assigning a type to the variable 'vals' (line 1870)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1870, 8), 'vals', poch_call_result_498018)
    
    
    # Call to isinstance(...): (line 1871)
    # Processing the call arguments (line 1871)
    # Getting the type of 'vals' (line 1871)
    vals_498020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 22), 'vals', False)
    # Getting the type of 'np' (line 1871)
    np_498021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 28), 'np', False)
    # Obtaining the member 'ndarray' of a type (line 1871)
    ndarray_498022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1871, 28), np_498021, 'ndarray')
    # Processing the call keyword arguments (line 1871)
    kwargs_498023 = {}
    # Getting the type of 'isinstance' (line 1871)
    isinstance_498019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1871)
    isinstance_call_result_498024 = invoke(stypy.reporting.localization.Localization(__file__, 1871, 11), isinstance_498019, *[vals_498020, ndarray_498022], **kwargs_498023)
    
    # Testing the type of an if condition (line 1871)
    if_condition_498025 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1871, 8), isinstance_call_result_498024)
    # Assigning a type to the variable 'if_condition_498025' (line 1871)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 8), 'if_condition_498025', if_condition_498025)
    # SSA begins for if statement (line 1871)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Subscript (line 1872):
    
    # Assigning a Num to a Subscript (line 1872):
    int_498026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1872, 26), 'int')
    # Getting the type of 'vals' (line 1872)
    vals_498027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 12), 'vals')
    
    # Getting the type of 'cond' (line 1872)
    cond_498028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 18), 'cond')
    # Applying the '~' unary operator (line 1872)
    result_inv_498029 = python_operator(stypy.reporting.localization.Localization(__file__, 1872, 17), '~', cond_498028)
    
    # Storing an element on a container (line 1872)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1872, 12), vals_498027, (result_inv_498029, int_498026))
    # SSA branch for the else part of an if statement (line 1871)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'cond' (line 1873)
    cond_498030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 17), 'cond')
    # Applying the 'not' unary operator (line 1873)
    result_not__498031 = python_operator(stypy.reporting.localization.Localization(__file__, 1873, 13), 'not', cond_498030)
    
    # Testing the type of an if condition (line 1873)
    if_condition_498032 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1873, 13), result_not__498031)
    # Assigning a type to the variable 'if_condition_498032' (line 1873)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1873, 13), 'if_condition_498032', if_condition_498032)
    # SSA begins for if statement (line 1873)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1874):
    
    # Assigning a Call to a Name (line 1874):
    
    # Call to float64(...): (line 1874)
    # Processing the call arguments (line 1874)
    int_498035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1874, 30), 'int')
    # Processing the call keyword arguments (line 1874)
    kwargs_498036 = {}
    # Getting the type of 'np' (line 1874)
    np_498033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 19), 'np', False)
    # Obtaining the member 'float64' of a type (line 1874)
    float64_498034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1874, 19), np_498033, 'float64')
    # Calling float64(args, kwargs) (line 1874)
    float64_call_result_498037 = invoke(stypy.reporting.localization.Localization(__file__, 1874, 19), float64_498034, *[int_498035], **kwargs_498036)
    
    # Assigning a type to the variable 'vals' (line 1874)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1874, 12), 'vals', float64_call_result_498037)
    # SSA join for if statement (line 1873)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1871)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'vals' (line 1875)
    vals_498038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1875, 15), 'vals')
    # Assigning a type to the variable 'stypy_return_type' (line 1875)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1875, 8), 'stypy_return_type', vals_498038)
    # SSA join for if statement (line 1860)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'perm(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'perm' in the type store
    # Getting the type of 'stypy_return_type' (line 1824)
    stypy_return_type_498039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_498039)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'perm'
    return stypy_return_type_498039

# Assigning a type to the variable 'perm' (line 1824)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1824, 0), 'perm', perm)

@norecursion
def _range_prod(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_range_prod'
    module_type_store = module_type_store.open_function_context('_range_prod', 1879, 0, False)
    
    # Passed parameters checking function
    _range_prod.stypy_localization = localization
    _range_prod.stypy_type_of_self = None
    _range_prod.stypy_type_store = module_type_store
    _range_prod.stypy_function_name = '_range_prod'
    _range_prod.stypy_param_names_list = ['lo', 'hi']
    _range_prod.stypy_varargs_param_name = None
    _range_prod.stypy_kwargs_param_name = None
    _range_prod.stypy_call_defaults = defaults
    _range_prod.stypy_call_varargs = varargs
    _range_prod.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_range_prod', ['lo', 'hi'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_range_prod', localization, ['lo', 'hi'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_range_prod(...)' code ##################

    str_498040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1889, (-1)), 'str', '\n    Product of a range of numbers.\n\n    Returns the product of\n    lo * (lo+1) * (lo+2) * ... * (hi-2) * (hi-1) * hi\n    = hi! / (lo-1)!\n\n    Breaks into smaller products first for speed:\n    _range_prod(2, 9) = ((2*3)*(4*5))*((6*7)*(8*9))\n    ')
    
    
    # Getting the type of 'lo' (line 1890)
    lo_498041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 7), 'lo')
    int_498042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1890, 12), 'int')
    # Applying the binary operator '+' (line 1890)
    result_add_498043 = python_operator(stypy.reporting.localization.Localization(__file__, 1890, 7), '+', lo_498041, int_498042)
    
    # Getting the type of 'hi' (line 1890)
    hi_498044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 16), 'hi')
    # Applying the binary operator '<' (line 1890)
    result_lt_498045 = python_operator(stypy.reporting.localization.Localization(__file__, 1890, 7), '<', result_add_498043, hi_498044)
    
    # Testing the type of an if condition (line 1890)
    if_condition_498046 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1890, 4), result_lt_498045)
    # Assigning a type to the variable 'if_condition_498046' (line 1890)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1890, 4), 'if_condition_498046', if_condition_498046)
    # SSA begins for if statement (line 1890)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1891):
    
    # Assigning a BinOp to a Name (line 1891):
    # Getting the type of 'hi' (line 1891)
    hi_498047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1891, 15), 'hi')
    # Getting the type of 'lo' (line 1891)
    lo_498048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1891, 20), 'lo')
    # Applying the binary operator '+' (line 1891)
    result_add_498049 = python_operator(stypy.reporting.localization.Localization(__file__, 1891, 15), '+', hi_498047, lo_498048)
    
    int_498050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1891, 27), 'int')
    # Applying the binary operator '//' (line 1891)
    result_floordiv_498051 = python_operator(stypy.reporting.localization.Localization(__file__, 1891, 14), '//', result_add_498049, int_498050)
    
    # Assigning a type to the variable 'mid' (line 1891)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1891, 8), 'mid', result_floordiv_498051)
    
    # Call to _range_prod(...): (line 1892)
    # Processing the call arguments (line 1892)
    # Getting the type of 'lo' (line 1892)
    lo_498053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 27), 'lo', False)
    # Getting the type of 'mid' (line 1892)
    mid_498054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 31), 'mid', False)
    # Processing the call keyword arguments (line 1892)
    kwargs_498055 = {}
    # Getting the type of '_range_prod' (line 1892)
    _range_prod_498052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 15), '_range_prod', False)
    # Calling _range_prod(args, kwargs) (line 1892)
    _range_prod_call_result_498056 = invoke(stypy.reporting.localization.Localization(__file__, 1892, 15), _range_prod_498052, *[lo_498053, mid_498054], **kwargs_498055)
    
    
    # Call to _range_prod(...): (line 1892)
    # Processing the call arguments (line 1892)
    # Getting the type of 'mid' (line 1892)
    mid_498058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 50), 'mid', False)
    int_498059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1892, 56), 'int')
    # Applying the binary operator '+' (line 1892)
    result_add_498060 = python_operator(stypy.reporting.localization.Localization(__file__, 1892, 50), '+', mid_498058, int_498059)
    
    # Getting the type of 'hi' (line 1892)
    hi_498061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 59), 'hi', False)
    # Processing the call keyword arguments (line 1892)
    kwargs_498062 = {}
    # Getting the type of '_range_prod' (line 1892)
    _range_prod_498057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 38), '_range_prod', False)
    # Calling _range_prod(args, kwargs) (line 1892)
    _range_prod_call_result_498063 = invoke(stypy.reporting.localization.Localization(__file__, 1892, 38), _range_prod_498057, *[result_add_498060, hi_498061], **kwargs_498062)
    
    # Applying the binary operator '*' (line 1892)
    result_mul_498064 = python_operator(stypy.reporting.localization.Localization(__file__, 1892, 15), '*', _range_prod_call_result_498056, _range_prod_call_result_498063)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1892)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'stypy_return_type', result_mul_498064)
    # SSA join for if statement (line 1890)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'lo' (line 1893)
    lo_498065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1893, 7), 'lo')
    # Getting the type of 'hi' (line 1893)
    hi_498066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1893, 13), 'hi')
    # Applying the binary operator '==' (line 1893)
    result_eq_498067 = python_operator(stypy.reporting.localization.Localization(__file__, 1893, 7), '==', lo_498065, hi_498066)
    
    # Testing the type of an if condition (line 1893)
    if_condition_498068 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1893, 4), result_eq_498067)
    # Assigning a type to the variable 'if_condition_498068' (line 1893)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1893, 4), 'if_condition_498068', if_condition_498068)
    # SSA begins for if statement (line 1893)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'lo' (line 1894)
    lo_498069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 15), 'lo')
    # Assigning a type to the variable 'stypy_return_type' (line 1894)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1894, 8), 'stypy_return_type', lo_498069)
    # SSA join for if statement (line 1893)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'lo' (line 1895)
    lo_498070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 11), 'lo')
    # Getting the type of 'hi' (line 1895)
    hi_498071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 16), 'hi')
    # Applying the binary operator '*' (line 1895)
    result_mul_498072 = python_operator(stypy.reporting.localization.Localization(__file__, 1895, 11), '*', lo_498070, hi_498071)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1895)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1895, 4), 'stypy_return_type', result_mul_498072)
    
    # ################# End of '_range_prod(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_range_prod' in the type store
    # Getting the type of 'stypy_return_type' (line 1879)
    stypy_return_type_498073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_498073)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_range_prod'
    return stypy_return_type_498073

# Assigning a type to the variable '_range_prod' (line 1879)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1879, 0), '_range_prod', _range_prod)

@norecursion
def factorial(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1898)
    False_498074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 23), 'False')
    defaults = [False_498074]
    # Create a new context for function 'factorial'
    module_type_store = module_type_store.open_function_context('factorial', 1898, 0, False)
    
    # Passed parameters checking function
    factorial.stypy_localization = localization
    factorial.stypy_type_of_self = None
    factorial.stypy_type_store = module_type_store
    factorial.stypy_function_name = 'factorial'
    factorial.stypy_param_names_list = ['n', 'exact']
    factorial.stypy_varargs_param_name = None
    factorial.stypy_kwargs_param_name = None
    factorial.stypy_call_defaults = defaults
    factorial.stypy_call_varargs = varargs
    factorial.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'factorial', ['n', 'exact'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'factorial', localization, ['n', 'exact'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'factorial(...)' code ##################

    str_498075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1944, (-1)), 'str', '\n    The factorial of a number or array of numbers.\n\n    The factorial of non-negative integer `n` is the product of all\n    positive integers less than or equal to `n`::\n\n        n! = n * (n - 1) * (n - 2) * ... * 1\n\n    Parameters\n    ----------\n    n : int or array_like of ints\n        Input values.  If ``n < 0``, the return value is 0.\n    exact : bool, optional\n        If True, calculate the answer exactly using long integer arithmetic.\n        If False, result is approximated in floating point rapidly using the\n        `gamma` function.\n        Default is False.\n\n    Returns\n    -------\n    nf : float or int or ndarray\n        Factorial of `n`, as integer or float depending on `exact`.\n\n    Notes\n    -----\n    For arrays with ``exact=True``, the factorial is computed only once, for\n    the largest input, with each other result computed in the process.\n    The output dtype is increased to ``int64`` or ``object`` if necessary.\n\n    With ``exact=False`` the factorial is approximated using the gamma\n    function:\n\n    .. math:: n! = \\Gamma(n+1)\n\n    Examples\n    --------\n    >>> from scipy.special import factorial\n    >>> arr = np.array([3, 4, 5])\n    >>> factorial(arr, exact=False)\n    array([   6.,   24.,  120.])\n    >>> factorial(arr, exact=True)\n    array([  6,  24, 120])\n    >>> factorial(5, exact=True)\n    120L\n\n    ')
    
    # Getting the type of 'exact' (line 1945)
    exact_498076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 7), 'exact')
    # Testing the type of an if condition (line 1945)
    if_condition_498077 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1945, 4), exact_498076)
    # Assigning a type to the variable 'if_condition_498077' (line 1945)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1945, 4), 'if_condition_498077', if_condition_498077)
    # SSA begins for if statement (line 1945)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Call to ndim(...): (line 1946)
    # Processing the call arguments (line 1946)
    # Getting the type of 'n' (line 1946)
    n_498080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 19), 'n', False)
    # Processing the call keyword arguments (line 1946)
    kwargs_498081 = {}
    # Getting the type of 'np' (line 1946)
    np_498078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 11), 'np', False)
    # Obtaining the member 'ndim' of a type (line 1946)
    ndim_498079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1946, 11), np_498078, 'ndim')
    # Calling ndim(args, kwargs) (line 1946)
    ndim_call_result_498082 = invoke(stypy.reporting.localization.Localization(__file__, 1946, 11), ndim_498079, *[n_498080], **kwargs_498081)
    
    int_498083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1946, 25), 'int')
    # Applying the binary operator '==' (line 1946)
    result_eq_498084 = python_operator(stypy.reporting.localization.Localization(__file__, 1946, 11), '==', ndim_call_result_498082, int_498083)
    
    # Testing the type of an if condition (line 1946)
    if_condition_498085 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1946, 8), result_eq_498084)
    # Assigning a type to the variable 'if_condition_498085' (line 1946)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1946, 8), 'if_condition_498085', if_condition_498085)
    # SSA begins for if statement (line 1946)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'n' (line 1947)
    n_498086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 24), 'n')
    int_498087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1947, 28), 'int')
    # Applying the binary operator '<' (line 1947)
    result_lt_498088 = python_operator(stypy.reporting.localization.Localization(__file__, 1947, 24), '<', n_498086, int_498087)
    
    # Testing the type of an if expression (line 1947)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1947, 19), result_lt_498088)
    # SSA begins for if expression (line 1947)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    int_498089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1947, 19), 'int')
    # SSA branch for the else part of an if expression (line 1947)
    module_type_store.open_ssa_branch('if expression else')
    
    # Call to factorial(...): (line 1947)
    # Processing the call arguments (line 1947)
    # Getting the type of 'n' (line 1947)
    n_498092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 50), 'n', False)
    # Processing the call keyword arguments (line 1947)
    kwargs_498093 = {}
    # Getting the type of 'math' (line 1947)
    math_498090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 35), 'math', False)
    # Obtaining the member 'factorial' of a type (line 1947)
    factorial_498091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1947, 35), math_498090, 'factorial')
    # Calling factorial(args, kwargs) (line 1947)
    factorial_call_result_498094 = invoke(stypy.reporting.localization.Localization(__file__, 1947, 35), factorial_498091, *[n_498092], **kwargs_498093)
    
    # SSA join for if expression (line 1947)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_498095 = union_type.UnionType.add(int_498089, factorial_call_result_498094)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1947)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1947, 12), 'stypy_return_type', if_exp_498095)
    # SSA branch for the else part of an if statement (line 1946)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1949):
    
    # Assigning a Call to a Name (line 1949):
    
    # Call to asarray(...): (line 1949)
    # Processing the call arguments (line 1949)
    # Getting the type of 'n' (line 1949)
    n_498097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 24), 'n', False)
    # Processing the call keyword arguments (line 1949)
    kwargs_498098 = {}
    # Getting the type of 'asarray' (line 1949)
    asarray_498096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 16), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1949)
    asarray_call_result_498099 = invoke(stypy.reporting.localization.Localization(__file__, 1949, 16), asarray_498096, *[n_498097], **kwargs_498098)
    
    # Assigning a type to the variable 'n' (line 1949)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1949, 12), 'n', asarray_call_result_498099)
    
    # Assigning a Call to a Name (line 1950):
    
    # Assigning a Call to a Name (line 1950):
    
    # Call to astype(...): (line 1950)
    # Processing the call arguments (line 1950)
    # Getting the type of 'object' (line 1950)
    object_498106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1950, 37), 'object', False)
    # Processing the call keyword arguments (line 1950)
    kwargs_498107 = {}
    
    # Call to unique(...): (line 1950)
    # Processing the call arguments (line 1950)
    # Getting the type of 'n' (line 1950)
    n_498102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1950, 27), 'n', False)
    # Processing the call keyword arguments (line 1950)
    kwargs_498103 = {}
    # Getting the type of 'np' (line 1950)
    np_498100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1950, 17), 'np', False)
    # Obtaining the member 'unique' of a type (line 1950)
    unique_498101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1950, 17), np_498100, 'unique')
    # Calling unique(args, kwargs) (line 1950)
    unique_call_result_498104 = invoke(stypy.reporting.localization.Localization(__file__, 1950, 17), unique_498101, *[n_498102], **kwargs_498103)
    
    # Obtaining the member 'astype' of a type (line 1950)
    astype_498105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1950, 17), unique_call_result_498104, 'astype')
    # Calling astype(args, kwargs) (line 1950)
    astype_call_result_498108 = invoke(stypy.reporting.localization.Localization(__file__, 1950, 17), astype_498105, *[object_498106], **kwargs_498107)
    
    # Assigning a type to the variable 'un' (line 1950)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1950, 12), 'un', astype_call_result_498108)
    
    
    
    # Obtaining the type of the subscript
    int_498109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1953, 18), 'int')
    # Getting the type of 'un' (line 1953)
    un_498110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1953, 15), 'un')
    # Obtaining the member '__getitem__' of a type (line 1953)
    getitem___498111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1953, 15), un_498110, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1953)
    subscript_call_result_498112 = invoke(stypy.reporting.localization.Localization(__file__, 1953, 15), getitem___498111, int_498109)
    
    int_498113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1953, 24), 'int')
    # Applying the binary operator '>' (line 1953)
    result_gt_498114 = python_operator(stypy.reporting.localization.Localization(__file__, 1953, 15), '>', subscript_call_result_498112, int_498113)
    
    # Testing the type of an if condition (line 1953)
    if_condition_498115 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1953, 12), result_gt_498114)
    # Assigning a type to the variable 'if_condition_498115' (line 1953)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1953, 12), 'if_condition_498115', if_condition_498115)
    # SSA begins for if statement (line 1953)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 1954):
    
    # Assigning a Name to a Name (line 1954):
    # Getting the type of 'object' (line 1954)
    object_498116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1954, 21), 'object')
    # Assigning a type to the variable 'dt' (line 1954)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1954, 16), 'dt', object_498116)
    # SSA branch for the else part of an if statement (line 1953)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Obtaining the type of the subscript
    int_498117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1955, 20), 'int')
    # Getting the type of 'un' (line 1955)
    un_498118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1955, 17), 'un')
    # Obtaining the member '__getitem__' of a type (line 1955)
    getitem___498119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1955, 17), un_498118, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1955)
    subscript_call_result_498120 = invoke(stypy.reporting.localization.Localization(__file__, 1955, 17), getitem___498119, int_498117)
    
    int_498121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1955, 26), 'int')
    # Applying the binary operator '>' (line 1955)
    result_gt_498122 = python_operator(stypy.reporting.localization.Localization(__file__, 1955, 17), '>', subscript_call_result_498120, int_498121)
    
    # Testing the type of an if condition (line 1955)
    if_condition_498123 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1955, 17), result_gt_498122)
    # Assigning a type to the variable 'if_condition_498123' (line 1955)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1955, 17), 'if_condition_498123', if_condition_498123)
    # SSA begins for if statement (line 1955)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 1956):
    
    # Assigning a Attribute to a Name (line 1956):
    # Getting the type of 'np' (line 1956)
    np_498124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 21), 'np')
    # Obtaining the member 'int64' of a type (line 1956)
    int64_498125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1956, 21), np_498124, 'int64')
    # Assigning a type to the variable 'dt' (line 1956)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1956, 16), 'dt', int64_498125)
    # SSA branch for the else part of an if statement (line 1955)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Attribute to a Name (line 1958):
    
    # Assigning a Attribute to a Name (line 1958):
    # Getting the type of 'np' (line 1958)
    np_498126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 21), 'np')
    # Obtaining the member 'int' of a type (line 1958)
    int_498127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1958, 21), np_498126, 'int')
    # Assigning a type to the variable 'dt' (line 1958)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1958, 16), 'dt', int_498127)
    # SSA join for if statement (line 1955)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1953)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1960):
    
    # Assigning a Call to a Name (line 1960):
    
    # Call to empty_like(...): (line 1960)
    # Processing the call arguments (line 1960)
    # Getting the type of 'n' (line 1960)
    n_498130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1960, 32), 'n', False)
    # Processing the call keyword arguments (line 1960)
    # Getting the type of 'dt' (line 1960)
    dt_498131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1960, 41), 'dt', False)
    keyword_498132 = dt_498131
    kwargs_498133 = {'dtype': keyword_498132}
    # Getting the type of 'np' (line 1960)
    np_498128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1960, 18), 'np', False)
    # Obtaining the member 'empty_like' of a type (line 1960)
    empty_like_498129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1960, 18), np_498128, 'empty_like')
    # Calling empty_like(args, kwargs) (line 1960)
    empty_like_call_result_498134 = invoke(stypy.reporting.localization.Localization(__file__, 1960, 18), empty_like_498129, *[n_498130], **kwargs_498133)
    
    # Assigning a type to the variable 'out' (line 1960)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1960, 12), 'out', empty_like_call_result_498134)
    
    # Assigning a Subscript to a Name (line 1963):
    
    # Assigning a Subscript to a Name (line 1963):
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'un' (line 1963)
    un_498135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 20), 'un')
    int_498136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1963, 25), 'int')
    # Applying the binary operator '>' (line 1963)
    result_gt_498137 = python_operator(stypy.reporting.localization.Localization(__file__, 1963, 20), '>', un_498135, int_498136)
    
    # Getting the type of 'un' (line 1963)
    un_498138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 17), 'un')
    # Obtaining the member '__getitem__' of a type (line 1963)
    getitem___498139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1963, 17), un_498138, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1963)
    subscript_call_result_498140 = invoke(stypy.reporting.localization.Localization(__file__, 1963, 17), getitem___498139, result_gt_498137)
    
    # Assigning a type to the variable 'un' (line 1963)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1963, 12), 'un', subscript_call_result_498140)
    
    # Assigning a Num to a Subscript (line 1964):
    
    # Assigning a Num to a Subscript (line 1964):
    int_498141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1964, 25), 'int')
    # Getting the type of 'out' (line 1964)
    out_498142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 12), 'out')
    
    # Getting the type of 'n' (line 1964)
    n_498143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 16), 'n')
    int_498144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1964, 20), 'int')
    # Applying the binary operator '<' (line 1964)
    result_lt_498145 = python_operator(stypy.reporting.localization.Localization(__file__, 1964, 16), '<', n_498143, int_498144)
    
    # Storing an element on a container (line 1964)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1964, 12), out_498142, (result_lt_498145, int_498141))
    
    # Assigning a Num to a Subscript (line 1965):
    
    # Assigning a Num to a Subscript (line 1965):
    int_498146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1965, 25), 'int')
    # Getting the type of 'out' (line 1965)
    out_498147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1965, 12), 'out')
    
    # Getting the type of 'n' (line 1965)
    n_498148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1965, 16), 'n')
    int_498149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1965, 20), 'int')
    # Applying the binary operator '<' (line 1965)
    result_lt_498150 = python_operator(stypy.reporting.localization.Localization(__file__, 1965, 16), '<', n_498148, int_498149)
    
    # Storing an element on a container (line 1965)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1965, 12), out_498147, (result_lt_498150, int_498146))
    
    # Getting the type of 'un' (line 1968)
    un_498151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1968, 15), 'un')
    # Obtaining the member 'size' of a type (line 1968)
    size_498152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1968, 15), un_498151, 'size')
    # Testing the type of an if condition (line 1968)
    if_condition_498153 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1968, 12), size_498152)
    # Assigning a type to the variable 'if_condition_498153' (line 1968)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1968, 12), 'if_condition_498153', if_condition_498153)
    # SSA begins for if statement (line 1968)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1969):
    
    # Assigning a Call to a Name (line 1969):
    
    # Call to factorial(...): (line 1969)
    # Processing the call arguments (line 1969)
    
    # Obtaining the type of the subscript
    int_498156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1969, 40), 'int')
    # Getting the type of 'un' (line 1969)
    un_498157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1969, 37), 'un', False)
    # Obtaining the member '__getitem__' of a type (line 1969)
    getitem___498158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1969, 37), un_498157, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1969)
    subscript_call_result_498159 = invoke(stypy.reporting.localization.Localization(__file__, 1969, 37), getitem___498158, int_498156)
    
    # Processing the call keyword arguments (line 1969)
    kwargs_498160 = {}
    # Getting the type of 'math' (line 1969)
    math_498154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1969, 22), 'math', False)
    # Obtaining the member 'factorial' of a type (line 1969)
    factorial_498155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1969, 22), math_498154, 'factorial')
    # Calling factorial(args, kwargs) (line 1969)
    factorial_call_result_498161 = invoke(stypy.reporting.localization.Localization(__file__, 1969, 22), factorial_498155, *[subscript_call_result_498159], **kwargs_498160)
    
    # Assigning a type to the variable 'val' (line 1969)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1969, 16), 'val', factorial_call_result_498161)
    
    # Assigning a Name to a Subscript (line 1970):
    
    # Assigning a Name to a Subscript (line 1970):
    # Getting the type of 'val' (line 1970)
    val_498162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 34), 'val')
    # Getting the type of 'out' (line 1970)
    out_498163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 16), 'out')
    
    # Getting the type of 'n' (line 1970)
    n_498164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 20), 'n')
    
    # Obtaining the type of the subscript
    int_498165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1970, 28), 'int')
    # Getting the type of 'un' (line 1970)
    un_498166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 25), 'un')
    # Obtaining the member '__getitem__' of a type (line 1970)
    getitem___498167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1970, 25), un_498166, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1970)
    subscript_call_result_498168 = invoke(stypy.reporting.localization.Localization(__file__, 1970, 25), getitem___498167, int_498165)
    
    # Applying the binary operator '==' (line 1970)
    result_eq_498169 = python_operator(stypy.reporting.localization.Localization(__file__, 1970, 20), '==', n_498164, subscript_call_result_498168)
    
    # Storing an element on a container (line 1970)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1970, 16), out_498163, (result_eq_498169, val_498162))
    
    
    # Call to xrange(...): (line 1971)
    # Processing the call arguments (line 1971)
    
    # Call to len(...): (line 1971)
    # Processing the call arguments (line 1971)
    # Getting the type of 'un' (line 1971)
    un_498172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 36), 'un', False)
    # Processing the call keyword arguments (line 1971)
    kwargs_498173 = {}
    # Getting the type of 'len' (line 1971)
    len_498171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 32), 'len', False)
    # Calling len(args, kwargs) (line 1971)
    len_call_result_498174 = invoke(stypy.reporting.localization.Localization(__file__, 1971, 32), len_498171, *[un_498172], **kwargs_498173)
    
    int_498175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1971, 42), 'int')
    # Applying the binary operator '-' (line 1971)
    result_sub_498176 = python_operator(stypy.reporting.localization.Localization(__file__, 1971, 32), '-', len_call_result_498174, int_498175)
    
    # Processing the call keyword arguments (line 1971)
    kwargs_498177 = {}
    # Getting the type of 'xrange' (line 1971)
    xrange_498170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 25), 'xrange', False)
    # Calling xrange(args, kwargs) (line 1971)
    xrange_call_result_498178 = invoke(stypy.reporting.localization.Localization(__file__, 1971, 25), xrange_498170, *[result_sub_498176], **kwargs_498177)
    
    # Testing the type of a for loop iterable (line 1971)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1971, 16), xrange_call_result_498178)
    # Getting the type of the for loop variable (line 1971)
    for_loop_var_498179 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1971, 16), xrange_call_result_498178)
    # Assigning a type to the variable 'i' (line 1971)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1971, 16), 'i', for_loop_var_498179)
    # SSA begins for a for statement (line 1971)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Name (line 1972):
    
    # Assigning a BinOp to a Name (line 1972):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1972)
    i_498180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 30), 'i')
    # Getting the type of 'un' (line 1972)
    un_498181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 27), 'un')
    # Obtaining the member '__getitem__' of a type (line 1972)
    getitem___498182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1972, 27), un_498181, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1972)
    subscript_call_result_498183 = invoke(stypy.reporting.localization.Localization(__file__, 1972, 27), getitem___498182, i_498180)
    
    int_498184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1972, 35), 'int')
    # Applying the binary operator '+' (line 1972)
    result_add_498185 = python_operator(stypy.reporting.localization.Localization(__file__, 1972, 27), '+', subscript_call_result_498183, int_498184)
    
    # Assigning a type to the variable 'prev' (line 1972)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1972, 20), 'prev', result_add_498185)
    
    # Assigning a Subscript to a Name (line 1973):
    
    # Assigning a Subscript to a Name (line 1973):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1973)
    i_498186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 33), 'i')
    int_498187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1973, 37), 'int')
    # Applying the binary operator '+' (line 1973)
    result_add_498188 = python_operator(stypy.reporting.localization.Localization(__file__, 1973, 33), '+', i_498186, int_498187)
    
    # Getting the type of 'un' (line 1973)
    un_498189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 30), 'un')
    # Obtaining the member '__getitem__' of a type (line 1973)
    getitem___498190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1973, 30), un_498189, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1973)
    subscript_call_result_498191 = invoke(stypy.reporting.localization.Localization(__file__, 1973, 30), getitem___498190, result_add_498188)
    
    # Assigning a type to the variable 'current' (line 1973)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 20), 'current', subscript_call_result_498191)
    
    # Getting the type of 'val' (line 1974)
    val_498192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 20), 'val')
    
    # Call to _range_prod(...): (line 1974)
    # Processing the call arguments (line 1974)
    # Getting the type of 'prev' (line 1974)
    prev_498194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 39), 'prev', False)
    # Getting the type of 'current' (line 1974)
    current_498195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 45), 'current', False)
    # Processing the call keyword arguments (line 1974)
    kwargs_498196 = {}
    # Getting the type of '_range_prod' (line 1974)
    _range_prod_498193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 27), '_range_prod', False)
    # Calling _range_prod(args, kwargs) (line 1974)
    _range_prod_call_result_498197 = invoke(stypy.reporting.localization.Localization(__file__, 1974, 27), _range_prod_498193, *[prev_498194, current_498195], **kwargs_498196)
    
    # Applying the binary operator '*=' (line 1974)
    result_imul_498198 = python_operator(stypy.reporting.localization.Localization(__file__, 1974, 20), '*=', val_498192, _range_prod_call_result_498197)
    # Assigning a type to the variable 'val' (line 1974)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1974, 20), 'val', result_imul_498198)
    
    
    # Assigning a Name to a Subscript (line 1975):
    
    # Assigning a Name to a Subscript (line 1975):
    # Getting the type of 'val' (line 1975)
    val_498199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1975, 40), 'val')
    # Getting the type of 'out' (line 1975)
    out_498200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1975, 20), 'out')
    
    # Getting the type of 'n' (line 1975)
    n_498201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1975, 24), 'n')
    # Getting the type of 'current' (line 1975)
    current_498202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1975, 29), 'current')
    # Applying the binary operator '==' (line 1975)
    result_eq_498203 = python_operator(stypy.reporting.localization.Localization(__file__, 1975, 24), '==', n_498201, current_498202)
    
    # Storing an element on a container (line 1975)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1975, 20), out_498200, (result_eq_498203, val_498199))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1968)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'out' (line 1976)
    out_498204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1976, 19), 'out')
    # Assigning a type to the variable 'stypy_return_type' (line 1976)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1976, 12), 'stypy_return_type', out_498204)
    # SSA join for if statement (line 1946)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1945)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1978):
    
    # Assigning a Call to a Name (line 1978):
    
    # Call to asarray(...): (line 1978)
    # Processing the call arguments (line 1978)
    # Getting the type of 'n' (line 1978)
    n_498206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 20), 'n', False)
    # Processing the call keyword arguments (line 1978)
    kwargs_498207 = {}
    # Getting the type of 'asarray' (line 1978)
    asarray_498205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 12), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1978)
    asarray_call_result_498208 = invoke(stypy.reporting.localization.Localization(__file__, 1978, 12), asarray_498205, *[n_498206], **kwargs_498207)
    
    # Assigning a type to the variable 'n' (line 1978)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1978, 8), 'n', asarray_call_result_498208)
    
    # Assigning a Call to a Name (line 1979):
    
    # Assigning a Call to a Name (line 1979):
    
    # Call to gamma(...): (line 1979)
    # Processing the call arguments (line 1979)
    # Getting the type of 'n' (line 1979)
    n_498210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1979, 21), 'n', False)
    int_498211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1979, 25), 'int')
    # Applying the binary operator '+' (line 1979)
    result_add_498212 = python_operator(stypy.reporting.localization.Localization(__file__, 1979, 21), '+', n_498210, int_498211)
    
    # Processing the call keyword arguments (line 1979)
    kwargs_498213 = {}
    # Getting the type of 'gamma' (line 1979)
    gamma_498209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1979, 15), 'gamma', False)
    # Calling gamma(args, kwargs) (line 1979)
    gamma_call_result_498214 = invoke(stypy.reporting.localization.Localization(__file__, 1979, 15), gamma_498209, *[result_add_498212], **kwargs_498213)
    
    # Assigning a type to the variable 'vals' (line 1979)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1979, 8), 'vals', gamma_call_result_498214)
    
    # Call to where(...): (line 1980)
    # Processing the call arguments (line 1980)
    
    # Getting the type of 'n' (line 1980)
    n_498216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 21), 'n', False)
    int_498217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1980, 26), 'int')
    # Applying the binary operator '>=' (line 1980)
    result_ge_498218 = python_operator(stypy.reporting.localization.Localization(__file__, 1980, 21), '>=', n_498216, int_498217)
    
    # Getting the type of 'vals' (line 1980)
    vals_498219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 29), 'vals', False)
    int_498220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1980, 35), 'int')
    # Processing the call keyword arguments (line 1980)
    kwargs_498221 = {}
    # Getting the type of 'where' (line 1980)
    where_498215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 15), 'where', False)
    # Calling where(args, kwargs) (line 1980)
    where_call_result_498222 = invoke(stypy.reporting.localization.Localization(__file__, 1980, 15), where_498215, *[result_ge_498218, vals_498219, int_498220], **kwargs_498221)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1980)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1980, 8), 'stypy_return_type', where_call_result_498222)
    # SSA join for if statement (line 1945)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'factorial(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'factorial' in the type store
    # Getting the type of 'stypy_return_type' (line 1898)
    stypy_return_type_498223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_498223)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'factorial'
    return stypy_return_type_498223

# Assigning a type to the variable 'factorial' (line 1898)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1898, 0), 'factorial', factorial)

@norecursion
def factorial2(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1983)
    False_498224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 24), 'False')
    defaults = [False_498224]
    # Create a new context for function 'factorial2'
    module_type_store = module_type_store.open_function_context('factorial2', 1983, 0, False)
    
    # Passed parameters checking function
    factorial2.stypy_localization = localization
    factorial2.stypy_type_of_self = None
    factorial2.stypy_type_store = module_type_store
    factorial2.stypy_function_name = 'factorial2'
    factorial2.stypy_param_names_list = ['n', 'exact']
    factorial2.stypy_varargs_param_name = None
    factorial2.stypy_kwargs_param_name = None
    factorial2.stypy_call_defaults = defaults
    factorial2.stypy_call_varargs = varargs
    factorial2.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'factorial2', ['n', 'exact'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'factorial2', localization, ['n', 'exact'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'factorial2(...)' code ##################

    str_498225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2016, (-1)), 'str', 'Double factorial.\n\n    This is the factorial with every second value skipped.  E.g., ``7!! = 7 * 5\n    * 3 * 1``.  It can be approximated numerically as::\n\n      n!! = special.gamma(n/2+1)*2**((m+1)/2)/sqrt(pi)  n odd\n          = 2**(n/2) * (n/2)!                           n even\n\n    Parameters\n    ----------\n    n : int or array_like\n        Calculate ``n!!``.  Arrays are only supported with `exact` set\n        to False.  If ``n < 0``, the return value is 0.\n    exact : bool, optional\n        The result can be approximated rapidly using the gamma-formula\n        above (default).  If `exact` is set to True, calculate the\n        answer exactly using integer arithmetic.\n\n    Returns\n    -------\n    nff : float or int\n        Double factorial of `n`, as an int or a float depending on\n        `exact`.\n\n    Examples\n    --------\n    >>> from scipy.special import factorial2\n    >>> factorial2(7, exact=False)\n    array(105.00000000000001)\n    >>> factorial2(7, exact=True)\n    105L\n\n    ')
    
    # Getting the type of 'exact' (line 2017)
    exact_498226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2017, 7), 'exact')
    # Testing the type of an if condition (line 2017)
    if_condition_498227 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2017, 4), exact_498226)
    # Assigning a type to the variable 'if_condition_498227' (line 2017)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2017, 4), 'if_condition_498227', if_condition_498227)
    # SSA begins for if statement (line 2017)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'n' (line 2018)
    n_498228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2018, 11), 'n')
    int_498229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2018, 15), 'int')
    # Applying the binary operator '<' (line 2018)
    result_lt_498230 = python_operator(stypy.reporting.localization.Localization(__file__, 2018, 11), '<', n_498228, int_498229)
    
    # Testing the type of an if condition (line 2018)
    if_condition_498231 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2018, 8), result_lt_498230)
    # Assigning a type to the variable 'if_condition_498231' (line 2018)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2018, 8), 'if_condition_498231', if_condition_498231)
    # SSA begins for if statement (line 2018)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    int_498232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2019, 19), 'int')
    # Assigning a type to the variable 'stypy_return_type' (line 2019)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2019, 12), 'stypy_return_type', int_498232)
    # SSA join for if statement (line 2018)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 2020)
    n_498233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 11), 'n')
    int_498234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2020, 16), 'int')
    # Applying the binary operator '<=' (line 2020)
    result_le_498235 = python_operator(stypy.reporting.localization.Localization(__file__, 2020, 11), '<=', n_498233, int_498234)
    
    # Testing the type of an if condition (line 2020)
    if_condition_498236 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2020, 8), result_le_498235)
    # Assigning a type to the variable 'if_condition_498236' (line 2020)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2020, 8), 'if_condition_498236', if_condition_498236)
    # SSA begins for if statement (line 2020)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    int_498237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2021, 19), 'int')
    # Assigning a type to the variable 'stypy_return_type' (line 2021)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2021, 12), 'stypy_return_type', int_498237)
    # SSA join for if statement (line 2020)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 2022):
    
    # Assigning a Num to a Name (line 2022):
    int_498238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2022, 14), 'int')
    # Assigning a type to the variable 'val' (line 2022)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2022, 8), 'val', int_498238)
    
    
    # Call to xrange(...): (line 2023)
    # Processing the call arguments (line 2023)
    # Getting the type of 'n' (line 2023)
    n_498240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 24), 'n', False)
    int_498241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2023, 27), 'int')
    int_498242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2023, 30), 'int')
    # Processing the call keyword arguments (line 2023)
    kwargs_498243 = {}
    # Getting the type of 'xrange' (line 2023)
    xrange_498239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 17), 'xrange', False)
    # Calling xrange(args, kwargs) (line 2023)
    xrange_call_result_498244 = invoke(stypy.reporting.localization.Localization(__file__, 2023, 17), xrange_498239, *[n_498240, int_498241, int_498242], **kwargs_498243)
    
    # Testing the type of a for loop iterable (line 2023)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2023, 8), xrange_call_result_498244)
    # Getting the type of the for loop variable (line 2023)
    for_loop_var_498245 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2023, 8), xrange_call_result_498244)
    # Assigning a type to the variable 'k' (line 2023)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2023, 8), 'k', for_loop_var_498245)
    # SSA begins for a for statement (line 2023)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'val' (line 2024)
    val_498246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2024, 12), 'val')
    # Getting the type of 'k' (line 2024)
    k_498247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2024, 19), 'k')
    # Applying the binary operator '*=' (line 2024)
    result_imul_498248 = python_operator(stypy.reporting.localization.Localization(__file__, 2024, 12), '*=', val_498246, k_498247)
    # Assigning a type to the variable 'val' (line 2024)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2024, 12), 'val', result_imul_498248)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'val' (line 2025)
    val_498249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2025, 15), 'val')
    # Assigning a type to the variable 'stypy_return_type' (line 2025)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2025, 8), 'stypy_return_type', val_498249)
    # SSA branch for the else part of an if statement (line 2017)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2027):
    
    # Assigning a Call to a Name (line 2027):
    
    # Call to asarray(...): (line 2027)
    # Processing the call arguments (line 2027)
    # Getting the type of 'n' (line 2027)
    n_498251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2027, 20), 'n', False)
    # Processing the call keyword arguments (line 2027)
    kwargs_498252 = {}
    # Getting the type of 'asarray' (line 2027)
    asarray_498250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2027, 12), 'asarray', False)
    # Calling asarray(args, kwargs) (line 2027)
    asarray_call_result_498253 = invoke(stypy.reporting.localization.Localization(__file__, 2027, 12), asarray_498250, *[n_498251], **kwargs_498252)
    
    # Assigning a type to the variable 'n' (line 2027)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2027, 8), 'n', asarray_call_result_498253)
    
    # Assigning a Call to a Name (line 2028):
    
    # Assigning a Call to a Name (line 2028):
    
    # Call to zeros(...): (line 2028)
    # Processing the call arguments (line 2028)
    # Getting the type of 'n' (line 2028)
    n_498255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2028, 21), 'n', False)
    # Obtaining the member 'shape' of a type (line 2028)
    shape_498256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2028, 21), n_498255, 'shape')
    str_498257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2028, 30), 'str', 'd')
    # Processing the call keyword arguments (line 2028)
    kwargs_498258 = {}
    # Getting the type of 'zeros' (line 2028)
    zeros_498254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2028, 15), 'zeros', False)
    # Calling zeros(args, kwargs) (line 2028)
    zeros_call_result_498259 = invoke(stypy.reporting.localization.Localization(__file__, 2028, 15), zeros_498254, *[shape_498256, str_498257], **kwargs_498258)
    
    # Assigning a type to the variable 'vals' (line 2028)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2028, 8), 'vals', zeros_call_result_498259)
    
    # Assigning a BinOp to a Name (line 2029):
    
    # Assigning a BinOp to a Name (line 2029):
    # Getting the type of 'n' (line 2029)
    n_498260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2029, 17), 'n')
    int_498261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2029, 21), 'int')
    # Applying the binary operator '%' (line 2029)
    result_mod_498262 = python_operator(stypy.reporting.localization.Localization(__file__, 2029, 17), '%', n_498260, int_498261)
    
    
    # Getting the type of 'n' (line 2029)
    n_498263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2029, 27), 'n')
    int_498264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2029, 32), 'int')
    # Applying the binary operator '>=' (line 2029)
    result_ge_498265 = python_operator(stypy.reporting.localization.Localization(__file__, 2029, 27), '>=', n_498263, int_498264)
    
    # Applying the binary operator '&' (line 2029)
    result_and__498266 = python_operator(stypy.reporting.localization.Localization(__file__, 2029, 16), '&', result_mod_498262, result_ge_498265)
    
    # Assigning a type to the variable 'cond1' (line 2029)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2029, 8), 'cond1', result_and__498266)
    
    # Assigning a BinOp to a Name (line 2030):
    
    # Assigning a BinOp to a Name (line 2030):
    int_498267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2030, 17), 'int')
    # Getting the type of 'n' (line 2030)
    n_498268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2030, 20), 'n')
    int_498269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2030, 24), 'int')
    # Applying the binary operator '%' (line 2030)
    result_mod_498270 = python_operator(stypy.reporting.localization.Localization(__file__, 2030, 20), '%', n_498268, int_498269)
    
    # Applying the binary operator '-' (line 2030)
    result_sub_498271 = python_operator(stypy.reporting.localization.Localization(__file__, 2030, 17), '-', int_498267, result_mod_498270)
    
    
    # Getting the type of 'n' (line 2030)
    n_498272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2030, 31), 'n')
    int_498273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2030, 36), 'int')
    # Applying the binary operator '>=' (line 2030)
    result_ge_498274 = python_operator(stypy.reporting.localization.Localization(__file__, 2030, 31), '>=', n_498272, int_498273)
    
    # Applying the binary operator '&' (line 2030)
    result_and__498275 = python_operator(stypy.reporting.localization.Localization(__file__, 2030, 16), '&', result_sub_498271, result_ge_498274)
    
    # Assigning a type to the variable 'cond2' (line 2030)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2030, 8), 'cond2', result_and__498275)
    
    # Assigning a Call to a Name (line 2031):
    
    # Assigning a Call to a Name (line 2031):
    
    # Call to extract(...): (line 2031)
    # Processing the call arguments (line 2031)
    # Getting the type of 'cond1' (line 2031)
    cond1_498277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2031, 23), 'cond1', False)
    # Getting the type of 'n' (line 2031)
    n_498278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2031, 30), 'n', False)
    # Processing the call keyword arguments (line 2031)
    kwargs_498279 = {}
    # Getting the type of 'extract' (line 2031)
    extract_498276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2031, 15), 'extract', False)
    # Calling extract(args, kwargs) (line 2031)
    extract_call_result_498280 = invoke(stypy.reporting.localization.Localization(__file__, 2031, 15), extract_498276, *[cond1_498277, n_498278], **kwargs_498279)
    
    # Assigning a type to the variable 'oddn' (line 2031)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2031, 8), 'oddn', extract_call_result_498280)
    
    # Assigning a Call to a Name (line 2032):
    
    # Assigning a Call to a Name (line 2032):
    
    # Call to extract(...): (line 2032)
    # Processing the call arguments (line 2032)
    # Getting the type of 'cond2' (line 2032)
    cond2_498282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2032, 24), 'cond2', False)
    # Getting the type of 'n' (line 2032)
    n_498283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2032, 31), 'n', False)
    # Processing the call keyword arguments (line 2032)
    kwargs_498284 = {}
    # Getting the type of 'extract' (line 2032)
    extract_498281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2032, 16), 'extract', False)
    # Calling extract(args, kwargs) (line 2032)
    extract_call_result_498285 = invoke(stypy.reporting.localization.Localization(__file__, 2032, 16), extract_498281, *[cond2_498282, n_498283], **kwargs_498284)
    
    # Assigning a type to the variable 'evenn' (line 2032)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2032, 8), 'evenn', extract_call_result_498285)
    
    # Assigning a BinOp to a Name (line 2033):
    
    # Assigning a BinOp to a Name (line 2033):
    # Getting the type of 'oddn' (line 2033)
    oddn_498286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2033, 15), 'oddn')
    float_498287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2033, 22), 'float')
    # Applying the binary operator 'div' (line 2033)
    result_div_498288 = python_operator(stypy.reporting.localization.Localization(__file__, 2033, 15), 'div', oddn_498286, float_498287)
    
    # Assigning a type to the variable 'nd2o' (line 2033)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2033, 8), 'nd2o', result_div_498288)
    
    # Assigning a BinOp to a Name (line 2034):
    
    # Assigning a BinOp to a Name (line 2034):
    # Getting the type of 'evenn' (line 2034)
    evenn_498289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2034, 15), 'evenn')
    float_498290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2034, 23), 'float')
    # Applying the binary operator 'div' (line 2034)
    result_div_498291 = python_operator(stypy.reporting.localization.Localization(__file__, 2034, 15), 'div', evenn_498289, float_498290)
    
    # Assigning a type to the variable 'nd2e' (line 2034)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2034, 8), 'nd2e', result_div_498291)
    
    # Call to place(...): (line 2035)
    # Processing the call arguments (line 2035)
    # Getting the type of 'vals' (line 2035)
    vals_498293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2035, 14), 'vals', False)
    # Getting the type of 'cond1' (line 2035)
    cond1_498294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2035, 20), 'cond1', False)
    
    # Call to gamma(...): (line 2035)
    # Processing the call arguments (line 2035)
    # Getting the type of 'nd2o' (line 2035)
    nd2o_498296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2035, 33), 'nd2o', False)
    int_498297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2035, 40), 'int')
    # Applying the binary operator '+' (line 2035)
    result_add_498298 = python_operator(stypy.reporting.localization.Localization(__file__, 2035, 33), '+', nd2o_498296, int_498297)
    
    # Processing the call keyword arguments (line 2035)
    kwargs_498299 = {}
    # Getting the type of 'gamma' (line 2035)
    gamma_498295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2035, 27), 'gamma', False)
    # Calling gamma(args, kwargs) (line 2035)
    gamma_call_result_498300 = invoke(stypy.reporting.localization.Localization(__file__, 2035, 27), gamma_498295, *[result_add_498298], **kwargs_498299)
    
    
    # Call to sqrt(...): (line 2035)
    # Processing the call arguments (line 2035)
    # Getting the type of 'pi' (line 2035)
    pi_498302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2035, 50), 'pi', False)
    # Processing the call keyword arguments (line 2035)
    kwargs_498303 = {}
    # Getting the type of 'sqrt' (line 2035)
    sqrt_498301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2035, 45), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 2035)
    sqrt_call_result_498304 = invoke(stypy.reporting.localization.Localization(__file__, 2035, 45), sqrt_498301, *[pi_498302], **kwargs_498303)
    
    # Applying the binary operator 'div' (line 2035)
    result_div_498305 = python_operator(stypy.reporting.localization.Localization(__file__, 2035, 27), 'div', gamma_call_result_498300, sqrt_call_result_498304)
    
    
    # Call to pow(...): (line 2035)
    # Processing the call arguments (line 2035)
    float_498307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2035, 60), 'float')
    # Getting the type of 'nd2o' (line 2035)
    nd2o_498308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2035, 65), 'nd2o', False)
    float_498309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2035, 72), 'float')
    # Applying the binary operator '+' (line 2035)
    result_add_498310 = python_operator(stypy.reporting.localization.Localization(__file__, 2035, 65), '+', nd2o_498308, float_498309)
    
    # Processing the call keyword arguments (line 2035)
    kwargs_498311 = {}
    # Getting the type of 'pow' (line 2035)
    pow_498306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2035, 56), 'pow', False)
    # Calling pow(args, kwargs) (line 2035)
    pow_call_result_498312 = invoke(stypy.reporting.localization.Localization(__file__, 2035, 56), pow_498306, *[float_498307, result_add_498310], **kwargs_498311)
    
    # Applying the binary operator '*' (line 2035)
    result_mul_498313 = python_operator(stypy.reporting.localization.Localization(__file__, 2035, 54), '*', result_div_498305, pow_call_result_498312)
    
    # Processing the call keyword arguments (line 2035)
    kwargs_498314 = {}
    # Getting the type of 'place' (line 2035)
    place_498292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2035, 8), 'place', False)
    # Calling place(args, kwargs) (line 2035)
    place_call_result_498315 = invoke(stypy.reporting.localization.Localization(__file__, 2035, 8), place_498292, *[vals_498293, cond1_498294, result_mul_498313], **kwargs_498314)
    
    
    # Call to place(...): (line 2036)
    # Processing the call arguments (line 2036)
    # Getting the type of 'vals' (line 2036)
    vals_498317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2036, 14), 'vals', False)
    # Getting the type of 'cond2' (line 2036)
    cond2_498318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2036, 20), 'cond2', False)
    
    # Call to gamma(...): (line 2036)
    # Processing the call arguments (line 2036)
    # Getting the type of 'nd2e' (line 2036)
    nd2e_498320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2036, 33), 'nd2e', False)
    int_498321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2036, 40), 'int')
    # Applying the binary operator '+' (line 2036)
    result_add_498322 = python_operator(stypy.reporting.localization.Localization(__file__, 2036, 33), '+', nd2e_498320, int_498321)
    
    # Processing the call keyword arguments (line 2036)
    kwargs_498323 = {}
    # Getting the type of 'gamma' (line 2036)
    gamma_498319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2036, 27), 'gamma', False)
    # Calling gamma(args, kwargs) (line 2036)
    gamma_call_result_498324 = invoke(stypy.reporting.localization.Localization(__file__, 2036, 27), gamma_498319, *[result_add_498322], **kwargs_498323)
    
    
    # Call to pow(...): (line 2036)
    # Processing the call arguments (line 2036)
    float_498326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2036, 49), 'float')
    # Getting the type of 'nd2e' (line 2036)
    nd2e_498327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2036, 54), 'nd2e', False)
    # Processing the call keyword arguments (line 2036)
    kwargs_498328 = {}
    # Getting the type of 'pow' (line 2036)
    pow_498325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2036, 45), 'pow', False)
    # Calling pow(args, kwargs) (line 2036)
    pow_call_result_498329 = invoke(stypy.reporting.localization.Localization(__file__, 2036, 45), pow_498325, *[float_498326, nd2e_498327], **kwargs_498328)
    
    # Applying the binary operator '*' (line 2036)
    result_mul_498330 = python_operator(stypy.reporting.localization.Localization(__file__, 2036, 27), '*', gamma_call_result_498324, pow_call_result_498329)
    
    # Processing the call keyword arguments (line 2036)
    kwargs_498331 = {}
    # Getting the type of 'place' (line 2036)
    place_498316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2036, 8), 'place', False)
    # Calling place(args, kwargs) (line 2036)
    place_call_result_498332 = invoke(stypy.reporting.localization.Localization(__file__, 2036, 8), place_498316, *[vals_498317, cond2_498318, result_mul_498330], **kwargs_498331)
    
    # Getting the type of 'vals' (line 2037)
    vals_498333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2037, 15), 'vals')
    # Assigning a type to the variable 'stypy_return_type' (line 2037)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2037, 8), 'stypy_return_type', vals_498333)
    # SSA join for if statement (line 2017)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'factorial2(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'factorial2' in the type store
    # Getting the type of 'stypy_return_type' (line 1983)
    stypy_return_type_498334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_498334)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'factorial2'
    return stypy_return_type_498334

# Assigning a type to the variable 'factorial2' (line 1983)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1983, 0), 'factorial2', factorial2)

@norecursion
def factorialk(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 2040)
    True_498335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2040, 27), 'True')
    defaults = [True_498335]
    # Create a new context for function 'factorialk'
    module_type_store = module_type_store.open_function_context('factorialk', 2040, 0, False)
    
    # Passed parameters checking function
    factorialk.stypy_localization = localization
    factorialk.stypy_type_of_self = None
    factorialk.stypy_type_store = module_type_store
    factorialk.stypy_function_name = 'factorialk'
    factorialk.stypy_param_names_list = ['n', 'k', 'exact']
    factorialk.stypy_varargs_param_name = None
    factorialk.stypy_kwargs_param_name = None
    factorialk.stypy_call_defaults = defaults
    factorialk.stypy_call_varargs = varargs
    factorialk.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'factorialk', ['n', 'k', 'exact'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'factorialk', localization, ['n', 'k', 'exact'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'factorialk(...)' code ##################

    str_498336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2081, (-1)), 'str', 'Multifactorial of n of order k, n(!!...!).\n\n    This is the multifactorial of n skipping k values.  For example,\n\n      factorialk(17, 4) = 17!!!! = 17 * 13 * 9 * 5 * 1\n\n    In particular, for any integer ``n``, we have\n\n      factorialk(n, 1) = factorial(n)\n\n      factorialk(n, 2) = factorial2(n)\n\n    Parameters\n    ----------\n    n : int\n        Calculate multifactorial. If `n` < 0, the return value is 0.\n    k : int\n        Order of multifactorial.\n    exact : bool, optional\n        If exact is set to True, calculate the answer exactly using\n        integer arithmetic.\n\n    Returns\n    -------\n    val : int\n        Multifactorial of `n`.\n\n    Raises\n    ------\n    NotImplementedError\n        Raises when exact is False\n\n    Examples\n    --------\n    >>> from scipy.special import factorialk\n    >>> factorialk(5, 1, exact=True)\n    120L\n    >>> factorialk(5, 3, exact=True)\n    10L\n\n    ')
    
    # Getting the type of 'exact' (line 2082)
    exact_498337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2082, 7), 'exact')
    # Testing the type of an if condition (line 2082)
    if_condition_498338 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2082, 4), exact_498337)
    # Assigning a type to the variable 'if_condition_498338' (line 2082)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2082, 4), 'if_condition_498338', if_condition_498338)
    # SSA begins for if statement (line 2082)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'n' (line 2083)
    n_498339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 11), 'n')
    int_498340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2083, 15), 'int')
    # Getting the type of 'k' (line 2083)
    k_498341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2083, 17), 'k')
    # Applying the binary operator '-' (line 2083)
    result_sub_498342 = python_operator(stypy.reporting.localization.Localization(__file__, 2083, 15), '-', int_498340, k_498341)
    
    # Applying the binary operator '<' (line 2083)
    result_lt_498343 = python_operator(stypy.reporting.localization.Localization(__file__, 2083, 11), '<', n_498339, result_sub_498342)
    
    # Testing the type of an if condition (line 2083)
    if_condition_498344 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2083, 8), result_lt_498343)
    # Assigning a type to the variable 'if_condition_498344' (line 2083)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 8), 'if_condition_498344', if_condition_498344)
    # SSA begins for if statement (line 2083)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    int_498345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2084, 19), 'int')
    # Assigning a type to the variable 'stypy_return_type' (line 2084)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2084, 12), 'stypy_return_type', int_498345)
    # SSA join for if statement (line 2083)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 2085)
    n_498346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 11), 'n')
    int_498347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2085, 16), 'int')
    # Applying the binary operator '<=' (line 2085)
    result_le_498348 = python_operator(stypy.reporting.localization.Localization(__file__, 2085, 11), '<=', n_498346, int_498347)
    
    # Testing the type of an if condition (line 2085)
    if_condition_498349 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2085, 8), result_le_498348)
    # Assigning a type to the variable 'if_condition_498349' (line 2085)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2085, 8), 'if_condition_498349', if_condition_498349)
    # SSA begins for if statement (line 2085)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    int_498350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2086, 19), 'int')
    # Assigning a type to the variable 'stypy_return_type' (line 2086)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2086, 12), 'stypy_return_type', int_498350)
    # SSA join for if statement (line 2085)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 2087):
    
    # Assigning a Num to a Name (line 2087):
    int_498351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2087, 14), 'int')
    # Assigning a type to the variable 'val' (line 2087)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2087, 8), 'val', int_498351)
    
    
    # Call to xrange(...): (line 2088)
    # Processing the call arguments (line 2088)
    # Getting the type of 'n' (line 2088)
    n_498353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 24), 'n', False)
    int_498354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2088, 27), 'int')
    
    # Getting the type of 'k' (line 2088)
    k_498355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 31), 'k', False)
    # Applying the 'usub' unary operator (line 2088)
    result___neg___498356 = python_operator(stypy.reporting.localization.Localization(__file__, 2088, 30), 'usub', k_498355)
    
    # Processing the call keyword arguments (line 2088)
    kwargs_498357 = {}
    # Getting the type of 'xrange' (line 2088)
    xrange_498352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 17), 'xrange', False)
    # Calling xrange(args, kwargs) (line 2088)
    xrange_call_result_498358 = invoke(stypy.reporting.localization.Localization(__file__, 2088, 17), xrange_498352, *[n_498353, int_498354, result___neg___498356], **kwargs_498357)
    
    # Testing the type of a for loop iterable (line 2088)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2088, 8), xrange_call_result_498358)
    # Getting the type of the for loop variable (line 2088)
    for_loop_var_498359 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2088, 8), xrange_call_result_498358)
    # Assigning a type to the variable 'j' (line 2088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2088, 8), 'j', for_loop_var_498359)
    # SSA begins for a for statement (line 2088)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Name (line 2089):
    
    # Assigning a BinOp to a Name (line 2089):
    # Getting the type of 'val' (line 2089)
    val_498360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 18), 'val')
    # Getting the type of 'j' (line 2089)
    j_498361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 22), 'j')
    # Applying the binary operator '*' (line 2089)
    result_mul_498362 = python_operator(stypy.reporting.localization.Localization(__file__, 2089, 18), '*', val_498360, j_498361)
    
    # Assigning a type to the variable 'val' (line 2089)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2089, 12), 'val', result_mul_498362)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'val' (line 2090)
    val_498363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2090, 15), 'val')
    # Assigning a type to the variable 'stypy_return_type' (line 2090)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2090, 8), 'stypy_return_type', val_498363)
    # SSA branch for the else part of an if statement (line 2082)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'NotImplementedError' (line 2092)
    NotImplementedError_498364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2092, 14), 'NotImplementedError')
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2092, 8), NotImplementedError_498364, 'raise parameter', BaseException)
    # SSA join for if statement (line 2082)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'factorialk(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'factorialk' in the type store
    # Getting the type of 'stypy_return_type' (line 2040)
    stypy_return_type_498365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2040, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_498365)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'factorialk'
    return stypy_return_type_498365

# Assigning a type to the variable 'factorialk' (line 2040)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2040, 0), 'factorialk', factorialk)

@norecursion
def zeta(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2095)
    None_498366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 14), 'None')
    # Getting the type of 'None' (line 2095)
    None_498367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 24), 'None')
    defaults = [None_498366, None_498367]
    # Create a new context for function 'zeta'
    module_type_store = module_type_store.open_function_context('zeta', 2095, 0, False)
    
    # Passed parameters checking function
    zeta.stypy_localization = localization
    zeta.stypy_type_of_self = None
    zeta.stypy_type_store = module_type_store
    zeta.stypy_function_name = 'zeta'
    zeta.stypy_param_names_list = ['x', 'q', 'out']
    zeta.stypy_varargs_param_name = None
    zeta.stypy_kwargs_param_name = None
    zeta.stypy_call_defaults = defaults
    zeta.stypy_call_varargs = varargs
    zeta.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'zeta', ['x', 'q', 'out'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'zeta', localization, ['x', 'q', 'out'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'zeta(...)' code ##################

    str_498368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2120, (-1)), 'str', '\n    Riemann or Hurwitz zeta function.\n\n    Parameters\n    ----------\n    x : array_like of float\n        Input data, must be real\n    q : array_like of float, optional\n        Input data, must be real.  Defaults to Riemann zeta.\n    out : ndarray, optional\n        Output array for the computed values.\n\n    Notes\n    -----\n    The two-argument version is the Hurwitz zeta function:\n\n    .. math:: \\zeta(x, q) = \\sum_{k=0}^{\\infty} \\frac{1}{(k + q)^x},\n\n    Riemann zeta function corresponds to ``q = 1``.\n\n    See also\n    --------\n    zetac\n\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 2121)
    # Getting the type of 'q' (line 2121)
    q_498369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2121, 7), 'q')
    # Getting the type of 'None' (line 2121)
    None_498370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2121, 12), 'None')
    
    (may_be_498371, more_types_in_union_498372) = may_be_none(q_498369, None_498370)

    if may_be_498371:

        if more_types_in_union_498372:
            # Runtime conditional SSA (line 2121)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 2122):
        
        # Assigning a Num to a Name (line 2122):
        int_498373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2122, 12), 'int')
        # Assigning a type to the variable 'q' (line 2122)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2122, 8), 'q', int_498373)

        if more_types_in_union_498372:
            # SSA join for if statement (line 2121)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to _zeta(...): (line 2123)
    # Processing the call arguments (line 2123)
    # Getting the type of 'x' (line 2123)
    x_498375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2123, 17), 'x', False)
    # Getting the type of 'q' (line 2123)
    q_498376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2123, 20), 'q', False)
    # Getting the type of 'out' (line 2123)
    out_498377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2123, 23), 'out', False)
    # Processing the call keyword arguments (line 2123)
    kwargs_498378 = {}
    # Getting the type of '_zeta' (line 2123)
    _zeta_498374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2123, 11), '_zeta', False)
    # Calling _zeta(args, kwargs) (line 2123)
    _zeta_call_result_498379 = invoke(stypy.reporting.localization.Localization(__file__, 2123, 11), _zeta_498374, *[x_498375, q_498376, out_498377], **kwargs_498378)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2123)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2123, 4), 'stypy_return_type', _zeta_call_result_498379)
    
    # ################# End of 'zeta(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'zeta' in the type store
    # Getting the type of 'stypy_return_type' (line 2095)
    stypy_return_type_498380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_498380)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'zeta'
    return stypy_return_type_498380

# Assigning a type to the variable 'zeta' (line 2095)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2095, 0), 'zeta', zeta)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
