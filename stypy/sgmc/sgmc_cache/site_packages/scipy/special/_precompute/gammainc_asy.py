
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: Precompute coefficients of Temme's asymptotic expansion for gammainc.
3: 
4: This takes about 8 hours to run on a 2.3 GHz Macbook Pro with 4GB ram.
5: 
6: Sources:
7: [1] NIST, "Digital Library of Mathematical Functions",
8:     http://dlmf.nist.gov/
9: 
10: '''
11: from __future__ import division, print_function, absolute_import
12: 
13: import os
14: from scipy.special._precompute.utils import lagrange_inversion
15: 
16: try:
17:     import mpmath as mp
18: except ImportError:
19:     pass
20: 
21: 
22: def compute_a(n):
23:     '''a_k from DLMF 5.11.6'''
24:     a = [mp.sqrt(2)/2]
25:     for k in range(1, n):
26:         ak = a[-1]/k
27:         for j in range(1, len(a)):
28:             ak -= a[j]*a[-j]/(j + 1)
29:         ak /= a[0]*(1 + mp.mpf(1)/(k + 1))
30:         a.append(ak)
31:     return a
32: 
33: 
34: def compute_g(n):
35:     '''g_k from DLMF 5.11.3/5.11.5'''
36:     a = compute_a(2*n)
37:     g = []
38:     for k in range(n):
39:         g.append(mp.sqrt(2)*mp.rf(0.5, k)*a[2*k])
40:     return g
41: 
42: 
43: def eta(lam):
44:     '''Function from DLMF 8.12.1 shifted to be centered at 0.'''
45:     if lam > 0:
46:         return mp.sqrt(2*(lam - mp.log(lam + 1)))
47:     elif lam < 0:
48:         return -mp.sqrt(2*(lam - mp.log(lam + 1)))
49:     else:
50:         return 0
51: 
52: 
53: def compute_alpha(n):
54:     '''alpha_n from DLMF 8.12.13'''
55:     coeffs = mp.taylor(eta, 0, n - 1)
56:     return lagrange_inversion(coeffs)
57:     
58: 
59: def compute_d(K, N):
60:     '''d_{k, n} from DLMF 8.12.12'''
61:     M = N + 2*K
62:     d0 = [-mp.mpf(1)/3]
63:     alpha = compute_alpha(M + 2)
64:     for n in range(1, M):
65:         d0.append((n + 2)*alpha[n+2])
66:     d = [d0]
67:     g = compute_g(K)
68:     for k in range(1, K):
69:         dk = []
70:         for n in range(M - 2*k):
71:             dk.append((-1)**k*g[k]*d[0][n] + (n + 2)*d[k-1][n+2])
72:         d.append(dk)
73:     for k in range(K):
74:         d[k] = d[k][:N]
75:     return d
76: 
77: 
78: header = \
79: r'''/* This file was automatically generated by _precomp/gammainc.py.
80:  * Do not edit it manually!
81:  */
82: 
83: #ifndef IGAM_H
84: #define IGAM_H
85: 
86: #define K {}
87: #define N {}
88: 
89: double d[K][N] =
90: {{'''
91: 
92: footer = \
93: r'''
94: #endif
95: '''
96: 
97: def main():
98:     print(__doc__)
99:     K = 25
100:     N = 25
101:     with mp.workdps(50):
102:         d = compute_d(K, N)
103:     fn = os.path.join(os.path.dirname(__file__), '..', 'cephes', 'igam.h')
104:     with open(fn + '.new', 'w') as f:
105:         f.write(header.format(K, N))
106:         for k, row in enumerate(d):
107:             row = map(lambda x: mp.nstr(x, 17, min_fixed=0, max_fixed=0), row)
108:             f.write('{')
109:             f.write(", ".join(row))
110:             if k < K - 1:
111:                 f.write('},\n')
112:             else:
113:                 f.write('}};\n')
114:         f.write(footer)
115:     os.rename(fn + '.new', fn)
116: 
117: 
118: if __name__ == "__main__":
119:     main()
120: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

str_563649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 10, (-1)), 'str', '\nPrecompute coefficients of Temme\'s asymptotic expansion for gammainc.\n\nThis takes about 8 hours to run on a 2.3 GHz Macbook Pro with 4GB ram.\n\nSources:\n[1] NIST, "Digital Library of Mathematical Functions",\n    http://dlmf.nist.gov/\n\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 13, 0))

# 'import os' statement (line 13)
import os

import_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'os', os, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'from scipy.special._precompute.utils import lagrange_inversion' statement (line 14)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/special/_precompute/')
import_563650 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy.special._precompute.utils')

if (type(import_563650) is not StypyTypeError):

    if (import_563650 != 'pyd_module'):
        __import__(import_563650)
        sys_modules_563651 = sys.modules[import_563650]
        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy.special._precompute.utils', sys_modules_563651.module_type_store, module_type_store, ['lagrange_inversion'])
        nest_module(stypy.reporting.localization.Localization(__file__, 14, 0), __file__, sys_modules_563651, sys_modules_563651.module_type_store, module_type_store)
    else:
        from scipy.special._precompute.utils import lagrange_inversion

        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy.special._precompute.utils', None, module_type_store, ['lagrange_inversion'], [lagrange_inversion])

else:
    # Assigning a type to the variable 'scipy.special._precompute.utils' (line 14)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy.special._precompute.utils', import_563650)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/special/_precompute/')



# SSA begins for try-except statement (line 16)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 17, 4))

# 'import mpmath' statement (line 17)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/special/_precompute/')
import_563652 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 17, 4), 'mpmath')

if (type(import_563652) is not StypyTypeError):

    if (import_563652 != 'pyd_module'):
        __import__(import_563652)
        sys_modules_563653 = sys.modules[import_563652]
        import_module(stypy.reporting.localization.Localization(__file__, 17, 4), 'mp', sys_modules_563653.module_type_store, module_type_store)
    else:
        import mpmath as mp

        import_module(stypy.reporting.localization.Localization(__file__, 17, 4), 'mp', mpmath, module_type_store)

else:
    # Assigning a type to the variable 'mpmath' (line 17)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 17, 4), 'mpmath', import_563652)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/special/_precompute/')

# SSA branch for the except part of a try statement (line 16)
# SSA branch for the except 'ImportError' branch of a try statement (line 16)
module_type_store.open_ssa_branch('except')
pass
# SSA join for try-except statement (line 16)
module_type_store = module_type_store.join_ssa_context()


@norecursion
def compute_a(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'compute_a'
    module_type_store = module_type_store.open_function_context('compute_a', 22, 0, False)
    
    # Passed parameters checking function
    compute_a.stypy_localization = localization
    compute_a.stypy_type_of_self = None
    compute_a.stypy_type_store = module_type_store
    compute_a.stypy_function_name = 'compute_a'
    compute_a.stypy_param_names_list = ['n']
    compute_a.stypy_varargs_param_name = None
    compute_a.stypy_kwargs_param_name = None
    compute_a.stypy_call_defaults = defaults
    compute_a.stypy_call_varargs = varargs
    compute_a.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'compute_a', ['n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'compute_a', localization, ['n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'compute_a(...)' code ##################

    str_563654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, 4), 'str', 'a_k from DLMF 5.11.6')
    
    # Assigning a List to a Name (line 24):
    
    # Obtaining an instance of the builtin type 'list' (line 24)
    list_563655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 24, 8), 'list')
    # Adding type elements to the builtin type 'list' instance (line 24)
    # Adding element type (line 24)
    
    # Call to sqrt(...): (line 24)
    # Processing the call arguments (line 24)
    int_563658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 24, 17), 'int')
    # Processing the call keyword arguments (line 24)
    kwargs_563659 = {}
    # Getting the type of 'mp' (line 24)
    mp_563656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 24, 9), 'mp', False)
    # Obtaining the member 'sqrt' of a type (line 24)
    sqrt_563657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 24, 9), mp_563656, 'sqrt')
    # Calling sqrt(args, kwargs) (line 24)
    sqrt_call_result_563660 = invoke(stypy.reporting.localization.Localization(__file__, 24, 9), sqrt_563657, *[int_563658], **kwargs_563659)
    
    int_563661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 24, 20), 'int')
    # Applying the binary operator 'div' (line 24)
    result_div_563662 = python_operator(stypy.reporting.localization.Localization(__file__, 24, 9), 'div', sqrt_call_result_563660, int_563661)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 24, 8), list_563655, result_div_563662)
    
    # Assigning a type to the variable 'a' (line 24)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 24, 4), 'a', list_563655)
    
    
    # Call to range(...): (line 25)
    # Processing the call arguments (line 25)
    int_563664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, 19), 'int')
    # Getting the type of 'n' (line 25)
    n_563665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 25, 22), 'n', False)
    # Processing the call keyword arguments (line 25)
    kwargs_563666 = {}
    # Getting the type of 'range' (line 25)
    range_563663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 25, 13), 'range', False)
    # Calling range(args, kwargs) (line 25)
    range_call_result_563667 = invoke(stypy.reporting.localization.Localization(__file__, 25, 13), range_563663, *[int_563664, n_563665], **kwargs_563666)
    
    # Testing the type of a for loop iterable (line 25)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 25, 4), range_call_result_563667)
    # Getting the type of the for loop variable (line 25)
    for_loop_var_563668 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 25, 4), range_call_result_563667)
    # Assigning a type to the variable 'k' (line 25)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 25, 4), 'k', for_loop_var_563668)
    # SSA begins for a for statement (line 25)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Name (line 26):
    
    # Obtaining the type of the subscript
    int_563669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 15), 'int')
    # Getting the type of 'a' (line 26)
    a_563670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 26, 13), 'a')
    # Obtaining the member '__getitem__' of a type (line 26)
    getitem___563671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 26, 13), a_563670, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 26)
    subscript_call_result_563672 = invoke(stypy.reporting.localization.Localization(__file__, 26, 13), getitem___563671, int_563669)
    
    # Getting the type of 'k' (line 26)
    k_563673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 26, 19), 'k')
    # Applying the binary operator 'div' (line 26)
    result_div_563674 = python_operator(stypy.reporting.localization.Localization(__file__, 26, 13), 'div', subscript_call_result_563672, k_563673)
    
    # Assigning a type to the variable 'ak' (line 26)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 26, 8), 'ak', result_div_563674)
    
    
    # Call to range(...): (line 27)
    # Processing the call arguments (line 27)
    int_563676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 23), 'int')
    
    # Call to len(...): (line 27)
    # Processing the call arguments (line 27)
    # Getting the type of 'a' (line 27)
    a_563678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 27, 30), 'a', False)
    # Processing the call keyword arguments (line 27)
    kwargs_563679 = {}
    # Getting the type of 'len' (line 27)
    len_563677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 27, 26), 'len', False)
    # Calling len(args, kwargs) (line 27)
    len_call_result_563680 = invoke(stypy.reporting.localization.Localization(__file__, 27, 26), len_563677, *[a_563678], **kwargs_563679)
    
    # Processing the call keyword arguments (line 27)
    kwargs_563681 = {}
    # Getting the type of 'range' (line 27)
    range_563675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 27, 17), 'range', False)
    # Calling range(args, kwargs) (line 27)
    range_call_result_563682 = invoke(stypy.reporting.localization.Localization(__file__, 27, 17), range_563675, *[int_563676, len_call_result_563680], **kwargs_563681)
    
    # Testing the type of a for loop iterable (line 27)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 27, 8), range_call_result_563682)
    # Getting the type of the for loop variable (line 27)
    for_loop_var_563683 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 27, 8), range_call_result_563682)
    # Assigning a type to the variable 'j' (line 27)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 8), 'j', for_loop_var_563683)
    # SSA begins for a for statement (line 27)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'ak' (line 28)
    ak_563684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 28, 12), 'ak')
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 28)
    j_563685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 28, 20), 'j')
    # Getting the type of 'a' (line 28)
    a_563686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 28, 18), 'a')
    # Obtaining the member '__getitem__' of a type (line 28)
    getitem___563687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 28, 18), a_563686, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 28)
    subscript_call_result_563688 = invoke(stypy.reporting.localization.Localization(__file__, 28, 18), getitem___563687, j_563685)
    
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'j' (line 28)
    j_563689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 28, 26), 'j')
    # Applying the 'usub' unary operator (line 28)
    result___neg___563690 = python_operator(stypy.reporting.localization.Localization(__file__, 28, 25), 'usub', j_563689)
    
    # Getting the type of 'a' (line 28)
    a_563691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 28, 23), 'a')
    # Obtaining the member '__getitem__' of a type (line 28)
    getitem___563692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 28, 23), a_563691, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 28)
    subscript_call_result_563693 = invoke(stypy.reporting.localization.Localization(__file__, 28, 23), getitem___563692, result___neg___563690)
    
    # Applying the binary operator '*' (line 28)
    result_mul_563694 = python_operator(stypy.reporting.localization.Localization(__file__, 28, 18), '*', subscript_call_result_563688, subscript_call_result_563693)
    
    # Getting the type of 'j' (line 28)
    j_563695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 28, 30), 'j')
    int_563696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 34), 'int')
    # Applying the binary operator '+' (line 28)
    result_add_563697 = python_operator(stypy.reporting.localization.Localization(__file__, 28, 30), '+', j_563695, int_563696)
    
    # Applying the binary operator 'div' (line 28)
    result_div_563698 = python_operator(stypy.reporting.localization.Localization(__file__, 28, 28), 'div', result_mul_563694, result_add_563697)
    
    # Applying the binary operator '-=' (line 28)
    result_isub_563699 = python_operator(stypy.reporting.localization.Localization(__file__, 28, 12), '-=', ak_563684, result_div_563698)
    # Assigning a type to the variable 'ak' (line 28)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 12), 'ak', result_isub_563699)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'ak' (line 29)
    ak_563700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 29, 8), 'ak')
    
    # Obtaining the type of the subscript
    int_563701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 16), 'int')
    # Getting the type of 'a' (line 29)
    a_563702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 29, 14), 'a')
    # Obtaining the member '__getitem__' of a type (line 29)
    getitem___563703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 29, 14), a_563702, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 29)
    subscript_call_result_563704 = invoke(stypy.reporting.localization.Localization(__file__, 29, 14), getitem___563703, int_563701)
    
    int_563705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 20), 'int')
    
    # Call to mpf(...): (line 29)
    # Processing the call arguments (line 29)
    int_563708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 31), 'int')
    # Processing the call keyword arguments (line 29)
    kwargs_563709 = {}
    # Getting the type of 'mp' (line 29)
    mp_563706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 29, 24), 'mp', False)
    # Obtaining the member 'mpf' of a type (line 29)
    mpf_563707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 29, 24), mp_563706, 'mpf')
    # Calling mpf(args, kwargs) (line 29)
    mpf_call_result_563710 = invoke(stypy.reporting.localization.Localization(__file__, 29, 24), mpf_563707, *[int_563708], **kwargs_563709)
    
    # Getting the type of 'k' (line 29)
    k_563711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 29, 35), 'k')
    int_563712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 39), 'int')
    # Applying the binary operator '+' (line 29)
    result_add_563713 = python_operator(stypy.reporting.localization.Localization(__file__, 29, 35), '+', k_563711, int_563712)
    
    # Applying the binary operator 'div' (line 29)
    result_div_563714 = python_operator(stypy.reporting.localization.Localization(__file__, 29, 24), 'div', mpf_call_result_563710, result_add_563713)
    
    # Applying the binary operator '+' (line 29)
    result_add_563715 = python_operator(stypy.reporting.localization.Localization(__file__, 29, 20), '+', int_563705, result_div_563714)
    
    # Applying the binary operator '*' (line 29)
    result_mul_563716 = python_operator(stypy.reporting.localization.Localization(__file__, 29, 14), '*', subscript_call_result_563704, result_add_563715)
    
    # Applying the binary operator 'div=' (line 29)
    result_div_563717 = python_operator(stypy.reporting.localization.Localization(__file__, 29, 8), 'div=', ak_563700, result_mul_563716)
    # Assigning a type to the variable 'ak' (line 29)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 29, 8), 'ak', result_div_563717)
    
    
    # Call to append(...): (line 30)
    # Processing the call arguments (line 30)
    # Getting the type of 'ak' (line 30)
    ak_563720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 30, 17), 'ak', False)
    # Processing the call keyword arguments (line 30)
    kwargs_563721 = {}
    # Getting the type of 'a' (line 30)
    a_563718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 30, 8), 'a', False)
    # Obtaining the member 'append' of a type (line 30)
    append_563719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 30, 8), a_563718, 'append')
    # Calling append(args, kwargs) (line 30)
    append_call_result_563722 = invoke(stypy.reporting.localization.Localization(__file__, 30, 8), append_563719, *[ak_563720], **kwargs_563721)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'a' (line 31)
    a_563723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 31, 11), 'a')
    # Assigning a type to the variable 'stypy_return_type' (line 31)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 31, 4), 'stypy_return_type', a_563723)
    
    # ################# End of 'compute_a(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'compute_a' in the type store
    # Getting the type of 'stypy_return_type' (line 22)
    stypy_return_type_563724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 22, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_563724)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'compute_a'
    return stypy_return_type_563724

# Assigning a type to the variable 'compute_a' (line 22)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 22, 0), 'compute_a', compute_a)

@norecursion
def compute_g(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'compute_g'
    module_type_store = module_type_store.open_function_context('compute_g', 34, 0, False)
    
    # Passed parameters checking function
    compute_g.stypy_localization = localization
    compute_g.stypy_type_of_self = None
    compute_g.stypy_type_store = module_type_store
    compute_g.stypy_function_name = 'compute_g'
    compute_g.stypy_param_names_list = ['n']
    compute_g.stypy_varargs_param_name = None
    compute_g.stypy_kwargs_param_name = None
    compute_g.stypy_call_defaults = defaults
    compute_g.stypy_call_varargs = varargs
    compute_g.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'compute_g', ['n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'compute_g', localization, ['n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'compute_g(...)' code ##################

    str_563725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 4), 'str', 'g_k from DLMF 5.11.3/5.11.5')
    
    # Assigning a Call to a Name (line 36):
    
    # Call to compute_a(...): (line 36)
    # Processing the call arguments (line 36)
    int_563727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 18), 'int')
    # Getting the type of 'n' (line 36)
    n_563728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 20), 'n', False)
    # Applying the binary operator '*' (line 36)
    result_mul_563729 = python_operator(stypy.reporting.localization.Localization(__file__, 36, 18), '*', int_563727, n_563728)
    
    # Processing the call keyword arguments (line 36)
    kwargs_563730 = {}
    # Getting the type of 'compute_a' (line 36)
    compute_a_563726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 8), 'compute_a', False)
    # Calling compute_a(args, kwargs) (line 36)
    compute_a_call_result_563731 = invoke(stypy.reporting.localization.Localization(__file__, 36, 8), compute_a_563726, *[result_mul_563729], **kwargs_563730)
    
    # Assigning a type to the variable 'a' (line 36)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 36, 4), 'a', compute_a_call_result_563731)
    
    # Assigning a List to a Name (line 37):
    
    # Obtaining an instance of the builtin type 'list' (line 37)
    list_563732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, 8), 'list')
    # Adding type elements to the builtin type 'list' instance (line 37)
    
    # Assigning a type to the variable 'g' (line 37)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 37, 4), 'g', list_563732)
    
    
    # Call to range(...): (line 38)
    # Processing the call arguments (line 38)
    # Getting the type of 'n' (line 38)
    n_563734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 38, 19), 'n', False)
    # Processing the call keyword arguments (line 38)
    kwargs_563735 = {}
    # Getting the type of 'range' (line 38)
    range_563733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 38, 13), 'range', False)
    # Calling range(args, kwargs) (line 38)
    range_call_result_563736 = invoke(stypy.reporting.localization.Localization(__file__, 38, 13), range_563733, *[n_563734], **kwargs_563735)
    
    # Testing the type of a for loop iterable (line 38)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 38, 4), range_call_result_563736)
    # Getting the type of the for loop variable (line 38)
    for_loop_var_563737 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 38, 4), range_call_result_563736)
    # Assigning a type to the variable 'k' (line 38)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 38, 4), 'k', for_loop_var_563737)
    # SSA begins for a for statement (line 38)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to append(...): (line 39)
    # Processing the call arguments (line 39)
    
    # Call to sqrt(...): (line 39)
    # Processing the call arguments (line 39)
    int_563742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 25), 'int')
    # Processing the call keyword arguments (line 39)
    kwargs_563743 = {}
    # Getting the type of 'mp' (line 39)
    mp_563740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 17), 'mp', False)
    # Obtaining the member 'sqrt' of a type (line 39)
    sqrt_563741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 39, 17), mp_563740, 'sqrt')
    # Calling sqrt(args, kwargs) (line 39)
    sqrt_call_result_563744 = invoke(stypy.reporting.localization.Localization(__file__, 39, 17), sqrt_563741, *[int_563742], **kwargs_563743)
    
    
    # Call to rf(...): (line 39)
    # Processing the call arguments (line 39)
    float_563747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 34), 'float')
    # Getting the type of 'k' (line 39)
    k_563748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 39), 'k', False)
    # Processing the call keyword arguments (line 39)
    kwargs_563749 = {}
    # Getting the type of 'mp' (line 39)
    mp_563745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 28), 'mp', False)
    # Obtaining the member 'rf' of a type (line 39)
    rf_563746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 39, 28), mp_563745, 'rf')
    # Calling rf(args, kwargs) (line 39)
    rf_call_result_563750 = invoke(stypy.reporting.localization.Localization(__file__, 39, 28), rf_563746, *[float_563747, k_563748], **kwargs_563749)
    
    # Applying the binary operator '*' (line 39)
    result_mul_563751 = python_operator(stypy.reporting.localization.Localization(__file__, 39, 17), '*', sqrt_call_result_563744, rf_call_result_563750)
    
    
    # Obtaining the type of the subscript
    int_563752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 44), 'int')
    # Getting the type of 'k' (line 39)
    k_563753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 46), 'k', False)
    # Applying the binary operator '*' (line 39)
    result_mul_563754 = python_operator(stypy.reporting.localization.Localization(__file__, 39, 44), '*', int_563752, k_563753)
    
    # Getting the type of 'a' (line 39)
    a_563755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 42), 'a', False)
    # Obtaining the member '__getitem__' of a type (line 39)
    getitem___563756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 39, 42), a_563755, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 39)
    subscript_call_result_563757 = invoke(stypy.reporting.localization.Localization(__file__, 39, 42), getitem___563756, result_mul_563754)
    
    # Applying the binary operator '*' (line 39)
    result_mul_563758 = python_operator(stypy.reporting.localization.Localization(__file__, 39, 41), '*', result_mul_563751, subscript_call_result_563757)
    
    # Processing the call keyword arguments (line 39)
    kwargs_563759 = {}
    # Getting the type of 'g' (line 39)
    g_563738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 8), 'g', False)
    # Obtaining the member 'append' of a type (line 39)
    append_563739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 39, 8), g_563738, 'append')
    # Calling append(args, kwargs) (line 39)
    append_call_result_563760 = invoke(stypy.reporting.localization.Localization(__file__, 39, 8), append_563739, *[result_mul_563758], **kwargs_563759)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'g' (line 40)
    g_563761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 11), 'g')
    # Assigning a type to the variable 'stypy_return_type' (line 40)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 4), 'stypy_return_type', g_563761)
    
    # ################# End of 'compute_g(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'compute_g' in the type store
    # Getting the type of 'stypy_return_type' (line 34)
    stypy_return_type_563762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 34, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_563762)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'compute_g'
    return stypy_return_type_563762

# Assigning a type to the variable 'compute_g' (line 34)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 0), 'compute_g', compute_g)

@norecursion
def eta(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'eta'
    module_type_store = module_type_store.open_function_context('eta', 43, 0, False)
    
    # Passed parameters checking function
    eta.stypy_localization = localization
    eta.stypy_type_of_self = None
    eta.stypy_type_store = module_type_store
    eta.stypy_function_name = 'eta'
    eta.stypy_param_names_list = ['lam']
    eta.stypy_varargs_param_name = None
    eta.stypy_kwargs_param_name = None
    eta.stypy_call_defaults = defaults
    eta.stypy_call_varargs = varargs
    eta.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'eta', ['lam'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'eta', localization, ['lam'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'eta(...)' code ##################

    str_563763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 4), 'str', 'Function from DLMF 8.12.1 shifted to be centered at 0.')
    
    
    # Getting the type of 'lam' (line 45)
    lam_563764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 45, 7), 'lam')
    int_563765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 13), 'int')
    # Applying the binary operator '>' (line 45)
    result_gt_563766 = python_operator(stypy.reporting.localization.Localization(__file__, 45, 7), '>', lam_563764, int_563765)
    
    # Testing the type of an if condition (line 45)
    if_condition_563767 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 45, 4), result_gt_563766)
    # Assigning a type to the variable 'if_condition_563767' (line 45)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 45, 4), 'if_condition_563767', if_condition_563767)
    # SSA begins for if statement (line 45)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to sqrt(...): (line 46)
    # Processing the call arguments (line 46)
    int_563770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 23), 'int')
    # Getting the type of 'lam' (line 46)
    lam_563771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 26), 'lam', False)
    
    # Call to log(...): (line 46)
    # Processing the call arguments (line 46)
    # Getting the type of 'lam' (line 46)
    lam_563774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 39), 'lam', False)
    int_563775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 45), 'int')
    # Applying the binary operator '+' (line 46)
    result_add_563776 = python_operator(stypy.reporting.localization.Localization(__file__, 46, 39), '+', lam_563774, int_563775)
    
    # Processing the call keyword arguments (line 46)
    kwargs_563777 = {}
    # Getting the type of 'mp' (line 46)
    mp_563772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 32), 'mp', False)
    # Obtaining the member 'log' of a type (line 46)
    log_563773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 46, 32), mp_563772, 'log')
    # Calling log(args, kwargs) (line 46)
    log_call_result_563778 = invoke(stypy.reporting.localization.Localization(__file__, 46, 32), log_563773, *[result_add_563776], **kwargs_563777)
    
    # Applying the binary operator '-' (line 46)
    result_sub_563779 = python_operator(stypy.reporting.localization.Localization(__file__, 46, 26), '-', lam_563771, log_call_result_563778)
    
    # Applying the binary operator '*' (line 46)
    result_mul_563780 = python_operator(stypy.reporting.localization.Localization(__file__, 46, 23), '*', int_563770, result_sub_563779)
    
    # Processing the call keyword arguments (line 46)
    kwargs_563781 = {}
    # Getting the type of 'mp' (line 46)
    mp_563768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 15), 'mp', False)
    # Obtaining the member 'sqrt' of a type (line 46)
    sqrt_563769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 46, 15), mp_563768, 'sqrt')
    # Calling sqrt(args, kwargs) (line 46)
    sqrt_call_result_563782 = invoke(stypy.reporting.localization.Localization(__file__, 46, 15), sqrt_563769, *[result_mul_563780], **kwargs_563781)
    
    # Assigning a type to the variable 'stypy_return_type' (line 46)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 46, 8), 'stypy_return_type', sqrt_call_result_563782)
    # SSA branch for the else part of an if statement (line 45)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'lam' (line 47)
    lam_563783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 47, 9), 'lam')
    int_563784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 15), 'int')
    # Applying the binary operator '<' (line 47)
    result_lt_563785 = python_operator(stypy.reporting.localization.Localization(__file__, 47, 9), '<', lam_563783, int_563784)
    
    # Testing the type of an if condition (line 47)
    if_condition_563786 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 47, 9), result_lt_563785)
    # Assigning a type to the variable 'if_condition_563786' (line 47)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 47, 9), 'if_condition_563786', if_condition_563786)
    # SSA begins for if statement (line 47)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to sqrt(...): (line 48)
    # Processing the call arguments (line 48)
    int_563789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 24), 'int')
    # Getting the type of 'lam' (line 48)
    lam_563790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 48, 27), 'lam', False)
    
    # Call to log(...): (line 48)
    # Processing the call arguments (line 48)
    # Getting the type of 'lam' (line 48)
    lam_563793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 48, 40), 'lam', False)
    int_563794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 46), 'int')
    # Applying the binary operator '+' (line 48)
    result_add_563795 = python_operator(stypy.reporting.localization.Localization(__file__, 48, 40), '+', lam_563793, int_563794)
    
    # Processing the call keyword arguments (line 48)
    kwargs_563796 = {}
    # Getting the type of 'mp' (line 48)
    mp_563791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 48, 33), 'mp', False)
    # Obtaining the member 'log' of a type (line 48)
    log_563792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 48, 33), mp_563791, 'log')
    # Calling log(args, kwargs) (line 48)
    log_call_result_563797 = invoke(stypy.reporting.localization.Localization(__file__, 48, 33), log_563792, *[result_add_563795], **kwargs_563796)
    
    # Applying the binary operator '-' (line 48)
    result_sub_563798 = python_operator(stypy.reporting.localization.Localization(__file__, 48, 27), '-', lam_563790, log_call_result_563797)
    
    # Applying the binary operator '*' (line 48)
    result_mul_563799 = python_operator(stypy.reporting.localization.Localization(__file__, 48, 24), '*', int_563789, result_sub_563798)
    
    # Processing the call keyword arguments (line 48)
    kwargs_563800 = {}
    # Getting the type of 'mp' (line 48)
    mp_563787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 48, 16), 'mp', False)
    # Obtaining the member 'sqrt' of a type (line 48)
    sqrt_563788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 48, 16), mp_563787, 'sqrt')
    # Calling sqrt(args, kwargs) (line 48)
    sqrt_call_result_563801 = invoke(stypy.reporting.localization.Localization(__file__, 48, 16), sqrt_563788, *[result_mul_563799], **kwargs_563800)
    
    # Applying the 'usub' unary operator (line 48)
    result___neg___563802 = python_operator(stypy.reporting.localization.Localization(__file__, 48, 15), 'usub', sqrt_call_result_563801)
    
    # Assigning a type to the variable 'stypy_return_type' (line 48)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 48, 8), 'stypy_return_type', result___neg___563802)
    # SSA branch for the else part of an if statement (line 47)
    module_type_store.open_ssa_branch('else')
    int_563803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 50, 15), 'int')
    # Assigning a type to the variable 'stypy_return_type' (line 50)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 50, 8), 'stypy_return_type', int_563803)
    # SSA join for if statement (line 47)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 45)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'eta(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'eta' in the type store
    # Getting the type of 'stypy_return_type' (line 43)
    stypy_return_type_563804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 43, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_563804)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'eta'
    return stypy_return_type_563804

# Assigning a type to the variable 'eta' (line 43)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 43, 0), 'eta', eta)

@norecursion
def compute_alpha(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'compute_alpha'
    module_type_store = module_type_store.open_function_context('compute_alpha', 53, 0, False)
    
    # Passed parameters checking function
    compute_alpha.stypy_localization = localization
    compute_alpha.stypy_type_of_self = None
    compute_alpha.stypy_type_store = module_type_store
    compute_alpha.stypy_function_name = 'compute_alpha'
    compute_alpha.stypy_param_names_list = ['n']
    compute_alpha.stypy_varargs_param_name = None
    compute_alpha.stypy_kwargs_param_name = None
    compute_alpha.stypy_call_defaults = defaults
    compute_alpha.stypy_call_varargs = varargs
    compute_alpha.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'compute_alpha', ['n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'compute_alpha', localization, ['n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'compute_alpha(...)' code ##################

    str_563805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 54, 4), 'str', 'alpha_n from DLMF 8.12.13')
    
    # Assigning a Call to a Name (line 55):
    
    # Call to taylor(...): (line 55)
    # Processing the call arguments (line 55)
    # Getting the type of 'eta' (line 55)
    eta_563808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 23), 'eta', False)
    int_563809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 55, 28), 'int')
    # Getting the type of 'n' (line 55)
    n_563810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 31), 'n', False)
    int_563811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 55, 35), 'int')
    # Applying the binary operator '-' (line 55)
    result_sub_563812 = python_operator(stypy.reporting.localization.Localization(__file__, 55, 31), '-', n_563810, int_563811)
    
    # Processing the call keyword arguments (line 55)
    kwargs_563813 = {}
    # Getting the type of 'mp' (line 55)
    mp_563806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 13), 'mp', False)
    # Obtaining the member 'taylor' of a type (line 55)
    taylor_563807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 55, 13), mp_563806, 'taylor')
    # Calling taylor(args, kwargs) (line 55)
    taylor_call_result_563814 = invoke(stypy.reporting.localization.Localization(__file__, 55, 13), taylor_563807, *[eta_563808, int_563809, result_sub_563812], **kwargs_563813)
    
    # Assigning a type to the variable 'coeffs' (line 55)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 55, 4), 'coeffs', taylor_call_result_563814)
    
    # Call to lagrange_inversion(...): (line 56)
    # Processing the call arguments (line 56)
    # Getting the type of 'coeffs' (line 56)
    coeffs_563816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 56, 30), 'coeffs', False)
    # Processing the call keyword arguments (line 56)
    kwargs_563817 = {}
    # Getting the type of 'lagrange_inversion' (line 56)
    lagrange_inversion_563815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 56, 11), 'lagrange_inversion', False)
    # Calling lagrange_inversion(args, kwargs) (line 56)
    lagrange_inversion_call_result_563818 = invoke(stypy.reporting.localization.Localization(__file__, 56, 11), lagrange_inversion_563815, *[coeffs_563816], **kwargs_563817)
    
    # Assigning a type to the variable 'stypy_return_type' (line 56)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 56, 4), 'stypy_return_type', lagrange_inversion_call_result_563818)
    
    # ################# End of 'compute_alpha(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'compute_alpha' in the type store
    # Getting the type of 'stypy_return_type' (line 53)
    stypy_return_type_563819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_563819)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'compute_alpha'
    return stypy_return_type_563819

# Assigning a type to the variable 'compute_alpha' (line 53)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 53, 0), 'compute_alpha', compute_alpha)

@norecursion
def compute_d(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'compute_d'
    module_type_store = module_type_store.open_function_context('compute_d', 59, 0, False)
    
    # Passed parameters checking function
    compute_d.stypy_localization = localization
    compute_d.stypy_type_of_self = None
    compute_d.stypy_type_store = module_type_store
    compute_d.stypy_function_name = 'compute_d'
    compute_d.stypy_param_names_list = ['K', 'N']
    compute_d.stypy_varargs_param_name = None
    compute_d.stypy_kwargs_param_name = None
    compute_d.stypy_call_defaults = defaults
    compute_d.stypy_call_varargs = varargs
    compute_d.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'compute_d', ['K', 'N'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'compute_d', localization, ['K', 'N'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'compute_d(...)' code ##################

    str_563820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 60, 4), 'str', 'd_{k, n} from DLMF 8.12.12')
    
    # Assigning a BinOp to a Name (line 61):
    # Getting the type of 'N' (line 61)
    N_563821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 61, 8), 'N')
    int_563822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 12), 'int')
    # Getting the type of 'K' (line 61)
    K_563823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 61, 14), 'K')
    # Applying the binary operator '*' (line 61)
    result_mul_563824 = python_operator(stypy.reporting.localization.Localization(__file__, 61, 12), '*', int_563822, K_563823)
    
    # Applying the binary operator '+' (line 61)
    result_add_563825 = python_operator(stypy.reporting.localization.Localization(__file__, 61, 8), '+', N_563821, result_mul_563824)
    
    # Assigning a type to the variable 'M' (line 61)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 61, 4), 'M', result_add_563825)
    
    # Assigning a List to a Name (line 62):
    
    # Obtaining an instance of the builtin type 'list' (line 62)
    list_563826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, 9), 'list')
    # Adding type elements to the builtin type 'list' instance (line 62)
    # Adding element type (line 62)
    
    
    # Call to mpf(...): (line 62)
    # Processing the call arguments (line 62)
    int_563829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, 18), 'int')
    # Processing the call keyword arguments (line 62)
    kwargs_563830 = {}
    # Getting the type of 'mp' (line 62)
    mp_563827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 62, 11), 'mp', False)
    # Obtaining the member 'mpf' of a type (line 62)
    mpf_563828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 62, 11), mp_563827, 'mpf')
    # Calling mpf(args, kwargs) (line 62)
    mpf_call_result_563831 = invoke(stypy.reporting.localization.Localization(__file__, 62, 11), mpf_563828, *[int_563829], **kwargs_563830)
    
    # Applying the 'usub' unary operator (line 62)
    result___neg___563832 = python_operator(stypy.reporting.localization.Localization(__file__, 62, 10), 'usub', mpf_call_result_563831)
    
    int_563833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, 21), 'int')
    # Applying the binary operator 'div' (line 62)
    result_div_563834 = python_operator(stypy.reporting.localization.Localization(__file__, 62, 10), 'div', result___neg___563832, int_563833)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 62, 9), list_563826, result_div_563834)
    
    # Assigning a type to the variable 'd0' (line 62)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 62, 4), 'd0', list_563826)
    
    # Assigning a Call to a Name (line 63):
    
    # Call to compute_alpha(...): (line 63)
    # Processing the call arguments (line 63)
    # Getting the type of 'M' (line 63)
    M_563836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 63, 26), 'M', False)
    int_563837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 63, 30), 'int')
    # Applying the binary operator '+' (line 63)
    result_add_563838 = python_operator(stypy.reporting.localization.Localization(__file__, 63, 26), '+', M_563836, int_563837)
    
    # Processing the call keyword arguments (line 63)
    kwargs_563839 = {}
    # Getting the type of 'compute_alpha' (line 63)
    compute_alpha_563835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 63, 12), 'compute_alpha', False)
    # Calling compute_alpha(args, kwargs) (line 63)
    compute_alpha_call_result_563840 = invoke(stypy.reporting.localization.Localization(__file__, 63, 12), compute_alpha_563835, *[result_add_563838], **kwargs_563839)
    
    # Assigning a type to the variable 'alpha' (line 63)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 63, 4), 'alpha', compute_alpha_call_result_563840)
    
    
    # Call to range(...): (line 64)
    # Processing the call arguments (line 64)
    int_563842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 64, 19), 'int')
    # Getting the type of 'M' (line 64)
    M_563843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 64, 22), 'M', False)
    # Processing the call keyword arguments (line 64)
    kwargs_563844 = {}
    # Getting the type of 'range' (line 64)
    range_563841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 64, 13), 'range', False)
    # Calling range(args, kwargs) (line 64)
    range_call_result_563845 = invoke(stypy.reporting.localization.Localization(__file__, 64, 13), range_563841, *[int_563842, M_563843], **kwargs_563844)
    
    # Testing the type of a for loop iterable (line 64)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 64, 4), range_call_result_563845)
    # Getting the type of the for loop variable (line 64)
    for_loop_var_563846 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 64, 4), range_call_result_563845)
    # Assigning a type to the variable 'n' (line 64)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 64, 4), 'n', for_loop_var_563846)
    # SSA begins for a for statement (line 64)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to append(...): (line 65)
    # Processing the call arguments (line 65)
    # Getting the type of 'n' (line 65)
    n_563849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 19), 'n', False)
    int_563850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 65, 23), 'int')
    # Applying the binary operator '+' (line 65)
    result_add_563851 = python_operator(stypy.reporting.localization.Localization(__file__, 65, 19), '+', n_563849, int_563850)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 65)
    n_563852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 32), 'n', False)
    int_563853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 65, 34), 'int')
    # Applying the binary operator '+' (line 65)
    result_add_563854 = python_operator(stypy.reporting.localization.Localization(__file__, 65, 32), '+', n_563852, int_563853)
    
    # Getting the type of 'alpha' (line 65)
    alpha_563855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 26), 'alpha', False)
    # Obtaining the member '__getitem__' of a type (line 65)
    getitem___563856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 65, 26), alpha_563855, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 65)
    subscript_call_result_563857 = invoke(stypy.reporting.localization.Localization(__file__, 65, 26), getitem___563856, result_add_563854)
    
    # Applying the binary operator '*' (line 65)
    result_mul_563858 = python_operator(stypy.reporting.localization.Localization(__file__, 65, 18), '*', result_add_563851, subscript_call_result_563857)
    
    # Processing the call keyword arguments (line 65)
    kwargs_563859 = {}
    # Getting the type of 'd0' (line 65)
    d0_563847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 8), 'd0', False)
    # Obtaining the member 'append' of a type (line 65)
    append_563848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 65, 8), d0_563847, 'append')
    # Calling append(args, kwargs) (line 65)
    append_call_result_563860 = invoke(stypy.reporting.localization.Localization(__file__, 65, 8), append_563848, *[result_mul_563858], **kwargs_563859)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 66):
    
    # Obtaining an instance of the builtin type 'list' (line 66)
    list_563861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 66, 8), 'list')
    # Adding type elements to the builtin type 'list' instance (line 66)
    # Adding element type (line 66)
    # Getting the type of 'd0' (line 66)
    d0_563862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 66, 9), 'd0')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 66, 8), list_563861, d0_563862)
    
    # Assigning a type to the variable 'd' (line 66)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 66, 4), 'd', list_563861)
    
    # Assigning a Call to a Name (line 67):
    
    # Call to compute_g(...): (line 67)
    # Processing the call arguments (line 67)
    # Getting the type of 'K' (line 67)
    K_563864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 67, 18), 'K', False)
    # Processing the call keyword arguments (line 67)
    kwargs_563865 = {}
    # Getting the type of 'compute_g' (line 67)
    compute_g_563863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 67, 8), 'compute_g', False)
    # Calling compute_g(args, kwargs) (line 67)
    compute_g_call_result_563866 = invoke(stypy.reporting.localization.Localization(__file__, 67, 8), compute_g_563863, *[K_563864], **kwargs_563865)
    
    # Assigning a type to the variable 'g' (line 67)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 67, 4), 'g', compute_g_call_result_563866)
    
    
    # Call to range(...): (line 68)
    # Processing the call arguments (line 68)
    int_563868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 68, 19), 'int')
    # Getting the type of 'K' (line 68)
    K_563869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 22), 'K', False)
    # Processing the call keyword arguments (line 68)
    kwargs_563870 = {}
    # Getting the type of 'range' (line 68)
    range_563867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 13), 'range', False)
    # Calling range(args, kwargs) (line 68)
    range_call_result_563871 = invoke(stypy.reporting.localization.Localization(__file__, 68, 13), range_563867, *[int_563868, K_563869], **kwargs_563870)
    
    # Testing the type of a for loop iterable (line 68)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 68, 4), range_call_result_563871)
    # Getting the type of the for loop variable (line 68)
    for_loop_var_563872 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 68, 4), range_call_result_563871)
    # Assigning a type to the variable 'k' (line 68)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 68, 4), 'k', for_loop_var_563872)
    # SSA begins for a for statement (line 68)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a List to a Name (line 69):
    
    # Obtaining an instance of the builtin type 'list' (line 69)
    list_563873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 69)
    
    # Assigning a type to the variable 'dk' (line 69)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 69, 8), 'dk', list_563873)
    
    
    # Call to range(...): (line 70)
    # Processing the call arguments (line 70)
    # Getting the type of 'M' (line 70)
    M_563875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 23), 'M', False)
    int_563876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 70, 27), 'int')
    # Getting the type of 'k' (line 70)
    k_563877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 29), 'k', False)
    # Applying the binary operator '*' (line 70)
    result_mul_563878 = python_operator(stypy.reporting.localization.Localization(__file__, 70, 27), '*', int_563876, k_563877)
    
    # Applying the binary operator '-' (line 70)
    result_sub_563879 = python_operator(stypy.reporting.localization.Localization(__file__, 70, 23), '-', M_563875, result_mul_563878)
    
    # Processing the call keyword arguments (line 70)
    kwargs_563880 = {}
    # Getting the type of 'range' (line 70)
    range_563874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 17), 'range', False)
    # Calling range(args, kwargs) (line 70)
    range_call_result_563881 = invoke(stypy.reporting.localization.Localization(__file__, 70, 17), range_563874, *[result_sub_563879], **kwargs_563880)
    
    # Testing the type of a for loop iterable (line 70)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 70, 8), range_call_result_563881)
    # Getting the type of the for loop variable (line 70)
    for_loop_var_563882 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 70, 8), range_call_result_563881)
    # Assigning a type to the variable 'n' (line 70)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 70, 8), 'n', for_loop_var_563882)
    # SSA begins for a for statement (line 70)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to append(...): (line 71)
    # Processing the call arguments (line 71)
    int_563885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 71, 23), 'int')
    # Getting the type of 'k' (line 71)
    k_563886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 28), 'k', False)
    # Applying the binary operator '**' (line 71)
    result_pow_563887 = python_operator(stypy.reporting.localization.Localization(__file__, 71, 22), '**', int_563885, k_563886)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 71)
    k_563888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 32), 'k', False)
    # Getting the type of 'g' (line 71)
    g_563889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 30), 'g', False)
    # Obtaining the member '__getitem__' of a type (line 71)
    getitem___563890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 71, 30), g_563889, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 71)
    subscript_call_result_563891 = invoke(stypy.reporting.localization.Localization(__file__, 71, 30), getitem___563890, k_563888)
    
    # Applying the binary operator '*' (line 71)
    result_mul_563892 = python_operator(stypy.reporting.localization.Localization(__file__, 71, 22), '*', result_pow_563887, subscript_call_result_563891)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 71)
    n_563893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 40), 'n', False)
    
    # Obtaining the type of the subscript
    int_563894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 71, 37), 'int')
    # Getting the type of 'd' (line 71)
    d_563895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 35), 'd', False)
    # Obtaining the member '__getitem__' of a type (line 71)
    getitem___563896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 71, 35), d_563895, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 71)
    subscript_call_result_563897 = invoke(stypy.reporting.localization.Localization(__file__, 71, 35), getitem___563896, int_563894)
    
    # Obtaining the member '__getitem__' of a type (line 71)
    getitem___563898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 71, 35), subscript_call_result_563897, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 71)
    subscript_call_result_563899 = invoke(stypy.reporting.localization.Localization(__file__, 71, 35), getitem___563898, n_563893)
    
    # Applying the binary operator '*' (line 71)
    result_mul_563900 = python_operator(stypy.reporting.localization.Localization(__file__, 71, 34), '*', result_mul_563892, subscript_call_result_563899)
    
    # Getting the type of 'n' (line 71)
    n_563901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 46), 'n', False)
    int_563902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 71, 50), 'int')
    # Applying the binary operator '+' (line 71)
    result_add_563903 = python_operator(stypy.reporting.localization.Localization(__file__, 71, 46), '+', n_563901, int_563902)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 71)
    n_563904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 60), 'n', False)
    int_563905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 71, 62), 'int')
    # Applying the binary operator '+' (line 71)
    result_add_563906 = python_operator(stypy.reporting.localization.Localization(__file__, 71, 60), '+', n_563904, int_563905)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 71)
    k_563907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 55), 'k', False)
    int_563908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 71, 57), 'int')
    # Applying the binary operator '-' (line 71)
    result_sub_563909 = python_operator(stypy.reporting.localization.Localization(__file__, 71, 55), '-', k_563907, int_563908)
    
    # Getting the type of 'd' (line 71)
    d_563910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 53), 'd', False)
    # Obtaining the member '__getitem__' of a type (line 71)
    getitem___563911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 71, 53), d_563910, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 71)
    subscript_call_result_563912 = invoke(stypy.reporting.localization.Localization(__file__, 71, 53), getitem___563911, result_sub_563909)
    
    # Obtaining the member '__getitem__' of a type (line 71)
    getitem___563913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 71, 53), subscript_call_result_563912, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 71)
    subscript_call_result_563914 = invoke(stypy.reporting.localization.Localization(__file__, 71, 53), getitem___563913, result_add_563906)
    
    # Applying the binary operator '*' (line 71)
    result_mul_563915 = python_operator(stypy.reporting.localization.Localization(__file__, 71, 45), '*', result_add_563903, subscript_call_result_563914)
    
    # Applying the binary operator '+' (line 71)
    result_add_563916 = python_operator(stypy.reporting.localization.Localization(__file__, 71, 22), '+', result_mul_563900, result_mul_563915)
    
    # Processing the call keyword arguments (line 71)
    kwargs_563917 = {}
    # Getting the type of 'dk' (line 71)
    dk_563883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 12), 'dk', False)
    # Obtaining the member 'append' of a type (line 71)
    append_563884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 71, 12), dk_563883, 'append')
    # Calling append(args, kwargs) (line 71)
    append_call_result_563918 = invoke(stypy.reporting.localization.Localization(__file__, 71, 12), append_563884, *[result_add_563916], **kwargs_563917)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to append(...): (line 72)
    # Processing the call arguments (line 72)
    # Getting the type of 'dk' (line 72)
    dk_563921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 17), 'dk', False)
    # Processing the call keyword arguments (line 72)
    kwargs_563922 = {}
    # Getting the type of 'd' (line 72)
    d_563919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 8), 'd', False)
    # Obtaining the member 'append' of a type (line 72)
    append_563920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 72, 8), d_563919, 'append')
    # Calling append(args, kwargs) (line 72)
    append_call_result_563923 = invoke(stypy.reporting.localization.Localization(__file__, 72, 8), append_563920, *[dk_563921], **kwargs_563922)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to range(...): (line 73)
    # Processing the call arguments (line 73)
    # Getting the type of 'K' (line 73)
    K_563925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 73, 19), 'K', False)
    # Processing the call keyword arguments (line 73)
    kwargs_563926 = {}
    # Getting the type of 'range' (line 73)
    range_563924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 73, 13), 'range', False)
    # Calling range(args, kwargs) (line 73)
    range_call_result_563927 = invoke(stypy.reporting.localization.Localization(__file__, 73, 13), range_563924, *[K_563925], **kwargs_563926)
    
    # Testing the type of a for loop iterable (line 73)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 73, 4), range_call_result_563927)
    # Getting the type of the for loop variable (line 73)
    for_loop_var_563928 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 73, 4), range_call_result_563927)
    # Assigning a type to the variable 'k' (line 73)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 73, 4), 'k', for_loop_var_563928)
    # SSA begins for a for statement (line 73)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Subscript (line 74):
    
    # Obtaining the type of the subscript
    # Getting the type of 'N' (line 74)
    N_563929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 21), 'N')
    slice_563930 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 74, 15), None, N_563929, None)
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 74)
    k_563931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 17), 'k')
    # Getting the type of 'd' (line 74)
    d_563932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 15), 'd')
    # Obtaining the member '__getitem__' of a type (line 74)
    getitem___563933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 74, 15), d_563932, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 74)
    subscript_call_result_563934 = invoke(stypy.reporting.localization.Localization(__file__, 74, 15), getitem___563933, k_563931)
    
    # Obtaining the member '__getitem__' of a type (line 74)
    getitem___563935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 74, 15), subscript_call_result_563934, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 74)
    subscript_call_result_563936 = invoke(stypy.reporting.localization.Localization(__file__, 74, 15), getitem___563935, slice_563930)
    
    # Getting the type of 'd' (line 74)
    d_563937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 8), 'd')
    # Getting the type of 'k' (line 74)
    k_563938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 10), 'k')
    # Storing an element on a container (line 74)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 74, 8), d_563937, (k_563938, subscript_call_result_563936))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'd' (line 75)
    d_563939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 11), 'd')
    # Assigning a type to the variable 'stypy_return_type' (line 75)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 4), 'stypy_return_type', d_563939)
    
    # ################# End of 'compute_d(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'compute_d' in the type store
    # Getting the type of 'stypy_return_type' (line 59)
    stypy_return_type_563940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_563940)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'compute_d'
    return stypy_return_type_563940

# Assigning a type to the variable 'compute_d' (line 59)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 59, 0), 'compute_d', compute_d)

# Assigning a Str to a Name (line 78):
str_563941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 90, (-1)), 'str', '/* This file was automatically generated by _precomp/gammainc.py.\n * Do not edit it manually!\n */\n\n#ifndef IGAM_H\n#define IGAM_H\n\n#define K {}\n#define N {}\n\ndouble d[K][N] =\n{{')
# Assigning a type to the variable 'header' (line 78)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 78, 0), 'header', str_563941)

# Assigning a Str to a Name (line 92):
str_563942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 95, (-1)), 'str', '\n#endif\n')
# Assigning a type to the variable 'footer' (line 92)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 92, 0), 'footer', str_563942)

@norecursion
def main(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'main'
    module_type_store = module_type_store.open_function_context('main', 97, 0, False)
    
    # Passed parameters checking function
    main.stypy_localization = localization
    main.stypy_type_of_self = None
    main.stypy_type_store = module_type_store
    main.stypy_function_name = 'main'
    main.stypy_param_names_list = []
    main.stypy_varargs_param_name = None
    main.stypy_kwargs_param_name = None
    main.stypy_call_defaults = defaults
    main.stypy_call_varargs = varargs
    main.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'main', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'main', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'main(...)' code ##################

    
    # Call to print(...): (line 98)
    # Processing the call arguments (line 98)
    # Getting the type of '__doc__' (line 98)
    doc___563944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 10), '__doc__', False)
    # Processing the call keyword arguments (line 98)
    kwargs_563945 = {}
    # Getting the type of 'print' (line 98)
    print_563943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 4), 'print', False)
    # Calling print(args, kwargs) (line 98)
    print_call_result_563946 = invoke(stypy.reporting.localization.Localization(__file__, 98, 4), print_563943, *[doc___563944], **kwargs_563945)
    
    
    # Assigning a Num to a Name (line 99):
    int_563947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 99, 8), 'int')
    # Assigning a type to the variable 'K' (line 99)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 99, 4), 'K', int_563947)
    
    # Assigning a Num to a Name (line 100):
    int_563948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 100, 8), 'int')
    # Assigning a type to the variable 'N' (line 100)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 100, 4), 'N', int_563948)
    
    # Call to workdps(...): (line 101)
    # Processing the call arguments (line 101)
    int_563951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 101, 20), 'int')
    # Processing the call keyword arguments (line 101)
    kwargs_563952 = {}
    # Getting the type of 'mp' (line 101)
    mp_563949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 9), 'mp', False)
    # Obtaining the member 'workdps' of a type (line 101)
    workdps_563950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 101, 9), mp_563949, 'workdps')
    # Calling workdps(args, kwargs) (line 101)
    workdps_call_result_563953 = invoke(stypy.reporting.localization.Localization(__file__, 101, 9), workdps_563950, *[int_563951], **kwargs_563952)
    
    with_563954 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 101, 9), workdps_call_result_563953, 'with parameter', '__enter__', '__exit__')

    if with_563954:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 101)
        enter___563955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 101, 9), workdps_call_result_563953, '__enter__')
        with_enter_563956 = invoke(stypy.reporting.localization.Localization(__file__, 101, 9), enter___563955)
        
        # Assigning a Call to a Name (line 102):
        
        # Call to compute_d(...): (line 102)
        # Processing the call arguments (line 102)
        # Getting the type of 'K' (line 102)
        K_563958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 22), 'K', False)
        # Getting the type of 'N' (line 102)
        N_563959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 25), 'N', False)
        # Processing the call keyword arguments (line 102)
        kwargs_563960 = {}
        # Getting the type of 'compute_d' (line 102)
        compute_d_563957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 12), 'compute_d', False)
        # Calling compute_d(args, kwargs) (line 102)
        compute_d_call_result_563961 = invoke(stypy.reporting.localization.Localization(__file__, 102, 12), compute_d_563957, *[K_563958, N_563959], **kwargs_563960)
        
        # Assigning a type to the variable 'd' (line 102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 102, 8), 'd', compute_d_call_result_563961)
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 101)
        exit___563962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 101, 9), workdps_call_result_563953, '__exit__')
        with_exit_563963 = invoke(stypy.reporting.localization.Localization(__file__, 101, 9), exit___563962, None, None, None)

    
    # Assigning a Call to a Name (line 103):
    
    # Call to join(...): (line 103)
    # Processing the call arguments (line 103)
    
    # Call to dirname(...): (line 103)
    # Processing the call arguments (line 103)
    # Getting the type of '__file__' (line 103)
    file___563970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 38), '__file__', False)
    # Processing the call keyword arguments (line 103)
    kwargs_563971 = {}
    # Getting the type of 'os' (line 103)
    os_563967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 22), 'os', False)
    # Obtaining the member 'path' of a type (line 103)
    path_563968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 103, 22), os_563967, 'path')
    # Obtaining the member 'dirname' of a type (line 103)
    dirname_563969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 103, 22), path_563968, 'dirname')
    # Calling dirname(args, kwargs) (line 103)
    dirname_call_result_563972 = invoke(stypy.reporting.localization.Localization(__file__, 103, 22), dirname_563969, *[file___563970], **kwargs_563971)
    
    str_563973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, 49), 'str', '..')
    str_563974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, 55), 'str', 'cephes')
    str_563975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, 65), 'str', 'igam.h')
    # Processing the call keyword arguments (line 103)
    kwargs_563976 = {}
    # Getting the type of 'os' (line 103)
    os_563964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 9), 'os', False)
    # Obtaining the member 'path' of a type (line 103)
    path_563965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 103, 9), os_563964, 'path')
    # Obtaining the member 'join' of a type (line 103)
    join_563966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 103, 9), path_563965, 'join')
    # Calling join(args, kwargs) (line 103)
    join_call_result_563977 = invoke(stypy.reporting.localization.Localization(__file__, 103, 9), join_563966, *[dirname_call_result_563972, str_563973, str_563974, str_563975], **kwargs_563976)
    
    # Assigning a type to the variable 'fn' (line 103)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 103, 4), 'fn', join_call_result_563977)
    
    # Call to open(...): (line 104)
    # Processing the call arguments (line 104)
    # Getting the type of 'fn' (line 104)
    fn_563979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 14), 'fn', False)
    str_563980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 19), 'str', '.new')
    # Applying the binary operator '+' (line 104)
    result_add_563981 = python_operator(stypy.reporting.localization.Localization(__file__, 104, 14), '+', fn_563979, str_563980)
    
    str_563982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 27), 'str', 'w')
    # Processing the call keyword arguments (line 104)
    kwargs_563983 = {}
    # Getting the type of 'open' (line 104)
    open_563978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 9), 'open', False)
    # Calling open(args, kwargs) (line 104)
    open_call_result_563984 = invoke(stypy.reporting.localization.Localization(__file__, 104, 9), open_563978, *[result_add_563981, str_563982], **kwargs_563983)
    
    with_563985 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 104, 9), open_call_result_563984, 'with parameter', '__enter__', '__exit__')

    if with_563985:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 104)
        enter___563986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 104, 9), open_call_result_563984, '__enter__')
        with_enter_563987 = invoke(stypy.reporting.localization.Localization(__file__, 104, 9), enter___563986)
        # Assigning a type to the variable 'f' (line 104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 9), 'f', with_enter_563987)
        
        # Call to write(...): (line 105)
        # Processing the call arguments (line 105)
        
        # Call to format(...): (line 105)
        # Processing the call arguments (line 105)
        # Getting the type of 'K' (line 105)
        K_563992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 30), 'K', False)
        # Getting the type of 'N' (line 105)
        N_563993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 33), 'N', False)
        # Processing the call keyword arguments (line 105)
        kwargs_563994 = {}
        # Getting the type of 'header' (line 105)
        header_563990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 16), 'header', False)
        # Obtaining the member 'format' of a type (line 105)
        format_563991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 105, 16), header_563990, 'format')
        # Calling format(args, kwargs) (line 105)
        format_call_result_563995 = invoke(stypy.reporting.localization.Localization(__file__, 105, 16), format_563991, *[K_563992, N_563993], **kwargs_563994)
        
        # Processing the call keyword arguments (line 105)
        kwargs_563996 = {}
        # Getting the type of 'f' (line 105)
        f_563988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 8), 'f', False)
        # Obtaining the member 'write' of a type (line 105)
        write_563989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 105, 8), f_563988, 'write')
        # Calling write(args, kwargs) (line 105)
        write_call_result_563997 = invoke(stypy.reporting.localization.Localization(__file__, 105, 8), write_563989, *[format_call_result_563995], **kwargs_563996)
        
        
        
        # Call to enumerate(...): (line 106)
        # Processing the call arguments (line 106)
        # Getting the type of 'd' (line 106)
        d_563999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 32), 'd', False)
        # Processing the call keyword arguments (line 106)
        kwargs_564000 = {}
        # Getting the type of 'enumerate' (line 106)
        enumerate_563998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 22), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 106)
        enumerate_call_result_564001 = invoke(stypy.reporting.localization.Localization(__file__, 106, 22), enumerate_563998, *[d_563999], **kwargs_564000)
        
        # Testing the type of a for loop iterable (line 106)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 106, 8), enumerate_call_result_564001)
        # Getting the type of the for loop variable (line 106)
        for_loop_var_564002 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 106, 8), enumerate_call_result_564001)
        # Assigning a type to the variable 'k' (line 106)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 106, 8), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 106, 8), for_loop_var_564002))
        # Assigning a type to the variable 'row' (line 106)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 106, 8), 'row', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 106, 8), for_loop_var_564002))
        # SSA begins for a for statement (line 106)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 107):
        
        # Call to map(...): (line 107)
        # Processing the call arguments (line 107)

        @norecursion
        def _stypy_temp_lambda_485(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_485'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_485', 107, 22, True)
            # Passed parameters checking function
            _stypy_temp_lambda_485.stypy_localization = localization
            _stypy_temp_lambda_485.stypy_type_of_self = None
            _stypy_temp_lambda_485.stypy_type_store = module_type_store
            _stypy_temp_lambda_485.stypy_function_name = '_stypy_temp_lambda_485'
            _stypy_temp_lambda_485.stypy_param_names_list = ['x']
            _stypy_temp_lambda_485.stypy_varargs_param_name = None
            _stypy_temp_lambda_485.stypy_kwargs_param_name = None
            _stypy_temp_lambda_485.stypy_call_defaults = defaults
            _stypy_temp_lambda_485.stypy_call_varargs = varargs
            _stypy_temp_lambda_485.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_485', ['x'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_485', ['x'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to nstr(...): (line 107)
            # Processing the call arguments (line 107)
            # Getting the type of 'x' (line 107)
            x_564006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 40), 'x', False)
            int_564007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 107, 43), 'int')
            # Processing the call keyword arguments (line 107)
            int_564008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 107, 57), 'int')
            keyword_564009 = int_564008
            int_564010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 107, 70), 'int')
            keyword_564011 = int_564010
            kwargs_564012 = {'max_fixed': keyword_564011, 'min_fixed': keyword_564009}
            # Getting the type of 'mp' (line 107)
            mp_564004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 32), 'mp', False)
            # Obtaining the member 'nstr' of a type (line 107)
            nstr_564005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 107, 32), mp_564004, 'nstr')
            # Calling nstr(args, kwargs) (line 107)
            nstr_call_result_564013 = invoke(stypy.reporting.localization.Localization(__file__, 107, 32), nstr_564005, *[x_564006, int_564007], **kwargs_564012)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 107)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 107, 22), 'stypy_return_type', nstr_call_result_564013)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_485' in the type store
            # Getting the type of 'stypy_return_type' (line 107)
            stypy_return_type_564014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 22), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_564014)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_485'
            return stypy_return_type_564014

        # Assigning a type to the variable '_stypy_temp_lambda_485' (line 107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 107, 22), '_stypy_temp_lambda_485', _stypy_temp_lambda_485)
        # Getting the type of '_stypy_temp_lambda_485' (line 107)
        _stypy_temp_lambda_485_564015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 22), '_stypy_temp_lambda_485')
        # Getting the type of 'row' (line 107)
        row_564016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 74), 'row', False)
        # Processing the call keyword arguments (line 107)
        kwargs_564017 = {}
        # Getting the type of 'map' (line 107)
        map_564003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 18), 'map', False)
        # Calling map(args, kwargs) (line 107)
        map_call_result_564018 = invoke(stypy.reporting.localization.Localization(__file__, 107, 18), map_564003, *[_stypy_temp_lambda_485_564015, row_564016], **kwargs_564017)
        
        # Assigning a type to the variable 'row' (line 107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 107, 12), 'row', map_call_result_564018)
        
        # Call to write(...): (line 108)
        # Processing the call arguments (line 108)
        str_564021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 108, 20), 'str', '{')
        # Processing the call keyword arguments (line 108)
        kwargs_564022 = {}
        # Getting the type of 'f' (line 108)
        f_564019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 12), 'f', False)
        # Obtaining the member 'write' of a type (line 108)
        write_564020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 108, 12), f_564019, 'write')
        # Calling write(args, kwargs) (line 108)
        write_call_result_564023 = invoke(stypy.reporting.localization.Localization(__file__, 108, 12), write_564020, *[str_564021], **kwargs_564022)
        
        
        # Call to write(...): (line 109)
        # Processing the call arguments (line 109)
        
        # Call to join(...): (line 109)
        # Processing the call arguments (line 109)
        # Getting the type of 'row' (line 109)
        row_564028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 30), 'row', False)
        # Processing the call keyword arguments (line 109)
        kwargs_564029 = {}
        str_564026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 109, 20), 'str', ', ')
        # Obtaining the member 'join' of a type (line 109)
        join_564027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 109, 20), str_564026, 'join')
        # Calling join(args, kwargs) (line 109)
        join_call_result_564030 = invoke(stypy.reporting.localization.Localization(__file__, 109, 20), join_564027, *[row_564028], **kwargs_564029)
        
        # Processing the call keyword arguments (line 109)
        kwargs_564031 = {}
        # Getting the type of 'f' (line 109)
        f_564024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 12), 'f', False)
        # Obtaining the member 'write' of a type (line 109)
        write_564025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 109, 12), f_564024, 'write')
        # Calling write(args, kwargs) (line 109)
        write_call_result_564032 = invoke(stypy.reporting.localization.Localization(__file__, 109, 12), write_564025, *[join_call_result_564030], **kwargs_564031)
        
        
        
        # Getting the type of 'k' (line 110)
        k_564033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 15), 'k')
        # Getting the type of 'K' (line 110)
        K_564034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 19), 'K')
        int_564035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 110, 23), 'int')
        # Applying the binary operator '-' (line 110)
        result_sub_564036 = python_operator(stypy.reporting.localization.Localization(__file__, 110, 19), '-', K_564034, int_564035)
        
        # Applying the binary operator '<' (line 110)
        result_lt_564037 = python_operator(stypy.reporting.localization.Localization(__file__, 110, 15), '<', k_564033, result_sub_564036)
        
        # Testing the type of an if condition (line 110)
        if_condition_564038 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 110, 12), result_lt_564037)
        # Assigning a type to the variable 'if_condition_564038' (line 110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 110, 12), 'if_condition_564038', if_condition_564038)
        # SSA begins for if statement (line 110)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to write(...): (line 111)
        # Processing the call arguments (line 111)
        str_564041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 111, 24), 'str', '},\n')
        # Processing the call keyword arguments (line 111)
        kwargs_564042 = {}
        # Getting the type of 'f' (line 111)
        f_564039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 111, 16), 'f', False)
        # Obtaining the member 'write' of a type (line 111)
        write_564040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 111, 16), f_564039, 'write')
        # Calling write(args, kwargs) (line 111)
        write_call_result_564043 = invoke(stypy.reporting.localization.Localization(__file__, 111, 16), write_564040, *[str_564041], **kwargs_564042)
        
        # SSA branch for the else part of an if statement (line 110)
        module_type_store.open_ssa_branch('else')
        
        # Call to write(...): (line 113)
        # Processing the call arguments (line 113)
        str_564046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 113, 24), 'str', '}};\n')
        # Processing the call keyword arguments (line 113)
        kwargs_564047 = {}
        # Getting the type of 'f' (line 113)
        f_564044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 16), 'f', False)
        # Obtaining the member 'write' of a type (line 113)
        write_564045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 113, 16), f_564044, 'write')
        # Calling write(args, kwargs) (line 113)
        write_call_result_564048 = invoke(stypy.reporting.localization.Localization(__file__, 113, 16), write_564045, *[str_564046], **kwargs_564047)
        
        # SSA join for if statement (line 110)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to write(...): (line 114)
        # Processing the call arguments (line 114)
        # Getting the type of 'footer' (line 114)
        footer_564051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 16), 'footer', False)
        # Processing the call keyword arguments (line 114)
        kwargs_564052 = {}
        # Getting the type of 'f' (line 114)
        f_564049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 8), 'f', False)
        # Obtaining the member 'write' of a type (line 114)
        write_564050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 114, 8), f_564049, 'write')
        # Calling write(args, kwargs) (line 114)
        write_call_result_564053 = invoke(stypy.reporting.localization.Localization(__file__, 114, 8), write_564050, *[footer_564051], **kwargs_564052)
        
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 104)
        exit___564054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 104, 9), open_call_result_563984, '__exit__')
        with_exit_564055 = invoke(stypy.reporting.localization.Localization(__file__, 104, 9), exit___564054, None, None, None)

    
    # Call to rename(...): (line 115)
    # Processing the call arguments (line 115)
    # Getting the type of 'fn' (line 115)
    fn_564058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 14), 'fn', False)
    str_564059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 115, 19), 'str', '.new')
    # Applying the binary operator '+' (line 115)
    result_add_564060 = python_operator(stypy.reporting.localization.Localization(__file__, 115, 14), '+', fn_564058, str_564059)
    
    # Getting the type of 'fn' (line 115)
    fn_564061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 27), 'fn', False)
    # Processing the call keyword arguments (line 115)
    kwargs_564062 = {}
    # Getting the type of 'os' (line 115)
    os_564056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 4), 'os', False)
    # Obtaining the member 'rename' of a type (line 115)
    rename_564057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 115, 4), os_564056, 'rename')
    # Calling rename(args, kwargs) (line 115)
    rename_call_result_564063 = invoke(stypy.reporting.localization.Localization(__file__, 115, 4), rename_564057, *[result_add_564060, fn_564061], **kwargs_564062)
    
    
    # ################# End of 'main(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'main' in the type store
    # Getting the type of 'stypy_return_type' (line 97)
    stypy_return_type_564064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_564064)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'main'
    return stypy_return_type_564064

# Assigning a type to the variable 'main' (line 97)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 97, 0), 'main', main)

if (__name__ == '__main__'):
    
    # Call to main(...): (line 119)
    # Processing the call keyword arguments (line 119)
    kwargs_564066 = {}
    # Getting the type of 'main' (line 119)
    main_564065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 4), 'main', False)
    # Calling main(args, kwargs) (line 119)
    main_call_result_564067 = invoke(stypy.reporting.localization.Localization(__file__, 119, 4), main_564065, *[], **kwargs_564066)
    


# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
